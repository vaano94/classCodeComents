Absent (/android/guava/src/com/google/common/base/Absent.java)/** Implementation of an {@link Optional} not containing a reference. */
AbstractIterator (/android/guava/src/com/google/common/base/AbstractIterator.java)/**
 * Note this class is a copy of {@link com.google.common.collect.AbstractIterator} (for dependency
 * reasons).
 */
Ascii (/android/guava/src/com/google/common/base/Ascii.java)/**
 * Static methods pertaining to ASCII characters (those in the range of values {@code 0x00} through
 * {@code 0x7F}), and to strings containing such characters.
 *
 * <p>ASCII utilities also exist in other classes of this package:
 *
 * <ul>
 *   <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->
 *   <li>{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.
 *   <li>{@link CharMatcher#ascii} matches ASCII characters and provides text processing methods
 *       which operate only on the ASCII characters of a string.
 * </ul>
 *
 * @author Catherine Berry
 * @author Gregory Kick
 * @since 7.0
 */
FastMatcher (/android/guava/src/com/google/common/base/CharMatcher.java)/** A matcher for which precomputation will not yield any significant benefit. */
NamedFastMatcher (/android/guava/src/com/google/common/base/CharMatcher.java)/** {@link FastMatcher} which overrides {@code toString()} with a custom name. */
NegatedFastMatcher (/android/guava/src/com/google/common/base/CharMatcher.java)/** Negation of a {@link FastMatcher}. */
BitSetMatcher (/android/guava/src/com/google/common/base/CharMatcher.java)/** Fast matcher using a {@link BitSet} table of matching characters. */
Any (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #any()}. */
None (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #none()}. */
Whitespace (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #whitespace()}. */
BreakingWhitespace (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #breakingWhitespace()}. */
Ascii (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #ascii()}. */
RangesMatcher (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation that matches characters that fall within multiple ranges. */
Digit (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #digit()}. */
JavaDigit (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaDigit()}. */
JavaLetter (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaLetter()}. */
JavaLetterOrDigit (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaLetterOrDigit()}. */
JavaUpperCase (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaUpperCase()}. */
JavaLowerCase (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaLowerCase()}. */
JavaIsoControl (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaIsoControl()}. */
Invisible (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #invisible()}. */
SingleWidth (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #singleWidth()}. */
Negated (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #negate()}. */
And (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #and(CharMatcher)}. */
Or (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #or(CharMatcher)}. */
Is (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #is(char)}. */
IsNot (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #isNot(char)}. */
IsEither (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #anyOf(CharSequence)} for exactly two characters. */
AnyOf (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #anyOf(CharSequence)} for three or more characters. */
InRange (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #inRange(char, char)}. */
ForPredicate (/android/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #forPredicate(Predicate)}. */
CharMatcher (/android/guava/src/com/google/common/base/CharMatcher.java)/**
 * Determines a true or false value for any Java {@code char} value, just as {@link Predicate} does
 * for any {@link Object}. Also offers basic text processing methods based on this function.
 * Implementations are strongly encouraged to be side-effect-free and immutable.
 *
 * <p>Throughout the documentation of this class, the phrase "matching character" is used to mean
 * "any {@code char} value {@code c} for which {@code this.matches(c)} returns {@code true}".
 *
 * <p><b>Warning:</b> This class deals only with {@code char} values, that is, <a
 * href="http://www.unicode.org/glossary/#BMP_character">BMP characters</a>. It does not understand
 * <a href="http://www.unicode.org/glossary/#supplementary_code_point">supplementary Unicode code
 * points</a> in the range {@code 0x10000} to {@code 0x10FFFF} which includes the majority of
 * assigned characters, including important CJK characters and emoji.
 *
 * <p>Supplementary characters are <a
 * href="https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#supplementary">encoded
 * into a {@code String} using surrogate pairs</a>, and a {@code CharMatcher} treats these just as
 * two separate characters. {@link #countIn} counts each supplementary character as 2 {@code char}s.
 *
 * <p>For up-to-date Unicode character properties (digit, letter, etc.) and support for
 * supplementary code points, use ICU4J UCharacter and UnicodeSet (freeze() after building). For
 * basic text processing based on UnicodeSet use the ICU4J UnicodeSetSpanner.
 *
 * <p>Example usages:
 *
 * <pre>
 *   String trimmed = {@link #whitespace() whitespace()}.{@link #trimFrom trimFrom}(userInput);
 *   if ({@link #ascii() ascii()}.{@link #matchesAllOf matchesAllOf}(s)) { ... }</pre>
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/StringsExplained#charmatcher">{@code CharMatcher}
 * </a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Charsets (/android/guava/src/com/google/common/base/Charsets.java)/**
 * Contains constant definitions for the six standard {@link Charset} instances, which are
 * guaranteed to be supported by all Java platform implementations.
 *
 * <p>Assuming you're free to choose, note that <b>{@link #UTF_8} is widely preferred</b>.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/StringsExplained#charsets">{@code Charsets}</a>.
 *
 * @author Mike Bostock
 * @since 1.0
 */
CommonMatcher (/android/guava/src/com/google/common/base/CommonMatcher.java)/**
 * The subset of the {@link java.util.regex.Matcher} API which is used by this package, and also
 * shared with the {@code re2j} library. For internal use only. Please refer to the {@code Matcher}
 * javadoc for details.
 */
CommonPattern (/android/guava/src/com/google/common/base/CommonPattern.java)/**
 * The subset of the {@link java.util.regex.Pattern} API which is used by this package, and also
 * shared with the {@code re2j} library. For internal use only. Please refer to the {@code Pattern}
 * javadoc for details.
 */
IdentityConverter (/android/guava/src/com/google/common/base/Converter.java)/**
   * A converter that always converts or reverses an object to itself. Note that T is now a
   * "pass-through type".
   */
Converter (/android/guava/src/com/google/common/base/Converter.java)/**
 * A function from {@code A} to {@code B} with an associated <i>reverse</i> function from {@code B}
 * to {@code A}; used for converting back and forth between <i>different representations of the same
 * information</i>.
 *
 * <h3>Invertibility</h3>
 *
 * <p>The reverse operation <b>may</b> be a strict <i>inverse</i> (meaning that {@code
 * converter.reverse().convert(converter.convert(a)).equals(a)} is always true). However, it is very
 * common (perhaps <i>more</i> common) for round-trip conversion to be <i>lossy</i>. Consider an
 * example round-trip using {@link com.google.common.primitives.Doubles#stringConverter}:
 *
 * <ol>
 *   <li>{@code stringConverter().convert("1.00")} returns the {@code Double} value {@code 1.0}
 *   <li>{@code stringConverter().reverse().convert(1.0)} returns the string {@code "1.0"} --
 *       <i>not</i> the same string ({@code "1.00"}) we started with
 * </ol>
 *
 * <p>Note that it should still be the case that the round-tripped and original objects are
 * <i>similar</i>.
 *
 * <h3>Nullability</h3>
 *
 * <p>A converter always converts {@code null} to {@code null} and non-null references to non-null
 * references. It would not make sense to consider {@code null} and a non-null reference to be
 * "different representations of the same information", since one is distinguishable from
 * <i>missing</i> information and the other is not. The {@link #convert} method handles this null
 * behavior for all converters; implementations of {@link #doForward} and {@link #doBackward} are
 * guaranteed to never be passed {@code null}, and must never return {@code null}.
 *
 *
 * <h3>Common ways to use</h3>
 *
 * <p>Getting a converter:
 *
 * <ul>
 *   <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link
 *       com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain
 *       #reverse reverse} views of these.
 *   <li>Convert between specific preset values using {@link
 *       com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to
 *       create a "fake" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i>
 *       the {@code Converter} type using a mocking framework.
 *   <li>Extend this class and implement its {@link #doForward} and {@link #doBackward} methods.
 *   <li><b>Java 8 users:</b> you may prefer to pass two lambda expressions or method references to
 *       the {@link #from from} factory method.
 * </ul>
 *
 * <p>Using a converter:
 *
 * <ul>
 *   <li>Convert one instance in the "forward" direction using {@code converter.convert(a)}.
 *   <li>Convert multiple instances "forward" using {@code converter.convertAll(as)}.
 *   <li>Convert in the "backward" direction using {@code converter.reverse().convert(b)} or {@code
 *       converter.reverse().convertAll(bs)}.
 *   <li>Use {@code converter} or {@code converter.reverse()} anywhere a {@link
 *       java.util.function.Function} is accepted (for example {@link java.util.stream.Stream#map
 *       Stream.map}).
 *   <li><b>Do not</b> call {@link #doForward} or {@link #doBackward} directly; these exist only to
 *       be overridden.
 * </ul>
 *
 * <h3>Example</h3>
 *
 * <pre>
 *   return new Converter&lt;Integer, String&gt;() {
 *     protected String doForward(Integer i) {
 *       return Integer.toHexString(i);
 *     }
 *
 *     protected Integer doBackward(String s) {
 *       return parseUnsignedInt(s, 16);
 *     }
 *   };</pre>
 *
 * <p>An alternative using Java 8:
 *
 * <pre>{@code
 * return Converter.from(
 *     Integer::toHexString,
 *     s -> parseUnsignedInt(s, 16));
 * }</pre>
 *
 * @author Mike Ward
 * @author Kurt Alfred Kluever
 * @author Gregory Kick
 * @since 16.0
 */
Defaults (/android/guava/src/com/google/common/base/Defaults.java)/**
 * This class provides default values for all Java types, as defined by the JLS.
 *
 * @author Ben Yu
 * @since 1.0
 */
Enums (/android/guava/src/com/google/common/base/Enums.java)/**
 * Utility methods for working with {@link Enum} instances.
 *
 * @author Steve McKay
 * @since 9.0
 */
Wrapper (/android/guava/src/com/google/common/base/Equivalence.java)/**
   * Wraps an object so that {@link #equals(Object)} and {@link #hashCode()} delegate to an {@link
   * Equivalence}.
   *
   * <p>For example, given an {@link Equivalence} for {@link String strings} named {@code equiv}
   * that tests equivalence using their lengths:
   *
   * <pre>{@code
   * equiv.wrap("a").equals(equiv.wrap("b")) // true
   * equiv.wrap("a").equals(equiv.wrap("hello")) // false
   * }</pre>
   *
   * <p>Note in particular that an equivalence wrapper is never equal to the object it wraps.
   *
   * <pre>{@code
   * equiv.wrap(obj).equals(obj) // always false
   * }</pre>
   *
   * @since 10.0
   */
Equivalence (/android/guava/src/com/google/common/base/Equivalence.java)/**
 * A strategy for determining whether two instances are considered equivalent, and for computing
 * hash codes in a manner consistent with that equivalence. Two examples of equivalences are the
 * {@linkplain #identity() identity equivalence} and the {@linkplain #equals "equals" equivalence}.
 *
 * <p><b>For users targeting Android API level 24 or higher:</b> This class will eventually
 * implement {@code BiPredicate<T, T>} (as it does in the main Guava artifact), but we currently
 * target a lower API level. In the meantime, if you have support for method references you can use
 * an equivalence as a bi-predicate like this: {@code myEquivalence::equivalent}.
 *
 * @author Bob Lee
 * @author Ben Yu
 * @author Gregory Kick
 * @since 10.0 (<a href="https://github.com/google/guava/wiki/Compatibility">mostly
 *     source-compatible</a> since 4.0)
 */
ExtraObjectsMethodsForWeb (/android/guava/src/com/google/common/base/ExtraObjectsMethodsForWeb.java)/**
 * Holder for extra methods of {@code Objects} only in web. Intended to be empty for regular
 * version.
 */
FinalizablePhantomReference (/android/guava/src/com/google/common/base/FinalizablePhantomReference.java)/**
 * Phantom reference with a {@code finalizeReferent()} method which a background thread invokes
 * after the garbage collector reclaims the referent. This is a simpler alternative to using a
 * {@link ReferenceQueue}.
 *
 * <p>Unlike a normal phantom reference, this reference will be cleared automatically.
 *
 * @author Bob Lee
 * @since 2.0
 */
FinalizableReference (/android/guava/src/com/google/common/base/FinalizableReference.java)/**
 * Implemented by references that have code to run after garbage collection of their referents.
 *
 * @see FinalizableReferenceQueue
 * @author Bob Lee
 * @since 2.0
 */
FinalizerLoader (/android/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/** Loads Finalizer.class. */
SystemLoader (/android/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/**
   * Tries to load Finalizer from the system class loader. If Finalizer is in the system class path,
   * we needn't create a separate loader.
   */
DecoupledLoader (/android/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/**
   * Try to load Finalizer in its own class loader. If Finalizer's thread had a direct reference to
   * our class loader (which could be that of a dynamically loaded web application or OSGi bundle),
   * it would prevent our class loader from getting garbage collected.
   */
DirectLoader (/android/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/**
   * Loads Finalizer directly using the current class loader. We won't be able to garbage collect
   * this class loader, but at least the world doesn't end.
   */
FinalizableReferenceQueue (/android/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/**
 * A reference queue with an associated background thread that dequeues references and invokes
 * {@link FinalizableReference#finalizeReferent()} on them.
 *
 * <p>Keep a strong reference to this object until all of the associated referents have been
 * finalized. If this object is garbage collected earlier, the backing thread will not invoke {@code
 * finalizeReferent()} on the remaining references.
 *
 * <p>As an example of how this is used, imagine you have a class {@code MyServer} that creates a a
 * {@link java.net.ServerSocket ServerSocket}, and you would like to ensure that the {@code
 * ServerSocket} is closed even if the {@code MyServer} object is garbage-collected without calling
 * its {@code close} method. You <em>could</em> use a finalizer to accomplish this, but that has a
 * number of well-known problems. Here is how you might use this class instead:
 *
 * <pre>{@code
 * public class MyServer implements Closeable {
 *   private static final FinalizableReferenceQueue frq = new FinalizableReferenceQueue();
 *   // You might also share this between several objects.
 *
 *   private static final Set<Reference<?>> references = Sets.newConcurrentHashSet();
 *   // This ensures that the FinalizablePhantomReference itself is not garbage-collected.
 *
 *   private final ServerSocket serverSocket;
 *
 *   private MyServer(...) {
 *     ...
 *     this.serverSocket = new ServerSocket(...);
 *     ...
 *   }
 *
 *   public static MyServer create(...) {
 *     MyServer myServer = new MyServer(...);
 *     final ServerSocket serverSocket = myServer.serverSocket;
 *     Reference<?> reference = new FinalizablePhantomReference<MyServer>(myServer, frq) {
 *       public void finalizeReferent() {
 *         references.remove(this):
 *         if (!serverSocket.isClosed()) {
 *           ...log a message about how nobody called close()...
 *           try {
 *             serverSocket.close();
 *           } catch (IOException e) {
 *             ...
 *           }
 *         }
 *       }
 *     };
 *     references.add(reference);
 *     return myServer;
 *   }
 *
 *   public void close() {
 *     serverSocket.close();
 *   }
 * }
 * }</pre>
 *
 * @author Bob Lee
 * @since 2.0
 */
FinalizableSoftReference (/android/guava/src/com/google/common/base/FinalizableSoftReference.java)/**
 * Soft reference with a {@code finalizeReferent()} method which a background thread invokes after
 * the garbage collector reclaims the referent. This is a simpler alternative to using a {@link
 * ReferenceQueue}.
 *
 * @author Bob Lee
 * @since 2.0
 */
FinalizableWeakReference (/android/guava/src/com/google/common/base/FinalizableWeakReference.java)/**
 * Weak reference with a {@code finalizeReferent()} method which a background thread invokes after
 * the garbage collector reclaims the referent. This is a simpler alternative to using a {@link
 * ReferenceQueue}.
 *
 * @author Bob Lee
 * @since 2.0
 */
Function (/android/guava/src/com/google/common/base/Function.java)/**
 * Determines an output value based on an input value; a pre-Java-8 version of {@link
 * java.util.function.Function java.util.function.Function}.
 *
 * <p>The {@link Functions} class provides common functions and related utilities.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/FunctionalExplained">the use of {@code Function}</a>.
 *
 * <h3>For Java 8+ users</h3>
 *
 * <p>This interface is now a legacy type. Use {@code java.util.function.Function} (or the
 * appropriate primitive specialization such as {@code ToIntFunction}) instead whenever possible.
 * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions
 * or method references instead of classes, leaving your code easier to migrate in the future.
 *
 * <p>To use an existing function (say, named {@code function}) in a context where the <i>other
 * type</i> of function is expected, use the method reference {@code function::apply}. A future
 * version of {@code com.google.common.base.Function} will be made to <i>extend</i> {@code
 * java.util.function.Function}, making conversion code necessary only in one direction. At that
 * time, this interface will be officially discouraged.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
FunctionalEquivalence (/android/guava/src/com/google/common/base/FunctionalEquivalence.java)/**
 * Equivalence applied on functional result.
 *
 * @author Bob Lee
 * @since 10.0
 */
PredicateFunction (/android/guava/src/com/google/common/base/Functions.java)/** @see Functions#forPredicate */
SupplierFunction (/android/guava/src/com/google/common/base/Functions.java)/** @see Functions#forSupplier */
Functions (/android/guava/src/com/google/common/base/Functions.java)/**
 * Static utility methods pertaining to {@code com.google.common.base.Function} instances; see that
 * class for information about migrating to {@code java.util.function}.
 *
 * <p>All methods return serializable functions as long as they're given serializable parameters.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/FunctionalExplained">the use of {@code Function}</a>.
 *
 * @author Mike Bostock
 * @author Jared Levy
 * @since 2.0
 */
Finalizer (/android/guava/src/com/google/common/base/internal/Finalizer.java)/**
 * Thread that finalizes referents. All references should implement {@code
 * com.google.common.base.FinalizableReference}.
 *
 * <p>While this class is public, we consider it to be *internal* and not part of our published API.
 * It is public so we can access it reflectively across class loaders in secure environments.
 *
 * <p>This class can't depend on other Guava code. If we were to load this class in the same class
 * loader as the rest of Guava, this thread would keep an indirect strong reference to the class
 * loader and prevent it from being garbage collected. This poses a problem for environments where
 * you want to throw away the class loader. For example, dynamically reloading a web application or
 * unloading an OSGi bundle.
 *
 * <p>{@code com.google.common.base.FinalizableReferenceQueue} loads this class in its own class
 * loader. That way, this class doesn't prevent the main class loader from getting garbage
 * collected, and this class can detect when the main class loader has been garbage collected and
 * stop itself.
 */
JdkPattern (/android/guava/src/com/google/common/base/JdkPattern.java)/** A regex pattern implementation which is backed by the {@link Pattern}. */
MapJoiner (/android/guava/src/com/google/common/base/Joiner.java)/**
   * An object that joins map entries in the same manner as {@code Joiner} joins iterables and
   * arrays. Like {@code Joiner}, it is thread-safe and immutable.
   *
   * <p>In addition to operating on {@code Map} instances, {@code MapJoiner} can operate on {@code
   * Multimap} entries in two distinct modes:
   *
   * <ul>
   *   <li>To output a separate entry for each key-value pair, pass {@code multimap.entries()} to a
   *       {@code MapJoiner} method that accepts entries as input, and receive output of the form
   *       {@code key1=A&key1=B&key2=C}.
   *   <li>To output a single entry for each key, pass {@code multimap.asMap()} to a {@code
   *       MapJoiner} method that accepts a map as input, and receive output of the form {@code
   *       key1=[A, B]&key2=C}.
   * </ul>
   *
   * @since 2.0
   */
Joiner (/android/guava/src/com/google/common/base/Joiner.java)/**
 * An object which joins pieces of text (specified as an array, {@link Iterable}, varargs or even a
 * {@link Map}) with a separator. It either appends the results to an {@link Appendable} or returns
 * them as a {@link String}. Example:
 *
 * <pre>{@code
 * Joiner joiner = Joiner.on("; ").skipNulls();
 *  . . .
 * return joiner.join("Harry", null, "Ron", "Hermione");
 * }</pre>
 *
 * <p>This returns the string {@code "Harry; Ron; Hermione"}. Note that all input elements are
 * converted to strings using {@link Object#toString()} before being appended.
 *
 * <p>If neither {@link #skipNulls()} nor {@link #useForNull(String)} is specified, the joining
 * methods will throw {@link NullPointerException} if any given element is null.
 *
 * <p><b>Warning: joiner instances are always immutable</b>; a configuration method such as {@code
 * useForNull} has no effect on the instance it is invoked on! You must store and use the new joiner
 * instance returned by the method. This makes joiners thread-safe, and safe to store as {@code
 * static final} constants.
 *
 * <pre>{@code
 * // Bad! Do not do this!
 * Joiner joiner = Joiner.on(',');
 * joiner.skipNulls(); // does nothing!
 * return joiner.join("wrong", null, "wrong");
 * }</pre>
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/StringsExplained#joiner">{@code Joiner}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
ToStringHelper (/android/guava/src/com/google/common/base/MoreObjects.java)/**
   * Support class for {@link MoreObjects#toStringHelper}.
   *
   * @author Jason Lee
   * @since 18.0 (since 2.0 as {@code Objects.ToStringHelper}).
   */
MoreObjects (/android/guava/src/com/google/common/base/MoreObjects.java)/**
 * Helper functions that operate on any {@code Object}, and are not already provided in {@link
 * java.util.Objects}.
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained">writing {@code Object}
 * methods with {@code MoreObjects}</a>.
 *
 * @author Laurence Gonsalves
 * @since 18.0 (since 2.0 as {@code Objects})
 */
Objects (/android/guava/src/com/google/common/base/Objects.java)/**
 * Helper functions that can operate on any {@code Object}.
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained">writing {@code Object}
 * methods with {@code Objects}</a>.
 *
 * @author Laurence Gonsalves
 * @since 2.0
 */
Optional (/android/guava/src/com/google/common/base/Optional.java)/**
 * An immutable object that may contain a non-null reference to another object. Each instance of
 * this type either contains a non-null reference, or contains nothing (in which case we say that
 * the reference is "absent"); it is never said to "contain {@code null}".
 *
 * <p>A non-null {@code Optional<T>} reference can be used as a replacement for a nullable {@code T}
 * reference. It allows you to represent "a {@code T} that must be present" and a "a {@code T} that
 * might be absent" as two distinct types in your program, which can aid clarity.
 *
 * <p>Some uses of this class include
 *
 * <ul>
 *   <li>As a method return type, as an alternative to returning {@code null} to indicate that no
 *       value was available
 *   <li>To distinguish between "unknown" (for example, not present in a map) and "known to have no
 *       value" (present in the map, with value {@code Optional.absent()})
 *   <li>To wrap nullable references for storage in a collection that does not support {@code null}
 *       (though there are <a
 *       href="https://github.com/google/guava/wiki/LivingWithNullHostileCollections">several other
 *       approaches to this</a> that should be considered first)
 * </ul>
 *
 * <p>A common alternative to using this class is to find or create a suitable <a
 * href="http://en.wikipedia.org/wiki/Null_Object_pattern">null object</a> for the type in question.
 *
 * <p>This class is not intended as a direct analogue of any existing "option" or "maybe" construct
 * from other programming environments, though it may bear some similarities.
 *
 * <p><b>Comparison to {@code java.util.Optional} (JDK 8 and higher):</b> A new {@code Optional}
 * class was added for Java 8. The two classes are extremely similar, but incompatible (they cannot
 * share a common supertype). <i>All</i> known differences are listed either here or with the
 * relevant methods below.
 *
 * <ul>
 *   <li>This class is serializable; {@code java.util.Optional} is not.
 *   <li>{@code java.util.Optional} has the additional methods {@code ifPresent}, {@code filter},
 *       {@code flatMap}, and {@code orElseThrow}.
 *   <li>{@code java.util} offers the primitive-specialized versions {@code OptionalInt}, {@code
 *       OptionalLong} and {@code OptionalDouble}, the use of which is recommended; Guava does not
 *       have these.
 * </ul>
 *
 * <p><b>There are no plans to deprecate this class in the foreseeable future.</b> However, we do
 * gently recommend that you prefer the new, standard Java class whenever possible.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional">using {@code
 * Optional}</a>.
 *
 * @param <T> the type of instance that can be contained. {@code Optional} is naturally covariant on
 *     this type, so it is safe to cast an {@code Optional<T>} to {@code Optional<S>} for any
 *     supertype {@code S} of {@code T}.
 * @author Kurt Alfred Kluever
 * @author Kevin Bourrillion
 * @since 10.0
 */
PatternCompiler (/android/guava/src/com/google/common/base/PatternCompiler.java)/**
 * Pluggable interface for compiling a regex pattern. By default this package uses the {@code
 * java.util.regex} library, but an alternate implementation can be supplied using the {@link
 * java.util.ServiceLoader} mechanism.
 */
Platform (/android/guava/src/com/google/common/base/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * @author Jesse Wilson
 */
Preconditions (/android/guava/src/com/google/common/base/Preconditions.java)/**
 * Static convenience methods that help a method or constructor check whether it was invoked
 * correctly (that is, whether its <i>preconditions</i> were met).
 *
 * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake. This allows constructs such as
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   if (value < 0) {
 *     throw new IllegalArgumentException("input is negative: " + value);
 *   }
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>to be replaced with the more compact
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   checkArgument(value >= 0, "input is negative: %s", value);
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>so that a hypothetical bad caller of this method, such as:
 *
 * <pre>{@code
 * void exampleBadCaller() {
 *   double d = sqrt(-1.0);
 * }
 * }</pre>
 *
 * <p>would be flagged as having called {@code sqrt()} with an illegal argument.
 *
 * <h3>Performance</h3>
 *
 * <p>Avoid passing message arguments that are expensive to compute; your code will always compute
 * them, even though they usually won't be needed. If you have such arguments, use the conventional
 * if/throw idiom instead.
 *
 * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
 * creation. However, the methods of this class have a large number of overloads that prevent such
 * allocations in many common cases.
 *
 * <p>The message string is not formatted unless the exception will be thrown, so the cost of the
 * string formatting itself should not be a concern.
 *
 * <p>As with any performance concerns, you should consider profiling your code (in a production
 * environment if possible) before spending a lot of effort on tweaking a particular element.
 *
 * <h3>Other types of preconditions</h3>
 *
 * <p>Not every type of precondition failure is supported by these methods. Continue to throw
 * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
 * UnsupportedOperationException} in the situations they are intended for.
 *
 * <h3>Non-preconditions</h3>
 *
 * <p>It is of course possible to use the methods of this class to check for invalid conditions
 * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
 * misleading to future readers of the code and of stack traces. See <a
 * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional failures
 * explained</a> in the Guava User Guide for more advice. Notably, {@link Verify} offers assertions
 * similar to those in this class for non-precondition checks.
 *
 * <h3>{@code java.util.Objects.requireNonNull()}</h3>
 *
 * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
 * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
 * (The same goes for the message-accepting overloads.)
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template
 * strings. This only supports the {@code "%s"} specifier, not the full range of {@link
 * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the
 * number of occurrences of {@code "%s"} in the format string, {@code Preconditions} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/PreconditionsExplained">using {@code
 * Preconditions}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
Predicate (/android/guava/src/com/google/common/base/Predicate.java)/**
 * Determines a true or false value for a given input; a pre-Java-8 version of {@link
 * java.util.function.Predicate java.util.function.Predicate}.
 *
 * <p>The {@link Predicates} class provides common predicates and related utilities.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/FunctionalExplained">the use of {@code Predicate}</a>.
 *
 * <h3>For Java 8+ users</h3>
 *
 * <p>This interface is now a legacy type. Use {@code java.util.function.Predicate} (or the
 * appropriate primitive specialization such as {@code IntPredicate}) instead whenever possible.
 * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions
 * or method references instead of classes, leaving your code easier to migrate in the future.
 *
 * <p>To use a reference of this type (say, named {@code guavaPredicate}) in a context where {@code
 * java.util.function.Predicate} is expected, use the method reference {@code
 * guavaPredicate::apply}. For the other direction, use {@code javaUtilPredicate::test}. A future
 * version of this interface will be made to <i>extend</i> {@code java.util.function.Predicate}, so
 * that conversion will be necessary in only one direction. At that time, this interface will be
 * officially discouraged.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
NotPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#not(Predicate) */
AndPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#and(Iterable) */
OrPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#or(Iterable) */
IsEqualToPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#equalTo(Object) */
InstanceOfPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#instanceOf(Class) */
SubtypeOfPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#subtypeOf(Class) */
InPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#in(Collection) */
CompositionPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#compose(Predicate, Function) */
ContainsPatternPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#contains(Pattern) */
ContainsPatternFromStringPredicate (/android/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#containsPattern(String) */
Predicates (/android/guava/src/com/google/common/base/Predicates.java)/**
 * Static utility methods pertaining to {@code Predicate} instances.
 *
 * <p>All methods return serializable predicates as long as they're given serializable parameters.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/FunctionalExplained">the use of {@code Predicate}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
Present (/android/guava/src/com/google/common/base/Present.java)/** Implementation of an {@link Optional} containing a reference. */
SmallCharMatcher (/android/guava/src/com/google/common/base/SmallCharMatcher.java)/**
 * An immutable version of CharMatcher for smallish sets of characters that uses a hash table with
 * linear probing to check for matches.
 *
 * @author Christopher Swenson
 */
MapSplitter (/android/guava/src/com/google/common/base/Splitter.java)/**
   * An object that splits strings into maps as {@code Splitter} splits iterables and lists. Like
   * {@code Splitter}, it is thread-safe and immutable. The common way to build instances is by
   * providing an additional {@linkplain Splitter#withKeyValueSeparator key-value separator} to
   * {@link Splitter}.
   *
   * @since 10.0
   */
Splitter (/android/guava/src/com/google/common/base/Splitter.java)/**
 * Extracts non-overlapping substrings from an input string, typically by recognizing appearances of
 * a <i>separator</i> sequence. This separator can be specified as a single {@linkplain #on(char)
 * character}, fixed {@linkplain #on(String) string}, {@linkplain #onPattern regular expression} or
 * {@link #on(CharMatcher) CharMatcher} instance. Or, instead of using a separator at all, a
 * splitter can extract adjacent substrings of a given {@linkplain #fixedLength fixed length}.
 *
 * <p>For example, this expression:
 *
 * <pre>{@code
 * Splitter.on(',').split("foo,bar,qux")
 * }</pre>
 *
 * ... produces an {@code Iterable} containing {@code "foo"}, {@code "bar"} and {@code "qux"}, in
 * that order.
 *
 * <p>By default, {@code Splitter}'s behavior is simplistic and unassuming. The following
 * expression:
 *
 * <pre>{@code
 * Splitter.on(',').split(" foo,,,  bar ,")
 * }</pre>
 *
 * ... yields the substrings {@code [" foo", "", "", " bar ", ""]}. If this is not the desired
 * behavior, use configuration methods to obtain a <i>new</i> splitter instance with modified
 * behavior:
 *
 * <pre>{@code
 * private static final Splitter MY_SPLITTER = Splitter.on(',')
 *     .trimResults()
 *     .omitEmptyStrings();
 * }</pre>
 *
 * <p>Now {@code MY_SPLITTER.split("foo,,, bar ,")} returns just {@code ["foo", "bar"]}. Note that
 * the order in which these configuration methods are called is never significant.
 *
 * <p><b>Warning:</b> Splitter instances are immutable. Invoking a configuration method has no
 * effect on the receiving instance; you must store and use the new splitter instance it returns
 * instead.
 *
 * <pre>{@code
 * // Do NOT do this
 * Splitter splitter = Splitter.on('/');
 * splitter.trimResults(); // does nothing!
 * return splitter.split("wrong / wrong / wrong");
 * }</pre>
 *
 * <p>For separator-based splitters that do not use {@code omitEmptyStrings}, an input string
 * containing {@code n} occurrences of the separator naturally yields an iterable of size {@code n +
 * 1}. So if the separator does not occur anywhere in the input, a single substring is returned
 * containing the entire input. Consequently, all splitters split the empty string to {@code [""]}
 * (note: even fixed-length splitters).
 *
 * <p>Splitter instances are thread-safe immutable, and are therefore safe to store as {@code static
 * final} constants.
 *
 * <p>The {@link Joiner} class provides the inverse operation to splitting, but note that a
 * round-trip between the two should be assumed to be lossy.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/StringsExplained#splitter">{@code Splitter}</a>.
 *
 * @author Julien Silland
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 1.0
 */
Stopwatch (/android/guava/src/com/google/common/base/Stopwatch.java)/**
 * An object that measures elapsed time in nanoseconds. It is useful to measure elapsed time using
 * this class instead of direct calls to {@link System#nanoTime} for a few reasons:
 *
 * <ul>
 *   <li>An alternate time source can be substituted, for testing or performance reasons.
 *   <li>As documented by {@code nanoTime}, the value returned has no absolute meaning, and can only
 *       be interpreted as relative to another timestamp returned by {@code nanoTime} at a different
 *       time. {@code Stopwatch} is a more effective abstraction because it exposes only these
 *       relative values, not the absolute ones.
 * </ul>
 *
 * <p>Basic usage:
 *
 * <pre>{@code
 * Stopwatch stopwatch = Stopwatch.createStarted();
 * doSomething();
 * stopwatch.stop(); // optional
 *
 * long millis = stopwatch.elapsed(MILLISECONDS);
 *
 * log.info("time: " + stopwatch); // formatted string like "12.3 ms"
 * }</pre>
 *
 * <p>Stopwatch methods are not idempotent; it is an error to start or stop a stopwatch that is
 * already in the desired state.
 *
 * <p>When testing code that uses this class, use {@link #createUnstarted(Ticker)} or {@link
 * #createStarted(Ticker)} to supply a fake or mock ticker. This allows you to simulate any valid
 * behavior of the stopwatch.
 *
 * <p><b>Note:</b> This class is not thread-safe.
 *
 * <p><b>Warning for Android users:</b> a stopwatch with default behavior may not continue to keep
 * time while the device is asleep. Instead, create one like this:
 *
 * <pre>{@code
 * Stopwatch.createStarted(
 *      new Ticker() {
 *        public long read() {
 *          return android.os.SystemClock.elapsedRealtimeNanos();
 *        }
 *      });
 * }</pre>
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
Strings (/android/guava/src/com/google/common/base/Strings.java)/**
 * Static utility methods pertaining to {@code String} or {@code CharSequence} instances.
 *
 * @author Kevin Bourrillion
 * @since 3.0
 */
Supplier (/android/guava/src/com/google/common/base/Supplier.java)/**
 * A class that can supply objects of a single type; a pre-Java-8 version of {@link
 * java.util.function.Supplier java.util.function.Supplier}. Semantically, this could be a factory,
 * generator, builder, closure, or something else entirely. No guarantees are implied by this
 * interface.
 *
 * <p>The {@link Suppliers} class provides common suppliers and related utilities.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/FunctionalExplained">the use of functional types</a>.
 *
 * <h3>For Java 8+ users</h3>
 *
 * <p>This interface is now a legacy type. Use {@code java.util.function.Supplier} (or the
 * appropriate primitive specialization such as {@code IntSupplier}) instead whenever possible.
 * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions
 * or method references instead of classes, leaving your code easier to migrate in the future.
 *
 * <p>To use an existing supplier instance (say, named {@code supplier}) in a context where the
 * <i>other type</i> of supplier is expected, use the method reference {@code supplier::get}. A
 * future version of {@code com.google.common.base.Supplier} will be made to <i>extend</i> {@code
 * java.util.function.Supplier}, making conversion code necessary only in one direction. At that
 * time, this interface will be officially discouraged.
 *
 * @author Harry Heymann
 * @since 2.0
 */
Suppliers (/android/guava/src/com/google/common/base/Suppliers.java)/**
 * Useful suppliers.
 *
 * <p>All methods return serializable suppliers as long as they're given serializable parameters.
 *
 * @author Laurence Gonsalves
 * @author Harry Heymann
 * @since 2.0
 */
Throwables (/android/guava/src/com/google/common/base/Throwables.java)/**
 * Static utility methods pertaining to instances of {@link Throwable}.
 *
 * <p>See the Guava User Guide entry on <a
 * href="https://github.com/google/guava/wiki/ThrowablesExplained">Throwables</a>.
 *
 * @author Kevin Bourrillion
 * @author Ben Yu
 * @since 1.0
 */
Ticker (/android/guava/src/com/google/common/base/Ticker.java)/**
 * A time source; returns a time value representing the number of nanoseconds elapsed since some
 * fixed but arbitrary point in time. Note that most users should use {@link Stopwatch} instead of
 * interacting with this class directly.
 *
 * <p><b>Warning:</b> this interface can only be used to measure elapsed time, not wall time.
 *
 * @author Kevin Bourrillion
 * @since 10.0 (<a href="https://github.com/google/guava/wiki/Compatibility">mostly
 *     source-compatible</a> since 9.0)
 */
Utf8 (/android/guava/src/com/google/common/base/Utf8.java)/**
 * Low-level, high-performance utility methods related to the {@linkplain Charsets#UTF_8 UTF-8}
 * character encoding. UTF-8 is defined in section D92 of <a
 * href="http://www.unicode.org/versions/Unicode6.2.0/ch03.pdf">The Unicode Standard Core
 * Specification, Chapter 3</a>.
 *
 * <p>The variant of UTF-8 implemented by this class is the restricted definition of UTF-8
 * introduced in Unicode 3.1. One implication of this is that it rejects <a
 * href="http://www.unicode.org/versions/corrigendum1.html">"non-shortest form"</a> byte sequences,
 * even though the JDK decoder may accept them.
 *
 * @author Martin Buchholz
 * @author Clément Roux
 * @since 16.0
 */
Verify (/android/guava/src/com/google/common/base/Verify.java)/**
 * Static convenience methods that serve the same purpose as Java language <a
 * href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html">assertions</a>,
 * except that they are always enabled. These methods should be used instead of Java assertions
 * whenever there is a chance the check may fail "in real life". Example:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 *
 * // In case bug 12345 happens again we'd rather just die
 * Verify.verify(bill.status() == Status.UNPAID,
 *     "Unexpected bill status: %s", bill.status());
 * }</pre>
 *
 * <h3>Comparison to alternatives</h3>
 *
 * <p><b>Note:</b> In some cases the differences explained below can be subtle. When it's unclear
 * which approach to use, <b>don't worry</b> too much about it; just pick something that seems
 * reasonable and it will be fine.
 *
 * <ul>
 *   <li>If checking whether the <i>caller</i> has violated your method or constructor's contract
 *       (such as by passing an invalid argument), use the utilities of the {@link Preconditions}
 *       class instead.
 *   <li>If checking an <i>impossible</i> condition (which <i>cannot</i> happen unless your own
 *       class or its <i>trusted</i> dependencies is badly broken), this is what ordinary Java
 *       assertions are for. Note that assertions are not enabled by default; they are essentially
 *       considered "compiled comments."
 *   <li>An explicit {@code if/throw} (as illustrated below) is always acceptable; we still
 *       recommend using our {@link VerifyException} exception type. Throwing a plain {@link
 *       RuntimeException} is frowned upon.
 *   <li>Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since
 *       {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the
 *       same function with more clarity.
 * </ul>
 *
 * <h3>Warning about performance</h3>
 *
 * <p>Remember that parameter values for message construction must all be computed eagerly, and
 * autoboxing and varargs array creation may happen as well, even when the verification succeeds and
 * the message ends up unneeded. Performance-sensitive verification checks should continue to use
 * usual form:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 * if (bill.status() != Status.UNPAID) {
 *   throw new VerifyException("Unexpected bill status: " + bill.status());
 * }
 * }</pre>
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>As with {@link Preconditions}, {@code Verify} uses {@link Strings#lenientFormat} to format
 * error message template strings. This only supports the {@code "%s"} specifier, not the full range
 * of {@link java.util.Formatter} specifiers. However, note that if the number of arguments does not
 * match the number of occurrences of {@code "%s"} in the format string, {@code Verify} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * See <a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional
 * failures explained</a> in the Guava User Guide for advice on when this class should be used.
 *
 * @since 17.0
 */
VerifyException (/android/guava/src/com/google/common/base/VerifyException.java)/**
 * Exception thrown upon the failure of a <a
 * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">verification check</a>,
 * including those performed by the convenience methods of the {@link Verify} class.
 *
 * @since 17.0
 */
StatsCounter (/android/guava/src/com/google/common/cache/AbstractCache.java)/**
   * Accumulates statistics during the operation of a {@link Cache} for presentation by {@link
   * Cache#stats}. This is solely intended for consumption by {@code Cache} implementors.
   *
   * @since 10.0
   */
SimpleStatsCounter (/android/guava/src/com/google/common/cache/AbstractCache.java)/**
   * A thread-safe {@link StatsCounter} implementation for use by {@link Cache} implementors.
   *
   * @since 10.0
   */
AbstractCache (/android/guava/src/com/google/common/cache/AbstractCache.java)/**
 * This class provides a skeletal implementation of the {@code Cache} interface to minimize the
 * effort required to implement this interface.
 *
 * <p>To implement a cache, the programmer needs only to extend this class and provide an
 * implementation for the {@link #put} and {@link #getIfPresent} methods. {@link #getAllPresent} is
 * implemented in terms of {@link #getIfPresent}; {@link #putAll} is implemented in terms of {@link
 * #put}, {@link #invalidateAll(Iterable)} is implemented in terms of {@link #invalidate}. The
 * method {@link #cleanUp} is a no-op. All other methods throw an {@link
 * UnsupportedOperationException}.
 *
 * @author Charles Fry
 * @since 10.0
 */
AbstractLoadingCache (/android/guava/src/com/google/common/cache/AbstractLoadingCache.java)/**
 * This class provides a skeletal implementation of the {@code Cache} interface to minimize the
 * effort required to implement this interface.
 *
 * <p>To implement a cache, the programmer needs only to extend this class and provide an
 * implementation for the {@link #get(Object)} and {@link #getIfPresent} methods. {@link
 * #getUnchecked}, {@link #get(Object, Callable)}, and {@link #getAll} are implemented in terms of
 * {@code get}; {@link #getAllPresent} is implemented in terms of {@code getIfPresent}; {@link
 * #putAll} is implemented in terms of {@link #put}, {@link #invalidateAll(Iterable)} is implemented
 * in terms of {@link #invalidate}. The method {@link #cleanUp} is a no-op. All other methods throw
 * an {@link UnsupportedOperationException}.
 *
 * @author Charles Fry
 * @since 11.0
 */
Cache (/android/guava/src/com/google/common/cache/Cache.java)/**
 * A semi-persistent mapping from keys to values. Cache entries are manually added using {@link
 * #get(Object, Callable)} or {@link #put(Object, Object)}, and are stored in the cache until either
 * evicted or manually invalidated. The common way to build instances is using {@link CacheBuilder}.
 *
 * <p>Implementations of this interface are expected to be thread-safe, and can be safely accessed
 * by multiple concurrent threads.
 *
 * @author Charles Fry
 * @since 10.0
 */
CacheBuilder (/android/guava/src/com/google/common/cache/CacheBuilder.java)/**
 * A builder of {@link LoadingCache} and {@link Cache} instances having any combination of the
 * following features:
 *
 * <ul>
 *   <li>automatic loading of entries into the cache
 *   <li>least-recently-used eviction when a maximum size is exceeded
 *   <li>time-based expiration of entries, measured since last access or last write
 *   <li>keys automatically wrapped in {@linkplain WeakReference weak} references
 *   <li>values automatically wrapped in {@linkplain WeakReference weak} or {@linkplain
 *       SoftReference soft} references
 *   <li>notification of evicted (or otherwise removed) entries
 *   <li>accumulation of cache access statistics
 * </ul>
 *
 *
 * <p>These features are all optional; caches can be created using all or none of them. By default
 * cache instances created by {@code CacheBuilder} will not perform any type of eviction.
 *
 * <p>Usage example:
 *
 * <pre>{@code
 * LoadingCache<Key, Graph> graphs = CacheBuilder.newBuilder()
 *     .maximumSize(10000)
 *     .expireAfterWrite(10, TimeUnit.MINUTES)
 *     .removalListener(MY_LISTENER)
 *     .build(
 *         new CacheLoader<Key, Graph>() {
 *           public Graph load(Key key) throws AnyException {
 *             return createExpensiveGraph(key);
 *           }
 *         });
 * }</pre>
 *
 * <p>Or equivalently,
 *
 * <pre>{@code
 * // In real life this would come from a command-line flag or config file
 * String spec = "maximumSize=10000,expireAfterWrite=10m";
 *
 * LoadingCache<Key, Graph> graphs = CacheBuilder.from(spec)
 *     .removalListener(MY_LISTENER)
 *     .build(
 *         new CacheLoader<Key, Graph>() {
 *           public Graph load(Key key) throws AnyException {
 *             return createExpensiveGraph(key);
 *           }
 *         });
 * }</pre>
 *
 * <p>The returned cache is implemented as a hash table with similar performance characteristics to
 * {@link ConcurrentHashMap}. It implements all optional operations of the {@link LoadingCache} and
 * {@link Cache} interfaces. The {@code asMap} view (and its collection views) have <i>weakly
 * consistent iterators</i>. This means that they are safe for concurrent use, but if other threads
 * modify the cache after the iterator is created, it is undefined which of these changes, if any,
 * are reflected in that iterator. These iterators never throw {@link
 * ConcurrentModificationException}.
 *
 * <p><b>Note:</b> by default, the returned cache uses equality comparisons (the {@link
 * Object#equals equals} method) to determine equality for keys or values. However, if {@link
 * #weakKeys} was specified, the cache uses identity ({@code ==}) comparisons instead for keys.
 * Likewise, if {@link #weakValues} or {@link #softValues} was specified, the cache uses identity
 * comparisons for values.
 *
 * <p>Entries are automatically evicted from the cache when any of {@linkplain #maximumSize(long)
 * maximumSize}, {@linkplain #maximumWeight(long) maximumWeight}, {@linkplain #expireAfterWrite
 * expireAfterWrite}, {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys
 * weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain #softValues softValues} are
 * requested.
 *
 * <p>If {@linkplain #maximumSize(long) maximumSize} or {@linkplain #maximumWeight(long)
 * maximumWeight} is requested entries may be evicted on each cache modification.
 *
 * <p>If {@linkplain #expireAfterWrite expireAfterWrite} or {@linkplain #expireAfterAccess
 * expireAfterAccess} is requested entries may be evicted on each cache modification, on occasional
 * cache accesses, or on calls to {@link Cache#cleanUp}. Expired entries may be counted by {@link
 * Cache#size}, but will never be visible to read or write operations.
 *
 * <p>If {@linkplain #weakKeys weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain
 * #softValues softValues} are requested, it is possible for a key or value present in the cache to
 * be reclaimed by the garbage collector. Entries with reclaimed keys or values may be removed from
 * the cache on each cache modification, on occasional cache accesses, or on calls to {@link
 * Cache#cleanUp}; such entries may be counted in {@link Cache#size}, but will never be visible to
 * read or write operations.
 *
 * <p>Certain cache configurations will result in the accrual of periodic maintenance tasks which
 * will be performed during write operations, or during occasional read operations in the absence of
 * writes. The {@link Cache#cleanUp} method of the returned cache will also perform maintenance, but
 * calling it should not be necessary with a high throughput cache. Only caches built with
 * {@linkplain #removalListener removalListener}, {@linkplain #expireAfterWrite expireAfterWrite},
 * {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys weakKeys}, {@linkplain
 * #weakValues weakValues}, or {@linkplain #softValues softValues} perform periodic maintenance.
 *
 * <p>The caches produced by {@code CacheBuilder} are serializable, and the deserialized caches
 * retain all the configuration properties of the original cache. Note that the serialized form does
 * <i>not</i> include cache contents, but only configuration.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/CachesExplained">caching</a> for a higher-level
 * explanation.
 *
 * @param <K> the most general key type this builder will be able to create caches for. This is
 *     normally {@code Object} unless it is constrained by using a method like {@code
 *     #removalListener}
 * @param <V> the most general value type this builder will be able to create caches for. This is
 *     normally {@code Object} unless it is constrained by using a method like {@code
 *     #removalListener}
 * @author Charles Fry
 * @author Kevin Bourrillion
 * @since 10.0
 */
ValueParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parses a single value. */
IntegerParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Base class for parsing integers. */
LongParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Base class for parsing integers. */
InitialCapacityParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse initialCapacity */
MaximumSizeParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse maximumSize */
MaximumWeightParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse maximumWeight */
ConcurrencyLevelParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse concurrencyLevel */
KeyStrengthParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse weakKeys */
ValueStrengthParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse weakValues and softValues */
RecordStatsParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse recordStats */
DurationParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Base class for parsing times with durations */
AccessDurationParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse expireAfterAccess */
WriteDurationParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse expireAfterWrite */
RefreshDurationParser (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse refreshAfterWrite */
CacheBuilderSpec (/android/guava/src/com/google/common/cache/CacheBuilderSpec.java)/**
 * A specification of a {@link CacheBuilder} configuration.
 *
 * <p>{@code CacheBuilderSpec} supports parsing configuration off of a string, which makes it
 * especially useful for command-line configuration of a {@code CacheBuilder}.
 *
 * <p>The string syntax is a series of comma-separated keys or key-value pairs, each corresponding
 * to a {@code CacheBuilder} method.
 *
 * <ul>
 *   <li>{@code concurrencyLevel=[integer]}: sets {@link CacheBuilder#concurrencyLevel}.
 *   <li>{@code initialCapacity=[integer]}: sets {@link CacheBuilder#initialCapacity}.
 *   <li>{@code maximumSize=[long]}: sets {@link CacheBuilder#maximumSize}.
 *   <li>{@code maximumWeight=[long]}: sets {@link CacheBuilder#maximumWeight}.
 *   <li>{@code expireAfterAccess=[duration]}: sets {@link CacheBuilder#expireAfterAccess}.
 *   <li>{@code expireAfterWrite=[duration]}: sets {@link CacheBuilder#expireAfterWrite}.
 *   <li>{@code refreshAfterWrite=[duration]}: sets {@link CacheBuilder#refreshAfterWrite}.
 *   <li>{@code weakKeys}: sets {@link CacheBuilder#weakKeys}.
 *   <li>{@code softValues}: sets {@link CacheBuilder#softValues}.
 *   <li>{@code weakValues}: sets {@link CacheBuilder#weakValues}.
 *   <li>{@code recordStats}: sets {@link CacheBuilder#recordStats}.
 * </ul>
 *
 * <p>The set of supported keys will grow as {@code CacheBuilder} evolves, but existing keys will
 * never be removed.
 *
 * <p>Durations are represented by an integer, followed by one of "d", "h", "m", or "s",
 * representing days, hours, minutes, or seconds respectively. (There is currently no syntax to
 * request expiration in milliseconds, microseconds, or nanoseconds.)
 *
 * <p>Whitespace before and after commas and equal signs is ignored. Keys may not be repeated; it is
 * also illegal to use the following pairs of keys in a single value:
 *
 * <ul>
 *   <li>{@code maximumSize} and {@code maximumWeight}
 *   <li>{@code softValues} and {@code weakValues}
 * </ul>
 *
 * <p>{@code CacheBuilderSpec} does not support configuring {@code CacheBuilder} methods with
 * non-value parameters. These must be configured in code.
 *
 * <p>A new {@code CacheBuilder} can be instantiated from a {@code CacheBuilderSpec} using {@link
 * CacheBuilder#from(CacheBuilderSpec)} or {@link CacheBuilder#from(String)}.
 *
 * @author Adam Winer
 * @since 12.0
 */
UnsupportedLoadingOperationException (/android/guava/src/com/google/common/cache/CacheLoader.java)/**
   * Exception thrown by {@code loadAll()} to indicate that it is not supported.
   *
   * @since 19.0
   */
InvalidCacheLoadException (/android/guava/src/com/google/common/cache/CacheLoader.java)/**
   * Thrown to indicate that an invalid response was returned from a call to {@link CacheLoader}.
   *
   * @since 11.0
   */
CacheLoader (/android/guava/src/com/google/common/cache/CacheLoader.java)/**
 * Computes or retrieves values, based on a key, for use in populating a {@link LoadingCache}.
 *
 * <p>Most implementations will only need to implement {@link #load}. Other methods may be
 * overridden as desired.
 *
 * <p>Usage example:
 *
 * <pre>{@code
 * CacheLoader<Key, Graph> loader = new CacheLoader<Key, Graph>() {
 *   public Graph load(Key key) throws AnyException {
 *     return createExpensiveGraph(key);
 *   }
 * };
 * LoadingCache<Key, Graph> cache = CacheBuilder.newBuilder().build(loader);
 * }</pre>
 *
 * <p>Since this example doesn't support reloading or bulk loading, if you're able to use lambda
 * expressions it can be specified even more easily:
 *
 * <pre>{@code
 * CacheLoader<Key, Graph> loader = CacheLoader.from(key -> createExpensiveGraph(key));
 * }</pre>
 *
 * @author Charles Fry
 * @since 10.0
 */
CacheStats (/android/guava/src/com/google/common/cache/CacheStats.java)/**
 * Statistics about the performance of a {@link Cache}. Instances of this class are immutable.
 *
 * <p>Cache statistics are incremented according to the following rules:
 *
 * <ul>
 *   <li>When a cache lookup encounters an existing cache entry {@code hitCount} is incremented.
 *   <li>When a cache lookup first encounters a missing cache entry, a new entry is loaded.
 *       <ul>
 *         <li>After successfully loading an entry {@code missCount} and {@code loadSuccessCount}
 *             are incremented, and the total loading time, in nanoseconds, is added to {@code
 *             totalLoadTime}.
 *         <li>When an exception is thrown while loading an entry, {@code missCount} and {@code
 *             loadExceptionCount} are incremented, and the total loading time, in nanoseconds, is
 *             added to {@code totalLoadTime}.
 *         <li>Cache lookups that encounter a missing cache entry that is still loading will wait
 *             for loading to complete (whether successful or not) and then increment {@code
 *             missCount}.
 *       </ul>
 *   <li>When an entry is evicted from the cache, {@code evictionCount} is incremented.
 *   <li>No stats are modified when a cache entry is invalidated or manually removed.
 *   <li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of
 *       the cache.
 * </ul>
 *
 * <p>A lookup is specifically defined as an invocation of one of the methods {@link
 * LoadingCache#get(Object)}, {@link LoadingCache#getUnchecked(Object)}, {@link Cache#get(Object,
 * Callable)}, or {@link LoadingCache#getAll(Iterable)}.
 *
 * @author Charles Fry
 * @since 10.0
 */
SimpleForwardingCache (/android/guava/src/com/google/common/cache/ForwardingCache.java)/**
   * A simplified version of {@link ForwardingCache} where subclasses can pass in an already
   * constructed {@link Cache} as the delegate.
   *
   * @since 10.0
   */
ForwardingCache (/android/guava/src/com/google/common/cache/ForwardingCache.java)/**
 * A cache which forwards all its method calls to another cache. Subclasses should override one or
 * more methods to modify the behavior of the backing cache as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * @author Charles Fry
 * @since 10.0
 */
SimpleForwardingLoadingCache (/android/guava/src/com/google/common/cache/ForwardingLoadingCache.java)/**
   * A simplified version of {@link ForwardingLoadingCache} where subclasses can pass in an already
   * constructed {@link LoadingCache} as the delegate.
   *
   * @since 10.0
   */
ForwardingLoadingCache (/android/guava/src/com/google/common/cache/ForwardingLoadingCache.java)/**
 * A cache which forwards all its method calls to another cache. Subclasses should override one or
 * more methods to modify the behavior of the backing cache as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p>Note that {@link #get}, {@link #getUnchecked}, and {@link #apply} all expose the same
 * underlying functionality, so should probably be overridden as a group.
 *
 * @author Charles Fry
 * @since 11.0
 */
LoadingCache (/android/guava/src/com/google/common/cache/LoadingCache.java)/**
 * A semi-persistent mapping from keys to values. Values are automatically loaded by the cache, and
 * are stored in the cache until either evicted or manually invalidated. The common way to build
 * instances is using {@link CacheBuilder}.
 *
 * <p>Implementations of this interface are expected to be thread-safe, and can be safely accessed
 * by multiple concurrent threads.
 *
 * <p>When evaluated as a {@link Function}, a cache yields the same result as invoking {@link
 * #getUnchecked}.
 *
 * @author Charles Fry
 * @since 11.0
 */
ValueReference (/android/guava/src/com/google/common/cache/LocalCache.java)/** A reference to a value. */
StrongEntry (/android/guava/src/com/google/common/cache/LocalCache.java)/** Used for strongly-referenced keys. */
WeakEntry (/android/guava/src/com/google/common/cache/LocalCache.java)/** Used for weakly-referenced keys. */
WeakValueReference (/android/guava/src/com/google/common/cache/LocalCache.java)/** References a weak value. */
SoftValueReference (/android/guava/src/com/google/common/cache/LocalCache.java)/** References a soft value. */
StrongValueReference (/android/guava/src/com/google/common/cache/LocalCache.java)/** References a strong value. */
WeightedWeakValueReference (/android/guava/src/com/google/common/cache/LocalCache.java)/** References a weak value. */
WeightedSoftValueReference (/android/guava/src/com/google/common/cache/LocalCache.java)/** References a soft value. */
WeightedStrongValueReference (/android/guava/src/com/google/common/cache/LocalCache.java)/** References a strong value. */
Segment (/android/guava/src/com/google/common/cache/LocalCache.java)/**
   * Segments are specialized versions of hash tables. This subclass inherits from ReentrantLock
   * opportunistically, just to simplify some locking and avoid separate construction.
   */
WriteQueue (/android/guava/src/com/google/common/cache/LocalCache.java)/**
   * A custom queue for managing eviction order. Note that this is tightly integrated with {@code
   * ReferenceEntry}, upon which it relies to perform its linking.
   *
   * <p>Note that this entire implementation makes the assumption that all elements which are in the
   * map are also in this queue, and that all elements not in the queue are not in the map.
   *
   * <p>The benefits of creating our own queue are that (1) we can replace elements in the middle of
   * the queue as part of copyWriteEntry, and (2) the contains method is highly optimized for the
   * current model.
   */
AccessQueue (/android/guava/src/com/google/common/cache/LocalCache.java)/**
   * A custom queue for managing access order. Note that this is tightly integrated with {@code
   * ReferenceEntry}, upon which it relies to perform its linking.
   *
   * <p>Note that this entire implementation makes the assumption that all elements which are in the
   * map are also in this queue, and that all elements not in the queue are not in the map.
   *
   * <p>The benefits of creating our own queue are that (1) we can replace elements in the middle of
   * the queue as part of copyWriteEntry, and (2) the contains method is highly optimized for the
   * current model.
   */
WriteThroughEntry (/android/guava/src/com/google/common/cache/LocalCache.java)/**
   * Custom Entry class used by EntryIterator.next(), that relays setValue changes to the underlying
   * map.
   */
ManualSerializationProxy (/android/guava/src/com/google/common/cache/LocalCache.java)/**
   * Serializes the configuration of a LocalCache, reconstituting it as a Cache using CacheBuilder
   * upon deserialization. An instance of this class is fit for use by the writeReplace of
   * LocalManualCache.
   *
   * <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so
   * the proxy must be able to behave as the cache itself.
   */
LoadingSerializationProxy (/android/guava/src/com/google/common/cache/LocalCache.java)/**
   * Serializes the configuration of a LocalCache, reconstituting it as an LoadingCache using
   * CacheBuilder upon deserialization. An instance of this class is fit for use by the writeReplace
   * of LocalLoadingCache.
   *
   * <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so
   * the proxy must be able to behave as the cache itself.
   */
LocalCache (/android/guava/src/com/google/common/cache/LocalCache.java)/**
 * The concurrent hash map implementation built by {@link CacheBuilder}.
 *
 * <p>This implementation is heavily derived from revision 1.96 of <a
 * href="http://tinyurl.com/ConcurrentHashMap">ConcurrentHashMap.java</a>.
 *
 * @author Charles Fry
 * @author Bob Lee ({@code com.google.common.collect.MapMaker})
 * @author Doug Lea ({@code ConcurrentHashMap})
 */
LongAddable (/android/guava/src/com/google/common/cache/LongAddable.java)/**
 * Abstract interface for objects that can concurrently add longs.
 *
 * @author Louis Wasserman
 */
LongAddables (/android/guava/src/com/google/common/cache/LongAddables.java)/**
 * Source of {@link LongAddable} objects that deals with GWT, Unsafe, and all that.
 *
 * @author Louis Wasserman
 */
LongAdder (/android/guava/src/com/google/common/cache/LongAdder.java)/**
 * One or more variables that together maintain an initially zero {@code long} sum. When updates
 * (method {@link #add}) are contended across threads, the set of variables may grow dynamically to
 * reduce contention. Method {@link #sum} (or, equivalently, {@link #longValue}) returns the current
 * total combined across the variables maintaining the sum.
 *
 * <p>This class is usually preferable to {@link AtomicLong} when multiple threads update a common
 * sum that is used for purposes such as collecting statistics, not for fine-grained synchronization
 * control. Under low update contention, the two classes have similar characteristics. But under
 * high contention, expected throughput of this class is significantly higher, at the expense of
 * higher space consumption.
 *
 * <p>This class extends {@link Number}, but does <em>not</em> define methods such as {@code
 * equals}, {@code hashCode} and {@code compareTo} because instances are expected to be mutated, and
 * so are not useful as collection keys.
 *
 * <p><em>jsr166e note: This class is targeted to be placed in java.util.concurrent.atomic.</em>
 *
 * @since 1.8
 * @author Doug Lea
 */
ReferenceEntry (/android/guava/src/com/google/common/cache/ReferenceEntry.java)/**
 * An entry in a reference map.
 *
 * <p>Entries in the map can be in the following states:
 *
 * <p>Valid:
 *
 * <ul>
 *   <li>Live: valid key/value are set
 *   <li>Loading: loading is pending
 * </ul>
 *
 * <p>Invalid:
 *
 * <ul>
 *   <li>Expired: time expired (key/value may still be set)
 *   <li>Collected: key/value was partially collected, but not yet cleaned up
 *   <li>Unset: marked as unset, awaiting cleanup or reuse
 * </ul>
 */
RemovalListener (/android/guava/src/com/google/common/cache/RemovalListener.java)/**
 * An object that can receive a notification when an entry is removed from a cache. The removal
 * resulting in notification could have occurred to an entry being manually removed or replaced, or
 * due to eviction resulting from timed expiration, exceeding a maximum size, or garbage collection.
 *
 * <p>An instance may be called concurrently by multiple threads to process different entries.
 * Implementations of this interface should avoid performing blocking calls or synchronizing on
 * shared resources.
 *
 * @param <K> the most general type of keys this listener can listen for; for example {@code Object}
 *     if any key is acceptable
 * @param <V> the most general type of values this listener can listen for; for example {@code
 *     Object} if any key is acceptable
 * @author Charles Fry
 * @since 10.0
 */
RemovalListeners (/android/guava/src/com/google/common/cache/RemovalListeners.java)/**
 * A collection of common removal listeners.
 *
 * @author Charles Fry
 * @since 10.0
 */
RemovalNotification (/android/guava/src/com/google/common/cache/RemovalNotification.java)/**
 * A notification of the removal of a single entry. The key and/or value may be null if they were
 * already garbage collected.
 *
 * <p>Like other {@code Entry} instances associated with {@code CacheBuilder}, this class holds
 * strong references to the key and value, regardless of the type of references the cache may be
 * using.
 *
 * @author Charles Fry
 * @since 10.0
 */
Cell (/android/guava/src/com/google/common/cache/Striped64.java)/**
   * Padded variant of AtomicLong supporting only raw accesses plus CAS. The value field is placed
   * between pads, hoping that the JVM doesn't reorder them.
   *
   * <p>JVM intrinsics note: It would be possible to use a release-only form of CAS here, if it were
   * provided.
   */
Striped64 (/android/guava/src/com/google/common/cache/Striped64.java)/**
 * A package-local class holding common representation and mechanics for classes supporting dynamic
 * striping on 64bit values. The class extends Number so that concrete subclasses must publicly do
 * so.
 */
Weigher (/android/guava/src/com/google/common/cache/Weigher.java)/**
 * Calculates the weights of cache entries.
 *
 * @author Charles Fry
 * @since 11.0
 */
Inverse (/android/guava/src/com/google/common/collect/AbstractBiMap.java)/** The inverse of any other {@code AbstractBiMap} subclass. */
AbstractBiMap (/android/guava/src/com/google/common/collect/AbstractBiMap.java)/**
 * A general-purpose bimap implementation using any two backing {@code Map} instances.
 *
 * <p>Note that this class contains {@code equals()} calls that keep it from supporting {@code
 * IdentityHashMap} backing maps.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 */
AbstractIndexedListIterator (/android/guava/src/com/google/common/collect/AbstractIndexedListIterator.java)/**
 * This class provides a skeletal implementation of the {@link ListIterator} interface across a
 * fixed number of elements that may be retrieved by position. It does not support {@link #remove},
 * {@link #set}, or {@link #add}.
 *
 * @author Jared Levy
 */
AbstractListMultimap (/android/guava/src/com/google/common/collect/AbstractListMultimap.java)/**
 * Basic implementation of the {@link ListMultimap} interface. It's a wrapper around {@link
 * AbstractMapBasedMultimap} that converts the returned collections into {@code Lists}. The {@link
 * #createCollection} method must return a {@code List}.
 *
 * @author Jared Levy
 * @since 2.0
 */
WrappedIterator (/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** Collection iterator for {@code WrappedCollection}. */
WrappedCollection (/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/**
   * Collection decorator that stays in sync with the multimap values for a key. There are two kinds
   * of wrapped collections: full and subcollections. Both have a delegate pointing to the
   * underlying collection class.
   *
   * <p>Full collections, identified by a null ancestor field, contain all multimap values for a
   * given key. Its delegate is a value in {@link AbstractMapBasedMultimap#map} whenever the
   * delegate is non-empty. The {@code refreshIfEmpty}, {@code removeIfEmpty}, and {@code addToMap}
   * methods ensure that the {@code WrappedCollection} and map remain consistent.
   *
   * <p>A subcollection, such as a sublist, contains some of the values for a given key. Its
   * ancestor field points to the full wrapped collection with all values for the key. The
   * subcollection {@code refreshIfEmpty}, {@code removeIfEmpty}, and {@code addToMap} methods call
   * the corresponding methods of the full wrapped collection.
   */
WrappedSet (/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** Set decorator that stays in sync with the multimap values for a key. */
WrappedSortedSet (/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** SortedSet decorator that stays in sync with the multimap values for a key. */
WrappedListIterator (/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** ListIterator decorator. */
WrappedList (/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** List decorator that stays in sync with the multimap values for a key. */
RandomAccessWrappedList (/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/**
   * List decorator that stays in sync with the multimap values for a key and supports rapid random
   * access.
   */
AsMapIterator (/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** Iterator across all keys and value collections. */
AbstractMapBasedMultimap (/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/**
 * Basic implementation of the {@link Multimap} interface. This class represents a multimap as a map
 * that associates each key with a collection of values. All methods of {@link Multimap} are
 * supported, including those specified as optional in the interface.
 *
 * <p>To implement a multimap, a subclass must define the method {@link #createCollection()}, which
 * creates an empty collection of values for a key.
 *
 * <p>The multimap constructor takes a map that has a single entry for each distinct key. When you
 * insert a key-value pair with a key that isn't already in the multimap, {@code
 * AbstractMapBasedMultimap} calls {@link #createCollection()} to create the collection of values
 * for that key. The subclass should not call {@link #createCollection()} directly, and a new
 * instance should be created every time the method is called.
 *
 * <p>For example, the subclass could pass a {@link java.util.TreeMap} during construction, and
 * {@link #createCollection()} could return a {@link java.util.TreeSet}, in which case the
 * multimap's iterators would propagate through the keys and values in sorted order.
 *
 * <p>Keys and values may be null, as long as the underlying collection classes support null
 * elements.
 *
 * <p>The collections created by {@link #createCollection()} may or may not allow duplicates. If the
 * collection, such as a {@link Set}, does not support duplicates, an added key-value pair will
 * replace an existing pair with the same key and value, if such a pair is present. With collections
 * like {@link List} that allow duplicates, the collection will keep the existing key-value pairs
 * while adding a new pair.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap, even if the
 * underlying map and {@link #createCollection()} method return threadsafe classes. Concurrent read
 * operations will work correctly. To allow concurrent update operations, wrap your multimap with a
 * call to {@link Multimaps#synchronizedMultimap}.
 *
 * <p>For serialization to work, the subclass must specify explicit {@code readObject} and {@code
 * writeObject} methods.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
Itr (/android/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java)/**
   * Skeleton of per-entry iterators. We could push this down and win a few bytes, but it's complex
   * enough it's not especially worth it.
   */
AbstractMapBasedMultiset (/android/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java)/**
 * Basic implementation of {@code Multiset<E>} backed by an instance of {@code
 * AbstractObjectCountMap<E>}.
 *
 * <p>For serialization to work, the subclass must specify explicit {@code readObject} and {@code
 * writeObject} methods.
 *
 * @author Kevin Bourrillion
 */
AbstractMapEntry (/android/guava/src/com/google/common/collect/AbstractMapEntry.java)/**
 * Implementation of the {@code equals}, {@code hashCode}, and {@code toString} methods of {@code
 * Entry}.
 *
 * @author Jared Levy
 */
AbstractMultimap (/android/guava/src/com/google/common/collect/AbstractMultimap.java)/**
 * A skeleton {@code Multimap} implementation, not necessarily in terms of a {@code Map}.
 *
 * @author Louis Wasserman
 */
AbstractMultiset (/android/guava/src/com/google/common/collect/AbstractMultiset.java)/**
 * This class provides a skeletal implementation of the {@link Multiset} interface. A new multiset
 * implementation can be created easily by extending this class and implementing the {@link
 * Multiset#entrySet()} method, plus optionally overriding {@link #add(Object, int)} and {@link
 * #remove(Object, int)} to enable modifications to the multiset.
 *
 * <p>The {@link #count} and {@link #size} implementations all iterate across the set returned by
 * {@link Multiset#entrySet()}, as do many methods acting on the set returned by {@link
 * #elementSet()}. Override those methods for better performance.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
AbstractNavigableMap (/android/guava/src/com/google/common/collect/AbstractNavigableMap.java)/**
 * Skeletal implementation of {@link NavigableMap}.
 *
 * @author Louis Wasserman
 */
AbstractRangeSet (/android/guava/src/com/google/common/collect/AbstractRangeSet.java)/**
 * A skeletal implementation of {@code RangeSet}.
 *
 * @author Louis Wasserman
 */
AbstractSequentialIterator (/android/guava/src/com/google/common/collect/AbstractSequentialIterator.java)/**
 * This class provides a skeletal implementation of the {@code Iterator} interface for sequences
 * whose next element can always be derived from the previous element. Null elements are not
 * supported, nor is the {@link #remove()} method.
 *
 * <p>Example:
 *
 * <pre>{@code
 * Iterator<Integer> powersOfTwo =
 *     new AbstractSequentialIterator<Integer>(1) {
 *       protected Integer computeNext(Integer previous) {
 *         return (previous == 1 << 30) ? null : previous * 2;
 *       }
 *     };
 * }</pre>
 *
 * @author Chris Povirk
 * @since 12.0 (in Guava as {@code AbstractLinkedIterator} since 8.0)
 */
AbstractSetMultimap (/android/guava/src/com/google/common/collect/AbstractSetMultimap.java)/**
 * Basic implementation of the {@link SetMultimap} interface. It's a wrapper around {@link
 * AbstractMapBasedMultimap} that converts the returned collections into {@code Sets}. The {@link
 * #createCollection} method must return a {@code Set}.
 *
 * @author Jared Levy
 */
AbstractSortedKeySortedSetMultimap (/android/guava/src/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java)/**
 * Basic implementation of a {@link SortedSetMultimap} with a sorted key set.
 *
 * <p>This superclass allows {@code TreeMultimap} to override methods to return navigable set and
 * map types in non-GWT only, while GWT code will inherit the SortedMap/SortedSet overrides.
 *
 * @author Louis Wasserman
 */
AbstractSortedMultiset (/android/guava/src/com/google/common/collect/AbstractSortedMultiset.java)/**
 * This class provides a skeletal implementation of the {@link SortedMultiset} interface.
 *
 * <p>The {@link #count} and {@link #size} implementations all iterate across the set returned by
 * {@link Multiset#entrySet()}, as do many methods acting on the set returned by {@link
 * #elementSet()}. Override those methods for better performance.
 *
 * @author Louis Wasserman
 */
AbstractSortedSetMultimap (/android/guava/src/com/google/common/collect/AbstractSortedSetMultimap.java)/**
 * Basic implementation of the {@link SortedSetMultimap} interface. It's a wrapper around {@link
 * AbstractMapBasedMultimap} that converts the returned collections into sorted sets. The {@link
 * #createCollection} method must return a {@code SortedSet}.
 *
 * @author Jared Levy
 */
AbstractTable (/android/guava/src/com/google/common/collect/AbstractTable.java)/**
 * Skeletal, implementation-agnostic implementation of the {@link Table} interface.
 *
 * @author Louis Wasserman
 */
AllEqualOrdering (/android/guava/src/com/google/common/collect/AllEqualOrdering.java)/**
 * An ordering that treats all references as equals, even nulls.
 *
 * @author Emily Soldal
 */
ArrayListMultimap (/android/guava/src/com/google/common/collect/ArrayListMultimap.java)/**
 * Implementation of {@code Multimap} that uses an {@code ArrayList} to store the values for a given
 * key. A {@link HashMap} associates each key with an {@link ArrayList} of values.
 *
 * <p>When iterating through the collections supplied by this class, the ordering of values for a
 * given key agrees with the order in which the values were added.
 *
 * <p>This multimap allows duplicate key-value pairs. After adding a new key-value pair equal to an
 * existing key-value pair, the {@code ArrayListMultimap} will contain entries for both the new
 * value and the old value.
 *
 * <p>Keys and values may be null. All optional multimap methods are supported, and all returned
 * views are modifiable.
 *
 * <p>The lists returned by {@link #get}, {@link #removeAll}, and {@link #replaceValues} all
 * implement {@link java.util.RandomAccess}.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedListMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
ArrayListMultimapGwtSerializationDependencies (/android/guava/src/com/google/common/collect/ArrayListMultimapGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element types of an {@link
 * ArrayListMultimap}. The GWT supersource for this class contains a field for each type.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 */
ArrayTable (/android/guava/src/com/google/common/collect/ArrayTable.java)/**
 * Fixed-size {@link Table} implementation backed by a two-dimensional array.
 *
 * <p>The allowed row and column keys must be supplied when the table is created. The table always
 * contains a mapping for every row key / column pair. The value corresponding to a given row and
 * column is null unless another value is provided.
 *
 * <p>The table's size is constant: the product of the number of supplied row keys and the number of
 * supplied column keys. The {@code remove} and {@code clear} methods are not supported by the table
 * or its views. The {@link #erase} and {@link #eraseAll} methods may be used instead.
 *
 * <p>The ordering of the row and column keys provided when the table is constructed determines the
 * iteration ordering across rows and columns in the table's views. None of the view iterators
 * support {@link Iterator#remove}. If the table is modified after an iterator is created, the
 * iterator remains valid.
 *
 * <p>This class requires less memory than the {@link HashBasedTable} and {@link TreeBasedTable}
 * implementations, except when the table is sparse.
 *
 * <p>Null row keys or column keys are not permitted.
 *
 * <p>This class provides methods involving the underlying array structure, where the array indices
 * correspond to the position of a row or column in the lists of allowed keys and values. See the
 * {@link #at}, {@link #set}, {@link #toArray}, {@link #rowKeyList}, and {@link #columnKeyList}
 * methods for more details.
 *
 * <p>Note that this implementation is not synchronized. If multiple threads access the same cell of
 * an {@code ArrayTable} concurrently and one of the threads modifies its value, there is no
 * guarantee that the new value will be fully visible to the other threads. To guarantee that
 * modifications are visible, synchronize access to the table. Unlike other {@code Table}
 * implementations, synchronization is unnecessary between a thread that writes to one cell and a
 * thread that reads from another.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"> {@code Table}</a>.
 *
 * @author Jared Levy
 * @since 10.0
 */
BaseImmutableMultimap (/android/guava/src/com/google/common/collect/BaseImmutableMultimap.java)/**
 * A dummy superclass of {@link ImmutableMultimap} that can be instanceof'd without ProGuard
 * retaining additional implementation details of {@link ImmutableMultimap}.
 */
BiMap (/android/guava/src/com/google/common/collect/BiMap.java)/**
 * A bimap (or "bidirectional map") is a map that preserves the uniqueness of its values as well as
 * that of its keys. This constraint enables bimaps to support an "inverse view", which is another
 * bimap containing the same entries as this bimap but with reversed keys and values.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap"> {@code BiMap}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
ByFunctionOrdering (/android/guava/src/com/google/common/collect/ByFunctionOrdering.java)/**
 * An ordering that orders elements by applying an order to the result of a function on those
 * elements.
 */
CartesianList (/android/guava/src/com/google/common/collect/CartesianList.java)/**
 * Implementation of {@link Lists#cartesianProduct(List)}.
 *
 * @author Louis Wasserman
 */
ClassToInstanceMap (/android/guava/src/com/google/common/collect/ClassToInstanceMap.java)/**
 * A map, each entry of which maps a Java <a href="http://tinyurl.com/2cmwkz">raw type</a> to an
 * instance of that type. In addition to implementing {@code Map}, the additional type-safe
 * operations {@link #putInstance} and {@link #getInstance} are available.
 *
 * <p>Like any other {@code Map<Class, Object>}, this map may contain entries for primitive types,
 * and a primitive type and its corresponding wrapper type may map to different values.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#classtoinstancemap"> {@code
 * ClassToInstanceMap}</a>.
 *
 * <p>To map a generic type to an instance of that type, use {@link
 * com.google.common.reflect.TypeToInstanceMap} instead.
 *
 * @param <B> the common supertype that all entries must share; often this is simply {@link Object}
 * @author Kevin Bourrillion
 * @since 2.0
 */
Collections2 (/android/guava/src/com/google/common/collect/Collections2.java)/**
 * Provides static methods for working with {@code Collection} instances.
 *
 * <p><b>Java 8 users:</b> several common uses for this class are now more comprehensively addressed
 * by the new {@link java.util.stream.Stream} library. Read the method documentation below for
 * comparisons. These methods are not being deprecated, but we gently encourage you to migrate to
 * streams.
 *
 * @author Chris Povirk
 * @author Mike Bostock
 * @author Jared Levy
 * @since 2.0
 */
CollectPreconditions (/android/guava/src/com/google/common/collect/CollectPreconditions.java)/** Precondition checks useful in collection implementations. */
CompactHashMap (/android/guava/src/com/google/common/collect/CompactHashMap.java)/**
 * CompactHashMap is an implementation of a Map. All optional operations (put and remove) are
 * supported. Null keys and values are supported.
 *
 * <p>{@code containsKey(k)}, {@code put(k, v)} and {@code remove(k)} are all (expected and
 * amortized) constant time operations. Expected in the hashtable sense (depends on the hash
 * function doing a good job of distributing the elements to the buckets to a distribution not far
 * from uniform), and amortized since some operations can trigger a hash table resize.
 *
 * <p>Unlike {@code java.util.HashMap}, iteration is only proportional to the actual {@code size()},
 * which is optimal, and <i>not</i> the size of the internal hashtable, which could be much larger
 * than {@code size()}. Furthermore, this structure places significantly reduced load on the garbage
 * collector by only using a constant number of internal objects.
 *
 * <p>If there are no removals, then iteration order for the {@link #entrySet}, {@link #keySet}, and
 * {@link #values} views is the same as insertion order. Any removal invalidates any ordering
 * guarantees.
 *
 * <p>This class should not be assumed to be universally superior to {@code java.util.HashMap}.
 * Generally speaking, this class reduces object allocation and memory consumption at the price of
 * moderately increased constant factors of CPU. Only use this class when there is a specific reason
 * to prioritize memory over CPU.
 *
 * @author Louis Wasserman
 */
CompactHashSet (/android/guava/src/com/google/common/collect/CompactHashSet.java)/**
 * CompactHashSet is an implementation of a Set. All optional operations (adding and removing) are
 * supported. The elements can be any objects.
 *
 * <p>{@code contains(x)}, {@code add(x)} and {@code remove(x)}, are all (expected and amortized)
 * constant time operations. Expected in the hashtable sense (depends on the hash function doing a
 * good job of distributing the elements to the buckets to a distribution not far from uniform), and
 * amortized since some operations can trigger a hash table resize.
 *
 * <p>Unlike {@code java.util.HashSet}, iteration is only proportional to the actual {@code size()},
 * which is optimal, and <i>not</i> the size of the internal hashtable, which could be much larger
 * than {@code size()}. Furthermore, this structure only depends on a fixed number of arrays; {@code
 * add(x)} operations <i>do not</i> create objects for the garbage collector to deal with, and for
 * every element added, the garbage collector will have to traverse {@code 1.5} references on
 * average, in the marking phase, not {@code 5.0} as in {@code java.util.HashSet}.
 *
 * <p>If there are no removals, then {@link #iterator iteration} order is the same as insertion
 * order. Any removal invalidates any ordering guarantees.
 *
 * <p>This class should not be assumed to be universally superior to {@code java.util.HashSet}.
 * Generally speaking, this class reduces object allocation and memory consumption at the price of
 * moderately increased constant factors of CPU. Only use this class when there is a specific reason
 * to prioritize memory over CPU.
 *
 * @author Dimitris Andreou
 */
CompactLinkedHashMap (/android/guava/src/com/google/common/collect/CompactLinkedHashMap.java)/**
 * CompactLinkedHashMap is an implementation of a Map with insertion or LRU iteration order,
 * maintained with a doubly linked list through the entries. All optional operations (put and
 * remove) are supported. Null keys and values are supported.
 *
 * <p>{@code containsKey(k)}, {@code put(k, v)} and {@code remove(k)} are all (expected and
 * amortized) constant time operations. Expected in the hashtable sense (depends on the hash
 * function doing a good job of distributing the elements to the buckets to a distribution not far
 * from uniform), and amortized since some operations can trigger a hash table resize.
 *
 * <p>As compared with {@link java.util.LinkedHashMap}, this structure places significantly reduced
 * load on the garbage collector by only using a constant number of internal objects.
 *
 * <p>This class should not be assumed to be universally superior to {@code
 * java.util.LinkedHashMap}. Generally speaking, this class reduces object allocation and memory
 * consumption at the price of moderately increased constant factors of CPU. Only use this class
 * when there is a specific reason to prioritize memory over CPU.
 *
 * @author Louis Wasserman
 */
CompactLinkedHashSet (/android/guava/src/com/google/common/collect/CompactLinkedHashSet.java)/**
 * CompactLinkedHashSet is an implementation of a Set, which a predictable iteration order that
 * matches the insertion order. All optional operations (adding and removing) are supported. All
 * elements, including {@code null}, are permitted.
 *
 * <p>{@code contains(x)}, {@code add(x)} and {@code remove(x)}, are all (expected and amortized)
 * constant time operations. Expected in the hashtable sense (depends on the hash function doing a
 * good job of distributing the elements to the buckets to a distribution not far from uniform), and
 * amortized since some operations can trigger a hash table resize.
 *
 * <p>This implementation consumes significantly less memory than {@code java.util.LinkedHashSet} or
 * even {@code java.util.HashSet}, and places considerably less load on the garbage collector. Like
 * {@code java.util.LinkedHashSet}, it offers insertion-order iteration, with identical behavior.
 *
 * <p>This class should not be assumed to be universally superior to {@code
 * java.util.LinkedHashSet}. Generally speaking, this class reduces object allocation and memory
 * consumption at the price of moderately increased constant factors of CPU. Only use this class
 * when there is a specific reason to prioritize memory over CPU.
 *
 * @author Louis Wasserman
 */
ComparatorOrdering (/android/guava/src/com/google/common/collect/ComparatorOrdering.java)/** An ordering for a pre-existing comparator. */
Comparators (/android/guava/src/com/google/common/collect/Comparators.java)/**
 * Provides static methods for working with {@link Comparator} instances. For many other helpful
 * comparator utilities, see either {@code Comparator} itself (for Java 8 or later), or {@code
 * com.google.common.collect.Ordering} (otherwise).
 *
 * <h3>Relationship to {@code Ordering}</h3>
 *
 * <p>In light of the significant enhancements to {@code Comparator} in Java 8, the overwhelming
 * majority of usages of {@code Ordering} can be written using only built-in JDK APIs. This class is
 * intended to "fill the gap" and provide those features of {@code Ordering} not already provided by
 * the JDK.
 *
 * @since 21.0
 * @author Louis Wasserman
 */
ComparisonChain (/android/guava/src/com/google/common/collect/ComparisonChain.java)/**
 * A utility for performing a chained comparison statement. For example:
 *
 * <pre>{@code
 * public int compareTo(Foo that) {
 *   return ComparisonChain.start()
 *       .compare(this.aString, that.aString)
 *       .compare(this.anInt, that.anInt)
 *       .compare(this.anEnum, that.anEnum, Ordering.natural().nullsLast())
 *       .result();
 * }
 * }</pre>
 *
 * <p>The value of this expression will have the same sign as the <i>first nonzero</i> comparison
 * result in the chain, or will be zero if every comparison result was zero.
 *
 * <p><b>Note:</b> {@code ComparisonChain} instances are <b>immutable</b>. For this utility to work
 * correctly, calls must be chained as illustrated above.
 *
 * <p>Performance note: Even though the {@code ComparisonChain} caller always invokes its {@code
 * compare} methods unconditionally, the {@code ComparisonChain} implementation stops calling its
 * inputs' {@link Comparable#compareTo compareTo} and {@link Comparator#compare compare} methods as
 * soon as one of them returns a nonzero result. This optimization is typically important only in
 * the presence of expensive {@code compareTo} and {@code compare} implementations.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#comparecompareto"> {@code
 * ComparisonChain}</a>.
 *
 * @author Mark Davis
 * @author Kevin Bourrillion
 * @since 2.0
 */
CompoundOrdering (/android/guava/src/com/google/common/collect/CompoundOrdering.java)/** An ordering that tries several comparators in order. */
ComputationException (/android/guava/src/com/google/common/collect/ComputationException.java)/**
 * Wraps an exception that occurred during a computation.
 *
 * @author Bob Lee
 * @since 2.0
 * @deprecated This exception is no longer thrown by {@code com.google.common}. Previously, it was
 *     thrown by {@link MapMaker} computing maps. When support for computing maps was removed from
 *     {@code MapMaker}, it was added to {@code CacheBuilder}, which throws {@code
 *     ExecutionException}, {@code UncheckedExecutionException}, and {@code ExecutionError}. Any
 *     code that is still catching {@code ComputationException} may need to be updated to catch some
 *     of those types instead. (Note that this type, though deprecated, is not planned to be removed
 *     from Guava.)
 */
ConcurrentHashMultiset (/android/guava/src/com/google/common/collect/ConcurrentHashMultiset.java)/**
 * A multiset that supports concurrent modifications and that provides atomic versions of most
 * {@code Multiset} operations (exceptions where noted). Null elements are not supported.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Cliff L. Biffle
 * @author mike nonemacher
 * @since 2.0
 */
ConsumingQueueIterator (/android/guava/src/com/google/common/collect/ConsumingQueueIterator.java)/**
 * An Iterator implementation which draws elements from a queue, removing them from the queue as it
 * iterates.
 */
ContiguousSet (/android/guava/src/com/google/common/collect/ContiguousSet.java)/**
 * A sorted set of contiguous values in a given {@link DiscreteDomain}. Example:
 *
 * <pre>{@code
 * ContiguousSet.create(Range.closed(5, 42), DiscreteDomain.integers())
 * }</pre>
 *
 * <p>Note that because bounded ranges over {@code int} and {@code long} values are so common, this
 * particular example can be written as just:
 *
 * <pre>{@code
 * ContiguousSet.closed(5, 42)
 * }</pre>
 *
 * <p><b>Warning:</b> Be extremely careful what you do with conceptually large instances (such as
 * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomain.integers()}). Certain operations
 * on such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link
 * Collections#frequency}) can cause major performance problems.
 *
 * @author Gregory Kick
 * @since 10.0
 */
Count (/android/guava/src/com/google/common/collect/Count.java)/**
 * A mutable value of type {@code int}, for multisets to use in tracking counts of values.
 *
 * @author Louis Wasserman
 */
Cut (/android/guava/src/com/google/common/collect/Cut.java)/**
 * Implementation detail for the internal structure of {@link Range} instances. Represents a unique
 * way of "cutting" a "number line" (actually of instances of type {@code C}, not necessarily
 * "numbers") into two sections; this can be done below a certain value, above a certain value,
 * below all values or above all values. With this object defined in this way, an interval can
 * always be represented by a pair of {@code Cut} instances.
 *
 * @author Kevin Bourrillion
 */
ImmutableArrayMap (/android/guava/src/com/google/common/collect/DenseImmutableTable.java)/** An immutable map implementation backed by an indexed nullable array. */
DenseImmutableTable (/android/guava/src/com/google/common/collect/DenseImmutableTable.java)/** A {@code RegularImmutableTable} optimized for dense data. */
DescendingImmutableSortedMultiset (/android/guava/src/com/google/common/collect/DescendingImmutableSortedMultiset.java)/**
 * A descending wrapper around an {@code ImmutableSortedMultiset}
 *
 * @author Louis Wasserman
 */
DescendingImmutableSortedSet (/android/guava/src/com/google/common/collect/DescendingImmutableSortedSet.java)/**
 * Skeletal implementation of {@link ImmutableSortedSet#descendingSet()}.
 *
 * @author Louis Wasserman
 */
DescendingMultiset (/android/guava/src/com/google/common/collect/DescendingMultiset.java)/**
 * A skeleton implementation of a descending multiset. Only needs {@code forwardMultiset()} and
 * {@code entryIterator()}.
 *
 * @author Louis Wasserman
 */
DiscreteDomain (/android/guava/src/com/google/common/collect/DiscreteDomain.java)/**
 * A descriptor for a <i>discrete</i> {@code Comparable} domain such as all {@link Integer}
 * instances. A discrete domain is one that supports the three basic operations: {@link #next},
 * {@link #previous} and {@link #distance}, according to their specifications. The methods {@link
 * #minValue} and {@link #maxValue} should also be overridden for bounded types.
 *
 * <p>A discrete domain always represents the <i>entire</i> set of values of its type; it cannot
 * represent partial domains such as "prime integers" or "strings of length 5."
 *
 * <p>See the Guava User Guide section on <a href=
 * "https://github.com/google/guava/wiki/RangesExplained#discrete-domains"> {@code
 * DiscreteDomain}</a>.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
EmptyContiguousSet (/android/guava/src/com/google/common/collect/EmptyContiguousSet.java)/**
 * An empty contiguous set.
 *
 * @author Gregory Kick
 */
EmptyImmutableListMultimap (/android/guava/src/com/google/common/collect/EmptyImmutableListMultimap.java)/**
 * Implementation of {@link ImmutableListMultimap} with no entries.
 *
 * @author Jared Levy
 */
EmptyImmutableSetMultimap (/android/guava/src/com/google/common/collect/EmptyImmutableSetMultimap.java)/**
 * Implementation of {@link ImmutableListMultimap} with no entries.
 *
 * @author Mike Ward
 */
EnumBiMap (/android/guava/src/com/google/common/collect/EnumBiMap.java)/**
 * A {@code BiMap} backed by two {@code EnumMap} instances. Null keys and values are not permitted.
 * An {@code EnumBiMap} and its inverse are both serializable.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap"> {@code BiMap}</a>.
 *
 * @author Mike Bostock
 * @since 2.0
 */
EnumHashBiMap (/android/guava/src/com/google/common/collect/EnumHashBiMap.java)/**
 * A {@code BiMap} backed by an {@code EnumMap} instance for keys-to-values, and a {@code HashMap}
 * instance for values-to-keys. Null keys are not permitted, but null values are. An {@code
 * EnumHashBiMap} and its inverse are both serializable.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap"> {@code BiMap}</a>.
 *
 * @author Mike Bostock
 * @since 2.0
 */
EnumMultiset (/android/guava/src/com/google/common/collect/EnumMultiset.java)/**
 * Multiset implementation specialized for enum elements, supporting all single-element operations
 * in O(1).
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
EvictingQueue (/android/guava/src/com/google/common/collect/EvictingQueue.java)/**
 * A non-blocking queue which automatically evicts elements from the head of the queue when
 * attempting to add new elements onto the queue and it is full. This queue orders elements FIFO
 * (first-in-first-out). This data structure is logically equivalent to a circular buffer (i.e.,
 * cyclic buffer or ring buffer).
 *
 * <p>An evicting queue must be configured with a maximum size. Each time an element is added to a
 * full queue, the queue automatically removes its head element. This is different from conventional
 * bounded queues, which either block or reject new elements when full.
 *
 * <p>This class is not thread-safe, and does not accept null elements.
 *
 * @author Kurt Alfred Kluever
 * @since 15.0
 */
ExplicitOrdering (/android/guava/src/com/google/common/collect/ExplicitOrdering.java)/** An ordering that compares objects according to a given order. */
FilteredEntryMultimap (/android/guava/src/com/google/common/collect/FilteredEntryMultimap.java)/**
 * Implementation of {@link Multimaps#filterEntries(Multimap, Predicate)}.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
FilteredEntrySetMultimap (/android/guava/src/com/google/common/collect/FilteredEntrySetMultimap.java)/**
 * Implementation of {@link Multimaps#filterEntries(SetMultimap, Predicate)}.
 *
 * @author Louis Wasserman
 */
FilteredKeyListMultimap (/android/guava/src/com/google/common/collect/FilteredKeyListMultimap.java)/**
 * Implementation of {@link Multimaps#filterKeys(ListMultimap, Predicate)}.
 *
 * @author Louis Wasserman
 */
FilteredKeyMultimap (/android/guava/src/com/google/common/collect/FilteredKeyMultimap.java)/**
 * Implementation of {@link Multimaps#filterKeys(Multimap, Predicate)}.
 *
 * @author Louis Wasserman
 */
FilteredKeySetMultimap (/android/guava/src/com/google/common/collect/FilteredKeySetMultimap.java)/**
 * Implementation of {@link Multimaps#filterKeys(SetMultimap, Predicate)}.
 *
 * @author Louis Wasserman
 */
FilteredMultimap (/android/guava/src/com/google/common/collect/FilteredMultimap.java)/**
 * An interface for all filtered multimap types.
 *
 * @author Louis Wasserman
 */
FilteredMultimapValues (/android/guava/src/com/google/common/collect/FilteredMultimapValues.java)/**
 * Implementation for {@link FilteredMultimap#values()}.
 *
 * @author Louis Wasserman
 */
FilteredSetMultimap (/android/guava/src/com/google/common/collect/FilteredSetMultimap.java)/**
 * A supertype for filtered {@link SetMultimap} implementations.
 *
 * @author Louis Wasserman
 */
FromIterableFunction (/android/guava/src/com/google/common/collect/FluentIterable.java)/** Function that transforms {@code Iterable<E>} into a fluent iterable. */
FluentIterable (/android/guava/src/com/google/common/collect/FluentIterable.java)/**
 * An expanded {@code Iterable} API, providing functionality similar to Java 8's powerful <a href=
 * "https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#package.description"
 * >streams library</a> in a slightly different way.
 *
 * <p>The following types of methods are provided:
 *
 * <ul>
 *   <li>chaining methods which return a new {@code FluentIterable} based in some way on the
 *       contents of the current one (for example {@link #transform})
 *   <li>element extraction methods which facilitate the retrieval of certain elements (for example
 *       {@link #last})
 *   <li>query methods which answer questions about the {@code FluentIterable}'s contents (for
 *       example {@link #anyMatch})
 *   <li>conversion methods which copy the {@code FluentIterable}'s contents into a new collection
 *       or array (for example {@link #toList})
 * </ul>
 *
 * <p>Several lesser-used features are currently available only as static methods on the {@link
 * Iterables} class.
 *
 * <p><a name="streams"></a>
 *
 * <h3>Comparison to streams</h3>
 *
 * <p>Starting with Java 8, the core Java class libraries provide a new "Streams" library (in {@code
 * java.util.stream}), which is similar to {@code FluentIterable} but generally more powerful. Key
 * differences include:
 *
 * <ul>
 *   <li>A stream is <i>single-use</i>; it becomes invalid as soon as any "terminal operation" such
 *       as {@code findFirst()} or {@code iterator()} is invoked. (Even though {@code Stream}
 *       contains all the right method <i>signatures</i> to implement {@link Iterable}, it does not
 *       actually do so, to avoid implying repeat-iterability.) {@code FluentIterable}, on the other
 *       hand, is multiple-use, and does implement {@link Iterable}.
 *   <li>Streams offer many features not found here, including {@code min/max}, {@code distinct},
 *       {@code reduce}, {@code sorted}, the very powerful {@code collect}, and built-in support for
 *       parallelizing stream operations.
 *   <li>{@code FluentIterable} contains several features not available on {@code Stream}, which are
 *       noted in the method descriptions below.
 *   <li>Streams include primitive-specialized variants such as {@code IntStream}, the use of which
 *       is strongly recommended.
 *   <li>Streams are standard Java, not requiring a third-party dependency (but do render your code
 *       incompatible with Java 7 and earlier).
 * </ul>
 *
 * <h3>Example</h3>
 *
 * <p>Here is an example that accepts a list from a database call, filters it based on a predicate,
 * transforms it by invoking {@code toString()} on each element, and returns the first 10 elements
 * as a {@code List}:
 *
 * <pre>{@code
 * ImmutableList<String> results =
 *     FluentIterable.from(database.getClientList())
 *         .filter(Client::isActiveInLastMonth)
 *         .transform(Object::toString)
 *         .limit(10)
 *         .toList();
 * }</pre>
 *
 * The approximate stream equivalent is:
 *
 * <pre>{@code
 * List<String> results =
 *     database.getClientList()
 *         .stream()
 *         .filter(Client::isActiveInLastMonth)
 *         .map(Object::toString)
 *         .limit(10)
 *         .collect(Collectors.toList());
 * }</pre>
 *
 * @author Marcin Mikosik
 * @since 12.0
 */
ForwardingBlockingDeque (/android/guava/src/com/google/common/collect/ForwardingBlockingDeque.java)/**
 * A {@link BlockingDeque} which forwards all its method calls to another {@code BlockingDeque}.
 * Subclasses should override one or more methods to modify the behavior of the backing deque as
 * desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingBlockingDeque} forward <b>indiscriminately</b>
 * to the methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change
 * the behaviour of {@link #offer} which can lead to unexpected behaviour. In this case, you should
 * override {@code offer} as well, either providing your own implementation, or delegating to the
 * provided {@code standardOffer} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingBlockingDeque}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Emily Soldal
 * @since 14.0
 * @deprecated This class has moved to {@code com.google.common.util.concurrent}. Please use {@link
 *     com.google.common.util.concurrent.ForwardingBlockingDeque} instead.
 */
ForwardingCollection (/android/guava/src/com/google/common/collect/ForwardingCollection.java)/**
 * A collection which forwards all its method calls to another collection. Subclasses should
 * override one or more methods to modify the behavior of the backing collection as desired per the
 * <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingCollection} forward <b>indiscriminately</b> to
 * the methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change
 * the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingCollection}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingConcurrentMap (/android/guava/src/com/google/common/collect/ForwardingConcurrentMap.java)/**
 * A concurrent map which forwards all its method calls to another concurrent map. Subclasses should
 * override one or more methods to modify the behavior of the backing map as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class forwards calls to <i>only some</i> {@code
 * default} methods. Specifically, it forwards calls only for methods that existed <a
 * href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentMap.html">before
 * {@code default} methods were introduced</a>. For newer methods, like {@code forEach}, it inherits
 * their default implementations. When those implementations invoke methods, they invoke methods on
 * the {@code ForwardingConcurrentMap}.
 *
 * @author Charles Fry
 * @since 2.0
 */
ForwardingDeque (/android/guava/src/com/google/common/collect/ForwardingDeque.java)/**
 * A deque which forwards all its method calls to another deque. Subclasses should override one or
 * more methods to modify the behavior of the backing deque as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingDeque} forward <b>indiscriminately</b> to the
 * methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change the
 * behavior of {@link #offer} which can lead to unexpected behavior. In this case, you should
 * override {@code offer} as well.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingDeque}.
 *
 * @author Kurt Alfred Kluever
 * @since 12.0
 */
ForwardingImmutableCollection (/android/guava/src/com/google/common/collect/ForwardingImmutableCollection.java)/**
 * Dummy class that makes the GWT serialization policy happy. It isn't used on the server-side.
 *
 * @author Hayward Chan
 */
ForwardingImmutableList (/android/guava/src/com/google/common/collect/ForwardingImmutableList.java)/**
 * Unused stub class, unreferenced under Java and manually emulated under GWT.
 *
 * @author Chris Povirk
 */
ForwardingImmutableMap (/android/guava/src/com/google/common/collect/ForwardingImmutableMap.java)/**
 * Unused stub class, unreferenced under Java and manually emulated under GWT.
 *
 * @author Chris Povirk
 */
ForwardingImmutableSet (/android/guava/src/com/google/common/collect/ForwardingImmutableSet.java)/**
 * Unused stub class, unreferenced under Java and manually emulated under GWT.
 *
 * @author Chris Povirk
 */
ForwardingIterator (/android/guava/src/com/google/common/collect/ForwardingIterator.java)/**
 * An iterator which forwards all its method calls to another iterator. Subclasses should override
 * one or more methods to modify the behavior of the backing iterator as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class forwards calls to <i>only some</i> {@code
 * default} methods. Specifically, it forwards calls only for methods that existed <a
 * href="https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html">before {@code default}
 * methods were introduced</a>. For newer methods, like {@code forEachRemaining}, it inherits their
 * default implementations. When those implementations invoke methods, they invoke methods on the
 * {@code ForwardingIterator}.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
ForwardingList (/android/guava/src/com/google/common/collect/ForwardingList.java)/**
 * A list which forwards all its method calls to another list. Subclasses should override one or
 * more methods to modify the behavior of the backing list as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p>This class does not implement {@link java.util.RandomAccess}. If the delegate supports random
 * access, the {@code ForwardingList} subclass should implement the {@code RandomAccess} interface.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingList} forward <b>indiscriminately</b> to the
 * methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change the
 * behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingList}.
 *
 * <p>The {@code standard} methods and any collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingListIterator (/android/guava/src/com/google/common/collect/ForwardingListIterator.java)/**
 * A list iterator which forwards all its method calls to another list iterator. Subclasses should
 * override one or more methods to modify the behavior of the backing iterator as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class forwards calls to <i>only some</i> {@code
 * default} methods. Specifically, it forwards calls only for methods that existed <a
 * href="https://docs.oracle.com/javase/7/docs/api/java/util/ListIterator.html">before {@code
 * default} methods were introduced</a>. For newer methods, like {@code forEachRemaining}, it
 * inherits their default implementations. When those implementations invoke methods, they invoke
 * methods on the {@code ForwardingListIterator}.
 *
 * @author Mike Bostock
 * @since 2.0
 */
ForwardingListMultimap (/android/guava/src/com/google/common/collect/ForwardingListMultimap.java)/**
 * A list multimap which forwards all its method calls to another list multimap. Subclasses should
 * override one or more methods to modify the behavior of the backing multimap as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingListMultimap}.
 *
 * @author Kurt Alfred Kluever
 * @since 3.0
 */
StandardKeySet (/android/guava/src/com/google/common/collect/ForwardingMap.java)/**
   * A sensible implementation of {@link Map#keySet} in terms of the following methods: {@link
   * ForwardingMap#clear}, {@link ForwardingMap#containsKey}, {@link ForwardingMap#isEmpty}, {@link
   * ForwardingMap#remove}, {@link ForwardingMap#size}, and the {@link Set#iterator} method of
   * {@link ForwardingMap#entrySet}. In many cases, you may wish to override {@link
   * ForwardingMap#keySet} to forward to this implementation or a subclass thereof.
   *
   * @since 10.0
   */
StandardValues (/android/guava/src/com/google/common/collect/ForwardingMap.java)/**
   * A sensible implementation of {@link Map#values} in terms of the following methods: {@link
   * ForwardingMap#clear}, {@link ForwardingMap#containsValue}, {@link ForwardingMap#isEmpty},
   * {@link ForwardingMap#size}, and the {@link Set#iterator} method of {@link
   * ForwardingMap#entrySet}. In many cases, you may wish to override {@link ForwardingMap#values}
   * to forward to this implementation or a subclass thereof.
   *
   * @since 10.0
   */
StandardEntrySet (/android/guava/src/com/google/common/collect/ForwardingMap.java)/**
   * A sensible implementation of {@link Map#entrySet} in terms of the following methods: {@link
   * ForwardingMap#clear}, {@link ForwardingMap#containsKey}, {@link ForwardingMap#get}, {@link
   * ForwardingMap#isEmpty}, {@link ForwardingMap#remove}, and {@link ForwardingMap#size}. In many
   * cases, you may wish to override {@link #entrySet} to forward to this implementation or a
   * subclass thereof.
   *
   * @since 10.0
   */
ForwardingMap (/android/guava/src/com/google/common/collect/ForwardingMap.java)/**
 * A map which forwards all its method calls to another map. Subclasses should override one or more
 * methods to modify the behavior of the backing map as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingMap} forward <i>indiscriminately</i> to the
 * methods of the delegate. For example, overriding {@link #put} alone <i>will not</i> change the
 * behavior of {@link #putAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code putAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardPutAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingMap}.
 *
 * <p>Each of the {@code standard} methods, where appropriate, use {@link Objects#equal} to test
 * equality for both keys and values. This may not be the desired behavior for map implementations
 * that use non-standard notions of key equality, such as a {@code SortedMap} whose comparator is
 * not consistent with {@code equals}.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingMapEntry (/android/guava/src/com/google/common/collect/ForwardingMapEntry.java)/**
 * A map entry which forwards all its method calls to another map entry. Subclasses should override
 * one or more methods to modify the behavior of the backing map entry as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingMapEntry} forward <i>indiscriminately</i> to
 * the methods of the delegate. For example, overriding {@link #getValue} alone <i>will not</i>
 * change the behavior of {@link #equals}, which can lead to unexpected behavior. In this case, you
 * should override {@code equals} as well, either providing your own implementation, or delegating
 * to the provided {@code standardEquals} method.
 *
 * <p>Each of the {@code standard} methods, where appropriate, use {@link Objects#equal} to test
 * equality for both keys and values. This may not be the desired behavior for map implementations
 * that use non-standard notions of key equality, such as the entry of a {@code SortedMap} whose
 * comparator is not consistent with {@code equals}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingMultimap (/android/guava/src/com/google/common/collect/ForwardingMultimap.java)/**
 * A multimap which forwards all its method calls to another multimap. Subclasses should override
 * one or more methods to modify the behavior of the backing multimap as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingMultimap}.
 *
 * @author Robert Konigsberg
 * @since 2.0
 */
StandardElementSet (/android/guava/src/com/google/common/collect/ForwardingMultiset.java)/**
   * A sensible implementation of {@link Multiset#elementSet} in terms of the following methods:
   * {@link ForwardingMultiset#clear}, {@link ForwardingMultiset#contains}, {@link
   * ForwardingMultiset#containsAll}, {@link ForwardingMultiset#count}, {@link
   * ForwardingMultiset#isEmpty}, the {@link Set#size} and {@link Set#iterator} methods of {@link
   * ForwardingMultiset#entrySet}, and {@link ForwardingMultiset#remove(Object, int)}. In many
   * situations, you may wish to override {@link ForwardingMultiset#elementSet} to forward to this
   * implementation or a subclass thereof.
   *
   * @since 10.0
   */
ForwardingMultiset (/android/guava/src/com/google/common/collect/ForwardingMultiset.java)/**
 * A multiset which forwards all its method calls to another multiset. Subclasses should override
 * one or more methods to modify the behavior of the backing multiset as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingMultiset} forward <b>indiscriminately</b> to
 * the methods of the delegate. For example, overriding {@link #add(Object, int)} alone <b>will
 * not</b> change the behavior of {@link #add(Object)}, which can lead to unexpected behavior. In
 * this case, you should override {@code add(Object)} as well, either providing your own
 * implementation, or delegating to the provided {@code standardAdd} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingMultiset}.
 *
 * <p>The {@code standard} methods and any collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 2.0
 */
StandardDescendingMap (/android/guava/src/com/google/common/collect/ForwardingNavigableMap.java)/**
   * A sensible implementation of {@link NavigableMap#descendingMap} in terms of the methods of this
   * {@code NavigableMap}. In many cases, you may wish to override {@link
   * ForwardingNavigableMap#descendingMap} to forward to this implementation or a subclass thereof.
   *
   * <p>In particular, this map iterates over entries with repeated calls to {@link
   * NavigableMap#lowerEntry}. If a more efficient means of iteration is available, you may wish to
   * override the {@code entryIterator()} method of this class.
   *
   * @since 12.0
   */
StandardNavigableKeySet (/android/guava/src/com/google/common/collect/ForwardingNavigableMap.java)/**
   * A sensible implementation of {@link NavigableMap#navigableKeySet} in terms of the methods of
   * this {@code NavigableMap}. In many cases, you may wish to override {@link
   * ForwardingNavigableMap#navigableKeySet} to forward to this implementation or a subclass
   * thereof.
   *
   * @since 12.0
   */
ForwardingNavigableMap (/android/guava/src/com/google/common/collect/ForwardingNavigableMap.java)/**
 * A navigable map which forwards all its method calls to another navigable map. Subclasses should
 * override one or more methods to modify the behavior of the backing map as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingNavigableMap} forward <i>indiscriminately</i>
 * to the methods of the delegate. For example, overriding {@link #put} alone <i>will not</i> change
 * the behavior of {@link #putAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code putAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardPutAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingNavigableMap}.
 *
 * <p>Each of the {@code standard} methods uses the map's comparator (or the natural ordering of the
 * elements, if there is no comparator) to test element equality. As a result, if the comparator is
 * not consistent with equals, some of the standard implementations may violate the {@code Map}
 * contract.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Louis Wasserman
 * @since 12.0
 */
StandardDescendingSet (/android/guava/src/com/google/common/collect/ForwardingNavigableSet.java)/**
   * A sensible implementation of {@link NavigableSet#descendingSet} in terms of the other methods
   * of {@link NavigableSet}, notably including {@link NavigableSet#descendingIterator}.
   *
   * <p>In many cases, you may wish to override {@link ForwardingNavigableSet#descendingSet} to
   * forward to this implementation or a subclass thereof.
   *
   * @since 12.0
   */
ForwardingNavigableSet (/android/guava/src/com/google/common/collect/ForwardingNavigableSet.java)/**
 * A navigable set which forwards all its method calls to another navigable set. Subclasses should
 * override one or more methods to modify the behavior of the backing set as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingNavigableSet} forward <i>indiscriminately</i>
 * to the methods of the delegate. For example, overriding {@link #add} alone <i>will not</i> change
 * the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingNavigableSet}.
 *
 * <p>Each of the {@code standard} methods uses the set's comparator (or the natural ordering of the
 * elements, if there is no comparator) to test element equality. As a result, if the comparator is
 * not consistent with equals, some of the standard implementations may violate the {@code Set}
 * contract.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Louis Wasserman
 * @since 12.0
 */
ForwardingObject (/android/guava/src/com/google/common/collect/ForwardingObject.java)/**
 * An abstract base class for implementing the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>. The {@link
 * #delegate()} method must be overridden to return the instance being decorated.
 *
 * <p>This class does <i>not</i> forward the {@code hashCode} and {@code equals} methods through to
 * the backing object, but relies on {@code Object}'s implementation. This is necessary to preserve
 * the symmetry of {@code equals}. Custom definitions of equality are usually based on an interface,
 * such as {@code Set} or {@code List}, so that the implementation of {@code equals} can cast the
 * object being tested for equality to the custom interface. {@code ForwardingObject} implements no
 * such custom interfaces directly; they are implemented only in subclasses. Therefore, forwarding
 * {@code equals} would break symmetry, as the forwarding object might consider itself equal to the
 * object being tested, but the reverse could not be true. This behavior is consistent with the
 * JDK's collection wrappers, such as {@link java.util.Collections#unmodifiableCollection}. Use an
 * interface-specific subclass of {@code ForwardingObject}, such as {@link ForwardingList}, to
 * preserve equality behavior, or override {@code equals} directly.
 *
 * <p>The {@code toString} method is forwarded to the delegate. Although this class does not
 * implement {@link Serializable}, a serializable subclass may be created since this class has a
 * parameter-less constructor.
 *
 * @author Mike Bostock
 * @since 2.0
 */
ForwardingQueue (/android/guava/src/com/google/common/collect/ForwardingQueue.java)/**
 * A queue which forwards all its method calls to another queue. Subclasses should override one or
 * more methods to modify the behavior of the backing queue as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingQueue} forward <b>indiscriminately</b> to the
 * methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change the
 * behavior of {@link #offer} which can lead to unexpected behavior. In this case, you should
 * override {@code offer} as well, either providing your own implementation, or delegating to the
 * provided {@code standardOffer} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingQueue}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingSet (/android/guava/src/com/google/common/collect/ForwardingSet.java)/**
 * A set which forwards all its method calls to another set. Subclasses should override one or more
 * methods to modify the behavior of the backing set as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingSet} forward <b>indiscriminately</b> to the
 * methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change the
 * behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSet}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingSetMultimap (/android/guava/src/com/google/common/collect/ForwardingSetMultimap.java)/**
 * A set multimap which forwards all its method calls to another set multimap. Subclasses should
 * override one or more methods to modify the behavior of the backing multimap as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSetMultimap}.
 *
 * @author Kurt Alfred Kluever
 * @since 3.0
 */
StandardKeySet (/android/guava/src/com/google/common/collect/ForwardingSortedMap.java)/**
   * A sensible implementation of {@link SortedMap#keySet} in terms of the methods of {@code
   * ForwardingSortedMap}. In many cases, you may wish to override {@link
   * ForwardingSortedMap#keySet} to forward to this implementation or a subclass thereof.
   *
   * @since 15.0
   */
ForwardingSortedMap (/android/guava/src/com/google/common/collect/ForwardingSortedMap.java)/**
 * A sorted map which forwards all its method calls to another sorted map. Subclasses should
 * override one or more methods to modify the behavior of the backing sorted map as desired per the
 * <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingSortedMap} forward <i>indiscriminately</i> to
 * the methods of the delegate. For example, overriding {@link #put} alone <i>will not</i> change
 * the behavior of {@link #putAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code putAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardPutAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSortedMap}.
 *
 * <p>Each of the {@code standard} methods, where appropriate, use the comparator of the map to test
 * equality for both keys and values, unlike {@code ForwardingMap}.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
StandardElementSet (/android/guava/src/com/google/common/collect/ForwardingSortedMultiset.java)/**
   * A sensible implementation of {@link SortedMultiset#elementSet} in terms of the following
   * methods: {@link SortedMultiset#clear}, {@link SortedMultiset#comparator}, {@link
   * SortedMultiset#contains}, {@link SortedMultiset#containsAll}, {@link SortedMultiset#count},
   * {@link SortedMultiset#firstEntry} {@link SortedMultiset#headMultiset}, {@link
   * SortedMultiset#isEmpty}, {@link SortedMultiset#lastEntry}, {@link SortedMultiset#subMultiset},
   * {@link SortedMultiset#tailMultiset}, the {@code size()} and {@code iterator()} methods of
   * {@link SortedMultiset#entrySet}, and {@link SortedMultiset#remove(Object, int)}. In many
   * situations, you may wish to override {@link SortedMultiset#elementSet} to forward to this
   * implementation or a subclass thereof.
   *
   * @since 15.0
   */
StandardDescendingMultiset (/android/guava/src/com/google/common/collect/ForwardingSortedMultiset.java)/**
   * A skeleton implementation of a descending multiset view. Normally, {@link
   * #descendingMultiset()} will not reflect any changes you make to the behavior of methods such as
   * {@link #add(Object)} or {@link #pollFirstEntry}. This skeleton implementation correctly
   * delegates each of its operations to the appropriate methods of this {@code
   * ForwardingSortedMultiset}.
   *
   * <p>In many cases, you may wish to override {@link #descendingMultiset()} to return an instance
   * of a subclass of {@code StandardDescendingMultiset}.
   *
   * @since 15.0
   */
ForwardingSortedMultiset (/android/guava/src/com/google/common/collect/ForwardingSortedMultiset.java)/**
 * A sorted multiset which forwards all its method calls to another sorted multiset. Subclasses
 * should override one or more methods to modify the behavior of the backing multiset as desired per
 * the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingSortedMultiset} forward
 * <b>indiscriminately</b> to the methods of the delegate. For example, overriding {@link
 * #add(Object, int)} alone <b>will not</b> change the behavior of {@link #add(Object)}, which can
 * lead to unexpected behavior. In this case, you should override {@code add(Object)} as well,
 * either providing your own implementation, or delegating to the provided {@code standardAdd}
 * method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSortedMultiset}.
 *
 * <p>The {@code standard} methods and any collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Louis Wasserman
 * @since 15.0
 */
ForwardingSortedSet (/android/guava/src/com/google/common/collect/ForwardingSortedSet.java)/**
 * A sorted set which forwards all its method calls to another sorted set. Subclasses should
 * override one or more methods to modify the behavior of the backing sorted set as desired per the
 * <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingSortedSet} forward <i>indiscriminately</i> to
 * the methods of the delegate. For example, overriding {@link #add} alone <i>will not</i> change
 * the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSortedSet}.
 *
 * <p>Each of the {@code standard} methods, where appropriate, uses the set's comparator (or the
 * natural ordering of the elements, if there is no comparator) to test element equality. As a
 * result, if the comparator is not consistent with equals, some of the standard implementations may
 * violate the {@code Set} contract.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingSortedSetMultimap (/android/guava/src/com/google/common/collect/ForwardingSortedSetMultimap.java)/**
 * A sorted set multimap which forwards all its method calls to another sorted set multimap.
 * Subclasses should override one or more methods to modify the behavior of the backing multimap as
 * desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSortedSetMultimap}.
 *
 * @author Kurt Alfred Kluever
 * @since 3.0
 */
ForwardingTable (/android/guava/src/com/google/common/collect/ForwardingTable.java)/**
 * A table which forwards all its method calls to another table. Subclasses should override one or
 * more methods to modify the behavior of the backing map as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * @author Gregory Kick
 * @since 7.0
 */
GeneralRange (/android/guava/src/com/google/common/collect/GeneralRange.java)/**
 * A generalized interval on any ordering, for internal use. Supports {@code null}. Unlike {@link
 * Range}, this allows the use of an arbitrary comparator. This is designed for use in the
 * implementation of subcollections of sorted collection types.
 *
 * <p>Whenever possible, use {@code Range} instead, which is better supported.
 *
 * @author Louis Wasserman
 */
HashBasedTable (/android/guava/src/com/google/common/collect/HashBasedTable.java)/**
 * Implementation of {@link Table} using linked hash tables. This guarantees predictable iteration
 * order of the various views.
 *
 * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link #columnMap()} have
 * iterators that don't support {@code remove()}. Otherwise, all optional operations are supported.
 * Null row keys, columns keys, and values are not supported.
 *
 * <p>Lookups by row key are often faster than lookups by column key, because the data is stored in
 * a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs
 * quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer,
 * since an iteration across all row keys occurs.
 *
 * <p>Note that this implementation is not synchronized. If multiple threads access this table
 * concurrently and one of the threads modifies the table, it must be synchronized externally.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"> {@code Table}</a>.
 *
 * @author Jared Levy
 * @since 7.0
 */
View (/android/guava/src/com/google/common/collect/HashBiMap.java)/** Shared supertype of keySet, values, entrySet, and inverse.entrySet. */
EntryForKey (/android/guava/src/com/google/common/collect/HashBiMap.java)/**
   * An {@code Entry} implementation that attempts to follow its key around the map -- that is, if
   * the key is moved, deleted, or reinserted, it will account for that -- while not doing any extra
   * work if the key has not moved.
   */
EntryForValue (/android/guava/src/com/google/common/collect/HashBiMap.java)/**
   * An {@code Entry} implementation that attempts to follow its value around the map -- that is, if
   * the value is moved, deleted, or reinserted, it will account for that -- while not doing any
   * extra work if the value has not moved.
   */
HashBiMap (/android/guava/src/com/google/common/collect/HashBiMap.java)/**
 * A {@link BiMap} backed by two hash tables. This implementation allows null keys and values. A
 * {@code HashBiMap} and its inverse are both serializable.
 *
 * <p>This implementation guarantees insertion-based iteration order of its keys.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap"> {@code BiMap} </a>.
 *
 * @author Louis Wasserman
 * @author Mike Bostock
 * @since 2.0
 */
Hashing (/android/guava/src/com/google/common/collect/Hashing.java)/**
 * Static methods for implementing hash-based collections.
 *
 * @author Kevin Bourrillion
 * @author Jesse Wilson
 * @author Austin Appleby
 */
HashMultimap (/android/guava/src/com/google/common/collect/HashMultimap.java)/**
 * Implementation of {@link Multimap} using hash tables.
 *
 * <p>The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an
 * existing key-value pair has no effect.
 *
 * <p>Keys and values may be null. All optional multimap methods are supported, and all returned
 * views are modifiable.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedSetMultimap}.
 *
 * @author Jared Levy
 * @since 2.0
 */
HashMultimapGwtSerializationDependencies (/android/guava/src/com/google/common/collect/HashMultimapGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element types of a {@link HashMultimap}.
 * The GWT supersource for this class contains a field for each type.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 */
HashMultiset (/android/guava/src/com/google/common/collect/HashMultiset.java)/**
 * Multiset implementation that uses hashing for key and entry access.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @since 2.0
 */
SerializedForm (/android/guava/src/com/google/common/collect/ImmutableAsList.java)/** Serialized form that leads to the same performance as the original list. */
ImmutableAsList (/android/guava/src/com/google/common/collect/ImmutableAsList.java)/**
 * List returned by {@link ImmutableCollection#asList} that delegates {@code contains} checks to the
 * backing collection.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableBiMap.java)/**
   * A builder for creating immutable bimap instances, especially {@code public static final} bimaps
   * ("constant bimaps"). Example:
   *
   * <pre>{@code
   * static final ImmutableBiMap<String, Integer> WORD_TO_INT =
   *     new ImmutableBiMap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .put("two", 2)
   *         .put("three", 3)
   *         .build();
   * }</pre>
   *
   * <p>For <i>small</i> immutable bimaps, the {@code ImmutableBiMap.of()} methods are even more
   * convenient.
   *
   * <p>By default, a {@code Builder} will generate bimaps that iterate over entries in the order
   * they were inserted into the builder. For example, in the above example, {@code
   * WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order {@code "one"=1,
   * "two"=2, "three"=3}, and {@code keySet()} and {@code values()} respect the same order. If you
   * want a different order, consider using {@link #orderEntriesByValue(Comparator)}, which changes
   * this builder to sort entries by value.
   *
   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build
   * multiple bimaps in series. Each bimap is a superset of the bimaps created before it.
   *
   * @since 2.0
   */
SerializedForm (/android/guava/src/com/google/common/collect/ImmutableBiMap.java)/**
   * Serialized type for all ImmutableBiMap instances. It captures the logical contents and they are
   * reconstructed using public factory methods. This ensures that the implementation types remain
   * as implementation details.
   *
   * <p>Since the bimap is immutable, ImmutableBiMap doesn't require special logic for keeping the
   * bimap and its inverse in sync during serialization, the way AbstractBiMap does.
   */
ImmutableBiMap (/android/guava/src/com/google/common/collect/ImmutableBiMap.java)/**
 * A {@link BiMap} whose contents will never change, with many other important properties detailed
 * at {@link ImmutableCollection}.
 *
 * @author Jared Levy
 * @since 2.0
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java)/**
   * A builder for creating immutable class-to-instance maps. Example:
   *
   * <pre>{@code
   * static final ImmutableClassToInstanceMap<Handler> HANDLERS =
   *     new ImmutableClassToInstanceMap.Builder<Handler>()
   *         .put(FooHandler.class, new FooHandler())
   *         .put(BarHandler.class, new SubBarHandler())
   *         .put(Handler.class, new QuuxHandler())
   *         .build();
   * }</pre>
   *
   * <p>After invoking {@link #build()} it is still possible to add more entries and build again.
   * Thus each map generated by this builder will be a superset of any map generated before it.
   *
   * @since 2.0
   */
ImmutableClassToInstanceMap (/android/guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java)/**
 * A {@link ClassToInstanceMap} whose contents will never change, with many other important
 * properties detailed at {@link ImmutableCollection}.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableCollection.java)/**
   * Abstract base class for builders of {@link ImmutableCollection} types.
   *
   * @since 10.0
   */
ImmutableCollection (/android/guava/src/com/google/common/collect/ImmutableCollection.java)/**
 * A {@link Collection} whose contents will never change, and which offers a few additional
 * guarantees detailed below.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as
 * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
 * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
 * of bugs and confusion.
 *
 * <h3>About <i>all</i> {@code Immutable-} collections</h3>
 *
 * <p>The remainder of this documentation applies to every public {@code Immutable-} type in this
 * package, whether it is a subtype of {@code ImmutableCollection} or not.
 *
 * <h4>Guarantees</h4>
 *
 * <p>Each makes the following guarantees:
 *
 * <ul>
 *   <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this
 *       collection. This is a stronger guarantee than that of {@link
 *       Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection
 *       is modified.
 *   <li><b>Null-hostility.</b> This collection will never contain a null element.
 *   <li><b>Deterministic iteration.</b> The iteration order is always well-defined, depending on
 *       how the collection was created. Typically this is insertion order unless an explicit
 *       ordering is otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}). See the
 *       appropriate factory method for details. View collections such as {@link
 *       ImmutableMultiset#elementSet} iterate in the same order as the parent, except as noted.
 *   <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple
 *       threads.
 *   <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow
 *       these guarantees to be violated).
 * </ul>
 *
 * <h4>"Interfaces", not implementations</h4>
 *
 * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought
 * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a
 * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the
 * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were
 * largely defined by its supertype.
 *
 * <p>For field types and method return types, you should generally use the immutable type (such as
 * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
 * This communicates to your callers all of the semantic guarantees listed above, which is almost
 * always very useful information.
 *
 * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to
 * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
 * appropriate {@code copyOf} method itself.
 *
 * <p>Expressing the immutability guarantee directly in the type that user code references is a
 * powerful advantage. Although Java offers certain immutable collection factory methods, such as
 * {@link Collections#singleton(Object)} and <a
 * href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,
 * we recommend using <i>these</i> classes instead for this reason (as well as for consistency).
 *
 * <h4>Creation</h4>
 *
 * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
 * Immutable} type provides the static operations you need to obtain instances of that type. These
 * usually include:
 *
 * <ul>
 *   <li>Static methods named {@code of}, accepting an explicit list of elements or entries.
 *   <li>Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
 *       collection whose contents should be copied.
 *   <li>A static nested {@code Builder} class which can be used to populate a new immutable
 *       instance.
 * </ul>
 *
 * <h4>Warnings</h4>
 *
 * <ul>
 *   <li><b>Warning:</b> as with any collection, it is almost always a bad idea to modify an element
 *       (in a way that affects its {@link Object#equals} behavior) while it is contained in a
 *       collection. Undefined behavior and bugs will result. It's generally best to avoid using
 *       mutable objects as elements at all, as many users may expect your "immutable" object to be
 *       <i>deeply</i> immutable.
 * </ul>
 *
 * <h4>Performance notes</h4>
 *
 * <ul>
 *   <li>Implementations can be generally assumed to prioritize memory efficiency, then speed of
 *       access, and lastly speed of creation.
 *   <li>The {@code copyOf} methods will sometimes recognize that the actual copy operation is
 *       unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
 *       once. This reduces the expense of habitually making defensive copies at API boundaries.
 *       However, the precise conditions for skipping the copy operation are undefined.
 *   <li><b>Warning:</b> a view collection such as {@link ImmutableMap#keySet} or {@link
 *       ImmutableList#subList} may retain a reference to the entire data set, preventing it from
 *       being garbage collected. If some of the data is no longer reachable through other means,
 *       this constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf}
 *       method to obtain a correctly-sized copy.
 *   <li>The performance of using the associated {@code Builder} class can be assumed to be no
 *       worse, and possibly better, than creating a mutable collection and copying it.
 *   <li>Implementations generally do not cache hash codes. If your element or key type has a slow
 *       {@code hashCode} implementation, it should cache it itself.
 * </ul>
 *
 * <h4>Example usage</h4>
 *
 * <pre>{@code
 * class Foo {
 *   private static final ImmutableSet<String> RESERVED_CODES =
 *       ImmutableSet.of("AZ", "CQ", "ZX");
 *
 *   private final ImmutableSet<String> codes;
 *
 *   public Foo(Iterable<String> codes) {
 *     this.codes = ImmutableSet.copyOf(codes);
 *     checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
 *   }
 * }
 * }</pre>
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @since 2.0
 */
ImmutableEntry (/android/guava/src/com/google/common/collect/ImmutableEntry.java)/** @see com.google.common.collect.Maps#immutableEntry(Object, Object) */
ImmutableEnumMap (/android/guava/src/com/google/common/collect/ImmutableEnumMap.java)/**
 * Implementation of {@link ImmutableMap} backed by a non-empty {@link java.util.EnumMap}.
 *
 * @author Louis Wasserman
 */
ImmutableEnumSet (/android/guava/src/com/google/common/collect/ImmutableEnumSet.java)/**
 * Implementation of {@link ImmutableSet} backed by a non-empty {@link java.util.EnumSet}.
 *
 * @author Jared Levy
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableList.java)/**
   * A builder for creating immutable list instances, especially {@code public static final} lists
   * ("constant lists"). Example:
   *
   * <pre>{@code
   * public static final ImmutableList<Color> GOOGLE_COLORS
   *     = new ImmutableList.Builder<Color>()
   *         .addAll(WEBSAFE_COLORS)
   *         .add(new Color(0, 191, 255))
   *         .build();
   * }</pre>
   *
   * <p>Elements appear in the resulting list in the same order they were added to the builder.
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple lists in series. Each new list contains all the elements of the ones created before
   * it.
   *
   * @since 2.0
   */
ImmutableList (/android/guava/src/com/google/common/collect/ImmutableList.java)/**
 * A {@link List} whose contents will never change, with many other important properties detailed at
 * {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @see ImmutableMap
 * @see ImmutableSet
 * @author Kevin Bourrillion
 * @since 2.0
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableListMultimap.java)/**
   * A builder for creating immutable {@code ListMultimap} instances, especially {@code public
   * static final} multimaps ("constant multimaps"). Example:
   *
   * <pre>{@code
   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =
   *     new ImmutableListMultimap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .putAll("several", 1, 2, 3)
   *         .putAll("many", 1, 2, 3, 4, 5)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously
   * created multimaps.
   *
   * @since 2.0
   */
ImmutableListMultimap (/android/guava/src/com/google/common/collect/ImmutableListMultimap.java)/**
 * A {@link ListMultimap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableMap.java)/**
   * A builder for creating immutable map instances, especially {@code public static final} maps
   * ("constant maps"). Example:
   *
   * <pre>{@code
   * static final ImmutableMap<String, Integer> WORD_TO_INT =
   *     new ImmutableMap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .put("two", 2)
   *         .put("three", 3)
   *         .build();
   * }</pre>
   *
   * <p>For <i>small</i> immutable maps, the {@code ImmutableMap.of()} methods are even more
   * convenient.
   *
   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order they
   * were inserted into the builder, equivalently to {@code LinkedHashMap}. For example, in the
   * above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the
   * order {@code "one"=1, "two"=2, "three"=3}, and {@code keySet()} and {@code values()} respect
   * the same order. If you want a different order, consider using {@link ImmutableSortedMap} to
   * sort by keys, or call {@link #orderEntriesByValue(Comparator)}, which changes this builder to
   * sort entries by value.
   *
   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build
   * multiple maps in series. Each map is a superset of the maps created before it.
   *
   * @since 2.0
   */
SerializedForm (/android/guava/src/com/google/common/collect/ImmutableMap.java)/**
   * Serialized type for all ImmutableMap instances. It captures the logical contents and they are
   * reconstructed using public factory methods. This ensures that the implementation types remain
   * as implementation details.
   */
ImmutableMap (/android/guava/src/com/google/common/collect/ImmutableMap.java)/**
 * A {@link Map} whose contents will never change, with many other important properties detailed at
 * {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 * @since 2.0
 */
ImmutableMapEntrySet (/android/guava/src/com/google/common/collect/ImmutableMapEntrySet.java)/**
 * {@code entrySet()} implementation for {@link ImmutableMap}.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 */
ImmutableMapKeySet (/android/guava/src/com/google/common/collect/ImmutableMapKeySet.java)/**
 * {@code keySet()} implementation for {@link ImmutableMap}.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 */
ImmutableMapValues (/android/guava/src/com/google/common/collect/ImmutableMapValues.java)/**
 * {@code values()} implementation for {@link ImmutableMap}.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableMultimap.java)/**
   * A builder for creating immutable multimap instances, especially {@code public static final}
   * multimaps ("constant multimaps"). Example:
   *
   * <pre>{@code
   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =
   *     new ImmutableMultimap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .putAll("several", 1, 2, 3)
   *         .putAll("many", 1, 2, 3, 4, 5)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously
   * created multimaps.
   *
   * @since 2.0
   */
ImmutableMultimap (/android/guava/src/com/google/common/collect/ImmutableMultimap.java)/**
 * A {@link Multimap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableMultimap} as a type (as with
 * {@link Multimap} itself). Prefer subtypes such as {@link ImmutableSetMultimap} or {@link
 * ImmutableListMultimap}, which have well-defined {@link #equals} semantics, thus avoiding a common
 * source of bugs and confusion.
 *
 * <p><b>Note:</b> every {@link ImmutableMultimap} offers an {@link #inverse} view, so there is no
 * need for a distinct {@code ImmutableBiMultimap} type.
 *
 * <p><a name="iteration"></a>
 *
 * <p><b>Key-grouped iteration.</b> All view collections follow the same iteration order. In all
 * current implementations, the iteration order always keeps multiple entries with the same key
 * together. Any creation method that would customarily respect insertion order (such as {@link
 * #copyOf(Multimap)}) instead preserves key-grouped order by inserting entries for an existing key
 * immediately after the last entry having that key.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableMultiset.java)/**
   * A builder for creating immutable multiset instances, especially {@code public static final}
   * multisets ("constant multisets"). Example:
   *
   * <pre>{@code
   * public static final ImmutableMultiset<Bean> BEANS =
   *     new ImmutableMultiset.Builder<Bean>()
   *         .addCopies(Bean.COCOA, 4)
   *         .addCopies(Bean.GARDEN, 6)
   *         .addCopies(Bean.RED, 8)
   *         .addCopies(Bean.BLACK_EYED, 10)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multisets in series.
   *
   * @since 2.0
   */
ImmutableMultiset (/android/guava/src/com/google/common/collect/ImmutableMultiset.java)/**
 * A {@link Multiset} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p><b>Grouped iteration.</b> In all current implementations, duplicate elements always appear
 * consecutively when iterating. Elements iterate in order by the <i>first</i> appearance of that
 * element when the multiset was created.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0
 */
ImmutableMultisetGwtSerializationDependencies (/android/guava/src/com/google/common/collect/ImmutableMultisetGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element type of an {@link
 * ImmutableMultiset}. The GWT supersource for this class contains a field of type {@code E}.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 *
 * <p>For {@code ImmutableMultiset} in particular, I ran into a problem with the {@code
 * GwtSerializationDependencies} approach: When autogenerating a serializer for the new class, GWT
 * tries to refer to our dummy serializer for the superclass,
 * ImmutableMultiset_CustomFieldSerializer. But that type has no methods (since it's never actually
 * used). We could probably fix the problem by adding dummy methods to that class, but that is
 * starting to sound harder than taking the superclass approach, which I've been coming to like,
 * anyway, since it doesn't require us to declare dummy methods (though occasionally constructors)
 * and make types non-final.
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableRangeMap.java)/**
   * A builder for immutable range maps. Overlapping ranges are prohibited.
   *
   * @since 14.0
   */
SerializedForm (/android/guava/src/com/google/common/collect/ImmutableRangeMap.java)/**
   * This class is used to serialize ImmutableRangeMap instances. Serializes the {@link
   * #asMapOfRanges()} form.
   */
ImmutableRangeMap (/android/guava/src/com/google/common/collect/ImmutableRangeMap.java)/**
 * A {@link RangeMap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableRangeSet.java)/**
   * A builder for immutable range sets.
   *
   * @since 14.0
   */
ImmutableRangeSet (/android/guava/src/com/google/common/collect/ImmutableRangeSet.java)/**
 * A {@link RangeSet} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableSet.java)/**
   * A builder for creating {@code ImmutableSet} instances. Example:
   *
   * <pre>{@code
   * static final ImmutableSet<Color> GOOGLE_COLORS =
   *     ImmutableSet.<Color>builder()
   *         .addAll(WEBSAFE_COLORS)
   *         .add(new Color(0, 191, 255))
   *         .build();
   * }</pre>
   *
   * <p>Elements appear in the resulting set in the same order they were first added to the builder.
   *
   * <p>Building does not change the state of the builder, so it is still possible to add more
   * elements and to build again.
   *
   * @since 2.0
   */
ImmutableSet (/android/guava/src/com/google/common/collect/ImmutableSet.java)/**
 * A {@link Set} whose contents will never change, with many other important properties detailed at
 * {@link ImmutableCollection}.
 *
 * @since 2.0
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableSetMultimap.java)/**
   * A builder for creating immutable {@code SetMultimap} instances, especially {@code public static
   * final} multimaps ("constant multimaps"). Example:
   *
   * <pre>{@code
   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =
   *     new ImmutableSetMultimap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .putAll("several", 1, 2, 3)
   *         .putAll("many", 1, 2, 3, 4, 5)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously
   * created multimaps.
   *
   * @since 2.0
   */
ImmutableSetMultimap (/android/guava/src/com/google/common/collect/ImmutableSetMultimap.java)/**
 * A {@link SetMultimap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Mike Ward
 * @since 2.0
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableSortedMap.java)/**
   * A builder for creating immutable sorted map instances, especially {@code public static final}
   * maps ("constant maps"). Example:
   *
   * <pre>{@code
   * static final ImmutableSortedMap<Integer, String> INT_TO_WORD =
   *     new ImmutableSortedMap.Builder<Integer, String>(Ordering.natural())
   *         .put(1, "one")
   *         .put(2, "two")
   *         .put(3, "three")
   *         .build();
   * }</pre>
   *
   * <p>For <i>small</i> immutable sorted maps, the {@code ImmutableSortedMap.of()} methods are even
   * more convenient.
   *
   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build
   * multiple maps in series. Each map is a superset of the maps created before it.
   *
   * @since 2.0
   */
SerializedForm (/android/guava/src/com/google/common/collect/ImmutableSortedMap.java)/**
   * Serialized type for all ImmutableSortedMap instances. It captures the logical contents and they
   * are reconstructed using public factory methods. This ensures that the implementation types
   * remain as implementation details.
   */
ImmutableSortedMap (/android/guava/src/com/google/common/collect/ImmutableSortedMap.java)/**
 * A {@link NavigableMap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p><b>Warning:</b> as with any sorted collection, you are strongly advised not to use a {@link
 * Comparator} or {@link Comparable} type whose comparison behavior is <i>inconsistent with
 * equals</i>. That is, {@code a.compareTo(b)} or {@code comparator.compare(a, b)} should equal zero
 * <i>if and only if</i> {@code a.equals(b)}. If this advice is not followed, the resulting map will
 * not correctly obey its specification.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0 (implements {@code NavigableMap} since 12.0)
 */
ImmutableSortedMapFauxverideShim (/android/guava/src/com/google/common/collect/ImmutableSortedMapFauxverideShim.java)/**
 * "Overrides" the {@link ImmutableMap} static methods that lack {@link ImmutableSortedMap}
 * equivalents with deprecated, exception-throwing versions. See {@link
 * ImmutableSortedSetFauxverideShim} for details.
 *
 * @author Chris Povirk
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableSortedMultiset.java)/**
   * A builder for creating immutable multiset instances, especially {@code public static final}
   * multisets ("constant multisets"). Example:
   *
   * <pre>{@code
   * public static final ImmutableSortedMultiset<Bean> BEANS =
   *     new ImmutableSortedMultiset.Builder<Bean>(colorComparator())
   *         .addCopies(Bean.COCOA, 4)
   *         .addCopies(Bean.GARDEN, 6)
   *         .addCopies(Bean.RED, 8)
   *         .addCopies(Bean.BLACK_EYED, 10)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multisets in series.
   *
   * @since 12.0
   */
ImmutableSortedMultiset (/android/guava/src/com/google/common/collect/ImmutableSortedMultiset.java)/**
 * A {@link SortedMultiset} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p><b>Warning:</b> as with any sorted collection, you are strongly advised not to use a {@link
 * Comparator} or {@link Comparable} type whose comparison behavior is <i>inconsistent with
 * equals</i>. That is, {@code a.compareTo(b)} or {@code comparator.compare(a, b)} should equal zero
 * <i>if and only if</i> {@code a.equals(b)}. If this advice is not followed, the resulting
 * collection will not correctly obey its specification.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Louis Wasserman
 * @since 12.0
 */
ImmutableSortedMultisetFauxverideShim (/android/guava/src/com/google/common/collect/ImmutableSortedMultisetFauxverideShim.java)/**
 * "Overrides" the {@link ImmutableMultiset} static methods that lack {@link
 * ImmutableSortedMultiset} equivalents with deprecated, exception-throwing versions. This prevents
 * accidents like the following:
 *
 * <pre>{@code
 * List<Object> objects = ...;
 * // Sort them:
 * Set<Object> sorted = ImmutableSortedMultiset.copyOf(objects);
 * // BAD CODE! The returned multiset is actually an unsorted ImmutableMultiset!
 * }</pre>
 *
 * <p>While we could put the overrides in {@link ImmutableSortedMultiset} itself, it seems clearer
 * to separate these "do not call" methods from those intended for normal use.
 *
 * @author Louis Wasserman
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableSortedSet.java)/**
   * A builder for creating immutable sorted set instances, especially {@code public static final}
   * sets ("constant sets"), with a given comparator. Example:
   *
   * <pre>{@code
   * public static final ImmutableSortedSet<Number> LUCKY_NUMBERS =
   *     new ImmutableSortedSet.Builder<Number>(ODDS_FIRST_COMPARATOR)
   *         .addAll(SINGLE_DIGIT_PRIMES)
   *         .add(42)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple sets in series. Each set is a superset of the set created before it.
   *
   * @since 2.0
   */
ImmutableSortedSetFauxverideShim (/android/guava/src/com/google/common/collect/ImmutableSortedSetFauxverideShim.java)/**
 * "Overrides" the {@link ImmutableSet} static methods that lack {@link ImmutableSortedSet}
 * equivalents with deprecated, exception-throwing versions. This prevents accidents like the
 * following:
 *
 * <pre>{@code
 * List<Object> objects = ...;
 * // Sort them:
 * Set<Object> sorted = ImmutableSortedSet.copyOf(objects);
 * // BAD CODE! The returned set is actually an unsorted ImmutableSet!
 * }</pre>
 *
 * <p>While we could put the overrides in {@link ImmutableSortedSet} itself, it seems clearer to
 * separate these "do not call" methods from those intended for normal use.
 *
 * @author Chris Povirk
 */
Builder (/android/guava/src/com/google/common/collect/ImmutableTable.java)/**
   * A builder for creating immutable table instances, especially {@code public static final} tables
   * ("constant tables"). Example:
   *
   * <pre>{@code
   * static final ImmutableTable<Integer, Character, String> SPREADSHEET =
   *     new ImmutableTable.Builder<Integer, Character, String>()
   *         .put(1, 'A', "foo")
   *         .put(1, 'B', "bar")
   *         .put(2, 'A', "baz")
   *         .build();
   * }</pre>
   *
   * <p>By default, the order in which cells are added to the builder determines the iteration
   * ordering of all views in the returned table, with {@link #putAll} following the {@link
   * Table#cellSet()} iteration order. However, if {@link #orderRowsBy} or {@link #orderColumnsBy}
   * is called, the views are sorted by the supplied comparators.
   *
   * <p>For empty or single-cell immutable tables, {@link #of()} and {@link #of(Object, Object,
   * Object)} are even more convenient.
   *
   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build
   * multiple tables in series. Each table is a superset of the tables created before it.
   *
   * @since 11.0
   */
SerializedForm (/android/guava/src/com/google/common/collect/ImmutableTable.java)/**
   * Serialized type for all ImmutableTable instances. It captures the logical contents and
   * preserves iteration order of all views.
   */
ImmutableTable (/android/guava/src/com/google/common/collect/ImmutableTable.java)/**
 * A {@link Table} whose contents will never change, with many other important properties detailed
 * at {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Gregory Kick
 * @since 11.0
 */
Interner (/android/guava/src/com/google/common/collect/Interner.java)/**
 * Provides equivalent behavior to {@link String#intern} for other immutable types. Common
 * implementations are available from the {@link Interners} class.
 *
 * @author Kevin Bourrillion
 * @since 3.0
 */
InternerBuilder (/android/guava/src/com/google/common/collect/Interners.java)/**
   * Builder for {@link Interner} instances.
   *
   * @since 21.0
   */
Interners (/android/guava/src/com/google/common/collect/Interners.java)/**
 * Contains static methods pertaining to instances of {@link Interner}.
 *
 * @author Kevin Bourrillion
 * @since 3.0
 */
Iterables (/android/guava/src/com/google/common/collect/Iterables.java)/**
 * An assortment of mainly legacy static utility methods that operate on or return objects of type
 * {@code Iterable}. Except as noted, each method has a corresponding {@link Iterator}-based method
 * in the {@link Iterators} class.
 *
 * <p><b>Java 8 users:</b> several common uses for this class are now more comprehensively addressed
 * by the new {@link java.util.stream.Stream} library. Read the method documentation below for
 * comparisons. This class is not being deprecated, but we gently encourage you to migrate to
 * streams.
 *
 * <p><i>Performance notes:</i> Unless otherwise noted, all of the iterables produced in this class
 * are <i>lazy</i>, which means that their iterators only advance the backing iteration when
 * absolutely necessary.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables"> {@code
 * Iterables}</a>.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @since 2.0
 */
PeekingImpl (/android/guava/src/com/google/common/collect/Iterators.java)/** Implementation of PeekingIterator that avoids peeking unless necessary. */
MergingIterator (/android/guava/src/com/google/common/collect/Iterators.java)/**
   * An iterator that performs a lazy N-way merge, calculating the next value each time the iterator
   * is polled. This amortizes the sorting cost over the iteration and requires less memory than
   * sorting all elements at once.
   *
   * <p>Retrieving a single element takes approximately O(log(M)) time, where M is the number of
   * iterators. (Retrieving all elements takes approximately O(N*log(M)) time, where N is the total
   * number of elements.)
   */
Iterators (/android/guava/src/com/google/common/collect/Iterators.java)/**
 * This class contains static utility methods that operate on or return objects of type {@link
 * Iterator}. Except as noted, each method has a corresponding {@link Iterable}-based method in the
 * {@link Iterables} class.
 *
 * <p><i>Performance notes:</i> Unless otherwise noted, all of the iterators produced in this class
 * are <i>lazy</i>, which means that they only advance the backing iteration when absolutely
 * necessary.
 *
 * <p>See the Guava User Guide section on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables"> {@code
 * Iterators}</a>.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @since 2.0
 */
LexicographicalOrdering (/android/guava/src/com/google/common/collect/LexicographicalOrdering.java)/** An ordering which sorts iterables by comparing corresponding elements pairwise. */
ValueEntry (/android/guava/src/com/google/common/collect/LinkedHashMultimap.java)/**
   * LinkedHashMultimap entries are in no less than three coexisting linked lists: a bucket in the
   * hash table for a {@code Set<V>} associated with a key, the linked list of insertion-ordered
   * entries in that {@code Set<V>}, and the linked list of entries in the LinkedHashMultimap as a
   * whole.
   */
LinkedHashMultimap (/android/guava/src/com/google/common/collect/LinkedHashMultimap.java)/**
 * Implementation of {@code Multimap} that does not allow duplicate key-value entries and that
 * returns collections whose iterators follow the ordering in which the data was added to the
 * multimap.
 *
 * <p>The collections returned by {@code keySet}, {@code keys}, and {@code asMap} iterate through
 * the keys in the order they were first added to the multimap. Similarly, {@code get}, {@code
 * removeAll}, and {@code replaceValues} return collections that iterate through the values in the
 * order they were added. The collections generated by {@code entries} and {@code values} iterate
 * across the key-value mappings in the order they were added to the multimap.
 *
 * <p>The iteration ordering of the collections generated by {@code keySet}, {@code keys}, and
 * {@code asMap} has a few subtleties. As long as the set of keys remains unchanged, adding or
 * removing mappings does not affect the key iteration order. However, if you remove all values
 * associated with a key and then add the key back to the multimap, that key will come last in the
 * key iteration order.
 *
 * <p>The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an
 * existing key-value pair has no effect.
 *
 * <p>Keys and values may be null. All optional multimap methods are supported, and all returned
 * views are modifiable.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedSetMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0
 */
LinkedHashMultimapGwtSerializationDependencies (/android/guava/src/com/google/common/collect/LinkedHashMultimapGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element types of a {@link
 * LinkedHashMultimap}. The GWT supersource for this class contains a field for each type.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 */
LinkedHashMultiset (/android/guava/src/com/google/common/collect/LinkedHashMultiset.java)/**
 * A {@code Multiset} implementation with predictable iteration order. Its iterator orders elements
 * according to when the first occurrence of the element was added. When the multiset contains
 * multiple instances of an element, those instances are consecutive in the iteration order. If all
 * occurrences of an element are removed, after which that element is added to the multiset, the
 * element will appear at the end of the iteration.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @since 2.0
 */
NodeIterator (/android/guava/src/com/google/common/collect/LinkedListMultimap.java)/** An {@code Iterator} over all nodes. */
DistinctKeyIterator (/android/guava/src/com/google/common/collect/LinkedListMultimap.java)/** An {@code Iterator} over distinct keys in key head order. */
ValueForKeyIterator (/android/guava/src/com/google/common/collect/LinkedListMultimap.java)/** A {@code ListIterator} over values for a specified key. */
LinkedListMultimap (/android/guava/src/com/google/common/collect/LinkedListMultimap.java)/**
 * An implementation of {@code ListMultimap} that supports deterministic iteration order for both
 * keys and values. The iteration order is preserved across non-distinct key values. For example,
 * for the following multimap definition:
 *
 * <pre>{@code
 * Multimap<K, V> multimap = LinkedListMultimap.create();
 * multimap.put(key1, foo);
 * multimap.put(key2, bar);
 * multimap.put(key1, baz);
 * }</pre>
 *
 * ... the iteration order for {@link #keys()} is {@code [key1, key2, key1]}, and similarly for
 * {@link #entries()}. Unlike {@link LinkedHashMultimap}, the iteration order is kept consistent
 * between keys, entries and values. For example, calling:
 *
 * <pre>{@code
 * multimap.remove(key1, foo);
 * }</pre>
 *
 * <p>changes the entries iteration order to {@code [key2=bar, key1=baz]} and the key iteration
 * order to {@code [key2, key1]}. The {@link #entries()} iterator returns mutable map entries, and
 * {@link #replaceValues} attempts to preserve iteration order as much as possible.
 *
 * <p>The collections returned by {@link #keySet()} and {@link #asMap} iterate through the keys in
 * the order they were first added to the multimap. Similarly, {@link #get}, {@link #removeAll}, and
 * {@link #replaceValues} return collections that iterate through the values in the order they were
 * added. The collections generated by {@link #entries()}, {@link #keys()}, and {@link #values}
 * iterate across the key-value mappings in the order they were added to the multimap.
 *
 * <p>The {@link #values()} and {@link #entries()} methods both return a {@code List}, instead of
 * the {@code Collection} specified by the {@link ListMultimap} interface.
 *
 * <p>The methods {@link #get}, {@link #keySet()}, {@link #keys()}, {@link #values}, {@link
 * #entries()}, and {@link #asMap} return collections that are views of the multimap. If the
 * multimap is modified while an iteration over any of those collections is in progress, except
 * through the iterator's methods, the results of the iteration are undefined.
 *
 * <p>Keys and values may be null. All optional multimap methods are supported, and all returned
 * views are modifiable.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedListMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Mike Bostock
 * @since 2.0
 */
ListMultimap (/android/guava/src/com/google/common/collect/ListMultimap.java)/**
 * A {@code Multimap} that can hold duplicate key-value pairs and that maintains the insertion
 * ordering of values for a given key. See the {@link Multimap} documentation for information common
 * to all multimaps.
 *
 * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods each return a {@link
 * List} of values. Though the method signature doesn't say so explicitly, the map returned by
 * {@link #asMap} has {@code List} values.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
OnePlusArrayList (/android/guava/src/com/google/common/collect/Lists.java)/** @see Lists#asList(Object, Object[]) */
TwoPlusArrayList (/android/guava/src/com/google/common/collect/Lists.java)/** @see Lists#asList(Object, Object, Object[]) */
TransformingSequentialList (/android/guava/src/com/google/common/collect/Lists.java)/**
   * Implementation of a sequential transforming list.
   *
   * @see Lists#transform
   */
TransformingRandomAccessList (/android/guava/src/com/google/common/collect/Lists.java)/**
   * Implementation of a transforming random access list. We try to make as many of these methods
   * pass-through to the source list as possible so that the performance characteristics of the
   * source list and transformed list are similar.
   *
   * @see Lists#transform
   */
Lists (/android/guava/src/com/google/common/collect/Lists.java)/**
 * Static utility methods pertaining to {@link List} instances. Also see this class's counterparts
 * {@link Sets}, {@link Maps} and {@link Queues}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#lists"> {@code Lists}</a>.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ValueDifference (/android/guava/src/com/google/common/collect/MapDifference.java)/**
   * A difference between the mappings from two maps with the same key. The {@link #leftValue} and
   * {@link #rightValue} are not equal, and one but not both of them may be null.
   *
   * @since 2.0
   */
MapDifference (/android/guava/src/com/google/common/collect/MapDifference.java)/**
 * An object representing the differences between two maps.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
MapMaker (/android/guava/src/com/google/common/collect/MapMaker.java)/**
 * A builder of {@link ConcurrentMap} instances that can have keys or values automatically wrapped
 * in {@linkplain WeakReference weak} references.
 *
 * <p>Usage example:
 *
 * <pre>{@code
 * ConcurrentMap<Request, Stopwatch> timers = new MapMaker()
 *     .concurrencyLevel(4)
 *     .weakKeys()
 *     .makeMap();
 * }</pre>
 *
 * <p>These features are all optional; {@code new MapMaker().makeMap()} returns a valid concurrent
 * map that behaves similarly to a {@link ConcurrentHashMap}.
 *
 * <p>The returned map is implemented as a hash table with similar performance characteristics to
 * {@link ConcurrentHashMap}. It supports all optional operations of the {@code ConcurrentMap}
 * interface. It does not permit null keys or values.
 *
 * <p><b>Note:</b> by default, the returned map uses equality comparisons (the {@link Object#equals
 * equals} method) to determine equality for keys or values. However, if {@link #weakKeys} was
 * specified, the map uses identity ({@code ==}) comparisons instead for keys. Likewise, if {@link
 * #weakValues} was specified, the map uses identity comparisons for values.
 *
 * <p>The view collections of the returned map have <i>weakly consistent iterators</i>. This means
 * that they are safe for concurrent use, but if other threads modify the map after the iterator is
 * created, it is undefined which of these changes, if any, are reflected in that iterator. These
 * iterators never throw {@link ConcurrentModificationException}.
 *
 * <p>If {@link #weakKeys} or {@link #weakValues} are requested, it is possible for a key or value
 * present in the map to be reclaimed by the garbage collector. Entries with reclaimed keys or
 * values may be removed from the map on each map modification or on occasional map accesses; such
 * entries may be counted by {@link Map#size}, but will never be visible to read or write
 * operations. A partially-reclaimed entry is never exposed to the user. Any {@link java.util.Entry}
 * instance retrieved from the map's {@linkplain Map#entrySet entry set} is a snapshot of that
 * entry's state at the time of retrieval; such entries do, however, support {@link
 * java.util.Entry#setValue}, which simply calls {@link Map#put} on the entry's key.
 *
 * <p>The maps produced by {@code MapMaker} are serializable, and the deserialized maps retain all
 * the configuration properties of the original map. During deserialization, if the original map had
 * used weak references, the entries are reconstructed as they were, but it's not unlikely they'll
 * be quickly garbage-collected before they are ever accessed.
 *
 * <p>{@code new MapMaker().weakKeys().makeMap()} is a recommended replacement for {@link
 * java.util.WeakHashMap}, but note that it compares keys using object identity whereas {@code
 * WeakHashMap} uses {@link Object#equals}.
 *
 * @author Bob Lee
 * @author Charles Fry
 * @author Kevin Bourrillion
 * @since 2.0
 */
InternalEntryHelper (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * A helper object for operating on {@link InternalEntry} instances in a type-safe and efficient
   * manner.
   *
   * <p>For each of the four combinations of strong/weak key and strong/weak value, there are
   * corresponding {@link InternalEntry}, {@link Segment}, and {@link InternalEntryHelper}
   * implementations.
   *
   * @param <K> the type of the key in each entry
   * @param <V> the type of the value in each entry
   * @param <E> the type of the {@link InternalEntry} entry implementation
   * @param <S> the type of the {@link Segment} entry implementation
   */
InternalEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * An entry in a hash table of a {@link Segment}.
   *
   * <p>Entries in the map can be in the following states:
   *
   * <p>Valid: - Live: valid key/value are set
   *
   * <p>Invalid: - Collected: key/value was partially collected, but not yet cleaned up
   */
AbstractStrongKeyEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Base class for {@link InternalEntry} implementations for strong keys. */
StrongValueEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Marker interface for {@link InternalEntry} implementations for strong values. */
WeakValueEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Marker interface for {@link InternalEntry} implementations for weak values. */
Helper (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntryHelper} for strong keys and strong values. */
StrongKeyStrongValueEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for strong keys and strong values. */
Helper (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntryHelper} for strong keys and weak values. */
StrongKeyWeakValueEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for strong keys and weak values. */
Helper (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
     * Concrete implementation of {@link InternalEntryHelper} for strong keys and {@link Dummy}
     * values.
     */
StrongKeyDummyValueEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for strong keys and {@link Dummy} values. */
AbstractWeakKeyEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Base class for {@link InternalEntry} implementations for weak keys. */
Helper (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
     * Concrete implementation of {@link InternalEntryHelper} for weak keys and {@link Dummy}
     * values.
     */
WeakKeyDummyValueEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for weak keys and {@link Dummy} values. */
Helper (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntryHelper} for weak keys and strong values. */
WeakKeyStrongValueEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for weak keys and strong values. */
Helper (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntryHelper} for weak keys and weak values. */
WeakKeyWeakValueEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for weak keys and weak values. */
WeakValueReference (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** A weakly referenced value that also has a reference to its containing entry. */
DummyInternalEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * A dummy implementation of {@link InternalEntry}, solely for use in the type signature of {@link
   * #UNSET_WEAK_VALUE_REFERENCE} below.
   */
WeakValueReferenceImpl (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link WeakValueReference}. */
Segment (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * Segments are specialized versions of hash tables. This subclass inherits from ReentrantLock
   * opportunistically, just to simplify some locking and avoid separate construction.
   */
StrongKeyStrongValueSegment (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for strong keys and strong values. */
StrongKeyWeakValueSegment (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for strong keys and weak values. */
StrongKeyDummyValueSegment (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for strong keys and {@link Dummy} values. */
WeakKeyStrongValueSegment (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for weak keys and strong values. */
WeakKeyWeakValueSegment (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for weak keys and weak values. */
WeakKeyDummyValueSegment (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for weak keys and {@link Dummy} values. */
WriteThroughEntry (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * Custom Entry class used by EntryIterator.next(), that relays setValue changes to the underlying
   * map.
   */
AbstractSerializationProxy (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * The actual object that gets serialized. Unfortunately, readResolve() doesn't get called when a
   * circular dependency is present, so the proxy must be able to behave as the map itself.
   */
SerializationProxy (/android/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * The actual object that gets serialized. Unfortunately, readResolve() doesn't get called when a
   * circular dependency is present, so the proxy must be able to behave as the map itself.
   */
UnmodifiableEntries (/android/guava/src/com/google/common/collect/Maps.java)/** @see Multimaps#unmodifiableEntries */
UnmodifiableEntrySet (/android/guava/src/com/google/common/collect/Maps.java)/** @see Maps#unmodifiableEntrySet(Set) */
UnmodifiableBiMap (/android/guava/src/com/google/common/collect/Maps.java)/** @see Maps#unmodifiableBiMap(BiMap) */
EntryTransformer (/android/guava/src/com/google/common/collect/Maps.java)/**
   * A transformation of the value of a key-value pair, using both key and value as inputs. To apply
   * the transformation to a map, use {@link Maps#transformEntries(Map, EntryTransformer)}.
   *
   * @param <K> the key type of the input and output entries
   * @param <V1> the value type of the input entry
   * @param <V2> the value type of the output entry
   * @since 7.0
   */
ViewCachingAbstractMap (/android/guava/src/com/google/common/collect/Maps.java)/**
   * {@code AbstractMap} extension that makes it easy to cache customized keySet, values, and
   * entrySet views.
   */
Maps (/android/guava/src/com/google/common/collect/Maps.java)/**
 * Static utility methods pertaining to {@link Map} instances (including instances of {@link
 * SortedMap}, {@link BiMap}, etc.). Also see this class's counterparts {@link Lists}, {@link Sets}
 * and {@link Queues}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#maps"> {@code Maps}</a>.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Isaac Shum
 * @author Louis Wasserman
 * @since 2.0
 */
Builder (/android/guava/src/com/google/common/collect/MinMaxPriorityQueue.java)/**
   * The builder class used in creation of min-max priority queues. Instead of constructing one
   * directly, use {@link MinMaxPriorityQueue#orderedBy(Comparator)}, {@link
   * MinMaxPriorityQueue#expectedSize(int)} or {@link MinMaxPriorityQueue#maximumSize(int)}.
   *
   * @param <B> the upper bound on the eventual type that can be produced by this builder (for
   *     example, a {@code Builder<Number>} can produce a {@code Queue<Number>} or {@code
   *     Queue<Integer>} but not a {@code Queue<Object>}).
   * @since 8.0
   */
Heap (/android/guava/src/com/google/common/collect/MinMaxPriorityQueue.java)/**
   * Each instance of MinMaxPriortyQueue encapsulates two instances of Heap: a min-heap and a
   * max-heap. Conceptually, these might each have their own array for storage, but for efficiency's
   * sake they are stored interleaved on alternate heap levels in the same array (MMPQ.queue).
   */
QueueIterator (/android/guava/src/com/google/common/collect/MinMaxPriorityQueue.java)/**
   * Iterates the elements of the queue in no particular order.
   *
   * <p>If the underlying queue is modified during iteration an exception will be thrown.
   */
MinMaxPriorityQueue (/android/guava/src/com/google/common/collect/MinMaxPriorityQueue.java)/**
 * A double-ended priority queue, which provides constant-time access to both its least element and
 * its greatest element, as determined by the queue's specified comparator. If no comparator is
 * given at creation time, the natural order of elements is used. If no maximum size is given at
 * creation time, the queue is unbounded.
 *
 * <p>Usage example:
 *
 * <pre>{@code
 * MinMaxPriorityQueue<User> users = MinMaxPriorityQueue.orderedBy(userComparator)
 *     .maximumSize(1000)
 *     .create();
 * }</pre>
 *
 * <p>As a {@link Queue} it functions exactly as a {@link PriorityQueue}: its head element -- the
 * implicit target of the methods {@link #peek()}, {@link #poll()} and {@link #remove()} -- is
 * defined as the <i>least</i> element in the queue according to the queue's comparator. But unlike
 * a regular priority queue, the methods {@link #peekLast}, {@link #pollLast} and {@link
 * #removeLast} are also provided, to act on the <i>greatest</i> element in the queue instead.
 *
 * <p>A min-max priority queue can be configured with a maximum size. If so, each time the size of
 * the queue exceeds that value, the queue automatically removes its greatest element according to
 * its comparator (which might be the element that was just added). This is different from
 * conventional bounded queues, which either block or reject new elements when full.
 *
 * <p>This implementation is based on the <a
 * href="http://portal.acm.org/citation.cfm?id=6621">min-max heap</a> developed by Atkinson, et al.
 * Unlike many other double-ended priority queues, it stores elements in a single array, as compact
 * as the traditional heap data structure used in {@link PriorityQueue}.
 *
 * <p>This class is not thread-safe, and does not accept null elements.
 *
 * <p><i>Performance notes:</i>
 *
 * <ul>
 *   <li>If you only access one end of the queue, and do use a maximum size, this class will perform
 *       significantly worse than a {@code PriorityQueue} with manual eviction above the maximum
 *       size. In many cases {@link Ordering#leastOf} may work for your use case with significantly
 *       improved (and asymptotically superior) performance.
 *   <li>The retrieval operations {@link #peek}, {@link #peekFirst}, {@link #peekLast}, {@link
 *       #element}, and {@link #size} are constant-time.
 *   <li>The enqueuing and dequeuing operations ({@link #offer}, {@link #add}, and all the forms of
 *       {@link #poll} and {@link #remove()}) run in {@code O(log n) time}.
 *   <li>The {@link #remove(Object)} and {@link #contains} operations require linear ({@code O(n)})
 *       time.
 *   <li>If you only access one end of the queue, and don't use a maximum size, this class is
 *       functionally equivalent to {@link PriorityQueue}, but significantly slower.
 * </ul>
 *
 * @author Sverre Sundsdal
 * @author Torbjorn Gannholm
 * @since 8.0
 */
Multimap (/android/guava/src/com/google/common/collect/Multimap.java)/**
 * A collection that maps keys to values, similar to {@link Map}, but in which each key may be
 * associated with <i>multiple</i> values. You can visualize the contents of a multimap either as a
 * map from keys to <i>nonempty</i> collections of values:
 *
 * <ul>
 *   <li>a → 1, 2
 *   <li>b → 3
 * </ul>
 *
 * ... or as a single "flattened" collection of key-value pairs:
 *
 * <ul>
 *   <li>a → 1
 *   <li>a → 2
 *   <li>b → 3
 * </ul>
 *
 * <p><b>Important:</b> although the first interpretation resembles how most multimaps are
 * <i>implemented</i>, the design of the {@code Multimap} API is based on the <i>second</i> form.
 * So, using the multimap shown above as an example, the {@link #size} is {@code 3}, not {@code 2},
 * and the {@link #values} collection is {@code [1, 2, 3]}, not {@code [[1, 2], [3]]}. For those
 * times when the first style is more useful, use the multimap's {@link #asMap} view (or create a
 * {@code Map<K, Collection<V>>} in the first place).
 *
 * <h3>Example</h3>
 *
 * <p>The following code:
 *
 * <pre>{@code
 * ListMultimap<String, String> multimap = ArrayListMultimap.create();
 * for (President pres : US_PRESIDENTS_IN_ORDER) {
 *   multimap.put(pres.firstName(), pres.lastName());
 * }
 * for (String firstName : multimap.keySet()) {
 *   List<String> lastNames = multimap.get(firstName);
 *   out.println(firstName + ": " + lastNames);
 * }
 * }</pre>
 *
 * ... produces output such as:
 *
 * <pre>{@code
 * Zachary: [Taylor]
 * John: [Adams, Adams, Tyler, Kennedy]  // Remember, Quincy!
 * George: [Washington, Bush, Bush]
 * Grover: [Cleveland, Cleveland]        // Two, non-consecutive terms, rep'ing NJ!
 * ...
 * }</pre>
 *
 * <h3>Views</h3>
 *
 * <p>Much of the power of the multimap API comes from the <i>view collections</i> it provides.
 * These always reflect the latest state of the multimap itself. When they support modification, the
 * changes are <i>write-through</i> (they automatically update the backing multimap). These view
 * collections are:
 *
 * <ul>
 *   <li>{@link #asMap}, mentioned above
 *   <li>{@link #keys}, {@link #keySet}, {@link #values}, {@link #entries}, which are similar to the
 *       corresponding view collections of {@link Map}
 *   <li>and, notably, even the collection returned by {@link #get get(key)} is an active view of
 *       the values corresponding to {@code key}
 * </ul>
 *
 * <p>The collections returned by the {@link #replaceValues replaceValues} and {@link #removeAll
 * removeAll} methods, which contain values that have just been removed from the multimap, are
 * naturally <i>not</i> views.
 *
 * <h3>Subinterfaces</h3>
 *
 * <p>Instead of using the {@code Multimap} interface directly, prefer the subinterfaces {@link
 * ListMultimap} and {@link SetMultimap}. These take their names from the fact that the collections
 * they return from {@code get} behave like (and, of course, implement) {@link List} and {@link
 * Set}, respectively.
 *
 * <p>For example, the "presidents" code snippet above used a {@code ListMultimap}; if it had used a
 * {@code SetMultimap} instead, two presidents would have vanished, and last names might or might
 * not appear in chronological order.
 *
 * <p><b>Warning:</b> instances of type {@code Multimap} may not implement {@link Object#equals} in
 * the way you expect. Multimaps containing the same key-value pairs, even in the same order, may or
 * may not be equal and may or may not have the same {@code hashCode}. The recommended subinterfaces
 * provide much stronger guarantees.
 *
 * <h3>Comparison to a map of collections</h3>
 *
 * <p>Multimaps are commonly used in places where a {@code Map<K, Collection<V>>} would otherwise
 * have appeared. The differences include:
 *
 * <ul>
 *   <li>There is no need to populate an empty collection before adding an entry with {@link #put
 *       put}.
 *   <li>{@code get} never returns {@code null}, only an empty collection.
 *   <li>A key is contained in the multimap if and only if it maps to at least one value. Any
 *       operation that causes a key to have zero associated values has the effect of
 *       <i>removing</i> that key from the multimap.
 *   <li>The total entry count is available as {@link #size}.
 *   <li>Many complex operations become easier; for example, {@code
 *       Collections.min(multimap.values())} finds the smallest value across all keys.
 * </ul>
 *
 * <h3>Implementations</h3>
 *
 * <p>As always, prefer the immutable implementations, {@link ImmutableListMultimap} and {@link
 * ImmutableSetMultimap}. General-purpose mutable implementations are listed above under "All Known
 * Implementing Classes". You can also create a <i>custom</i> multimap, backed by any {@code Map}
 * and {@link Collection} types, using the {@link Multimaps#newMultimap Multimaps.newMultimap}
 * family of methods. Finally, another popular way to obtain a multimap is using {@link
 * Multimaps#index Multimaps.index}. See the {@link Multimaps} class for these and other static
 * utilities related to multimaps.
 *
 * <h3>Other Notes</h3>
 *
 * <p>As with {@code Map}, the behavior of a {@code Multimap} is not specified if key objects
 * already present in the multimap change in a manner that affects {@code equals} comparisons. Use
 * caution if mutable objects are used as keys in a {@code Multimap}.
 *
 * <p>All methods that modify the multimap are optional. The view collections returned by the
 * multimap may or may not be modifiable. Any modification method that is not supported will throw
 * {@link UnsupportedOperationException}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
MultimapBuilderWithKeys (/android/guava/src/com/google/common/collect/MultimapBuilder.java)/**
   * An intermediate stage in a {@link MultimapBuilder} in which the key-value collection map
   * implementation has been specified, but the value collection implementation has not.
   *
   * @param <K0> The upper bound on the key type of the generated multimap.
   * @since 16.0
   */
ListMultimapBuilder (/android/guava/src/com/google/common/collect/MultimapBuilder.java)/**
   * A specialization of {@link MultimapBuilder} that generates {@link ListMultimap} instances.
   *
   * @since 16.0
   */
SetMultimapBuilder (/android/guava/src/com/google/common/collect/MultimapBuilder.java)/**
   * A specialization of {@link MultimapBuilder} that generates {@link SetMultimap} instances.
   *
   * @since 16.0
   */
SortedSetMultimapBuilder (/android/guava/src/com/google/common/collect/MultimapBuilder.java)/**
   * A specialization of {@link MultimapBuilder} that generates {@link SortedSetMultimap} instances.
   *
   * @since 16.0
   */
MultimapBuilder (/android/guava/src/com/google/common/collect/MultimapBuilder.java)/**
 * A builder for a multimap implementation that allows customization of the backing map and value
 * collection implementations used in a particular multimap.
 *
 * <p>This can be used to easily configure multimap data structure implementations not provided
 * explicitly in {@code com.google.common.collect}, for example:
 *
 * <pre>{@code
 * ListMultimap<String, Integer> treeListMultimap =
 *     MultimapBuilder.treeKeys().arrayListValues().build();
 * SetMultimap<Integer, MyEnum> hashEnumMultimap =
 *     MultimapBuilder.hashKeys().enumSetValues(MyEnum.class).build();
 * }</pre>
 *
 * <p>{@code MultimapBuilder} instances are immutable. Invoking a configuration method has no effect
 * on the receiving instance; you must store and use the new builder instance it returns instead.
 *
 * <p>The generated multimaps are serializable if the key and value types are serializable, unless
 * stated otherwise in one of the configuration methods.
 *
 * @author Louis Wasserman
 * @param <K0> An upper bound on the key type of the generated multimap.
 * @param <V0> An upper bound on the value type of the generated multimap.
 * @since 16.0
 */
MapMultimap (/android/guava/src/com/google/common/collect/Multimaps.java)/** @see Multimaps#forMap */
Entries (/android/guava/src/com/google/common/collect/Multimaps.java)/** A skeleton implementation of {@link Multimap#entries()}. */
AsMap (/android/guava/src/com/google/common/collect/Multimaps.java)/** A skeleton implementation of {@link Multimap#asMap()}. */
Multimaps (/android/guava/src/com/google/common/collect/Multimaps.java)/**
 * Provides static methods acting on or generating a {@code Multimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#multimaps"> {@code
 * Multimaps}</a>.
 *
 * @author Jared Levy
 * @author Robert Konigsberg
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
Entry (/android/guava/src/com/google/common/collect/Multiset.java)/**
   * An unmodifiable element-count pair for a multiset. The {@link Multiset#entrySet} method returns
   * a view of the multiset whose elements are of this class. A multiset implementation may return
   * Entry instances that are either live "read-through" views to the Multiset, or immutable
   * snapshots. Note that this type is unrelated to the similarly-named type {@code Map.Entry}.
   *
   * @since 2.0
   */
Multiset (/android/guava/src/com/google/common/collect/Multiset.java)/**
 * A collection that supports order-independent equality, like {@link Set}, but may have duplicate
 * elements. A multiset is also sometimes called a <i>bag</i>.
 *
 * <p>Elements of a multiset that are equal to one another are referred to as <i>occurrences</i> of
 * the same single element. The total number of occurrences of an element in a multiset is called
 * the <i>count</i> of that element (the terms "frequency" and "multiplicity" are equivalent, but
 * not used in this API). Since the count of an element is represented as an {@code int}, a multiset
 * may never contain more than {@link Integer#MAX_VALUE} occurrences of any one element.
 *
 * <p>{@code Multiset} refines the specifications of several methods from {@code Collection}. It
 * also defines an additional query operation, {@link #count}, which returns the count of an
 * element. There are five new bulk-modification operations, for example {@link #add(Object, int)},
 * to add or remove multiple occurrences of an element at once, or to set the count of an element to
 * a specific value. These modification operations are optional, but implementations which support
 * the standard collection operations {@link #add(Object)} or {@link #remove(Object)} are encouraged
 * to implement the related methods as well. Finally, two collection views are provided: {@link
 * #elementSet} contains the distinct elements of the multiset "with duplicates collapsed", and
 * {@link #entrySet} is similar but contains {@link Entry Multiset.Entry} instances, each providing
 * both a distinct element and the count of that element.
 *
 * <p>In addition to these required methods, implementations of {@code Multiset} are expected to
 * provide two {@code static} creation methods: {@code create()}, returning an empty multiset, and
 * {@code create(Iterable<? extends E>)}, returning a multiset containing the given initial
 * elements. This is simply a refinement of {@code Collection}'s constructor recommendations,
 * reflecting the new developments of Java 5.
 *
 * <p>As with other collection types, the modification operations are optional, and should throw
 * {@link UnsupportedOperationException} when they are not implemented. Most implementations should
 * support either all add operations or none of them, all removal operations or none of them, and if
 * and only if all of these are supported, the {@code setCount} methods as well.
 *
 * <p>A multiset uses {@link Object#equals} to determine whether two instances should be considered
 * "the same," <i>unless specified otherwise</i> by the implementation.
 *
 * <p>Common implementations include {@link ImmutableMultiset}, {@link HashMultiset}, and {@link
 * ConcurrentHashMultiset}.
 *
 * <p>If your values may be zero, negative, or outside the range of an int, you may wish to use
 * {@link com.google.common.util.concurrent.AtomicLongMap} instead. Note, however, that unlike
 * {@code Multiset}, {@code AtomicLongMap} does not automatically remove zeros.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
AbstractEntry (/android/guava/src/com/google/common/collect/Multisets.java)/**
   * Implementation of the {@code equals}, {@code hashCode}, and {@code toString} methods of {@link
   * Multiset.Entry}.
   */
ViewMultiset (/android/guava/src/com/google/common/collect/Multisets.java)/**
   * An {@link AbstractMultiset} with additional default implementations, some of them linear-time
   * implementations in terms of {@code elementSet} and {@code entrySet}.
   */
Multisets (/android/guava/src/com/google/common/collect/Multisets.java)/**
 * Provides static utility methods for creating and working with {@link Multiset} instances.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#multisets"> {@code
 * Multisets}</a>.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
SerializedForm (/android/guava/src/com/google/common/collect/MutableClassToInstanceMap.java)/** Serialized form of the map, to avoid serializing the constraint. */
MutableClassToInstanceMap (/android/guava/src/com/google/common/collect/MutableClassToInstanceMap.java)/**
 * A mutable class-to-instance map backed by an arbitrary user-provided map. See also {@link
 * ImmutableClassToInstanceMap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#classtoinstancemap"> {@code
 * ClassToInstanceMap}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
NaturalOrdering (/android/guava/src/com/google/common/collect/NaturalOrdering.java)/** An ordering that uses the natural order of the values. */
NullsFirstOrdering (/android/guava/src/com/google/common/collect/NullsFirstOrdering.java)/** An ordering that treats {@code null} as less than all other values. */
NullsLastOrdering (/android/guava/src/com/google/common/collect/NullsLastOrdering.java)/** An ordering that treats {@code null} as greater than all other values. */
ObjectArrays (/android/guava/src/com/google/common/collect/ObjectArrays.java)/**
 * Static utility methods pertaining to object arrays.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
ObjectCountHashMap (/android/guava/src/com/google/common/collect/ObjectCountHashMap.java)/**
 * ObjectCountHashMap is an implementation of {@code AbstractObjectCountMap} that uses arrays to
 * store key objects and count values. Comparing to using a traditional {@code HashMap}
 * implementation which stores keys and count values as map entries, {@code ObjectCountHashMap}
 * minimizes object allocation and reduces memory footprint.
 *
 * <p>In the absence of element deletions, this will iterate over elements in insertion order.
 */
ObjectCountLinkedHashMap (/android/guava/src/com/google/common/collect/ObjectCountLinkedHashMap.java)/**
 * ObjectCountLinkedHashMap is an implementation of {@code AbstractObjectCountMap} with insertion
 * iteration order, and uses arrays to store key objects and count values. Comparing to using a
 * traditional {@code LinkedHashMap} implementation which stores keys and count values as map
 * entries, {@code ObjectCountLinkedHashMap} minimizes object allocation and reduces memory
 * footprint.
 */
IncomparableValueException (/android/guava/src/com/google/common/collect/Ordering.java)/**
   * Exception thrown by a {@link Ordering#explicit(List)} or {@link Ordering#explicit(Object,
   * Object[])} comparator when comparing a value outside the set of values it can compare.
   * Extending {@link ClassCastException} may seem odd, but it is required.
   */
Ordering (/android/guava/src/com/google/common/collect/Ordering.java)/**
 * A comparator, with additional methods to support common operations. This is an "enriched" version
 * of {@code Comparator} for pre-Java-8 users, in the same sense that {@link FluentIterable} is an
 * enriched {@link Iterable} for pre-Java-8 users.
 *
 * <h3>Three types of methods</h3>
 *
 * Like other fluent types, there are three types of methods present: methods for <i>acquiring</i>,
 * <i>chaining</i>, and <i>using</i>.
 *
 * <h4>Acquiring</h4>
 *
 * <p>The common ways to get an instance of {@code Ordering} are:
 *
 * <ul>
 *   <li>Subclass it and implement {@link #compare} instead of implementing {@link Comparator}
 *       directly
 *   <li>Pass a <i>pre-existing</i> {@link Comparator} instance to {@link #from(Comparator)}
 *   <li>Use the natural ordering, {@link Ordering#natural}
 * </ul>
 *
 * <h4>Chaining</h4>
 *
 * <p>Then you can use the <i>chaining</i> methods to get an altered version of that {@code
 * Ordering}, including:
 *
 * <ul>
 *   <li>{@link #reverse}
 *   <li>{@link #compound(Comparator)}
 *   <li>{@link #onResultOf(Function)}
 *   <li>{@link #nullsFirst} / {@link #nullsLast}
 * </ul>
 *
 * <h4>Using</h4>
 *
 * <p>Finally, use the resulting {@code Ordering} anywhere a {@link Comparator} is required, or use
 * any of its special operations, such as:
 *
 * <ul>
 *   <li>{@link #immutableSortedCopy}
 *   <li>{@link #isOrdered} / {@link #isStrictlyOrdered}
 *   <li>{@link #min} / {@link #max}
 * </ul>
 *
 * <h3>Understanding complex orderings</h3>
 *
 * <p>Complex chained orderings like the following example can be challenging to understand.
 *
 * <pre>{@code
 * Ordering<Foo> ordering =
 *     Ordering.natural()
 *         .nullsFirst()
 *         .onResultOf(getBarFunction)
 *         .nullsLast();
 * }</pre>
 *
 * Note that each chaining method returns a new ordering instance which is backed by the previous
 * instance, but has the chance to act on values <i>before</i> handing off to that backing instance.
 * As a result, it usually helps to read chained ordering expressions <i>backwards</i>. For example,
 * when {@code compare} is called on the above ordering:
 *
 * <ol>
 *   <li>First, if only one {@code Foo} is null, that null value is treated as <i>greater</i>
 *   <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be
 *       comparing {@code Bar} values from now on)
 *   <li>Next, if only one {@code Bar} is null, that null value is treated as <i>lesser</i>
 *   <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is
 *       returned)
 * </ol>
 *
 * <p>Alas, {@link #reverse} is a little different. As you read backwards through a chain and
 * encounter a call to {@code reverse}, continue working backwards until a result is determined, and
 * then reverse that result.
 *
 * <h3>Additional notes</h3>
 *
 * <p>Except as noted, the orderings returned by the factory methods of this class are serializable
 * if and only if the provided instances that back them are. For example, if {@code ordering} and
 * {@code function} can themselves be serialized, then {@code ordering.onResultOf(function)} can as
 * well.
 *
 * <h3>For Java 8 users</h3>
 *
 * <p>If you are using Java 8, this class is now obsolete. Most of its functionality is now provided
 * by {@link java.util.stream.Stream Stream} and by {@link Comparator} itself, and the rest can now
 * be found as static methods in our new {@link Comparators} class. See each method below for
 * further instructions. Whenever possible, you should change any references of type {@code
 * Ordering} to be of type {@code Comparator} instead. However, at this time we have no plan to
 * <i>deprecate</i> this class.
 *
 * <p>Many replacements involve adopting {@code Stream}, and these changes can sometimes make your
 * code verbose. Whenever following this advice, you should check whether {@code Stream} could be
 * adopted more comprehensively in your code; the end result may be quite a bit simpler.
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/OrderingExplained">{@code Ordering}</a>.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 * @since 2.0
 */
PeekingIterator (/android/guava/src/com/google/common/collect/PeekingIterator.java)/**
 * An iterator that supports a one-element lookahead while iterating.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionHelpersExplained#peekingiterator"> {@code
 * PeekingIterator}</a>.
 *
 * @author Mick Killianey
 * @since 2.0
 */
Platform (/android/guava/src/com/google/common/collect/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * @author Hayward Chan
 */
Queues (/android/guava/src/com/google/common/collect/Queues.java)/**
 * Static utility methods pertaining to {@link Queue} and {@link Deque} instances. Also see this
 * class's counterparts {@link Lists}, {@link Sets}, and {@link Maps}.
 *
 * @author Kurt Alfred Kluever
 * @since 11.0
 */
RangeLexOrdering (/android/guava/src/com/google/common/collect/Range.java)/** Needed to serialize sorted collections of Ranges. */
Range (/android/guava/src/com/google/common/collect/Range.java)/**
 * A range (or "interval") defines the <i>boundaries</i> around a contiguous span of values of some
 * {@code Comparable} type; for example, "integers from 1 to 100 inclusive." Note that it is not
 * possible to <i>iterate</i> over these contained values. To do so, pass this range instance and an
 * appropriate {@link DiscreteDomain} to {@link ContiguousSet#create}.
 *
 * <h3>Types of ranges</h3>
 *
 * <p>Each end of the range may be bounded or unbounded. If bounded, there is an associated
 * <i>endpoint</i> value, and the range is considered to be either <i>open</i> (does not include the
 * endpoint) or <i>closed</i> (includes the endpoint) on that side. With three possibilities on each
 * side, this yields nine basic types of ranges, enumerated below. (Notation: a square bracket
 * ({@code [ ]}) indicates that the range is closed on that side; a parenthesis ({@code ( )}) means
 * it is either open or unbounded. The construct {@code {x | statement}} is read "the set of all
 * <i>x</i> such that <i>statement</i>.")
 *
 * <blockquote>
 *
 * <table>
 * <caption>Range Types</caption>
 * <tr><th>Notation        <th>Definition               <th>Factory method
 * <tr><td>{@code (a..b)}  <td>{@code {x | a < x < b}}  <td>{@link Range#open open}
 * <tr><td>{@code [a..b]}  <td>{@code {x | a <= x <= b}}<td>{@link Range#closed closed}
 * <tr><td>{@code (a..b]}  <td>{@code {x | a < x <= b}} <td>{@link Range#openClosed openClosed}
 * <tr><td>{@code [a..b)}  <td>{@code {x | a <= x < b}} <td>{@link Range#closedOpen closedOpen}
 * <tr><td>{@code (a..+∞)} <td>{@code {x | x > a}}      <td>{@link Range#greaterThan greaterThan}
 * <tr><td>{@code [a..+∞)} <td>{@code {x | x >= a}}     <td>{@link Range#atLeast atLeast}
 * <tr><td>{@code (-∞..b)} <td>{@code {x | x < b}}      <td>{@link Range#lessThan lessThan}
 * <tr><td>{@code (-∞..b]} <td>{@code {x | x <= b}}     <td>{@link Range#atMost atMost}
 * <tr><td>{@code (-∞..+∞)}<td>{@code {x}}              <td>{@link Range#all all}
 * </table>
 *
 * </blockquote>
 *
 * <p>When both endpoints exist, the upper endpoint may not be less than the lower. The endpoints
 * may be equal only if at least one of the bounds is closed:
 *
 * <ul>
 *   <li>{@code [a..a]} : a singleton range
 *   <li>{@code [a..a); (a..a]} : {@linkplain #isEmpty empty} ranges; also valid
 *   <li>{@code (a..a)} : <b>invalid</b>; an exception will be thrown
 * </ul>
 *
 * <h3>Warnings</h3>
 *
 * <ul>
 *   <li>Use immutable value types only, if at all possible. If you must use a mutable type, <b>do
 *       not</b> allow the endpoint instances to mutate after the range is created!
 *   <li>Your value type's comparison method should be {@linkplain Comparable consistent with
 *       equals} if at all possible. Otherwise, be aware that concepts used throughout this
 *       documentation such as "equal", "same", "unique" and so on actually refer to whether {@link
 *       Comparable#compareTo compareTo} returns zero, not whether {@link Object#equals equals}
 *       returns {@code true}.
 *   <li>A class which implements {@code Comparable<UnrelatedType>} is very broken, and will cause
 *       undefined horrible things to happen in {@code Range}. For now, the Range API does not
 *       prevent its use, because this would also rule out all ungenerified (pre-JDK1.5) data types.
 *       <b>This may change in the future.</b>
 * </ul>
 *
 * <h3>Other notes</h3>
 *
 * <ul>
 *   <li>Instances of this type are obtained using the static factory methods in this class.
 *   <li>Ranges are <i>convex</i>: whenever two values are contained, all values in between them
 *       must also be contained. More formally, for any {@code c1 <= c2 <= c3} of type {@code C},
 *       {@code r.contains(c1) && r.contains(c3)} implies {@code r.contains(c2)}). This means that a
 *       {@code Range<Integer>} can never be used to represent, say, "all <i>prime</i> numbers from
 *       1 to 100."
 *   <li>When evaluated as a {@link Predicate}, a range yields the same result as invoking {@link
 *       #contains}.
 *   <li>Terminology note: a range {@code a} is said to be the <i>maximal</i> range having property
 *       <i>P</i> if, for all ranges {@code b} also having property <i>P</i>, {@code a.encloses(b)}.
 *       Likewise, {@code a} is <i>minimal</i> when {@code b.encloses(a)} for all {@code b} having
 *       property <i>P</i>. See, for example, the definition of {@link #intersection intersection}.
 * </ul>
 *
 * <h3>Further reading</h3>
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/RangesExplained">{@code Range}</a>.
 *
 * @author Kevin Bourrillion
 * @author Gregory Kick
 * @since 10.0
 */
RangeGwtSerializationDependencies (/android/guava/src/com/google/common/collect/RangeGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element type of a {@link Range}. The GWT
 * supersource for this class contains a field of type {@code C}.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 */
RangeMap (/android/guava/src/com/google/common/collect/RangeMap.java)/**
 * A mapping from disjoint nonempty ranges to non-null values. Queries look up the value associated
 * with the range (if any) that contains a specified key.
 *
 * <p>In contrast to {@link RangeSet}, no "coalescing" is done of {@linkplain
 * Range#isConnected(Range) connected} ranges, even if they are mapped to the same value.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
RangeSet (/android/guava/src/com/google/common/collect/RangeSet.java)/**
 * A set comprising zero or more {@linkplain Range#isEmpty nonempty}, {@linkplain
 * Range#isConnected(Range) disconnected} ranges of type {@code C}.
 *
 * <p>Implementations that choose to support the {@link #add(Range)} operation are required to
 * ignore empty ranges and coalesce connected ranges. For example:
 *
 * <pre>{@code
 * RangeSet<Integer> rangeSet = TreeRangeSet.create();
 * rangeSet.add(Range.closed(1, 10)); // {[1, 10]}
 * rangeSet.add(Range.closedOpen(11, 15)); // disconnected range; {[1, 10], [11, 15)}
 * rangeSet.add(Range.closedOpen(15, 20)); // connected range; {[1, 10], [11, 20)}
 * rangeSet.add(Range.openClosed(0, 0)); // empty range; {[1, 10], [11, 20)}
 * rangeSet.remove(Range.open(5, 10)); // splits [1, 10]; {[1, 5], [10, 10], [11, 20)}
 * }</pre>
 *
 * <p>Note that the behavior of {@link Range#isEmpty()} and {@link Range#isConnected(Range)} may not
 * be as expected on discrete ranges. See the Javadoc of those methods for details.
 *
 * <p>For a {@link Set} whose contents are specified by a {@link Range}, see {@link ContiguousSet}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#rangeset"> RangeSets</a>.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 14.0
 */
RegularContiguousSet (/android/guava/src/com/google/common/collect/RegularContiguousSet.java)/**
 * An implementation of {@link ContiguousSet} that contains one or more elements.
 *
 * @author Gregory Kick
 */
RegularImmutableAsList (/android/guava/src/com/google/common/collect/RegularImmutableAsList.java)/**
 * An {@link ImmutableAsList} implementation specialized for when the delegate collection is already
 * backed by an {@code ImmutableList} or array.
 *
 * @author Louis Wasserman
 */
RegularImmutableBiMap (/android/guava/src/com/google/common/collect/RegularImmutableBiMap.java)/**
 * Bimap with zero or more mappings.
 *
 * @author Louis Wasserman
 */
RegularImmutableList (/android/guava/src/com/google/common/collect/RegularImmutableList.java)/**
 * Implementation of {@link ImmutableList} backed by a simple array.
 *
 * @author Kevin Bourrillion
 */
RegularImmutableMap (/android/guava/src/com/google/common/collect/RegularImmutableMap.java)/**
 * A hash-based implementation of {@link ImmutableMap}.
 *
 * @author Louis Wasserman
 */
RegularImmutableMultiset (/android/guava/src/com/google/common/collect/RegularImmutableMultiset.java)/**
 * Implementation of {@link ImmutableMultiset} with zero or more elements.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
RegularImmutableSet (/android/guava/src/com/google/common/collect/RegularImmutableSet.java)/**
 * Implementation of {@link ImmutableSet} with two or more elements.
 *
 * @author Kevin Bourrillion
 */
RegularImmutableSortedMultiset (/android/guava/src/com/google/common/collect/RegularImmutableSortedMultiset.java)/**
 * An immutable sorted multiset with one or more distinct elements.
 *
 * @author Louis Wasserman
 */
RegularImmutableSortedSet (/android/guava/src/com/google/common/collect/RegularImmutableSortedSet.java)/**
 * An immutable sorted set with one or more elements. TODO(jlevy): Consider separate class for a
 * single-element sorted set.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
RegularImmutableTable (/android/guava/src/com/google/common/collect/RegularImmutableTable.java)/**
 * An implementation of {@link ImmutableTable} holding an arbitrary number of cells.
 *
 * @author Gregory Kick
 */
ReverseNaturalOrdering (/android/guava/src/com/google/common/collect/ReverseNaturalOrdering.java)/** An ordering that uses the reverse of the natural order of the values. */
ReverseOrdering (/android/guava/src/com/google/common/collect/ReverseOrdering.java)/** An ordering that uses the reverse of a given order. */
RowSortedTable (/android/guava/src/com/google/common/collect/RowSortedTable.java)/**
 * Interface that extends {@code Table} and whose rows are sorted.
 *
 * <p>The {@link #rowKeySet} method returns a {@link SortedSet} and the {@link #rowMap} method
 * returns a {@link SortedMap}, instead of the {@link Set} and {@link Map} specified by the {@link
 * Table} interface.
 *
 * @author Warren Dukes
 * @since 8.0
 */
Serialization (/android/guava/src/com/google/common/collect/Serialization.java)/**
 * Provides static methods for serializing collection classes.
 *
 * <p>This class assists the implementation of collection classes. Do not use this class to
 * serialize collections that are defined elsewhere.
 *
 * @author Jared Levy
 */
SetMultimap (/android/guava/src/com/google/common/collect/SetMultimap.java)/**
 * A {@code Multimap} that cannot hold duplicate key-value pairs. Adding a key-value pair that's
 * already in the multimap has no effect. See the {@link Multimap} documentation for information
 * common to all multimaps.
 *
 * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods each return a {@link
 * Set} of values, while {@link #entries} returns a {@code Set} of map entries. Though the method
 * signature doesn't say so explicitly, the map returned by {@link #asMap} has {@code Set} values.
 *
 * <p>If the values corresponding to a single key should be ordered according to a {@link
 * java.util.Comparator} (or the natural order), see the {@link SortedSetMultimap} subinterface.
 *
 * <p>Since the value collections are sets, the behavior of a {@code SetMultimap} is not specified
 * if key <em>or value</em> objects already present in the multimap change in a manner that affects
 * {@code equals} comparisons. Use caution if mutable objects are used as keys or values in a {@code
 * SetMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
ImprovedAbstractSet (/android/guava/src/com/google/common/collect/Sets.java)/**
   * {@link AbstractSet} substitute without the potentially-quadratic {@code removeAll}
   * implementation.
   */
SetView (/android/guava/src/com/google/common/collect/Sets.java)/**
   * An unmodifiable view of a set which may be backed by other sets; this view will change as the
   * backing sets do. Contains methods to copy the data into a new set which will then remain
   * stable. There is usually no reason to retain a reference of type {@code SetView}; typically,
   * you either use it as a plain {@link Set}, or immediately invoke {@link #immutableCopy} or
   * {@link #copyInto} and forget the {@code SetView} itself.
   *
   * @since 2.0
   */
Sets (/android/guava/src/com/google/common/collect/Sets.java)/**
 * Static utility methods pertaining to {@link Set} instances. Also see this class's counterparts
 * {@link Lists}, {@link Maps} and {@link Queues}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#sets"> {@code Sets}</a>.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @author Chris Povirk
 * @since 2.0
 */
SingletonImmutableSet (/android/guava/src/com/google/common/collect/SingletonImmutableSet.java)/**
 * Implementation of {@link ImmutableSet} with exactly one element.
 *
 * @author Kevin Bourrillion
 * @author Nick Kralevich
 */
SingletonImmutableTable (/android/guava/src/com/google/common/collect/SingletonImmutableTable.java)/**
 * An implementation of {@link ImmutableTable} that holds a single cell.
 *
 * @author Gregory Kick
 */
SortedIterable (/android/guava/src/com/google/common/collect/SortedIterable.java)/**
 * An {@code Iterable} whose elements are sorted relative to a {@code Comparator}, typically
 * provided at creation time.
 *
 * @author Louis Wasserman
 */
SortedIterables (/android/guava/src/com/google/common/collect/SortedIterables.java)/**
 * Utilities for dealing with sorted collections of all types.
 *
 * @author Louis Wasserman
 */
SortedLists (/android/guava/src/com/google/common/collect/SortedLists.java)/**
 * Static methods pertaining to sorted {@link List} instances.
 *
 * <p>In this documentation, the terms <i>greatest</i>, <i>greater</i>, <i>least</i>, and
 * <i>lesser</i> are considered to refer to the comparator on the elements, and the terms
 * <i>first</i> and <i>last</i> are considered to refer to the elements' ordering in a list.
 *
 * @author Louis Wasserman
 */
SortedMapDifference (/android/guava/src/com/google/common/collect/SortedMapDifference.java)/**
 * An object representing the differences between two sorted maps.
 *
 * @author Louis Wasserman
 * @since 8.0
 */
SortedMultiset (/android/guava/src/com/google/common/collect/SortedMultiset.java)/**
 * A {@link Multiset} which maintains the ordering of its elements, according to either their
 * natural order or an explicit {@link Comparator}. This order is reflected when iterating over the
 * sorted multiset, either directly, or through its {@code elementSet} or {@code entrySet} views. In
 * all cases, this implementation uses {@link Comparable#compareTo} or {@link Comparator#compare}
 * instead of {@link Object#equals} to determine equivalence of instances.
 *
 * <p><b>Warning:</b> The comparison must be <i>consistent with equals</i> as explained by the
 * {@link Comparable} class specification. Otherwise, the resulting multiset will violate the {@link
 * Collection} contract, which it is specified in terms of {@link Object#equals}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
SortedMultisetBridge (/android/guava/src/com/google/common/collect/SortedMultisetBridge.java)/**
 * Superinterface of {@link SortedMultiset} to introduce a bridge method for {@code elementSet()},
 * to ensure binary compatibility with older Guava versions that specified {@code elementSet()} to
 * return {@code SortedSet}.
 *
 * @author Louis Wasserman
 */
ElementSet (/android/guava/src/com/google/common/collect/SortedMultisets.java)/** A skeleton implementation for {@link SortedMultiset#elementSet}. */
NavigableElementSet (/android/guava/src/com/google/common/collect/SortedMultisets.java)/** A skeleton navigable implementation for {@link SortedMultiset#elementSet}. */
SortedMultisets (/android/guava/src/com/google/common/collect/SortedMultisets.java)/**
 * Provides static utility methods for creating and working with {@link SortedMultiset} instances.
 *
 * @author Louis Wasserman
 */
SortedSetMultimap (/android/guava/src/com/google/common/collect/SortedSetMultimap.java)/**
 * A {@code SetMultimap} whose set of values for a given key are kept sorted; that is, they comprise
 * a {@link SortedSet}. It cannot hold duplicate key-value pairs; adding a key-value pair that's
 * already in the multimap has no effect. This interface does not specify the ordering of the
 * multimap's keys. See the {@link Multimap} documentation for information common to all multimaps.
 *
 * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods each return a {@link
 * SortedSet} of values, while {@link Multimap#entries()} returns a {@link Set} of map entries.
 * Though the method signature doesn't say so explicitly, the map returned by {@link #asMap} has
 * {@code SortedSet} values.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
SparseImmutableTable (/android/guava/src/com/google/common/collect/SparseImmutableTable.java)/** A {@code RegularImmutableTable} optimized for sparse data. */
StandardRowSortedTable (/android/guava/src/com/google/common/collect/StandardRowSortedTable.java)/**
 * Implementation of {@code Table} whose iteration ordering across row keys is sorted by their
 * natural ordering or by a supplied comparator. Note that iterations across the columns keys for a
 * single row key may or may not be ordered, depending on the implementation. When rows and columns
 * are both sorted, it's easier to use the {@link TreeBasedTable} subclass.
 *
 * <p>The {@link #rowKeySet} method returns a {@link SortedSet} and the {@link #rowMap} method
 * returns a {@link SortedMap}, instead of the {@link Set} and {@link Map} specified by the {@link
 * Table} interface.
 *
 * <p>Null keys and values are not supported.
 *
 * <p>See the {@link StandardTable} superclass for more information about the behavior of this
 * class.
 *
 * @author Jared Levy
 */
TableSet (/android/guava/src/com/google/common/collect/StandardTable.java)/**
   * Abstract set whose {@code isEmpty()} returns whether the table is empty and whose {@code
   * clear()} clears all table mappings.
   */
StandardTable (/android/guava/src/com/google/common/collect/StandardTable.java)/**
 * {@link Table} implementation backed by a map that associates row keys with column key / value
 * secondary maps. This class provides rapid access to records by the row key alone or by both keys,
 * but not by just the column key.
 *
 * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link #columnMap()} have
 * iterators that don't support {@code remove()}. Otherwise, all optional operations are supported.
 * Null row keys, columns keys, and values are not supported.
 *
 * <p>Lookups by row key are often faster than lookups by column key, because the data is stored in
 * a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs
 * quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer,
 * since an iteration across all row keys occurs.
 *
 * <p>Note that this implementation is not synchronized. If multiple threads access this table
 * concurrently and one of the threads modifies the table, it must be synchronized externally.
 *
 * @author Jared Levy
 */
Synchronized (/android/guava/src/com/google/common/collect/Synchronized.java)/**
 * Synchronized collection views. The returned synchronized collection views are serializable if the
 * backing collection and the mutex are serializable.
 *
 * <p>If {@code null} is passed as the {@code mutex} parameter to any of this class's top-level
 * methods or inner class constructors, the created object uses itself as the synchronization mutex.
 *
 * <p>This class should be used by other collection classes only.
 *
 * @author Mike Bostock
 * @author Jared Levy
 */
Cell (/android/guava/src/com/google/common/collect/Table.java)/**
   * Row key / column key / value triplet corresponding to a mapping in a table.
   *
   * @since 7.0
   */
Table (/android/guava/src/com/google/common/collect/Table.java)/**
 * A collection that associates an ordered pair of keys, called a row key and a column key, with a
 * single value. A table may be sparse, with only a small fraction of row key / column key pairs
 * possessing a corresponding value.
 *
 * <p>The mappings corresponding to a given row key may be viewed as a {@link Map} whose keys are
 * the columns. The reverse is also available, associating a column with a row key / value map. Note
 * that, in some implementations, data access by column key may have fewer supported operations or
 * worse performance than data access by row key.
 *
 * <p>The methods returning collections or maps always return views of the underlying table.
 * Updating the table can change the contents of those collections, and updating the collections
 * will change the table.
 *
 * <p>All methods that modify the table are optional, and the views returned by the table may or may
 * not be modifiable. When modification isn't supported, those methods will throw an {@link
 * UnsupportedOperationException}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"> {@code Table}</a>.
 *
 * @author Jared Levy
 * @param <R> the type of the table row keys
 * @param <C> the type of the table column keys
 * @param <V> the type of the mapped values
 * @since 7.0
 */
Tables (/android/guava/src/com/google/common/collect/Tables.java)/**
 * Provides static methods that involve a {@code Table}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#tables"> {@code Tables}</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 7.0
 */
TopKSelector (/android/guava/src/com/google/common/collect/TopKSelector.java)/**
 * An accumulator that selects the "top" {@code k} elements added to it, relative to a provided
 * comparator. "Top" can mean the greatest or the lowest elements, specified in the factory used to
 * create the {@code TopKSelector} instance.
 *
 * <p>If your input data is available as an {@link Iterable} or {@link Iterator}, prefer {@link
 * Ordering#leastOf(Iterable, int)}, which provides the same implementation with an interface
 * tailored to that use case.
 *
 * <p>This uses the same efficient implementation as {@link Ordering#leastOf(Iterable, int)},
 * offering expected O(n + k log k) performance (worst case O(n log k)) for n calls to {@link
 * #offer} and a call to {@link #topK}, with O(k) memory. In comparison, quickselect has the same
 * asymptotics but requires O(n) memory, and a {@code PriorityQueue} implementation takes O(n log
 * k). In benchmarks, this implementation performs at least as well as either implementation, and
 * degrades more gracefully for worst-case input.
 *
 * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
 * equivalent elements are added to it, it is undefined which will come first in the output.
 *
 * @author Louis Wasserman
 */
TransformedIterator (/android/guava/src/com/google/common/collect/TransformedIterator.java)/**
 * An iterator that transforms a backing iterator; for internal use. This avoids the object overhead
 * of constructing a {@link com.google.common.base.Function Function} for internal methods.
 *
 * @author Louis Wasserman
 */
TransformedListIterator (/android/guava/src/com/google/common/collect/TransformedListIterator.java)/**
 * An iterator that transforms a backing list iterator; for internal use. This avoids the object
 * overhead of constructing a {@link Function} for internal methods.
 *
 * @author Louis Wasserman
 */
TreeBasedTable (/android/guava/src/com/google/common/collect/TreeBasedTable.java)/**
 * Implementation of {@code Table} whose row keys and column keys are ordered by their natural
 * ordering or by supplied comparators. When constructing a {@code TreeBasedTable}, you may provide
 * comparators for the row keys and the column keys, or you may use natural ordering for both.
 *
 * <p>The {@link #rowKeySet} method returns a {@link SortedSet} and the {@link #rowMap} method
 * returns a {@link SortedMap}, instead of the {@link Set} and {@link Map} specified by the {@link
 * Table} interface.
 *
 * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link #columnMap()} have
 * iterators that don't support {@code remove()}. Otherwise, all optional operations are supported.
 * Null row keys, columns keys, and values are not supported.
 *
 * <p>Lookups by row key are often faster than lookups by column key, because the data is stored in
 * a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs
 * quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer,
 * since an iteration across all row keys occurs.
 *
 * <p>Because a {@code TreeBasedTable} has unique sorted values for a given row, both {@code
 * row(rowKey)} and {@code rowMap().get(rowKey)} are {@link SortedMap} instances, instead of the
 * {@link Map} specified in the {@link Table} interface.
 *
 * <p>Note that this implementation is not synchronized. If multiple threads access this table
 * concurrently and one of the threads modifies the table, it must be synchronized externally.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"> {@code Table}</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 7.0
 */
TreeMultimap (/android/guava/src/com/google/common/collect/TreeMultimap.java)/**
 * Implementation of {@code Multimap} whose keys and values are ordered by their natural ordering or
 * by supplied comparators. In all cases, this implementation uses {@link Comparable#compareTo} or
 * {@link Comparator#compare} instead of {@link Object#equals} to determine equivalence of
 * instances.
 *
 * <p><b>Warning:</b> The comparators or comparables used must be <i>consistent with equals</i> as
 * explained by the {@link Comparable} class specification. Otherwise, the resulting multiset will
 * violate the general contract of {@link SetMultimap}, which it is specified in terms of {@link
 * Object#equals}.
 *
 * <p>The collections returned by {@code keySet} and {@code asMap} iterate through the keys
 * according to the key comparator ordering or the natural ordering of the keys. Similarly, {@code
 * get}, {@code removeAll}, and {@code replaceValues} return collections that iterate through the
 * values according to the value comparator ordering or the natural ordering of the values. The
 * collections generated by {@code entries}, {@code keys}, and {@code values} iterate across the
 * keys according to the above key ordering, and for each key they iterate across the values
 * according to the value ordering.
 *
 * <p>The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an
 * existing key-value pair has no effect.
 *
 * <p>Null keys and values are permitted (provided, of course, that the respective comparators
 * support them). All optional multimap methods are supported, and all returned views are
 * modifiable.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedSortedSetMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0
 */
TreeMultiset (/android/guava/src/com/google/common/collect/TreeMultiset.java)/**
 * A multiset which maintains the ordering of its elements, according to either their natural order
 * or an explicit {@link Comparator}. In all cases, this implementation uses {@link
 * Comparable#compareTo} or {@link Comparator#compare} instead of {@link Object#equals} to determine
 * equivalence of instances.
 *
 * <p><b>Warning:</b> The comparison must be <i>consistent with equals</i> as explained by the
 * {@link Comparable} class specification. Otherwise, the resulting multiset will violate the {@link
 * java.util.Collection} contract, which is specified in terms of {@link Object#equals}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Louis Wasserman
 * @author Jared Levy
 * @since 2.0
 */
TreeRangeMap (/android/guava/src/com/google/common/collect/TreeRangeMap.java)/**
 * An implementation of {@code RangeMap} based on a {@code TreeMap}, supporting all optional
 * operations.
 *
 * <p>Like all {@code RangeMap} implementations, this supports neither null keys nor null values.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
TreeRangeSet (/android/guava/src/com/google/common/collect/TreeRangeSet.java)/**
 * An implementation of {@link RangeSet} backed by a {@link TreeMap}.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
UnmodifiableIterator (/android/guava/src/com/google/common/collect/UnmodifiableIterator.java)/**
 * An iterator that does not support {@link #remove}.
 *
 * <p>{@code UnmodifiableIterator} is used primarily in conjunction with implementations of {@link
 * ImmutableCollection}, such as {@link ImmutableList}. You can, however, convert an existing
 * iterator to an {@code UnmodifiableIterator} using {@link Iterators#unmodifiableIterator}.
 *
 * @author Jared Levy
 * @since 2.0
 */
UnmodifiableListIterator (/android/guava/src/com/google/common/collect/UnmodifiableListIterator.java)/**
 * A list iterator that does not support {@link #remove}, {@link #add}, or {@link #set}.
 *
 * @since 7.0
 * @author Louis Wasserman
 */
UnmodifiableSortedMultiset (/android/guava/src/com/google/common/collect/UnmodifiableSortedMultiset.java)/**
 * Implementation of {@link Multisets#unmodifiableSortedMultiset(SortedMultiset)}, split out into
 * its own file so it can be GWT emulated (to deal with the differing elementSet() types in GWT and
 * non-GWT).
 *
 * @author Louis Wasserman
 */
UsingToStringOrdering (/android/guava/src/com/google/common/collect/UsingToStringOrdering.java)/** An ordering that uses the natural order of the string representation of the values. */
ArrayBasedCharEscaper (/android/guava/src/com/google/common/escape/ArrayBasedCharEscaper.java)/**
 * A {@link CharEscaper} that uses an array to quickly look up replacement characters for a given
 * {@code char} value. An additional safe range is provided that determines whether {@code char}
 * values without specific replacements are to be considered safe and left unescaped or should be
 * escaped in a general way.
 *
 * <p>A good example of usage of this class is for Java source code escaping where the replacement
 * array contains information about special ASCII characters such as {@code \\t} and {@code \\n}
 * while {@link #escapeUnsafe} is overridden to handle general escaping of the form {@code \\uxxxx}.
 *
 * <p>The size of the data structure used by {@link ArrayBasedCharEscaper} is proportional to the
 * highest valued character that requires escaping. For example a replacement map containing the
 * single character '{@code \}{@code u1000}' will require approximately 16K of memory. If you need
 * to create multiple escaper instances that have the same character replacement mapping consider
 * using {@link ArrayBasedEscaperMap}.
 *
 * @author Sven Mawson
 * @author David Beaumont
 * @since 15.0
 */
ArrayBasedEscaperMap (/android/guava/src/com/google/common/escape/ArrayBasedEscaperMap.java)/**
 * An implementation-specific parameter class suitable for initializing {@link
 * ArrayBasedCharEscaper} or {@link ArrayBasedUnicodeEscaper} instances. This class should be used
 * when more than one escaper is created using the same character replacement mapping to allow the
 * underlying (implementation specific) data structures to be shared.
 *
 * <p>The size of the data structure used by ArrayBasedCharEscaper and ArrayBasedUnicodeEscaper is
 * proportional to the highest valued character that has a replacement. For example a replacement
 * map containing the single character '{@literal \}u1000' will require approximately 16K of memory.
 * As such sharing this data structure between escaper instances is the primary goal of this class.
 *
 * @author David Beaumont
 * @since 15.0
 */
ArrayBasedUnicodeEscaper (/android/guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java)/**
 * A {@link UnicodeEscaper} that uses an array to quickly look up replacement characters for a given
 * code point. An additional safe range is provided that determines whether code points without
 * specific replacements are to be considered safe and left unescaped or should be escaped in a
 * general way.
 *
 * <p>A good example of usage of this class is for HTML escaping where the replacement array
 * contains information about the named HTML entities such as {@code &amp;} and {@code &quot;} while
 * {@link #escapeUnsafe} is overridden to handle general escaping of the form {@code &#NNNNN;}.
 *
 * <p>The size of the data structure used by {@link ArrayBasedUnicodeEscaper} is proportional to the
 * highest valued code point that requires escaping. For example a replacement map containing the
 * single character '{@code \}{@code u1000}' will require approximately 16K of memory. If you need
 * to create multiple escaper instances that have the same character replacement mapping consider
 * using {@link ArrayBasedEscaperMap}.
 *
 * @author David Beaumont
 * @since 15.0
 */
CharEscaper (/android/guava/src/com/google/common/escape/CharEscaper.java)/**
 * An object that converts literal text into a format safe for inclusion in a particular context
 * (such as an XML document). Typically (but not always), the inverse process of "unescaping" the
 * text is performed automatically by the relevant parser.
 *
 * <p>For example, an XML escaper would convert the literal string {@code "Foo<Bar>"} into {@code
 * "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from being confused with an XML tag. When the
 * resulting XML document is parsed, the parser API will return this text as the original literal
 * string {@code "Foo<Bar>"}.
 *
 * <p>A {@code CharEscaper} instance is required to be stateless, and safe when used concurrently by
 * multiple threads.
 *
 * <p>Popular escapers are defined as constants in classes like {@link
 * com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To create
 * your own escapers extend this class and implement the {@link #escape(char)} method.
 *
 * @author Sven Mawson
 * @since 15.0
 */
CharArrayDecorator (/android/guava/src/com/google/common/escape/CharEscaperBuilder.java)/**
   * Simple decorator that turns an array of replacement char[]s into a CharEscaper, this results in
   * a very fast escape method.
   */
CharEscaperBuilder (/android/guava/src/com/google/common/escape/CharEscaperBuilder.java)/**
 * Simple helper class to build a "sparse" array of objects based on the indexes that were added to
 * it. The array will be from 0 to the maximum index given. All non-set indexes will contain null
 * (so it's not really a sparse array, just a pseudo sparse array). The builder can also return a
 * CharEscaper based on the generated array.
 *
 * @author Sven Mawson
 * @since 15.0
 */
Escaper (/android/guava/src/com/google/common/escape/Escaper.java)/**
 * An object that converts literal text into a format safe for inclusion in a particular context
 * (such as an XML document). Typically (but not always), the inverse process of "unescaping" the
 * text is performed automatically by the relevant parser.
 *
 * <p>For example, an XML escaper would convert the literal string {@code "Foo<Bar>"} into {@code
 * "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from being confused with an XML tag. When the
 * resulting XML document is parsed, the parser API will return this text as the original literal
 * string {@code "Foo<Bar>"}.
 *
 * <p>An {@code Escaper} instance is required to be stateless, and safe when used concurrently by
 * multiple threads.
 *
 * <p>Because, in general, escaping operates on the code points of a string and not on its
 * individual {@code char} values, it is not safe to assume that {@code escape(s)} is equivalent to
 * {@code escape(s.substring(0, n)) + escape(s.substring(n))} for arbitrary {@code n}. This is
 * because of the possibility of splitting a surrogate pair. The only case in which it is safe to
 * escape strings and concatenate the results is if you can rule out this possibility, either by
 * splitting an existing long string into short strings adaptively around {@linkplain
 * Character#isHighSurrogate surrogate} {@linkplain Character#isLowSurrogate pairs}, or by starting
 * with short strings already known to be free of unpaired surrogates.
 *
 * <p>The two primary implementations of this interface are {@link CharEscaper} and {@link
 * UnicodeEscaper}. They are heavily optimized for performance and greatly simplify the task of
 * implementing new escapers. It is strongly recommended that when implementing a new escaper you
 * extend one of these classes. If you find that you are unable to achieve the desired behavior
 * using either of these classes, please contact the Java libraries team for advice.
 *
 * <p>Popular escapers are defined as constants in classes like {@link
 * com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To create
 * your own escapers, use {@link CharEscaperBuilder}, or extend {@code CharEscaper} or {@code
 * UnicodeEscaper}.
 *
 * @author David Beaumont
 * @since 15.0
 */
Builder (/android/guava/src/com/google/common/escape/Escapers.java)/**
   * A builder for simple, fast escapers.
   *
   * <p>Typically an escaper needs to deal with the escaping of high valued characters or code
   * points. In these cases it is necessary to extend either {@link ArrayBasedCharEscaper} or {@link
   * ArrayBasedUnicodeEscaper} to provide the desired behavior. However this builder is suitable for
   * creating escapers that replace a relative small set of characters.
   *
   * @author David Beaumont
   * @since 15.0
   */
Escapers (/android/guava/src/com/google/common/escape/Escapers.java)/**
 * Static utility methods pertaining to {@link Escaper} instances.
 *
 * @author Sven Mawson
 * @author David Beaumont
 * @since 15.0
 */
Platform (/android/guava/src/com/google/common/escape/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * @author Jesse Wilson
 */
UnicodeEscaper (/android/guava/src/com/google/common/escape/UnicodeEscaper.java)/**
 * An {@link Escaper} that converts literal text into a format safe for inclusion in a particular
 * context (such as an XML document). Typically (but not always), the inverse process of
 * "unescaping" the text is performed automatically by the relevant parser.
 *
 * <p>For example, an XML escaper would convert the literal string {@code "Foo<Bar>"} into {@code
 * "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from being confused with an XML tag. When the
 * resulting XML document is parsed, the parser API will return this text as the original literal
 * string {@code "Foo<Bar>"}.
 *
 * <p><b>Note:</b> This class is similar to {@link CharEscaper} but with one very important
 * difference. A CharEscaper can only process Java <a
 * href="http://en.wikipedia.org/wiki/UTF-16">UTF16</a> characters in isolation and may not cope
 * when it encounters surrogate pairs. This class facilitates the correct escaping of all Unicode
 * characters.
 *
 * <p>As there are important reasons, including potential security issues, to handle Unicode
 * correctly if you are considering implementing a new escaper you should favor using UnicodeEscaper
 * wherever possible.
 *
 * <p>A {@code UnicodeEscaper} instance is required to be stateless, and safe when used concurrently
 * by multiple threads.
 *
 * <p>Popular escapers are defined as constants in classes like {@link
 * com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To create
 * your own escapers extend this class and implement the {@link #escape(int)} method.
 *
 * @author David Beaumont
 * @since 15.0
 */
AsyncEventBus (/android/guava/src/com/google/common/eventbus/AsyncEventBus.java)/**
 * An {@link EventBus} that takes the Executor of your choice and uses it to dispatch events,
 * allowing dispatch to occur asynchronously.
 *
 * @author Cliff Biffle
 * @since 10.0
 */
DeadEvent (/android/guava/src/com/google/common/eventbus/DeadEvent.java)/**
 * Wraps an event that was posted, but which had no subscribers and thus could not be delivered.
 *
 * <p>Registering a DeadEvent subscriber is useful for debugging or logging, as it can detect
 * misconfigurations in a system's event distribution.
 *
 * @author Cliff Biffle
 * @since 10.0
 */
PerThreadQueuedDispatcher (/android/guava/src/com/google/common/eventbus/Dispatcher.java)/** Implementation of a {@link #perThreadDispatchQueue()} dispatcher. */
LegacyAsyncDispatcher (/android/guava/src/com/google/common/eventbus/Dispatcher.java)/** Implementation of a {@link #legacyAsync()} dispatcher. */
ImmediateDispatcher (/android/guava/src/com/google/common/eventbus/Dispatcher.java)/** Implementation of {@link #immediate()}. */
Dispatcher (/android/guava/src/com/google/common/eventbus/Dispatcher.java)/**
 * Handler for dispatching events to subscribers, providing different event ordering guarantees that
 * make sense for different situations.
 *
 * <p><b>Note:</b> The dispatcher is orthogonal to the subscriber's {@code Executor}. The dispatcher
 * controls the order in which events are dispatched, while the executor controls how (i.e. on which
 * thread) the subscriber is actually called when an event is dispatched to it.
 *
 * @author Colin Decker
 */
LoggingHandler (/android/guava/src/com/google/common/eventbus/EventBus.java)/** Simple logging handler for subscriber exceptions. */
EventBus (/android/guava/src/com/google/common/eventbus/EventBus.java)/**
 * Dispatches events to listeners, and provides ways for listeners to register themselves.
 *
 * <p>The EventBus allows publish-subscribe-style communication between components without requiring
 * the components to explicitly register with one another (and thus be aware of each other). It is
 * designed exclusively to replace traditional Java in-process event distribution using explicit
 * registration. It is <em>not</em> a general-purpose publish-subscribe system, nor is it intended
 * for interprocess communication.
 *
 * <h2>Receiving Events</h2>
 *
 * <p>To receive events, an object should:
 *
 * <ol>
 *   <li>Expose a public method, known as the <i>event subscriber</i>, which accepts a single
 *       argument of the type of event desired;
 *   <li>Mark it with a {@link Subscribe} annotation;
 *   <li>Pass itself to an EventBus instance's {@link #register(Object)} method.
 * </ol>
 *
 * <h2>Posting Events</h2>
 *
 * <p>To post an event, simply provide the event object to the {@link #post(Object)} method. The
 * EventBus instance will determine the type of event and route it to all registered listeners.
 *
 * <p>Events are routed based on their type &mdash; an event will be delivered to any subscriber for
 * any type to which the event is <em>assignable.</em> This includes implemented interfaces, all
 * superclasses, and all interfaces implemented by superclasses.
 *
 * <p>When {@code post} is called, all registered subscribers for an event are run in sequence, so
 * subscribers should be reasonably quick. If an event may trigger an extended process (such as a
 * database load), spawn a thread or queue it for later. (For a convenient way to do this, use an
 * {@link AsyncEventBus}.)
 *
 * <h2>Subscriber Methods</h2>
 *
 * <p>Event subscriber methods must accept only one argument: the event.
 *
 * <p>Subscribers should not, in general, throw. If they do, the EventBus will catch and log the
 * exception. This is rarely the right solution for error handling and should not be relied upon; it
 * is intended solely to help find problems during development.
 *
 * <p>The EventBus guarantees that it will not call a subscriber method from multiple threads
 * simultaneously, unless the method explicitly allows it by bearing the {@link
 * AllowConcurrentEvents} annotation. If this annotation is not present, subscriber methods need not
 * worry about being reentrant, unless also called from outside the EventBus.
 *
 * <h2>Dead Events</h2>
 *
 * <p>If an event is posted, but no registered subscribers can accept it, it is considered "dead."
 * To give the system a second chance to handle dead events, they are wrapped in an instance of
 * {@link DeadEvent} and reposted.
 *
 * <p>If a subscriber for a supertype of all events (such as Object) is registered, no event will
 * ever be considered dead, and no DeadEvents will be generated. Accordingly, while DeadEvent
 * extends {@link Object}, a subscriber registered to receive any Object will never receive a
 * DeadEvent.
 *
 * <p>This class is safe for concurrent use.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/EventBusExplained">{@code EventBus}</a>.
 *
 * @author Cliff Biffle
 * @since 10.0
 */
SynchronizedSubscriber (/android/guava/src/com/google/common/eventbus/Subscriber.java)/**
   * Subscriber that synchronizes invocations of a method to ensure that only one thread may enter
   * the method at a time.
   */
Subscriber (/android/guava/src/com/google/common/eventbus/Subscriber.java)/**
 * A subscriber method on a specific object, plus the executor that should be used for dispatching
 * events to it.
 *
 * <p>Two subscribers are equivalent when they refer to the same method on the same object (not
 * class). This property is used to ensure that no subscriber method is registered more than once.
 *
 * @author Colin Decker
 */
SubscriberExceptionContext (/android/guava/src/com/google/common/eventbus/SubscriberExceptionContext.java)/**
 * Context for an exception thrown by a subscriber.
 *
 * @since 16.0
 */
SubscriberExceptionHandler (/android/guava/src/com/google/common/eventbus/SubscriberExceptionHandler.java)/**
 * Handler for exceptions thrown by event subscribers.
 *
 * @since 16.0
 */
SubscriberRegistry (/android/guava/src/com/google/common/eventbus/SubscriberRegistry.java)/**
 * Registry of subscribers to a single event bus.
 *
 * @author Colin Decker
 */
AbstractBaseGraph (/android/guava/src/com/google/common/graph/AbstractBaseGraph.java)/**
 * This class provides a skeletal implementation of {@link BaseGraph}.
 *
 * <p>The methods implemented in this class should not be overridden unless the subclass admits a
 * more efficient implementation.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 */
AbstractDirectedNetworkConnections (/android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java)/**
 * A base implementation of {@link NetworkConnections} for directed networks.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
AbstractGraph (/android/guava/src/com/google/common/graph/AbstractGraph.java)/**
 * This class provides a skeletal implementation of {@link Graph}. It is recommended to extend this
 * class rather than implement {@link Graph} directly.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @since 20.0
 */
AbstractGraphBuilder (/android/guava/src/com/google/common/graph/AbstractGraphBuilder.java)/**
 * A base class for builders that construct graphs with user-defined properties.
 *
 * @author James Sexton
 */
AbstractNetwork (/android/guava/src/com/google/common/graph/AbstractNetwork.java)/**
 * This class provides a skeletal implementation of {@link Network}. It is recommended to extend
 * this class rather than implement {@link Network} directly.
 *
 * <p>The methods implemented in this class should not be overridden unless the subclass admits a
 * more efficient implementation.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 * @since 20.0
 */
AbstractUndirectedNetworkConnections (/android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java)/**
 * A base implementation of {@link NetworkConnections} for undirected networks.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
AbstractValueGraph (/android/guava/src/com/google/common/graph/AbstractValueGraph.java)/**
 * This class provides a skeletal implementation of {@link ValueGraph}. It is recommended to extend
 * this class rather than implement {@link ValueGraph} directly.
 *
 * <p>The methods implemented in this class should not be overridden unless the subclass admits a
 * more efficient implementation.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 * @since 20.0
 */
BaseGraph (/android/guava/src/com/google/common/graph/BaseGraph.java)/**
 * A non-public interface for the methods shared between {@link Graph} and {@link ValueGraph}.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 */
ConfigurableMutableGraph (/android/guava/src/com/google/common/graph/ConfigurableMutableGraph.java)/**
 * Configurable implementation of {@link MutableGraph} that supports both directed and undirected
 * graphs. Instances of this class should be constructed with {@link GraphBuilder}.
 *
 * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},
 * which is in O(d_node) where d_node is the degree of {@code node}.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 */
ConfigurableMutableNetwork (/android/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java)/**
 * Configurable implementation of {@link MutableNetwork} that supports both directed and undirected
 * graphs. Instances of this class should be constructed with {@link NetworkBuilder}.
 *
 * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},
 * which is in O(d_node) where d_node is the degree of {@code node}.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
ConfigurableMutableValueGraph (/android/guava/src/com/google/common/graph/ConfigurableMutableValueGraph.java)/**
 * Configurable implementation of {@link MutableValueGraph} that supports both directed and
 * undirected graphs. Instances of this class should be constructed with {@link ValueGraphBuilder}.
 *
 * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},
 * which is in O(d_node) where d_node is the degree of {@code node}.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
ConfigurableNetwork (/android/guava/src/com/google/common/graph/ConfigurableNetwork.java)/**
 * Configurable implementation of {@link Network} that supports the options supplied by {@link
 * NetworkBuilder}.
 *
 * <p>This class maintains a map of nodes to {@link NetworkConnections}. This class also maintains a
 * map of edges to reference nodes. The reference node is defined to be the edge's source node on
 * directed graphs, and an arbitrary endpoint of the edge on undirected graphs.
 *
 * <p>Collection-returning accessors return unmodifiable views: the view returned will reflect
 * changes to the graph (if the graph is mutable) but may not be modified by the user.
 *
 * <p>The time complexity of all collection-returning accessors is O(1), since views are returned.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
ConfigurableValueGraph (/android/guava/src/com/google/common/graph/ConfigurableValueGraph.java)/**
 * Configurable implementation of {@link ValueGraph} that supports the options supplied by {@link
 * AbstractGraphBuilder}.
 *
 * <p>This class maintains a map of nodes to {@link GraphConnections}.
 *
 * <p>Collection-returning accessors return unmodifiable views: the view returned will reflect
 * changes to the graph (if the graph is mutable) but may not be modified by the user.
 *
 * <p>The time complexity of all collection-returning accessors is O(1), since views are returned.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
PredAndSucc (/android/guava/src/com/google/common/graph/DirectedGraphConnections.java)/**
   * A wrapper class to indicate a node is both a predecessor and successor while still providing
   * the successor value.
   */
DirectedGraphConnections (/android/guava/src/com/google/common/graph/DirectedGraphConnections.java)/**
 * An implementation of {@link GraphConnections} for directed graphs.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
DirectedMultiNetworkConnections (/android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java)/**
 * An implementation of {@link NetworkConnections} for directed networks with parallel edges.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
DirectedNetworkConnections (/android/guava/src/com/google/common/graph/DirectedNetworkConnections.java)/**
 * An implementation of {@link NetworkConnections} for directed networks.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
EdgesConnecting (/android/guava/src/com/google/common/graph/EdgesConnecting.java)/**
 * A class to represent the set of edges connecting an (implicit) origin node to a target node.
 *
 * <p>The {@link #nodeToOutEdge} map means this class only works on networks without parallel edges.
 * See {@link MultiEdgesConnecting} for a class that works with parallel edges.
 *
 * @author James Sexton
 * @param <E> Edge parameter type
 */
ElementOrder (/android/guava/src/com/google/common/graph/ElementOrder.java)/**
 * Used to represent the order of elements in a data structure that supports different options for
 * iteration order guarantees.
 *
 * <p>Example usage:
 *
 * <pre>{@code
 * MutableGraph<Integer> graph =
 *     GraphBuilder.directed().nodeOrder(ElementOrder.<Integer>natural()).build();
 * }</pre>
 *
 * @author Joshua O'Madadhain
 * @since 20.0
 */
EndpointPair (/android/guava/src/com/google/common/graph/EndpointPair.java)/**
 * An immutable pair representing the two endpoints of an edge in a graph. The {@link EndpointPair}
 * of a directed edge is an ordered pair of nodes ({@link #source()} and {@link #target()}). The
 * {@link EndpointPair} of an undirected edge is an unordered pair of nodes ({@link #nodeU()} and
 * {@link #nodeV()}).
 *
 * <p>The edge is a self-loop if, and only if, the two endpoints are equal.
 *
 * @author James Sexton
 * @since 20.0
 */
Directed (/android/guava/src/com/google/common/graph/EndpointPairIterator.java)/**
   * If the graph is directed, each ordered [source, target] pair will be visited once if there is
   * an edge connecting them.
   */
Undirected (/android/guava/src/com/google/common/graph/EndpointPairIterator.java)/**
   * If the graph is undirected, each unordered [node, otherNode] pair (except self-loops) will be
   * visited twice if there is an edge connecting them. To avoid returning duplicate {@link
   * EndpointPair}s, we keep track of the nodes that we have visited. When processing endpoint
   * pairs, we skip if the "other node" is in the visited set, as shown below:
   *
   * <pre>
   * Nodes = {N1, N2, N3, N4}
   *    N2           __
   *   /  \         |  |
   * N1----N3      N4__|
   *
   * Visited Nodes = {}
   * EndpointPair [N1, N2] - return
   * EndpointPair [N1, N3] - return
   * Visited Nodes = {N1}
   * EndpointPair [N2, N1] - skip
   * EndpointPair [N2, N3] - return
   * Visited Nodes = {N1, N2}
   * EndpointPair [N3, N1] - skip
   * EndpointPair [N3, N2] - skip
   * Visited Nodes = {N1, N2, N3}
   * EndpointPair [N4, N4] - return
   * Visited Nodes = {N1, N2, N3, N4}
   * </pre>
   */
EndpointPairIterator (/android/guava/src/com/google/common/graph/EndpointPairIterator.java)/**
 * A class to facilitate the set returned by {@link Graph#edges()}.
 *
 * @author James Sexton
 */
ForwardingGraph (/android/guava/src/com/google/common/graph/ForwardingGraph.java)/**
 * A class to allow {@link Graph} implementations to be backed by a {@link BaseGraph}. This is not
 * currently planned to be released as a general-purpose forwarding class.
 *
 * @author James Sexton
 */
ForwardingNetwork (/android/guava/src/com/google/common/graph/ForwardingNetwork.java)/**
 * A class to allow {@link Network} implementations to be backed by a provided delegate. This is not
 * currently planned to be released as a general-purpose forwarding class.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 */
ForwardingValueGraph (/android/guava/src/com/google/common/graph/ForwardingValueGraph.java)/**
 * A class to allow {@link ValueGraph} implementations to be backed by a provided delegate. This is
 * not currently planned to be released as a general-purpose forwarding class.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 */
Graph (/android/guava/src/com/google/common/graph/Graph.java)/**
 * An interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data,
 * whose edges are anonymous entities with no identity or information of their own.
 *
 * <p>A graph is composed of a set of nodes and a set of edges connecting pairs of nodes.
 *
 * <p>There are three primary interfaces provided to represent graphs. In order of increasing
 * complexity they are: {@link Graph}, {@link ValueGraph}, and {@link Network}. You should generally
 * prefer the simplest interface that satisfies your use case. See the <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#choosing-the-right-graph-type">
 * "Choosing the right graph type"</a> section of the Guava User Guide for more details.
 *
 * <h3>Capabilities</h3>
 *
 * <p>{@code Graph} supports the following use cases (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained#definitions">definitions of
 * terms</a>):
 *
 * <ul>
 *   <li>directed graphs
 *   <li>undirected graphs
 *   <li>graphs that do/don't allow self-loops
 *   <li>graphs whose nodes/edges are insertion-ordered, sorted, or unordered
 * </ul>
 *
 * <p>{@code Graph} explicitly does not support parallel edges, and forbids implementations or
 * extensions with parallel edges. If you need parallel edges, use {@link Network}.
 *
 * <h3>Building a {@code Graph}</h3>
 *
 * <p>The implementation classes that {@code common.graph} provides are not public, by design. To
 * create an instance of one of the built-in implementations of {@code Graph}, use the {@link
 * GraphBuilder} class:
 *
 * <pre>{@code
 * MutableGraph<Integer> graph = GraphBuilder.undirected().build();
 * }</pre>
 *
 * <p>{@link GraphBuilder#build()} returns an instance of {@link MutableGraph}, which is a subtype
 * of {@code Graph} that provides methods for adding and removing nodes and edges. If you do not
 * need to mutate a graph (e.g. if you write a method than runs a read-only algorithm on the graph),
 * you should use the non-mutating {@link Graph} interface, or an {@link ImmutableGraph}.
 *
 * <p>You can create an immutable copy of an existing {@code Graph} using {@link
 * ImmutableGraph#copyOf(Graph)}:
 *
 * <pre>{@code
 * ImmutableGraph<Integer> immutableGraph = ImmutableGraph.copyOf(graph);
 * }</pre>
 *
 * <p>Instances of {@link ImmutableGraph} do not implement {@link MutableGraph} (obviously!) and are
 * contractually guaranteed to be unmodifiable and thread-safe.
 *
 * <p>The Guava User Guide has <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#building-graph-instances">more
 * information on (and examples of) building graphs</a>.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including:
 *
 * <ul>
 *   <li><a
 *       href="https://github.com/google/guava/wiki/GraphsExplained#equals-hashcode-and-graph-equivalence">
 *       {@code equals()}, {@code hashCode()}, and graph equivalence</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#synchronization">
 *       Synchronization policy</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">Notes
 *       for implementors</a>
 * </ul>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @since 20.0
 */
GraphBuilder (/android/guava/src/com/google/common/graph/GraphBuilder.java)/**
 * A builder for constructing instances of {@link MutableGraph} or {@link ImmutableGraph} with
 * user-defined properties.
 *
 * <p>A graph built by this class will have the following properties by default:
 *
 * <ul>
 *   <li>does not allow self-loops
 *   <li>orders {@link Graph#nodes()} in the order in which the elements were added
 * </ul>
 *
 * <p>Examples of use:
 *
 * <pre>{@code
 * // Building a mutable graph
 * MutableGraph<String> graph = GraphBuilder.undirected().allowsSelfLoops(true).build();
 * graph.putEdge("bread", "bread");
 * graph.putEdge("chocolate", "peanut butter");
 * graph.putEdge("peanut butter", "jelly");
 *
 * // Building an immutable graph
 * ImmutableGraph<String> immutableGraph =
 *     GraphBuilder.undirected()
 *         .allowsSelfLoops(true)
 *         .<String>immutable()
 *         .putEdge("bread", "bread")
 *         .putEdge("chocolate", "peanut butter")
 *         .putEdge("peanut butter", "jelly")
 *         .build();
 * }</pre>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> The most general node type this builder will support. This is normally {@code Object}
 *     unless it is constrained by using a method like {@link #nodeOrder}, or the builder is
 *     constructed based on an existing {@code Graph} using {@link #from(Graph)}.
 * @since 20.0
 */
GraphConnections (/android/guava/src/com/google/common/graph/GraphConnections.java)/**
 * An interface for representing and manipulating an origin node's adjacent nodes and edge values in
 * a {@link Graph}.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
GraphConstants (/android/guava/src/com/google/common/graph/GraphConstants.java)/** A utility class to hold various constants used by the Guava Graph library. */
Graphs (/android/guava/src/com/google/common/graph/Graphs.java)/**
 * Static utility methods for {@link Graph}, {@link ValueGraph}, and {@link Network} instances.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @since 20.0
 */
Builder (/android/guava/src/com/google/common/graph/ImmutableGraph.java)/**
   * A builder for creating {@link ImmutableGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableGraph<Country> COUNTRY_ADJACENCY_GRAPH =
   *     GraphBuilder.undirected()
   *         .<Country>immutable()
   *         .putEdge(FRANCE, GERMANY)
   *         .putEdge(FRANCE, BELGIUM)
   *         .putEdge(GERMANY, BELGIUM)
   *         .addNode(ICELAND)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */
ImmutableGraph (/android/guava/src/com/google/common/graph/ImmutableGraph.java)/**
 * A {@link Graph} whose elements and structural relationships will never change. Instances of this
 * class may be obtained with {@link #copyOf(Graph)}.
 *
 * <p>See the Guava User's Guide's <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#immutable-implementations">discussion
 * of the {@code Immutable*} types</a> for more information on the properties and guarantees
 * provided by this class.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @since 20.0
 */
Builder (/android/guava/src/com/google/common/graph/ImmutableNetwork.java)/**
   * A builder for creating {@link ImmutableNetwork} instances, especially {@code static final}
   * networks. Example:
   *
   * <pre>{@code
   * static final ImmutableNetwork<City, Train> TRAIN_NETWORK =
   *     NetworkBuilder.undirected()
   *         .allowsParallelEdges(true)
   *         .<City, Train>immutable()
   *         .addEdge(PARIS, BRUSSELS, Thalys.trainNumber("1111"))
   *         .addEdge(PARIS, BRUSSELS, RegionalTrain.trainNumber("2222"))
   *         .addEdge(LONDON, PARIS, Eurostar.trainNumber("3333"))
   *         .addEdge(LONDON, BRUSSELS, Eurostar.trainNumber("4444"))
   *         .addNode(REYKJAVIK)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple networks in series. Each new network contains all the elements of the ones created
   * before it.
   *
   * @since 28.0
   */
ImmutableNetwork (/android/guava/src/com/google/common/graph/ImmutableNetwork.java)/**
 * A {@link Network} whose elements and structural relationships will never change. Instances of
 * this class may be obtained with {@link #copyOf(Network)}.
 *
 * <p>See the Guava User's Guide's <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#immutable-implementations">discussion
 * of the {@code Immutable*} types</a> for more information on the properties and guarantees
 * provided by this class.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 * @since 20.0
 */
Builder (/android/guava/src/com/google/common/graph/ImmutableValueGraph.java)/**
   * A builder for creating {@link ImmutableValueGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableValueGraph<City, Distance> CITY_ROAD_DISTANCE_GRAPH =
   *     ValueGraphBuilder.undirected()
   *         .<City, Distance>immutable()
   *         .putEdgeValue(PARIS, BERLIN, kilometers(1060))
   *         .putEdgeValue(PARIS, BRUSSELS, kilometers(317))
   *         .putEdgeValue(BERLIN, BRUSSELS, kilometers(764))
   *         .addNode(REYKJAVIK)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */
ImmutableValueGraph (/android/guava/src/com/google/common/graph/ImmutableValueGraph.java)/**
 * A {@link ValueGraph} whose elements and structural relationships will never change. Instances of
 * this class may be obtained with {@link #copyOf(ValueGraph)}.
 *
 * <p>See the Guava User's Guide's <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#immutable-implementations">discussion
 * of the {@code Immutable*} types</a> for more information on the properties and guarantees
 * provided by this class.
 *
 * @author James Sexton
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 * @since 20.0
 */
MapIteratorCache (/android/guava/src/com/google/common/graph/MapIteratorCache.java)/**
 * A map-like data structure that wraps a backing map and caches values while iterating through
 * {@link #unmodifiableKeySet()}. By design, the cache is cleared when this structure is mutated. If
 * this structure is never mutated, it provides a thread-safe view of the backing map.
 *
 * <p>The {@link MapIteratorCache} assumes ownership of the backing map, and cannot guarantee
 * correctness in the face of external mutations to the backing map. As such, it is <b>strongly</b>
 * recommended that the caller does not persist a reference to the backing map (unless the backing
 * map is immutable).
 *
 * <p>This class is tailored toward use cases in common.graph. It is *NOT* a general purpose map.
 *
 * @author James Sexton
 */
MapRetrievalCache (/android/guava/src/com/google/common/graph/MapRetrievalCache.java)/**
 * A {@link MapIteratorCache} that adds additional caching. In addition to the caching provided by
 * {@link MapIteratorCache}, this structure caches values for the two most recently retrieved keys.
 *
 * @author James Sexton
 */
MultiEdgesConnecting (/android/guava/src/com/google/common/graph/MultiEdgesConnecting.java)/**
 * A class to represent the set of edges connecting an (implicit) origin node to a target node.
 *
 * <p>The {@link #outEdgeToNode} map allows this class to work on networks with parallel edges. See
 * {@link EdgesConnecting} for a class that is more efficient but forbids parallel edges.
 *
 * @author James Sexton
 * @param <E> Edge parameter type
 */
MutableGraph (/android/guava/src/com/google/common/graph/MutableGraph.java)/**
 * A subinterface of {@link Graph} which adds mutation methods. When mutation is not required, users
 * should prefer the {@link Graph} interface.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @since 20.0
 */
MutableNetwork (/android/guava/src/com/google/common/graph/MutableNetwork.java)/**
 * A subinterface of {@link Network} which adds mutation methods. When mutation is not required,
 * users should prefer the {@link Network} interface.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 * @since 20.0
 */
MutableValueGraph (/android/guava/src/com/google/common/graph/MutableValueGraph.java)/**
 * A subinterface of {@link ValueGraph} which adds mutation methods. When mutation is not required,
 * users should prefer the {@link ValueGraph} interface.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 * @since 20.0
 */
Network (/android/guava/src/com/google/common/graph/Network.java)/**
 * An interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data,
 * whose edges are unique objects.
 *
 * <p>A graph is composed of a set of nodes and a set of edges connecting pairs of nodes.
 *
 * <p>There are three primary interfaces provided to represent graphs. In order of increasing
 * complexity they are: {@link Graph}, {@link ValueGraph}, and {@link Network}. You should generally
 * prefer the simplest interface that satisfies your use case. See the <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#choosing-the-right-graph-type">
 * "Choosing the right graph type"</a> section of the Guava User Guide for more details.
 *
 * <h3>Capabilities</h3>
 *
 * <p>{@code Network} supports the following use cases (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained#definitions">definitions of
 * terms</a>):
 *
 * <ul>
 *   <li>directed graphs
 *   <li>undirected graphs
 *   <li>graphs that do/don't allow parallel edges
 *   <li>graphs that do/don't allow self-loops
 *   <li>graphs whose nodes/edges are insertion-ordered, sorted, or unordered
 *   <li>graphs whose edges are unique objects
 * </ul>
 *
 * <h3>Building a {@code Network}</h3>
 *
 * <p>The implementation classes that {@code common.graph} provides are not public, by design. To
 * create an instance of one of the built-in implementations of {@code Network}, use the {@link
 * NetworkBuilder} class:
 *
 * <pre>{@code
 * MutableNetwork<Integer, MyEdge> graph = NetworkBuilder.directed().build();
 * }</pre>
 *
 * <p>{@link NetworkBuilder#build()} returns an instance of {@link MutableNetwork}, which is a
 * subtype of {@code Network} that provides methods for adding and removing nodes and edges. If you
 * do not need to mutate a graph (e.g. if you write a method than runs a read-only algorithm on the
 * graph), you should use the non-mutating {@link Network} interface, or an {@link
 * ImmutableNetwork}.
 *
 * <p>You can create an immutable copy of an existing {@code Network} using {@link
 * ImmutableNetwork#copyOf(Network)}:
 *
 * <pre>{@code
 * ImmutableNetwork<Integer, MyEdge> immutableGraph = ImmutableNetwork.copyOf(graph);
 * }</pre>
 *
 * <p>Instances of {@link ImmutableNetwork} do not implement {@link MutableNetwork} (obviously!) and
 * are contractually guaranteed to be unmodifiable and thread-safe.
 *
 * <p>The Guava User Guide has <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#building-graph-instances">more
 * information on (and examples of) building graphs</a>.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including:
 *
 * <ul>
 *   <li><a
 *       href="https://github.com/google/guava/wiki/GraphsExplained#equals-hashcode-and-graph-equivalence">
 *       {@code equals()}, {@code hashCode()}, and graph equivalence</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#synchronization">
 *       Synchronization policy</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">Notes
 *       for implementors</a>
 * </ul>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 * @since 20.0
 */
NetworkBuilder (/android/guava/src/com/google/common/graph/NetworkBuilder.java)/**
 * A builder for constructing instances of {@link MutableNetwork} or {@link ImmutableNetwork} with
 * user-defined properties.
 *
 * <p>A network built by this class will have the following properties by default:
 *
 * <ul>
 *   <li>does not allow parallel edges
 *   <li>does not allow self-loops
 *   <li>orders {@link Network#nodes()} and {@link Network#edges()} in the order in which the
 *       elements were added
 * </ul>
 *
 * <p>Examples of use:
 *
 * <pre>{@code
 * // Building a mutable network
 * MutableNetwork<String, Integer> network =
 *     NetworkBuilder.directed().allowsParallelEdges(true).build();
 * flightNetwork.addEdge("LAX", "ATL", 3025);
 * flightNetwork.addEdge("LAX", "ATL", 1598);
 * flightNetwork.addEdge("ATL", "LAX", 2450);
 *
 * // Building a immutable network
 * ImmutableNetwork<String, Integer> immutableNetwork =
 *     NetworkBuilder.directed()
 *         .allowsParallelEdges(true)
 *         .<String, Integer>immutable()
 *         .addEdge("LAX", "ATL", 3025)
 *         .addEdge("LAX", "ATL", 1598)
 *         .addEdge("ATL", "LAX", 2450)
 *         .build();
 * }</pre>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> The most general node type this builder will support. This is normally {@code Object}
 *     unless it is constrained by using a method like {@link #nodeOrder}, or the builder is
 *     constructed based on an existing {@code Network} using {@link #from(Network)}.
 * @param <N> The most general edge type this builder will support. This is normally {@code Object}
 *     unless it is constrained by using a method like {@link #edgeOrder}, or the builder is
 *     constructed based on an existing {@code Network} using {@link #from(Network)}.
 * @since 20.0
 */
NetworkConnections (/android/guava/src/com/google/common/graph/NetworkConnections.java)/**
 * An interface for representing and manipulating an origin node's adjacent nodes and incident edges
 * in a {@link Network}.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
PredecessorsFunction (/android/guava/src/com/google/common/graph/PredecessorsFunction.java)/**
 * A functional interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data.
 *
 * <p>This interface is meant to be used as the type of a parameter to graph algorithms (such as
 * topological sort) that only need a way of accessing the predecessors of a node in a graph.
 *
 * <h3>Usage</h3>
 *
 * Given an algorithm, for example:
 *
 * <pre>{@code
 * public <N> someGraphAlgorithm(N startNode, PredecessorsFunction<N> predecessorsFunction);
 * }</pre>
 *
 * you will invoke it depending on the graph representation you're using.
 *
 * <p>If you have an instance of one of the primary {@code common.graph} types ({@link Graph},
 * {@link ValueGraph}, and {@link Network}):
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, graph);
 * }</pre>
 *
 * This works because those types each implement {@code PredecessorsFunction}. It will also work
 * with any other implementation of this interface.
 *
 * <p>If you have your own graph implementation based around a custom node type {@code MyNode},
 * which has a method {@code getParents()} that retrieves its predecessors in a graph:
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, MyNode::getParents);
 * }</pre>
 *
 * <p>If you have some other mechanism for returning the predecessors of a node, or one that doesn't
 * return a {@code Iterable<? extends N>}, then you can use a lambda to perform a more general
 * transformation:
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, node -> ImmutableList.of(node.mother(), node.father()));
 * }</pre>
 *
 * <p>Graph algorithms that need additional capabilities (accessing both predecessors and
 * successors, iterating over the edges, etc.) should declare their input to be of a type that
 * provides those capabilities, such as {@link Graph}, {@link ValueGraph}, or {@link Network}.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">notes for
 * implementors</a>
 *
 * @author Joshua O'Madadhain
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @since 23.0
 */
SuccessorsFunction (/android/guava/src/com/google/common/graph/SuccessorsFunction.java)/**
 * A functional interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data.
 *
 * <p>This interface is meant to be used as the type of a parameter to graph algorithms (such as
 * breadth first traversal) that only need a way of accessing the successors of a node in a graph.
 *
 * <h3>Usage</h3>
 *
 * Given an algorithm, for example:
 *
 * <pre>{@code
 * public <N> someGraphAlgorithm(N startNode, SuccessorsFunction<N> successorsFunction);
 * }</pre>
 *
 * you will invoke it depending on the graph representation you're using.
 *
 * <p>If you have an instance of one of the primary {@code common.graph} types ({@link Graph},
 * {@link ValueGraph}, and {@link Network}):
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, graph);
 * }</pre>
 *
 * This works because those types each implement {@code SuccessorsFunction}. It will also work with
 * any other implementation of this interface.
 *
 * <p>If you have your own graph implementation based around a custom node type {@code MyNode},
 * which has a method {@code getChildren()} that retrieves its successors in a graph:
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, MyNode::getChildren);
 * }</pre>
 *
 * <p>If you have some other mechanism for returning the successors of a node, or one that doesn't
 * return an {@code Iterable<? extends N>}, then you can use a lambda to perform a more general
 * transformation:
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, node -> ImmutableList.of(node.leftChild(), node.rightChild()));
 * }</pre>
 *
 * <p>Graph algorithms that need additional capabilities (accessing both predecessors and
 * successors, iterating over the edges, etc.) should declare their input to be of a type that
 * provides those capabilities, such as {@link Graph}, {@link ValueGraph}, or {@link Network}.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">notes for
 * implementors</a>
 *
 * @author Joshua O'Madadhain
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @since 23.0
 */
NodeAndSuccessors (/android/guava/src/com/google/common/graph/Traverser.java)/** A simple tuple of a node and a partially iterated {@link Iterator} of its successors. */
NodeAndChildren (/android/guava/src/com/google/common/graph/Traverser.java)/** A simple tuple of a node and a partially iterated {@link Iterator} of its children. */
Traverser (/android/guava/src/com/google/common/graph/Traverser.java)/**
 * An object that can traverse the nodes that are reachable from a specified (set of) start node(s)
 * using a specified {@link SuccessorsFunction}.
 *
 * <p>There are two entry points for creating a {@code Traverser}: {@link
 * #forTree(SuccessorsFunction)} and {@link #forGraph(SuccessorsFunction)}. You should choose one
 * based on your answers to the following questions:
 *
 * <ol>
 *   <li>Is there only one path to any node that's reachable from any start node? (If so, the graph
 *       to be traversed is a tree or forest even if it is a subgraph of a graph which is neither.)
 *   <li>Are the node objects' implementations of {@code equals()}/{@code hashCode()} <a
 *       href="https://github.com/google/guava/wiki/GraphsExplained#non-recursiveness">recursive</a>?
 * </ol>
 *
 * <p>If your answers are:
 *
 * <ul>
 *   <li>(1) "no" and (2) "no", use {@link #forGraph(SuccessorsFunction)}.
 *   <li>(1) "yes" and (2) "yes", use {@link #forTree(SuccessorsFunction)}.
 *   <li>(1) "yes" and (2) "no", you can use either, but {@code forTree()} will be more efficient.
 *   <li>(1) "no" and (2) "yes", <b><i>neither will work</i></b>, but if you transform your node
 *       objects into a non-recursive form, you can use {@code forGraph()}.
 * </ul>
 *
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @since 23.1
 */
UndirectedGraphConnections (/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java)/**
 * An implementation of {@link GraphConnections} for undirected graphs.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
UndirectedMultiNetworkConnections (/android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java)/**
 * An implementation of {@link NetworkConnections} for undirected networks with parallel edges.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
UndirectedNetworkConnections (/android/guava/src/com/google/common/graph/UndirectedNetworkConnections.java)/**
 * An implementation of {@link NetworkConnections} for undirected networks.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
ValueGraph (/android/guava/src/com/google/common/graph/ValueGraph.java)/**
 * An interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data,
 * whose edges have associated non-unique values.
 *
 * <p>A graph is composed of a set of nodes and a set of edges connecting pairs of nodes.
 *
 * <p>There are three primary interfaces provided to represent graphs. In order of increasing
 * complexity they are: {@link Graph}, {@link ValueGraph}, and {@link Network}. You should generally
 * prefer the simplest interface that satisfies your use case. See the <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#choosing-the-right-graph-type">
 * "Choosing the right graph type"</a> section of the Guava User Guide for more details.
 *
 * <h3>Capabilities</h3>
 *
 * <p>{@code ValueGraph} supports the following use cases (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained#definitions">definitions of
 * terms</a>):
 *
 * <ul>
 *   <li>directed graphs
 *   <li>undirected graphs
 *   <li>graphs that do/don't allow self-loops
 *   <li>graphs whose nodes/edges are insertion-ordered, sorted, or unordered
 *   <li>graphs whose edges have associated values
 * </ul>
 *
 * <p>{@code ValueGraph}, as a subtype of {@code Graph}, explicitly does not support parallel edges,
 * and forbids implementations or extensions with parallel edges. If you need parallel edges, use
 * {@link Network}. (You can use a positive {@code Integer} edge value as a loose representation of
 * edge multiplicity, but the {@code *degree()} and mutation methods will not reflect your
 * interpretation of the edge value as its multiplicity.)
 *
 * <h3>Building a {@code ValueGraph}</h3>
 *
 * <p>The implementation classes that {@code common.graph} provides are not public, by design. To
 * create an instance of one of the built-in implementations of {@code ValueGraph}, use the {@link
 * ValueGraphBuilder} class:
 *
 * <pre>{@code
 * MutableValueGraph<Integer, Double> graph = ValueGraphBuilder.directed().build();
 * }</pre>
 *
 * <p>{@link ValueGraphBuilder#build()} returns an instance of {@link MutableValueGraph}, which is a
 * subtype of {@code ValueGraph} that provides methods for adding and removing nodes and edges. If
 * you do not need to mutate a graph (e.g. if you write a method than runs a read-only algorithm on
 * the graph), you should use the non-mutating {@link ValueGraph} interface, or an {@link
 * ImmutableValueGraph}.
 *
 * <p>You can create an immutable copy of an existing {@code ValueGraph} using {@link
 * ImmutableValueGraph#copyOf(ValueGraph)}:
 *
 * <pre>{@code
 * ImmutableValueGraph<Integer, Double> immutableGraph = ImmutableValueGraph.copyOf(graph);
 * }</pre>
 *
 * <p>Instances of {@link ImmutableValueGraph} do not implement {@link MutableValueGraph}
 * (obviously!) and are contractually guaranteed to be unmodifiable and thread-safe.
 *
 * <p>The Guava User Guide has <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#building-graph-instances">more
 * information on (and examples of) building graphs</a>.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including:
 *
 * <ul>
 *   <li><a
 *       href="https://github.com/google/guava/wiki/GraphsExplained#equals-hashcode-and-graph-equivalence">
 *       {@code equals()}, {@code hashCode()}, and graph equivalence</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#synchronization">
 *       Synchronization policy</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">Notes
 *       for implementors</a>
 * </ul>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 * @since 20.0
 */
ValueGraphBuilder (/android/guava/src/com/google/common/graph/ValueGraphBuilder.java)/**
 * A builder for constructing instances of {@link MutableValueGraph} or {@link ImmutableValueGraph}
 * with user-defined properties.
 *
 * <p>A graph built by this class will have the following properties by default:
 *
 * <ul>
 *   <li>does not allow self-loops
 *   <li>orders {@link Graph#nodes()} in the order in which the elements were added
 * </ul>
 *
 * <p>Examples of use:
 *
 * <pre>{@code
 * // Building a mutable value graph
 * MutableValueGraph<String, Double> graph =
 *     ValueGraphBuilder.undirected().allowsSelfLoops(true).build();
 * graph.putEdgeValue("San Francisco", "San Francisco", 0.0);
 * graph.putEdgeValue("San Jose", "San Jose", 0.0);
 * graph.putEdgeValue("San Francisco", "San Jose", 48.4);
 *
 * // Building an immutable value graph
 * ImmutableValueGraph<String, Double> immutableGraph =
 *     ValueGraphBuilder.undirected()
 *         .allowsSelfLoops(true)
 *         .<String, Double>immutable()
 *         .putEdgeValue("San Francisco", "San Francisco", 0.0)
 *         .putEdgeValue("San Jose", "San Jose", 0.0)
 *         .putEdgeValue("San Francisco", "San Jose", 48.4)
 *         .build();
 * }</pre>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> The most general node type this builder will support. This is normally {@code Object}
 *     unless it is constrained by using a method like {@link #nodeOrder}, or the builder is
 *     constructed based on an existing {@code ValueGraph} using {@link #from(ValueGraph)}.
 * @param <V> The most general value type this builder will support. This is normally {@code Object}
 *     unless the builder is constructed based on an existing {@code Graph} using {@link
 *     #from(ValueGraph)}.
 * @since 20.0
 */
AbstractByteHasher (/android/guava/src/com/google/common/hash/AbstractByteHasher.java)/**
 * Abstract {@link Hasher} that handles converting primitives to bytes using a scratch {@code
 * ByteBuffer} and streams all bytes to a sink to compute the hash.
 *
 * @author Colin Decker
 */
AbstractCompositeHashFunction (/android/guava/src/com/google/common/hash/AbstractCompositeHashFunction.java)/**
 * An abstract composition of multiple hash functions. {@linkplain #newHasher()} delegates to the
 * {@code Hasher} objects of the delegate hash functions, and in the end, they are used by
 * {@linkplain #makeHash(Hasher[])} that constructs the final {@code HashCode}.
 *
 * @author Dimitris Andreou
 */
AbstractHasher (/android/guava/src/com/google/common/hash/AbstractHasher.java)/**
 * An abstract implementation of {@link Hasher}, which only requires subtypes to implement {@link
 * #putByte}. Subtypes may provide more efficient implementations, however.
 *
 * @author Dimitris Andreou
 */
AbstractHashFunction (/android/guava/src/com/google/common/hash/AbstractHashFunction.java)/**
 * Skeleton implementation of {@link HashFunction} in terms of {@link #newHasher()}.
 *
 * <p>TODO(lowasser): make public
 */
BufferingHasher (/android/guava/src/com/google/common/hash/AbstractNonStreamingHashFunction.java)/** In-memory stream-based implementation of Hasher. */
AbstractNonStreamingHashFunction (/android/guava/src/com/google/common/hash/AbstractNonStreamingHashFunction.java)/**
 * Skeleton implementation of {@link HashFunction}, appropriate for non-streaming algorithms. All
 * the hash computation done using {@linkplain #newHasher()} are delegated to the {@linkplain
 * #hashBytes(byte[], int, int)} method.
 *
 * @author Dimitris Andreou
 */
Strategy (/android/guava/src/com/google/common/hash/BloomFilter.java)/**
   * A strategy to translate T instances, to {@code numHashFunctions} bit indexes.
   *
   * <p>Implementations should be collections of pure functions (i.e. stateless).
   */
BloomFilter (/android/guava/src/com/google/common/hash/BloomFilter.java)/**
 * A Bloom filter for instances of {@code T}. A Bloom filter offers an approximate containment test
 * with one-sided error: if it claims that an element is contained in it, this might be in error,
 * but if it claims that an element is <i>not</i> contained in it, then this is definitely true.
 *
 * <p>If you are unfamiliar with Bloom filters, this nice <a
 * href="http://llimllib.github.com/bloomfilter-tutorial/">tutorial</a> may help you understand how
 * they work.
 *
 * <p>The false positive probability ({@code FPP}) of a Bloom filter is defined as the probability
 * that {@linkplain #mightContain(Object)} will erroneously return {@code true} for an object that
 * has not actually been put in the {@code BloomFilter}.
 *
 * <p>Bloom filters are serializable. They also support a more compact serial representation via the
 * {@link #writeTo} and {@link #readFrom} methods. Both serialized forms will continue to be
 * supported by future versions of this library. However, serial forms generated by newer versions
 * of the code may not be readable by older versions of the code (e.g., a serialized Bloom filter
 * generated today may <i>not</i> be readable by a binary that was compiled 6 months ago).
 *
 * <p>As of Guava 23.0, this class is thread-safe and lock-free. It internally uses atomics and
 * compare-and-swap to ensure correctness when multiple threads are used to access it.
 *
 * @param <T> the type of instances that the {@code BloomFilter} accepts
 * @author Dimitris Andreou
 * @author Kevin Bourrillion
 * @since 11.0 (thread-safe since 23.0)
 */
LockFreeBitArray (/android/guava/src/com/google/common/hash/BloomFilterStrategies.java)/**
   * Models a lock-free array of bits.
   *
   * <p>We use this instead of java.util.BitSet because we need access to the array of longs and we
   * need compare-and-swap.
   */
ChecksumHasher (/android/guava/src/com/google/common/hash/ChecksumHashFunction.java)/** Hasher that updates a checksum. */
ChecksumHashFunction (/android/guava/src/com/google/common/hash/ChecksumHashFunction.java)/**
 * {@link HashFunction} adapter for {@link Checksum} instances.
 *
 * @author Colin Decker
 */
Crc32cHashFunction (/android/guava/src/com/google/common/hash/Crc32cHashFunction.java)/**
 * This class generates a CRC32C checksum, defined by RFC 3720, Section 12.1. The generator
 * polynomial for this checksum is {@code 0x11EDC6F41}.
 *
 * @author Kurt Alfred Kluever
 */
FarmHashFingerprint64 (/android/guava/src/com/google/common/hash/FarmHashFingerprint64.java)/**
 * Implementation of FarmHash Fingerprint64, an open-source fingerprinting algorithm for strings.
 *
 * <p>Its speed is comparable to CityHash64, and its quality of hashing is at least as good.
 *
 * <p>Note to maintainers: This implementation relies on signed arithmetic being bit-wise equivalent
 * to unsigned arithmetic in all cases except:
 *
 * <ul>
 *   <li>comparisons (signed values can be negative)
 *   <li>division (avoided here)
 *   <li>shifting (right shift must be unsigned)
 * </ul>
 *
 * @author Kyle Maddison
 * @author Geoff Pike
 */
Funnel (/android/guava/src/com/google/common/hash/Funnel.java)/**
 * An object which can send data from an object of type {@code T} into a {@code PrimitiveSink}.
 * Implementations for common types can be found in {@link Funnels}.
 *
 * <p>Note that serialization of {@linkplain BloomFilter bloom filters} requires the proper
 * serialization of funnels. When possible, it is recommended that funnels be implemented as a
 * single-element enum to maintain serialization guarantees. See Effective Java (2nd Edition), Item
 * 3: "Enforce the singleton property with a private constructor or an enum type". For example:
 *
 * <pre>{@code
 * public enum PersonFunnel implements Funnel<Person> {
 *   INSTANCE;
 *   public void funnel(Person person, PrimitiveSink into) {
 *     into.putUnencodedChars(person.getFirstName())
 *         .putUnencodedChars(person.getLastName())
 *         .putInt(person.getAge());
 *   }
 * }
 * }</pre>
 *
 * @author Dimitris Andreou
 * @since 11.0
 */
Funnels (/android/guava/src/com/google/common/hash/Funnels.java)/**
 * Funnels for common types. All implementations are serializable.
 *
 * @author Dimitris Andreou
 * @since 11.0
 */
HashCode (/android/guava/src/com/google/common/hash/HashCode.java)/**
 * An immutable hash code of arbitrary bit length.
 *
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 * @since 11.0
 */
Hasher (/android/guava/src/com/google/common/hash/Hasher.java)/**
 * A {@link PrimitiveSink} that can compute a hash code after reading the input. Each hasher should
 * translate all multibyte values ({@link #putInt(int)}, {@link #putLong(long)}, etc) to bytes in
 * little-endian order.
 *
 * <p><b>Warning:</b> The result of calling any methods after calling {@link #hash} is undefined.
 *
 * <p><b>Warning:</b> Using a specific character encoding when hashing a {@link CharSequence} with
 * {@link #putString(CharSequence, Charset)} is generally only useful for cross-language
 * compatibility (otherwise prefer {@link #putUnencodedChars}). However, the character encodings
 * must be identical across languages. Also beware that {@link Charset} definitions may occasionally
 * change between Java releases.
 *
 * <p><b>Warning:</b> Chunks of data that are put into the {@link Hasher} are not delimited. The
 * resulting {@link HashCode} is dependent only on the bytes inserted, and the order in which they
 * were inserted, not how those bytes were chunked into discrete put() operations. For example, the
 * following three expressions all generate colliding hash codes:
 *
 * <pre>{@code
 * newHasher().putByte(b1).putByte(b2).putByte(b3).hash()
 * newHasher().putByte(b1).putBytes(new byte[] { b2, b3 }).hash()
 * newHasher().putBytes(new byte[] { b1, b2, b3 }).hash()
 * }</pre>
 *
 * <p>If you wish to avoid this, you should either prepend or append the size of each chunk. Keep in
 * mind that when dealing with char sequences, the encoded form of two concatenated char sequences
 * is not equivalent to the concatenation of their encoded form. Therefore, {@link
 * #putString(CharSequence, Charset)} should only be used consistently with <i>complete</i>
 * sequences and not broken into chunks.
 *
 * @author Kevin Bourrillion
 * @since 11.0
 */
HashFunction (/android/guava/src/com/google/common/hash/HashFunction.java)/**
 * A hash function is a collision-averse pure function that maps an arbitrary block of data to a
 * number called a <i>hash code</i>.
 *
 * <h3>Definition</h3>
 *
 * <p>Unpacking this definition:
 *
 * <ul>
 *   <li><b>block of data:</b> the input for a hash function is always, in concept, an ordered byte
 *       array. This hashing API accepts an arbitrary sequence of byte and multibyte values (via
 *       {@link Hasher}), but this is merely a convenience; these are always translated into raw
 *       byte sequences under the covers.
 *   <li><b>hash code:</b> each hash function always yields hash codes of the same fixed bit length
 *       (given by {@link #bits}). For example, {@link Hashing#sha1} produces a 160-bit number,
 *       while {@link Hashing#murmur3_32()} yields only 32 bits. Because a {@code long} value is
 *       clearly insufficient to hold all hash code values, this API represents a hash code as an
 *       instance of {@link HashCode}.
 *   <li><b>pure function:</b> the value produced must depend only on the input bytes, in the order
 *       they appear. Input data is never modified. {@link HashFunction} instances should always be
 *       stateless, and therefore thread-safe.
 *   <li><b>collision-averse:</b> while it can't be helped that a hash function will sometimes
 *       produce the same hash code for distinct inputs (a "collision"), every hash function strives
 *       to <i>some</i> degree to make this unlikely. (Without this condition, a function that
 *       always returns zero could be called a hash function. It is not.)
 * </ul>
 *
 * <p>Summarizing the last two points: "equal yield equal <i>always</i>; unequal yield unequal
 * <i>often</i>." This is the most important characteristic of all hash functions.
 *
 * <h3>Desirable properties</h3>
 *
 * <p>A high-quality hash function strives for some subset of the following virtues:
 *
 * <ul>
 *   <li><b>collision-resistant:</b> while the definition above requires making at least <i>some</i>
 *       token attempt, one measure of the quality of a hash function is <i>how well</i> it succeeds
 *       at this goal. Important note: it may be easy to achieve the theoretical minimum collision
 *       rate when using completely <i>random</i> sample input. The true test of a hash function is
 *       how it performs on representative real-world data, which tends to contain many hidden
 *       patterns and clumps. The goal of a good hash function is to stamp these patterns out as
 *       thoroughly as possible.
 *   <li><b>bit-dispersing:</b> masking out any <i>single bit</i> from a hash code should yield only
 *       the expected <i>twofold</i> increase to all collision rates. Informally, the "information"
 *       in the hash code should be as evenly "spread out" through the hash code's bits as possible.
 *       The result is that, for example, when choosing a bucket in a hash table of size 2^8,
 *       <i>any</i> eight bits could be consistently used.
 *   <li><b>cryptographic:</b> certain hash functions such as {@link Hashing#sha512} are designed to
 *       make it as infeasible as possible to reverse-engineer the input that produced a given hash
 *       code, or even to discover <i>any</i> two distinct inputs that yield the same result. These
 *       are called <i>cryptographic hash functions</i>. But, whenever it is learned that either of
 *       these feats has become computationally feasible, the function is deemed "broken" and should
 *       no longer be used for secure purposes. (This is the likely eventual fate of <i>all</i>
 *       cryptographic hashes.)
 *   <li><b>fast:</b> perhaps self-explanatory, but often the most important consideration.
 * </ul>
 *
 * <h3>Providing input to a hash function</h3>
 *
 * <p>The primary way to provide the data that your hash function should act on is via a {@link
 * Hasher}. Obtain a new hasher from the hash function using {@link #newHasher}, "push" the relevant
 * data into it using methods like {@link Hasher#putBytes(byte[])}, and finally ask for the {@code
 * HashCode} when finished using {@link Hasher#hash}. (See an {@linkplain #newHasher example} of
 * this.)
 *
 * <p>If all you want to hash is a single byte array, string or {@code long} value, there are
 * convenient shortcut methods defined directly on {@link HashFunction} to make this easier.
 *
 * <p>Hasher accepts primitive data types, but can also accept any Object of type {@code T} provided
 * that you implement a {@link Funnel}{@code <T>} to specify how to "feed" data from that object
 * into the function. (See {@linkplain Hasher#putObject an example} of this.)
 *
 * <p><b>Compatibility note:</b> Throughout this API, multibyte values are always interpreted in
 * <i>little-endian</i> order. That is, hashing the byte array {@code {0x01, 0x02, 0x03, 0x04}} is
 * equivalent to hashing the {@code int} value {@code 0x04030201}. If this isn't what you need,
 * methods such as {@link Integer#reverseBytes} and {@link Ints#toByteArray} will help.
 *
 * <h3>Relationship to {@link Object#hashCode}</h3>
 *
 * <p>Java's baked-in concept of hash codes is constrained to 32 bits, and provides no separation
 * between hash algorithms and the data they act on, so alternate hash algorithms can't be easily
 * substituted. Also, implementations of {@code hashCode} tend to be poor-quality, in part because
 * they end up depending on <i>other</i> existing poor-quality {@code hashCode} implementations,
 * including those in many JDK classes.
 *
 * <p>{@code Object.hashCode} implementations tend to be very fast, but have weak collision
 * prevention and <i>no</i> expectation of bit dispersion. This leaves them perfectly suitable for
 * use in hash tables, because extra collisions cause only a slight performance hit, while poor bit
 * dispersion is easily corrected using a secondary hash function (which all reasonable hash table
 * implementations in Java use). For the many uses of hash functions beyond data structures,
 * however, {@code Object.hashCode} almost always falls short -- hence this library.
 *
 * @author Kevin Bourrillion
 * @since 11.0
 */
LinearCongruentialGenerator (/android/guava/src/com/google/common/hash/Hashing.java)/**
   * Linear CongruentialGenerator to use for consistent hashing. See
   * http://en.wikipedia.org/wiki/Linear_congruential_generator
   */
Hashing (/android/guava/src/com/google/common/hash/Hashing.java)/**
 * Static methods to obtain {@link HashFunction} instances, and other static hashing-related
 * utilities.
 *
 * <p>A comparison of the various hash functions can be found <a
 * href="http://goo.gl/jS7HH">here</a>.
 *
 * @author Kevin Bourrillion
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 * @since 11.0
 */
HashingInputStream (/android/guava/src/com/google/common/hash/HashingInputStream.java)/**
 * An {@link InputStream} that maintains a hash of the data read from it.
 *
 * @author Qian Huang
 * @since 16.0
 */
HashingOutputStream (/android/guava/src/com/google/common/hash/HashingOutputStream.java)/**
 * An {@link OutputStream} that maintains a hash of the data written to it.
 *
 * @author Nick Piepmeier
 * @since 16.0
 */
ImmutableSupplier (/android/guava/src/com/google/common/hash/ImmutableSupplier.java)/**
 * Explicitly named subinterface of {@link Supplier} that can be marked {@literal @}{@link
 * Immutable}.
 */
LittleEndianBytes (/android/guava/src/com/google/common/hash/LittleEndianByteArray.java)/**
   * Common interface for retrieving a 64-bit long from a little-endian byte array.
   *
   * <p>This abstraction allows us to use single-instruction load and put when available, or fall
   * back on the slower approach of using Longs.fromBytes(byte...).
   */
LittleEndianByteArray (/android/guava/src/com/google/common/hash/LittleEndianByteArray.java)/**
 * Utility functions for loading and storing values from a byte array.
 *
 * @author Kevin Damm
 * @author Kyle Maddison
 */
LongAddable (/android/guava/src/com/google/common/hash/LongAddable.java)/**
 * Abstract interface for objects that can concurrently add longs.
 *
 * @author Louis Wasserman
 */
LongAddables (/android/guava/src/com/google/common/hash/LongAddables.java)/**
 * Source of {@link LongAddable} objects that deals with GWT, Unsafe, and all that.
 *
 * @author Louis Wasserman
 */
LongAdder (/android/guava/src/com/google/common/hash/LongAdder.java)/**
 * One or more variables that together maintain an initially zero {@code long} sum. When updates
 * (method {@link #add}) are contended across threads, the set of variables may grow dynamically to
 * reduce contention. Method {@link #sum} (or, equivalently, {@link #longValue}) returns the current
 * total combined across the variables maintaining the sum.
 *
 * <p>This class is usually preferable to {@link AtomicLong} when multiple threads update a common
 * sum that is used for purposes such as collecting statistics, not for fine-grained synchronization
 * control. Under low update contention, the two classes have similar characteristics. But under
 * high contention, expected throughput of this class is significantly higher, at the expense of
 * higher space consumption.
 *
 * <p>This class extends {@link Number}, but does <em>not</em> define methods such as {@code
 * equals}, {@code hashCode} and {@code compareTo} because instances are expected to be mutated, and
 * so are not useful as collection keys.
 *
 * <p><em>jsr166e note: This class is targeted to be placed in java.util.concurrent.atomic.</em>
 *
 * @since 1.8
 * @author Doug Lea
 */
MacHasher (/android/guava/src/com/google/common/hash/MacHashFunction.java)/** Hasher that updates a {@link Mac} (message authentication code). */
MacHashFunction (/android/guava/src/com/google/common/hash/MacHashFunction.java)/**
 * {@link HashFunction} adapter for {@link Mac} instances.
 *
 * @author Kurt Alfred Kluever
 */
MessageDigestHasher (/android/guava/src/com/google/common/hash/MessageDigestHashFunction.java)/** Hasher that updates a message digest. */
MessageDigestHashFunction (/android/guava/src/com/google/common/hash/MessageDigestHashFunction.java)/**
 * {@link HashFunction} adapter for {@link MessageDigest} instances.
 *
 * @author Kevin Bourrillion
 * @author Dimitris Andreou
 */
Murmur3_128HashFunction (/android/guava/src/com/google/common/hash/Murmur3_128HashFunction.java)/**
 * See MurmurHash3_x64_128 in <a href="http://smhasher.googlecode.com/svn/trunk/MurmurHash3.cpp">the
 * C++ implementation</a>.
 *
 * @author Austin Appleby
 * @author Dimitris Andreou
 */
Murmur3_32HashFunction (/android/guava/src/com/google/common/hash/Murmur3_32HashFunction.java)/**
 * See MurmurHash3_x86_32 in <a
 * href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">the C++
 * implementation</a>.
 *
 * @author Austin Appleby
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 */
PrimitiveSink (/android/guava/src/com/google/common/hash/PrimitiveSink.java)/**
 * An object which can receive a stream of primitive values.
 *
 * @author Kevin Bourrillion
 * @since 12.0 (in 11.0 as {@code Sink})
 */
SipHashFunction (/android/guava/src/com/google/common/hash/SipHashFunction.java)/**
 * {@link HashFunction} implementation of SipHash-c-d.
 *
 * @author Kurt Alfred Kluever
 * @author Jean-Philippe Aumasson
 * @author Daniel J. Bernstein
 */
Cell (/android/guava/src/com/google/common/hash/Striped64.java)/**
   * Padded variant of AtomicLong supporting only raw accesses plus CAS. The value field is placed
   * between pads, hoping that the JVM doesn't reorder them.
   *
   * <p>JVM intrinsics note: It would be possible to use a release-only form of CAS here, if it were
   * provided.
   */
Striped64 (/android/guava/src/com/google/common/hash/Striped64.java)/**
 * A package-local class holding common representation and mechanics for classes supporting dynamic
 * striping on 64bit values. The class extends Number so that concrete subclasses must publicly do
 * so.
 */
HtmlEscapers (/android/guava/src/com/google/common/html/HtmlEscapers.java)/**
 * {@code Escaper} instances suitable for strings to be included in HTML attribute values and
 * <em>most</em> elements' text contents. When possible, avoid manual escaping by using templating
 * systems and high-level APIs that provide autoescaping.
 * One Google-authored templating system available for external use is <a
 * href="https://developers.google.com/closure/templates/">Closure Templates</a>.
 *
 * <p>HTML escaping is particularly tricky: For example, <a href="http://goo.gl/5TgZb">some
 * elements' text contents must not be HTML escaped</a>. As a result, it is impossible to escape an
 * HTML document correctly without domain-specific knowledge beyond what {@code HtmlEscapers}
 * provides. We strongly encourage the use of HTML templating systems.
 *
 * @author Sven Mawson
 * @author David Beaumont
 * @since 15.0
 */
AppendableWriter (/android/guava/src/com/google/common/io/AppendableWriter.java)/**
 * Writer that places all output on an {@link Appendable} target. If the target is {@link Flushable}
 * or {@link Closeable}, flush()es and close()s will also be delegated to the target.
 *
 * @author Alan Green
 * @author Sebastian Kanthak
 * @since 1.0
 */
DecodingException (/android/guava/src/com/google/common/io/BaseEncoding.java)/**
   * Exception indicating invalid base-encoded input encountered while decoding.
   *
   * @author Louis Wasserman
   * @since 15.0
   */
BaseEncoding (/android/guava/src/com/google/common/io/BaseEncoding.java)/**
 * A binary encoding scheme for reversibly translating between byte sequences and printable ASCII
 * strings. This class includes several constants for encoding schemes specified by <a
 * href="http://tools.ietf.org/html/rfc4648">RFC 4648</a>. For example, the expression:
 *
 * <pre>{@code
 * BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))
 * }</pre>
 *
 * <p>returns the string {@code "MZXW6==="}, and
 *
 * <pre>{@code
 * byte[] decoded = BaseEncoding.base32().decode("MZXW6===");
 * }</pre>
 *
 * <p>...returns the ASCII bytes of the string {@code "foo"}.
 *
 * <p>By default, {@code BaseEncoding}'s behavior is relatively strict and in accordance with RFC
 * 4648. Decoding rejects characters in the wrong case, though padding is optional. To modify
 * encoding and decoding behavior, use configuration methods to obtain a new encoding with modified
 * behavior:
 *
 * <pre>{@code
 * BaseEncoding.base16().lowerCase().decode("deadbeef");
 * }</pre>
 *
 * <p>Warning: BaseEncoding instances are immutable. Invoking a configuration method has no effect
 * on the receiving instance; you must store and use the new encoding instance it returns, instead.
 *
 * <pre>{@code
 * // Do NOT do this
 * BaseEncoding hex = BaseEncoding.base16();
 * hex.lowerCase(); // does nothing!
 * return hex.decode("deadbeef"); // throws an IllegalArgumentException
 * }</pre>
 *
 * <p>It is guaranteed that {@code encoding.decode(encoding.encode(x))} is always equal to {@code
 * x}, but the reverse does not necessarily hold.
 *
 * <table>
 * <caption>Encodings</caption>
 * <tr>
 * <th>Encoding
 * <th>Alphabet
 * <th>{@code char:byte} ratio
 * <th>Default padding
 * <th>Comments
 * <tr>
 * <td>{@link #base16()}
 * <td>0-9 A-F
 * <td>2.00
 * <td>N/A
 * <td>Traditional hexadecimal. Defaults to upper case.
 * <tr>
 * <td>{@link #base32()}
 * <td>A-Z 2-7
 * <td>1.60
 * <td>=
 * <td>Human-readable; no possibility of mixing up 0/O or 1/I. Defaults to upper case.
 * <tr>
 * <td>{@link #base32Hex()}
 * <td>0-9 A-V
 * <td>1.60
 * <td>=
 * <td>"Numerical" base 32; extended from the traditional hex alphabet. Defaults to upper case.
 * <tr>
 * <td>{@link #base64()}
 * <td>A-Z a-z 0-9 + /
 * <td>1.33
 * <td>=
 * <td>
 * <tr>
 * <td>{@link #base64Url()}
 * <td>A-Z a-z 0-9 - _
 * <td>1.33
 * <td>=
 * <td>Safe to use as filenames, or to pass in URLs without escaping
 * </table>
 *
 * <p>All instances of this class are immutable, so they may be stored safely as static constants.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
ByteArrayDataInput (/android/guava/src/com/google/common/io/ByteArrayDataInput.java)/**
 * An extension of {@code DataInput} for reading from in-memory byte arrays; its methods offer
 * identical functionality but do not throw {@link IOException}.
 *
 * <p><b>Warning:</b> The caller is responsible for not attempting to read past the end of the
 * array. If any method encounters the end of the array prematurely, it throws {@link
 * IllegalStateException} to signify <i>programmer error</i>. This behavior is a technical violation
 * of the supertype's contract, which specifies a checked exception.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
ByteArrayDataOutput (/android/guava/src/com/google/common/io/ByteArrayDataOutput.java)/**
 * An extension of {@code DataOutput} for writing to in-memory byte arrays; its methods offer
 * identical functionality but do not throw {@link IOException}.
 *
 * @author Jayaprabhakar Kadarkarai
 * @since 1.0
 */
ByteProcessor (/android/guava/src/com/google/common/io/ByteProcessor.java)/**
 * A callback interface to process bytes from a stream.
 *
 * <p>{@link #processBytes} will be called for each chunk of data that is read, and should return
 * {@code false} when you want to stop processing.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
AsCharSink (/android/guava/src/com/google/common/io/ByteSink.java)/**
   * A char sink that encodes written characters with a charset and writes resulting bytes to this
   * byte sink.
   */
ByteSink (/android/guava/src/com/google/common/io/ByteSink.java)/**
 * A destination to which bytes can be written, such as a file. Unlike an {@link OutputStream}, a
 * {@code ByteSink} is not an open, stateful stream that can be written to and closed. Instead, it
 * is an immutable <i>supplier</i> of {@code OutputStream} instances.
 *
 * <p>{@code ByteSink} provides two kinds of methods:
 *
 * <ul>
 *   <li><b>Methods that return a stream:</b> These methods should return a <i>new</i>, independent
 *       instance each time they are called. The caller is responsible for ensuring that the
 *       returned stream is closed.
 *   <li><b>Convenience methods:</b> These are implementations of common operations that are
 *       typically implemented by opening a stream using one of the methods in the first category,
 *       doing something and finally closing the stream or channel that was opened.
 * </ul>
 *
 * @since 14.0
 * @author Colin Decker
 */
AsCharSource (/android/guava/src/com/google/common/io/ByteSource.java)/**
   * A char source that reads bytes from this source and decodes them as characters using a charset.
   */
SlicedByteSource (/android/guava/src/com/google/common/io/ByteSource.java)/** A view of a subsection of the containing byte source. */
ByteSource (/android/guava/src/com/google/common/io/ByteSource.java)/**
 * A readable source of bytes, such as a file. Unlike an {@link InputStream}, a {@code ByteSource}
 * is not an open, stateful stream for input that can be read and closed. Instead, it is an
 * immutable <i>supplier</i> of {@code InputStream} instances.
 *
 * <p>{@code ByteSource} provides two kinds of methods:
 *
 * <ul>
 *   <li><b>Methods that return a stream:</b> These methods should return a <i>new</i>, independent
 *       instance each time they are called. The caller is responsible for ensuring that the
 *       returned stream is closed.
 *   <li><b>Convenience methods:</b> These are implementations of common operations that are
 *       typically implemented by opening a stream using one of the methods in the first category,
 *       doing something and finally closing the stream that was opened.
 * </ul>
 *
 * @since 14.0
 * @author Colin Decker
 */
ByteStreams (/android/guava/src/com/google/common/io/ByteStreams.java)/**
 * Provides utility methods for working with byte arrays and I/O streams.
 *
 * @author Chris Nokleberg
 * @author Colin Decker
 * @since 1.0
 */
CharSink (/android/guava/src/com/google/common/io/CharSink.java)/**
 * A destination to which characters can be written, such as a text file. Unlike a {@link Writer}, a
 * {@code CharSink} is not an open, stateful stream that can be written to and closed. Instead, it
 * is an immutable <i>supplier</i> of {@code Writer} instances.
 *
 * <p>{@code CharSink} provides two kinds of methods:
 *
 * <ul>
 *   <li><b>Methods that return a writer:</b> These methods should return a <i>new</i>, independent
 *       instance each time they are called. The caller is responsible for ensuring that the
 *       returned writer is closed.
 *   <li><b>Convenience methods:</b> These are implementations of common operations that are
 *       typically implemented by opening a writer using one of the methods in the first category,
 *       doing something and finally closing the writer that was opened.
 * </ul>
 *
 * <p>Any {@link ByteSink} may be viewed as a {@code CharSink} with a specific {@linkplain Charset
 * character encoding} using {@link ByteSink#asCharSink(Charset)}. Characters written to the
 * resulting {@code CharSink} will written to the {@code ByteSink} as encoded bytes.
 *
 * @since 14.0
 * @author Colin Decker
 */
AsByteSource (/android/guava/src/com/google/common/io/CharSource.java)/** A byte source that reads chars from this source and encodes them as bytes using a charset. */
StringCharSource (/android/guava/src/com/google/common/io/CharSource.java)/**
   * Subclass specialized for string instances.
   *
   * <p>Since Strings are immutable and built into the jdk we can optimize some operations
   *
   * <ul>
   *   <li>use {@link StringReader} instead of {@link CharSequenceReader}. It is faster since it can
   *       use {@link String#getChars(int, int, char[], int)} instead of copying characters one by
   *       one with {@link CharSequence#charAt(int)}.
   *   <li>use {@link Appendable#append(CharSequence)} in {@link #copyTo(Appendable)} and {@link
   *       #copyTo(CharSink)}. We know this is correct since strings are immutable and so the length
   *       can't change, and it is faster because many writers and appendables are optimized for
   *       appending string instances.
   * </ul>
   */
CharSource (/android/guava/src/com/google/common/io/CharSource.java)/**
 * A readable source of characters, such as a text file. Unlike a {@link Reader}, a {@code
 * CharSource} is not an open, stateful stream of characters that can be read and closed. Instead,
 * it is an immutable <i>supplier</i> of {@code Reader} instances.
 *
 * <p>{@code CharSource} provides two kinds of methods:
 *
 * <ul>
 *   <li><b>Methods that return a reader:</b> These methods should return a <i>new</i>, independent
 *       instance each time they are called. The caller is responsible for ensuring that the
 *       returned reader is closed.
 *   <li><b>Convenience methods:</b> These are implementations of common operations that are
 *       typically implemented by opening a reader using one of the methods in the first category,
 *       doing something and finally closing the reader that was opened.
 * </ul>
 *
 * <p>Several methods in this class, such as {@link #readLines()}, break the contents of the source
 * into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \n}, {@code
 * \r} or {@code \r\n}, do not include the line separator in each line and do not consider there to
 * be an empty line at the end if the contents are terminated with a line separator.
 *
 * <p>Any {@link ByteSource} containing text encoded with a specific {@linkplain Charset character
 * encoding} may be viewed as a {@code CharSource} using {@link ByteSource#asCharSource(Charset)}.
 *
 * @since 14.0
 * @author Colin Decker
 */
CharStreams (/android/guava/src/com/google/common/io/CharStreams.java)/**
 * Provides utility methods for working with character streams.
 *
 * <p>All method parameters must be non-null unless documented otherwise.
 *
 * <p>Some of the methods in this class take arguments with a generic type of {@code Readable &
 * Closeable}. A {@link java.io.Reader} implements both of those interfaces. Similarly for {@code
 * Appendable & Closeable} and {@link java.io.Writer}.
 *
 * @author Chris Nokleberg
 * @author Bin Zhu
 * @author Colin Decker
 * @since 1.0
 */
Closeables (/android/guava/src/com/google/common/io/Closeables.java)/**
 * Utility methods for working with {@link Closeable} objects.
 *
 * @author Michael Lancaster
 * @since 1.0
 */
Suppressor (/android/guava/src/com/google/common/io/Closer.java)/** Suppression strategy interface. */
LoggingSuppressor (/android/guava/src/com/google/common/io/Closer.java)/** Suppresses exceptions by logging them. */
SuppressingSuppressor (/android/guava/src/com/google/common/io/Closer.java)/**
   * Suppresses exceptions by adding them to the exception that will be thrown using JDK7's
   * addSuppressed(Throwable) mechanism.
   */
CountingInputStream (/android/guava/src/com/google/common/io/CountingInputStream.java)/**
 * An {@link InputStream} that counts the number of bytes read.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
CountingOutputStream (/android/guava/src/com/google/common/io/CountingOutputStream.java)/**
 * An OutputStream that counts the number of bytes written.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
MemoryOutput (/android/guava/src/com/google/common/io/FileBackedOutputStream.java)/** ByteArrayOutputStream that exposes its internals. */
FileBackedOutputStream (/android/guava/src/com/google/common/io/FileBackedOutputStream.java)/**
 * An {@link OutputStream} that starts buffering to a byte array, but switches to file buffering
 * once the data reaches a configurable size.
 *
 * <p>This class is thread-safe.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
Files (/android/guava/src/com/google/common/io/Files.java)/**
 * Provides utility methods for working with {@linkplain File files}.
 *
 * <p>{@link java.nio.file.Path} users will find similar utilities in {@link MoreFiles} and the
 * JDK's {@link java.nio.file.Files} class.
 *
 * @author Chris Nokleberg
 * @author Colin Decker
 * @since 1.0
 */
Flushables (/android/guava/src/com/google/common/io/Flushables.java)/**
 * Utility methods for working with {@link Flushable} objects.
 *
 * @author Michael Lancaster
 * @since 1.0
 */
LineBuffer (/android/guava/src/com/google/common/io/LineBuffer.java)/**
 * Package-protected abstract class that implements the line reading algorithm used by {@link
 * LineReader}. Line separators are per {@link java.io.BufferedReader}: line feed, carriage return,
 * or carriage return followed immediately by a linefeed.
 *
 * <p>Subclasses must implement {@link #handleLine}, call {@link #add} to pass character data, and
 * call {@link #finish} at the end of stream.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
LineProcessor (/android/guava/src/com/google/common/io/LineProcessor.java)/**
 * A callback to be used with the streaming {@code readLines} methods.
 *
 * <p>{@link #processLine} will be called for each line that is read, and should return {@code
 * false} when you want to stop processing.
 *
 * @author Miles Barr
 * @since 1.0
 */
LineReader (/android/guava/src/com/google/common/io/LineReader.java)/**
 * A class for reading lines of text. Provides the same functionality as {@link
 * java.io.BufferedReader#readLine()} but for all {@link Readable} objects, not just instances of
 * {@link Reader}.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
LittleEndianDataInputStream (/android/guava/src/com/google/common/io/LittleEndianDataInputStream.java)/**
 * An implementation of {@link DataInput} that uses little-endian byte ordering for reading {@code
 * short}, {@code int}, {@code float}, {@code double}, and {@code long} values.
 *
 * <p><b>Note:</b> This class intentionally violates the specification of its supertype {@code
 * DataInput}, which explicitly requires big-endian byte order.
 *
 * @author Chris Nokleberg
 * @author Keith Bottner
 * @since 8.0
 */
LittleEndianDataOutputStream (/android/guava/src/com/google/common/io/LittleEndianDataOutputStream.java)/**
 * An implementation of {@link DataOutput} that uses little-endian byte ordering for writing {@code
 * char}, {@code short}, {@code int}, {@code float}, {@code double}, and {@code long} values.
 *
 * <p><b>Note:</b> This class intentionally violates the specification of its supertype {@code
 * DataOutput}, which explicitly requires big-endian byte order.
 *
 * @author Chris Nokleberg
 * @author Keith Bottner
 * @since 8.0
 */
MultiInputStream (/android/guava/src/com/google/common/io/MultiInputStream.java)/**
 * An {@link InputStream} that concatenates multiple substreams. At most one stream will be open at
 * a time.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
MultiReader (/android/guava/src/com/google/common/io/MultiReader.java)/**
 * A {@link Reader} that concatenates multiple readers.
 *
 * @author Bin Zhu
 * @since 1.0
 */
PatternFilenameFilter (/android/guava/src/com/google/common/io/PatternFilenameFilter.java)/**
 * File name filter that only accepts files matching a regular expression. This class is thread-safe
 * and immutable.
 *
 * @author Apple Chow
 * @since 1.0
 */
ReaderInputStream (/android/guava/src/com/google/common/io/ReaderInputStream.java)/**
 * An {@link InputStream} that converts characters from a {@link Reader} into bytes using an
 * arbitrary Charset.
 *
 * <p>This is an alternative to copying the data to an {@code OutputStream} via a {@code Writer},
 * which is necessarily blocking. By implementing an {@code InputStream} it allows consumers to
 * "pull" as much data as they can handle, which is more convenient when dealing with flow
 * controlled, async APIs.
 *
 * @author Chris Nokleberg
 */
UrlByteSource (/android/guava/src/com/google/common/io/Resources.java)/** A byte source that reads from a URL using {@link URL#openStream()}. */
Resources (/android/guava/src/com/google/common/io/Resources.java)/**
 * Provides utility methods for working with resources in the classpath. Note that even though these
 * methods use {@link URL} parameters, they are usually not appropriate for HTTP or other
 * non-classpath resources.
 *
 * <p>All method parameters must be non-null unless documented otherwise.
 *
 * @author Chris Nokleberg
 * @author Ben Yu
 * @author Colin Decker
 * @since 1.0
 */
BigIntegerMath (/android/guava/src/com/google/common/math/BigIntegerMath.java)/**
 * A class for arithmetic on values of type {@code BigInteger}.
 *
 * <p>The implementations of many methods in this class are based on material from Henry S. Warren,
 * Jr.'s <i>Hacker's Delight</i>, (Addison Wesley, 2002).
 *
 * <p>Similar functionality for {@code int} and for {@code long} can be found in {@link IntMath} and
 * {@link LongMath} respectively.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
DoubleMath (/android/guava/src/com/google/common/math/DoubleMath.java)/**
 * A class for arithmetic on doubles that is not covered by {@link java.lang.Math}.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
DoubleUtils (/android/guava/src/com/google/common/math/DoubleUtils.java)/**
 * Utilities for {@code double} primitives.
 *
 * @author Louis Wasserman
 */
IntMath (/android/guava/src/com/google/common/math/IntMath.java)/**
 * A class for arithmetic on values of type {@code int}. Where possible, methods are defined and
 * named analogously to their {@code BigInteger} counterparts.
 *
 * <p>The implementations of many methods in this class are based on material from Henry S. Warren,
 * Jr.'s <i>Hacker's Delight</i>, (Addison Wesley, 2002).
 *
 * <p>Similar functionality for {@code long} and for {@link BigInteger} can be found in {@link
 * LongMath} and {@link BigIntegerMath} respectively. For other common operations on {@code int}
 * values, see {@link com.google.common.primitives.Ints}.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
LinearTransformationBuilder (/android/guava/src/com/google/common/math/LinearTransformation.java)/**
   * This is an intermediate stage in the construction process. It is returned by {@link
   * LinearTransformation#mapping}. You almost certainly don't want to keep instances around, but
   * instead use method chaining. This represents a single point mapping, i.e. a mapping between one
   * {@code x} and {@code y} value pair.
   *
   * @since 20.0
   */
LinearTransformation (/android/guava/src/com/google/common/math/LinearTransformation.java)/**
 * The representation of a linear transformation between real numbers {@code x} and {@code y}.
 * Graphically, this is the specification of a straight line on a plane. The transformation can be
 * expressed as {@code y = m * x + c} for finite {@code m} and {@code c}, unless it is a vertical
 * transformation in which case {@code x} has a constant value for all {@code y}. In the
 * non-vertical case, {@code m} is the slope of the transformation (and a horizontal transformation
 * has zero slope).
 *
 * @author Pete Gillin
 * @since 20.0
 */
LongMath (/android/guava/src/com/google/common/math/LongMath.java)/**
 * A class for arithmetic on values of type {@code long}. Where possible, methods are defined and
 * named analogously to their {@code BigInteger} counterparts.
 *
 * <p>The implementations of many methods in this class are based on material from Henry S. Warren,
 * Jr.'s <i>Hacker's Delight</i>, (Addison Wesley, 2002).
 *
 * <p>Similar functionality for {@code int} and for {@link BigInteger} can be found in {@link
 * IntMath} and {@link BigIntegerMath} respectively. For other common operations on {@code long}
 * values, see {@link com.google.common.primitives.Longs}.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
MathPreconditions (/android/guava/src/com/google/common/math/MathPreconditions.java)/**
 * A collection of preconditions for math functions.
 *
 * @author Louis Wasserman
 */
PairedStats (/android/guava/src/com/google/common/math/PairedStats.java)/**
 * An immutable value object capturing some basic statistics about a collection of paired double
 * values (e.g. points on a plane). Build instances with {@link PairedStatsAccumulator#snapshot}.
 *
 * @author Pete Gillin
 * @since 20.0
 */
PairedStatsAccumulator (/android/guava/src/com/google/common/math/PairedStatsAccumulator.java)/**
 * A mutable object which accumulates paired double values (e.g. points on a plane) and tracks some
 * basic statistics over all the values added so far. This class is not thread safe.
 *
 * @author Pete Gillin
 * @since 20.0
 */
Scale (/android/guava/src/com/google/common/math/Quantiles.java)/**
   * Describes the point in a fluent API chain where only the scale (i.e. the q in q-quantiles) has
   * been specified.
   *
   * @since 20.0
   */
ScaleAndIndex (/android/guava/src/com/google/common/math/Quantiles.java)/**
   * Describes the point in a fluent API chain where the scale and a single quantile index (i.e. the
   * q and the k in the kth q-quantile) have been specified.
   *
   * @since 20.0
   */
ScaleAndIndexes (/android/guava/src/com/google/common/math/Quantiles.java)/**
   * Describes the point in a fluent API chain where the scale and a multiple quantile indexes (i.e.
   * the q and a set of values for the k in the kth q-quantile) have been specified.
   *
   * @since 20.0
   */
Quantiles (/android/guava/src/com/google/common/math/Quantiles.java)/**
 * Provides a fluent API for calculating <a
 * href="http://en.wikipedia.org/wiki/Quantile">quantiles</a>.
 *
 * <h3>Examples</h3>
 *
 * <p>To compute the median:
 *
 * <pre>{@code
 * double myMedian = median().compute(myDataset);
 * }</pre>
 *
 * where {@link #median()} has been statically imported.
 *
 * <p>To compute the 99th percentile:
 *
 * <pre>{@code
 * double myPercentile99 = percentiles().index(99).compute(myDataset);
 * }</pre>
 *
 * where {@link #percentiles()} has been statically imported.
 *
 * <p>To compute median and the 90th and 99th percentiles:
 *
 * <pre>{@code
 * Map<Integer, Double> myPercentiles =
 *     percentiles().indexes(50, 90, 99).compute(myDataset);
 * }</pre>
 *
 * where {@link #percentiles()} has been statically imported: {@code myPercentiles} maps the keys
 * 50, 90, and 99, to their corresponding quantile values.
 *
 * <p>To compute quartiles, use {@link #quartiles()} instead of {@link #percentiles()}. To compute
 * arbitrary q-quantiles, use {@link #scale scale(q)}.
 *
 * <p>These examples all take a copy of your dataset. If you have a double array, you are okay with
 * it being arbitrarily reordered, and you want to avoid that copy, you can use {@code
 * computeInPlace} instead of {@code compute}.
 *
 * <h3>Definition and notes on interpolation</h3>
 *
 * <p>The definition of the kth q-quantile of N values is as follows: define x = k * (N - 1) / q; if
 * x is an integer, the result is the value which would appear at index x in the sorted dataset
 * (unless there are {@link Double#NaN NaN} values, see below); otherwise, the result is the average
 * of the values which would appear at the indexes floor(x) and ceil(x) weighted by (1-frac(x)) and
 * frac(x) respectively. This is the same definition as used by Excel and by S, it is the Type 7
 * definition in <a
 * href="http://stat.ethz.ch/R-manual/R-devel/library/stats/html/quantile.html">R</a>, and it is
 * described by <a
 * href="http://en.wikipedia.org/wiki/Quantile#Estimating_the_quantiles_of_a_population">
 * wikipedia</a> as providing "Linear interpolation of the modes for the order statistics for the
 * uniform distribution on [0,1]."
 *
 * <h3>Handling of non-finite values</h3>
 *
 * <p>If any values in the input are {@link Double#NaN NaN} then all values returned are {@link
 * Double#NaN NaN}. (This is the one occasion when the behaviour is not the same as you'd get from
 * sorting with {@link java.util.Arrays#sort(double[]) Arrays.sort(double[])} or {@link
 * java.util.Collections#sort(java.util.List) Collections.sort(List&lt;Double&gt;)} and selecting
 * the required value(s). Those methods would sort {@link Double#NaN NaN} as if it is greater than
 * any other value and place them at the end of the dataset, even after {@link
 * Double#POSITIVE_INFINITY POSITIVE_INFINITY}.)
 *
 * <p>Otherwise, {@link Double#NEGATIVE_INFINITY NEGATIVE_INFINITY} and {@link
 * Double#POSITIVE_INFINITY POSITIVE_INFINITY} sort to the beginning and the end of the dataset, as
 * you would expect.
 *
 * <p>If required to do a weighted average between an infinity and a finite value, or between an
 * infinite value and itself, the infinite value is returned. If required to do a weighted average
 * between {@link Double#NEGATIVE_INFINITY NEGATIVE_INFINITY} and {@link Double#POSITIVE_INFINITY
 * POSITIVE_INFINITY}, {@link Double#NaN NaN} is returned (note that this will only happen if the
 * dataset contains no finite values).
 *
 * <h3>Performance</h3>
 *
 * <p>The average time complexity of the computation is O(N) in the size of the dataset. There is a
 * worst case time complexity of O(N^2). You are extremely unlikely to hit this quadratic case on
 * randomly ordered data (the probability decreases faster than exponentially in N), but if you are
 * passing in unsanitized user data then a malicious user could force it. A light shuffle of the
 * data using an unpredictable seed should normally be enough to thwart this attack.
 *
 * <p>The time taken to compute multiple quantiles on the same dataset using {@link Scale#indexes
 * indexes} is generally less than the total time taken to compute each of them separately, and
 * sometimes much less. For example, on a large enough dataset, computing the 90th and 99th
 * percentiles together takes about 55% as long as computing them separately.
 *
 * <p>When calling {@link ScaleAndIndex#compute} (in {@linkplain ScaleAndIndexes#compute either
 * form}), the memory requirement is 8*N bytes for the copy of the dataset plus an overhead which is
 * independent of N (but depends on the quantiles being computed). When calling {@link
 * ScaleAndIndex#computeInPlace computeInPlace} (in {@linkplain ScaleAndIndexes#computeInPlace
 * either form}), only the overhead is required. The number of object allocations is independent of
 * N in both cases.
 *
 * @author Pete Gillin
 * @since 20.0
 */
Stats (/android/guava/src/com/google/common/math/Stats.java)/**
 * A bundle of statistical summary values -- sum, count, mean/average, min and max, and several
 * forms of variance -- that were computed from a single set of zero or more floating-point values.
 *
 * <p>There are two ways to obtain a {@code Stats} instance:
 *
 * <ul>
 *   <li>If all the values you want to summarize are already known, use the appropriate {@code
 *       Stats.of} factory method below. Primitive arrays, iterables and iterators of any kind of
 *       {@code Number}, and primitive varargs are supported.
 *   <li>Or, to avoid storing up all the data first, create a {@link StatsAccumulator} instance,
 *       feed values to it as you get them, then call {@link StatsAccumulator#snapshot}.
 * </ul>
 *
 * <p>Static convenience methods called {@code meanOf} are also provided for users who wish to
 * calculate <i>only</i> the mean.
 *
 * <p><b>Java 8 users:</b> If you are not using any of the variance statistics, you may wish to use
 * built-in JDK libraries instead of this class.
 *
 * @author Pete Gillin
 * @author Kevin Bourrillion
 * @since 20.0
 */
StatsAccumulator (/android/guava/src/com/google/common/math/StatsAccumulator.java)/**
 * A mutable object which accumulates double values and tracks some basic statistics over all the
 * values added so far. The values may be added singly or in groups. This class is not thread safe.
 *
 * @author Pete Gillin
 * @author Kevin Bourrillion
 * @since 20.0
 */
HostAndPort (/android/guava/src/com/google/common/net/HostAndPort.java)/**
 * An immutable representation of a host and port.
 *
 * <p>Example usage:
 *
 * <pre>
 * HostAndPort hp = HostAndPort.fromString("[2001:db8::1]")
 *     .withDefaultPort(80)
 *     .requireBracketsForIPv6();
 * hp.getHost();   // returns "2001:db8::1"
 * hp.getPort();   // returns 80
 * hp.toString();  // returns "[2001:db8::1]:80"
 * </pre>
 *
 * <p>Here are some examples of recognized formats:
 *
 * <ul>
 *   <li>example.com
 *   <li>example.com:80
 *   <li>192.0.2.1
 *   <li>192.0.2.1:80
 *   <li>[2001:db8::1] - {@link #getHost()} omits brackets
 *   <li>[2001:db8::1]:80 - {@link #getHost()} omits brackets
 *   <li>2001:db8::1 - Use {@link #requireBracketsForIPv6()} to prohibit this
 * </ul>
 *
 * <p>Note that this is not an exhaustive list, because these methods are only concerned with
 * brackets, colons, and port numbers. Full validation of the host field (if desired) is the
 * caller's responsibility.
 *
 * @author Paul Marks
 * @since 10.0
 */
HostSpecifier (/android/guava/src/com/google/common/net/HostSpecifier.java)/**
 * A syntactically valid host specifier, suitable for use in a URI. This may be either a numeric IP
 * address in IPv4 or IPv6 notation, or a domain name.
 *
 * <p>Because this class is intended to represent host specifiers which can reasonably be used in a
 * URI, the domain name case is further restricted to include only those domain names which end in a
 * recognized public suffix; see {@link InternetDomainName#isPublicSuffix()} for details.
 *
 * <p>Note that no network lookups are performed by any {@code HostSpecifier} methods. No attempt is
 * made to verify that a provided specifier corresponds to a real or accessible host. Only syntactic
 * and pattern-based checks are performed.
 *
 * <p>If you know that a given string represents a numeric IP address, use {@link InetAddresses} to
 * obtain and manipulate a {@link java.net.InetAddress} instance from it rather than using this
 * class. Similarly, if you know that a given string represents a domain name, use {@link
 * InternetDomainName} rather than this class.
 *
 * @author Craig Berry
 * @since 5.0
 */
ReferrerPolicyValues (/android/guava/src/com/google/common/net/HttpHeaders.java)/**
   * Values for the <a href="https://www.w3.org/TR/referrer-policy/">{@code Referrer-Policy}</a>
   * header.
   *
   * @since 23.4
   */
HttpHeaders (/android/guava/src/com/google/common/net/HttpHeaders.java)/**
 * Contains constant definitions for the HTTP header field names. See:
 *
 * <ul>
 *   <li><a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a>
 *   <li><a href="http://www.ietf.org/rfc/rfc2183.txt">RFC 2183</a>
 *   <li><a href="http://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>
 *   <li><a href="http://www.ietf.org/rfc/rfc2965.txt">RFC 2965</a>
 *   <li><a href="http://www.ietf.org/rfc/rfc5988.txt">RFC 5988</a>
 * </ul>
 *
 *
 * @author Kurt Alfred Kluever
 * @since 11.0
 */
TeredoInfo (/android/guava/src/com/google/common/net/InetAddresses.java)/**
   * A simple immutable data class to encapsulate the information to be found in a Teredo address.
   *
   * <p>All of the fields in this class are encoded in various portions of the IPv6 address as part
   * of the protocol. More protocols details can be found at: <a target="_parent"
   * href="http://en.wikipedia.org/wiki/Teredo_tunneling">http://en.wikipedia.
   * org/wiki/Teredo_tunneling</a>.
   *
   * <p>The RFC can be found here: <a target="_parent" href="http://tools.ietf.org/html/rfc4380">RFC
   * 4380</a>.
   *
   * @since 5.0
   */
InetAddresses (/android/guava/src/com/google/common/net/InetAddresses.java)/**
 * Static utility methods pertaining to {@link InetAddress} instances.
 *
 * <p><b>Important note:</b> Unlike {@code InetAddress.getByName()}, the methods of this class never
 * cause DNS services to be accessed. For this reason, you should prefer these methods as much as
 * possible over their JDK equivalents whenever you are expecting to handle only IP address string
 * literals -- there is no blocking DNS penalty for a malformed string.
 *
 * <p>When dealing with {@link Inet4Address} and {@link Inet6Address} objects as byte arrays (vis.
 * {@code InetAddress.getAddress()}) they are 4 and 16 bytes in length, respectively, and represent
 * the address in network byte order.
 *
 * <p>Examples of IP addresses and their byte representations:
 *
 * <dl>
 *   <dt>The IPv4 loopback address, {@code "127.0.0.1"}.
 *   <dd>{@code 7f 00 00 01}
 *   <dt>The IPv6 loopback address, {@code "::1"}.
 *   <dd>{@code 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01}
 *   <dt>From the IPv6 reserved documentation prefix ({@code 2001:db8::/32}), {@code "2001:db8::1"}.
 *   <dd>{@code 20 01 0d b8 00 00 00 00 00 00 00 00 00 00 00 01}
 *   <dt>An IPv6 "IPv4 compatible" (or "compat") address, {@code "::192.168.0.1"}.
 *   <dd>{@code 00 00 00 00 00 00 00 00 00 00 00 00 c0 a8 00 01}
 *   <dt>An IPv6 "IPv4 mapped" address, {@code "::ffff:192.168.0.1"}.
 *   <dd>{@code 00 00 00 00 00 00 00 00 00 00 ff ff c0 a8 00 01}
 * </dl>
 *
 * <p>A few notes about IPv6 "IPv4 mapped" addresses and their observed use in Java.
 *
 * <p>"IPv4 mapped" addresses were originally a representation of IPv4 addresses for use on an IPv6
 * socket that could receive both IPv4 and IPv6 connections (by disabling the {@code IPV6_V6ONLY}
 * socket option on an IPv6 socket). Yes, it's confusing. Nevertheless, these "mapped" addresses
 * were never supposed to be seen on the wire. That assumption was dropped, some say mistakenly, in
 * later RFCs with the apparent aim of making IPv4-to-IPv6 transition simpler.
 *
 * <p>Technically one <i>can</i> create a 128bit IPv6 address with the wire format of a "mapped"
 * address, as shown above, and transmit it in an IPv6 packet header. However, Java's InetAddress
 * creation methods appear to adhere doggedly to the original intent of the "mapped" address: all
 * "mapped" addresses return {@link Inet4Address} objects.
 *
 * <p>For added safety, it is common for IPv6 network operators to filter all packets where either
 * the source or destination address appears to be a "compat" or "mapped" address. Filtering
 * suggestions usually recommend discarding any packets with source or destination addresses in the
 * invalid range {@code ::/3}, which includes both of these bizarre address formats. For more
 * information on "bogons", including lists of IPv6 bogon space, see:
 *
 * <ul>
 *   <li><a target="_parent"
 *       href="http://en.wikipedia.org/wiki/Bogon_filtering">http://en.wikipedia.
 *       org/wiki/Bogon_filtering</a>
 *   <li><a target="_parent"
 *       href="http://www.cymru.com/Bogons/ipv6.txt">http://www.cymru.com/Bogons/ ipv6.txt</a>
 *   <li><a target="_parent" href="http://www.cymru.com/Bogons/v6bogon.html">http://www.cymru.com/
 *       Bogons/v6bogon.html</a>
 *   <li><a target="_parent" href="http://www.space.net/~gert/RIPE/ipv6-filters.html">http://www.
 *       space.net/~gert/RIPE/ipv6-filters.html</a>
 * </ul>
 *
 * @author Erik Kline
 * @since 5.0
 */
InternetDomainName (/android/guava/src/com/google/common/net/InternetDomainName.java)/**
 * An immutable well-formed internet domain name, such as {@code com} or {@code foo.co.uk}. Only
 * syntactic analysis is performed; no DNS lookups or other network interactions take place. Thus
 * there is no guarantee that the domain actually exists on the internet.
 *
 * <p>One common use of this class is to determine whether a given string is likely to represent an
 * addressable domain on the web -- that is, for a candidate string {@code "xxx"}, might browsing to
 * {@code "http://xxx/"} result in a webpage being displayed? In the past, this test was frequently
 * done by determining whether the domain ended with a {@linkplain #isPublicSuffix() public suffix}
 * but was not itself a public suffix. However, this test is no longer accurate. There are many
 * domains which are both public suffixes and addressable as hosts; {@code "uk.com"} is one example.
 * Using the subset of public suffixes that are {@linkplain #isRegistrySuffix() registry suffixes},
 * one can get a better result, as only a few registry suffixes are addressable. However, the most
 * useful test to determine if a domain is a plausible web host is {@link #hasPublicSuffix()}. This
 * will return {@code true} for many domains which (currently) are not hosts, such as {@code "com"},
 * but given that any public suffix may become a host without warning, it is better to err on the
 * side of permissiveness and thus avoid spurious rejection of valid sites. Of course, to actually
 * determine addressability of any host, clients of this class will need to perform their own DNS
 * lookups.
 *
 * <p>During construction, names are normalized in two ways:
 *
 * <ol>
 *   <li>ASCII uppercase characters are converted to lowercase.
 *   <li>Unicode dot separators other than the ASCII period ({@code '.'}) are converted to the ASCII
 *       period.
 * </ol>
 *
 * <p>The normalized values will be returned from {@link #toString()} and {@link #parts()}, and will
 * be reflected in the result of {@link #equals(Object)}.
 *
 * <p><a href="http://en.wikipedia.org/wiki/Internationalized_domain_name">Internationalized domain
 * names</a> such as {@code 网络.cn} are supported, as are the equivalent <a
 * href="http://en.wikipedia.org/wiki/Internationalized_domain_name">IDNA Punycode-encoded</a>
 * versions.
 *
 * @author Catherine Berry
 * @since 5.0
 */
MediaType (/android/guava/src/com/google/common/net/MediaType.java)/**
 * Represents an <a href="http://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type</a>
 * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges
 * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">defined by HTTP/1.1</a>.
 * As such, the {@code *} character is treated as a wildcard and is used to represent any acceptable
 * type or subtype value. A media type may not have wildcard type with a declared subtype. The
 * {@code *} character has no special meaning as part of a parameter. All values for type, subtype,
 * parameter attributes or parameter values must be valid according to RFCs <a
 * href="https://tools.ietf.org/html/rfc2045">2045</a> and <a
 * href="https://tools.ietf.org/html/rfc2046">2046</a>.
 *
 * <p>All portions of the media type that are case-insensitive (type, subtype, parameter attributes)
 * are normalized to lowercase. The value of the {@code charset} parameter is normalized to
 * lowercase, but all others are left as-is.
 *
 * <p>Note that this specifically does <strong>not</strong> represent the value of the MIME {@code
 * Content-Type} header and as such has no support for header-specific considerations such as line
 * folding and comments.
 *
 * <p>For media types that take a charset the predefined constants default to UTF-8 and have a
 * "_UTF_8" suffix. To get a version without a character set, use {@link #withoutParameters}.
 *
 * @since 12.0
 * @author Gregory Kick
 */
PercentEscaper (/android/guava/src/com/google/common/net/PercentEscaper.java)/**
 * A {@code UnicodeEscaper} that escapes some set of Java characters using a UTF-8 based percent
 * encoding scheme. The set of safe characters (those which remain unescaped) can be specified on
 * construction.
 *
 * <p>This class is primarily used for creating URI escapers in {@link UrlEscapers} but can be used
 * directly if required. While URI escapers impose specific semantics on which characters are
 * considered 'safe', this class has a minimal set of restrictions.
 *
 * <p>When escaping a String, the following rules apply:
 *
 * <ul>
 *   <li>All specified safe characters remain unchanged.
 *   <li>If {@code plusForSpace} was specified, the space character " " is converted into a plus
 *       sign {@code "+"}.
 *   <li>All other characters are converted into one or more bytes using UTF-8 encoding and each
 *       byte is then represented by the 3-character string "%XX", where "XX" is the two-digit,
 *       uppercase, hexadecimal representation of the byte value.
 * </ul>
 *
 * <p>For performance reasons the only currently supported character encoding of this class is
 * UTF-8.
 *
 * <p><b>Note:</b> This escaper produces <a
 * href="https://url.spec.whatwg.org/#percent-encode">uppercase</a> hexadecimal sequences.
 *
 * @author David Beaumont
 * @since 15.0
 */
UrlEscapers (/android/guava/src/com/google/common/net/UrlEscapers.java)/**
 * {@code Escaper} instances suitable for strings to be included in particular sections of URLs.
 *
 * <p>If the resulting URLs are inserted into an HTML or XML document, they will require additional
 * escaping with {@link com.google.common.html.HtmlEscapers} or {@link
 * com.google.common.xml.XmlEscapers}.
 *
 *
 * @author David Beaumont
 * @author Chris Povirk
 * @since 15.0
 */
Booleans (/android/guava/src/com/google/common/primitives/Booleans.java)/**
 * Static utility methods pertaining to {@code boolean} primitives, that are not already found in
 * either {@link Boolean} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Chars (/android/guava/src/com/google/common/primitives/Chars.java)/**
 * Static utility methods pertaining to {@code char} primitives, that are not already found in
 * either {@link Character} or {@link Arrays}.
 *
 * <p>All the operations in this class treat {@code char} values strictly numerically; they are
 * neither Unicode-aware nor locale-dependent.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Doubles (/android/guava/src/com/google/common/primitives/Doubles.java)/**
 * Static utility methods pertaining to {@code double} primitives, that are not already found in
 * either {@link Double} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Floats (/android/guava/src/com/google/common/primitives/Floats.java)/**
 * Static utility methods pertaining to {@code float} primitives, that are not already found in
 * either {@link Float} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Builder (/android/guava/src/com/google/common/primitives/ImmutableDoubleArray.java)/**
   * A builder for {@link ImmutableDoubleArray} instances; obtained using {@link
   * ImmutableDoubleArray#builder}.
   */
ImmutableDoubleArray (/android/guava/src/com/google/common/primitives/ImmutableDoubleArray.java)/**
 * An immutable array of {@code double} values, with an API resembling {@link List}.
 *
 * <p>Advantages compared to {@code double[]}:
 *
 * <ul>
 *   <li>All the many well-known advantages of immutability (read <i>Effective Java</i>, third
 *       edition, Item 17).
 *   <li>Has the value-based (not identity-based) {@link #equals}, {@link #hashCode}, and {@link
 *       #toString} behavior you expect.
 *   <li>Offers useful operations beyond just {@code get} and {@code length}, so you don't have to
 *       hunt through classes like {@link Arrays} and {@link Doubles} for them.
 *   <li>Supports a copy-free {@link #subArray} view, so methods that accept this type don't need to
 *       add overloads that accept start and end indexes.
 *   <li>Access to all collection-based utilities via {@link #asList} (though at the cost of
 *       allocating garbage).
 * </ul>
 *
 * <p>Disadvantages compared to {@code double[]}:
 *
 * <ul>
 *   <li>Memory footprint has a fixed overhead (about 24 bytes per instance).
 *   <li><i>Some</i> construction use cases force the data to be copied (though several construction
 *       APIs are offered that don't).
 *   <li>Can't be passed directly to methods that expect {@code double[]} (though the most common
 *       utilities do have replacements here).
 *   <li>Dependency on {@code com.google.common} / Guava.
 * </ul>
 *
 * <p>Advantages compared to {@link com.google.common.collect.ImmutableList ImmutableList}{@code
 * <Double>}:
 *
 * <ul>
 *   <li>Improved memory compactness and locality.
 *   <li>Can be queried without allocating garbage.
 * </ul>
 *
 * <p>Disadvantages compared to {@code ImmutableList<Double>}:
 *
 * <ul>
 *   <li>Can't be passed directly to methods that expect {@code Iterable}, {@code Collection}, or
 *       {@code List} (though the most common utilities do have replacements here, and there is a
 *       lazy {@link #asList} view).
 * </ul>
 *
 * @since 22.0
 */
Builder (/android/guava/src/com/google/common/primitives/ImmutableIntArray.java)/**
   * A builder for {@link ImmutableIntArray} instances; obtained using {@link
   * ImmutableIntArray#builder}.
   */
ImmutableIntArray (/android/guava/src/com/google/common/primitives/ImmutableIntArray.java)/**
 * An immutable array of {@code int} values, with an API resembling {@link List}.
 *
 * <p>Advantages compared to {@code int[]}:
 *
 * <ul>
 *   <li>All the many well-known advantages of immutability (read <i>Effective Java</i>, third
 *       edition, Item 17).
 *   <li>Has the value-based (not identity-based) {@link #equals}, {@link #hashCode}, and {@link
 *       #toString} behavior you expect
 *   <li>Offers useful operations beyond just {@code get} and {@code length}, so you don't have to
 *       hunt through classes like {@link Arrays} and {@link Ints} for them.
 *   <li>Supports a copy-free {@link #subArray} view, so methods that accept this type don't need to
 *       add overloads that accept start and end indexes.
 *   <li>Access to all collection-based utilities via {@link #asList} (though at the cost of
 *       allocating garbage).
 * </ul>
 *
 * <p>Disadvantages compared to {@code int[]}:
 *
 * <ul>
 *   <li>Memory footprint has a fixed overhead (about 24 bytes per instance).
 *   <li><i>Some</i> construction use cases force the data to be copied (though several construction
 *       APIs are offered that don't).
 *   <li>Can't be passed directly to methods that expect {@code int[]} (though the most common
 *       utilities do have replacements here).
 *   <li>Dependency on {@code com.google.common} / Guava.
 * </ul>
 *
 * <p>Advantages compared to {@link com.google.common.collect.ImmutableList ImmutableList}{@code
 * <Integer>}:
 *
 * <ul>
 *   <li>Improved memory compactness and locality
 *   <li>Can be queried without allocating garbage
 * </ul>
 *
 * <p>Disadvantages compared to {@code ImmutableList<Integer>}:
 *
 * <ul>
 *   <li>Can't be passed directly to methods that expect {@code Iterable}, {@code Collection}, or
 *       {@code List} (though the most common utilities do have replacements here, and there is a
 *       lazy {@link #asList} view).
 * </ul>
 *
 * @since 22.0
 */
Builder (/android/guava/src/com/google/common/primitives/ImmutableLongArray.java)/**
   * A builder for {@link ImmutableLongArray} instances; obtained using {@link
   * ImmutableLongArray#builder}.
   */
ImmutableLongArray (/android/guava/src/com/google/common/primitives/ImmutableLongArray.java)/**
 * An immutable array of {@code long} values, with an API resembling {@link List}.
 *
 * <p>Advantages compared to {@code long[]}:
 *
 * <ul>
 *   <li>All the many well-known advantages of immutability (read <i>Effective Java</i>, third
 *       edition, Item 17).
 *   <li>Has the value-based (not identity-based) {@link #equals}, {@link #hashCode}, and {@link
 *       #toString} behavior you expect.
 *   <li>Offers useful operations beyond just {@code get} and {@code length}, so you don't have to
 *       hunt through classes like {@link Arrays} and {@link Longs} for them.
 *   <li>Supports a copy-free {@link #subArray} view, so methods that accept this type don't need to
 *       add overloads that accept start and end indexes.
 *   <li>Access to all collection-based utilities via {@link #asList} (though at the cost of
 *       allocating garbage).
 * </ul>
 *
 * <p>Disadvantages compared to {@code long[]}:
 *
 * <ul>
 *   <li>Memory footprint has a fixed overhead (about 24 bytes per instance).
 *   <li><i>Some</i> construction use cases force the data to be copied (though several construction
 *       APIs are offered that don't).
 *   <li>Can't be passed directly to methods that expect {@code long[]} (though the most common
 *       utilities do have replacements here).
 *   <li>Dependency on {@code com.google.common} / Guava.
 * </ul>
 *
 * <p>Advantages compared to {@link com.google.common.collect.ImmutableList ImmutableList}{@code
 * <Long>}:
 *
 * <ul>
 *   <li>Improved memory compactness and locality.
 *   <li>Can be queried without allocating garbage.
 * </ul>
 *
 * <p>Disadvantages compared to {@code ImmutableList<Long>}:
 *
 * <ul>
 *   <li>Can't be passed directly to methods that expect {@code Iterable}, {@code Collection}, or
 *       {@code List} (though the most common utilities do have replacements here, and there is a
 *       lazy {@link #asList} view).
 * </ul>
 *
 * @since 22.0
 */
Ints (/android/guava/src/com/google/common/primitives/Ints.java)/**
 * Static utility methods pertaining to {@code int} primitives, that are not already found in either
 * {@link Integer} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Longs (/android/guava/src/com/google/common/primitives/Longs.java)/**
 * Static utility methods pertaining to {@code long} primitives, that are not already found in
 * either {@link Long} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
ParseRequest (/android/guava/src/com/google/common/primitives/ParseRequest.java)/** A string to be parsed as a number and the radix to interpret it in. */
Platform (/android/guava/src/com/google/common/primitives/Platform.java)/** Methods factored out so that they can be emulated differently in GWT. */
Primitives (/android/guava/src/com/google/common/primitives/Primitives.java)/**
 * Contains static utility methods pertaining to primitive types and their corresponding wrapper
 * types.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Shorts (/android/guava/src/com/google/common/primitives/Shorts.java)/**
 * Static utility methods pertaining to {@code short} primitives, that are not already found in
 * either {@link Short} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
LexicographicalComparatorHolder (/android/guava/src/com/google/common/primitives/UnsignedBytes.java)/**
   * Provides a lexicographical comparator implementation; either a Java implementation or a faster
   * implementation based on {@link Unsafe}.
   *
   * <p>Uses reflection to gracefully fall back to the Java implementation if {@code Unsafe} isn't
   * available.
   */
UnsignedBytes (/android/guava/src/com/google/common/primitives/UnsignedBytes.java)/**
 * Static utility methods pertaining to {@code byte} primitives that interpret values as
 * <i>unsigned</i> (that is, any negative value {@code b} is treated as the positive value {@code
 * 256 + b}). The corresponding methods that treat the values as signed are found in {@link
 * SignedBytes}, and the methods for which signedness is not an issue are in {@link Bytes}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @author Martin Buchholz
 * @author Hiroshi Yamauchi
 * @author Louis Wasserman
 * @since 1.0
 */
UnsignedInteger (/android/guava/src/com/google/common/primitives/UnsignedInteger.java)/**
 * A wrapper class for unsigned {@code int} values, supporting arithmetic operations.
 *
 * <p>In some cases, when speed is more important than code readability, it may be faster simply to
 * treat primitive {@code int} values as unsigned, using the methods from {@link UnsignedInts}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">unsigned
 * primitive utilities</a>.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
UnsignedInts (/android/guava/src/com/google/common/primitives/UnsignedInts.java)/**
 * Static utility methods pertaining to {@code int} primitives that interpret values as
 * <i>unsigned</i> (that is, any negative value {@code x} is treated as the positive value {@code
 * 2^32 + x}). The methods for which signedness is not an issue are in {@link Ints}, as well as
 * signed versions of methods for which signedness is an issue.
 *
 * <p>In addition, this class provides several static methods for converting an {@code int} to a
 * {@code String} and a {@code String} to an {@code int} that treat the {@code int} as an unsigned
 * number.
 *
 * <p>Users of these utilities must be <i>extremely careful</i> not to mix up signed and unsigned
 * {@code int} values. When possible, it is recommended that the {@link UnsignedInteger} wrapper
 * class be used, at a small efficiency penalty, to enforce the distinction in the type system.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">unsigned
 * primitive utilities</a>.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
UnsignedLong (/android/guava/src/com/google/common/primitives/UnsignedLong.java)/**
 * A wrapper class for unsigned {@code long} values, supporting arithmetic operations.
 *
 * <p>In some cases, when speed is more important than code readability, it may be faster simply to
 * treat primitive {@code long} values as unsigned, using the methods from {@link UnsignedLongs}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">unsigned
 * primitive utilities</a>.
 *
 * @author Louis Wasserman
 * @author Colin Evans
 * @since 11.0
 */
UnsignedLongs (/android/guava/src/com/google/common/primitives/UnsignedLongs.java)/**
 * Static utility methods pertaining to {@code long} primitives that interpret values as
 * <i>unsigned</i> (that is, any negative value {@code x} is treated as the positive value {@code
 * 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as well as
 * signed versions of methods for which signedness is an issue.
 *
 * <p>In addition, this class provides several static methods for converting a {@code long} to a
 * {@code String} and a {@code String} to a {@code long} that treat the {@code long} as an unsigned
 * number.
 *
 * <p>Users of these utilities must be <i>extremely careful</i> not to mix up signed and unsigned
 * {@code long} values. When possible, it is recommended that the {@link UnsignedLong} wrapper class
 * be used, at a small efficiency penalty, to enforce the distinction in the type system.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">unsigned
 * primitive utilities</a>.
 *
 * @author Louis Wasserman
 * @author Brian Milch
 * @author Colin Evans
 * @since 10.0
 */
AbstractInvocationHandler (/android/guava/src/com/google/common/reflect/AbstractInvocationHandler.java)/**
 * Abstract implementation of {@link InvocationHandler} that handles {@link Object#equals}, {@link
 * Object#hashCode} and {@link Object#toString}. For example:
 *
 * <pre>
 * class Unsupported extends AbstractInvocationHandler {
 *   protected Object handleInvocation(Object proxy, Method method, Object[] args) {
 *     throw new UnsupportedOperationException();
 *   }
 * }
 *
 * CharSequence unsupported = Reflection.newProxy(CharSequence.class, new Unsupported());
 * </pre>
 *
 * @author Ben Yu
 * @since 12.0
 */
ResourceInfo (/android/guava/src/com/google/common/reflect/ClassPath.java)/**
   * Represents a class path resource that can be either a class file or any other resource file
   * loadable from the class path.
   *
   * @since 14.0
   */
ClassInfo (/android/guava/src/com/google/common/reflect/ClassPath.java)/**
   * Represents a class that can be loaded through {@link #load}.
   *
   * @since 14.0
   */
Scanner (/android/guava/src/com/google/common/reflect/ClassPath.java)/**
   * Abstract class that scans through the class path represented by a {@link ClassLoader} and calls
   * {@link #scanDirectory} and {@link #scanJarFile} for directories and jar files on the class path
   * respectively.
   */
ClassPath (/android/guava/src/com/google/common/reflect/ClassPath.java)/**
 * Scans the source of a {@link ClassLoader} and finds all loadable classes and resources.
 *
 * <p><b>Warning:</b> Current limitations:
 *
 * <ul>
 *   <li>Looks only for files and JARs in URLs available from {@link URLClassLoader} instances or
 *       the {@linkplain ClassLoader#getSystemClassLoader() system class loader}.
 *   <li>Only understands {@code file:} URLs.
 * </ul>
 *
 * <p>In the case of directory classloaders, symlinks are supported but cycles are not traversed.
 * This guarantees discovery of each <em>unique</em> loadable resource. However, not all possible
 * aliases for resources on cyclic paths will be listed.
 *
 * @author Ben Yu
 * @since 14.0
 */
Element (/android/guava/src/com/google/common/reflect/Element.java)/**
 * Represents either a {@link Field}, a {@link Method} or a {@link Constructor}. Provides
 * convenience methods such as {@link #isPublic} and {@link #isPackagePrivate}.
 *
 * @author Ben Yu
 */
Builder (/android/guava/src/com/google/common/reflect/ImmutableTypeToInstanceMap.java)/**
   * A builder for creating immutable type-to-instance maps. Example:
   *
   * <pre>{@code
   * static final ImmutableTypeToInstanceMap<Handler<?>> HANDLERS =
   *     ImmutableTypeToInstanceMap.<Handler<?>>builder()
   *         .put(new TypeToken<Handler<Foo>>() {}, new FooHandler())
   *         .put(new TypeToken<Handler<Bar>>() {}, new SubBarHandler())
   *         .build();
   * }</pre>
   *
   * <p>After invoking {@link #build()} it is still possible to add more entries and build again.
   * Thus each map generated by this builder will be a superset of any map generated before it.
   *
   * @since 13.0
   */
ImmutableTypeToInstanceMap (/android/guava/src/com/google/common/reflect/ImmutableTypeToInstanceMap.java)/**
 * A type-to-instance map backed by an {@link ImmutableMap}. See also {@link
 * MutableTypeToInstanceMap}.
 *
 * @author Ben Yu
 * @since 13.0
 */
Invokable (/android/guava/src/com/google/common/reflect/Invokable.java)/**
 * Wrapper around either a {@link Method} or a {@link Constructor}. Convenience API is provided to
 * make common reflective operation easier to deal with, such as {@link #isPublic}, {@link
 * #getParameters} etc.
 *
 * <p>In addition to convenience methods, {@link TypeToken#method} and {@link TypeToken#constructor}
 * will resolve the type parameters of the method or constructor in the context of the owner type,
 * which may be a subtype of the declaring class. For example:
 *
 * <pre>{@code
 * Method getMethod = List.class.getMethod("get", int.class);
 * Invokable<List<String>, ?> invokable = new TypeToken<List<String>>() {}.method(getMethod);
 * assertEquals(TypeToken.of(String.class), invokable.getReturnType()); // Not Object.class!
 * assertEquals(new TypeToken<List<String>>() {}, invokable.getOwnerType());
 * }</pre>
 *
 * @param <T> the type that owns this method or constructor.
 * @param <R> the return type of (or supertype thereof) the method or the declaring type of the
 *     constructor.
 * @author Ben Yu
 * @since 14.0
 */
MutableTypeToInstanceMap (/android/guava/src/com/google/common/reflect/MutableTypeToInstanceMap.java)/**
 * A mutable type-to-instance map. See also {@link ImmutableTypeToInstanceMap}.
 *
 * @author Ben Yu
 * @since 13.0
 */
Parameter (/android/guava/src/com/google/common/reflect/Parameter.java)/**
 * Represents a method or constructor parameter.
 *
 * @author Ben Yu
 * @since 14.0
 */
Reflection (/android/guava/src/com/google/common/reflect/Reflection.java)/**
 * Static utilities relating to Java reflection.
 *
 * @since 12.0
 */
TypeCapture (/android/guava/src/com/google/common/reflect/TypeCapture.java)/**
 * Captures the actual type of {@code T}.
 *
 * @author Ben Yu
 */
TypeParameter (/android/guava/src/com/google/common/reflect/TypeParameter.java)/**
 * Captures a free type variable that can be used in {@link TypeToken#where}. For example:
 *
 * <pre>{@code
 * static <T> TypeToken<List<T>> listOf(Class<T> elementType) {
 *   return new TypeToken<List<T>>() {}
 *       .where(new TypeParameter<T>() {}, elementType);
 * }
 * }</pre>
 *
 * @author Ben Yu
 * @since 12.0
 */
TypeTable (/android/guava/src/com/google/common/reflect/TypeResolver.java)/** A TypeTable maintains mapping from {@link TypeVariable} to types. */
TypeVariableKey (/android/guava/src/com/google/common/reflect/TypeResolver.java)/**
   * Wraps around {@code TypeVariable<?>} to ensure that any two type variables are equal as long as
   * they are declared by the same {@link java.lang.reflect.GenericDeclaration} and have the same
   * name, even if their bounds differ.
   *
   * <p>While resolving a type variable from a {@code var -> type} map, we don't care whether the
   * type variable's bound has been partially resolved. As long as the type variable "identity"
   * matches.
   *
   * <p>On the other hand, if for example we are resolving {@code List<A extends B>} to {@code
   * List<A extends String>}, we need to compare that {@code <A extends B>} is unequal to {@code <A
   * extends String>} in order to decide to use the transformed type instead of the original type.
   */
TypeResolver (/android/guava/src/com/google/common/reflect/TypeResolver.java)/**
 * An object of this class encapsulates type mappings from type variables. Mappings are established
 * with {@link #where} and types are resolved using {@link #resolveType}.
 *
 * <p>Note that usually type mappings are already implied by the static type hierarchy (for example,
 * the {@code E} type variable declared by class {@code List} naturally maps to {@code String} in
 * the context of {@code class MyStringList implements List<String>}. In such case, prefer to use
 * {@link TypeToken#resolveType} since it's simpler and more type safe. This class should only be
 * used when the type mapping isn't implied by the static type hierarchy, but provided through other
 * means such as an annotation or external configuration file.
 *
 * @author Ben Yu
 * @since 15.0
 */
TypeVariableInvocationHandler (/android/guava/src/com/google/common/reflect/Types.java)/**
   * Invocation handler to work around a compatibility problem between Java 7 and Java 8.
   *
   * <p>Java 8 introduced a new method {@code getAnnotatedBounds()} in the {@link TypeVariable}
   * interface, whose return type {@code AnnotatedType[]} is also new in Java 8. That means that we
   * cannot implement that interface in source code in a way that will compile on both Java 7 and
   * Java 8. If we include the {@code getAnnotatedBounds()} method then its return type means it
   * won't compile on Java 7, while if we don't include the method then the compiler will complain
   * that an abstract method is unimplemented. So instead we use a dynamic proxy to get an
   * implementation. If the method being called on the {@code TypeVariable} instance has the same
   * name as one of the public methods of {@link TypeVariableImpl}, the proxy calls the same method
   * on its instance of {@code TypeVariableImpl}. Otherwise it throws {@link
   * UnsupportedOperationException}; this should only apply to {@code getAnnotatedBounds()}. This
   * does mean that users on Java 8 who obtain an instance of {@code TypeVariable} from {@link
   * TypeResolver#resolveType} will not be able to call {@code getAnnotatedBounds()} on it, but that
   * should hopefully be rare.
   *
   * <p>This workaround should be removed at a distant future time when we no longer support Java
   * versions earlier than 8.
   */
NativeTypeVariableEquals (/android/guava/src/com/google/common/reflect/Types.java)/**
   * Per <a href="https://code.google.com/p/guava-libraries/issues/detail?id=1635">issue 1635</a>,
   * In JDK 1.7.0_51-b13, {@link TypeVariableImpl#equals(Object)} is changed to no longer be equal
   * to custom TypeVariable implementations. As a result, we need to make sure our TypeVariable
   * implementation respects symmetry. Moreover, we don't want to reconstruct a native type variable
   * {@code <A>} using our implementation unless some of its bounds have changed in resolution. This
   * avoids creating unequal TypeVariable implementation unnecessarily. When the bounds do change,
   * however, it's fine for the synthetic TypeVariable to be unequal to any native TypeVariable
   * anyway.
   */
Types (/android/guava/src/com/google/common/reflect/Types.java)/**
 * Utilities for working with {@link Type}.
 *
 * @author Ben Yu
 */
TypeToInstanceMap (/android/guava/src/com/google/common/reflect/TypeToInstanceMap.java)/**
 * A map, each entry of which maps a {@link TypeToken} to an instance of that type. In addition to
 * implementing {@code Map}, the additional type-safe operations {@link #putInstance} and {@link
 * #getInstance} are available.
 *
 * <p>Generally, implementations don't support {@link #put} and {@link #putAll} because there is no
 * way to check an object at runtime to be an instance of a {@link TypeToken}. Instead, caller
 * should use the type safe {@link #putInstance}.
 *
 * <p>Also, if caller suppresses unchecked warnings and passes in an {@code Iterable<String>} for
 * type {@code Iterable<Integer>}, the map won't be able to detect and throw type error.
 *
 * <p>Like any other {@code Map<Class, Object>}, this map may contain entries for primitive types,
 * and a primitive type and its corresponding wrapper type may map to different values.
 *
 * @param <B> the common supertype that all entries must share; often this is simply {@link Object}
 * @author Ben Yu
 * @since 13.0
 */
TypeSet (/android/guava/src/com/google/common/reflect/TypeToken.java)/**
   * The set of interfaces and classes that {@code T} is or is a subtype of. {@link Object} is not
   * included in the set if this type is an interface.
   *
   * @since 13.0
   */
TypeCollector (/android/guava/src/com/google/common/reflect/TypeToken.java)/**
   * Collects parent types from a sub type.
   *
   * @param <K> The type "kind". Either a TypeToken, or Class.
   */
TypeToken (/android/guava/src/com/google/common/reflect/TypeToken.java)/**
 * A {@link Type} with generics.
 *
 * <p>Operations that are otherwise only available in {@link Class} are implemented to support
 * {@code Type}, for example {@link #isSubtypeOf}, {@link #isArray} and {@link #getComponentType}.
 * It also provides additional utilities such as {@link #getTypes}, {@link #resolveType}, etc.
 *
 * <p>There are three ways to get a {@code TypeToken} instance:
 *
 * <ul>
 *   <li>Wrap a {@code Type} obtained via reflection. For example: {@code
 *       TypeToken.of(method.getGenericReturnType())}.
 *   <li>Capture a generic type with a (usually anonymous) subclass. For example:
 *       <pre>{@code
 * new TypeToken<List<String>>() {}
 * }</pre>
 *       <p>Note that it's critical that the actual type argument is carried by a subclass. The
 *       following code is wrong because it only captures the {@code <T>} type variable of the
 *       {@code listType()} method signature; while {@code <String>} is lost in erasure:
 *       <pre>{@code
 * class Util {
 *   static <T> TypeToken<List<T>> listType() {
 *     return new TypeToken<List<T>>() {};
 *   }
 * }
 *
 * TypeToken<List<String>> stringListType = Util.<String>listType();
 * }</pre>
 *   <li>Capture a generic type with a (usually anonymous) subclass and resolve it against a context
 *       class that knows what the type parameters are. For example:
 *       <pre>{@code
 * abstract class IKnowMyType<T> {
 *   TypeToken<T> type = new TypeToken<T>(getClass()) {};
 * }
 * new IKnowMyType<String>() {}.type => String
 * }</pre>
 * </ul>
 *
 * <p>{@code TypeToken} is serializable when no type variable is contained in the type.
 *
 * <p>Note to Guice users: {@code} TypeToken is similar to Guice's {@code TypeLiteral} class except
 * that it is serializable and offers numerous additional utility methods.
 *
 * @author Bob Lee
 * @author Sven Mawson
 * @author Ben Yu
 * @since 12.0
 */
TypeVisitor (/android/guava/src/com/google/common/reflect/TypeVisitor.java)/**
 * Based on what a {@link Type} is, dispatch it to the corresponding {@code visit*} method. By
 * default, no recursion is done for type arguments or type bounds. But subclasses can opt to do
 * recursion by calling {@link #visit} for any {@code Type} while visitation is in progress. For
 * example, this can be used to reject wildcards or type variables contained in a type as in:
 *
 * <pre>{@code
 * new TypeVisitor() {
 *   protected void visitParameterizedType(ParameterizedType t) {
 *     visit(t.getOwnerType());
 *     visit(t.getActualTypeArguments());
 *   }
 *   protected void visitGenericArrayType(GenericArrayType t) {
 *     visit(t.getGenericComponentType());
 *   }
 *   protected void visitTypeVariable(TypeVariable<?> t) {
 *     throw new IllegalArgumentException("Cannot contain type variable.");
 *   }
 *   protected void visitWildcardType(WildcardType t) {
 *     throw new IllegalArgumentException("Cannot contain wildcard type.");
 *   }
 * }.visit(type);
 * }</pre>
 *
 * <p>One {@code Type} is visited at most once. The second time the same type is visited, it's
 * ignored by {@link #visit}. This avoids infinite recursion caused by recursive type bounds.
 *
 * <p>This class is <em>not</em> thread safe.
 *
 * @author Ben Yu
 */
AsyncCatchingFuture (/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java)/**
   * An {@link AbstractCatchingFuture} that delegates to an {@link AsyncFunction} and {@link
   * #setFuture(ListenableFuture)}.
   */
CatchingFuture (/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java)/**
   * An {@link AbstractCatchingFuture} that delegates to a {@link Function} and {@link
   * #set(Object)}.
   */
AbstractCatchingFuture (/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java)/** Implementations of {@code Futures.catching*}. */
AbstractExecutionThreadService (/android/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java)/**
 * Base class for services that can implement {@link #startUp}, {@link #run} and {@link #shutDown}
 * methods. This class uses a single thread to execute the service; consider {@link AbstractService}
 * if you would like to manage any threading manually.
 *
 * @author Jesse Wilson
 * @since 1.0
 */
Trusted (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation
   * of this interface must also be an AbstractFuture and must not override or expose for overriding
   * any of the public methods of ListenableFuture.
   */
TrustedFuture (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
   * A less abstract subclass of AbstractFuture. This can be used to optimize setFuture by ensuring
   * that {@link #get} calls exactly the implementation of {@link AbstractFuture#get}.
   */
Waiter (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** Waiter links form a Treiber stack, in the {@link #waiters} field. */
Listener (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** Listeners also form a stack through the {@link #listeners} field. */
Failure (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** A special value to represent failure, when {@link #setException} is called successfully. */
Cancellation (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** A special value to represent cancellation and the 'wasInterrupted' bit. */
SetFuture (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** A special value that encodes the 'setFuture' state. */
UnsafeAtomicHelper (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
   * {@link AtomicHelper} based on {@link sun.misc.Unsafe}.
   *
   * <p>Static initialization of this class will fail if the {@link sun.misc.Unsafe} object cannot
   * be accessed.
   */
SafeAtomicHelper (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** {@link AtomicHelper} based on {@link AtomicReferenceFieldUpdater}. */
SynchronizedHelper (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
   * {@link AtomicHelper} based on {@code synchronized} and volatile writes.
   *
   * <p>This is an implementation of last resort for when certain basic VM features are broken (like
   * AtomicReferenceFieldUpdater).
   */
AbstractFuture (/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
 * An abstract implementation of {@link ListenableFuture}, intended for advanced users only. More
 * common ways to create a {@code ListenableFuture} include instantiating a {@link SettableFuture},
 * submitting a task to a {@link ListeningExecutorService}, and deriving a {@code Future} from an
 * existing one, typically using methods like {@link Futures#transform(ListenableFuture,
 * com.google.common.base.Function, java.util.concurrent.Executor) Futures.transform} and {@link
 * Futures#catching(ListenableFuture, Class, com.google.common.base.Function,
 * java.util.concurrent.Executor) Futures.catching}.
 *
 * <p>This class implements all methods in {@code ListenableFuture}. Subclasses should provide a way
 * to set the result of the computation through the protected methods {@link #set(Object)}, {@link
 * #setFuture(ListenableFuture)} and {@link #setException(Throwable)}. Subclasses may also override
 * {@link #afterDone()}, which will be invoked automatically when the future completes. Subclasses
 * should rarely override other methods.
 *
 * @author Sven Mawson
 * @author Luke Sandberg
 * @since 1.0
 */
AbstractIdleService (/android/guava/src/com/google/common/util/concurrent/AbstractIdleService.java)/**
 * Base class for services that do not need a thread while "running" but may need one during startup
 * and shutdown. Subclasses can implement {@link #startUp} and {@link #shutDown} methods, each which
 * run in a executor which by default uses a separate thread for each method.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
AbstractListeningExecutorService (/android/guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java)/**
 * Abstract {@link ListeningExecutorService} implementation that creates {@link ListenableFuture}
 * instances for each {@link Runnable} and {@link Callable} submitted to it. These tasks are run
 * with the abstract {@link #execute execute(Runnable)} method.
 *
 * <p>In addition to {@link #execute}, subclasses must implement all methods related to shutdown and
 * termination.
 *
 * @author Chris Povirk
 * @since 14.0
 */
Scheduler (/android/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/**
   * A scheduler defines the policy for how the {@link AbstractScheduledService} should run its
   * task.
   *
   * <p>Consider using the {@link #newFixedDelaySchedule} and {@link #newFixedRateSchedule} factory
   * methods, these provide {@link Scheduler} instances for the common use case of running the
   * service with a fixed schedule. If more flexibility is needed then consider subclassing {@link
   * CustomScheduler}.
   *
   * @author Luke Sandberg
   * @since 11.0
   */
ReschedulableCallable (/android/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/** A callable class that can reschedule itself using a {@link CustomScheduler}. */
Schedule (/android/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/**
     * A value object that represents an absolute delay until a task should be invoked.
     *
     * @author Luke Sandberg
     * @since 11.0
     */
CustomScheduler (/android/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/**
   * A {@link Scheduler} that provides a convenient way for the {@link AbstractScheduledService} to
   * use a dynamically changing schedule. After every execution of the task, assuming it hasn't been
   * cancelled, the {@link #getNextSchedule} method will be called.
   *
   * @author Luke Sandberg
   * @since 11.0
   */
AbstractScheduledService (/android/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/**
 * Base class for services that can implement {@link #startUp} and {@link #shutDown} but while in
 * the "running" state need to perform a periodic task. Subclasses can implement {@link #startUp},
 * {@link #shutDown} and also a {@link #runOneIteration} method that will be executed periodically.
 *
 * <p>This class uses the {@link ScheduledExecutorService} returned from {@link #executor} to run
 * the {@link #startUp} and {@link #shutDown} methods and also uses that service to schedule the
 * {@link #runOneIteration} that will be executed periodically as specified by its {@link
 * Scheduler}. When this service is asked to stop via {@link #stopAsync} it will cancel the periodic
 * task (but not interrupt it) and wait for it to stop before running the {@link #shutDown} method.
 *
 * <p>Subclasses are guaranteed that the life cycle methods ({@link #runOneIteration}, {@link
 * #startUp} and {@link #shutDown}) will never run concurrently. Notably, if any execution of {@link
 * #runOneIteration} takes longer than its schedule defines, then subsequent executions may start
 * late. Also, all life cycle methods are executed with a lock held, so subclasses can safely modify
 * shared state without additional synchronization necessary for visibility to later executions of
 * the life cycle methods.
 *
 * <h3>Usage Example</h3>
 *
 * <p>Here is a sketch of a service which crawls a website and uses the scheduling capabilities to
 * rate limit itself.
 *
 * <pre>{@code
 * class CrawlingService extends AbstractScheduledService {
 *   private Set<Uri> visited;
 *   private Queue<Uri> toCrawl;
 *   protected void startUp() throws Exception {
 *     toCrawl = readStartingUris();
 *   }
 *
 *   protected void runOneIteration() throws Exception {
 *     Uri uri = toCrawl.remove();
 *     Collection<Uri> newUris = crawl(uri);
 *     visited.add(uri);
 *     for (Uri newUri : newUris) {
 *       if (!visited.contains(newUri)) { toCrawl.add(newUri); }
 *     }
 *   }
 *
 *   protected void shutDown() throws Exception {
 *     saveUris(toCrawl);
 *   }
 *
 *   protected Scheduler scheduler() {
 *     return Scheduler.newFixedRateSchedule(0, 1, TimeUnit.SECONDS);
 *   }
 * }
 * }</pre>
 *
 * <p>This class uses the life cycle methods to read in a list of starting URIs and save the set of
 * outstanding URIs when shutting down. Also, it takes advantage of the scheduling functionality to
 * rate limit the number of queries we perform.
 *
 * @author Luke Sandberg
 * @since 11.0
 */
AbstractService (/android/guava/src/com/google/common/util/concurrent/AbstractService.java)/**
 * Base class for implementing services that can handle {@link #doStart} and {@link #doStop}
 * requests, responding to them with {@link #notifyStarted()} and {@link #notifyStopped()}
 * callbacks. Its subclasses must manage threads manually; consider {@link
 * AbstractExecutionThreadService} if you need only a single execution thread.
 *
 * @author Jesse Wilson
 * @author Luke Sandberg
 * @since 1.0
 */
AsyncTransformFuture (/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java)/**
   * An {@link AbstractTransformFuture} that delegates to an {@link AsyncFunction} and {@link
   * #setFuture(ListenableFuture)}.
   */
TransformFuture (/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java)/**
   * An {@link AbstractTransformFuture} that delegates to a {@link Function} and {@link
   * #set(Object)}.
   */
AbstractTransformFuture (/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java)/** Implementations of {@code Futures.transform*}. */
AggregateFuture (/android/guava/src/com/google/common/util/concurrent/AggregateFuture.java)/**
 * A future whose value is derived from a collection of input futures.
 *
 * @param <InputT> the type of the individual inputs
 * @param <OutputT> the type of the output (i.e. this) future
 */
AggregateFutureState (/android/guava/src/com/google/common/util/concurrent/AggregateFutureState.java)/**
 * A helper which does some thread-safe operations for aggregate futures, which must be implemented
 * differently in GWT. Namely:
 *
 * <ul>
 *   <li>Lazily initializes a set of seen exceptions
 *   <li>Decrements a counter atomically
 * </ul>
 */
AsyncCallable (/android/guava/src/com/google/common/util/concurrent/AsyncCallable.java)/**
 * Computes a value, possibly asynchronously. For an example usage and more information, see {@link
 * Futures.FutureCombiner#callAsync(AsyncCallable, java.util.concurrent.Executor)}.
 *
 * <p>Much like {@link java.util.concurrent.Callable}, but returning a {@link ListenableFuture}
 * result.
 *
 * @since 20.0
 */
AsyncFunction (/android/guava/src/com/google/common/util/concurrent/AsyncFunction.java)/**
 * Transforms a value, possibly asynchronously. For an example usage and more information, see
 * {@link Futures#transformAsync(ListenableFuture, AsyncFunction, Executor)}.
 *
 * @author Chris Povirk
 * @since 11.0
 */
AtomicDouble (/android/guava/src/com/google/common/util/concurrent/AtomicDouble.java)/**
 * A {@code double} value that may be updated atomically. See the {@link
 * java.util.concurrent.atomic} package specification for description of the properties of atomic
 * variables. An {@code AtomicDouble} is used in applications such as atomic accumulation, and
 * cannot be used as a replacement for a {@link Double}. However, this class does extend {@code
 * Number} to allow uniform access by tools and utilities that deal with numerically-based classes.
 *
 * <p><a name="bitEquals"></a>This class compares primitive {@code double} values in methods such as
 * {@link #compareAndSet} by comparing their bitwise representation using {@link
 * Double#doubleToRawLongBits}, which differs from both the primitive double {@code ==} operator and
 * from {@link Double#equals}, as if implemented by:
 *
 * <pre>{@code
 * static boolean bitEquals(double x, double y) {
 *   long xBits = Double.doubleToRawLongBits(x);
 *   long yBits = Double.doubleToRawLongBits(y);
 *   return xBits == yBits;
 * }
 * }</pre>
 *
 * <p>It is possible to write a more scalable updater, at the cost of giving up strict atomicity.
 * See for example <a
 * href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166edocs/jsr166e/DoubleAdder.html">
 * DoubleAdder</a> and <a
 * href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166edocs/jsr166e/DoubleMaxUpdater.html">
 * DoubleMaxUpdater</a>.
 *
 * @author Doug Lea
 * @author Martin Buchholz
 * @since 11.0
 */
AtomicDoubleArray (/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java)/**
 * A {@code double} array in which elements may be updated atomically. See the {@link
 * java.util.concurrent.atomic} package specification for description of the properties of atomic
 * variables.
 *
 * <p><a name="bitEquals"></a>This class compares primitive {@code double} values in methods such as
 * {@link #compareAndSet} by comparing their bitwise representation using {@link
 * Double#doubleToRawLongBits}, which differs from both the primitive double {@code ==} operator and
 * from {@link Double#equals}, as if implemented by:
 *
 * <pre>{@code
 * static boolean bitEquals(double x, double y) {
 *   long xBits = Double.doubleToRawLongBits(x);
 *   long yBits = Double.doubleToRawLongBits(y);
 *   return xBits == yBits;
 * }
 * }</pre>
 *
 * @author Doug Lea
 * @author Martin Buchholz
 * @since 11.0
 */
AtomicLongMap (/android/guava/src/com/google/common/util/concurrent/AtomicLongMap.java)/**
 * A map containing {@code long} values that can be atomically updated. While writes to a
 * traditional {@code Map} rely on {@code put(K, V)}, the typical mechanism for writing to this map
 * is {@code addAndGet(K, long)}, which adds a {@code long} to the value currently associated with
 * {@code K}. If a key has not yet been associated with a value, its implicit value is zero.
 *
 * <p>Most methods in this class treat absent values and zero values identically, as individually
 * documented. Exceptions to this are {@link #containsKey}, {@link #size}, {@link #isEmpty}, {@link
 * #asMap}, and {@link #toString}.
 *
 * <p>Instances of this class may be used by multiple threads concurrently. All operations are
 * atomic unless otherwise noted.
 *
 * <p><b>Note:</b> If your values are always positive and less than 2^31, you may wish to use a
 * {@link com.google.common.collect.Multiset} such as {@link
 * com.google.common.collect.ConcurrentHashMultiset} instead.
 *
 * <p><b>Warning:</b> Unlike {@code Multiset}, entries whose values are zero are not automatically
 * removed from the map. Instead they must be removed manually with {@link #removeAllZeros}.
 *
 * @author Charles Fry
 * @since 11.0
 */
Atomics (/android/guava/src/com/google/common/util/concurrent/Atomics.java)/**
 * Static utility methods pertaining to classes in the {@code java.util.concurrent.atomic} package.
 *
 * @author Kurt Alfred Kluever
 * @since 10.0
 */
Callables (/android/guava/src/com/google/common/util/concurrent/Callables.java)/**
 * Static utility methods pertaining to the {@link Callable} interface.
 *
 * @author Isaac Shum
 * @since 1.0
 */
ListFuture (/android/guava/src/com/google/common/util/concurrent/CollectionFuture.java)/** Used for {@link Futures#allAsList} and {@link Futures#successfulAsList}. */
CollectionFuture (/android/guava/src/com/google/common/util/concurrent/CollectionFuture.java)/** Aggregate future that collects (stores) results of each future. */
CombinedFuture (/android/guava/src/com/google/common/util/concurrent/CombinedFuture.java)/** Aggregate future that computes its value by calling a callable. */
Policy (/android/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * Encapsulates the action to be taken when a potential deadlock is encountered. Clients can use
   * one of the predefined {@link Policies} or specify a custom implementation. Implementations must
   * be thread-safe.
   *
   * @since 13.0
   */
WithExplicitOrdering (/android/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * A {@code CycleDetectingLockFactory.WithExplicitOrdering} provides the additional enforcement of
   * an application-specified ordering of lock acquisitions. The application defines the allowed
   * ordering with an {@code Enum} whose values each correspond to a lock type. The order in which
   * the values are declared dictates the allowed order of lock acquisition. In other words, locks
   * corresponding to smaller values of {@link Enum#ordinal()} should only be acquired before locks
   * with larger ordinals. Example:
   *
   * <pre>{@code
   * enum MyLockOrder {
   *   FIRST, SECOND, THIRD;
   * }
   *
   * CycleDetectingLockFactory.WithExplicitOrdering<MyLockOrder> factory =
   *   CycleDetectingLockFactory.newInstanceWithExplicitOrdering(Policies.THROW);
   *
   * Lock lock1 = factory.newReentrantLock(MyLockOrder.FIRST);
   * Lock lock2 = factory.newReentrantLock(MyLockOrder.SECOND);
   * Lock lock3 = factory.newReentrantLock(MyLockOrder.THIRD);
   *
   * lock1.lock();
   * lock3.lock();
   * lock2.lock();  // will throw an IllegalStateException
   * }</pre>
   *
   * <p>As with all locks created by instances of {@code CycleDetectingLockFactory} explicitly
   * ordered locks participate in general cycle detection with all other cycle detecting locks, and
   * a lock's behavior when detecting a cyclic lock acquisition is defined by the {@code Policy} of
   * the factory that created it.
   *
   * <p>Note, however, that although multiple locks can be created for a given Enum value, whether
   * it be through separate factory instances or through multiple calls to the same factory,
   * attempting to acquire multiple locks with the same Enum value (within the same thread) will
   * result in an IllegalStateException regardless of the factory's policy. For example:
   *
   * <pre>{@code
   * CycleDetectingLockFactory.WithExplicitOrdering<MyLockOrder> factory1 =
   *   CycleDetectingLockFactory.newInstanceWithExplicitOrdering(...);
   * CycleDetectingLockFactory.WithExplicitOrdering<MyLockOrder> factory2 =
   *   CycleDetectingLockFactory.newInstanceWithExplicitOrdering(...);
   *
   * Lock lockA = factory1.newReentrantLock(MyLockOrder.FIRST);
   * Lock lockB = factory1.newReentrantLock(MyLockOrder.FIRST);
   * Lock lockC = factory2.newReentrantLock(MyLockOrder.FIRST);
   *
   * lockA.lock();
   *
   * lockB.lock();  // will throw an IllegalStateException
   * lockC.lock();  // will throw an IllegalStateException
   *
   * lockA.lock();  // reentrant acquisition is okay
   * }</pre>
   *
   * <p>It is the responsibility of the application to ensure that multiple lock instances with the
   * same rank are never acquired in the same thread.
   *
   * @param <E> The Enum type representing the explicit lock ordering.
   * @since 13.0
   */
ExampleStackTrace (/android/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * A Throwable used to record a stack trace that illustrates an example of a specific lock
   * acquisition ordering. The top of the stack trace is truncated such that it starts with the
   * acquisition of the lock in question, e.g.
   *
   * <pre>
   * com...ExampleStackTrace: LockB -&gt; LockC
   *   at com...CycleDetectingReentrantLock.lock(CycleDetectingLockFactory.java:443)
   *   at ...
   *   at ...
   *   at com...MyClass.someMethodThatAcquiresLockB(MyClass.java:123)
   * </pre>
   */
PotentialDeadlockException (/android/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * Represents a detected cycle in lock acquisition ordering. The exception includes a causal chain
   * of {@code ExampleStackTrace} instances to illustrate the cycle, e.g.
   *
   * <pre>
   * com....PotentialDeadlockException: Potential Deadlock from LockC -&gt; ReadWriteA
   *   at ...
   *   at ...
   * Caused by: com...ExampleStackTrace: LockB -&gt; LockC
   *   at ...
   *   at ...
   * Caused by: com...ExampleStackTrace: ReadWriteA -&gt; LockB
   *   at ...
   *   at ...
   * </pre>
   *
   * <p>Instances are logged for the {@code Policies.WARN}, and thrown for {@code Policies.THROW}.
   *
   * @since 13.0
   */
CycleDetectingLock (/android/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * Internal Lock implementations implement the {@code CycleDetectingLock} interface, allowing the
   * detection logic to treat all locks in the same manner.
   */
LockGraphNode (/android/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * A {@code LockGraphNode} associated with each lock instance keeps track of the directed edges in
   * the lock acquisition graph.
   */
CycleDetectingLockFactory (/android/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
 * The {@code CycleDetectingLockFactory} creates {@link ReentrantLock} instances and {@link
 * ReentrantReadWriteLock} instances that detect potential deadlock by checking for cycles in lock
 * acquisition order.
 *
 * <p>Potential deadlocks detected when calling the {@code lock()}, {@code lockInterruptibly()}, or
 * {@code tryLock()} methods will result in the execution of the {@link Policy} specified when
 * creating the factory. The currently available policies are:
 *
 * <ul>
 *   <li>DISABLED
 *   <li>WARN
 *   <li>THROW
 * </ul>
 *
 * <p>The locks created by a factory instance will detect lock acquisition cycles with locks created
 * by other {@code CycleDetectingLockFactory} instances (except those with {@code Policy.DISABLED}).
 * A lock's behavior when a cycle is detected, however, is defined by the {@code Policy} of the
 * factory that created it. This allows detection of cycles across components while delegating
 * control over lock behavior to individual components.
 *
 * <p>Applications are encouraged to use a {@code CycleDetectingLockFactory} to create any locks for
 * which external/unmanaged code is executed while the lock is held. (See caveats under
 * <strong>Performance</strong>).
 *
 * <p><strong>Cycle Detection</strong>
 *
 * <p>Deadlocks can arise when locks are acquired in an order that forms a cycle. In a simple
 * example involving two locks and two threads, deadlock occurs when one thread acquires Lock A, and
 * then Lock B, while another thread acquires Lock B, and then Lock A:
 *
 * <pre>
 * Thread1: acquire(LockA) --X acquire(LockB)
 * Thread2: acquire(LockB) --X acquire(LockA)
 * </pre>
 *
 * <p>Neither thread will progress because each is waiting for the other. In more complex
 * applications, cycles can arise from interactions among more than 2 locks:
 *
 * <pre>
 * Thread1: acquire(LockA) --X acquire(LockB)
 * Thread2: acquire(LockB) --X acquire(LockC)
 * ...
 * ThreadN: acquire(LockN) --X acquire(LockA)
 * </pre>
 *
 * <p>The implementation detects cycles by constructing a directed graph in which each lock
 * represents a node and each edge represents an acquisition ordering between two locks.
 *
 * <ul>
 *   <li>Each lock adds (and removes) itself to/from a ThreadLocal Set of acquired locks when the
 *       Thread acquires its first hold (and releases its last remaining hold).
 *   <li>Before the lock is acquired, the lock is checked against the current set of acquired
 *       locks---to each of the acquired locks, an edge from the soon-to-be-acquired lock is either
 *       verified or created.
 *   <li>If a new edge needs to be created, the outgoing edges of the acquired locks are traversed
 *       to check for a cycle that reaches the lock to be acquired. If no cycle is detected, a new
 *       "safe" edge is created.
 *   <li>If a cycle is detected, an "unsafe" (cyclic) edge is created to represent a potential
 *       deadlock situation, and the appropriate Policy is executed.
 * </ul>
 *
 * <p>Note that detection of potential deadlock does not necessarily indicate that deadlock will
 * happen, as it is possible that higher level application logic prevents the cyclic lock
 * acquisition from occurring. One example of a false positive is:
 *
 * <pre>
 * LockA -&gt; LockB -&gt; LockC
 * LockA -&gt; LockC -&gt; LockB
 * </pre>
 *
 * <p><strong>ReadWriteLocks</strong>
 *
 * <p>While {@code ReadWriteLock} instances have different properties and can form cycles without
 * potential deadlock, this class treats {@code ReadWriteLock} instances as equivalent to
 * traditional exclusive locks. Although this increases the false positives that the locks detect
 * (i.e. cycles that will not actually result in deadlock), it simplifies the algorithm and
 * implementation considerably. The assumption is that a user of this factory wishes to eliminate
 * any cyclic acquisition ordering.
 *
 * <p><strong>Explicit Lock Acquisition Ordering</strong>
 *
 * <p>The {@link CycleDetectingLockFactory.WithExplicitOrdering} class can be used to enforce an
 * application-specific ordering in addition to performing general cycle detection.
 *
 * <p><strong>Garbage Collection</strong>
 *
 * <p>In order to allow proper garbage collection of unused locks, the edges of the lock graph are
 * weak references.
 *
 * <p><strong>Performance</strong>
 *
 * <p>The extra bookkeeping done by cycle detecting locks comes at some cost to performance.
 * Benchmarks (as of December 2011) show that:
 *
 * <ul>
 *   <li>for an unnested {@code lock()} and {@code unlock()}, a cycle detecting lock takes 38ns as
 *       opposed to the 24ns taken by a plain lock.
 *   <li>for nested locking, the cost increases with the depth of the nesting:
 *       <ul>
 *         <li>2 levels: average of 64ns per lock()/unlock()
 *         <li>3 levels: average of 77ns per lock()/unlock()
 *         <li>4 levels: average of 99ns per lock()/unlock()
 *         <li>5 levels: average of 103ns per lock()/unlock()
 *         <li>10 levels: average of 184ns per lock()/unlock()
 *         <li>20 levels: average of 393ns per lock()/unlock()
 *       </ul>
 * </ul>
 *
 * <p>As such, the CycleDetectingLockFactory may not be suitable for performance-critical
 * applications which involve tightly-looped or deeply-nested locking algorithms.
 *
 * @author Darick Tong
 * @since 13.0
 */
ExecutionError (/android/guava/src/com/google/common/util/concurrent/ExecutionError.java)/**
 * {@link Error} variant of {@link java.util.concurrent.ExecutionException}. As with {@code
 * ExecutionException}, the error's {@linkplain #getCause() cause} comes from a failed task,
 * possibly run in another thread. That cause should itself be an {@code Error}; if not, use {@code
 * ExecutionException} or {@link UncheckedExecutionException}. This allows the client code to
 * continue to distinguish between exceptions and errors, even when they come from other threads.
 *
 * @author Chris Povirk
 * @since 10.0
 */
ExecutionList (/android/guava/src/com/google/common/util/concurrent/ExecutionList.java)/**
 * A support class for {@code ListenableFuture} implementations to manage their listeners. An
 * instance contains a list of listeners, each with an associated {@code Executor}, and guarantees
 * that every {@code Runnable} that is {@linkplain #add added} will be executed after {@link
 * #execute()} is called. Any {@code Runnable} added after the call to {@code execute} is still
 * guaranteed to execute. There is no guarantee, however, that listeners will be executed in the
 * order that they are added.
 *
 * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown
 * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception
 * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and logged.
 *
 * @author Nishant Thakkar
 * @author Sven Mawson
 * @since 1.0
 */
ExecutionSequencer (/android/guava/src/com/google/common/util/concurrent/ExecutionSequencer.java)/**
 * Serializes execution of a set of operations. This class guarantees that a submitted callable will
 * not be called before previously submitted callables (and any {@code Future}s returned from them)
 * have completed.
 *
 * <p>This class implements a superset of the behavior of {@link
 * MoreExecutors#newSequentialExecutor}. If your tasks all run on the same underlying executor and
 * don't need to wait for {@code Future}s returned from {@code AsyncCallable}s, use it instead.
 *
 * @since 26.0
 */
FakeTimeLimiter (/android/guava/src/com/google/common/util/concurrent/FakeTimeLimiter.java)/**
 * A TimeLimiter implementation which actually does not attempt to limit time at all. This may be
 * desirable to use in some unit tests. More importantly, attempting to debug a call which is
 * time-limited would be extremely annoying, so this gives you a time-limiter you can easily swap in
 * for your real time-limiter while you're debugging.
 *
 * @author Kevin Bourrillion
 * @author Jens Nyman
 * @since 1.0
 */
TrustedFuture (/android/guava/src/com/google/common/util/concurrent/FluentFuture.java)/**
   * A less abstract subclass of AbstractFuture. This can be used to optimize setFuture by ensuring
   * that {@link #get} calls exactly the implementation of {@link AbstractFuture#get}.
   */
FluentFuture (/android/guava/src/com/google/common/util/concurrent/FluentFuture.java)/**
 * A {@link ListenableFuture} that supports fluent chains of operations. For example:
 *
 * <pre>{@code
 * ListenableFuture<Boolean> adminIsLoggedIn =
 *     FluentFuture.from(usersDatabase.getAdminUser())
 *         .transform(User::getId, directExecutor())
 *         .transform(ActivityService::isLoggedIn, threadPool)
 *         .catching(RpcException.class, e -> false, directExecutor());
 * }</pre>
 *
 * <h3>Alternatives</h3>
 *
 * <h4>Frameworks</h4>
 *
 * <p>When chaining together a graph of asynchronous operations, you will often find it easier to
 * use a framework. Frameworks automate the process, often adding features like monitoring,
 * debugging, and cancellation. Examples of frameworks include:
 *
 * <ul>
 *   <li><a href="http://dagger.dev/producers.html">Dagger Producers</a>
 * </ul>
 *
 * <h4>{@link java.util.concurrent.CompletableFuture} / {@link java.util.concurrent.CompletionStage}
 * </h4>
 *
 * <p>Users of {@code CompletableFuture} will likely want to continue using {@code
 * CompletableFuture}. {@code FluentFuture} is targeted at people who use {@code ListenableFuture},
 * who can't use Java 8, or who want an API more focused than {@code CompletableFuture}. (If you
 * need to adapt between {@code CompletableFuture} and {@code ListenableFuture}, consider <a
 * href="https://github.com/lukas-krecan/future-converter">Future Converter</a>.)
 *
 * <h3>Extension</h3>
 *
 * If you want a class like {@code FluentFuture} but with extra methods, we recommend declaring your
 * own subclass of {@link ListenableFuture}, complete with a method like {@link #from} to adapt an
 * existing {@code ListenableFuture}, implemented atop a {@link ForwardingListenableFuture} that
 * forwards to that future and adds the desired methods.
 *
 * @since 23.0
 */
ForwardingBlockingDeque (/android/guava/src/com/google/common/util/concurrent/ForwardingBlockingDeque.java)/**
 * A {@link BlockingDeque} which forwards all its method calls to another {@code BlockingDeque}.
 * Subclasses should override one or more methods to modify the behavior of the backing deque as
 * desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingBlockingDeque} forward <b>indiscriminately</b>
 * to the methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change
 * the behaviour of {@link #offer} which can lead to unexpected behaviour. In this case, you should
 * override {@code offer} as well, either providing your own implementation, or delegating to the
 * provided {@code standardOffer} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingBlockingDeque}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Emily Soldal
 * @since 21.0 (since 14.0 as {@link com.google.common.collect.ForwardingBlockingDeque})
 */
ForwardingBlockingQueue (/android/guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java)/**
 * A {@link BlockingQueue} which forwards all its method calls to another {@link BlockingQueue}.
 * Subclasses should override one or more methods to modify the behavior of the backing collection
 * as desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator
 * pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingBlockingQueue}.
 *
 * @author Raimundo Mirisola
 * @param <E> the type of elements held in this collection
 * @since 4.0
 */
ForwardingCondition (/android/guava/src/com/google/common/util/concurrent/ForwardingCondition.java)/** Forwarding wrapper around a {@code Condition}. */
ForwardingExecutorService (/android/guava/src/com/google/common/util/concurrent/ForwardingExecutorService.java)/**
 * An executor service which forwards all its method calls to another executor service. Subclasses
 * should override one or more methods to modify the behavior of the backing executor service as
 * desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * @author Kurt Alfred Kluever
 * @since 10.0
 */
ForwardingFluentFuture (/android/guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java)/**
 * {@link FluentFuture} that forwards all calls to a delegate.
 *
 * <h3>Extension</h3>
 *
 * If you want a class like {@code FluentFuture} but with extra methods, we recommend declaring your
 * own subclass of {@link ListenableFuture}, complete with a method like {@link #from} to adapt an
 * existing {@code ListenableFuture}, implemented atop a {@link ForwardingListenableFuture} that
 * forwards to that future and adds the desired methods.
 */
SimpleForwardingFuture (/android/guava/src/com/google/common/util/concurrent/ForwardingFuture.java)/**
   * A simplified version of {@link ForwardingFuture} where subclasses can pass in an already
   * constructed {@link Future} as the delegate.
   *
   * @since 9.0
   */
ForwardingFuture (/android/guava/src/com/google/common/util/concurrent/ForwardingFuture.java)/**
 * A {@link Future} which forwards all its method calls to another future. Subclasses should
 * override one or more methods to modify the behavior of the backing future as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p>Most subclasses can just use {@link SimpleForwardingFuture}.
 *
 * @author Sven Mawson
 * @since 1.0
 */
SimpleForwardingListenableFuture (/android/guava/src/com/google/common/util/concurrent/ForwardingListenableFuture.java)/**
   * A simplified version of {@link ForwardingListenableFuture} where subclasses can pass in an
   * already constructed {@link ListenableFuture} as the delegate.
   *
   * @since 9.0
   */
ForwardingListenableFuture (/android/guava/src/com/google/common/util/concurrent/ForwardingListenableFuture.java)/**
 * A {@link ListenableFuture} which forwards all its method calls to another future. Subclasses
 * should override one or more methods to modify the behavior of the backing future as desired per
 * the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p>Most subclasses can just use {@link SimpleForwardingListenableFuture}.
 *
 * @author Shardul Deo
 * @since 4.0
 */
ForwardingListeningExecutorService (/android/guava/src/com/google/common/util/concurrent/ForwardingListeningExecutorService.java)/**
 * A listening executor service which forwards all its method calls to another listening executor
 * service. Subclasses should override one or more methods to modify the behavior of the backing
 * executor service as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * @author Isaac Shum
 * @since 10.0
 */
ForwardingLock (/android/guava/src/com/google/common/util/concurrent/ForwardingLock.java)/** Forwarding wrapper around a {@code Lock}. */
FutureCallback (/android/guava/src/com/google/common/util/concurrent/FutureCallback.java)/**
 * A callback for accepting the results of a {@link java.util.concurrent.Future} computation
 * asynchronously.
 *
 * <p>To attach to a {@link ListenableFuture} use {@link Futures#addCallback}.
 *
 * @author Anthony Zana
 * @since 10.0
 */
FutureCombiner (/android/guava/src/com/google/common/util/concurrent/Futures.java)/**
   * A helper to create a new {@code ListenableFuture} whose result is generated from a combination
   * of input futures.
   *
   * <p>See {@link #whenAllComplete} and {@link #whenAllSucceed} for how to instantiate this class.
   *
   * <p>Example:
   *
   * <pre>{@code
   * final ListenableFuture<Instant> loginDateFuture =
   *     loginService.findLastLoginDate(username);
   * final ListenableFuture<List<String>> recentCommandsFuture =
   *     recentCommandsService.findRecentCommands(username);
   * ListenableFuture<UsageHistory> usageFuture =
   *     Futures.whenAllSucceed(loginDateFuture, recentCommandsFuture)
   *         .call(
   *             () ->
   *                 new UsageHistory(
   *                     username,
   *                     Futures.getDone(loginDateFuture),
   *                     Futures.getDone(recentCommandsFuture)),
   *             executor);
   * }</pre>
   *
   * @since 20.0
   */
NonCancellationPropagatingFuture (/android/guava/src/com/google/common/util/concurrent/Futures.java)/** A wrapped future that does not propagate cancellation to its delegate. */
CallbackListener (/android/guava/src/com/google/common/util/concurrent/Futures.java)/** See {@link #addCallback(ListenableFuture, FutureCallback, Executor)} for behavioral notes. */
Futures (/android/guava/src/com/google/common/util/concurrent/Futures.java)/**
 * Static utility methods pertaining to the {@link Future} interface.
 *
 * <p>Many of these methods use the {@link ListenableFuture} API; consult the Guava User Guide
 * article on <a href="https://github.com/google/guava/wiki/ListenableFutureExplained">{@code
 * ListenableFuture}</a>.
 *
 * <p>The main purpose of {@code ListenableFuture} is to help you chain together a graph of
 * asynchronous operations. You can chain them together manually with calls to methods like {@link
 * Futures#transform(ListenableFuture, Function, Executor) Futures.transform}, but you will often
 * find it easier to use a framework. Frameworks automate the process, often adding features like
 * monitoring, debugging, and cancellation. Examples of frameworks include:
 *
 * <ul>
 *   <li><a href="http://dagger.dev/producers.html">Dagger Producers</a>
 * </ul>
 *
 * <p>If you do chain your operations manually, you may want to use {@link FluentFuture}.
 *
 * @author Kevin Bourrillion
 * @author Nishant Thakkar
 * @author Sven Mawson
 * @since 1.0
 */
GetCheckedTypeValidatorHolder (/android/guava/src/com/google/common/util/concurrent/FuturesGetChecked.java)/**
   * Provides a check of whether an exception type is valid for use with {@link
   * FuturesGetChecked#getChecked(Future, Class)}, possibly using caching.
   *
   * <p>Uses reflection to gracefully fall back to when certain implementations aren't available.
   */
FuturesGetChecked (/android/guava/src/com/google/common/util/concurrent/FuturesGetChecked.java)/** Static methods used to implement {@link Futures#getChecked(Future, Class)}. */
GwtFluentFutureCatchingSpecialization (/android/guava/src/com/google/common/util/concurrent/GwtFluentFutureCatchingSpecialization.java)/**
 * Hidden superclass of {@link FluentFuture} that provides us a place to declare special GWT
 * versions of the {@link FluentFuture#catching(Class, com.google.common.base.Function)
 * FluentFuture.catching} family of methods. Those versions have slightly different signatures.
 */
GwtFuturesCatchingSpecialization (/android/guava/src/com/google/common/util/concurrent/GwtFuturesCatchingSpecialization.java)/**
 * Hidden superclass of {@link Futures} that provides us a place to declare special GWT versions of
 * the {@link Futures#catching(ListenableFuture, Class, com.google.common.base.Function,
 * java.util.concurrent.Executor) Futures.catching} family of methods. Those versions have slightly
 * different signatures.
 */
ImmediateFuture (/android/guava/src/com/google/common/util/concurrent/ImmediateFuture.java)/** Implementation of {@link Futures#immediateFuture}. */
ListenableFutureAdapter (/android/guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java)/**
   * An adapter to turn a {@link Future} into a {@link ListenableFuture}. This will wait on the
   * future to finish, and when it completes, run the listeners. This implementation will wait on
   * the source future indefinitely, so if the source future never completes, the adapter will never
   * complete either.
   *
   * <p>If the delegate future is interrupted or throws an unexpected unchecked exception, the
   * listeners will not be invoked.
   */
JdkFutureAdapters (/android/guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java)/**
 * Utilities necessary for working with libraries that supply plain {@link Future} instances. Note
 * that, whenever possible, it is strongly preferred to modify those libraries to return {@code
 * ListenableFuture} directly.
 *
 * @author Sven Mawson
 * @since 10.0 (replacing {@code Futures.makeListenable}, which existed in 1.0)
 */
ListenableFuture (/android/guava/src/com/google/common/util/concurrent/ListenableFuture.java)/**
 * A {@link Future} that accepts completion listeners. Each listener has an associated executor, and
 * it is invoked using this executor once the future's computation is {@linkplain Future#isDone()
 * complete}. If the computation has already completed when the listener is added, the listener will
 * execute immediately.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/ListenableFutureExplained">{@code
 * ListenableFuture}</a>.
 *
 * <p>This class is GWT-compatible.
 *
 * <h3>Purpose</h3>
 *
 * <p>The main purpose of {@code ListenableFuture} is to help you chain together a graph of
 * asynchronous operations. You can chain them together manually with calls to methods like {@link
 * Futures#transform(ListenableFuture, com.google.common.base.Function, Executor)
 * Futures.transform}, but you will often find it easier to use a framework. Frameworks automate the
 * process, often adding features like monitoring, debugging, and cancellation. Examples of
 * frameworks include:
 *
 * <ul>
 *   <li><a href="http://dagger.dev/producers.html">Dagger Producers</a>
 * </ul>
 *
 * <p>The main purpose of {@link #addListener addListener} is to support this chaining. You will
 * rarely use it directly, in part because it does not provide direct access to the {@code Future}
 * result. (If you want such access, you may prefer {@link Futures#addCallback
 * Futures.addCallback}.) Still, direct {@code addListener} calls are occasionally useful:
 *
 * <pre>{@code
 * final String name = ...;
 * inFlight.add(name);
 * ListenableFuture<Result> future = service.query(name);
 * future.addListener(new Runnable() {
 *   public void run() {
 *     processedCount.incrementAndGet();
 *     inFlight.remove(name);
 *     lastProcessed.set(name);
 *     logger.info("Done with {0}", name);
 *   }
 * }, executor);
 * }</pre>
 *
 * <h3>How to get an instance</h3>
 *
 * <p>We encourage you to return {@code ListenableFuture} from your methods so that your users can
 * take advantage of the {@linkplain Futures utilities built atop the class}. The way that you will
 * create {@code ListenableFuture} instances depends on how you currently create {@code Future}
 * instances:
 *
 * <ul>
 *   <li>If you receive them from an {@code java.util.concurrent.ExecutorService}, convert that
 *       service to a {@link ListeningExecutorService}, usually by calling {@link
 *       MoreExecutors#listeningDecorator(java.util.concurrent.ExecutorService)
 *       MoreExecutors.listeningDecorator}.
 *   <li>If you manually call {@link java.util.concurrent.FutureTask#set} or a similar method,
 *       create a {@link SettableFuture} instead. (If your needs are more complex, you may prefer
 *       {@link AbstractFuture}.)
 * </ul>
 *
 * <p><b>Test doubles</b>: If you need a {@code ListenableFuture} for your test, try a {@link
 * SettableFuture} or one of the methods in the {@link Futures#immediateFuture Futures.immediate*}
 * family. <b>Avoid</b> creating a mock or stub {@code Future}. Mock and stub implementations are
 * fragile because they assume that only certain methods will be called and because they often
 * implement subtleties of the API improperly.
 *
 * <p><b>Custom implementation</b>: Avoid implementing {@code ListenableFuture} from scratch. If you
 * can't get by with the standard implementations, prefer to derive a new {@code Future} instance
 * with the methods in {@link Futures} or, if necessary, to extend {@link AbstractFuture}.
 *
 * <p>Occasionally, an API will return a plain {@code Future} and it will be impossible to change
 * the return type. For this case, we provide a more expensive workaround in {@code
 * JdkFutureAdapters}. However, when possible, it is more efficient and reliable to create a {@code
 * ListenableFuture} directly.
 *
 * @author Sven Mawson
 * @author Nishant Thakkar
 * @since 1.0
 */
ListenableFutureTask (/android/guava/src/com/google/common/util/concurrent/ListenableFutureTask.java)/**
 * A {@link FutureTask} that also implements the {@link ListenableFuture} interface. Unlike {@code
 * FutureTask}, {@code ListenableFutureTask} does not provide an overrideable {@link
 * FutureTask#done() done()} method. For similar functionality, call {@link #addListener}.
 *
 * <p>Few users should use this class. It is intended primarily for those who are implementing an
 * {@code ExecutorService}. Most users should call {@link ListeningExecutorService#submit(Callable)
 * ListeningExecutorService.submit} on a service obtained from {@link
 * MoreExecutors#listeningDecorator}.
 *
 * @author Sven Mawson
 * @since 1.0
 */
ListenableScheduledFuture (/android/guava/src/com/google/common/util/concurrent/ListenableScheduledFuture.java)/**
 * Helper interface to implement both {@link ListenableFuture} and {@link ScheduledFuture}.
 *
 * @author Anthony Zana
 * @since 15.0
 */
Event (/android/guava/src/com/google/common/util/concurrent/ListenerCallQueue.java)/** Method reference-compatible listener event. */
PerListenerQueue (/android/guava/src/com/google/common/util/concurrent/ListenerCallQueue.java)/**
   * A special purpose queue/executor that dispatches listener events serially on a configured
   * executor. Each event event can be added and dispatched as separate phases.
   *
   * <p>This class is very similar to {@link SequentialExecutor} with the exception that events can
   * be added without necessarily executing immediately.
   */
ListenerCallQueue (/android/guava/src/com/google/common/util/concurrent/ListenerCallQueue.java)/**
 * A list of listeners for implementing a concurrency friendly observable object.
 *
 * <p>Listeners are registered once via {@link #addListener} and then may be invoked by {@linkplain
 * #enqueue enqueueing} and then {@linkplain #dispatch dispatching} events.
 *
 * <p>The API of this class is designed to make it easy to achieve the following properties
 *
 * <ul>
 *   <li>Multiple events for the same listener are never dispatched concurrently.
 *   <li>Events for the different listeners are dispatched concurrently.
 *   <li>All events for a given listener dispatch on the provided {@link #executor}.
 *   <li>It is easy for the user to ensure that listeners are never invoked while holding locks.
 * </ul>
 *
 * The last point is subtle. Often the observable object will be managing its own internal state
 * using a lock, however it is dangerous to dispatch listeners while holding a lock because they
 * might run on the {@code directExecutor()} or be otherwise re-entrant (call back into your
 * object). So it is important to not call {@link #dispatch} while holding any locks. This is why
 * {@link #enqueue} and {@link #dispatch} are 2 different methods. It is expected that the decision
 * to run a particular event is made during the state change, but the decision to actually invoke
 * the listeners can be delayed slightly so that locks can be dropped. Also, because {@link
 * #dispatch} is expected to be called concurrently, it is idempotent.
 */
ListeningExecutorService (/android/guava/src/com/google/common/util/concurrent/ListeningExecutorService.java)/**
 * An {@link ExecutorService} that returns {@link ListenableFuture} instances. To create an instance
 * from an existing {@link ExecutorService}, call {@link
 * MoreExecutors#listeningDecorator(ExecutorService)}.
 *
 * @author Chris Povirk
 * @since 10.0
 */
ListeningScheduledExecutorService (/android/guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java)/**
 * A {@link ScheduledExecutorService} that returns {@link ListenableFuture} instances from its
 * {@code ExecutorService} methods. To create an instance from an existing {@link
 * ScheduledExecutorService}, call {@link
 * MoreExecutors#listeningDecorator(ScheduledExecutorService)}.
 *
 * @author Chris Povirk
 * @since 10.0
 */
Guard (/android/guava/src/com/google/common/util/concurrent/Monitor.java)/**
   * A boolean condition for which a thread may wait. A {@code Guard} is associated with a single
   * {@code Monitor}. The monitor may check the guard at arbitrary times from any thread occupying
   * the monitor, so code should not be written to rely on how often a guard might or might not be
   * checked.
   *
   * <p>If a {@code Guard} is passed into any method of a {@code Monitor} other than the one it is
   * associated with, an {@link IllegalMonitorStateException} is thrown.
   *
   * @since 10.0
   */
Monitor (/android/guava/src/com/google/common/util/concurrent/Monitor.java)/**
 * A synchronization abstraction supporting waiting on arbitrary boolean conditions.
 *
 * <p>This class is intended as a replacement for {@link ReentrantLock}. Code using {@code Monitor}
 * is less error-prone and more readable than code using {@code ReentrantLock}, without significant
 * performance loss. {@code Monitor} even has the potential for performance gain by optimizing the
 * evaluation and signaling of conditions. Signaling is entirely <a
 * href="http://en.wikipedia.org/wiki/Monitor_(synchronization)#Implicit_signaling">implicit</a>. By
 * eliminating explicit signaling, this class can guarantee that only one thread is awakened when a
 * condition becomes true (no "signaling storms" due to use of {@link
 * java.util.concurrent.locks.Condition#signalAll Condition.signalAll}) and that no signals are lost
 * (no "hangs" due to incorrect use of {@link java.util.concurrent.locks.Condition#signal
 * Condition.signal}).
 *
 * <p>A thread is said to <i>occupy</i> a monitor if it has <i>entered</i> the monitor but not yet
 * <i>left</i>. Only one thread may occupy a given monitor at any moment. A monitor is also
 * reentrant, so a thread may enter a monitor any number of times, and then must leave the same
 * number of times. The <i>enter</i> and <i>leave</i> operations have the same synchronization
 * semantics as the built-in Java language synchronization primitives.
 *
 * <p>A call to any of the <i>enter</i> methods with <b>void</b> return type should always be
 * followed immediately by a <i>try/finally</i> block to ensure that the current thread leaves the
 * monitor cleanly:
 *
 * <pre>{@code
 * monitor.enter();
 * try {
 *   // do things while occupying the monitor
 * } finally {
 *   monitor.leave();
 * }
 * }</pre>
 *
 * <p>A call to any of the <i>enter</i> methods with <b>boolean</b> return type should always appear
 * as the condition of an <i>if</i> statement containing a <i>try/finally</i> block to ensure that
 * the current thread leaves the monitor cleanly:
 *
 * <pre>{@code
 * if (monitor.tryEnter()) {
 *   try {
 *     // do things while occupying the monitor
 *   } finally {
 *     monitor.leave();
 *   }
 * } else {
 *   // do other things since the monitor was not available
 * }
 * }</pre>
 *
 * <h2>Comparison with {@code synchronized} and {@code ReentrantLock}</h2>
 *
 * <p>The following examples show a simple threadsafe holder expressed using {@code synchronized},
 * {@link ReentrantLock}, and {@code Monitor}.
 *
 * <h3>{@code synchronized}</h3>
 *
 * <p>This version is the fewest lines of code, largely because the synchronization mechanism used
 * is built into the language and runtime. But the programmer has to remember to avoid a couple of
 * common bugs: The {@code wait()} must be inside a {@code while} instead of an {@code if}, and
 * {@code notifyAll()} must be used instead of {@code notify()} because there are two different
 * logical conditions being awaited.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *
 *   public synchronized V get() throws InterruptedException {
 *     while (value == null) {
 *       wait();
 *     }
 *     V result = value;
 *     value = null;
 *     notifyAll();
 *     return result;
 *   }
 *
 *   public synchronized void set(V newValue) throws InterruptedException {
 *     while (value != null) {
 *       wait();
 *     }
 *     value = newValue;
 *     notifyAll();
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code ReentrantLock}</h3>
 *
 * <p>This version is much more verbose than the {@code synchronized} version, and still suffers
 * from the need for the programmer to remember to use {@code while} instead of {@code if}. However,
 * one advantage is that we can introduce two separate {@code Condition} objects, which allows us to
 * use {@code signal()} instead of {@code signalAll()}, which may be a performance benefit.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final ReentrantLock lock = new ReentrantLock();
 *   private final Condition valuePresent = lock.newCondition();
 *   private final Condition valueAbsent = lock.newCondition();
 *
 *   public V get() throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value == null) {
 *         valuePresent.await();
 *       }
 *       V result = value;
 *       value = null;
 *       valueAbsent.signal();
 *       return result;
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value != null) {
 *         valueAbsent.await();
 *       }
 *       value = newValue;
 *       valuePresent.signal();
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code Monitor}</h3>
 *
 * <p>This version adds some verbosity around the {@code Guard} objects, but removes that same
 * verbosity, and more, from the {@code get} and {@code set} methods. {@code Monitor} implements the
 * same efficient signaling as we had to hand-code in the {@code ReentrantLock} version above.
 * Finally, the programmer no longer has to hand-code the wait loop, and therefore doesn't have to
 * remember to use {@code while} instead of {@code if}.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final Monitor monitor = new Monitor();
 *   private final Monitor.Guard valuePresent = monitor.newGuard(() -> value != null);
 *   private final Monitor.Guard valueAbsent = monitor.newGuard(() -> value == null);
 *
 *   public V get() throws InterruptedException {
 *     monitor.enterWhen(valuePresent);
 *     try {
 *       V result = value;
 *       value = null;
 *       return result;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     monitor.enterWhen(valueAbsent);
 *     try {
 *       value = newValue;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 * }
 * }</pre>
 *
 * @author Justin T. Sampson
 * @author Martin Buchholz
 * @since 10.0
 */
Application (/android/guava/src/com/google/common/util/concurrent/MoreExecutors.java)/** Represents the current application to register shutdown hooks. */
MoreExecutors (/android/guava/src/com/google/common/util/concurrent/MoreExecutors.java)/**
 * Factory and utility methods for {@link java.util.concurrent.Executor}, {@link ExecutorService},
 * and {@link ThreadFactory}.
 *
 * @author Eric Fellheimer
 * @author Kyle Littlefield
 * @author Justin Mahoney
 * @since 3.0
 */
Partially (/android/guava/src/com/google/common/util/concurrent/Partially.java)/**
 * Outer class that exists solely to let us write {@code Partially.GwtIncompatible} instead of plain
 * {@code GwtIncompatible}. This is more accurate for {@link Futures#catching}, which is available
 * under GWT but with a slightly different signature.
 *
 * <p>We can't use {@code PartiallyGwtIncompatible} because then the GWT compiler wouldn't recognize
 * it as a {@code GwtIncompatible} annotation. And for {@code Futures.catching}, we need the GWT
 * compiler to autostrip the normal server method in order to expose the special, inherited GWT
 * version.
 */
Platform (/android/guava/src/com/google/common/util/concurrent/Platform.java)/** Methods factored out so that they can be emulated differently in GWT. */
Runnables (/android/guava/src/com/google/common/util/concurrent/Runnables.java)/**
 * Static utility methods pertaining to the {@link Runnable} interface.
 *
 * @since 16.0
 */
QueueWorker (/android/guava/src/com/google/common/util/concurrent/SequentialExecutor.java)/** Worker that runs tasks from {@link #queue} until it is empty. */
SequentialExecutor (/android/guava/src/com/google/common/util/concurrent/SequentialExecutor.java)/**
 * Executor ensuring that all Runnables submitted are executed in order, using the provided
 * Executor, and sequentially such that no two will ever be running at the same time.
 *
 * <p>Tasks submitted to {@link #execute(Runnable)} are executed in FIFO order.
 *
 * <p>The execution of tasks is done by one thread as long as there are tasks left in the queue.
 * When a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks
 * continues. See {@link QueueWorker#workOnQueue} for details.
 *
 * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.
 * If an {@code Error} is thrown, the error will propagate and execution will stop until it is
 * restarted by a call to {@link #execute}.
 */
Listener (/android/guava/src/com/google/common/util/concurrent/Service.java)/**
   * A listener for the various state changes that a {@link Service} goes through in its lifecycle.
   *
   * <p>All methods are no-ops by default, implementors should override the ones they care about.
   *
   * @author Luke Sandberg
   * @since 15.0 (present as an interface in 13.0)
   */
Service (/android/guava/src/com/google/common/util/concurrent/Service.java)/**
 * An object with an operational state, plus asynchronous {@link #startAsync()} and {@link
 * #stopAsync()} lifecycle methods to transition between states. Example services include
 * webservers, RPC servers and timers.
 *
 * <p>The normal lifecycle of a service is:
 *
 * <ul>
 *   <li>{@linkplain State#NEW NEW} -&gt;
 *   <li>{@linkplain State#STARTING STARTING} -&gt;
 *   <li>{@linkplain State#RUNNING RUNNING} -&gt;
 *   <li>{@linkplain State#STOPPING STOPPING} -&gt;
 *   <li>{@linkplain State#TERMINATED TERMINATED}
 * </ul>
 *
 * <p>There are deviations from this if there are failures or if {@link Service#stopAsync} is called
 * before the {@link Service} reaches the {@linkplain State#RUNNING RUNNING} state. The set of legal
 * transitions form a <a href="http://en.wikipedia.org/wiki/Directed_acyclic_graph">DAG</a>,
 * therefore every method of the listener will be called at most once. N.B. The {@link State#FAILED}
 * and {@link State#TERMINATED} states are terminal states, once a service enters either of these
 * states it cannot ever leave them.
 *
 * <p>Implementors of this interface are strongly encouraged to extend one of the abstract classes
 * in this package which implement this interface and make the threading and state management
 * easier.
 *
 * @author Jesse Wilson
 * @author Luke Sandberg
 * @since 9.0 (in 1.0 as {@code com.google.common.base.Service})
 */
Listener (/android/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
   * A listener for the aggregate state changes of the services that are under management. Users
   * that need to listen to more fine-grained events (such as when each particular {@linkplain
   * Service service} starts, or terminates), should attach {@linkplain Service.Listener service
   * listeners} to each individual service.
   *
   * @author Luke Sandberg
   * @since 15.0 (present as an interface in 14.0)
   */
ServiceManagerState (/android/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
   * An encapsulation of all the mutable state of the {@link ServiceManager} that needs to be
   * accessed by instances of {@link ServiceListener}.
   */
ServiceListener (/android/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
   * A {@link Service} that wraps another service and times how long it takes for it to start and
   * also calls the {@link ServiceManagerState#transitionService(Service, State, State)}, to record
   * the state transitions.
   */
NoOpService (/android/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
   * A {@link Service} instance that does nothing. This is only useful as a placeholder to ensure
   * that the {@link ServiceManager} functions properly even when it is managing no services.
   *
   * <p>The use of this class is considered an implementation detail of ServiceManager and as such
   * it is excluded from {@link #servicesByState}, {@link #startupTimes}, {@link #toString} and all
   * logging statements.
   */
EmptyServiceManagerWarning (/android/guava/src/com/google/common/util/concurrent/ServiceManager.java)/** This is never thrown but only used for logging. */
ServiceManager (/android/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
 * A manager for monitoring and controlling a set of {@linkplain Service services}. This class
 * provides methods for {@linkplain #startAsync() starting}, {@linkplain #stopAsync() stopping} and
 * {@linkplain #servicesByState inspecting} a collection of {@linkplain Service services}.
 * Additionally, users can monitor state transitions with the {@linkplain Listener listener}
 * mechanism.
 *
 * <p>While it is recommended that service lifecycles be managed via this class, state transitions
 * initiated via other mechanisms do not impact the correctness of its methods. For example, if the
 * services are started by some mechanism besides {@link #startAsync}, the listeners will be invoked
 * when appropriate and {@link #awaitHealthy} will still work as expected.
 *
 * <p>Here is a simple example of how to use a {@code ServiceManager} to start a server.
 *
 * <pre>{@code
 * class Server {
 *   public static void main(String[] args) {
 *     Set<Service> services = ...;
 *     ServiceManager manager = new ServiceManager(services);
 *     manager.addListener(new Listener() {
 *         public void stopped() {}
 *         public void healthy() {
 *           // Services have been initialized and are healthy, start accepting requests...
 *         }
 *         public void failure(Service service) {
 *           // Something failed, at this point we could log it, notify a load balancer, or take
 *           // some other action.  For now we will just exit.
 *           System.exit(1);
 *         }
 *       },
 *       MoreExecutors.directExecutor());
 *
 *     Runtime.getRuntime().addShutdownHook(new Thread() {
 *       public void run() {
 *         // Give the services 5 seconds to stop to ensure that we are responsive to shutdown
 *         // requests.
 *         try {
 *           manager.stopAsync().awaitStopped(5, TimeUnit.SECONDS);
 *         } catch (TimeoutException timeout) {
 *           // stopping timed out
 *         }
 *       }
 *     });
 *     manager.startAsync();  // start all the services asynchronously
 *   }
 * }
 * }</pre>
 *
 * <p>This class uses the ServiceManager's methods to start all of its services, to respond to
 * service failure and to ensure that when the JVM is shutting down all the services are stopped.
 *
 * @author Luke Sandberg
 * @since 14.0
 */
SettableFuture (/android/guava/src/com/google/common/util/concurrent/SettableFuture.java)/**
 * A {@link ListenableFuture} whose result can be set by a {@link #set(Object)}, {@link
 * #setException(Throwable)} or {@link #setFuture(ListenableFuture)} call. It can also, like any
 * other {@code Future}, be {@linkplain #cancel cancelled}.
 *
 * <p>{@code SettableFuture} is the recommended {@code ListenableFuture} implementation when your
 * task cannot be implemented with {@link ListeningExecutorService}, the various {@link Futures}
 * utility methods, or {@link ListenableFutureTask}. Those APIs have less opportunity for developer
 * error. If your needs are more complex than {@code SettableFuture} supports, use {@link
 * AbstractFuture}, which offers an extensible version of the API.
 *
 * @author Sven Mawson
 * @since 9.0 (in 1.0 as {@code ValueFuture})
 */
SimpleTimeLimiter (/android/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java)/**
 * A TimeLimiter that runs method calls in the background using an {@link ExecutorService}. If the
 * time limit expires for a given method call, the thread running the call will be interrupted.
 *
 * @author Kevin Bourrillion
 * @author Jens Nyman
 * @since 1.0
 */
SmoothWarmingUp (/android/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java)/**
   * This implements the following function where coldInterval = coldFactor * stableInterval.
   *
   * <pre>
   *          ^ throttling
   *          |
   *    cold  +                  /
   * interval |                 /.
   *          |                / .
   *          |               /  .   ← "warmup period" is the area of the trapezoid between
   *          |              /   .     thresholdPermits and maxPermits
   *          |             /    .
   *          |            /     .
   *          |           /      .
   *   stable +----------/  WARM .
   * interval |          .   UP  .
   *          |          . PERIOD.
   *          |          .       .
   *        0 +----------+-------+--------------→ storedPermits
   *          0 thresholdPermits maxPermits
   * </pre>
   *
   * Before going into the details of this particular function, let's keep in mind the basics:
   *
   * <ol>
   *   <li>The state of the RateLimiter (storedPermits) is a vertical line in this figure.
   *   <li>When the RateLimiter is not used, this goes right (up to maxPermits)
   *   <li>When the RateLimiter is used, this goes left (down to zero), since if we have
   *       storedPermits, we serve from those first
   *   <li>When _unused_, we go right at a constant rate! The rate at which we move to the right is
   *       chosen as maxPermits / warmupPeriod. This ensures that the time it takes to go from 0 to
   *       maxPermits is equal to warmupPeriod.
   *   <li>When _used_, the time it takes, as explained in the introductory class note, is equal to
   *       the integral of our function, between X permits and X-K permits, assuming we want to
   *       spend K saved permits.
   * </ol>
   *
   * <p>In summary, the time it takes to move to the left (spend K permits), is equal to the area of
   * the function of width == K.
   *
   * <p>Assuming we have saturated demand, the time to go from maxPermits to thresholdPermits is
   * equal to warmupPeriod. And the time to go from thresholdPermits to 0 is warmupPeriod/2. (The
   * reason that this is warmupPeriod/2 is to maintain the behavior of the original implementation
   * where coldFactor was hard coded as 3.)
   *
   * <p>It remains to calculate thresholdsPermits and maxPermits.
   *
   * <ul>
   *   <li>The time to go from thresholdPermits to 0 is equal to the integral of the function
   *       between 0 and thresholdPermits. This is thresholdPermits * stableIntervals. By (5) it is
   *       also equal to warmupPeriod/2. Therefore
   *       <blockquote>
   *       thresholdPermits = 0.5 * warmupPeriod / stableInterval
   *       </blockquote>
   *   <li>The time to go from maxPermits to thresholdPermits is equal to the integral of the
   *       function between thresholdPermits and maxPermits. This is the area of the pictured
   *       trapezoid, and it is equal to 0.5 * (stableInterval + coldInterval) * (maxPermits -
   *       thresholdPermits). It is also equal to warmupPeriod, so
   *       <blockquote>
   *       maxPermits = thresholdPermits + 2 * warmupPeriod / (stableInterval + coldInterval)
   *       </blockquote>
   * </ul>
   */
SmoothBursty (/android/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java)/**
   * This implements a "bursty" RateLimiter, where storedPermits are translated to zero throttling.
   * The maximum number of permits that can be saved (when the RateLimiter is unused) is defined in
   * terms of time, in this sense: if a RateLimiter is 2qps, and this time is specified as 10
   * seconds, we can save up to 2 * 10 = 20 permits.
   */
WeakSafeReadWriteLock (/android/guava/src/com/google/common/util/concurrent/Striped.java)/**
   * ReadWriteLock implementation whose read and write locks retain a reference back to this lock.
   * Otherwise, a reference to just the read lock or just the write lock would not suffice to ensure
   * the {@code ReadWriteLock} is retained.
   */
WeakSafeLock (/android/guava/src/com/google/common/util/concurrent/Striped.java)/** Lock object that ensures a strong reference is retained to a specified object. */
WeakSafeCondition (/android/guava/src/com/google/common/util/concurrent/Striped.java)/** Condition object that ensures a strong reference is retained to a specified object. */
CompactStriped (/android/guava/src/com/google/common/util/concurrent/Striped.java)/**
   * Implementation of Striped where 2^k stripes are represented as an array of the same length,
   * eagerly initialized.
   */
SmallLazyStriped (/android/guava/src/com/google/common/util/concurrent/Striped.java)/**
   * Implementation of Striped where up to 2^k stripes can be represented, using an
   * AtomicReferenceArray of size 2^k. To map a user key into a stripe, we take a k-bit slice of the
   * user key's (smeared) hashCode(). The stripes are lazily initialized and are weakly referenced.
   */
LargeLazyStriped (/android/guava/src/com/google/common/util/concurrent/Striped.java)/**
   * Implementation of Striped where up to 2^k stripes can be represented, using a ConcurrentMap
   * where the key domain is [0..2^k). To map a user key into a stripe, we take a k-bit slice of the
   * user key's (smeared) hashCode(). The stripes are lazily initialized and are weakly referenced.
   */
Striped (/android/guava/src/com/google/common/util/concurrent/Striped.java)/**
 * A striped {@code Lock/Semaphore/ReadWriteLock}. This offers the underlying lock striping similar
 * to that of {@code ConcurrentHashMap} in a reusable form, and extends it for semaphores and
 * read-write locks. Conceptually, lock striping is the technique of dividing a lock into many
 * <i>stripes</i>, increasing the granularity of a single lock and allowing independent operations
 * to lock different stripes and proceed concurrently, instead of creating contention for a single
 * lock.
 *
 * <p>The guarantee provided by this class is that equal keys lead to the same lock (or semaphore),
 * i.e. {@code if (key1.equals(key2))} then {@code striped.get(key1) == striped.get(key2)} (assuming
 * {@link Object#hashCode()} is correctly implemented for the keys). Note that if {@code key1} is
 * <strong>not</strong> equal to {@code key2}, it is <strong>not</strong> guaranteed that {@code
 * striped.get(key1) != striped.get(key2)}; the elements might nevertheless be mapped to the same
 * lock. The lower the number of stripes, the higher the probability of this happening.
 *
 * <p>There are three flavors of this class: {@code Striped<Lock>}, {@code Striped<Semaphore>}, and
 * {@code Striped<ReadWriteLock>}. For each type, two implementations are offered: {@linkplain
 * #lock(int) strong} and {@linkplain #lazyWeakLock(int) weak} {@code Striped<Lock>}, {@linkplain
 * #semaphore(int, int) strong} and {@linkplain #lazyWeakSemaphore(int, int) weak} {@code
 * Striped<Semaphore>}, and {@linkplain #readWriteLock(int) strong} and {@linkplain
 * #lazyWeakReadWriteLock(int) weak} {@code Striped<ReadWriteLock>}. <i>Strong</i> means that all
 * stripes (locks/semaphores) are initialized eagerly, and are not reclaimed unless {@code Striped}
 * itself is reclaimable. <i>Weak</i> means that locks/semaphores are created lazily, and they are
 * allowed to be reclaimed if nobody is holding on to them. This is useful, for example, if one
 * wants to create a {@code Striped<Lock>} of many locks, but worries that in most cases only a
 * small portion of these would be in use.
 *
 * <p>Prior to this class, one might be tempted to use {@code Map<K, Lock>}, where {@code K}
 * represents the task. This maximizes concurrency by having each unique key mapped to a unique
 * lock, but also maximizes memory footprint. On the other extreme, one could use a single lock for
 * all tasks, which minimizes memory footprint but also minimizes concurrency. Instead of choosing
 * either of these extremes, {@code Striped} allows the user to trade between required concurrency
 * and memory footprint. For example, if a set of tasks are CPU-bound, one could easily create a
 * very compact {@code Striped<Lock>} of {@code availableProcessors() * 4} stripes, instead of
 * possibly thousands of locks which could be created in a {@code Map<K, Lock>} structure.
 *
 * @author Dimitris Andreou
 * @since 13.0
 */
ThreadFactoryBuilder (/android/guava/src/com/google/common/util/concurrent/ThreadFactoryBuilder.java)/**
 * A ThreadFactory builder, providing any combination of these features:
 *
 * <ul>
 *   <li>whether threads should be marked as {@linkplain Thread#setDaemon daemon} threads
 *   <li>a {@linkplain ThreadFactoryBuilder#setNameFormat naming format}
 *   <li>a {@linkplain Thread#setPriority thread priority}
 *   <li>an {@linkplain Thread#setUncaughtExceptionHandler uncaught exception handler}
 *   <li>a {@linkplain ThreadFactory#newThread backing thread factory}
 * </ul>
 *
 * <p>If no backing thread factory is provided, a default backing thread factory is used as if by
 * calling {@code setThreadFactory(}{@link Executors#defaultThreadFactory()}{@code )}.
 *
 * @author Kurt Alfred Kluever
 * @since 4.0
 */
TimeLimiter (/android/guava/src/com/google/common/util/concurrent/TimeLimiter.java)/**
 * Imposes a time limit on method calls.
 *
 * @author Kevin Bourrillion
 * @author Jens Nyman
 * @since 1.0
 */
Fire (/android/guava/src/com/google/common/util/concurrent/TimeoutFuture.java)/** A runnable that is called when the delegate or the timer completes. */
TimeoutFuture (/android/guava/src/com/google/common/util/concurrent/TimeoutFuture.java)/**
 * Implementation of {@code Futures#withTimeout}.
 *
 * <p>Future that delegates to another but will finish early (via a {@link TimeoutException} wrapped
 * in an {@link ExecutionException}) if the specified duration expires. The delegate future is
 * interrupted and cancelled if it times out.
 */
TrustedListenableFutureTask (/android/guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java)/**
 * A {@link RunnableFuture} that also implements the {@link ListenableFuture} interface.
 *
 * <p>This should be used in preference to {@link ListenableFutureTask} when possible for
 * performance reasons.
 */
UncaughtExceptionHandlers (/android/guava/src/com/google/common/util/concurrent/UncaughtExceptionHandlers.java)/**
 * Factories for {@link UncaughtExceptionHandler} instances.
 *
 * @author Gregory Kick
 * @since 8.0
 */
UncheckedExecutionException (/android/guava/src/com/google/common/util/concurrent/UncheckedExecutionException.java)/**
 * Unchecked variant of {@link java.util.concurrent.ExecutionException}. As with {@code
 * ExecutionException}, the exception's {@linkplain #getCause() cause} comes from a failed task,
 * possibly run in another thread.
 *
 * <p>{@code UncheckedExecutionException} is intended as an alternative to {@code
 * ExecutionException} when the exception thrown by a task is an unchecked exception. However, it
 * may also wrap a checked exception in some cases.
 *
 * <p>When wrapping an {@code Error} from another thread, prefer {@link ExecutionError}. When
 * wrapping a checked exception, prefer {@code ExecutionException}.
 *
 * @author Charles Fry
 * @since 10.0
 */
UncheckedTimeoutException (/android/guava/src/com/google/common/util/concurrent/UncheckedTimeoutException.java)/**
 * Unchecked version of {@link java.util.concurrent.TimeoutException}.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Uninterruptibles (/android/guava/src/com/google/common/util/concurrent/Uninterruptibles.java)/**
 * Utilities for treating interruptible operations as uninterruptible. In all cases, if a thread is
 * interrupted during such a call, the call continues to block until the result is available or the
 * timeout elapses, and only then re-interrupts the thread.
 *
 * @author Anthony Zana
 * @since 10.0
 */
WrappingExecutorService (/android/guava/src/com/google/common/util/concurrent/WrappingExecutorService.java)/**
 * An abstract {@code ExecutorService} that allows subclasses to {@linkplain #wrapTask(Callable)
 * wrap} tasks before they are submitted to the underlying executor.
 *
 * <p>Note that task wrapping may occur even if the task is never executed.
 *
 * <p>For delegation without task-wrapping, see {@link ForwardingExecutorService}.
 *
 * @author Chris Nokleberg
 */
WrappingScheduledExecutorService (/android/guava/src/com/google/common/util/concurrent/WrappingScheduledExecutorService.java)/**
 * An abstract {@code ScheduledExecutorService} that allows subclasses to {@linkplain
 * #wrapTask(Callable) wrap} tasks before they are submitted to the underlying executor.
 *
 * <p>Note that task wrapping may occur even if the task is never executed.
 *
 * @author Luke Sandberg
 */
XmlEscapers (/android/guava/src/com/google/common/xml/XmlEscapers.java)/**
 * {@code Escaper} instances suitable for strings to be included in XML attribute values and
 * elements' text contents. When possible, avoid manual escaping by using templating systems and
 * high-level APIs that provide autoescaping. For example, consider <a
 * href="http://www.xom.nu/">XOM</a> or <a href="http://www.jdom.org/">JDOM</a>.
 *
 * <p><b>Note:</b> Currently the escapers provided by this class do not escape any characters
 * outside the ASCII character range. Unlike HTML escaping the XML escapers will not escape
 * non-ASCII characters to their numeric entity replacements. These XML escapers provide the minimal
 * level of escaping to ensure that the output can be safely included in a Unicode XML document.
 *
 *
 * <p>For details on the behavior of the escapers in this class, see sections <a
 * href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets">2.2</a> and <a
 * href="http://www.w3.org/TR/2008/REC-xml-20081126/#syntax">2.4</a> of the XML specification.
 *
 * @author Alex Matevossian
 * @author David Beaumont
 * @since 15.0
 */
PublicSuffixPatterns (/android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java)/**
 * <b>Do not use this class directly. For access to public-suffix information,
 * use {@link com.google.common.net.InternetDomainName}.</b>
 *
 * A generated static class containing public members which provide domain
 * name patterns used in determining whether a given domain name is an
 * effective top-level domain (public suffix).
 *
 * <p>Because this class is used in GWT, the data members are stored in
 * a space-efficient manner. {@see TrieParser}.
 *
 * @since 16.0
 */
TrieParser (/android/guava/src/com/google/thirdparty/publicsuffix/TrieParser.java)/** Parser for a map of reversed domain names stored as a serialized radix tree. */
AbstractCollectionTester (/android/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java)/**
 * Base class for collection testers.
 *
 * @param <E> the element type of the collection to be tested.
 * @author Kevin Bourrillion
 */
AbstractCollectionTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java)/**
 * Abstract superclass of all test-suite builders for collection interfaces.
 *
 * @author George van den Driessche
 */
AbstractContainerTester (/android/guava-testlib/src/com/google/common/collect/testing/AbstractContainerTester.java)/**
 * Base class for testers of classes (including {@link Collection} and {@link java.util.Map Map})
 * that contain elements.
 *
 * @param <C> the type of the container
 * @param <E> the type of the container's contents
 * @author George van den Driessche
 */
PermittedMetaException (/android/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java)/**
   * Meta-exception thrown by {@link AbstractIteratorTester.MultiExceptionListIterator} instead of
   * throwing any particular exception type.
   */
MultiExceptionListIterator (/android/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java)/**
   * Quasi-implementation of {@link ListIterator} that works from a list of elements and a set of
   * features to support (from the enclosing {@link AbstractIteratorTester} instance). Instead of
   * throwing exceptions like {@link NoSuchElementException} at the appropriate times, it throws
   * {@link PermittedMetaException} instances, which wrap a set of all exceptions that the iterator
   * could throw during the invocation of that method. This is necessary because, e.g., a call to
   * {@code iterator().remove()} of an unmodifiable list could throw either {@link
   * IllegalStateException} or {@link UnsupportedOperationException}. Note that iterator
   * implementations should always throw one of the exceptions in a {@code PermittedExceptions}
   * instance, since {@code PermittedExceptions} is thrown only when a method call is invalid.
   *
   * <p>This class is accessible but not supported in GWT as it references {@link
   * PermittedMetaException}.
   */
AbstractIteratorTester (/android/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java)/**
 * Most of the logic for {@link IteratorTester} and {@link ListIteratorTester}.
 *
 * @param <E> the type of element returned by the iterator
 * @param <I> the type of the iterator ({@link Iterator} or {@link ListIterator})
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
AbstractMapTester (/android/guava-testlib/src/com/google/common/collect/testing/AbstractMapTester.java)/**
 * Base class for map testers.
 *
 * <p>TODO: see how much of this is actually needed once Map testers are written. (It was cloned
 * from AbstractCollectionTester.)
 *
 * @param <K> the key type of the map to be tested.
 * @param <V> the value type of the map to be tested.
 * @author George van den Driessche
 */
AbstractTester (/android/guava-testlib/src/com/google/common/collect/testing/AbstractTester.java)/**
 * This abstract base class for testers allows the framework to inject needed information after
 * JUnit constructs the instances.
 *
 * <p>This class is emulated in GWT.
 *
 * @param <G> the type of the test generator required by this tester. An instance of G should
 *     somehow provide an instance of the class under test, plus any other information required to
 *     parameterize the test.
 * @author George van den Driessche
 */
BaseComparable (/android/guava-testlib/src/com/google/common/collect/testing/BaseComparable.java)/**
 * Simple base class to verify that we handle generics correctly.
 *
 * @author Kevin Bourrillion
 */
CollectionTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/CollectionTestSuiteBuilder.java)/**
 * Concrete instantiation of {@link AbstractCollectionTestSuiteBuilder} for testing collections that
 * do not have a more specific tester like {@link ListTestSuiteBuilder} or {@link
 * SetTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Louis Wasserman
 */
ConcurrentMapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/ConcurrentMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a ConcurrentMap
 * implementation.
 *
 * @author Louis Wasserman
 */
ConcurrentNavigableMapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/ConcurrentNavigableMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a
 * ConcurrentNavigableMap implementation.
 *
 * @author Louis Wasserman
 */
DerivedCollectionGenerators (/android/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java)/**
 * Derived suite generators, split out of the suite builders so that they are available to GWT.
 *
 * @author George van den Driessche
 */
DerivedComparable (/android/guava-testlib/src/com/google/common/collect/testing/DerivedComparable.java)/**
 * Simple derived class to verify that we handle generics correctly.
 *
 * @author Kevin Bourrillion
 */
DerivedGenerator (/android/guava-testlib/src/com/google/common/collect/testing/DerivedGenerator.java)/**
 * A generator that relies on a preexisting generator for most of its work. For example, a derived
 * iterator generator may delegate the work of creating the underlying collection to an inner
 * collection generator.
 *
 * <p>{@code GwtTestSuiteGenerator} expects every {@code DerivedIterator} implementation to provide
 * a one-arg constructor accepting its inner generator as an argument). This requirement enables it
 * to generate source code (since GWT cannot use reflection to generate the suites).
 *
 * @author Chris Povirk
 */
DerivedTestIteratorGenerator (/android/guava-testlib/src/com/google/common/collect/testing/DerivedTestIteratorGenerator.java)/**
 * Adapts a test iterable generator to give a TestIteratorGenerator.
 *
 * @author George van den Driessche
 */
ConflictingRequirementsException (/android/guava-testlib/src/com/google/common/collect/testing/features/ConflictingRequirementsException.java)/**
 * Thrown when requirements on a tester method or class conflict with each other.
 *
 * @author George van den Driessche
 */
Feature (/android/guava-testlib/src/com/google/common/collect/testing/features/Feature.java)/**
 * Base class for enumerating the features of an interface to be tested.
 *
 * @param <T> The interface whose features are to be enumerated.
 * @author George van den Driessche
 */
FeatureUtil (/android/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java)/**
 * Utilities for collecting and validating tester requirements from annotations.
 *
 * @author George van den Driessche
 */
TesterRequirements (/android/guava-testlib/src/com/google/common/collect/testing/features/TesterRequirements.java)/**
 * Encapsulates the constraints that a class under test must satisfy in order for a tester method to
 * be run against that class.
 *
 * @author George van den Driessche
 */
FeatureSpecificTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/FeatureSpecificTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests the object generated
 * by a G, selecting appropriate tests by matching them against specified features.
 *
 * @param <B> The concrete type of this builder (the 'self-type'). All the Builder methods of this
 *     class (such as {@link #named}) return this type, so that Builder methods of more derived
 *     classes can be chained onto them without casting.
 * @param <G> The type of the generator to be passed to testers in the generated test suite. An
 *     instance of G should somehow provide an instance of the class under test, plus any other
 *     information required to parameterize the test.
 * @author George van den Driessche
 */
AbstractBiMapTester (/android/guava-testlib/src/com/google/common/collect/testing/google/AbstractBiMapTester.java)/** Skeleton for a tester of a {@code BiMap}. */
AbstractListMultimapTester (/android/guava-testlib/src/com/google/common/collect/testing/google/AbstractListMultimapTester.java)/**
 * Superclass for all {@code ListMultimap} testers.
 *
 * @author Louis Wasserman
 */
AbstractMultimapTester (/android/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultimapTester.java)/**
 * Superclass for all {@code Multimap} testers.
 *
 * @author Louis Wasserman
 */
AbstractMultisetSetCountTester (/android/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultisetSetCountTester.java)/**
 * Common superclass for {@link MultisetSetCountUnconditionallyTester} and {@link
 * MultisetSetCountConditionallyTester}. It is used by those testers to test calls to the
 * unconditional {@code setCount()} method and calls to the conditional {@code setCount()} method
 * when the expected present count is correct.
 *
 * @author Chris Povirk
 */
AbstractMultisetTester (/android/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultisetTester.java)/**
 * Base class for multiset collection tests.
 *
 * @author Jared Levy
 */
BiMapClearTester (/android/guava-testlib/src/com/google/common/collect/testing/google/BiMapClearTester.java)/**
 * Tester for {@code BiMap.clear}.
 *
 * @author Louis Wasserman
 */
BiMapEntrySetTester (/android/guava-testlib/src/com/google/common/collect/testing/google/BiMapEntrySetTester.java)/** Tester for {@code BiMap.entrySet} and methods on the entries in the set. */
BiMapGenerators (/android/guava-testlib/src/com/google/common/collect/testing/google/BiMapGenerators.java)/**
 * Generators of various {@link com.google.common.collect.BiMap}s and derived collections.
 *
 * @author Jared Levy
 * @author Hayward Chan
 */
BiMapInverseTester (/android/guava-testlib/src/com/google/common/collect/testing/google/BiMapInverseTester.java)/**
 * Tests for the {@code inverse} view of a BiMap.
 *
 * <p>This assumes that {@code bimap.inverse().inverse() == bimap}, which is not technically
 * required but is fulfilled by all current implementations.
 *
 * @author Louis Wasserman
 */
BiMapPutTester (/android/guava-testlib/src/com/google/common/collect/testing/google/BiMapPutTester.java)/** Tester for {@code BiMap.put} and {@code BiMap.forcePut}. */
BiMapRemoveTester (/android/guava-testlib/src/com/google/common/collect/testing/google/BiMapRemoveTester.java)/**
 * Tester for {@code BiMap.remove}.
 *
 * @author Louis Wasserman
 */
BiMapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/google/BiMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code BiMap}
 * implementation.
 *
 * @author Louis Wasserman
 */
DerivedGoogleCollectionGenerators (/android/guava-testlib/src/com/google/common/collect/testing/google/DerivedGoogleCollectionGenerators.java)/**
 * Derived suite generators for Guava collection interfaces, split out of the suite builders so that
 * they are available to GWT.
 *
 * @author Louis Wasserman
 */
GoogleHelpers (/android/guava-testlib/src/com/google/common/collect/testing/google/GoogleHelpers.java)/**
 * Helper methods/assertions for use with {@code com.google.common.collect} types.
 *
 * @author Colin Decker
 */
ListGenerators (/android/guava-testlib/src/com/google/common/collect/testing/google/ListGenerators.java)/**
 * Common generators of different types of lists.
 *
 * @author Hayward Chan
 */
ListMultimapAsMapTester (/android/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapAsMapTester.java)/**
 * Testers for {@link com.google.common.collect.ListMultimap#asMap}.
 *
 * @author Louis Wasserman
 * @param <K> The key type of the tested multimap.
 * @param <V> The value type of the tested multimap.
 */
ListMultimapEqualsTester (/android/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapEqualsTester.java)/**
 * Testers for {@link ListMultimap#equals(Object)}.
 *
 * @author Louis Wasserman
 */
ListMultimapPutAllTester (/android/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapPutAllTester.java)/**
 * Testers for {@link ListMultimap#putAll(Object, Iterable)}.
 *
 * @author Louis Wasserman
 */
ListMultimapPutTester (/android/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapPutTester.java)/**
 * Testers for {@link ListMultimap#put(Object, Object)}.
 *
 * @author Louis Wasserman
 */
ListMultimapRemoveTester (/android/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapRemoveTester.java)/**
 * Testers for {@link ListMultimap#remove(Object, Object)}.
 *
 * @author Louis Wasserman
 */
ListMultimapReplaceValuesTester (/android/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapReplaceValuesTester.java)/**
 * Testers for {@link ListMultimap#replaceValues(Object, Iterable)}.
 *
 * @author Louis Wasserman
 */
ListMultimapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code
 * ListMultimap} implementation.
 *
 * @author Louis Wasserman
 */
MapGenerators (/android/guava-testlib/src/com/google/common/collect/testing/google/MapGenerators.java)/**
 * Generators of different types of map and related collections, such as keys, entries and values.
 *
 * @author Hayward Chan
 */
MultimapAsMapGetTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapAsMapGetTester.java)/**
 * Tests for {@code Multimap.asMap().get(Object)}.
 *
 * @author Louis Wasserman
 */
MultimapAsMapTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapAsMapTester.java)/**
 * Tests for {@link Multimap#asMap}.
 *
 * @author Louis Wasserman
 */
MultimapClearTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapClearTester.java)/**
 * Tests for {@link Multimap#clear()}.
 *
 * @author Louis Wasserman
 */
MultimapContainsEntryTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapContainsEntryTester.java)/**
 * Tester for {@link Multimap#containsEntry}.
 *
 * @author Louis Wasserman
 */
MultimapContainsKeyTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapContainsKeyTester.java)/**
 * Tester for the {@code containsKey} methods of {@code Multimap} and its {@code asMap()} view.
 *
 * @author Louis Wasserman
 */
MultimapContainsValueTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapContainsValueTester.java)/**
 * Tester for {@link Multimap#containsValue}.
 *
 * @author Louis Wasserman
 */
MultimapEntriesTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapEntriesTester.java)/**
 * Tester for {@code Multimap.entries}.
 *
 * @author Louis Wasserman
 */
MultimapEqualsTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapEqualsTester.java)/**
 * Tester for {@code Multimap.equals}.
 *
 * @author Louis Wasserman
 */
MultimapGetTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapGetTester.java)/**
 * Tests for {@link Multimap#get(Object)}.
 *
 * @author Louis Wasserman
 */
MultimapKeySetTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapKeySetTester.java)/**
 * Tester for {@code Multimap.keySet}.
 *
 * @author Louis Wasserman
 */
MultimapKeysTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapKeysTester.java)/**
 * Tester for {@code Multimap.entries}.
 *
 * @author Louis Wasserman
 */
MultimapPutAllMultimapTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapPutAllMultimapTester.java)/**
 * Tester for {@link Multimap#putAll(Multimap)}.
 *
 * @author Louis Wasserman
 */
MultimapPutIterableTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapPutIterableTester.java)/**
 * Tests for {@link Multimap#putAll(Object, Iterable)}.
 *
 * @author Louis Wasserman
 */
MultimapPutTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapPutTester.java)/**
 * Tester for {@link Multimap#put}.
 *
 * @author Louis Wasserman
 */
MultimapRemoveAllTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapRemoveAllTester.java)/**
 * Tests for {@link Multimap#removeAll(Object)}.
 *
 * @author Louis Wasserman
 */
MultimapRemoveEntryTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapRemoveEntryTester.java)/**
 * Tests for {@link Multimap#remove(Object, Object)}.
 *
 * @author Louis Wasserman
 */
MultimapReplaceValuesTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapReplaceValuesTester.java)/**
 * Tests for {@link Multimap#replaceValues(Object, Iterable)}.
 *
 * @author Louis Wasserman
 */
MultimapSizeTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapSizeTester.java)/**
 * Tester for the {@code size} methods of {@code Multimap} and its views.
 *
 * @author Louis Wasserman
 */
MultimapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code Multimap}
 * implementation.
 *
 * @author Louis Wasserman
 */
MultimapToStringTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapToStringTester.java)/**
 * Tester for {@code Multimap.toString()}.
 *
 * @author Louis Wasserman
 */
MultimapValuesTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultimapValuesTester.java)/**
 * Tester for {@code Multimap.values}.
 *
 * @author Louis Wasserman
 */
MultisetAddTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetAddTester.java)/**
 * Tests for {@code Multiset.add}.
 *
 * @author Jared Levy
 */
MultisetContainsTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetContainsTester.java)/**
 * Tests for {@code Multiset.containsAll} not already addressed by {@code CollectionContainsTester}.
 *
 * @author Louis Wasserman
 */
MultisetCountTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetCountTester.java)/**
 * Tests for {@code Multiset#count}.
 *
 * @author Jared Levy
 */
MultisetElementSetTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetElementSetTester.java)/**
 * Tests for {@code Multiset.elementSet()} not covered by the derived {@code SetTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MultisetEntrySetTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetEntrySetTester.java)/**
 * Tests for {@code Multiset.entrySet}.
 *
 * @author Jared Levy
 */
MultisetEqualsTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetEqualsTester.java)/**
 * Tests for {@code Multiset.equals} and {@code Multiset.hashCode}.
 *
 * @author Louis Wasserman
 */
MultisetIteratorTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetIteratorTester.java)/**
 * Tester to make sure the {@code iterator().remove()} implementation of {@code Multiset} works when
 * there are multiple occurrences of elements.
 *
 * @author Louis Wasserman
 */
MultisetNavigationTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetNavigationTester.java)/**
 * Tester for navigation of SortedMultisets.
 *
 * @author Louis Wasserman
 */
MultisetReadsTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetReadsTester.java)/**
 * A generic JUnit test which tests multiset-specific read operations. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.SetTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
MultisetRemoveTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetRemoveTester.java)/**
 * Tests for {@code Multiset#remove}, {@code Multiset.removeAll}, and {@code Multiset.retainAll} not
 * already covered by the corresponding Collection testers.
 *
 * @author Jared Levy
 */
MultisetSerializationTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetSerializationTester.java)/**
 * A generic JUnit test which tests multiset-specific serialization. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MultisetTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MultisetSetCountConditionallyTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetSetCountConditionallyTester.java)/**
 * A generic JUnit test which tests conditional {@code setCount()} operations on a multiset. Can't
 * be invoked directly; please see {@link MultisetTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
MultisetSetCountUnconditionallyTester (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetSetCountUnconditionallyTester.java)/**
 * A generic JUnit test which tests unconditional {@code setCount()} operations on a multiset. Can't
 * be invoked directly; please see {@link MultisetTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
MultisetTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code Multiset}
 * implementation.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
SetGenerators (/android/guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java)/**
 * Generators of different types of sets and derived collections from sets.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @author Hayward Chan
 */
SetMultimapAsMapTester (/android/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapAsMapTester.java)/**
 * Testers for {@link SetMultimap#asMap}.
 *
 * @author Louis Wasserman
 * @param <K> The key type of the tested multimap.
 * @param <V> The value type of the tested multimap.
 */
SetMultimapEqualsTester (/android/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapEqualsTester.java)/**
 * Testers for {@link SetMultimap#equals(Object)}.
 *
 * @author Louis Wasserman
 */
SetMultimapPutAllTester (/android/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapPutAllTester.java)/**
 * Tests for {@link SetMultimap#replaceValues}.
 *
 * @author Louis Wasserman
 */
SetMultimapPutTester (/android/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapPutTester.java)/**
 * Tests for {@link SetMultimap#replaceValues}.
 *
 * @author Louis Wasserman
 */
SetMultimapReplaceValuesTester (/android/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapReplaceValuesTester.java)/**
 * Tests for {@link SetMultimap#replaceValues}.
 *
 * @author Louis Wasserman
 */
SetMultimapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code SetMultimap}
 * implementation.
 *
 * @author Louis Wasserman
 */
SortedMapGenerators (/android/guava-testlib/src/com/google/common/collect/testing/google/SortedMapGenerators.java)/**
 * Generators of sorted maps and derived collections.
 *
 * @author Kevin Bourrillion
 * @author Jesse Wilson
 * @author Jared Levy
 * @author Hayward Chan
 * @author Chris Povirk
 * @author Louis Wasserman
 */
SortedMultisetTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/google/SortedMultisetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code
 * SortedMultiset} implementation.
 *
 * <p><b>Warning:</b> expects that {@code E} is a String.
 *
 * @author Louis Wasserman
 */
SortedSetMultimapAsMapTester (/android/guava-testlib/src/com/google/common/collect/testing/google/SortedSetMultimapAsMapTester.java)/**
 * Testers for {@link SortedSetMultimap#asMap}.
 *
 * @author Louis Wasserman
 * @param <K> The key type of the tested multimap.
 * @param <V> The value type of the tested multimap.
 */
SortedSetMultimapGetTester (/android/guava-testlib/src/com/google/common/collect/testing/google/SortedSetMultimapGetTester.java)/**
 * Tester for {@link SortedSetMultimap#get(Object)}.
 *
 * @author Louis Wasserman
 */
SortedSetMultimapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/google/SortedSetMultimapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code
 * SortedSetMultimap} implementation.
 *
 * @author Louis Wasserman
 */
TestBiMapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestBiMapGenerator.java)/**
 * Creates bimaps, containing sample entries, to be tested.
 *
 * @author Louis Wasserman
 */
TestEnumMultisetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestEnumMultisetGenerator.java)/**
 * An abstract {@code TestMultisetGenerator} for generating multisets containing enum values.
 *
 * @author Jared Levy
 */
TestListMultimapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestListMultimapGenerator.java)/**
 * A generator for {@code ListMultimap} implementations based on test data.
 *
 * @author Louis Wasserman
 */
TestMultimapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestMultimapGenerator.java)/**
 * Creates multimaps, containing sample elements, to be tested.
 *
 * @author Louis Wasserman
 */
TestMultisetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestMultisetGenerator.java)/**
 * Creates multisets, containing sample elements, to be tested.
 *
 * @author Jared Levy
 */
TestSetMultimapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestSetMultimapGenerator.java)/**
 * A generator for {@code SetMultimap} implementations based on test data.
 *
 * @author Louis Wasserman
 */
TestStringBiMapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestStringBiMapGenerator.java)/**
 * Implementation helper for {@link TestBiMapGenerator} for use with bimaps of strings.
 *
 * @author Chris Povirk
 * @author Jared Levy
 * @author George van den Driessche
 * @author Louis Wasserman
 */
TestStringListMultimapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestStringListMultimapGenerator.java)/**
 * A skeleton generator for a {@code ListMultimap} implementation.
 *
 * @author Louis Wasserman
 */
TestStringMultisetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestStringMultisetGenerator.java)/**
 * Create multisets of strings for tests.
 *
 * @author Jared Levy
 */
TestStringSetMultimapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/google/TestStringSetMultimapGenerator.java)/**
 * A skeleton generator for a {@code SetMultimap} implementation.
 *
 * @author Louis Wasserman
 */
UnmodifiableCollectionTests (/android/guava-testlib/src/com/google/common/collect/testing/google/UnmodifiableCollectionTests.java)/**
 * A series of tests that support asserting that collections cannot be modified, either through
 * direct or indirect means.
 *
 * @author Robert Konigsberg
 */
NullsBefore (/android/guava-testlib/src/com/google/common/collect/testing/Helpers.java)/**
   * Compares strings in natural order except that null comes immediately before a given value. This
   * works better than Ordering.natural().nullsFirst() because, if null comes before all other
   * values, it lies outside the submap/submultiset ranges we test, and the variety of tests that
   * exercise null handling fail on those subcollections.
   */
IteratorTester (/android/guava-testlib/src/com/google/common/collect/testing/IteratorTester.java)/**
 * A utility for testing an Iterator implementation by comparing its behavior to that of a "known
 * good" reference implementation. In order to accomplish this, it's important to test a great
 * variety of sequences of the {@link Iterator#next}, {@link Iterator#hasNext} and {@link
 * Iterator#remove} operations. This utility takes the brute-force approach of trying <i>all</i>
 * possible sequences of these operations, up to a given number of steps. So, if the caller
 * specifies to use <i>n</i> steps, a total of <i>3^n</i> tests are actually performed.
 *
 * <p>For instance, if <i>steps</i> is 5, one example sequence that will be tested is:
 *
 * <ol>
 *   <li>remove();
 *   <li>hasNext()
 *   <li>hasNext();
 *   <li>remove();
 *   <li>next();
 * </ol>
 *
 * <p>This particular order of operations may be unrealistic, and testing all 3^5 of them may be
 * thought of as overkill; however, it's difficult to determine which proper subset of this massive
 * set would be sufficient to expose any possible bug. Brute force is simpler.
 *
 * <p>To use this class the concrete subclass must implement the {@link
 * IteratorTester#newTargetIterator()} method. This is because it's impossible to test an Iterator
 * without changing its state, so the tester needs a steady supply of fresh Iterators.
 *
 * <p>If your iterator supports modification through {@code remove()}, you may wish to override the
 * verify() method, which is called <em>after</em> each sequence and is guaranteed to be called
 * using the latest values obtained from {@link IteratorTester#newTargetIterator()}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
ListIteratorTester (/android/guava-testlib/src/com/google/common/collect/testing/ListIteratorTester.java)/**
 * A utility similar to {@link IteratorTester} for testing a {@link ListIterator} against a known
 * good reference implementation. As with {@code IteratorTester}, a concrete subclass must provide
 * target iterators on demand. It also requires three additional constructor parameters: {@code
 * elementsToInsert}, the elements to be passed to {@code set()} and {@code add()} calls; {@code
 * features}, the features supported by the iterator; and {@code expectedElements}, the elements the
 * iterator should return in order.
 *
 * <p>The items in {@code elementsToInsert} will be repeated if {@code steps} is larger than the
 * number of provided elements.
 *
 * @author Chris Povirk
 */
ListTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/ListTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a List
 * implementation.
 *
 * @author George van den Driessche
 */
IncompatibleKeyType (/android/guava-testlib/src/com/google/common/collect/testing/MapInterfaceTest.java)/** A key type that is not assignable to any classes but Object. */
MapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/MapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a Map implementation.
 *
 * @author George van den Driessche
 */
MinimalCollection (/android/guava-testlib/src/com/google/common/collect/testing/MinimalCollection.java)/**
 * A simplistic collection which implements only the bare minimum allowed by the spec, and throws
 * exceptions whenever it can.
 *
 * @author Kevin Bourrillion
 */
MinimalIterable (/android/guava-testlib/src/com/google/common/collect/testing/MinimalIterable.java)/**
 * An implementation of {@code Iterable} which throws an exception on all invocations of the {@link
 * #iterator()} method after the first, and whose iterator is always unmodifiable.
 *
 * <p>The {@code Iterable} specification does not make it absolutely clear what should happen on a
 * second invocation, so implementors have made various choices, including:
 *
 * <ul>
 *   <li>returning the same iterator again
 *   <li>throwing an exception of some kind
 *   <li>or the usual, <i>robust</i> behavior, which all known {@link Collection} implementations
 *       have, of returning a new, independent iterator
 * </ul>
 *
 * <p>Because of this situation, any public method accepting an iterable should invoke the {@code
 * iterator} method only once, and should be tested using this class. Exceptions to this rule should
 * be clearly documented.
 *
 * <p>Note that although your APIs should be liberal in what they accept, your methods which
 * <i>return</i> iterables should make every attempt to return ones of the robust variety.
 *
 * <p>This testing utility is not thread-safe.
 *
 * @author Kevin Bourrillion
 */
MinimalSet (/android/guava-testlib/src/com/google/common/collect/testing/MinimalSet.java)/**
 * A simplistic set which implements the bare minimum so that it can be used in tests without
 * relying on any specific Set implementations. Slow. Explicitly allows null elements so that they
 * can be used in the testers.
 *
 * @author Regina O'Dell
 */
NavigableMapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/NavigableMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a NavigableMap
 * implementation.
 */
NavigableSetTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/NavigableSetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a NavigableSet
 * implementation.
 */
OneSizeGenerator (/android/guava-testlib/src/com/google/common/collect/testing/OneSizeGenerator.java)/**
 * Generator for collection of a particular size.
 *
 * @author George van den Driessche
 */
OneSizeTestContainerGenerator (/android/guava-testlib/src/com/google/common/collect/testing/OneSizeTestContainerGenerator.java)/**
 * The subject-generator interface accepted by Collection testers, for testing a Collection at one
 * particular {@link CollectionSize}.
 *
 * <p>This interface should not be implemented outside this package; {@link
 * PerCollectionSizeTestSuiteBuilder} constructs instances of it from a more general {@link
 * TestCollectionGenerator}.
 *
 * @author George van den Driessche
 */
OneSizeTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/PerCollectionSizeTestSuiteBuilder.java)/** Builds a test suite for one particular {@link CollectionSize}. */
PerCollectionSizeTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/PerCollectionSizeTestSuiteBuilder.java)/**
 * This builder creates a composite test suite, containing a separate test suite for each {@link
 * CollectionSize} present in the features specified by {@link #withFeatures(Feature...)}.
 *
 * @param <B> The concrete type of this builder (the 'self-type'). All the Builder methods of this
 *     class (such as {@link #named(String)}) return this type, so that Builder methods of more
 *     derived classes can be chained onto them without casting.
 * @param <G> The type of the generator to be passed to testers in the generated test suite. An
 *     instance of G should somehow provide an instance of the class under test, plus any other
 *     information required to parameterize the test.
 * @see FeatureSpecificTestSuiteBuilder
 * @author George van den Driessche
 */
Platform (/android/guava-testlib/src/com/google/common/collect/testing/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * <p>This class is emulated in GWT.
 *
 * @author Hayward Chan
 */
QueueTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/QueueTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a queue
 * implementation.
 *
 * @author Jared Levy
 */
ReserializingTestCollectionGenerator (/android/guava-testlib/src/com/google/common/collect/testing/ReserializingTestCollectionGenerator.java)/**
 * Reserializes the sets created by another test set generator.
 *
 * <p>TODO: make CollectionTestSuiteBuilder test reserialized collections
 *
 * @author Jesse Wilson
 */
ReserializingTestSetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/ReserializingTestSetGenerator.java)/**
 * Reserializes the sets created by another test set generator.
 *
 * <p>TODO: make CollectionTestSuiteBuilder test reserialized collections
 *
 * @author Jesse Wilson
 */
SafeTreeMap (/android/guava-testlib/src/com/google/common/collect/testing/SafeTreeMap.java)/**
 * A wrapper around {@code TreeMap} that aggressively checks to see if keys are mutually comparable.
 * This implementation passes the navigable map test suites.
 *
 * @author Louis Wasserman
 */
SafeTreeSet (/android/guava-testlib/src/com/google/common/collect/testing/SafeTreeSet.java)/**
 * A wrapper around {@code TreeSet} that aggressively checks to see if elements are mutually
 * comparable. This implementation passes the navigable set test suites.
 *
 * @author Louis Wasserman
 */
SampleElements (/android/guava-testlib/src/com/google/common/collect/testing/SampleElements.java)/**
 * A container class for the five sample elements we need for testing.
 *
 * @author Kevin Bourrillion
 */
SetTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/SetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a Set implementation.
 *
 * @author George van den Driessche
 */
SortedMapTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/SortedMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a SortedMap
 * implementation.
 */
SortedSetTestSuiteBuilder (/android/guava-testlib/src/com/google/common/collect/testing/SortedSetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a SortedSet
 * implementation.
 */
TestCharacterListGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestCharacterListGenerator.java)/**
 * Generates {@code List<Character>} instances for test suites.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
TestCollectionGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestCollectionGenerator.java)/**
 * Creates collections, containing sample elements, to be tested.
 *
 * @author Kevin Bourrillion
 */
TestCollidingSetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestCollidingSetGenerator.java)/**
 * A generator using sample elements whose hash codes all collide badly.
 *
 * @author Kevin Bourrillion
 */
TestContainerGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestContainerGenerator.java)/**
 * To be implemented by test generators of things that can contain elements. Such things include
 * both {@link Collection} and {@link Map}; since there isn't an established collective noun that
 * encompasses both of these, 'container' is used.
 *
 * @author George van den Driessche
 */
TestEnumMapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestEnumMapGenerator.java)/**
 * Implementation helper for {@link TestMapGenerator} for use with enum maps.
 *
 * @author Kevin Bourrillion
 */
TestEnumSetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestEnumSetGenerator.java)/**
 * An abstract TestSetGenerator for generating sets containing enum values.
 *
 * @author Kevin Bourrillion
 */
AbstractListIndexOfTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/AbstractListIndexOfTester.java)/**
 * Common parent class for {@link ListIndexOfTester} and {@link ListLastIndexOfTester}.
 *
 * @author Chris Povirk
 */
AbstractListTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/AbstractListTester.java)/**
 * Base class for list testers.
 *
 * @author George van den Driessche
 */
AbstractQueueTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/AbstractQueueTester.java)/**
 * Base class for queue collection tests.
 *
 * @author Jared Levy
 */
AbstractSetTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/AbstractSetTester.java)/** @author George van den Driessche */
CollectionAddAllTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionAddAllTester.java)/**
 * A generic JUnit test which tests addAll operations on a collection. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
CollectionAddTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionAddTester.java)/**
 * A generic JUnit test which tests {@code add} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
CollectionClearTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionClearTester.java)/**
 * A generic JUnit test which tests {@code clear()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
CollectionContainsAllTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionContainsAllTester.java)/**
 * A generic JUnit test which tests {@code containsAll()} operations on a collection. Can't be
 * invoked directly; please see {@link
 * com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
CollectionContainsTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionContainsTester.java)/**
 * A generic JUnit test which tests {@code contains()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
CollectionCreationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionCreationTester.java)/**
 * A generic JUnit test which tests creation (typically through a constructor or static factory
 * method) of a collection. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
CollectionEqualsTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionEqualsTester.java)/**
 * Tests {@link java.util.Collection#equals}.
 *
 * @author George van den Driessche
 */
CollectionIsEmptyTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionIsEmptyTester.java)/**
 * A generic JUnit test which tests {@code isEmpty()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
CollectionIteratorTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionIteratorTester.java)/**
 * A generic JUnit test which tests {@code iterator} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
CollectionRemoveAllTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionRemoveAllTester.java)/**
 * A generic JUnit test which tests {@code removeAll} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
CollectionRemoveTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionRemoveTester.java)/**
 * A generic JUnit test which tests {@code remove} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
Target (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionRetainAllTester.java)/** A collection of elements to retain, along with a description for use in failure messages. */
CollectionRetainAllTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionRetainAllTester.java)/**
 * A generic JUnit test which tests {@code retainAll} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
CollectionSerializationEqualTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationEqualTester.java)/**
 * Basic reserialization test for collection types that must preserve {@code equals()} behavior when
 * reserialized. (Sets and Lists, but not bare Collections.)
 *
 * @author Louis Wasserman
 */
CollectionSerializationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationTester.java)/**
 * Basic reserialization test for collections.
 *
 * @author Louis Wasserman
 */
CollectionSizeTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSizeTester.java)/**
 * A generic JUnit test which tests {@code size()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
CollectionToArrayTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionToArrayTester.java)/**
 * A generic JUnit test which tests {@code toArray()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
CollectionToStringTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionToStringTester.java)/**
 * A generic JUnit test which tests {@code toString()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
ConcurrentMapPutIfAbsentTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapPutIfAbsentTester.java)/**
 * A generic JUnit test which tests {@code putIfAbsent} operations on a concurrent map. Can't be
 * invoked directly; please see {@link
 * com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
ConcurrentMapRemoveTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapRemoveTester.java)/**
 * Tester for {@link ConcurrentMap#remove}. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
ConcurrentMapReplaceEntryTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapReplaceEntryTester.java)/**
 * A generic JUnit test which tests {@code replace(K, V, V)} operations on a concurrent map. Can't
 * be invoked directly; please see {@link
 * com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
ConcurrentMapReplaceTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapReplaceTester.java)/**
 * A generic JUnit test which tests {@code replace(K, V)} operations on a concurrent map. Can't be
 * invoked directly; please see {@link
 * com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
ListAddAllAtIndexTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListAddAllAtIndexTester.java)/**
 * A generic JUnit test which tests {@code addAll(int, Collection)} operations on a list. Can't be
 * invoked directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListAddAllTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListAddAllTester.java)/**
 * A generic JUnit test which tests {@code addAll(Collection)} operations on a list. Can't be
 * invoked directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListAddAtIndexTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListAddAtIndexTester.java)/**
 * A generic JUnit test which tests {@code add(int, Object)} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListAddTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListAddTester.java)/**
 * A generic JUnit test which tests {@code add(Object)} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListCreationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListCreationTester.java)/**
 * A generic JUnit test which tests creation (typically through a constructor or static factory
 * method) of a list. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListEqualsTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListEqualsTester.java)/**
 * Tests {@link List#equals}.
 *
 * @author George van den Driessche
 */
ListGetTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListGetTester.java)/**
 * A generic JUnit test which tests {@code get()} operations on a list. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListHashCodeTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListHashCodeTester.java)/**
 * Tests {@link java.util.List#hashCode}.
 *
 * @author George van den Driessche
 */
ListIndexOfTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListIndexOfTester.java)/**
 * A generic JUnit test which tests {@code indexOf()} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListLastIndexOfTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListLastIndexOfTester.java)/**
 * A generic JUnit test which tests {@code lastIndexOf()} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListListIteratorTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListListIteratorTester.java)/**
 * A generic JUnit test which tests {@code listIterator} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
ListRemoveAllTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListRemoveAllTester.java)/**
 * A generic JUnit test which tests removeAll operations on a list. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
ListRemoveAtIndexTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListRemoveAtIndexTester.java)/**
 * A generic JUnit test which tests {@code remove(int)} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListRemoveTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListRemoveTester.java)/**
 * A generic JUnit test which tests {@code remove(Object)} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
ListRetainAllTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListRetainAllTester.java)/**
 * A generic JUnit test which tests {@code retainAll} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListSetTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListSetTester.java)/**
 * A generic JUnit test which tests {@code set()} operations on a list. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
ListSubListTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListSubListTester.java)/**
 * A generic JUnit test which tests {@code subList()} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListToArrayTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/ListToArrayTester.java)/**
 * A generic JUnit test which tests {@code toArray()} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
MapClearTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapClearTester.java)/**
 * A generic JUnit test which tests {@code clear()} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapContainsKeyTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapContainsKeyTester.java)/**
 * A generic JUnit test which tests {@code containsKey()} operations on a map. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
MapContainsValueTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapContainsValueTester.java)/**
 * A generic JUnit test which tests {@code containsValue()} operations on a map. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapCreationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapCreationTester.java)/**
 * A generic JUnit test which tests creation (typically through a constructor or static factory
 * method) of a map. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
MapEntrySetTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapEntrySetTester.java)/**
 * Tests {@link java.util.Map#entrySet}.
 *
 * @author Louis Wasserman
 * @param <K> The key type of the map implementation under test.
 * @param <V> The value type of the map implementation under test.
 */
MapEqualsTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapEqualsTester.java)/**
 * Tests {@link java.util.Map#equals}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapGetTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapGetTester.java)/**
 * A generic JUnit test which tests {@code get} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
MapHashCodeTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapHashCodeTester.java)/**
 * Tests {@link java.util.Map#hashCode}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapIsEmptyTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapIsEmptyTester.java)/**
 * A generic JUnit test which tests {@code isEmpty()} operations on a map. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
MapPutAllTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapPutAllTester.java)/**
 * A generic JUnit test which tests {@code putAll} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
MapPutTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapPutTester.java)/**
 * A generic JUnit test which tests {@code put} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
MapRemoveTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapRemoveTester.java)/**
 * A generic JUnit test which tests {@code remove} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapSerializationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapSerializationTester.java)/**
 * Basic serialization test for maps.
 *
 * @author Louis Wasserman
 */
MapSizeTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapSizeTester.java)/**
 * A generic JUnit test which tests {@code size()} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
MapToStringTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/MapToStringTester.java)/**
 * A generic JUnit test which tests {@code toString()} operations on a map. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
NavigableMapNavigationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/NavigableMapNavigationTester.java)/**
 * A generic JUnit test which tests operations on a NavigableMap. Can't be invoked directly; please
 * see {@code NavigableMapTestSuiteBuilder}.
 *
 * @author Jesse Wilson
 * @author Louis Wasserman
 */
NavigableSetNavigationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/NavigableSetNavigationTester.java)/**
 * A generic JUnit test which tests operations on a NavigableSet. Can't be invoked directly; please
 * see {@code NavigableSetTestSuiteBuilder}.
 *
 * @author Jesse Wilson
 * @author Louis Wasserman
 */
Platform (/android/guava-testlib/src/com/google/common/collect/testing/testers/Platform.java)/**
 * This class is emulated in GWT.
 *
 * @author Hayward Chan
 */
QueueElementTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/QueueElementTester.java)/**
 * A generic JUnit test which tests {@code element()} operations on a queue. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
QueueOfferTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/QueueOfferTester.java)/**
 * A generic JUnit test which tests offer operations on a queue. Can't be invoked directly; please
 * see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
QueuePeekTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/QueuePeekTester.java)/**
 * A generic JUnit test which tests {@code peek()} operations on a queue. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
QueuePollTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/QueuePollTester.java)/**
 * A generic JUnit test which tests {@code poll()} operations on a queue. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
QueueRemoveTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/QueueRemoveTester.java)/**
 * A generic JUnit test which tests {@code remove()} operations on a queue. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
SetAddAllTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/SetAddAllTester.java)/**
 * A generic JUnit test which tests addAll operations on a set. Can't be invoked directly; please
 * see {@link com.google.common.collect.testing.SetTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
SetAddTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/SetAddTester.java)/**
 * A generic JUnit test which tests add operations on a set. Can't be invoked directly; please see
 * {@link com.google.common.collect.testing.SetTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
SetCreationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/SetCreationTester.java)/**
 * A generic JUnit test which tests creation (typically through a constructor or static factory
 * method) of a set. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.SetTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
SetEqualsTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/SetEqualsTester.java)/**
 * Tests {@link java.util.Set#equals}.
 *
 * @author George van den Driessche
 */
SetHashCodeTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/SetHashCodeTester.java)/**
 * Tests {@link java.util.Set#hashCode}.
 *
 * @author George van den Driessche
 */
SetRemoveTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/SetRemoveTester.java)/**
 * A generic JUnit test which tests remove operations on a set. Can't be invoked directly; please
 * see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
SortedMapNavigationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/SortedMapNavigationTester.java)/**
 * A generic JUnit test which tests operations on a SortedMap. Can't be invoked directly; please see
 * {@code SortedMapTestSuiteBuilder}.
 *
 * @author Jesse Wilson
 * @author Louis Wasserman
 */
SortedSetNavigationTester (/android/guava-testlib/src/com/google/common/collect/testing/testers/SortedSetNavigationTester.java)/**
 * A generic JUnit test which tests operations on a SortedSet. Can't be invoked directly; please see
 * {@code SortedSetTestSuiteBuilder}.
 *
 * @author Jesse Wilson
 * @author Louis Wasserman
 */
TestIntegerSetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestIntegerSetGenerator.java)/**
 * Create integer sets for collection tests.
 *
 * @author Gregory Kick
 */
TestIntegerSortedSetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestIntegerSortedSetGenerator.java)/**
 * Create integer sets for testing collections that are sorted by natural ordering.
 *
 * @author Chris Povirk
 * @author Jared Levy
 */
TestIteratorGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestIteratorGenerator.java)/**
 * Creates iterators to be tested.
 *
 * @param <E> the element type of the iterator.
 * @author George van den Driessche
 */
TestListGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestListGenerator.java)/**
 * Creates sets, containing sample elements, to be tested.
 *
 * @author Kevin Bourrillion
 */
TestMapEntrySetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestMapEntrySetGenerator.java)/**
 * Creates map entries using sample keys and sample values.
 *
 * @author Jesse Wilson
 */
TestMapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestMapGenerator.java)/**
 * Creates maps, containing sample elements, to be tested.
 *
 * @author George van den Driessche
 */
TestQueueGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestQueueGenerator.java)/**
 * Creates queues, containing sample elements, to be tested.
 *
 * @author Jared Levy
 */
TestSetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestSetGenerator.java)/**
 * Creates sets, containing sample elements, to be tested.
 *
 * @author Kevin Bourrillion
 */
TestsForListsInJavaUtil (/android/guava-testlib/src/com/google/common/collect/testing/TestsForListsInJavaUtil.java)/**
 * Generates a test suite covering the {@link List} implementations in the {@link java.util}
 * package. Can be subclassed to specify tests that should be suppressed.
 *
 * @author Kevin Bourrillion
 */
TestsForMapsInJavaUtil (/android/guava-testlib/src/com/google/common/collect/testing/TestsForMapsInJavaUtil.java)/**
 * Generates a test suite covering the {@link Map} implementations in the {@link java.util} package.
 * Can be subclassed to specify tests that should be suppressed.
 *
 * @author Kevin Bourrillion
 */
TestsForQueuesInJavaUtil (/android/guava-testlib/src/com/google/common/collect/testing/TestsForQueuesInJavaUtil.java)/**
 * Generates a test suite covering the {@link Queue} implementations in the {@link java.util}
 * package. Can be subclassed to specify tests that should be suppressed.
 *
 * @author Jared Levy
 */
TestsForSetsInJavaUtil (/android/guava-testlib/src/com/google/common/collect/testing/TestsForSetsInJavaUtil.java)/**
 * Generates a test suite covering the {@link Set} implementations in the {@link java.util} package.
 * Can be subclassed to specify tests that should be suppressed.
 *
 * @author Kevin Bourrillion
 */
TestSortedMapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestSortedMapGenerator.java)/**
 * Creates sorted maps, containing sample elements, to be tested.
 *
 * @author Louis Wasserman
 */
TestSortedSetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestSortedSetGenerator.java)/**
 * Creates sorted sets, containing sample elements, to be tested.
 *
 * @author Louis Wasserman
 */
TestStringCollectionGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestStringCollectionGenerator.java)/**
 * String creation for testing arbitrary collections.
 *
 * @author Jared Levy
 */
TestStringListGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestStringListGenerator.java)/**
 * TODO: javadoc.
 *
 * @author Kevin Bourrillion
 */
TestStringMapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestStringMapGenerator.java)/**
 * Implementation helper for {@link TestMapGenerator} for use with maps of strings.
 *
 * @author Chris Povirk
 * @author Jared Levy
 * @author George van den Driessche
 */
TestStringQueueGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestStringQueueGenerator.java)/**
 * Create queue of strings for tests.
 *
 * @author Jared Levy
 */
TestStringSetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestStringSetGenerator.java)/**
 * Create string sets for collection tests.
 *
 * @author Kevin Bourrillion
 */
TestStringSortedMapGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestStringSortedMapGenerator.java)/**
 * Implementation helper for {@link TestMapGenerator} for use with sorted maps of strings.
 *
 * @author Chris Povirk
 */
TestStringSortedSetGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestStringSortedSetGenerator.java)/**
 * Create string sets for testing collections that are sorted by natural ordering.
 *
 * @author Jared Levy
 */
TestSubjectGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestSubjectGenerator.java)/**
 * To be implemented by test generators that can produce test subjects without requiring any
 * parameters.
 *
 * @param <T> the type created by this generator.
 * @author George van den Driessche
 */
TestUnhashableCollectionGenerator (/android/guava-testlib/src/com/google/common/collect/testing/TestUnhashableCollectionGenerator.java)/**
 * Creates collections containing unhashable sample elements, to be tested.
 *
 * @author Regina O'Dell
 */
UnhashableObject (/android/guava-testlib/src/com/google/common/collect/testing/UnhashableObject.java)/**
 * An unhashable object to be used in testing as values in our collections.
 *
 * @author Regina O'Dell
 */
EscaperAsserts (/android/guava-testlib/src/com/google/common/escape/testing/EscaperAsserts.java)/**
 * Extra assert methods for testing Escaper implementations.
 *
 * @author David Beaumont
 * @since 15.0
 */
AbstractPackageSanityTests (/android/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java)/**
 * Automatically runs sanity checks against top level classes in the same package of the test that
 * extends {@code AbstractPackageSanityTests}. Currently sanity checks include {@link
 * NullPointerTester}, {@link EqualsTester} and {@link SerializableTester}. For example:
 *
 * <pre>
 * public class PackageSanityTests extends AbstractPackageSanityTests {}
 * </pre>
 *
 * <p>Note that only top-level classes with either a non-private constructor or a non-private static
 * factory method to construct instances can have their instance methods checked. For example:
 *
 * <pre>
 * public class Address {
 *   private final String city;
 *   private final String state;
 *   private final String zipcode;
 *
 *   public Address(String city, String state, String zipcode) {...}
 *
 *   {@literal @Override} public boolean equals(Object obj) {...}
 *   {@literal @Override} public int hashCode() {...}
 *   ...
 * }
 * </pre>
 *
 * <p>No cascading checks are performed against the return values of methods unless the method is a
 * static factory method. Neither are semantics of mutation methods such as {@code
 * someList.add(obj)} checked. For more detailed discussion of supported and unsupported cases, see
 * {@link #testEquals}, {@link #testNulls} and {@link #testSerializable}.
 *
 * <p>For testing against the returned instances from a static factory class, such as
 *
 * <pre>
 * interface Book {...}
 * public class Books {
 *   public static Book hardcover(String title) {...}
 *   public static Book paperback(String title) {...}
 * }
 * </pre>
 *
 * <p>please use {@link ClassSanityTester#forAllPublicStaticMethods}.
 *
 * <p>If not all classes on the classpath should be covered, {@link #ignoreClasses} can be used to
 * exclude certain classes. As a special case, classes with an underscore in the name (like {@code
 * AutoValue_Foo}) can be excluded using <code>ignoreClasses({@link #UNDERSCORE_IN_NAME})</code>.
 *
 * <p>{@link #setDefault} allows subclasses to specify default values for types.
 *
 * <p>This class incurs IO because it scans the classpath and reads classpath resources.
 *
 * @author Ben Yu
 * @since 14.0
 */
ArbitraryInstances (/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java)/**
 * Supplies an arbitrary "default" instance for a wide range of types, often useful in testing
 * utilities.
 *
 * <p>Covers arrays, enums and common types defined in {@code java.lang}, {@code java.lang.reflect},
 * {@code java.io}, {@code java.nio}, {@code java.math}, {@code java.util}, {@code
 * java.util.concurrent}, {@code java.util.regex}, {@code com.google.common.base}, {@code
 * com.google.common.collect} and {@code com.google.common.primitives}. In addition, if the type
 * exposes at least one public static final constant of the same type, one of the constants will be
 * used; or if the class exposes a public parameter-less constructor then it will be "new"d and
 * returned.
 *
 * <p>All default instances returned by {@link #get} are generics-safe. Clients won't get type
 * errors for using {@code get(Comparator.class)} as a {@code Comparator<Foo>}, for example.
 * Immutable empty instances are returned for collection types; {@code ""} for string; {@code 0} for
 * number types; reasonable default instance for other stateless types. For mutable types, a fresh
 * instance is created each time {@code get()} is called.
 *
 * @author Kevin Bourrillion
 * @author Ben Yu
 * @since 12.0
 */
FactoryMethodReturnValueTester (/android/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/** Runs sanity tests against return values of static factory methods declared by a class. */
ParameterNotInstantiableException (/android/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/**
   * Thrown if the test tries to invoke a constructor or static factory method but failed because
   * the dummy value of a constructor or method parameter is unknown.
   */
ParameterHasNoDistinctValueException (/android/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/**
   * Thrown if the test fails to generate two distinct non-null values of a constructor or factory
   * parameter in order to test {@link Object#equals} and {@link Object#hashCode} of the declaring
   * class.
   */
FactoryMethodReturnsNullException (/android/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/**
   * Thrown if the test tries to invoke a static factory method to test instance methods but the
   * factory returned null.
   */
ClassSanityTester (/android/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/**
 * Tester that runs automated sanity tests for any given class. A typical use case is to test static
 * factory classes like:
 *
 * <pre>
 * interface Book {...}
 * public class Books {
 *   public static Book hardcover(String title) {...}
 *   public static Book paperback(String title) {...}
 * }
 * </pre>
 *
 * <p>And all the created {@code Book} instances can be tested with:
 *
 * <pre>
 * new ClassSanityTester()
 *     .forAllPublicStaticMethods(Books.class)
 *     .thatReturn(Book.class)
 *     .testEquals(); // or testNulls(), testSerializable() etc.
 * </pre>
 *
 * @author Ben Yu
 * @since 14.0
 */
ClusterException (/android/guava-testlib/src/com/google/common/testing/ClusterException.java)/**
 * An {@link ClusterException} is a data structure that allows for some code to "throw multiple
 * exceptions", or something close to it. The prototypical code that calls for this class is
 * presented below:
 *
 * <pre>
 * void runManyThings({@literal List<ThingToRun>} thingsToRun) {
 *   for (ThingToRun thingToRun : thingsToRun) {
 *     thingToRun.run(); // say this may throw an exception, but you want to
 *                       // always run all thingsToRun
 *   }
 * }
 * </pre>
 *
 * <p>This is what the code would become:
 *
 * <pre>
 * void runManyThings({@literal List<ThingToRun>} thingsToRun) {
 *   {@literal List<Exception>} exceptions = Lists.newArrayList();
 *   for (ThingToRun thingToRun : thingsToRun) {
 *     try {
 *       thingToRun.run();
 *     } catch (Exception e) {
 *       exceptions.add(e);
 *     }
 *   }
 *   if (exceptions.size() &gt; 0) {
 *     throw ClusterException.create(exceptions);
 *   }
 * }
 * </pre>
 *
 * <p>See semantic details at {@link #create(Collection)}.
 *
 * @author Luiz-Otavio Zorzella
 */
DummyProxy (/android/guava-testlib/src/com/google/common/testing/DummyProxy.java)/**
 * Generates a dummy interface proxy that simply returns a dummy value for each method.
 *
 * @author Ben Yu
 */
EqualsTester (/android/guava-testlib/src/com/google/common/testing/EqualsTester.java)/**
 * Tester for equals() and hashCode() methods of a class.
 *
 * <p>The simplest use case is:
 *
 * <pre>
 * new EqualsTester().addEqualityGroup(foo).testEquals();
 * </pre>
 *
 * <p>This tests {@code foo.equals(foo)}, {@code foo.equals(null)}, and a few other operations.
 *
 * <p>For more extensive testing, add multiple equality groups. Each group should contain objects
 * that are equal to each other but unequal to the objects in any other group. For example:
 *
 * <pre>
 * new EqualsTester()
 *     .addEqualityGroup(new User("page"), new User("page"))
 *     .addEqualityGroup(new User("sergey"))
 *     .testEquals();
 * </pre>
 *
 * <p>This tests:
 *
 * <ul>
 *   <li>comparing each object against itself returns true
 *   <li>comparing each object against null returns false
 *   <li>comparing each object against an instance of an incompatible class returns false
 *   <li>comparing each pair of objects within the same equality group returns true
 *   <li>comparing each pair of objects from different equality groups returns false
 *   <li>the hash codes of any two equal objects are equal
 * </ul>
 *
 * <p>When a test fails, the error message labels the objects involved in the failed comparison as
 * follows:
 *
 * <ul>
 *   <li>"{@code [group }<i>i</i>{@code , item }<i>j</i>{@code ]}" refers to the
 *       <i>j</i><sup>th</sup> item in the <i>i</i><sup>th</sup> equality group, where both equality
 *       groups and the items within equality groups are numbered starting from 1. When either a
 *       constructor argument or an equal object is provided, that becomes group 1.
 * </ul>
 *
 * @author Jim McMaster
 * @author Jige Yu
 * @since 10.0
 */
EquivalenceTester (/android/guava-testlib/src/com/google/common/testing/EquivalenceTester.java)/**
 * Tester for {@link Equivalence} relationships between groups of objects.
 *
 * <p>To use, create a new {@link EquivalenceTester} and add equivalence groups where each group
 * contains objects that are supposed to be equal to each other. Objects of different groups are
 * expected to be unequal. For example:
 *
 * <pre>{@code
 * EquivalenceTester.of(someStringEquivalence)
 *     .addEquivalenceGroup("hello", "h" + "ello")
 *     .addEquivalenceGroup("world", "wor" + "ld")
 *     .test();
 * }</pre>
 *
 * <p>Note that testing {@link Object#equals(Object)} is more simply done using the {@link
 * EqualsTester}. It includes an extra test against an instance of an arbitrary class without having
 * to explicitly add another equivalence group.
 *
 * @author Gregory Kick
 * @since 10.0
 */
FakeTicker (/android/guava-testlib/src/com/google/common/testing/FakeTicker.java)/**
 * A Ticker whose value can be advanced programmatically in test.
 *
 * <p>The ticker can be configured so that the time is incremented whenever {@link #read} is called:
 * see {@link #setAutoIncrementStep}.
 *
 * <p>This class is thread-safe.
 *
 * @author Jige Yu
 * @since 10.0
 */
InteractionTester (/android/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java)/** Tests a single interaction against a method. */
ForwardingWrapperTester (/android/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java)/**
 * Tester to ensure forwarding wrapper works by delegating calls to the corresponding method with
 * the same parameters forwarded and return value forwarded back or exception propagated as is.
 *
 * <p>For example:
 *
 * <pre>{@code
 * new ForwardingWrapperTester().testForwarding(Foo.class, new Function<Foo, Foo>() {
 *   public Foo apply(Foo foo) {
 *     return new ForwardingFoo(foo);
 *   }
 * });
 * }</pre>
 *
 * @author Ben Yu
 * @since 14.0
 */
FreshValueGenerator (/android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java)/**
 * Generates fresh instances of types that are different from each other (if possible).
 *
 * @author Ben Yu
 */
FinalizationPredicate (/android/guava-testlib/src/com/google/common/testing/GcFinalization.java)/**
   * A predicate that is expected to return true subsequent to <em>finalization</em>, that is, one
   * of the following actions taken by the garbage collector when performing a full collection in
   * response to {@link System#gc()}:
   *
   * <ul>
   *   <li>invoking the {@code finalize} methods of unreachable objects
   *   <li>clearing weak references to unreachable referents
   *   <li>enqueuing weak references to unreachable referents in their reference queue
   * </ul>
   */
GcFinalization (/android/guava-testlib/src/com/google/common/testing/GcFinalization.java)/**
 * Testing utilities relating to garbage collection finalization.
 *
 * <p>Use this class to test code triggered by <em>finalization</em>, that is, one of the following
 * actions taken by the java garbage collection system:
 *
 * <ul>
 *   <li>invoking the {@code finalize} methods of unreachable objects
 *   <li>clearing weak references to unreachable referents
 *   <li>enqueuing weak references to unreachable referents in their reference queue
 * </ul>
 *
 * <p>This class uses (possibly repeated) invocations of {@link java.lang.System#gc()} to cause
 * finalization to happen. However, a call to {@code System.gc()} is specified to be no more than a
 * hint, so this technique may fail at the whim of the JDK implementation, for example if a user
 * specified the JVM flag {@code -XX:+DisableExplicitGC}. But in practice, it works very well for
 * ordinary tests.
 *
 * <p>Failure of the expected event to occur within an implementation-defined "reasonable" time
 * period or an interrupt while waiting for the expected event will result in a {@link
 * RuntimeException}.
 *
 * <p>Here's an example that tests a {@code finalize} method:
 *
 * <pre>{@code
 * final CountDownLatch latch = new CountDownLatch(1);
 * Object x = new MyClass() {
 *   ...
 *   protected void finalize() { latch.countDown(); ... }
 * };
 * x = null;  // Hint to the JIT that x is stack-unreachable
 * GcFinalization.await(latch);
 * }</pre>
 *
 * <p>Here's an example that uses a user-defined finalization predicate:
 *
 * <pre>{@code
 * final WeakHashMap<Object, Object> map = new WeakHashMap<>();
 * map.put(new Object(), Boolean.TRUE);
 * GcFinalization.awaitDone(new FinalizationPredicate() {
 *   public boolean isDone() {
 *     return map.isEmpty();
 *   }
 * });
 * }</pre>
 *
 * <p>Even if your non-test code does not use finalization, you can use this class to test for
 * leaks, by ensuring that objects are no longer strongly referenced:
 *
 * <pre>{@code
 * // Helper function keeps victim stack-unreachable.
 * private WeakReference<Foo> fooWeakRef() {
 *   Foo x = ....;
 *   WeakReference<Foo> weakRef = new WeakReference<>(x);
 *   // ... use x ...
 *   x = null;  // Hint to the JIT that x is stack-unreachable
 *   return weakRef;
 * }
 * public void testFooLeak() {
 *   GcFinalization.awaitClear(fooWeakRef());
 * }
 * }</pre>
 *
 * <p>This class cannot currently be used to test soft references, since this class does not try to
 * create the memory pressure required to cause soft references to be cleared.
 *
 * <p>This class only provides testing utilities. It is not designed for direct use in production or
 * for benchmarking.
 *
 * @author mike nonemacher
 * @author Martin Buchholz
 * @since 11.0
 */
NullPointerTester (/android/guava-testlib/src/com/google/common/testing/NullPointerTester.java)/**
 * A test utility that verifies that your methods and constructors throw {@link
 * NullPointerException} or {@link UnsupportedOperationException} whenever null is passed to a
 * parameter that isn't annotated with an annotation with the simple name {@code Nullable}, {@lcode
 * CheckForNull}, {@link NullableType}, or {@link NullableDecl}.
 *
 * <p>The tested methods and constructors are invoked -- each time with one parameter being null and
 * the rest not null -- and the test fails if no expected exception is thrown. {@code
 * NullPointerTester} uses best effort to pick non-null default values for many common JDK and Guava
 * types, and also for interfaces and public classes that have public parameter-less constructors.
 * When the non-null default value for a particular parameter type cannot be provided by {@code
 * NullPointerTester}, the caller can provide a custom non-null default value for the parameter type
 * via {@link #setDefault}.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
Platform (/android/guava-testlib/src/com/google/common/testing/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * @author Chris Povirk
 */
RelationshipTester (/android/guava-testlib/src/com/google/common/testing/RelationshipTester.java)/**
 * Implementation helper for {@link EqualsTester} and {@link EquivalenceTester} that tests for
 * equivalence classes.
 *
 * @author Gregory Kick
 */
SerializableTester (/android/guava-testlib/src/com/google/common/testing/SerializableTester.java)/**
 * Tests serialization and deserialization of an object, optionally asserting that the resulting
 * object is equal to the original.
 *
 * <p><b>GWT warning:</b> Under GWT, both methods simply returns their input, as proper GWT
 * serialization tests require more setup. This no-op behavior allows test authors to intersperse
 * {@code SerializableTester} calls with other, GWT-compatible tests.
 *
 *
 * @author Mike Bostock
 * @since 10.0
 */
SloppyTearDown (/android/guava-testlib/src/com/google/common/testing/SloppyTearDown.java)/**
 * Simple utility for when you want to create a {@link TearDown} that may throw an exception but
 * should not fail a test when it does. (The behavior of a {@code TearDown} that throws an exception
 * varies; see its documentation for details.) Use it just like a {@code TearDown}, except override
 * {@link #sloppyTearDown()} instead.
 *
 * @author Luiz-Otavio Zorzella
 * @since 10.0
 */
TearDown (/android/guava-testlib/src/com/google/common/testing/TearDown.java)/**
 * An object that can perform a {@link #tearDown} operation.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
TearDownAccepter (/android/guava-testlib/src/com/google/common/testing/TearDownAccepter.java)/**
 * Any object which can accept registrations of {@link TearDown} instances.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
TearDownStack (/android/guava-testlib/src/com/google/common/testing/TearDownStack.java)/**
 * A {@code TearDownStack} contains a stack of {@link TearDown} instances.
 *
 * <p>This class is thread-safe.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
TestLogHandler (/android/guava-testlib/src/com/google/common/testing/TestLogHandler.java)/**
 * Tests may use this to intercept messages that are logged by the code under test. Example:
 *
 * <pre>
 *   TestLogHandler handler;
 *
 *   protected void setUp() throws Exception {
 *     super.setUp();
 *     handler = new TestLogHandler();
 *     SomeClass.logger.addHandler(handler);
 *     addTearDown(new TearDown() {
 *       public void tearDown() throws Exception {
 *         SomeClass.logger.removeHandler(handler);
 *       }
 *     });
 *   }
 *
 *   public void test() {
 *     SomeClass.foo();
 *     LogRecord firstRecord = handler.getStoredLogRecords().get(0);
 *     assertEquals("some message", firstRecord.getMessage());
 *   }
 * </pre>
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
AbstractListenableFutureTest (/android/guava-testlib/src/com/google/common/util/concurrent/testing/AbstractListenableFutureTest.java)/**
 * Abstract test case parent for anything implementing {@link ListenableFuture}. Tests the two get
 * methods and the addListener method.
 *
 * @author Sven Mawson
 * @since 10.0
 */
MockFutureListener (/android/guava-testlib/src/com/google/common/util/concurrent/testing/MockFutureListener.java)/**
 * A simple mock implementation of {@code Runnable} that can be used for testing ListenableFutures.
 *
 * @author Nishant Thakkar
 * @since 10.0
 */
SameThreadScheduledExecutorService (/android/guava-testlib/src/com/google/common/util/concurrent/testing/SameThreadScheduledExecutorService.java)/**
 * A ScheduledExecutorService that executes all scheduled actions immediately in the calling thread.
 *
 * <p>See {@link TestingExecutors#sameThreadScheduledExecutor()} for a full list of constraints.
 *
 * @author John Sirois
 * @author Zach van Schouwen
 */
TestingExecutors (/android/guava-testlib/src/com/google/common/util/concurrent/testing/TestingExecutors.java)/**
 * Factory methods for {@link ExecutorService} for testing.
 *
 * @author Chris Nokleberg
 * @since 14.0
 */
FeatureEnumTest (/android/guava-testlib/test/com/google/common/collect/testing/features/FeatureEnumTest.java)/**
 * Since annotations have some reusability issues that force copy and paste all over the place, it's
 * worth having a test to ensure that all our Feature enums have their annotations correctly set up.
 *
 * @author George van den Driessche
 */
FeatureSpecificTestSuiteBuilderTest (/android/guava-testlib/test/com/google/common/collect/testing/FeatureSpecificTestSuiteBuilderTest.java)/** @author Max Ross */
HelpersTest (/android/guava-testlib/test/com/google/common/collect/testing/HelpersTest.java)/**
 * Unit test for {@link Helpers}.
 *
 * @author Chris Povirk
 */
IteratorWithSunJavaBug6529795 (/android/guava-testlib/test/com/google/common/collect/testing/IteratorTesterTest.java)/**
   * This Iterator wraps another iterator and gives it a bug found in JDK6.
   *
   * <p>This bug is this: if you create an iterator from a TreeSet and call next() on that iterator
   * when hasNext() is false, so that next() throws a NoSuchElementException, then subsequent calls
   * to remove() will incorrectly throw an IllegalStateException, instead of removing the last
   * element returned.
   *
   * <p>See <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6529795">Sun bug 6529795</a>
   */
IteratorTesterTest (/android/guava-testlib/test/com/google/common/collect/testing/IteratorTesterTest.java)/**
 * Unit test for IteratorTester.
 *
 * @author Mick Killianey
 */
MapTestSuiteBuilderTests (/android/guava-testlib/test/com/google/common/collect/testing/MapTestSuiteBuilderTests.java)/**
 * Tests {@link MapTestSuiteBuilder} by using it against maps that have various negative behaviors.
 *
 * @author George van den Driessche
 */
MinimalCollectionTest (/android/guava-testlib/test/com/google/common/collect/testing/MinimalCollectionTest.java)/**
 * Unit test for {@link MinimalCollection}.
 *
 * @author Kevin Bourrillion
 */
MinimalIterableTest (/android/guava-testlib/test/com/google/common/collect/testing/MinimalIterableTest.java)/**
 * Unit test for {@link MinimalIterable}.
 *
 * @author Kevin Bourrillion
 */
MinimalSetTest (/android/guava-testlib/test/com/google/common/collect/testing/MinimalSetTest.java)/**
 * Unit test for {@link MinimalSet}.
 *
 * @author Regina O'Dell
 */
OpenJdk6ListTests (/android/guava-testlib/test/com/google/common/collect/testing/OpenJdk6ListTests.java)/**
 * Tests the {@link List} implementations of {@link java.util}, suppressing tests that trip known
 * OpenJDK 6 bugs.
 *
 * @author Kevin Bourrillion
 */
OpenJdk6QueueTests (/android/guava-testlib/test/com/google/common/collect/testing/OpenJdk6QueueTests.java)/**
 * Tests the {@link Queue} implementations of {@link java.util}, suppressing tests that trip known
 * OpenJDK 6 bugs.
 *
 * @author Kevin Bourrillion
 */
OpenJdk6SetTests (/android/guava-testlib/test/com/google/common/collect/testing/OpenJdk6SetTests.java)/**
 * Tests the {@link Set} implementations of {@link java.util}, suppressing tests that trip known
 * OpenJDK 6 bugs.
 *
 * @author Kevin Bourrillion
 */
OpenJdk6Tests (/android/guava-testlib/test/com/google/common/collect/testing/OpenJdk6Tests.java)/**
 * Suite of tests for OpenJdk 6 tests. The existence of this class is a hack because the
 * suitebuilder won't pick up the suites directly in the other classes because they don't extend
 * TestCase. Ergh.
 *
 * @author Kevin Bourrillion
 */
SafeTreeMapTest (/android/guava-testlib/test/com/google/common/collect/testing/SafeTreeMapTest.java)/**
 * Tests for SafeTreeMap.
 *
 * @author Louis Wasserman
 */
AbstractPackageSanityTestsTest (/android/guava-testlib/test/com/google/common/testing/AbstractPackageSanityTestsTest.java)/**
 * Unit tests for {@link AbstractPackageSanityTests}.
 *
 * @author Ben Yu
 */
ChainingCalls (/android/guava-testlib/test/com/google/common/testing/anotherpackage/ForwardingWrapperTesterTest.java)/** An interface for the 2 ways that a chaining call might be defined. */
ForwardingWrapperTesterTest (/android/guava-testlib/test/com/google/common/testing/anotherpackage/ForwardingWrapperTesterTest.java)/**
 * Tests for {@link ForwardingWrapperTester}. Live in a different package to detect reflection
 * access issues, if any.
 *
 * @author Ben Yu
 */
SomeClassThatDoesNotUseNullable (/android/guava-testlib/test/com/google/common/testing/anotherpackage/SomeClassThatDoesNotUseNullable.java)/** Does not check null, but should not matter since it's in a different package. */
ArbitraryInstancesTest (/android/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java)/**
 * Unit test for {@link ArbitraryInstances}.
 *
 * @author Ben Yu
 */
JdkObjectFactory (/android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java)/** String doesn't check nulls as we expect. But the framework should ignore. */
ClassSanityTesterTest (/android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java)/**
 * Unit tests for {@link ClassSanityTester}.
 *
 * @author Ben Yu
 */
ValidTestObject (/android/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/**
   * Test class with valid equals and hashCode methods. Testers created with instances of this class
   * should always pass.
   */
InvalidHashCodeObject (/android/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/** Test class with invalid hashCode method. */
NonReflexiveObject (/android/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/** Test class that violates reflexivity. It is not equal to itself */
InvalidEqualsNullObject (/android/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/** Test class that returns true if the test object is null */
InvalidEqualsIncompatibleClassObject (/android/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/** Test class that returns true even if the test object is of the wrong class */
EqualsTesterTest (/android/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/**
 * Unit tests for {@link EqualsTester}.
 *
 * @author Jim McMaster
 */
TestObject (/android/guava-testlib/test/com/google/common/testing/EquivalenceTesterTest.java)/** An object with a friendly {@link #toString()}. */
EquivalenceTesterTest (/android/guava-testlib/test/com/google/common/testing/EquivalenceTesterTest.java)/**
 * Tests for {@link EquivalenceTester}.
 *
 * @author Gregory Kick
 */
FakeTickerTest (/android/guava-testlib/test/com/google/common/testing/FakeTickerTest.java)/**
 * Unit test for {@link FakeTicker}.
 *
 * @author Jige Yu
 */
FreshValueGeneratorTest (/android/guava-testlib/test/com/google/common/testing/FreshValueGeneratorTest.java)/**
 * Tests for {@link FreshValueGenerator}.
 *
 * @author Ben Yu
 */
FooException (/android/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/** Non-NPE RuntimeException. */
OneArg (/android/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/**
   * Class for testing all permutations of static/non-static one-argument methods using
   * methodParameter().
   */
TwoArg (/android/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/**
   * Class for testing all permutations of nullable/non-nullable two-argument methods using
   * testMethod().
   *
   * <ul>
   *   <li>normalNormal: two params, neither is Nullable
   *   <li>nullableNormal: only first param is Nullable
   *   <li>normalNullable: only second param is Nullable
   *   <li>nullableNullable: both params are Nullable
   * </ul>
   */
PassObject (/android/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/** Lots of well-behaved methods. */
NullPointerTesterTest (/android/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/**
 * Unit test for {@link NullPointerTester}.
 *
 * @author Kevin Bourrillion
 * @author Mick Killianey
 */
RelationshipTesterTest (/android/guava-testlib/test/com/google/common/testing/RelationshipTesterTest.java)/**
 * Tests for {@link RelationshipTester}.
 *
 * @author Ben Yu
 */
SerializableTesterTest (/android/guava-testlib/test/com/google/common/testing/SerializableTesterTest.java)/**
 * Tests for {@link SerializableTester}.
 *
 * @author Nick Kralevich
 */
TearDownStackTest (/android/guava-testlib/test/com/google/common/testing/TearDownStackTest.java)/** @author Luiz-Otavio "Z" Zorzella */
TestLogHandlerTest (/android/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java)/**
 * Unit test for {@link TestLogHandler}.
 *
 * @author kevinb
 */
TestingExecutorsTest (/android/guava-testlib/test/com/google/common/util/concurrent/testing/TestingExecutorsTest.java)/**
 * Tests for TestingExecutors.
 *
 * @author Eric Chang
 */
AsciiBenchmark (/android/guava-tests/benchmark/com/google/common/base/AsciiBenchmark.java)/**
 * Benchmarks for the ASCII class.
 *
 * @author Kevin Bourrillion
 */
CharSamples (/android/guava-tests/benchmark/com/google/common/base/CharMatcherBenchmark.java)/**
   * Provides samples on a random distribution derived from the web.
   *
   * <p>Adapted from data provided by Mark Davis.
   *
   * @author Christopher Swenson
   */
CharMatcherBenchmark (/android/guava-tests/benchmark/com/google/common/base/CharMatcherBenchmark.java)/**
 * Benchmark for the {@link CharMatcher} class.
 *
 *
 * @author David Beaumont
 * @author Kevin Bourrillion
 * @author David Richter
 */
JoinerBenchmark (/android/guava-tests/benchmark/com/google/common/base/JoinerBenchmark.java)/**
 * Benchmarks {@link Joiner} against some common implementations of delimiter-based string joining.
 *
 * @author Adomas Paltanavicius
 */
LazyStackTraceBenchmark (/android/guava-tests/benchmark/com/google/common/base/LazyStackTraceBenchmark.java)/**
 * Quick and dirty benchmark of {@link Throwables#lazyStackTrace(Throwable)}. We benchmark a "caller
 * finder" implementation that might be used in a logging framework.
 */
ObjectsBenchmark (/android/guava-tests/benchmark/com/google/common/base/ObjectsBenchmark.java)/**
 * Some microbenchmarks for the {@link com.google.common.base.Objects} class.
 *
 * @author Ben L. Titzer
 */
SplitterBenchmark (/android/guava-tests/benchmark/com/google/common/base/SplitterBenchmark.java)/**
 * Microbenchmark for {@link Splitter#on} with char vs String with length == 1.
 *
 * @author Paul Lindner
 */
StopwatchBenchmark (/android/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java)/**
 * Simple benchmark: create, start, read. This does not currently report the most useful result
 * because it's ambiguous to what extent the stopwatch benchmark is being affected by GC.
 *
 * @author Kevin Bourrillion
 */
StringsRepeatBenchmark (/android/guava-tests/benchmark/com/google/common/base/StringsRepeatBenchmark.java)/**
 * Microbenchmark for {@link com.google.common.base.Strings#repeat}
 *
 * @author Mike Cripps
 */
ToStringHelperBenchmark (/android/guava-tests/benchmark/com/google/common/base/ToStringHelperBenchmark.java)/**
 * Some microbenchmarks for the {@link MoreObjects.ToStringHelper} class.
 *
 * @author Osvaldo Doederlein
 */
WhitespaceMatcherBenchmark (/android/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java)/** Benchmark for the {@link CharMatcher#whitespace} implementation. */
ChainBenchmark (/android/guava-tests/benchmark/com/google/common/cache/ChainBenchmark.java)/**
 * Benchmark for {@code LocalCache.Segment.removeEntryFromChain}.
 *
 * @author Charles Fry
 */
LoadingCacheSingleThreadBenchmark (/android/guava-tests/benchmark/com/google/common/cache/LoadingCacheSingleThreadBenchmark.java)/**
 * Single-threaded benchmark for {@link LoadingCache}.
 *
 * @author Charles Fry
 */
MapMakerComparisonBenchmark (/android/guava-tests/benchmark/com/google/common/cache/MapMakerComparisonBenchmark.java)/**
 * Compare CacheBuilder and MapMaker performance, ensuring that they remain on par with each other.
 *
 * @author Nikita Sidorov
 */
SegmentBenchmark (/android/guava-tests/benchmark/com/google/common/cache/SegmentBenchmark.java)/**
 * Benchmark for {@code LocalCache.Segment.expand()}.
 *
 * @author Charles Fry
 */
BinaryTreeTraverserBenchmark (/android/guava-tests/benchmark/com/google/common/collect/BinaryTreeTraverserBenchmark.java)/**
 * Benchmarks for the {@code TreeTraverser} operations on binary trees.
 *
 * @author Louis Wasserman
 */
ComparatorDelegationOverheadBenchmark (/android/guava-tests/benchmark/com/google/common/collect/ComparatorDelegationOverheadBenchmark.java)/**
 * A benchmark to determine the overhead of sorting with {@link Ordering#from(Comparator)}, or with
 * {@link Ordering#natural()}, as opposed to using the inlined {@link Arrays#sort(Object[])}
 * implementation, which uses {@link Comparable#compareTo} directly.
 *
 * @author Louis Wasserman
 */
OldConcurrentHashMultiset (/android/guava-tests/benchmark/com/google/common/collect/ConcurrentHashMultisetBenchmark.java)/**
   * Duplication of the old version of ConcurrentHashMultiset (with some unused stuff removed, like
   * serialization code) which used a map with boxed integers for the values.
   */
ConcurrentHashMultisetBenchmark (/android/guava-tests/benchmark/com/google/common/collect/ConcurrentHashMultisetBenchmark.java)/**
 * Benchmarks for {@link ConcurrentHashMultiset}.
 *
 * @author mike nonemacher
 */
HashMultisetAddPresentBenchmark (/android/guava-tests/benchmark/com/google/common/collect/HashMultisetAddPresentBenchmark.java)/**
 * Benchmark for HashMultiset.add for an already-present element.
 *
 * @author Louis Wasserman
 */
ImmutableListCreationBenchmark (/android/guava-tests/benchmark/com/google/common/collect/ImmutableListCreationBenchmark.java)/**
 * Benchmark for various ways to create an {@code ImmutableList}.
 *
 * @author Louis Wasserman
 */
InternersBenchmark (/android/guava-tests/benchmark/com/google/common/collect/InternersBenchmark.java)/**
 * Benchmarking interners.
 *
 * @author Dimitris Andreou
 */
IteratorBenchmark (/android/guava-tests/benchmark/com/google/common/collect/IteratorBenchmark.java)/**
 * Tests the speed of iteration of different iteration methods for collections.
 *
 * @author David Richter
 */
MapBenchmark (/android/guava-tests/benchmark/com/google/common/collect/MapBenchmark.java)/**
 * A microbenchmark that tests the performance of get() and iteration on various map
 * implementations. Forked from {@link SetContainsBenchmark}.
 *
 * @author Nicholaus Shupe
 */
MapsMemoryBenchmark (/android/guava-tests/benchmark/com/google/common/collect/MapsMemoryBenchmark.java)/** Benchmarks for memory consumption of map implementations. */
InvertedMinMaxPriorityQueue (/android/guava-tests/benchmark/com/google/common/collect/MinMaxPriorityQueueBenchmark.java)/**
   * Implementation of the InvertedMinMaxPriorityQueue which forwards all calls to a
   * MinMaxPriorityQueue, except poll, which is forwarded to pollMax. That way we can benchmark
   * pollMax using the same code that benchmarks poll.
   */
ExpensiveComputation (/android/guava-tests/benchmark/com/google/common/collect/MinMaxPriorityQueueBenchmark.java)/**
   * Does a CPU intensive operation on Integer and returns a BigInteger Used to implement an
   * ordering that spends a lot of cpu.
   */
MinMaxPriorityQueueBenchmark (/android/guava-tests/benchmark/com/google/common/collect/MinMaxPriorityQueueBenchmark.java)/**
 * Benchmarks to compare performance of MinMaxPriorityQueue and PriorityQueue.
 *
 * @author Sverre Sundsdal
 */
MultipleSetContainsBenchmark (/android/guava-tests/benchmark/com/google/common/collect/MultipleSetContainsBenchmark.java)/** A benchmark that tries invoking {@code Set.contains} on many different sets. */
MultisetIteratorBenchmark (/android/guava-tests/benchmark/com/google/common/collect/MultisetIteratorBenchmark.java)/**
 * Tests the speed of iteration of different iteration methods for collections.
 *
 * @author David Richter
 */
PowerSetBenchmark (/android/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java)/**
 * Very simple powerSet iteration benchmark.
 *
 * @author Kevin Bourrillion
 */
SetContainsBenchmark (/android/guava-tests/benchmark/com/google/common/collect/SetContainsBenchmark.java)/**
 * A microbenchmark that tests the performance of contains() on various Set implementations.
 *
 * @author Kevin Bourrillion
 */
SetCreationBenchmark (/android/guava-tests/benchmark/com/google/common/collect/SetCreationBenchmark.java)/**
 * This is meant to be used with {@code --measureMemory} to measure the memory usage of various
 * {@code Set} implementations.
 *
 * @author Christopher Swenson
 */
SetIterationBenchmark (/android/guava-tests/benchmark/com/google/common/collect/SetIterationBenchmark.java)/**
 * Test iteration speed at various size for {@link Set} instances.
 *
 * @author Christopher Swenson
 */
SortedCopyBenchmark (/android/guava-tests/benchmark/com/google/common/collect/SortedCopyBenchmark.java)/**
 * Provides supporting data for performance notes in the documentation of {@link
 * Ordering#sortedCopy} and {@link Ordering#immutableSortedCopy}, as well as for automated code
 * suggestions.
 *
 */
EventBusBenchmark (/android/guava-tests/benchmark/com/google/common/eventbus/EventBusBenchmark.java)/**
 * Benchmark for {@link EventBus}.
 *
 * @author Eric Fellheimer
 */
ChecksumBenchmark (/android/guava-tests/benchmark/com/google/common/hash/ChecksumBenchmark.java)/**
 * Benchmarks for comparing {@link Checksum}s and {@link HashFunction}s that wrap {@link Checksum}s.
 *
 * <p>Parameters for the benchmark are:
 *
 * <ul>
 *   <li>size: The length of the byte array to hash.
 * </ul>
 *
 * @author Colin Decker
 */
HashCodeBenchmark (/android/guava-tests/benchmark/com/google/common/hash/HashCodeBenchmark.java)/**
 * Benchmarks for comparing the various {@link HashCode#equals} methods.
 *
 * <p>Parameters for the benchmark are:
 *
 * <ul>
 *   <li>size: the length of the byte array to hash
 *   <li>whereToDiffer: where in the array the bytes should differ
 *   <li>equalsImpl: which implementation of array equality to use
 * </ul>
 *
 * <p><b>Important note:</b> the primary goal of this benchmark is to ensure that varying {@code
 * whereToDiffer} produces no observable change in performance. We want to make sure that the array
 * equals implementation is *not* short-circuiting to prevent timing-based attacks. Being fast is
 * only a secondary goal.
 *
 * @author Kurt Alfred Kluever
 */
HashFunctionBenchmark (/android/guava-tests/benchmark/com/google/common/hash/HashFunctionBenchmark.java)/**
 * Benchmarks for comparing the various {@link HashFunction functions} that we provide.
 *
 * <p>Parameters for the benchmark are:
 *
 * <ul>
 *   <li>size: The length of the byte array to hash.
 *   <li>hashFunctionEnum: The {@link HashFunction} to use for hashing.
 * </ul>
 *
 * @author Kurt Alfred Kluever
 */
HashStringBenchmark (/android/guava-tests/benchmark/com/google/common/hash/HashStringBenchmark.java)/** Benchmarks for the hashing of UTF-8 strings. */
MessageDigestAlgorithmBenchmark (/android/guava-tests/benchmark/com/google/common/hash/MessageDigestAlgorithmBenchmark.java)/**
 * Benchmarks for comparing {@link MessageDigest}s and {@link com.google.common.hash.HashFunction}s
 * that wrap {@link MessageDigest}s.
 *
 * <p>Parameters for the benchmark are:
 *
 * <ul>
 *   <li>size: The length of the byte array to hash.
 *   <li>algorithm: the algorithm to hash with (e.g. MD5, SHA1, etc.).
 *   <li>hashMethod: how to hash the data (using the Hashing API or the MessageDigest API).
 * </ul>
 *
 * @author Kurt Alfred Kluever
 */
MessageDigestCreationBenchmark (/android/guava-tests/benchmark/com/google/common/hash/MessageDigestCreationBenchmark.java)/**
 * Benchmarks for comparing instance creation of {@link MessageDigest}s.
 *
 * @author Kurt Alfred Kluever
 */
BaseEncodingBenchmark (/android/guava-tests/benchmark/com/google/common/io/BaseEncodingBenchmark.java)/** Benchmark for {@code BaseEncoding} performance. */
ApacheBenchmark (/android/guava-tests/benchmark/com/google/common/math/ApacheBenchmark.java)/**
 * Benchmarks against the Apache Commons Math utilities.
 *
 * <p>Note: the Apache benchmarks are not open sourced to avoid the extra dependency.
 *
 * @author Louis Wasserman
 */
BigIntegerMathBenchmark (/android/guava-tests/benchmark/com/google/common/math/BigIntegerMathBenchmark.java)/**
 * Benchmarks for the non-rounding methods of {@code BigIntegerMath}.
 *
 * @author Louis Wasserman
 */
BigIntegerMathRoundingBenchmark (/android/guava-tests/benchmark/com/google/common/math/BigIntegerMathRoundingBenchmark.java)/**
 * Benchmarks for the rounding methods of {@code BigIntegerMath}.
 *
 * @author Louis Wasserman
 */
DoubleMathBenchmark (/android/guava-tests/benchmark/com/google/common/math/DoubleMathBenchmark.java)/**
 * Tests for the non-rounding methods of {@code DoubleMath}.
 *
 * @author Louis Wasserman
 */
DoubleMathRoundingBenchmark (/android/guava-tests/benchmark/com/google/common/math/DoubleMathRoundingBenchmark.java)/**
 * Benchmarks for the rounding methods of {@code DoubleMath}.
 *
 * @author Louis Wasserman
 */
IntMathBenchmark (/android/guava-tests/benchmark/com/google/common/math/IntMathBenchmark.java)/**
 * Benchmarks for the non-rounding methods of {@code IntMath}.
 *
 * @author Louis Wasserman
 */
IntMathRoundingBenchmark (/android/guava-tests/benchmark/com/google/common/math/IntMathRoundingBenchmark.java)/**
 * Benchmarks for the rounding methods of {@code IntMath}.
 *
 * @author Louis Wasserman
 */
LessThanBenchmark (/android/guava-tests/benchmark/com/google/common/math/LessThanBenchmark.java)/**
 * Benchmarks for various ways of writing the expression {@code foo + ((bar < baz) ? 1 : 0)}.
 *
 * @author Louis Wasserman
 */
LongMathBenchmark (/android/guava-tests/benchmark/com/google/common/math/LongMathBenchmark.java)/**
 * Benchmarks for the non-rounding methods of {@code LongMath}.
 *
 * @author Louis Wasserman
 */
LongMathRoundingBenchmark (/android/guava-tests/benchmark/com/google/common/math/LongMathRoundingBenchmark.java)/**
 * Benchmarks for the rounding methods of {@code LongMath}.
 *
 * @author Louis Wasserman
 */
QuantilesBenchmark (/android/guava-tests/benchmark/com/google/common/math/QuantilesBenchmark.java)/** Benchmarks some algorithms providing the same functionality as {@link Quantiles}. */
StatsBenchmark (/android/guava-tests/benchmark/com/google/common/math/StatsBenchmark.java)/**
 * Benchmarks for various algorithms for computing the mean and/or variance.
 *
 * @author Louis Wasserman
 */
UnsignedBytesBenchmark (/android/guava-tests/benchmark/com/google/common/primitives/UnsignedBytesBenchmark.java)/**
 * Microbenchmark for {@link UnsignedBytes}.
 *
 * @author Hiroshi Yamauchi
 */
UnsignedLongsBenchmark (/android/guava-tests/benchmark/com/google/common/primitives/UnsignedLongsBenchmark.java)/**
 * Benchmarks for certain methods of {@code UnsignedLongs}.
 *
 * @author Eamonn McManus
 */
AbstractFutureFootprintBenchmark (/android/guava-tests/benchmark/com/google/common/util/concurrent/AbstractFutureFootprintBenchmark.java)/** Measures the size of AbstractFuture implementations. */
CycleDetectingLockFactoryBenchmark (/android/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java)/**
 * Benchmarks for {@link CycleDetectingLockFactory}.
 *
 * @author Darick Tong
 */
ExecutionListBenchmark (/android/guava-tests/benchmark/com/google/common/util/concurrent/ExecutionListBenchmark.java)/** Benchmarks for {@link ExecutionList}. */
FuturesGetCheckedBenchmark (/android/guava-tests/benchmark/com/google/common/util/concurrent/FuturesGetCheckedBenchmark.java)/** Microbenchmark for {@link Futures#getChecked}. */
Itr (/android/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java)/** Iterator for MonitorBasedArrayBlockingQueue */
MonitorBasedArrayBlockingQueue (/android/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java)/**
 * A bounded {@linkplain BlockingQueue blocking queue} backed by an array. This queue orders
 * elements FIFO (first-in-first-out). The <em>head</em> of the queue is that element that has been
 * on the queue the longest time. The <em>tail</em> of the queue is that element that has been on
 * the queue the shortest time. New elements are inserted at the tail of the queue, and the queue
 * retrieval operations obtain elements at the head of the queue.
 *
 * <p>This is a classic &quot;bounded buffer&quot;, in which a fixed-sized array holds elements
 * inserted by producers and extracted by consumers. Once created, the capacity cannot be increased.
 * Attempts to <tt>put</tt> an element into a full queue will result in the operation blocking;
 * attempts to <tt>take</tt> an element from an empty queue will similarly block.
 *
 * <p>This class supports an optional fairness policy for ordering waiting producer and consumer
 * threads. By default, this ordering is not guaranteed. However, a queue constructed with fairness
 * set to <tt>true</tt> grants threads access in FIFO order. Fairness generally decreases throughput
 * but reduces variability and avoids starvation.
 *
 * <p>This class and its iterator implement all of the <em>optional</em> methods of the {@link
 * Collection} and {@link Iterator} interfaces.
 *
 * @author Doug Lea
 * @author Justin T. Sampson
 * @param <E> the type of elements held in this collection
 */
Itr (/android/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java)/** Snapshot iterator that works off copy of underlying q array. */
MonitorBasedPriorityBlockingQueue (/android/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java)/**
 * An unbounded {@linkplain BlockingQueue blocking queue} that uses the same ordering rules as class
 * {@link PriorityQueue} and supplies blocking retrieval operations. While this queue is logically
 * unbounded, attempted additions may fail due to resource exhaustion (causing
 * <tt>OutOfMemoryError</tt>). This class does not permit <tt>null</tt> elements. A priority queue
 * relying on {@linkplain Comparable natural ordering} also does not permit insertion of
 * non-comparable objects (doing so results in <tt>ClassCastException</tt>).
 *
 * <p>This class and its iterator implement all of the <em>optional</em> methods of the {@link
 * Collection} and {@link Iterator} interfaces. The Iterator provided in method {@link #iterator()}
 * is <em>not</em> guaranteed to traverse the elements of the MonitorBasedPriorityBlockingQueue in
 * any particular order. If you need ordered traversal, consider using
 * <tt>Arrays.sort(pq.toArray())</tt>. Also, method <tt>drainTo</tt> can be used to <em>remove</em>
 * some or all elements in priority order and place them in another collection.
 *
 * <p>Operations on this class make no guarantees about the ordering of elements with equal
 * priority. If you need to enforce an ordering, you can define custom classes or comparators that
 * use a secondary key to break ties in primary priority values. For example, here is a class that
 * applies first-in-first-out tie-breaking to comparable elements. To use it, you would insert a
 * <tt>new FIFOEntry(anEntry)</tt> instead of a plain entry object.
 *
 * <pre>
 * class FIFOEntry&lt;E extends Comparable&lt;? super E&gt;&gt;
 *     implements Comparable&lt;FIFOEntry&lt;E&gt;&gt; {
 *   final static AtomicLong seq = new AtomicLong();
 *   final long seqNum;
 *   final E entry;
 *   public FIFOEntry(E entry) {
 *     seqNum = seq.getAndIncrement();
 *     this.entry = entry;
 *   }
 *   public E getEntry() { return entry; }
 *   public int compareTo(FIFOEntry&lt;E&gt; other) {
 *     int res = entry.compareTo(other.entry);
 *     if (res == 0 &amp;&amp; other.entry != this.entry)
 *       res = (seqNum &lt; other.seqNum ? -1 : 1);
 *     return res;
 *   }
 * }</pre>
 *
 * @author Doug Lea
 * @author Justin T. Sampson
 * @param <E> the type of elements held in this collection
 */
MonitorBenchmark (/android/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBenchmark.java)/**
 * Benchmarks for {@link Monitor}.
 *
 * @author Justin T. Sampson
 */
MoreExecutorsDirectExecutorBenchmark (/android/guava-tests/benchmark/com/google/common/util/concurrent/MoreExecutorsDirectExecutorBenchmark.java)/**
 * A benchmark comparing the {@link MoreExecutors#newDirectExecutorService()} to {@link
 * MoreExecutors#directExecutor}.
 */
SingleThreadAbstractFutureBenchmark (/android/guava-tests/benchmark/com/google/common/util/concurrent/SingleThreadAbstractFutureBenchmark.java)/** A benchmark that times how long it takes to add a given number of */
StripedBenchmark (/android/guava-tests/benchmark/com/google/common/util/concurrent/StripedBenchmark.java)/** A benchmark comparing the various striped implementations. */
AbstractIteratorTest (/android/guava-tests/test/com/google/common/base/AbstractIteratorTest.java)/**
 * Unit test for {@code AbstractIterator}.
 *
 * @author Kevin Bourrillion
 */
AsciiTest (/android/guava-tests/test/com/google/common/base/AsciiTest.java)/**
 * Unit test for {@link Ascii}.
 *
 * @author Craig Berry
 */
BenchmarkHelpers (/android/guava-tests/test/com/google/common/base/BenchmarkHelpers.java)/**
 * Common benchmarking utilities.
 *
 * @author Christopher Swenson
 * @author Louis Wasserman
 */
CaseFormatTest (/android/guava-tests/test/com/google/common/base/CaseFormatTest.java)/**
 * Unit test for {@link CaseFormat}.
 *
 * @author Mike Bostock
 */
CharMatcherTest (/android/guava-tests/test/com/google/common/base/CharMatcherTest.java)/**
 * Unit test for {@link CharMatcher}.
 *
 * @author Kevin Bourrillion
 */
CharsetsTest (/android/guava-tests/test/com/google/common/base/CharsetsTest.java)/**
 * Unit test for {@link Charsets}.
 *
 * @author Mike Bostock
 */
ConverterTest (/android/guava-tests/test/com/google/common/base/ConverterTest.java)/** Unit tests for {@link Converter}. */
DefaultsTest (/android/guava-tests/test/com/google/common/base/DefaultsTest.java)/**
 * Unit test for {@link Defaults}.
 *
 * @author Jige Yu
 */
EnumsTest (/android/guava-tests/test/com/google/common/base/EnumsTest.java)/**
 * Tests for {@link Enums}.
 *
 * @author Steve McKay
 */
EquivalenceTest (/android/guava-tests/test/com/google/common/base/EquivalenceTest.java)/**
 * Unit test for {@link Equivalence}.
 *
 * @author Jige Yu
 */
FinalizableReferenceQueueTest (/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueTest.java)/**
 * Unit test for {@link FinalizableReferenceQueue}.
 *
 * @author Bob Lee
 */
FunctionsTest (/android/guava-tests/test/com/google/common/base/FunctionsTest.java)/**
 * Tests for {@link Functions}.
 *
 * @author Mike Bostock
 * @author Vlad Patryshev
 */
JoinerTest (/android/guava-tests/test/com/google/common/base/JoinerTest.java)/**
 * Unit test for {@link Joiner}.
 *
 * @author Kevin Bourrillion
 */
ObjectsTest (/android/guava-tests/test/com/google/common/base/ObjectsTest.java)/**
 * Tests for {@link Objects}.
 *
 * @author Laurence Gonsalves
 */
OptionalTest (/android/guava-tests/test/com/google/common/base/OptionalTest.java)/**
 * Unit test for {@link Optional}.
 *
 * @author Kurt Alfred Kluever
 */
PreconditionsTest (/android/guava-tests/test/com/google/common/base/PreconditionsTest.java)/**
 * Unit test for {@link Preconditions}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
IsOdd (/android/guava-tests/test/com/google/common/base/PredicatesTest.java)/** Instantiable predicate with reasonable hashCode() and equals() methods. */
PredicatesTest (/android/guava-tests/test/com/google/common/base/PredicatesTest.java)/**
 * Unit test for {@link Predicates}.
 *
 * @author Kevin Bourrillion
 */
SplitterTest (/android/guava-tests/test/com/google/common/base/SplitterTest.java)/** @author Julien Silland */
StandardSystemPropertyTest (/android/guava-tests/test/com/google/common/base/StandardSystemPropertyTest.java)/**
 * Tests for {@link StandardSystemProperty}.
 *
 * @author Kurt Alfred Kluever
 */
StopwatchTest (/android/guava-tests/test/com/google/common/base/StopwatchTest.java)/**
 * Unit test for {@link Stopwatch}.
 *
 * @author Kevin Bourrillion
 */
StringsTest (/android/guava-tests/test/com/google/common/base/StringsTest.java)/**
 * Unit test for {@link Strings}.
 *
 * @author Kevin Bourrillion
 */
SuppliersTest (/android/guava-tests/test/com/google/common/base/SuppliersTest.java)/**
 * Tests com.google.common.base.Suppliers.
 *
 * @author Laurence Gonsalves
 * @author Harry Heymann
 */
ThrowablesTest (/android/guava-tests/test/com/google/common/base/ThrowablesTest.java)/**
 * Unit test for {@link Throwables}.
 *
 * @author Kevin Bourrillion
 */
TestClass (/android/guava-tests/test/com/google/common/base/ToStringHelperTest.java)/** Test class for testing formatting of inner classes. */
ToStringHelperTest (/android/guava-tests/test/com/google/common/base/ToStringHelperTest.java)/**
 * Tests for {@link MoreObjects#toStringHelper(Object)}.
 *
 * @author Jason Lee
 */
Utf8Test (/android/guava-tests/test/com/google/common/base/Utf8Test.java)/**
 * Unit tests for {@link Utf8}.
 *
 * @author Jon Perlow
 * @author Martin Buchholz
 * @author Clément Roux
 */
VerifyTest (/android/guava-tests/test/com/google/common/base/VerifyTest.java)/** Unit test for {@link com.google.common.base.Verify}. */
AbstractCacheTest (/android/guava-tests/test/com/google/common/cache/AbstractCacheTest.java)/**
 * Unit test for {@link AbstractCache}.
 *
 * @author Charles Fry
 */
AbstractLoadingCacheTest (/android/guava-tests/test/com/google/common/cache/AbstractLoadingCacheTest.java)/**
 * Unit test for {@link AbstractLoadingCache}.
 *
 * @author Charles Fry
 */
CacheBuilderFactory (/android/guava-tests/test/com/google/common/cache/CacheBuilderFactory.java)/**
 * Helper class for creating {@link CacheBuilder} instances with all combinations of several sets of
 * parameters.
 *
 * @author mike nonemacher
 */
CacheBuilderGwtTest (/android/guava-tests/test/com/google/common/cache/CacheBuilderGwtTest.java)/**
 * Test suite for {@link CacheBuilder}. TODO(cpovirk): merge into CacheBuilderTest?
 *
 * @author Jon Donovan
 */
CacheBuilderSpecTest (/android/guava-tests/test/com/google/common/cache/CacheBuilderSpecTest.java)/**
 * Tests CacheBuilderSpec. TODO(user): tests of a few invalid input conditions, boundary
 * conditions.
 *
 * @author Adam Winer
 */
CacheBuilderTest (/android/guava-tests/test/com/google/common/cache/CacheBuilderTest.java)/** Unit tests for CacheBuilder. */
CacheEvictionTest (/android/guava-tests/test/com/google/common/cache/CacheEvictionTest.java)/**
 * Tests relating to cache eviction: what does and doesn't count toward maximumSize, what happens
 * when maximumSize is reached, etc.
 *
 * @author mike nonemacher
 */
CacheExpirationTest (/android/guava-tests/test/com/google/common/cache/CacheExpirationTest.java)/**
 * Tests relating to cache expiration: make sure entries expire at the right times, make sure
 * expired entries don't show up, etc.
 *
 * @author mike nonemacher
 */
CacheLoaderTest (/android/guava-tests/test/com/google/common/cache/CacheLoaderTest.java)/**
 * Unit tests for {@link CacheLoader}.
 *
 * @author Charles Fry
 */
CacheLoadingTest (/android/guava-tests/test/com/google/common/cache/CacheLoadingTest.java)/**
 * Tests relating to cache loading: concurrent loading, exceptions during loading, etc.
 *
 * @author mike nonemacher
 */
CacheManualTest (/android/guava-tests/test/com/google/common/cache/CacheManualTest.java)/** @author Charles Fry */
CacheReferencesTest (/android/guava-tests/test/com/google/common/cache/CacheReferencesTest.java)/**
 * Tests of basic {@link LoadingCache} operations with all possible combinations of key & value
 * strengths.
 *
 * @author mike nonemacher
 */
CacheRefreshTest (/android/guava-tests/test/com/google/common/cache/CacheRefreshTest.java)/**
 * Tests relating to automatic cache refreshing.
 *
 * @author Charles Fry
 */
CacheStatsTest (/android/guava-tests/test/com/google/common/cache/CacheStatsTest.java)/**
 * Unit test for {@link CacheStats}.
 *
 * @author Charles Fry
 */
CacheTesting (/android/guava-tests/test/com/google/common/cache/CacheTesting.java)/**
 * A collection of utilities for {@link Cache} testing.
 *
 * @author mike nonemacher
 */
OnlyGet (/android/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java)/** Make sure that all methods are forwarded. */
ForwardingCacheTest (/android/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java)/**
 * Unit test for {@link ForwardingCache}.
 *
 * @author Charles Fry
 */
OnlyGet (/android/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java)/** Make sure that all methods are forwarded. */
ForwardingLoadingCacheTest (/android/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java)/**
 * Unit test for {@link ForwardingLoadingCache}.
 *
 * @author Charles Fry
 */
LocalCacheTest (/android/guava-tests/test/com/google/common/cache/LocalCacheTest.java)/** @author Charles Fry */
LocalLoadingCacheTest (/android/guava-tests/test/com/google/common/cache/LocalLoadingCacheTest.java)/** @author Charles Fry */
LongAdderTest (/android/guava-tests/test/com/google/common/cache/LongAdderTest.java)/** Unit tests for {@link LongAdder}. */
NullCacheTest (/android/guava-tests/test/com/google/common/cache/NullCacheTest.java)/**
 * {@link LoadingCache} tests for caches with a maximum size of zero.
 *
 * @author mike nonemacher
 */
RemovalNotificationTest (/android/guava-tests/test/com/google/common/cache/RemovalNotificationTest.java)/**
 * Unit tests of {@link RemovalNotification}.
 *
 * @author Ben Yu
 */
CountingLoader (/android/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java)/**
   * Returns a {@code new Object()} for every request, and increments a counter for every request.
   * The count is accessible via {@link #getCount}.
   */
IncrementingLoader (/android/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java)/**
   * Returns a {@code new Object()} for every request, and increments a counter for every request.
   * An {@code Integer} loader that returns the key for {@code load} requests, and increments the
   * old value on {@code reload} requests. The load counts are accessible via {@link #getLoadCount}
   * and {@link #getReloadCount}.
   */
TestingCacheLoaders (/android/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java)/**
 * Utility {@link CacheLoader} implementations intended for use in testing.
 *
 * @author mike nonemacher
 */
QueuingRemovalListener (/android/guava-tests/test/com/google/common/cache/TestingRemovalListeners.java)/** {@link RemovalListener} that adds all {@link RemovalNotification} objects to a queue. */
CountingRemovalListener (/android/guava-tests/test/com/google/common/cache/TestingRemovalListeners.java)/**
   * {@link RemovalListener} that counts each {@link RemovalNotification} it receives, and provides
   * access to the most-recently received one.
   */
NullRemovalListener (/android/guava-tests/test/com/google/common/cache/TestingRemovalListeners.java)/** No-op {@link RemovalListener}. */
TestingRemovalListeners (/android/guava-tests/test/com/google/common/cache/TestingRemovalListeners.java)/**
 * Utility {@link RemovalListener} implementations intended for use in testing.
 *
 * @author mike nonemacher
 */
TestingWeighers (/android/guava-tests/test/com/google/common/cache/TestingWeighers.java)/**
 * Utility {@link Weigher} implementations intended for use in testing.
 *
 * @author Charles Fry
 */
AbstractBiMapTest (/android/guava-tests/test/com/google/common/collect/AbstractBiMapTest.java)/**
 * Tests for {@code AbstractBiMap}.
 *
 * @author Mike Bostock
 */
AbstractImmutableSetTest (/android/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java)/**
 * Base class for {@link ImmutableSet} and {@link ImmutableSortedSet} tests.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
AbstractImmutableTableTest (/android/guava-tests/test/com/google/common/collect/AbstractImmutableTableTest.java)/**
 * Tests {@link ImmutableTable}
 *
 * @author Gregory Kick
 */
AbstractIteratorTest (/android/guava-tests/test/com/google/common/collect/AbstractIteratorTest.java)/**
 * Unit test for {@code AbstractIterator}.
 *
 * @author Kevin Bourrillion
 */
AbstractMapEntryTest (/android/guava-tests/test/com/google/common/collect/AbstractMapEntryTest.java)/**
 * Tests for {@code AbstractMapEntry}.
 *
 * @author Mike Bostock
 */
AbstractMultimapAsMapImplementsMapTest (/android/guava-tests/test/com/google/common/collect/AbstractMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for an arbitrary multimap with {@link MapInterfaceTest}.
 *
 * @author George van den Driessche
 * @author Jared Levy
 */
AbstractRangeSetTest (/android/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java)/**
 * Base class for {@link RangeSet} tests.
 *
 * @author Louis Wasserman
 */
AbstractSequentialIteratorTest (/android/guava-tests/test/com/google/common/collect/AbstractSequentialIteratorTest.java)/** Tests for {@link AbstractSequentialIterator}. */
AbstractTableReadTest (/android/guava-tests/test/com/google/common/collect/AbstractTableReadTest.java)/**
 * Test cases for {@link Table} read operations.
 *
 * @author Jared Levy
 */
AbstractTableTest (/android/guava-tests/test/com/google/common/collect/AbstractTableTest.java)/**
 * Test cases for a {@link Table} implementation supporting reads and writes.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
ArrayListMultimapTest (/android/guava-tests/test/com/google/common/collect/ArrayListMultimapTest.java)/**
 * Unit tests for {@code ArrayListMultimap}.
 *
 * @author Jared Levy
 */
ArrayTableTest (/android/guava-tests/test/com/google/common/collect/ArrayTableTest.java)/**
 * Test cases for {@link ArrayTable}.
 *
 * @author Jared Levy
 */
CollectionsImplEnum (/android/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java)/** So far, this is the best way to test various implementations of {@link Set} subclasses. */
BenchmarkHelpers (/android/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java)/**
 * Helper classes for various benchmarks.
 *
 * @author Christopher Swenson
 */
CollectionBenchmarkSampleData (/android/guava-tests/test/com/google/common/collect/CollectionBenchmarkSampleData.java)/**
 * Package up sample data for common collections benchmarking.
 *
 * @author Nicholaus Shupe
 */
Collections2Test (/android/guava-tests/test/com/google/common/collect/Collections2Test.java)/**
 * Tests for {@link Collections2}.
 *
 * @author Chris Povirk
 * @author Jared Levy
 */
CompactHashMapTest (/android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java)/**
 * Tests for {@code CompactHashMap}.
 *
 * @author Louis Wasserman
 */
CompactHashSetTest (/android/guava-tests/test/com/google/common/collect/CompactHashSetTest.java)/**
 * Tests for CompactHashSet.
 *
 * @author Dimitris Andreou
 */
CompactLinkedHashMapTest (/android/guava-tests/test/com/google/common/collect/CompactLinkedHashMapTest.java)/**
 * Tests for {@code CompactLinkedHashMap}.
 *
 * @author Louis Wasserman
 */
CompactLinkedHashSetTest (/android/guava-tests/test/com/google/common/collect/CompactLinkedHashSetTest.java)/**
 * Tests for CompactLinkedHashSet.
 *
 * @author Dimitris Andreou
 */
ComparatorsTest (/android/guava-tests/test/com/google/common/collect/ComparatorsTest.java)/**
 * Tests for {@code Comparators}.
 *
 * @author Louis Wasserman
 */
ComparisonChainTest (/android/guava-tests/test/com/google/common/collect/ComparisonChainTest.java)/**
 * Unit test for {@link ComparisonChain}.
 *
 * @author Kevin Bourrillion
 */
ConcurrentHashMultisetTest (/android/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java)/**
 * Test case for {@link ConcurrentHashMultiset}.
 *
 * @author Cliff L. Biffle
 * @author mike nonemacher
 */
ContiguousSetTest (/android/guava-tests/test/com/google/common/collect/ContiguousSetTest.java)/** @author Gregory Kick */
CountTest (/android/guava-tests/test/com/google/common/collect/CountTest.java)/**
 * Tests for {@code Count}.
 *
 * @author Louis Wasserman
 */
DiscreteDomainTest (/android/guava-tests/test/com/google/common/collect/DiscreteDomainTest.java)/**
 * Tests for {@link DiscreteDomain}.
 *
 * @author Chris Povirk
 */
EmptyImmutableTableTest (/android/guava-tests/test/com/google/common/collect/EmptyImmutableTableTest.java)/**
 * Tests {@link EmptyImmutableTable}
 *
 * @author Gregory Kick
 */
EnumBiMapTest (/android/guava-tests/test/com/google/common/collect/EnumBiMapTest.java)/**
 * Tests for {@code EnumBiMap}.
 *
 * @author Mike Bostock
 * @author Jared Levy
 */
EnumHashBiMapTest (/android/guava-tests/test/com/google/common/collect/EnumHashBiMapTest.java)/**
 * Tests for {@code EnumHashBiMap}.
 *
 * @author Mike Bostock
 */
EnumMultisetTest (/android/guava-tests/test/com/google/common/collect/EnumMultisetTest.java)/**
 * Tests for an {@link EnumMultiset}.
 *
 * @author Jared Levy
 */
EvictingQueueTest (/android/guava-tests/test/com/google/common/collect/EvictingQueueTest.java)/**
 * Tests for {@link EvictingQueue}.
 *
 * @author Kurt Alfred Kluever
 */
MethodSignature (/android/guava-tests/test/com/google/common/collect/FauxveridesTest.java)/**
   * Not really a signature -- just the parts that affect whether one method is a fauxveride of a
   * method from an ancestor class.
   *
   * <p>See JLS 8.4.2 for the definition of the related "override-equivalent."
   */
FauxveridesTest (/android/guava-tests/test/com/google/common/collect/FauxveridesTest.java)/**
 * Tests that all {@code public static} methods "inherited" from superclasses are "overridden" in
 * each immutable-collection class. This ensures, for example, that a call written "{@code
 * ImmutableSortedSet.copyOf()}" cannot secretly be a call to {@code ImmutableSet.copyOf()}.
 *
 * @author Chris Povirk
 */
FilteredCollectionsTest (/android/guava-tests/test/com/google/common/collect/FilteredCollectionsTest.java)/**
 * Tests for filtered collection views.
 *
 * @author Louis Wasserman
 */
FilteredMultimapTest (/android/guava-tests/test/com/google/common/collect/FilteredMultimapTest.java)/**
 * Unit tests for {@link Multimaps} filtering methods.
 *
 * @author Jared Levy
 */
FluentIterableTest (/android/guava-tests/test/com/google/common/collect/FluentIterableTest.java)/**
 * Unit test for {@link FluentIterable}.
 *
 * @author Marcin Mikosik
 */
ForMapMultimapAsMapImplementsMapTest (/android/guava-tests/test/com/google/common/collect/ForMapMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for a {@link Multimaps#forMap} multimap with {@link
 * MapInterfaceTest}.
 *
 * @author Jared Levy
 */
ForwardingCollectionTest (/android/guava-tests/test/com/google/common/collect/ForwardingCollectionTest.java)/**
 * Tests for {@link ForwardingCollection}.
 *
 * @author Robert Konigsberg
 * @author Hayward Chan
 * @author Louis Wasserman
 */
ForwardingConcurrentMapTest (/android/guava-tests/test/com/google/common/collect/ForwardingConcurrentMapTest.java)/**
 * Tests for {@link ForwardingConcurrentMap}.
 *
 * @author Jared Levy
 */
ForwardingDequeTest (/android/guava-tests/test/com/google/common/collect/ForwardingDequeTest.java)/**
 * Tests for {@code ForwardingDeque}.
 *
 * @author Kurt Alfred Kluever
 */
ForwardingListIteratorTest (/android/guava-tests/test/com/google/common/collect/ForwardingListIteratorTest.java)/**
 * Tests for {@code ForwardingListIterator}.
 *
 * @author Robert Konigsberg
 */
ForwardingListMultimapTest (/android/guava-tests/test/com/google/common/collect/ForwardingListMultimapTest.java)/**
 * Unit test for {@link ForwardingListMultimap}.
 *
 * @author Kurt Alfred Kluever
 */
ForwardingListTest (/android/guava-tests/test/com/google/common/collect/ForwardingListTest.java)/**
 * Tests for {@code ForwardingList}.
 *
 * @author Robert Konigsberg
 * @author Louis Wasserman
 */
ForwardingMapTest (/android/guava-tests/test/com/google/common/collect/ForwardingMapTest.java)/**
 * Unit test for {@link ForwardingMap}.
 *
 * @author Hayward Chan
 * @author Louis Wasserman
 */
ForwardingMultimapTest (/android/guava-tests/test/com/google/common/collect/ForwardingMultimapTest.java)/**
 * Unit test for {@link ForwardingMultimap}.
 *
 * @author Hayward Chan
 */
ForwardingMultisetTest (/android/guava-tests/test/com/google/common/collect/ForwardingMultisetTest.java)/**
 * Tests for {@link ForwardingMultiset}.
 *
 * @author Hayward Chan
 * @author Louis Wasserman
 */
ForwardingNavigableMapTest (/android/guava-tests/test/com/google/common/collect/ForwardingNavigableMapTest.java)/**
 * Tests for {@code ForwardingNavigableMap}.
 *
 * @author Robert Konigsberg
 * @author Louis Wasserman
 */
ForwardingNavigableSetTest (/android/guava-tests/test/com/google/common/collect/ForwardingNavigableSetTest.java)/**
 * Tests for {@code ForwardingNavigableSet}.
 *
 * @author Louis Wasserman
 */
ForwardingObjectTest (/android/guava-tests/test/com/google/common/collect/ForwardingObjectTest.java)/**
 * Tests for {@code ForwardingObject}.
 *
 * @author Mike Bostock
 */
ForwardingQueueTest (/android/guava-tests/test/com/google/common/collect/ForwardingQueueTest.java)/**
 * Tests for {@code ForwardingQueue}.
 *
 * @author Robert Konigsberg
 * @author Louis Wasserman
 */
ForwardingSetMultimapTest (/android/guava-tests/test/com/google/common/collect/ForwardingSetMultimapTest.java)/**
 * Unit test for {@link ForwardingSetMultimap}.
 *
 * @author Kurt Alfred Kluever
 */
ForwardingSetTest (/android/guava-tests/test/com/google/common/collect/ForwardingSetTest.java)/**
 * Tests for {@code ForwardingSet}.
 *
 * @author Robert Konigsberg
 * @author Louis Wasserman
 */
ForwardingSortedMapImplementsMapTest (/android/guava-tests/test/com/google/common/collect/ForwardingSortedMapImplementsMapTest.java)/**
 * Tests for {@link ForwardingSortedMap} using {@link MapInterfaceTest}.
 *
 * @author George van den Driessche
 */
ForwardingSortedMapTest (/android/guava-tests/test/com/google/common/collect/ForwardingSortedMapTest.java)/**
 * Tests for {@code ForwardingSortedMap}.
 *
 * @author Robert KonigsbergSortedMapFeature
 */
ForwardingSortedMultisetTest (/android/guava-tests/test/com/google/common/collect/ForwardingSortedMultisetTest.java)/**
 * Tests for {@link ForwardingSortedMultiset}.
 *
 * @author Louis Wasserman
 */
ForwardingSortedSetMultimapTest (/android/guava-tests/test/com/google/common/collect/ForwardingSortedSetMultimapTest.java)/**
 * Unit test for {@link ForwardingSortedSetMultimap}.
 *
 * @author Kurt Alfred Kluever
 */
ForwardingSortedSetTest (/android/guava-tests/test/com/google/common/collect/ForwardingSortedSetTest.java)/**
 * Tests for {@code ForwardingSortedSet}.
 *
 * @author Louis Wasserman
 */
ForwardingTableTest (/android/guava-tests/test/com/google/common/collect/ForwardingTableTest.java)/**
 * Tests {@link ForwardingTable}.
 *
 * @author Gregory Kick
 */
GeneralRangeTest (/android/guava-tests/test/com/google/common/collect/GeneralRangeTest.java)/**
 * Tests for {@code GeneralRange}.
 *
 * @author Louis Wasserman
 */
HashBasedTableTest (/android/guava-tests/test/com/google/common/collect/HashBasedTableTest.java)/**
 * Test cases for {@link HashBasedTable}.
 *
 * @author Jared Levy
 */
HashBiMapTest (/android/guava-tests/test/com/google/common/collect/HashBiMapTest.java)/**
 * Tests for {@link HashBiMap}.
 *
 * @author Mike Bostock
 */
HashingTest (/android/guava-tests/test/com/google/common/collect/HashingTest.java)/** Tests for {@code Hashing}. */
HashMultimapTest (/android/guava-tests/test/com/google/common/collect/HashMultimapTest.java)/**
 * Unit tests for {@link HashMultimap}.
 *
 * @author Jared Levy
 */
HashMultisetTest (/android/guava-tests/test/com/google/common/collect/HashMultisetTest.java)/**
 * Unit test for {@link HashMultiset}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
ImmutableBiMapTest (/android/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java)/**
 * Tests for {@link ImmutableBiMap}.
 *
 * @author Jared Levy
 */
ImmutableClassToInstanceMapTest (/android/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java)/**
 * Unit test for {@link ImmutableClassToInstanceMap}.
 *
 * @author Kevin Bourrillion
 */
ImmutableCollectionTest (/android/guava-tests/test/com/google/common/collect/ImmutableCollectionTest.java)/**
 * Tests for {@code ImmutableCollection}.
 *
 * @author Louis Wasserman
 */
ImmutableEnumMapTest (/android/guava-tests/test/com/google/common/collect/ImmutableEnumMapTest.java)/**
 * Tests for {@code ImmutableEnumMap}.
 *
 * @author Louis Wasserman
 */
ImmutableListMultimapTest (/android/guava-tests/test/com/google/common/collect/ImmutableListMultimapTest.java)/**
 * Tests for {@link ImmutableListMultimap}.
 *
 * @author Jared Levy
 */
ListFrobber (/android/guava-tests/test/com/google/common/collect/ImmutableListTest.java)/** An operation to perform on a list. */
ConcurrentlyMutatedList (/android/guava-tests/test/com/google/common/collect/ImmutableListTest.java)/** A list that mutates itself after every call to each of its {@link List} methods. */
ImmutableListTest (/android/guava-tests/test/com/google/common/collect/ImmutableListTest.java)/**
 * Unit test for {@link ImmutableList}.
 *
 * @author Kevin Bourrillion
 * @author George van den Driessche
 * @author Jared Levy
 */
ImmutableMapTest (/android/guava-tests/test/com/google/common/collect/ImmutableMapTest.java)/**
 * Tests for {@link ImmutableMap}.
 *
 * @author Kevin Bourrillion
 * @author Jesse Wilson
 */
ImmutableMultimapAsMapImplementsMapTest (/android/guava-tests/test/com/google/common/collect/ImmutableMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for an {@link ImmutableMultimap} with {@link MapInterfaceTest}.
 *
 * @author Jared Levy
 */
ImmutableMultimapTest (/android/guava-tests/test/com/google/common/collect/ImmutableMultimapTest.java)/**
 * Tests for {@link ImmutableMultimap}.
 *
 * @author Jared Levy
 */
ImmutableMultisetTest (/android/guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java)/**
 * Tests for {@link ImmutableMultiset}.
 *
 * @author Jared Levy
 */
ImmutableRangeMapTest (/android/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java)/**
 * Tests for {@code ImmutableRangeMap}.
 *
 * @author Louis Wasserman
 */
ImmutableRangeSetTest (/android/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java)/**
 * Tests for {@link ImmutableRangeSet}.
 *
 * @author Louis Wasserman
 */
ImmutableSetMultimapAsMapImplementsMapTest (/android/guava-tests/test/com/google/common/collect/ImmutableSetMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for an {@link ImmutableSetMultimap} with {@link MapInterfaceTest}.
 *
 * @author Mike Ward
 */
ImmutableSetMultimapTest (/android/guava-tests/test/com/google/common/collect/ImmutableSetMultimapTest.java)/**
 * Tests for {@link ImmutableSetMultimap}.
 *
 * @author Mike Ward
 */
ImmutableSetTest (/android/guava-tests/test/com/google/common/collect/ImmutableSetTest.java)/**
 * Unit test for {@link ImmutableSet}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @author Nick Kralevich
 */
ImmutableSortedMapTest (/android/guava-tests/test/com/google/common/collect/ImmutableSortedMapTest.java)/**
 * Tests for {@link ImmutableSortedMap}.
 *
 * @author Kevin Bourrillion
 * @author Jesse Wilson
 * @author Jared Levy
 */
ImmutableSortedMultisetTest (/android/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java)/**
 * Tests for {@link ImmutableSortedMultiset}.
 *
 * @author Louis Wasserman
 */
ImmutableSortedSetTest (/android/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java)/**
 * Unit tests for {@link ImmutableSortedSet}.
 *
 * @author Jared Levy
 */
ImmutableTableTest (/android/guava-tests/test/com/google/common/collect/ImmutableTableTest.java)/**
 * Tests common methods in {@link ImmutableTable}
 *
 * @author Gregory Kick
 */
InternersTest (/android/guava-tests/test/com/google/common/collect/InternersTest.java)/**
 * Unit test for {@link Interners}.
 *
 * @author Kevin Bourrillion
 */
DiesOnIteratorArrayList (/android/guava-tests/test/com/google/common/collect/IterablesTest.java)/**
   * {@link ArrayList} extension that forbids the use of {@link Collection#iterator} for tests that
   * need to prove that it isn't called.
   */
IterablesTest (/android/guava-tests/test/com/google/common/collect/IterablesTest.java)/**
 * Unit test for {@code Iterables}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
PickyIterable (/android/guava-tests/test/com/google/common/collect/IteratorsTest.java)/** An Iterable whose Iterator is rigorous in checking for concurrent modification. */
IteratorsTest (/android/guava-tests/test/com/google/common/collect/IteratorsTest.java)/**
 * Unit test for {@code Iterators}.
 *
 * @author Kevin Bourrillion
 */
LegacyComparable (/android/guava-tests/test/com/google/common/collect/LegacyComparable.java)/**
 * A class that implements {@code Comparable} without generics, such as those found in libraries
 * that support Java 1.4 and before. Our library needs to do the bare minimum to accommodate such
 * types, though their use may still require an explicit type parameter and/or warning suppression.
 *
 * @author Kevin Bourrillion
 */
LinkedHashMultimapTest (/android/guava-tests/test/com/google/common/collect/LinkedHashMultimapTest.java)/**
 * Unit tests for {@code LinkedHashMultimap}.
 *
 * @author Jared Levy
 */
LinkedHashMultisetTest (/android/guava-tests/test/com/google/common/collect/LinkedHashMultisetTest.java)/**
 * Unit test for {@link LinkedHashMultiset}.
 *
 * @author Kevin Bourrillion
 */
LinkedListMultimapTest (/android/guava-tests/test/com/google/common/collect/LinkedListMultimapTest.java)/**
 * Tests for {@code LinkedListMultimap}.
 *
 * @author Mike Bostock
 */
ListExample (/android/guava-tests/test/com/google/common/collect/ListsImplTest.java)/** Handles the creation of lists needed for the tests */
ListsImplTest (/android/guava-tests/test/com/google/common/collect/ListsImplTest.java)/** Tests the package level *impl methods directly using various types of lists. */
ListsTest (/android/guava-tests/test/com/google/common/collect/ListsTest.java)/**
 * Unit test for {@code Lists}.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Jared Levy
 */
MapMakerInternalMapTest (/android/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java)/** @author Charles Fry */
MakerTest (/android/guava-tests/test/com/google/common/collect/MapMakerTest.java)/** Tests for the builder. */
MapMakerTest (/android/guava-tests/test/com/google/common/collect/MapMakerTest.java)/** @author Charles Fry */
MapsCollectionTest (/android/guava-tests/test/com/google/common/collect/MapsCollectionTest.java)/**
 * Test suites for wrappers in {@code Maps}.
 *
 * @author Louis Wasserman
 */
MapsSortedTransformValuesTest (/android/guava-tests/test/com/google/common/collect/MapsSortedTransformValuesTest.java)/**
 * Tests for {@link Maps#transformValues(SortedMap, Function)}.
 *
 * @author Louis Wasserman
 */
MapsTest (/android/guava-tests/test/com/google/common/collect/MapsTest.java)/**
 * Unit test for {@code Maps}.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Jared Levy
 */
MapsTransformValuesTest (/android/guava-tests/test/com/google/common/collect/MapsTransformValuesTest.java)/**
 * Tests for {@link Maps#transformValues}.
 *
 * @author Isaac Shum
 */
MapsTransformValuesUnmodifiableIteratorTest (/android/guava-tests/test/com/google/common/collect/MapsTransformValuesUnmodifiableIteratorTest.java)/**
 * Tests for {@link Maps#transformValues} when the backing map's views have iterators that don't
 * support {@code remove()}.
 *
 * @author Jared Levy
 */
MinMaxPriorityQueueTest (/android/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java)/**
 * Unit test for {@link MinMaxPriorityQueue}.
 *
 * @author Alexei Stolboushkin
 * @author Sverre Sundsdal
 */
MultimapBuilderTest (/android/guava-tests/test/com/google/common/collect/MultimapBuilderTest.java)/**
 * Tests for {@link MultimapBuilder}.
 *
 * @author Louis Wasserman
 */
PopulatableMapAsMultimap (/android/guava-tests/test/com/google/common/collect/MultimapsCollectionTest.java)/**
   * Implements {@code Multimap.put()} -- and no other methods -- for a {@code Map} by ignoring all
   * but the latest value for each key. This class exists only so that we can use {@link
   * MultimapsCollectionTest#populateMultimapForGet(Multimap, String[])} and similar methods to
   * populate a map to be passed to {@link Multimaps#forMap(Map)}. All tests should run against the
   * result of {@link #build()}.
   */
MultimapsCollectionTest (/android/guava-tests/test/com/google/common/collect/MultimapsCollectionTest.java)/**
 * Run collection tests on wrappers from {@link Multimaps}.
 *
 * @author Jared Levy
 */
MultimapsFilterEntriesAsMapTest (/android/guava-tests/test/com/google/common/collect/MultimapsFilterEntriesAsMapTest.java)/**
 * Tests for Multimaps.filterEntries().asMap().
 *
 * @author Jared Levy
 */
MultimapsTest (/android/guava-tests/test/com/google/common/collect/MultimapsTest.java)/**
 * Unit test for {@code Multimaps}.
 *
 * @author Jared Levy
 */
MultimapsTransformValuesAsMapTest (/android/guava-tests/test/com/google/common/collect/MultimapsTransformValuesAsMapTest.java)/**
 * Tests for Multimaps.transformValues().asMap().
 *
 * @author Louis Wasserman
 */
MultisetsCollectionTest (/android/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java)/**
 * Collection tests on wrappers from {@link Multisets}.
 *
 * @author Jared Levy
 */
MultisetsImmutableEntryTest (/android/guava-tests/test/com/google/common/collect/MultisetsImmutableEntryTest.java)/**
 * Tests for {@link Multisets#immutableEntry}.
 *
 * @author Mike Bostock
 */
MultisetsTest (/android/guava-tests/test/com/google/common/collect/MultisetsTest.java)/**
 * Tests for {@link Multisets}.
 *
 * @author Mike Bostock
 * @author Jared Levy
 * @author Louis Wasserman
 */
MutableClassToInstanceMapTest (/android/guava-tests/test/com/google/common/collect/MutableClassToInstanceMapTest.java)/**
 * Unit test of {@link MutableClassToInstanceMap}.
 *
 * @author Kevin Bourrillion
 */
NewCustomTableTest (/android/guava-tests/test/com/google/common/collect/NewCustomTableTest.java)/**
 * Test cases for {@link Tables#newCustomTable}.
 *
 * @author Jared Levy
 */
ObjectArraysTest (/android/guava-tests/test/com/google/common/collect/ObjectArraysTest.java)/**
 * Unit test for {@code ObjectArrays}.
 *
 * @author Kevin Bourrillion
 */
Scenario (/android/guava-tests/test/com/google/common/collect/OrderingTest.java)/**
   * An aggregation of an ordering with a list (of size > 1) that should prove to be in strictly
   * increasing order according to that ordering.
   */
Composite (/android/guava-tests/test/com/google/common/collect/OrderingTest.java)/**
   * A dummy object we create so that we can have something meaningful to have a compound ordering
   * over.
   */
OrderingTest (/android/guava-tests/test/com/google/common/collect/OrderingTest.java)/**
 * Unit tests for {@code Ordering}.
 *
 * @author Jesse Wilson
 */
PeekingIteratorTester (/android/guava-tests/test/com/google/common/collect/PeekingIteratorTest.java)/**
   * Version of {@link IteratorTester} that compares an iterator over a given collection of elements
   * (used as the reference iterator) against a {@code PeekingIterator} that *wraps* such an
   * iterator (used as the target iterator).
   *
   * <p>This IteratorTester makes copies of the master so that it can later verify that {@link
   * PeekingIterator#remove()} removes the same elements as the reference's iterator {@code
   * #remove()}.
   */
ThrowsAtEndIterator (/android/guava-tests/test/com/google/common/collect/PeekingIteratorTest.java)/**
   * This Iterator claims to have more elements than the underlying iterable, but when you try to
   * fetch the extra elements, it throws an unchecked exception.
   */
PeekingIteratorTest (/android/guava-tests/test/com/google/common/collect/PeekingIteratorTest.java)/**
 * Unit test for {@link PeekingIterator}.
 *
 * @author Mick Killianey
 */
RangeNonGwtTest (/android/guava-tests/test/com/google/common/collect/RangeNonGwtTest.java)/**
 * Test cases for {@link Range} which cannot run as GWT tests.
 *
 * @author Gregory Kick
 * @see RangeTest
 */
RangeTest (/android/guava-tests/test/com/google/common/collect/RangeTest.java)/**
 * Unit test for {@link Range}.
 *
 * @author Kevin Bourrillion
 */
RegularImmutableAsListTest (/android/guava-tests/test/com/google/common/collect/RegularImmutableAsListTest.java)/**
 * Tests for {@link RegularImmutableAsList}.
 *
 * @author Louis Wasserman
 */
RegularImmutableTableTest (/android/guava-tests/test/com/google/common/collect/RegularImmutableTableTest.java)/** @author Gregory Kick */
SetOperationsTest (/android/guava-tests/test/com/google/common/collect/SetOperationsTest.java)/**
 * Unit tests for {@link Sets#union}, {@link Sets#intersection} and {@link Sets#difference}.
 *
 * @author Kevin Bourrillion
 */
Base (/android/guava-tests/test/com/google/common/collect/SetsTest.java)/** Simple base class to verify that we handle generics correctly. */
Derived (/android/guava-tests/test/com/google/common/collect/SetsTest.java)/** Simple derived class to verify that we handle generics correctly. */
SetsTest (/android/guava-tests/test/com/google/common/collect/SetsTest.java)/**
 * Unit test for {@code Sets}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
SimpleAbstractMultisetTest (/android/guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java)/**
 * Unit test for {@link AbstractMultiset}.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
SingletonImmutableTableTest (/android/guava-tests/test/com/google/common/collect/SingletonImmutableTableTest.java)/**
 * Tests {@link SingletonImmutableTable}.
 *
 * @author Gregory Kick
 */
SortedIterablesTest (/android/guava-tests/test/com/google/common/collect/SortedIterablesTest.java)/**
 * Unit tests for {@code SortedIterables}.
 *
 * @author Louis Wasserman
 */
SortedListsTest (/android/guava-tests/test/com/google/common/collect/SortedListsTest.java)/**
 * Tests for SortedLists.
 *
 * @author Louis Wasserman
 */
SpecialRandom (/android/guava-tests/test/com/google/common/collect/SpecialRandom.java)/**
 * Utility class for being able to seed a {@link Random} value with a passed in seed from a
 * benchmark parameter.
 *
 * <p>TODO: Remove this class once Caliper has a better way.
 *
 * @author Nicholaus Shupe
 */
SubMapMultimapAsMapImplementsMapTest (/android/guava-tests/test/com/google/common/collect/SubMapMultimapAsMapImplementsMapTest.java)/**
 * Test {@code TreeMultimap.asMap().subMap()} with {@link MapInterfaceTest}.
 *
 * @author Jared Levy
 */
SynchronizedBiMapTest (/android/guava-tests/test/com/google/common/collect/SynchronizedBiMapTest.java)/**
 * Tests for {@code Synchronized#biMap}.
 *
 * @author Mike Bostock
 */
SynchronizedDequeTest (/android/guava-tests/test/com/google/common/collect/SynchronizedDequeTest.java)/**
 * Tests for {@link Synchronized#deque} and {@link Queues#synchronizedDeque}.
 *
 * @author Kurt Alfred Kluever
 */
SynchronizedMapTest (/android/guava-tests/test/com/google/common/collect/SynchronizedMapTest.java)/**
 * Tests for {@code Synchronized#map}.
 *
 * @author Mike Bostock
 */
SynchronizedMultimapTest (/android/guava-tests/test/com/google/common/collect/SynchronizedMultimapTest.java)/**
 * Tests for {@code Synchronized#multimap}.
 *
 * @author Mike Bostock
 */
SynchronizedNavigableMapTest (/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableMapTest.java)/**
 * Tests for {@link Maps#synchronizedNavigableMap(NavigableMap)}.
 *
 * @author Louis Wasserman
 */
SynchronizedNavigableSetTest (/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableSetTest.java)/**
 * Tests for {@link Sets#synchronizedNavigableSet(NavigableSet)}.
 *
 * @author Louis Wasserman
 */
SynchronizedQueueTest (/android/guava-tests/test/com/google/common/collect/SynchronizedQueueTest.java)/**
 * Tests for {@link Synchronized#queue} and {@link Queues#synchronizedQueue}.
 *
 * @author Kurt Alfred Kluever
 */
SynchronizedSetTest (/android/guava-tests/test/com/google/common/collect/SynchronizedSetTest.java)/**
 * Tests for {@code Synchronized#set}.
 *
 * @author Mike Bostock
 */
TableCollectionTest (/android/guava-tests/test/com/google/common/collect/TableCollectionTest.java)/**
 * Collection tests for {@link Table} implementations.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
TablesTest (/android/guava-tests/test/com/google/common/collect/TablesTest.java)/**
 * Tests for {@link Tables}.
 *
 * @author Jared Levy
 */
TablesTransformValuesTest (/android/guava-tests/test/com/google/common/collect/TablesTransformValuesTest.java)/**
 * Test cases for {@link Tables#transformValues}.
 *
 * @author Jared Levy
 */
TopKSelectorTest (/android/guava-tests/test/com/google/common/collect/TopKSelectorTest.java)/**
 * Tests for {@code TopKSelector}.
 *
 * @author Louis Wasserman
 */
TransposedTableTest (/android/guava-tests/test/com/google/common/collect/TransposedTableTest.java)/**
 * Test cases for {@link Tables#transpose}.
 *
 * @author Jared Levy
 */
TreeBasedTableTest (/android/guava-tests/test/com/google/common/collect/TreeBasedTableTest.java)/**
 * Test cases for {@link TreeBasedTable}.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
TreeMultimapExplicitTest (/android/guava-tests/test/com/google/common/collect/TreeMultimapExplicitTest.java)/**
 * Unit tests for {@code TreeMultimap} with explicit comparators.
 *
 * @author Jared Levy
 */
TreeMultimapNaturalTest (/android/guava-tests/test/com/google/common/collect/TreeMultimapNaturalTest.java)/**
 * Unit tests for {@code TreeMultimap} with natural ordering.
 *
 * @author Jared Levy
 */
TreeMultisetTest (/android/guava-tests/test/com/google/common/collect/TreeMultisetTest.java)/**
 * Unit test for {@link TreeMultiset}.
 *
 * @author Neal Kanodia
 */
TreeRangeMapTest (/android/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java)/**
 * Tests for {@code TreeRangeMap}.
 *
 * @author Louis Wasserman
 */
TreeRangeSetTest (/android/guava-tests/test/com/google/common/collect/TreeRangeSetTest.java)/**
 * Tests for {@link TreeRangeSet}.
 *
 * @author Louis Wasserman
 * @author Chris Povirk
 */
TreeTraverserTest (/android/guava-tests/test/com/google/common/collect/TreeTraverserTest.java)/**
 * Tests for {@code TreeTraverser}.
 *
 * @author Louis Wasserman
 */
UnmodifiableIteratorTest (/android/guava-tests/test/com/google/common/collect/UnmodifiableIteratorTest.java)/**
 * Tests for {@link UnmodifiableIterator}.
 *
 * @author Jared Levy
 */
UnmodifiableListIteratorTest (/android/guava-tests/test/com/google/common/collect/UnmodifiableListIteratorTest.java)/**
 * Tests for UnmodifiableListIterator.
 *
 * @author Louis Wasserman
 */
UnmodifiableMultimapAsMapImplementsMapTest (/android/guava-tests/test/com/google/common/collect/UnmodifiableMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for an unmodifiable multimap with {@link MapInterfaceTest}.
 *
 * @author Jared Levy
 */
ArrayBasedCharEscaperTest (/android/guava-tests/test/com/google/common/escape/ArrayBasedCharEscaperTest.java)/** @author David Beaumont */
ArrayBasedEscaperMapTest (/android/guava-tests/test/com/google/common/escape/ArrayBasedEscaperMapTest.java)/** @author David Beaumont */
ArrayBasedUnicodeEscaperTest (/android/guava-tests/test/com/google/common/escape/ArrayBasedUnicodeEscaperTest.java)/** @author David Beaumont */
EscapersTest (/android/guava-tests/test/com/google/common/escape/EscapersTest.java)/** @author David Beaumont */
UnicodeEscaperTest (/android/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java)/**
 * Tests for {@link UnicodeEscaper}.
 *
 * @author David Beaumont
 */
FakeExecutor (/android/guava-tests/test/com/google/common/eventbus/AsyncEventBusTest.java)/**
   * An {@link Executor} wanna-be that simply records the tasks it's given. Arguably the Worst
   * Executor Ever.
   *
   * @author cbiffle
   */
AsyncEventBusTest (/android/guava-tests/test/com/google/common/eventbus/AsyncEventBusTest.java)/**
 * Test case for {@link AsyncEventBus}.
 *
 * @author Cliff Biffle
 */
RecordingSubscriberExceptionHandler (/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java)/** Records thrown exception information. */
Registrator (/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java)/** Runnable which registers a StringCatcher on an event bus and adds it to a list. */
GhostCatcher (/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java)/**
   * A collector for DeadEvents.
   *
   * @author cbiffle
   */
EventBusTest (/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java)/**
 * Test case for {@link EventBus}.
 *
 * @author Cliff Biffle
 */
AnnotatedSubscriberFinderTests (/android/guava-tests/test/com/google/common/eventbus/outside/AnnotatedSubscriberFinderTests.java)/**
 * Test that EventBus finds the correct subscribers.
 *
 * <p>This test must be outside the c.g.c.eventbus package to test correctly.
 *
 * @author Louis Wasserman
 */
OutsideEventBusTest (/android/guava-tests/test/com/google/common/eventbus/outside/OutsideEventBusTest.java)/**
 * Test cases for {@code EventBus} that must not be in the same package.
 *
 * @author Louis Wasserman
 */
ReentrantEventsTest (/android/guava-tests/test/com/google/common/eventbus/ReentrantEventsTest.java)/**
 * Validate that {@link EventBus} behaves carefully when listeners publish their own events.
 *
 * @author Jesse Wilson
 */
StringCatcher (/android/guava-tests/test/com/google/common/eventbus/StringCatcher.java)/**
 * A simple EventSubscriber mock that records Strings.
 *
 * <p>For testing fun, also includes a landmine method that EventBus tests are required <em>not</em>
 * to call ({@link #methodWithoutAnnotation(String)}).
 *
 * @author Cliff Biffle
 */
SubscriberRegistryTest (/android/guava-tests/test/com/google/common/eventbus/SubscriberRegistryTest.java)/**
 * Tests for {@link SubscriberRegistry}.
 *
 * @author Colin Decker
 */
IntentionalException (/android/guava-tests/test/com/google/common/eventbus/SubscriberTest.java)/** Local exception subclass to check variety of exception thrown. */
JudgmentError (/android/guava-tests/test/com/google/common/eventbus/SubscriberTest.java)/** Local Error subclass to check variety of error thrown. */
SubscriberTest (/android/guava-tests/test/com/google/common/eventbus/SubscriberTest.java)/**
 * Tests for {@link Subscriber}.
 *
 * @author Cliff Biffle
 * @author Colin Decker
 */
AbstractDirectedGraphTest (/android/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java)/**
 * Abstract base class for testing implementations of {@link Graph} interface.
 *
 * <p>This class is responsible for testing that a directed implementation of {@link Graph} is
 * correctly handling directed edges. Implementation-dependent test cases are left to subclasses.
 * Test cases that do not require the graph to be directed are found in superclasses.
 */
AbstractDirectedNetworkTest (/android/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java)/**
 * Abstract base class for testing implementations of {@link Network} interface.
 *
 * <p>This class is responsible for testing that a directed implementation of {@link Network} is
 * correctly handling directed edges. Implementation-dependent test cases are left to subclasses.
 * Test cases that do not require the graph to be directed are found in superclasses.
 */
AbstractGraphTest (/android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java)/**
 * Abstract base class for testing implementations of {@link Graph} interface. Graph instances
 * created for testing should have Integer node and String edge objects.
 *
 * <p>Test cases that should be handled similarly in any graph implementation are included in this
 * class. For example, testing that {@code nodes()} method returns the set of the nodes in the
 * graph. The following test cases are left for the subclasses to handle:
 *
 * <ul>
 *   <li>Test cases related to whether the graph is directed, undirected, mutable, or immutable.
 *   <li>Test cases related to the specific implementation of the {@link Graph} interface.
 * </ul>
 *
 * TODO(user): Make this class generic (using <N, E>) for all node and edge types.
 * TODO(user): Differentiate between directed and undirected edge strings.
 */
AbstractNetworkTest (/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java)/**
 * Abstract base class for testing implementations of {@link Network} interface. Network instances
 * created for testing should have Integer node and String edge objects.
 *
 * <p>Test cases that should be handled similarly in any graph implementation are included in this
 * class. For example, testing that {@code nodes()} method returns the set of the nodes in the
 * graph. The following test cases are left for the subclasses to handle:
 *
 * <ul>
 *   <li>Test cases related to whether the graph is directed, undirected, mutable, or immutable.
 *   <li>Test cases related to the specific implementation of the {@link Network} interface.
 * </ul>
 *
 * TODO(user): Make this class generic (using <N, E>) for all node and edge types.
 * TODO(user): Differentiate between directed and undirected edge strings.
 */
AbstractUndirectedGraphTest (/android/guava-tests/test/com/google/common/graph/AbstractUndirectedGraphTest.java)/**
 * Abstract base class for testing undirected implementations of the {@link Graph} interface.
 *
 * <p>This class is responsible for testing that an undirected implementation of {@link Graph} is
 * correctly handling undirected edges. Implementation-dependent test cases are left to subclasses.
 * Test cases that do not require the graph to be undirected are found in superclasses.
 */
AbstractUndirectedNetworkTest (/android/guava-tests/test/com/google/common/graph/AbstractUndirectedNetworkTest.java)/**
 * Abstract base class for testing undirected implementations of the {@link Network} interface.
 *
 * <p>This class is responsible for testing that an undirected implementation of {@link Network} is
 * correctly handling undirected edges. Implementation-dependent test cases are left to subclasses.
 * Test cases that do not require the graph to be undirected are found in superclasses.
 */
ConfigurableDirectedGraphTest (/android/guava-tests/test/com/google/common/graph/ConfigurableDirectedGraphTest.java)/** Tests for a directed {@link ConfigurableMutableGraph} allowing self-loops. */
ConfigurableDirectedMultiNetworkTest (/android/guava-tests/test/com/google/common/graph/ConfigurableDirectedMultiNetworkTest.java)/**
 * Tests for a directed {@link ConfigurableMutableNetwork} allowing parallel edges and self-loops.
 */
ConfigurableDirectedNetworkTest (/android/guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java)/** Tests for a directed {@link ConfigurableMutableNetwork} allowing self-loops. */
ConfigurableSimpleDirectedGraphTest (/android/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedGraphTest.java)/**
 * Tests for a directed {@link ConfigurableMutableGraph}, creating a simple directed graph
 * (self-loop edges are not allowed).
 */
ConfigurableSimpleDirectedNetworkTest (/android/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedNetworkTest.java)/**
 * Tests for a directed {@link ConfigurableMutableNetwork}, creating a simple directed graph
 * (parallel and self-loop edges are not allowed).
 */
ConfigurableSimpleDirectedSortedNetworkTest (/android/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedSortedNetworkTest.java)/**
 * Tests for a directed {@link ConfigurableMutableNetwork}, creating a simple directed sorted graph
 * (parallel and self-loop edges are not allowed).
 *
 * <p>The main purpose of this class is to run the inherited {@link #concurrentIteration} test
 * against a sorted graph so as to cover {@link MapRetrievalCache}.
 */
ConfigurableSimpleUndirectedGraphTest (/android/guava-tests/test/com/google/common/graph/ConfigurableSimpleUndirectedGraphTest.java)/**
 * Tests for an undirected {@link ConfigurableMutableGraph}, creating a simple undirected graph
 * (self-loop edges are not allowed).
 */
ConfigurableSimpleUndirectedNetworkTest (/android/guava-tests/test/com/google/common/graph/ConfigurableSimpleUndirectedNetworkTest.java)/**
 * Tests for an undirected {@link ConfigurableMutableNetwork}, creating a simple undirected graph
 * (parallel and self-loop edges are not allowed).
 */
ConfigurableUndirectedGraphTest (/android/guava-tests/test/com/google/common/graph/ConfigurableUndirectedGraphTest.java)/** Tests for an undirected {@link ConfigurableMutableGraph} allowing self-loops. */
ConfigurableUndirectedMultiNetworkTest (/android/guava-tests/test/com/google/common/graph/ConfigurableUndirectedMultiNetworkTest.java)/**
 * Tests for an undirected {@link ConfigurableMutableNetwork} allowing parallel edges and
 * self-loops.
 */
ConfigurableUndirectedNetworkTest (/android/guava-tests/test/com/google/common/graph/ConfigurableUndirectedNetworkTest.java)/** Tests for an undirected {@link ConfigurableMutableNetwork} allowing self-loops. */
DefaultNetworkImplementationsTest (/android/guava-tests/test/com/google/common/graph/DefaultNetworkImplementationsTest.java)/**
 * Test for {@link Network} methods which have default implementations. Currently those
 * implementations are in {@link AbstractNetwork}; in future they might be in {@link Network}
 * itself, once we are willing to use Java 8 default methods.
 */
ElementOrderTest (/android/guava-tests/test/com/google/common/graph/ElementOrderTest.java)/** Tests for ordering the elements of graphs. */
EndpointPairTest (/android/guava-tests/test/com/google/common/graph/EndpointPairTest.java)/** Tests for {@link EndpointPair} and {@link Graph#edges()}. */
GraphMutationTest (/android/guava-tests/test/com/google/common/graph/GraphMutationTest.java)/** Tests for repeated node and edge addition and removal in a {@link Graph}. */
GraphsTest (/android/guava-tests/test/com/google/common/graph/GraphsTest.java)/**
 * Tests for {@link Graphs}. Tests assume that the implementation of the method {@code addEdge} adds
 * the missing nodes to the graph, then adds the edge between them.
 */
ImmutableGraphTest (/android/guava-tests/test/com/google/common/graph/ImmutableGraphTest.java)/** Tests for {@link ImmutableGraph}. */
ImmutableNetworkTest (/android/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java)/** Tests for {@link ImmutableNetwork}. */
ImmutableValueGraphTest (/android/guava-tests/test/com/google/common/graph/ImmutableValueGraphTest.java)/** Tests for {@link ImmutableValueGraph} . */
MapCacheTest (/android/guava-tests/test/com/google/common/graph/MapCacheTest.java)/** Tests for {@link MapIteratorCache} and {@link MapRetrievalCache}. */
NetworkMutationTest (/android/guava-tests/test/com/google/common/graph/NetworkMutationTest.java)/** Tests for repeated node and edge addition and removal in a {@link Network}. */
TestUtil (/android/guava-tests/test/com/google/common/graph/TestUtil.java)/** Utility methods used in various common.graph tests. */
AbstractByteHasherTest (/android/guava-tests/test/com/google/common/hash/AbstractByteHasherTest.java)/**
 * Tests for AbstractByteHasher.
 *
 * @author Colin Decker
 */
AbstractNonStreamingHashFunctionTest (/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java)/** Tests for AbstractNonStreamingHashFunction. */
AbstractStreamingHasherTest (/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java)/**
 * Tests for AbstractStreamingHasher.
 *
 * @author Dimitris Andreou
 */
BloomFilterTest (/android/guava-tests/test/com/google/common/hash/BloomFilterTest.java)/**
 * Tests for SimpleGenericBloomFilter and derived BloomFilter views.
 *
 * @author Dimitris Andreou
 */
ChecksumHashFunctionTest (/android/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java)/**
 * Tests for ChecksumHashFunction.
 *
 * @author Colin Decker
 */
Crc32cHashFunctionTest (/android/guava-tests/test/com/google/common/hash/Crc32cHashFunctionTest.java)/**
 * Unit tests for {@link Crc32c}. Known test values are from RFC 3720, Section B.4.
 *
 * @author Patrick Costello
 * @author Kurt Alfred Kluever
 */
FarmHashFingerprint64Test (/android/guava-tests/test/com/google/common/hash/FarmHashFingerprint64Test.java)/**
 * Unit test for FarmHashFingerprint64.
 *
 * @author Kyle Maddison
 * @author Geoff Pike
 */
FunnelsTest (/android/guava-tests/test/com/google/common/hash/FunnelsTest.java)/**
 * Tests for HashExtractors.
 *
 * @author Dimitris Andreou
 */
HashCodeTest (/android/guava-tests/test/com/google/common/hash/HashCodeTest.java)/**
 * Unit tests for {@link HashCode}.
 *
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 */
HashingInputStreamTest (/android/guava-tests/test/com/google/common/hash/HashingInputStreamTest.java)/**
 * Tests for {@link HashingInputStream}.
 *
 * @author Qian Huang
 */
HashingOutputStreamTest (/android/guava-tests/test/com/google/common/hash/HashingOutputStreamTest.java)/**
 * Tests for {@link HashingOutputStream}.
 *
 * @author Nick Piepmeier
 */
HashingTest (/android/guava-tests/test/com/google/common/hash/HashingTest.java)/**
 * Unit tests for {@link Hashing}.
 *
 * <p>TODO(b/33919189): Migrate repeated testing methods to {@link #HashTestUtils} and tweak unit
 * tests to reference them from there.
 *
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 */
HashTestUtils (/android/guava-tests/test/com/google/common/hash/HashTestUtils.java)/**
 * Various utilities for testing {@link HashFunction}s.
 *
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 */
MacHashFunctionTest (/android/guava-tests/test/com/google/common/hash/MacHashFunctionTest.java)/**
 * Tests for the MacHashFunction.
 *
 * @author Kurt Alfred Kluever
 */
MessageDigestHashFunctionTest (/android/guava-tests/test/com/google/common/hash/MessageDigestHashFunctionTest.java)/**
 * Tests for the MessageDigestHashFunction.
 *
 * @author Kurt Alfred Kluever
 */
Murmur3Hash128Test (/android/guava-tests/test/com/google/common/hash/Murmur3Hash128Test.java)/** Tests for {@link Murmur3_128HashFunction}. */
Murmur3Hash32Test (/android/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java)/** Tests for {@link Murmur3_32HashFunction}. */
SipHashFunctionTest (/android/guava-tests/test/com/google/common/hash/SipHashFunctionTest.java)/**
 * Unit tests for {@link SipHashFunction}.
 *
 * @author Kurt Alfred Kluever
 */
HtmlEscapersTest (/android/guava-tests/test/com/google/common/html/HtmlEscapersTest.java)/**
 * Tests for the {@link HtmlEscapers} class.
 *
 * @author David Beaumont
 */
SpyAppendable (/android/guava-tests/test/com/google/common/io/AppendableWriterTest.java)/** Helper class for testing behavior with Flushable and Closeable targets. */
AppendableWriterTest (/android/guava-tests/test/com/google/common/io/AppendableWriterTest.java)/**
 * Unit test for {@link AppendableWriter}.
 *
 * @author Alan Green
 */
BaseEncodingTest (/android/guava-tests/test/com/google/common/io/BaseEncodingTest.java)/**
 * Tests for {@code BaseEncoding}.
 *
 * @author Louis Wasserman
 */
ByteSinkTest (/android/guava-tests/test/com/google/common/io/ByteSinkTest.java)/**
 * Tests for the default implementations of {@code ByteSink} methods.
 *
 * @author Colin Decker
 */
ByteSinkTester (/android/guava-tests/test/com/google/common/io/ByteSinkTester.java)/**
 * A generator of {@code TestSuite} instances for testing {@code ByteSink} implementations.
 * Generates tests of a all methods on a {@code ByteSink} given various inputs written to it as well
 * as sub-suites for testing the {@code CharSink} view in the same way.
 *
 * @author Colin Decker
 */
ByteSourceTest (/android/guava-tests/test/com/google/common/io/ByteSourceTest.java)/**
 * Tests for the default implementations of {@code ByteSource} methods.
 *
 * @author Colin Decker
 */
ByteSourceTester (/android/guava-tests/test/com/google/common/io/ByteSourceTester.java)/**
 * A generator of {@code TestSuite} instances for testing {@code ByteSource} implementations.
 * Generates tests of a all methods on a {@code ByteSource} given various inputs the source is
 * expected to contain as well as as sub-suites for testing the {@code CharSource} view and {@code
 * slice()} views in the same way.
 *
 * @author Colin Decker
 */
SlowSkipper (/android/guava-tests/test/com/google/common/io/ByteStreamsTest.java)/** Stream that will skip a maximum number of bytes at a time. */
ByteStreamsTest (/android/guava-tests/test/com/google/common/io/ByteStreamsTest.java)/**
 * Unit test for {@link ByteStreams}.
 *
 * @author Chris Nokleberg
 */
CharSequenceReaderTest (/android/guava-tests/test/com/google/common/io/CharSequenceReaderTest.java)/**
 * Tests for {@link CharSequenceReader}.
 *
 * @author Colin Decker
 */
CharSinkTest (/android/guava-tests/test/com/google/common/io/CharSinkTest.java)/**
 * Tests for the default implementations of {@code CharSink} methods.
 *
 * @author Colin Decker
 */
CharSinkTester (/android/guava-tests/test/com/google/common/io/CharSinkTester.java)/**
 * A generator of {@code TestSuite} instances for testing {@code CharSink} implementations.
 * Generates tests of a all methods on a {@code CharSink} given various inputs written to it.
 *
 * @author Colin Decker
 */
CharSourceTest (/android/guava-tests/test/com/google/common/io/CharSourceTest.java)/**
 * Tests for the default implementations of {@code CharSource} methods.
 *
 * @author Colin Decker
 */
CharSourceTester (/android/guava-tests/test/com/google/common/io/CharSourceTester.java)/**
 * A generator of {@code TestSuite} instances for testing {@code CharSource} implementations.
 * Generates tests of a all methods on a {@code CharSource} given various inputs the source is
 * expected to contain.
 *
 * @author Colin Decker
 */
CharStreamsTest (/android/guava-tests/test/com/google/common/io/CharStreamsTest.java)/**
 * Unit test for {@link CharStreams}.
 *
 * @author Chris Nokleberg
 */
CloseablesTest (/android/guava-tests/test/com/google/common/io/CloseablesTest.java)/**
 * Unit tests for {@link Closeables}.
 *
 * <p>Checks proper closing behavior, and ensures that IOExceptions on Closeable.close() are not
 * propagated out from the {@link Closeables#close} method if {@code swallowException} is true.
 *
 * @author Michael Lancaster
 */
TestSuppressor (/android/guava-tests/test/com/google/common/io/CloserTest.java)/** Suppressor that records suppressions. */
Suppression (/android/guava-tests/test/com/google/common/io/CloserTest.java)/** Record of a call to suppress. */
CloserTest (/android/guava-tests/test/com/google/common/io/CloserTest.java)/**
 * Tests for {@link Closer}.
 *
 * @author Colin Decker
 */
CountingInputStreamTest (/android/guava-tests/test/com/google/common/io/CountingInputStreamTest.java)/**
 * Unit tests for {@link CountingInputStream}.
 *
 * @author Chris Nokleberg
 */
CountingOutputStreamTest (/android/guava-tests/test/com/google/common/io/CountingOutputStreamTest.java)/**
 * Unit tests for {@link CountingOutputStream}.
 *
 * @author Chris Nokleberg
 */
FileBackedOutputStreamTest (/android/guava-tests/test/com/google/common/io/FileBackedOutputStreamTest.java)/**
 * Unit tests for {@link FileBackedOutputStream}.
 *
 * @author Chris Nokleberg
 */
FilesSimplifyPathTest (/android/guava-tests/test/com/google/common/io/FilesSimplifyPathTest.java)/**
 * Unit tests for {@link Files#simplifyPath}.
 *
 * @author Pablo Bellver
 */
BadLengthFile (/android/guava-tests/test/com/google/common/io/FilesTest.java)/** A {@link File} that provides a specialized value for {@link File#length()}. */
FlushablesTest (/android/guava-tests/test/com/google/common/io/FlushablesTest.java)/**
 * Unit tests for {@link Flushables}.
 *
 * <p>Checks proper flushing behavior, and ensures that IOExceptions on Flushable.flush() are not
 * propagated out from the {@link Flushables#flush} method if {@code swallowException} is true.
 *
 * @author Michael Lancaster
 */
IoTestCase (/android/guava-tests/test/com/google/common/io/IoTestCase.java)/**
 * Base test case class for I/O tests.
 *
 * @author Chris Nokleberg
 * @author Colin Decker
 */
LineBufferTest (/android/guava-tests/test/com/google/common/io/LineBufferTest.java)/**
 * Unit tests for {@link LineBuffer} and {@link LineReader}.
 *
 * @author Chris Nokleberg
 */
LittleEndianDataInputStreamTest (/android/guava-tests/test/com/google/common/io/LittleEndianDataInputStreamTest.java)/**
 * Test class for {@link LittleEndianDataInputStream}.
 *
 * @author Chris Nokleberg
 */
LittleEndianDataOutputStreamTest (/android/guava-tests/test/com/google/common/io/LittleEndianDataOutputStreamTest.java)/**
 * Test class for {@link LittleEndianDataOutputStream}.
 *
 * @author Keith Bottner
 */
MultiInputStreamTest (/android/guava-tests/test/com/google/common/io/MultiInputStreamTest.java)/**
 * Test class for {@link MultiInputStream}.
 *
 * @author Chris Nokleberg
 */
MultiReaderTest (/android/guava-tests/test/com/google/common/io/MultiReaderTest.java)/** @author ricebin */
PatternFilenameFilterTest (/android/guava-tests/test/com/google/common/io/PatternFilenameFilterTest.java)/**
 * Unit test for {@link PatternFilenameFilter}.
 *
 * @author Chris Nokleberg
 */
RandomAmountInputStream (/android/guava-tests/test/com/google/common/io/RandomAmountInputStream.java)/** Returns a random portion of the requested bytes on each call. */
SourceSinkFactories (/android/guava-tests/test/com/google/common/io/SourceSinkFactories.java)/**
 * {@link SourceSinkFactory} implementations.
 *
 * @author Colin Decker
 */
SourceFactory (/android/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for byte or char sources. */
SinkFactory (/android/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for byte or char sinks. */
ByteSourceFactory (/android/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for {@link ByteSource} instances. */
ByteSinkFactory (/android/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for {@link ByteSink} instances. */
CharSourceFactory (/android/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for {@link CharSource} instances. */
CharSinkFactory (/android/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for {@link CharSink} instances. */
SourceSinkFactory (/android/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/**
 * A test factory for byte or char sources or sinks. In addition to creating sources or sinks, the
 * factory specifies what content should be expected to be read from a source or contained in a sink
 * given the content data that was used to create the source or that was written to the sink.
 *
 * <p>A single {@code SourceSinkFactory} implementation generally corresponds to one specific way of
 * creating a source or sink, such as {@link Files#asByteSource(File)}. Implementations of {@code
 * SourceSinkFactory} for common.io are found in {@link SourceSinkFactories}.
 *
 * @param <S> the source or sink type
 * @param <T> the data type (byte[] or String)
 * @author Colin Decker
 */
SourceSinkTester (/android/guava-tests/test/com/google/common/io/SourceSinkTester.java)/**
 * @param <S> the source or sink type
 * @param <T> the data type (byte[] or String)
 * @param <F> the factory type
 * @author Colin Decker
 */
TestByteSink (/android/guava-tests/test/com/google/common/io/TestByteSink.java)/**
 * A byte sink for testing that has configurable behavior.
 *
 * @author Colin Decker
 */
TestByteSource (/android/guava-tests/test/com/google/common/io/TestByteSource.java)/**
 * A byte source for testing that has configurable behavior.
 *
 * @author Colin Decker
 */
TestCharSink (/android/guava-tests/test/com/google/common/io/TestCharSink.java)/**
 * A char sink for testing that has configurable behavior.
 *
 * @author Colin Decker
 */
TestCharSource (/android/guava-tests/test/com/google/common/io/TestCharSource.java)/**
 * A char source for testing that has configurable options.
 *
 * @author Colin Decker
 */
TestInputStream (/android/guava-tests/test/com/google/common/io/TestInputStream.java)/** @author Colin Decker */
TestOutputStream (/android/guava-tests/test/com/google/common/io/TestOutputStream.java)/** @author Colin Decker */
TestReader (/android/guava-tests/test/com/google/common/io/TestReader.java)/** @author Colin Decker */
TestStreamSupplier (/android/guava-tests/test/com/google/common/io/TestStreamSupplier.java)/**
 * Interface for a supplier of streams that can report whether a stream was opened and whether that
 * stream was closed. Intended for use in a test where only a single stream should be opened and
 * possibly closed.
 *
 * @author Colin Decker
 */
TestWriter (/android/guava-tests/test/com/google/common/io/TestWriter.java)/** @author Colin Decker */
BigIntegerMathTest (/android/guava-tests/test/com/google/common/math/BigIntegerMathTest.java)/**
 * Tests for BigIntegerMath.
 *
 * @author Louis Wasserman
 */
DoubleMathTest (/android/guava-tests/test/com/google/common/math/DoubleMathTest.java)/**
 * Tests for {@code DoubleMath}.
 *
 * @author Louis Wasserman
 */
DoubleUtilsTest (/android/guava-tests/test/com/google/common/math/DoubleUtilsTest.java)/**
 * Tests for {@link DoubleUtils}.
 *
 * @author Louis Wasserman
 */
IntMathTest (/android/guava-tests/test/com/google/common/math/IntMathTest.java)/**
 * Tests for {@link IntMath}.
 *
 * @author Louis Wasserman
 */
LinearTransformationTest (/android/guava-tests/test/com/google/common/math/LinearTransformationTest.java)/**
 * Tests for {@link LinearTransformation}.
 *
 * @author Pete Gillin
 */
LongMathTest (/android/guava-tests/test/com/google/common/math/LongMathTest.java)/**
 * Tests for LongMath.
 *
 * @author Louis Wasserman
 */
MathBenchmarking (/android/guava-tests/test/com/google/common/math/MathBenchmarking.java)/**
 * Utilities for benchmarks.
 *
 * <p>In many cases, we wish to vary the order of magnitude of the input as much as we want to vary
 * the input itself, so most methods which generate values use an exponential distribution varying
 * the order of magnitude of the generated values uniformly at random.
 *
 * @author Louis Wasserman
 */
MathPreconditionsTest (/android/guava-tests/test/com/google/common/math/MathPreconditionsTest.java)/**
 * Unit tests for {@link MathPreconditions}.
 *
 * @author Ben Yu
 */
MathTesting (/android/guava-tests/test/com/google/common/math/MathTesting.java)/**
 * Exhaustive input sets for every integral type.
 *
 * @author Louis Wasserman
 */
PairedStatsAccumulatorTest (/android/guava-tests/test/com/google/common/math/PairedStatsAccumulatorTest.java)/**
 * Tests for {@link PairedStatsAccumulator}. This tests the stats methods for instances built with
 * {@link PairedStatsAccumulator#add}, and various error cases of that method. For tests of the
 * {@link PairedStatsAccumulator#snapshot} method which returns {@link PairedStats} instances, see
 * {@link PairedStatsTest}.
 *
 * @author Pete Gillin
 */
PairedStatsTest (/android/guava-tests/test/com/google/common/math/PairedStatsTest.java)/**
 * Tests for {@link PairedStats}. This tests instances created by {@link
 * PairedStatsAccumulator#snapshot}.
 *
 * @author Pete Gillin
 */
QuantilesAlgorithmTest (/android/guava-tests/test/com/google/common/math/QuantilesAlgorithmTest.java)/**
 * Tests that the different algorithms benchmarked in {@link QuantilesBenchmark} are actually all
 * returning more-or-less the same answers.
 */
QuantilesTest (/android/guava-tests/test/com/google/common/math/QuantilesTest.java)/**
 * Tests for {@link Quantiles}.
 *
 * @author Pete Gillin
 */
StatsAccumulatorTest (/android/guava-tests/test/com/google/common/math/StatsAccumulatorTest.java)/**
 * Tests for {@link StatsAccumulator}. This tests the stats methods for instances built with {@link
 * StatsAccumulator#add} and {@link StatsAccumulator#addAll}, and various error cases of the {@link
 * StatsAccumulator#add} and {@link StatsAccumulator#addAll} methods. For tests of the {@link
 * StatsAccumulator#snapshot} method which returns {@link Stats} instances, see {@link StatsTest}.
 *
 * @author Pete Gillin
 */
StatsTest (/android/guava-tests/test/com/google/common/math/StatsTest.java)/**
 * Tests for {@link Stats}. This tests instances created by both {@link Stats#of} and {@link
 * StatsAccumulator#snapshot}.
 *
 * @author Pete Gillin
 */
ManyValues (/android/guava-tests/test/com/google/common/math/StatsTesting.java)/**
   * Helper class for testing with non-finite values. {@link #ALL_MANY_VALUES} gives a number
   * instances with many combinations of finite and non-finite values. All have {@link
   * #MANY_VALUES_COUNT} values. If all the values are finite then the mean is {@link
   * #MANY_VALUES_MEAN} and the sum-of-squares-of-deltas is {@link
   * #MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS}. The smallest and largest finite values are always
   * {@link #MANY_VALUES_MIN} and {@link #MANY_VALUES_MAX}, although setting non-finite values will
   * change the true min and max.
   */
StatsTesting (/android/guava-tests/test/com/google/common/math/StatsTesting.java)/**
 * Inputs, expected outputs, and helper methods for tests of {@link StatsAccumulator}, {@link
 * Stats}, {@link PairedStatsAccumulator}, and {@link PairedStats}.
 *
 * @author Pete Gillin
 */
TestPlatform (/android/guava-tests/test/com/google/common/math/TestPlatform.java)/** @author Chris Povirk */
HostAndPortTest (/android/guava-tests/test/com/google/common/net/HostAndPortTest.java)/**
 * Tests for {@link HostAndPort}
 *
 * @author Paul Marks
 */
HostSpecifierTest (/android/guava-tests/test/com/google/common/net/HostSpecifierTest.java)/**
 * {@link TestCase} for {@link HostSpecifier}. This is a relatively cursory test, as HostSpecifier
 * is a thin wrapper around {@link InetAddresses} and {@link InternetDomainName}; the unit tests for
 * those classes explore numerous corner cases. The intent here is to confirm that everything is
 * wired up properly.
 *
 * @author Craig Berry
 */
HttpHeadersTest (/android/guava-tests/test/com/google/common/net/HttpHeadersTest.java)/**
 * Tests for the HttpHeaders class.
 *
 * @author Kurt Alfred Kluever
 */
InetAddressesTest (/android/guava-tests/test/com/google/common/net/InetAddressesTest.java)/**
 * Tests for {@link InetAddresses}.
 *
 * @author Erik Kline
 */
InternetDomainNameTest (/android/guava-tests/test/com/google/common/net/InternetDomainNameTest.java)/**
 * {@link TestCase} for {@link InternetDomainName}.
 *
 * @author Craig Berry
 */
MediaTypeTest (/android/guava-tests/test/com/google/common/net/MediaTypeTest.java)/**
 * Tests for {@link MediaType}.
 *
 * @author Gregory Kick
 */
PercentEscaperTest (/android/guava-tests/test/com/google/common/net/PercentEscaperTest.java)/**
 * Tests for {@link PercentEscaper}.
 *
 * @author David Beaumont
 */
UrlEscapersTest (/android/guava-tests/test/com/google/common/net/UrlEscapersTest.java)/**
 * Tests for the {@link UrlEscapers} class.
 *
 * @author David Beaumont
 */
BooleansTest (/android/guava-tests/test/com/google/common/primitives/BooleansTest.java)/**
 * Unit test for {@link Booleans}.
 *
 * @author Kevin Bourrillion
 */
ByteArrayAsListTest (/android/guava-tests/test/com/google/common/primitives/ByteArrayAsListTest.java)/**
 * Test suite covering {@link Bytes#asList(byte[])}.
 *
 * @author Kevin Bourrillion
 */
BytesTest (/android/guava-tests/test/com/google/common/primitives/BytesTest.java)/**
 * Unit test for {@link Bytes}.
 *
 * @author Kevin Bourrillion
 */
CharArrayAsListTest (/android/guava-tests/test/com/google/common/primitives/CharArrayAsListTest.java)/**
 * Test suite covering {@link Chars#asList(char[])}.
 *
 * @author Kevin Bourrillion
 */
CharsTest (/android/guava-tests/test/com/google/common/primitives/CharsTest.java)/**
 * Unit test for {@link Chars}.
 *
 * @author Kevin Bourrillion
 */
DoubleArrayAsListTest (/android/guava-tests/test/com/google/common/primitives/DoubleArrayAsListTest.java)/**
 * Test suite covering {@link Doubles#asList(double[])}.
 *
 * @author Kevin Bourrillion
 */
DoublesTest (/android/guava-tests/test/com/google/common/primitives/DoublesTest.java)/**
 * Unit test for {@link Doubles}.
 *
 * @author Kevin Bourrillion
 */
FloatArrayAsListTest (/android/guava-tests/test/com/google/common/primitives/FloatArrayAsListTest.java)/**
 * Test suite covering {@link Floats#asList(float[])})}.
 *
 * @author Kevin Bourrillion
 */
FloatsTest (/android/guava-tests/test/com/google/common/primitives/FloatsTest.java)/**
 * Unit test for {@link Floats}.
 *
 * @author Kevin Bourrillion
 */
ImmutableDoubleArrayTest (/android/guava-tests/test/com/google/common/primitives/ImmutableDoubleArrayTest.java)/** @author Kevin Bourrillion */
ImmutableIntArrayTest (/android/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java)/** @author Kevin Bourrillion */
ImmutableLongArrayTest (/android/guava-tests/test/com/google/common/primitives/ImmutableLongArrayTest.java)/** @author Kevin Bourrillion */
IntArrayAsListTest (/android/guava-tests/test/com/google/common/primitives/IntArrayAsListTest.java)/**
 * Test suite covering {@link Ints#asList(int[])}.
 *
 * @author Kevin Bourrillion
 */
IntsTest (/android/guava-tests/test/com/google/common/primitives/IntsTest.java)/**
 * Unit test for {@link Ints}.
 *
 * @author Kevin Bourrillion
 */
LongArrayAsListTest (/android/guava-tests/test/com/google/common/primitives/LongArrayAsListTest.java)/**
 * Test suite covering {@link Longs#asList(long[])}.
 *
 * @author Kevin Bourrillion
 */
LongsTest (/android/guava-tests/test/com/google/common/primitives/LongsTest.java)/**
 * Unit test for {@link Longs}.
 *
 * @author Kevin Bourrillion
 */
PrimitivesTest (/android/guava-tests/test/com/google/common/primitives/PrimitivesTest.java)/**
 * Unit test for {@link Primitives}.
 *
 * @author Kevin Bourrillion
 */
ShortArrayAsListTest (/android/guava-tests/test/com/google/common/primitives/ShortArrayAsListTest.java)/**
 * Test suite covering {@link Shorts#asList(short[])}.
 *
 * @author Kevin Bourrillion
 */
ShortsTest (/android/guava-tests/test/com/google/common/primitives/ShortsTest.java)/**
 * Unit test for {@link Shorts}.
 *
 * @author Kevin Bourrillion
 */
SignedBytesTest (/android/guava-tests/test/com/google/common/primitives/SignedBytesTest.java)/**
 * Unit test for {@link SignedBytes}.
 *
 * @author Kevin Bourrillion
 */
UnsignedBytesTest (/android/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java)/**
 * Unit test for {@link UnsignedBytes}.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
UnsignedIntegerTest (/android/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java)/**
 * Tests for {@code UnsignedInteger}.
 *
 * @author Louis Wasserman
 */
UnsignedIntsTest (/android/guava-tests/test/com/google/common/primitives/UnsignedIntsTest.java)/**
 * Tests for UnsignedInts
 *
 * @author Louis Wasserman
 */
UnsignedLongsTest (/android/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java)/**
 * Tests for UnsignedLongs
 *
 * @author Brian Milch
 * @author Louis Wasserman
 */
UnsignedLongTest (/android/guava-tests/test/com/google/common/primitives/UnsignedLongTest.java)/**
 * Tests for {@code UnsignedLong}.
 *
 * @author Louis Wasserman
 */
AbstractInvocationHandlerTest (/android/guava-tests/test/com/google/common/reflect/AbstractInvocationHandlerTest.java)/**
 * Tests for {@link AbstractInvocationHandler}.
 *
 * @author Ben Yu
 */
ClassPathTest (/android/guava-tests/test/com/google/common/reflect/ClassPathTest.java)/** Functional tests of {@link ClassPath}. */
ElementTest (/android/guava-tests/test/com/google/common/reflect/ElementTest.java)/**
 * Unit tests of {@link Element}.
 *
 * @author Ben Yu
 */
ImmutableTypeToInstanceMapTest (/android/guava-tests/test/com/google/common/reflect/ImmutableTypeToInstanceMapTest.java)/**
 * Unit test for {@link ImmutableTypeToInstanceMap}.
 *
 * @author Ben Yu
 */
LocalClassWithSeeminglyHiddenThisInStaticInitializer (/android/guava-tests/test/com/google/common/reflect/InvokableTest.java)/**
   * This class demonstrates a bug in getParameters() when the local class is inside static
   * initializer.
   */
Prepender (/android/guava-tests/test/com/google/common/reflect/InvokableTest.java)/** Class for testing constructor, static method and instance method. */
InvokableTest (/android/guava-tests/test/com/google/common/reflect/InvokableTest.java)/**
 * Unit tests for {@link Invokable}.
 *
 * @author Ben Yu
 */
MutableTypeToInstanceMapTest (/android/guava-tests/test/com/google/common/reflect/MutableTypeToInstanceMapTest.java)/**
 * Unit test of {@link MutableTypeToInstanceMap}.
 *
 * @author Ben Yu
 */
ParameterTest (/android/guava-tests/test/com/google/common/reflect/ParameterTest.java)/**
 * Tests for {@link Parameter}.
 *
 * @author Ben Yu
 */
ReflectionTest (/android/guava-tests/test/com/google/common/reflect/ReflectionTest.java)/** Tests for {@link Reflection} */
SubtypeTester (/android/guava-tests/test/com/google/common/reflect/SubtypeTester.java)/**
 * Tester of subtyping relationships between two types.
 *
 * <p>Tests should inherit from this class, and declare subtyping relationship with public methods
 * annotated by {@link TestSubtype}.
 *
 * <p>These declaration methods rely on Java static type checking to make sure what we want to
 * assert as subtypes are really subtypes according to javac. For example:
 *
 * <pre>{@code
 * class MySubtypeTests extends SubtypeTester {
 *   @TestSubtype(suppressGetSubtype = true, suppressGetSupertype = true)
 *   public <T> Iterable<? extends T> listIsSubtypeOfIterable(List<T> list) {
 *     return isSubtype(list);
 *   }
 *
 *   @TestSubtype
 *   public List<String> intListIsNotSubtypeOfStringList(List<Integer> intList) {
 *     return notSubtype(intList);
 *   }
 * }
 *
 * public void testMySubtypes() throws Exception {
 *   new MySubtypeTests().testAllDeclarations();
 * }
 * }</pre>
 *
 * The calls to {@link #isSubtype} and {@link #notSubtype} tells the framework what assertions need
 * to be made.
 *
 * <p>The declaration methods must be public.
 */
TypeParameterTest (/android/guava-tests/test/com/google/common/reflect/TypeParameterTest.java)/**
 * Unit test for {@link TypeParameter}.
 *
 * @author Ben Yu
 */
TypeResolverTest (/android/guava-tests/test/com/google/common/reflect/TypeResolverTest.java)/**
 * Unit tests of {@link TypeResolver}.
 *
 * @author Ben Yu
 */
TypesTest (/android/guava-tests/test/com/google/common/reflect/TypesTest.java)/**
 * Tests for {@link Types}.
 *
 * @author Ben Yu
 */
TypeTokenResolutionTest (/android/guava-tests/test/com/google/common/reflect/TypeTokenResolutionTest.java)/**
 * Unit test for {@link TypeToken} and {@link TypeResolver}.
 *
 * @author Ben Yu
 */
TypeTokenTest (/android/guava-tests/test/com/google/common/reflect/TypeTokenTest.java)/**
 * Test cases for {@link TypeToken}.
 *
 * @author Sven Mawson
 * @author Ben Yu
 */
TypeVisitorTest (/android/guava-tests/test/com/google/common/reflect/TypeVisitorTest.java)/**
 * Tests of {@link TypeVisitor}.
 *
 * @author Ben Yu
 */
TestedFuture (/android/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java)/** Concrete subclass for testing. */
AbstractAbstractFutureTest (/android/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java)/**
 * Base class for tests for emulated {@link AbstractFuture} that allow subclasses to swap in a
 * different "source Future" for {@link AbstractFuture#setFuture} calls.
 */
AbstractChainedListenableFutureTest (/android/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java)/**
 * Unit tests for any listenable future that chains other listenable futures. Unit tests need only
 * override buildChainingFuture and getSuccessfulResult, but they can add custom tests as needed.
 *
 * @author Nishant Thakkar
 */
AbstractExecutionThreadServiceTest (/android/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java)/**
 * Unit test for {@link AbstractExecutionThreadService}.
 *
 * @author Jesse Wilson
 */
Sync (/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java)/**
     * Following the contract of {@link AbstractQueuedSynchronizer} we create a private subclass to
     * hold the synchronizer. This synchronizer is used to implement the blocking and waiting calls
     * as well as to handle state changes in a thread-safe manner. The current state of the future
     * is held in the Sync state, and the lock is released whenever the state changes to {@link
     * #COMPLETED}, {@link #CANCELLED}, or {@link #INTERRUPTED}
     *
     * <p>To avoid races between threads doing release and acquire, we transition to the final state
     * in two steps. One thread will successfully CAS from RUNNING to COMPLETING, that thread will
     * then set the result of the computation, and only then transition to COMPLETED, CANCELLED, or
     * INTERRUPTED.
     *
     * <p>We don't use the integer argument passed between acquire methods so we pass around a -1
     * everywhere.
     */
AbstractFutureBenchmarks (/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java)/** Utilities for the AbstractFutureBenchmarks */
AbstractIdleServiceTest (/android/guava-tests/test/com/google/common/util/concurrent/AbstractIdleServiceTest.java)/**
 * Tests for {@link AbstractIdleService}.
 *
 * @author Chris Nokleberg
 * @author Ben Yu
 */
TestListeningExecutorService (/android/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java)/** Simple same thread listening executor service that doesn't handle shutdown. */
AbstractListeningExecutorServiceTest (/android/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java)/**
 * Tests for {@link AbstractListeningExecutorService}.
 *
 * @author Colin Decker
 */
ManualSwitchedService (/android/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java)/**
   * The user of this service should call {@link #notifyStarted} and {@link #notifyStopped} after
   * calling {@link #startAsync} and {@link #stopAsync}.
   */
AbstractServiceTest (/android/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java)/**
 * Unit test for {@link AbstractService}.
 *
 * @author Jesse Wilson
 */
AtomicDoubleArrayTest (/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java)/** Unit test for {@link AtomicDoubleArray}. */
AtomicDoubleTest (/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleTest.java)/** Unit test for {@link AtomicDouble}. */
AtomicLongMapBasherTest (/android/guava-tests/test/com/google/common/util/concurrent/AtomicLongMapBasherTest.java)/**
 * Basher test for {@link AtomicLongMap}.
 *
 * @author mike nonemacher
 */
AtomicLongMapTest (/android/guava-tests/test/com/google/common/util/concurrent/AtomicLongMapTest.java)/**
 * Tests for {@link AtomicLongMap}.
 *
 * @author mike nonemacher
 */
AtomicsTest (/android/guava-tests/test/com/google/common/util/concurrent/AtomicsTest.java)/**
 * Unit test for {@link Atomics}.
 *
 * @author Kurt Alfred Kluever
 */
CallablesTest (/android/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java)/**
 * Unit tests for {@link Callables}.
 *
 * @author Isaac Shum
 */
ClassPathUtil (/android/guava-tests/test/com/google/common/util/concurrent/ClassPathUtil.java)/** Utility method to parse the system class path. */
CycleDetectingLockFactoryTest (/android/guava-tests/test/com/google/common/util/concurrent/CycleDetectingLockFactoryTest.java)/**
 * Unittests for {@link CycleDetectingLockFactory}.
 *
 * @author Darick Tong
 */
ExecutionListTest (/android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java)/**
 * Unit tests for {@link ExecutionList}.
 *
 * @author Nishant Thakkar
 * @author Sven Mawson
 */
ExecutionSequencerTest (/android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java)/** Tests for {@link ExecutionSequencer} */
FakeTimeLimiterTest (/android/guava-tests/test/com/google/common/util/concurrent/FakeTimeLimiterTest.java)/**
 * Unit test for {@link FakeTimeLimiter}.
 *
 * @author Jens Nyman
 */
FluentFutureTest (/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java)/**
 * Tests for {@link FluentFuture}. The tests cover only the basics for the API. The actual logic is
 * tested in {@link FuturesTest}.
 */
ForwardingBlockingDequeTest (/android/guava-tests/test/com/google/common/util/concurrent/ForwardingBlockingDequeTest.java)/**
 * Test for {@link ForwardingBlockingDeque}
 *
 * @author Emily Soldal
 */
ForwardingBlockingQueueTest (/android/guava-tests/test/com/google/common/util/concurrent/ForwardingBlockingQueueTest.java)/** Unit tests for {@link ForwardingBlockingQueue} */
ForwardingExecutorServiceTest (/android/guava-tests/test/com/google/common/util/concurrent/ForwardingExecutorServiceTest.java)/** Unit tests for {@link ForwardingExecutorService} */
ForwardingFutureTest (/android/guava-tests/test/com/google/common/util/concurrent/ForwardingFutureTest.java)/** Unit tests for {@link ForwardingFuture} */
ForwardingListenableFutureTest (/android/guava-tests/test/com/google/common/util/concurrent/ForwardingListenableFutureTest.java)/**
 * Tests for {@link ForwardingListenableFuture}.
 *
 * @author Ben Yu
 */
ForwardingListeningExecutorServiceTest (/android/guava-tests/test/com/google/common/util/concurrent/ForwardingListeningExecutorServiceTest.java)/** Unit tests for {@link ForwardingListeningExecutorService} */
ForwardingObjectTester (/android/guava-tests/test/com/google/common/util/concurrent/ForwardingObjectTester.java)/**
 * Tester for typical subclass of {@link ForwardingObject} by using EasyMock partial mocks.
 *
 * @author Ben Yu
 */
ForwardingObjectTesterTest (/android/guava-tests/test/com/google/common/util/concurrent/ForwardingObjectTesterTest.java)/**
 * Tests for {@link ForwardingObjectTester}.
 *
 * @author Ben Yu
 */
FutureCallbackTest (/android/guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java)/**
 * Test for {@link FutureCallback}.
 *
 * @author Anthony Zana
 */
FuturesGetCheckedInputs (/android/guava-tests/test/com/google/common/util/concurrent/FuturesGetCheckedInputs.java)/**
 * Classes and futures used in {@link FuturesGetCheckedTest} and {@link FuturesGetUncheckedTest}.
 */
FuturesGetCheckedTest (/android/guava-tests/test/com/google/common/util/concurrent/FuturesGetCheckedTest.java)/** Unit tests for {@link Futures#getChecked(Future, Class)}. */
FuturesGetDoneTest (/android/guava-tests/test/com/google/common/util/concurrent/FuturesGetDoneTest.java)/** Unit tests for {@link Futures#getDone}. */
FuturesGetUncheckedTest (/android/guava-tests/test/com/google/common/util/concurrent/FuturesGetUncheckedTest.java)/** Unit tests for {@link Futures#getUnchecked(Future)}. */
TestFuture (/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java)/**
   * A future in {@link TestFutureBatch} that also has a name for debugging purposes and a {@code
   * finisher}, a task that will complete the future in some fashion when it is called, allowing for
   * testing both before and after the completion of the future.
   */
TestFutureBatch (/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java)/**
   * A collection of several futures, covering cancellation, success, and failure (both {@link
   * ExecutionException} and {@link RuntimeException}), both immediate and delayed. We use each
   * possible pair of these futures in {@link FuturesTest#runExtensiveMergerTest}.
   *
   * <p>Each test requires a new {@link TestFutureBatch} because we need new delayed futures each
   * time, as the old delayed futures were completed as part of the old test.
   */
Merger (/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java)/**
   * {@link Futures#allAsList(Iterable)} or {@link Futures#successfulAsList(Iterable)}, hidden
   * behind a common interface for testing.
   */
FuturesTest (/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java)/**
 * Unit tests for {@link Futures}.
 *
 * @author Nishant Thakkar
 */
BadFuture (/android/guava-tests/test/com/google/common/util/concurrent/FuturesTransformAsyncTest.java)/** Proxy to throw a {@link RuntimeException} out of the {@link #get()} method. */
FuturesTransformAsyncTest (/android/guava-tests/test/com/google/common/util/concurrent/FuturesTransformAsyncTest.java)/**
 * Unit tests for {@link Futures#transformAsync(ListenableFuture, AsyncFunction, Executor)}.
 *
 * @author Nishant Thakkar
 */
FuturesTransformTest (/android/guava-tests/test/com/google/common/util/concurrent/FuturesTransformTest.java)/**
 * Unit tests for {@link Futures#transform(ListenableFuture, Function, Executor)}.
 *
 * @author Nishant Thakkar
 */
FlagGuard (/android/guava-tests/test/com/google/common/util/concurrent/GeneratedMonitorTest.java)/** A guard that encapsulates a simple, mutable boolean flag. */
Interruptenator (/android/guava-tests/test/com/google/common/util/concurrent/InterruptionUtil.java)/** Runnable which will interrupt the target thread repeatedly when run. */
InterruptionUtil (/android/guava-tests/test/com/google/common/util/concurrent/InterruptionUtil.java)/**
 * Utilities for performing thread interruption in tests
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
NonListenableSettableFuture (/android/guava-tests/test/com/google/common/util/concurrent/JdkFutureAdaptersTest.java)/** A Future that doesn't implement ListenableFuture, useful for testing listenInPoolThread. */
JdkFutureAdaptersTest (/android/guava-tests/test/com/google/common/util/concurrent/JdkFutureAdaptersTest.java)/**
 * Unit tests for {@link JdkFutureAdapters}.
 *
 * @author Sven Mawson
 * @author Kurt Alfred Kluever
 */
AdjustablePolicy (/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/** A security policy where new permissions can be dynamically added or all cleared. */
SimpleThreadFactory (/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/** For use as ThreadFactory in constructors */
NoOpREHandler (/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/** For use as RejectedExecutionHandler in constructors */
CheckedBarrier (/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/**
   * A CyclicBarrier that uses timed await and fails with AssertionFailedErrors instead of throwing
   * checked exceptions.
   */
JSR166TestCase (/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/**
 * Base class for JSR166 Junit TCK tests. Defines some constants, utility methods and classes, as
 * well as a simple framework for helping to make sure that assertions failing in generated threads
 * cause the associated test that generated them to itself fail (which JUnit does not otherwise
 * arrange). The rules for creating such tests are:
 *
 * <ol>
 *   <li>All assertions in code running in generated threads must use the forms {@link #threadFail},
 *       {@link #threadAssertTrue}, {@link #threadAssertEquals}, or {@link #threadAssertNull}, (not
 *       {@code fail}, {@code assertTrue}, etc.) It is OK (but not particularly recommended) for
 *       other code to use these forms too. Only the most typically used JUnit assertion methods are
 *       defined this way, but enough to live with.
 *   <li>If you override {@link #setUp} or {@link #tearDown}, make sure to invoke {@code
 *       super.setUp} and {@code super.tearDown} within them. These methods are used to clear and
 *       check for thread assertion failures.
 *   <li>All delays and timeouts must use one of the constants {@code SHORT_DELAY_MS}, {@code
 *       SMALL_DELAY_MS}, {@code MEDIUM_DELAY_MS}, {@code LONG_DELAY_MS}. The idea here is that a
 *       SHORT is always discriminable from zero time, and always allows enough time for the small
 *       amounts of computation (creating a thread, calling a few methods, etc) needed to reach a
 *       timeout point. Similarly, a SMALL is always discriminable as larger than SHORT and smaller
 *       than MEDIUM. And so on. These constants are set to conservative values, but even so, if
 *       there is ever any doubt, they can all be increased in one spot to rerun tests on slower
 *       platforms.
 *   <li>All threads generated must be joined inside each test case method (or {@code fail} to do
 *       so) before returning from the method. The {@code joinPool} method can be used to do this
 *       when using Executors.
 * </ol>
 *
 * <p><b>Other notes</b>
 *
 * <ul>
 *   <li>Usually, there is one testcase method per JSR166 method covering "normal" operation, and
 *       then as many exception-testing methods as there are exceptions the method can throw.
 *       Sometimes there are multiple tests per JSR166 method when the different "normal" behaviors
 *       differ significantly. And sometimes testcases cover multiple methods when they cannot be
 *       tested in isolation.
 *   <li>The documentation style for testcases is to provide as javadoc a simple sentence or two
 *       describing the property that the testcase method purports to test. The javadocs do not say
 *       anything about how the property is tested. To find out, read the code.
 *   <li>These tests are "conformance tests", and do not attempt to test throughput, latency,
 *       scalability or other performance factors (see the separate "jtreg" tests for a set intended
 *       to check these for the most central aspects of functionality.) So, most tests use the
 *       smallest sensible numbers of threads, collection sizes, etc needed to check basic
 *       conformance.
 *   <li>The test classes currently do not declare inclusion in any particular package to simplify
 *       things for people integrating them in TCK test suites.
 *   <li>As a convenience, the {@code main} of this class (JSR166TestCase) runs all JSR166 unit
 *       tests.
 * </ul>
 */
ListenableFutureTaskTest (/android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTaskTest.java)/**
 * Test case for {@link ListenableFutureTask}.
 *
 * @author Sven Mawson
 */
ListenableFutureTester (/android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTester.java)/**
 * Used to test listenable future implementations.
 *
 * @author Sven Mawson
 */
ListenerCallQueueTest (/android/guava-tests/test/com/google/common/util/concurrent/ListenerCallQueueTest.java)/** Tests for {@link ListenerCallQueue}. */
MoreExecutorsTest (/android/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java)/**
 * Tests for MoreExecutors.
 *
 * @author Kyle Littlefield (klittle)
 */
FakeStopwatch (/android/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java)/**
   * The stopwatch gathers events and presents them as strings. R0.6 means a delay of 0.6 seconds
   * caused by the (R)ateLimiter U1.0 means the (U)ser caused the stopwatch to sleep for a second.
   */
RateLimiterTest (/android/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java)/**
 * Tests for RateLimiter.
 *
 * @author Dimitris Andreou
 */
RunnablesTest (/android/guava-tests/test/com/google/common/util/concurrent/RunnablesTest.java)/**
 * Unit tests for {@link Runnables}.
 *
 * @author Olivier Pernet
 */
SequentialExecutorTest (/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java)/**
 * Tests {@link SequentialExecutor}.
 *
 * @author JJ Furman
 */
SnappyShutdownService (/android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java)/**
   * This service will shutdown very quickly after stopAsync is called and uses a background thread
   * so that we know that the stopping() listeners will execute on a different thread than the
   * terminated() listeners.
   */
ServiceManagerTest (/android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java)/**
 * Tests for {@link ServiceManager}.
 *
 * @author Luke Sandberg
 * @author Chris Nokleberg
 */
ServiceTest (/android/guava-tests/test/com/google/common/util/concurrent/ServiceTest.java)/** Unit tests for {@link Service} */
SettableFutureTest (/android/guava-tests/test/com/google/common/util/concurrent/SettableFutureTest.java)/**
 * Test cases for {@link SettableFuture}.
 *
 * @author Sven Mawson
 */
StripedTest (/android/guava-tests/test/com/google/common/util/concurrent/StripedTest.java)/**
 * Tests for Striped.
 *
 * @author Dimitris Andreou
 */
TestPlatform (/android/guava-tests/test/com/google/common/util/concurrent/TestPlatform.java)/** Methods factored out so that they can be emulated differently in GWT. */
TestThread (/android/guava-tests/test/com/google/common/util/concurrent/TestThread.java)/**
 * A helper for concurrency testing. One or more {@code TestThread} instances are instantiated in a
 * test with reference to the same "lock-like object", and then their interactions with that object
 * are choreographed via the various methods on this class.
 *
 * <p>A "lock-like object" is really any object that may be used for concurrency control. If the
 * {@link #callAndAssertBlocks} method is ever called in a test, the lock-like object must have a
 * method equivalent to {@link java.util.concurrent.locks.ReentrantLock#hasQueuedThread(Thread)}. If
 * the {@link #callAndAssertWaits} method is ever called in a test, the lock-like object must have a
 * method equivalent to {@link
 * java.util.concurrent.locks.ReentrantLock#hasWaiters(java.util.concurrent.locks.Condition)},
 * except that the method parameter must accept whatever condition-like object is passed into {@code
 * callAndAssertWaits} by the test.
 *
 * @param <L> the type of the lock-like object to be used
 * @author Justin T. Sampson
 */
ThreadFactoryBuilderTest (/android/guava-tests/test/com/google/common/util/concurrent/ThreadFactoryBuilderTest.java)/**
 * Tests for ThreadFactoryBuilder.
 *
 * @author Kurt Alfred Kluever
 * @author Martin Buchholz
 */
TrustedInputFutureTest (/android/guava-tests/test/com/google/common/util/concurrent/TrustedInputFutureTest.java)/**
 * Tests for {@link AbstractFuture} that use a {@link TrustedFuture} for {@link
 * AbstractFuture#setFuture} calls.
 */
TrustedListenableFutureTaskTest (/android/guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java)/** Test case for {@link TrustedListenableFutureTask}. */
UncheckedThrowingFuture (/android/guava-tests/test/com/google/common/util/concurrent/UncheckedThrowingFuture.java)/**
 * A {@link Future} implementation which always throws directly from calls to {@code get()} (i.e.
 * not wrapped in {@code ExecutionException}. For just a normal failure, use {@link
 * SettableFuture}).
 *
 * <p>Useful for testing the behavior of Future utilities against odd futures.
 *
 * @author Anthony Zana
 */
UninterruptibleFutureTest (/android/guava-tests/test/com/google/common/util/concurrent/UninterruptibleFutureTest.java)/**
 * Unit test for {@link Uninterruptibles#getUninterruptibly}
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
Completion (/android/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java)/**
   * Wrapper around {@link Stopwatch} which also contains an "expected completion time." Creating a
   * {@code Completion} starts the underlying stopwatch.
   */
TimedPutQueue (/android/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java)/** Manages a {@link BlockingQueue} and associated timings for a {@code put} call. */
TimedTakeQueue (/android/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java)/** Manages a {@link BlockingQueue} and associated timings for a {@code take} call. */
TimedSemaphore (/android/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java)/** Manages a {@link Semaphore} and associated timings. */
UntrustedInputFutureTest (/android/guava-tests/test/com/google/common/util/concurrent/UntrustedInputFutureTest.java)/**
 * Tests for {@link AbstractFuture} that use a non-{@link TrustedFuture} for {@link
 * AbstractFuture#setFuture} calls.
 */
WrappingExecutorServiceTest (/android/guava-tests/test/com/google/common/util/concurrent/WrappingExecutorServiceTest.java)/**
 * Test for {@link WrappingExecutorService}
 *
 * @author Chris Nokleberg
 */
WrappingScheduledExecutorServiceTest (/android/guava-tests/test/com/google/common/util/concurrent/WrappingScheduledExecutorServiceTest.java)/**
 * Test for {@link WrappingScheduledExecutorService}
 *
 * @author Luke Sandberg
 */
XmlEscapersTest (/android/guava-tests/test/com/google/common/xml/XmlEscapersTest.java)/**
 * Tests for the {@link XmlEscapers} class.
 *
 * @author Alex Matevossian
 * @author David Beaumont
 */
InternalFutureFailureAccess (/futures/failureaccess/src/com/google/common/util/concurrent/internal/InternalFutureFailureAccess.java)/**
 * A future that, if it fails, may <i>optionally</i> provide access to the cause of the failure.
 *
 * <p>This class is used only for micro-optimization. Standard {@code Future} utilities benefit from
 * this optimization, so there is no need to specialize methods to return or accept this type
 * instead of {@code ListenableFuture}.
 *
 * <p>This class is GWT-compatible.
 *
 * @since {@code com.google.guava:failureaccess:1.0}, which was added as a dependency of Guava in
 *     Guava 27.0
 */
InternalFutures (/futures/failureaccess/src/com/google/common/util/concurrent/internal/InternalFutures.java)/**
 * Static utilities for {@link InternalFutureFailureAccess}. Most users will never need to use this
 * class.
 *
 * <p>This class is GWT-compatible.
 *
 * @since {@code com.google.guava:failureaccess:1.0}, which was added as a dependency of Guava in
 *     Guava 27.0
 */
ListenableFuture (/futures/listenablefuture1/src/com/google/common/util/concurrent/ListenableFuture.java)/**
 * A {@link Future} that accepts completion listeners. Each listener has an associated executor, and
 * it is invoked using this executor once the future's computation is {@linkplain Future#isDone()
 * complete}. If the computation has already completed when the listener is added, the listener will
 * execute immediately.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/ListenableFutureExplained">{@code
 * ListenableFuture}</a>.
 *
 * <p>This class is GWT-compatible.
 *
 * <h3>Purpose</h3>
 *
 * <p>The main purpose of {@code ListenableFuture} is to help you chain together a graph of
 * asynchronous operations. You can chain them together manually with calls to methods like {@link
 * Futures#transform(ListenableFuture, com.google.common.base.Function, Executor)
 * Futures.transform}, but you will often find it easier to use a framework. Frameworks automate the
 * process, often adding features like monitoring, debugging, and cancellation. Examples of
 * frameworks include:
 *
 * <ul>
 *   <li><a href="http://dagger.dev/producers.html">Dagger Producers</a>
 * </ul>
 *
 * <p>The main purpose of {@link #addListener addListener} is to support this chaining. You will
 * rarely use it directly, in part because it does not provide direct access to the {@code Future}
 * result. (If you want such access, you may prefer {@link Futures#addCallback
 * Futures.addCallback}.) Still, direct {@code addListener} calls are occasionally useful:
 *
 * <pre>{@code
 * final String name = ...;
 * inFlight.add(name);
 * ListenableFuture<Result> future = service.query(name);
 * future.addListener(new Runnable() {
 *   public void run() {
 *     processedCount.incrementAndGet();
 *     inFlight.remove(name);
 *     lastProcessed.set(name);
 *     logger.info("Done with {0}", name);
 *   }
 * }, executor);
 * }</pre>
 *
 * <h3>How to get an instance</h3>
 *
 * <p>We encourage you to return {@code ListenableFuture} from your methods so that your users can
 * take advantage of the {@linkplain Futures utilities built atop the class}. The way that you will
 * create {@code ListenableFuture} instances depends on how you currently create {@code Future}
 * instances:
 *
 * <ul>
 *   <li>If you receive them from an {@code java.util.concurrent.ExecutorService}, convert that
 *       service to a {@link ListeningExecutorService}, usually by calling {@link
 *       MoreExecutors#listeningDecorator(java.util.concurrent.ExecutorService)
 *       MoreExecutors.listeningDecorator}.
 *   <li>If you manually call {@link java.util.concurrent.FutureTask#set} or a similar method,
 *       create a {@link SettableFuture} instead. (If your needs are more complex, you may prefer
 *       {@link AbstractFuture}.)
 * </ul>
 *
 * <p><b>Test doubles</b>: If you need a {@code ListenableFuture} for your test, try a {@link
 * SettableFuture} or one of the methods in the {@link Futures#immediateFuture Futures.immediate*}
 * family. <b>Avoid</b> creating a mock or stub {@code Future}. Mock and stub implementations are
 * fragile because they assume that only certain methods will be called and because they often
 * implement subtleties of the API improperly.
 *
 * <p><b>Custom implementation</b>: Avoid implementing {@code ListenableFuture} from scratch. If you
 * can't get by with the standard implementations, prefer to derive a new {@code Future} instance
 * with the methods in {@link Futures} or, if necessary, to extend {@link AbstractFuture}.
 *
 * <p>Occasionally, an API will return a plain {@code Future} and it will be impossible to change
 * the return type. For this case, we provide a more expensive workaround in {@code
 * JdkFutureAdapters}. However, when possible, it is more efficient and reliable to create a {@code
 * ListenableFuture} directly.
 *
 * @author Sven Mawson
 * @author Nishant Thakkar
 * @since 1.0
 */
Absent (/guava/src/com/google/common/base/Absent.java)/** Implementation of an {@link Optional} not containing a reference. */
AbstractIterator (/guava/src/com/google/common/base/AbstractIterator.java)/**
 * Note this class is a copy of {@link com.google.common.collect.AbstractIterator} (for dependency
 * reasons).
 */
Ascii (/guava/src/com/google/common/base/Ascii.java)/**
 * Static methods pertaining to ASCII characters (those in the range of values {@code 0x00} through
 * {@code 0x7F}), and to strings containing such characters.
 *
 * <p>ASCII utilities also exist in other classes of this package:
 *
 * <ul>
 *   <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->
 *   <li>{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.
 *   <li>{@link CharMatcher#ascii} matches ASCII characters and provides text processing methods
 *       which operate only on the ASCII characters of a string.
 * </ul>
 *
 * @author Catherine Berry
 * @author Gregory Kick
 * @since 7.0
 */
FastMatcher (/guava/src/com/google/common/base/CharMatcher.java)/** A matcher for which precomputation will not yield any significant benefit. */
NamedFastMatcher (/guava/src/com/google/common/base/CharMatcher.java)/** {@link FastMatcher} which overrides {@code toString()} with a custom name. */
NegatedFastMatcher (/guava/src/com/google/common/base/CharMatcher.java)/** Negation of a {@link FastMatcher}. */
BitSetMatcher (/guava/src/com/google/common/base/CharMatcher.java)/** Fast matcher using a {@link BitSet} table of matching characters. */
Any (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #any()}. */
None (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #none()}. */
Whitespace (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #whitespace()}. */
BreakingWhitespace (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #breakingWhitespace()}. */
Ascii (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #ascii()}. */
RangesMatcher (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation that matches characters that fall within multiple ranges. */
Digit (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #digit()}. */
JavaDigit (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaDigit()}. */
JavaLetter (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaLetter()}. */
JavaLetterOrDigit (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaLetterOrDigit()}. */
JavaUpperCase (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaUpperCase()}. */
JavaLowerCase (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaLowerCase()}. */
JavaIsoControl (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #javaIsoControl()}. */
Invisible (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #invisible()}. */
SingleWidth (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #singleWidth()}. */
Negated (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #negate()}. */
And (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #and(CharMatcher)}. */
Or (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #or(CharMatcher)}. */
Is (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #is(char)}. */
IsNot (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #isNot(char)}. */
IsEither (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #anyOf(CharSequence)} for exactly two characters. */
AnyOf (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #anyOf(CharSequence)} for three or more characters. */
InRange (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #inRange(char, char)}. */
ForPredicate (/guava/src/com/google/common/base/CharMatcher.java)/** Implementation of {@link #forPredicate(Predicate)}. */
CharMatcher (/guava/src/com/google/common/base/CharMatcher.java)/**
 * Determines a true or false value for any Java {@code char} value, just as {@link Predicate} does
 * for any {@link Object}. Also offers basic text processing methods based on this function.
 * Implementations are strongly encouraged to be side-effect-free and immutable.
 *
 * <p>Throughout the documentation of this class, the phrase "matching character" is used to mean
 * "any {@code char} value {@code c} for which {@code this.matches(c)} returns {@code true}".
 *
 * <p><b>Warning:</b> This class deals only with {@code char} values, that is, <a
 * href="http://www.unicode.org/glossary/#BMP_character">BMP characters</a>. It does not understand
 * <a href="http://www.unicode.org/glossary/#supplementary_code_point">supplementary Unicode code
 * points</a> in the range {@code 0x10000} to {@code 0x10FFFF} which includes the majority of
 * assigned characters, including important CJK characters and emoji.
 *
 * <p>Supplementary characters are <a
 * href="https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#supplementary">encoded
 * into a {@code String} using surrogate pairs</a>, and a {@code CharMatcher} treats these just as
 * two separate characters. {@link #countIn} counts each supplementary character as 2 {@code char}s.
 *
 * <p>For up-to-date Unicode character properties (digit, letter, etc.) and support for
 * supplementary code points, use ICU4J UCharacter and UnicodeSet (freeze() after building). For
 * basic text processing based on UnicodeSet use the ICU4J UnicodeSetSpanner.
 *
 * <p>Example usages:
 *
 * <pre>
 *   String trimmed = {@link #whitespace() whitespace()}.{@link #trimFrom trimFrom}(userInput);
 *   if ({@link #ascii() ascii()}.{@link #matchesAllOf matchesAllOf}(s)) { ... }</pre>
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/StringsExplained#charmatcher">{@code CharMatcher}
 * </a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Charsets (/guava/src/com/google/common/base/Charsets.java)/**
 * Contains constant definitions for the six standard {@link Charset} instances, which are
 * guaranteed to be supported by all Java platform implementations.
 *
 * <p>Assuming you're free to choose, note that <b>{@link #UTF_8} is widely preferred</b>.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/StringsExplained#charsets">{@code Charsets}</a>.
 *
 * @author Mike Bostock
 * @since 1.0
 */
CommonMatcher (/guava/src/com/google/common/base/CommonMatcher.java)/**
 * The subset of the {@link java.util.regex.Matcher} API which is used by this package, and also
 * shared with the {@code re2j} library. For internal use only. Please refer to the {@code Matcher}
 * javadoc for details.
 */
CommonPattern (/guava/src/com/google/common/base/CommonPattern.java)/**
 * The subset of the {@link java.util.regex.Pattern} API which is used by this package, and also
 * shared with the {@code re2j} library. For internal use only. Please refer to the {@code Pattern}
 * javadoc for details.
 */
IdentityConverter (/guava/src/com/google/common/base/Converter.java)/**
   * A converter that always converts or reverses an object to itself. Note that T is now a
   * "pass-through type".
   */
Converter (/guava/src/com/google/common/base/Converter.java)/**
 * A function from {@code A} to {@code B} with an associated <i>reverse</i> function from {@code B}
 * to {@code A}; used for converting back and forth between <i>different representations of the same
 * information</i>.
 *
 * <h3>Invertibility</h3>
 *
 * <p>The reverse operation <b>may</b> be a strict <i>inverse</i> (meaning that {@code
 * converter.reverse().convert(converter.convert(a)).equals(a)} is always true). However, it is very
 * common (perhaps <i>more</i> common) for round-trip conversion to be <i>lossy</i>. Consider an
 * example round-trip using {@link com.google.common.primitives.Doubles#stringConverter}:
 *
 * <ol>
 *   <li>{@code stringConverter().convert("1.00")} returns the {@code Double} value {@code 1.0}
 *   <li>{@code stringConverter().reverse().convert(1.0)} returns the string {@code "1.0"} --
 *       <i>not</i> the same string ({@code "1.00"}) we started with
 * </ol>
 *
 * <p>Note that it should still be the case that the round-tripped and original objects are
 * <i>similar</i>.
 *
 * <h3>Nullability</h3>
 *
 * <p>A converter always converts {@code null} to {@code null} and non-null references to non-null
 * references. It would not make sense to consider {@code null} and a non-null reference to be
 * "different representations of the same information", since one is distinguishable from
 * <i>missing</i> information and the other is not. The {@link #convert} method handles this null
 * behavior for all converters; implementations of {@link #doForward} and {@link #doBackward} are
 * guaranteed to never be passed {@code null}, and must never return {@code null}.
 *
 *
 * <h3>Common ways to use</h3>
 *
 * <p>Getting a converter:
 *
 * <ul>
 *   <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link
 *       com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain
 *       #reverse reverse} views of these.
 *   <li>Convert between specific preset values using {@link
 *       com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to
 *       create a "fake" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i>
 *       the {@code Converter} type using a mocking framework.
 *   <li>Extend this class and implement its {@link #doForward} and {@link #doBackward} methods.
 *   <li><b>Java 8 users:</b> you may prefer to pass two lambda expressions or method references to
 *       the {@link #from from} factory method.
 * </ul>
 *
 * <p>Using a converter:
 *
 * <ul>
 *   <li>Convert one instance in the "forward" direction using {@code converter.convert(a)}.
 *   <li>Convert multiple instances "forward" using {@code converter.convertAll(as)}.
 *   <li>Convert in the "backward" direction using {@code converter.reverse().convert(b)} or {@code
 *       converter.reverse().convertAll(bs)}.
 *   <li>Use {@code converter} or {@code converter.reverse()} anywhere a {@link
 *       java.util.function.Function} is accepted (for example {@link java.util.stream.Stream#map
 *       Stream.map}).
 *   <li><b>Do not</b> call {@link #doForward} or {@link #doBackward} directly; these exist only to
 *       be overridden.
 * </ul>
 *
 * <h3>Example</h3>
 *
 * <pre>
 *   return new Converter&lt;Integer, String&gt;() {
 *     protected String doForward(Integer i) {
 *       return Integer.toHexString(i);
 *     }
 *
 *     protected Integer doBackward(String s) {
 *       return parseUnsignedInt(s, 16);
 *     }
 *   };</pre>
 *
 * <p>An alternative using Java 8:
 *
 * <pre>{@code
 * return Converter.from(
 *     Integer::toHexString,
 *     s -> parseUnsignedInt(s, 16));
 * }</pre>
 *
 * @author Mike Ward
 * @author Kurt Alfred Kluever
 * @author Gregory Kick
 * @since 16.0
 */
Defaults (/guava/src/com/google/common/base/Defaults.java)/**
 * This class provides default values for all Java types, as defined by the JLS.
 *
 * @author Ben Yu
 * @since 1.0
 */
Enums (/guava/src/com/google/common/base/Enums.java)/**
 * Utility methods for working with {@link Enum} instances.
 *
 * @author Steve McKay
 * @since 9.0
 */
Wrapper (/guava/src/com/google/common/base/Equivalence.java)/**
   * Wraps an object so that {@link #equals(Object)} and {@link #hashCode()} delegate to an {@link
   * Equivalence}.
   *
   * <p>For example, given an {@link Equivalence} for {@link String strings} named {@code equiv}
   * that tests equivalence using their lengths:
   *
   * <pre>{@code
   * equiv.wrap("a").equals(equiv.wrap("b")) // true
   * equiv.wrap("a").equals(equiv.wrap("hello")) // false
   * }</pre>
   *
   * <p>Note in particular that an equivalence wrapper is never equal to the object it wraps.
   *
   * <pre>{@code
   * equiv.wrap(obj).equals(obj) // always false
   * }</pre>
   *
   * @since 10.0
   */
Equivalence (/guava/src/com/google/common/base/Equivalence.java)/**
 * A strategy for determining whether two instances are considered equivalent, and for computing
 * hash codes in a manner consistent with that equivalence. Two examples of equivalences are the
 * {@linkplain #identity() identity equivalence} and the {@linkplain #equals "equals" equivalence}.
 *
 * @author Bob Lee
 * @author Ben Yu
 * @author Gregory Kick
 * @since 10.0 (<a href="https://github.com/google/guava/wiki/Compatibility">mostly
 *     source-compatible</a> since 4.0)
 */
ExtraObjectsMethodsForWeb (/guava/src/com/google/common/base/ExtraObjectsMethodsForWeb.java)/**
 * Holder for extra methods of {@code Objects} only in web. Intended to be empty for regular
 * version.
 */
FinalizablePhantomReference (/guava/src/com/google/common/base/FinalizablePhantomReference.java)/**
 * Phantom reference with a {@code finalizeReferent()} method which a background thread invokes
 * after the garbage collector reclaims the referent. This is a simpler alternative to using a
 * {@link ReferenceQueue}.
 *
 * <p>Unlike a normal phantom reference, this reference will be cleared automatically.
 *
 * @author Bob Lee
 * @since 2.0
 */
FinalizableReference (/guava/src/com/google/common/base/FinalizableReference.java)/**
 * Implemented by references that have code to run after garbage collection of their referents.
 *
 * @see FinalizableReferenceQueue
 * @author Bob Lee
 * @since 2.0
 */
FinalizerLoader (/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/** Loads Finalizer.class. */
SystemLoader (/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/**
   * Tries to load Finalizer from the system class loader. If Finalizer is in the system class path,
   * we needn't create a separate loader.
   */
DecoupledLoader (/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/**
   * Try to load Finalizer in its own class loader. If Finalizer's thread had a direct reference to
   * our class loader (which could be that of a dynamically loaded web application or OSGi bundle),
   * it would prevent our class loader from getting garbage collected.
   */
DirectLoader (/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/**
   * Loads Finalizer directly using the current class loader. We won't be able to garbage collect
   * this class loader, but at least the world doesn't end.
   */
FinalizableReferenceQueue (/guava/src/com/google/common/base/FinalizableReferenceQueue.java)/**
 * A reference queue with an associated background thread that dequeues references and invokes
 * {@link FinalizableReference#finalizeReferent()} on them.
 *
 * <p>Keep a strong reference to this object until all of the associated referents have been
 * finalized. If this object is garbage collected earlier, the backing thread will not invoke {@code
 * finalizeReferent()} on the remaining references.
 *
 * <p>As an example of how this is used, imagine you have a class {@code MyServer} that creates a a
 * {@link java.net.ServerSocket ServerSocket}, and you would like to ensure that the {@code
 * ServerSocket} is closed even if the {@code MyServer} object is garbage-collected without calling
 * its {@code close} method. You <em>could</em> use a finalizer to accomplish this, but that has a
 * number of well-known problems. Here is how you might use this class instead:
 *
 * <pre>{@code
 * public class MyServer implements Closeable {
 *   private static final FinalizableReferenceQueue frq = new FinalizableReferenceQueue();
 *   // You might also share this between several objects.
 *
 *   private static final Set<Reference<?>> references = Sets.newConcurrentHashSet();
 *   // This ensures that the FinalizablePhantomReference itself is not garbage-collected.
 *
 *   private final ServerSocket serverSocket;
 *
 *   private MyServer(...) {
 *     ...
 *     this.serverSocket = new ServerSocket(...);
 *     ...
 *   }
 *
 *   public static MyServer create(...) {
 *     MyServer myServer = new MyServer(...);
 *     final ServerSocket serverSocket = myServer.serverSocket;
 *     Reference<?> reference = new FinalizablePhantomReference<MyServer>(myServer, frq) {
 *       public void finalizeReferent() {
 *         references.remove(this):
 *         if (!serverSocket.isClosed()) {
 *           ...log a message about how nobody called close()...
 *           try {
 *             serverSocket.close();
 *           } catch (IOException e) {
 *             ...
 *           }
 *         }
 *       }
 *     };
 *     references.add(reference);
 *     return myServer;
 *   }
 *
 *   public void close() {
 *     serverSocket.close();
 *   }
 * }
 * }</pre>
 *
 * @author Bob Lee
 * @since 2.0
 */
FinalizableSoftReference (/guava/src/com/google/common/base/FinalizableSoftReference.java)/**
 * Soft reference with a {@code finalizeReferent()} method which a background thread invokes after
 * the garbage collector reclaims the referent. This is a simpler alternative to using a {@link
 * ReferenceQueue}.
 *
 * @author Bob Lee
 * @since 2.0
 */
FinalizableWeakReference (/guava/src/com/google/common/base/FinalizableWeakReference.java)/**
 * Weak reference with a {@code finalizeReferent()} method which a background thread invokes after
 * the garbage collector reclaims the referent. This is a simpler alternative to using a {@link
 * ReferenceQueue}.
 *
 * @author Bob Lee
 * @since 2.0
 */
Function (/guava/src/com/google/common/base/Function.java)/**
 * Legacy version of {@link java.util.function.Function java.util.function.Function}.
 *
 * <p>The {@link Functions} class provides common functions and related utilities.
 *
 * <p>As this interface extends {@code java.util.function.Function}, an instance of this type can be
 * used as a {@code java.util.function.Function} directly. To use a {@code
 * java.util.function.Function} in a context where a {@code com.google.common.base.Function} is
 * needed, use {@code function::apply}.
 *
 * <p>This interface is now a legacy type. Use {@code java.util.function.Function} (or the
 * appropriate primitive specialization such as {@code ToIntFunction}) instead whenever possible.
 * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions
 * or method references instead of classes, leaving your code easier to migrate in the future.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/FunctionalExplained">the use of {@code Function}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
FunctionalEquivalence (/guava/src/com/google/common/base/FunctionalEquivalence.java)/**
 * Equivalence applied on functional result.
 *
 * @author Bob Lee
 * @since 10.0
 */
PredicateFunction (/guava/src/com/google/common/base/Functions.java)/** @see Functions#forPredicate */
SupplierFunction (/guava/src/com/google/common/base/Functions.java)/** @see Functions#forSupplier */
Functions (/guava/src/com/google/common/base/Functions.java)/**
 * Static utility methods pertaining to {@code com.google.common.base.Function} instances; see that
 * class for information about migrating to {@code java.util.function}.
 *
 * <p>All methods return serializable functions as long as they're given serializable parameters.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/FunctionalExplained">the use of {@code Function}</a>.
 *
 * @author Mike Bostock
 * @author Jared Levy
 * @since 2.0
 */
Finalizer (/guava/src/com/google/common/base/internal/Finalizer.java)/**
 * Thread that finalizes referents. All references should implement {@code
 * com.google.common.base.FinalizableReference}.
 *
 * <p>While this class is public, we consider it to be *internal* and not part of our published API.
 * It is public so we can access it reflectively across class loaders in secure environments.
 *
 * <p>This class can't depend on other Guava code. If we were to load this class in the same class
 * loader as the rest of Guava, this thread would keep an indirect strong reference to the class
 * loader and prevent it from being garbage collected. This poses a problem for environments where
 * you want to throw away the class loader. For example, dynamically reloading a web application or
 * unloading an OSGi bundle.
 *
 * <p>{@code com.google.common.base.FinalizableReferenceQueue} loads this class in its own class
 * loader. That way, this class doesn't prevent the main class loader from getting garbage
 * collected, and this class can detect when the main class loader has been garbage collected and
 * stop itself.
 */
JdkPattern (/guava/src/com/google/common/base/JdkPattern.java)/** A regex pattern implementation which is backed by the {@link Pattern}. */
MapJoiner (/guava/src/com/google/common/base/Joiner.java)/**
   * An object that joins map entries in the same manner as {@code Joiner} joins iterables and
   * arrays. Like {@code Joiner}, it is thread-safe and immutable.
   *
   * <p>In addition to operating on {@code Map} instances, {@code MapJoiner} can operate on {@code
   * Multimap} entries in two distinct modes:
   *
   * <ul>
   *   <li>To output a separate entry for each key-value pair, pass {@code multimap.entries()} to a
   *       {@code MapJoiner} method that accepts entries as input, and receive output of the form
   *       {@code key1=A&key1=B&key2=C}.
   *   <li>To output a single entry for each key, pass {@code multimap.asMap()} to a {@code
   *       MapJoiner} method that accepts a map as input, and receive output of the form {@code
   *       key1=[A, B]&key2=C}.
   * </ul>
   *
   * @since 2.0
   */
Joiner (/guava/src/com/google/common/base/Joiner.java)/**
 * An object which joins pieces of text (specified as an array, {@link Iterable}, varargs or even a
 * {@link Map}) with a separator. It either appends the results to an {@link Appendable} or returns
 * them as a {@link String}. Example:
 *
 * <pre>{@code
 * Joiner joiner = Joiner.on("; ").skipNulls();
 *  . . .
 * return joiner.join("Harry", null, "Ron", "Hermione");
 * }</pre>
 *
 * <p>This returns the string {@code "Harry; Ron; Hermione"}. Note that all input elements are
 * converted to strings using {@link Object#toString()} before being appended.
 *
 * <p>If neither {@link #skipNulls()} nor {@link #useForNull(String)} is specified, the joining
 * methods will throw {@link NullPointerException} if any given element is null.
 *
 * <p><b>Warning: joiner instances are always immutable</b>; a configuration method such as {@code
 * useForNull} has no effect on the instance it is invoked on! You must store and use the new joiner
 * instance returned by the method. This makes joiners thread-safe, and safe to store as {@code
 * static final} constants.
 *
 * <pre>{@code
 * // Bad! Do not do this!
 * Joiner joiner = Joiner.on(',');
 * joiner.skipNulls(); // does nothing!
 * return joiner.join("wrong", null, "wrong");
 * }</pre>
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/StringsExplained#joiner">{@code Joiner}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
ToStringHelper (/guava/src/com/google/common/base/MoreObjects.java)/**
   * Support class for {@link MoreObjects#toStringHelper}.
   *
   * @author Jason Lee
   * @since 18.0 (since 2.0 as {@code Objects.ToStringHelper}).
   */
MoreObjects (/guava/src/com/google/common/base/MoreObjects.java)/**
 * Helper functions that operate on any {@code Object}, and are not already provided in {@link
 * java.util.Objects}.
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained">writing {@code Object}
 * methods with {@code MoreObjects}</a>.
 *
 * @author Laurence Gonsalves
 * @since 18.0 (since 2.0 as {@code Objects})
 */
Objects (/guava/src/com/google/common/base/Objects.java)/**
 * Helper functions that can operate on any {@code Object}.
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained">writing {@code Object}
 * methods with {@code Objects}</a>.
 *
 * @author Laurence Gonsalves
 * @since 2.0
 */
Optional (/guava/src/com/google/common/base/Optional.java)/**
 * An immutable object that may contain a non-null reference to another object. Each instance of
 * this type either contains a non-null reference, or contains nothing (in which case we say that
 * the reference is "absent"); it is never said to "contain {@code null}".
 *
 * <p>A non-null {@code Optional<T>} reference can be used as a replacement for a nullable {@code T}
 * reference. It allows you to represent "a {@code T} that must be present" and a "a {@code T} that
 * might be absent" as two distinct types in your program, which can aid clarity.
 *
 * <p>Some uses of this class include
 *
 * <ul>
 *   <li>As a method return type, as an alternative to returning {@code null} to indicate that no
 *       value was available
 *   <li>To distinguish between "unknown" (for example, not present in a map) and "known to have no
 *       value" (present in the map, with value {@code Optional.absent()})
 *   <li>To wrap nullable references for storage in a collection that does not support {@code null}
 *       (though there are <a
 *       href="https://github.com/google/guava/wiki/LivingWithNullHostileCollections">several other
 *       approaches to this</a> that should be considered first)
 * </ul>
 *
 * <p>A common alternative to using this class is to find or create a suitable <a
 * href="http://en.wikipedia.org/wiki/Null_Object_pattern">null object</a> for the type in question.
 *
 * <p>This class is not intended as a direct analogue of any existing "option" or "maybe" construct
 * from other programming environments, though it may bear some similarities.
 *
 * <p><b>Comparison to {@code java.util.Optional} (JDK 8 and higher):</b> A new {@code Optional}
 * class was added for Java 8. The two classes are extremely similar, but incompatible (they cannot
 * share a common supertype). <i>All</i> known differences are listed either here or with the
 * relevant methods below.
 *
 * <ul>
 *   <li>This class is serializable; {@code java.util.Optional} is not.
 *   <li>{@code java.util.Optional} has the additional methods {@code ifPresent}, {@code filter},
 *       {@code flatMap}, and {@code orElseThrow}.
 *   <li>{@code java.util} offers the primitive-specialized versions {@code OptionalInt}, {@code
 *       OptionalLong} and {@code OptionalDouble}, the use of which is recommended; Guava does not
 *       have these.
 * </ul>
 *
 * <p><b>There are no plans to deprecate this class in the foreseeable future.</b> However, we do
 * gently recommend that you prefer the new, standard Java class whenever possible.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional">using {@code
 * Optional}</a>.
 *
 * @param <T> the type of instance that can be contained. {@code Optional} is naturally covariant on
 *     this type, so it is safe to cast an {@code Optional<T>} to {@code Optional<S>} for any
 *     supertype {@code S} of {@code T}.
 * @author Kurt Alfred Kluever
 * @author Kevin Bourrillion
 * @since 10.0
 */
PatternCompiler (/guava/src/com/google/common/base/PatternCompiler.java)/**
 * Pluggable interface for compiling a regex pattern. By default this package uses the {@code
 * java.util.regex} library, but an alternate implementation can be supplied using the {@link
 * java.util.ServiceLoader} mechanism.
 */
Platform (/guava/src/com/google/common/base/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * @author Jesse Wilson
 */
Preconditions (/guava/src/com/google/common/base/Preconditions.java)/**
 * Static convenience methods that help a method or constructor check whether it was invoked
 * correctly (that is, whether its <i>preconditions</i> were met).
 *
 * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake. This allows constructs such as
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   if (value < 0) {
 *     throw new IllegalArgumentException("input is negative: " + value);
 *   }
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>to be replaced with the more compact
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   checkArgument(value >= 0, "input is negative: %s", value);
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>so that a hypothetical bad caller of this method, such as:
 *
 * <pre>{@code
 * void exampleBadCaller() {
 *   double d = sqrt(-1.0);
 * }
 * }</pre>
 *
 * <p>would be flagged as having called {@code sqrt()} with an illegal argument.
 *
 * <h3>Performance</h3>
 *
 * <p>Avoid passing message arguments that are expensive to compute; your code will always compute
 * them, even though they usually won't be needed. If you have such arguments, use the conventional
 * if/throw idiom instead.
 *
 * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
 * creation. However, the methods of this class have a large number of overloads that prevent such
 * allocations in many common cases.
 *
 * <p>The message string is not formatted unless the exception will be thrown, so the cost of the
 * string formatting itself should not be a concern.
 *
 * <p>As with any performance concerns, you should consider profiling your code (in a production
 * environment if possible) before spending a lot of effort on tweaking a particular element.
 *
 * <h3>Other types of preconditions</h3>
 *
 * <p>Not every type of precondition failure is supported by these methods. Continue to throw
 * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
 * UnsupportedOperationException} in the situations they are intended for.
 *
 * <h3>Non-preconditions</h3>
 *
 * <p>It is of course possible to use the methods of this class to check for invalid conditions
 * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
 * misleading to future readers of the code and of stack traces. See <a
 * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional failures
 * explained</a> in the Guava User Guide for more advice. Notably, {@link Verify} offers assertions
 * similar to those in this class for non-precondition checks.
 *
 * <h3>{@code java.util.Objects.requireNonNull()}</h3>
 *
 * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
 * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
 * (The same goes for the message-accepting overloads.)
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template
 * strings. This only supports the {@code "%s"} specifier, not the full range of {@link
 * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the
 * number of occurrences of {@code "%s"} in the format string, {@code Preconditions} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/PreconditionsExplained">using {@code
 * Preconditions}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
Predicate (/guava/src/com/google/common/base/Predicate.java)/**
 * Legacy version of {@link java.util.function.Predicate java.util.function.Predicate}. Determines a
 * true or false value for a given input.
 *
 * <p>As this interface extends {@code java.util.function.Predicate}, an instance of this type may
 * be used as a {@code Predicate} directly. To use a {@code java.util.function.Predicate} where a
 * {@code com.google.common.base.Predicate} is expected, use the method reference {@code
 * predicate::test}.
 *
 * <p>This interface is now a legacy type. Use {@code java.util.function.Predicate} (or the
 * appropriate primitive specialization such as {@code IntPredicate}) instead whenever possible.
 * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions
 * or method references instead of classes, leaving your code easier to migrate in the future.
 *
 * <p>The {@link Predicates} class provides common predicates and related utilities.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/FunctionalExplained">the use of {@code Predicate}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
NotPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#not(Predicate) */
AndPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#and(Iterable) */
OrPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#or(Iterable) */
IsEqualToPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#equalTo(Object) */
InstanceOfPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#instanceOf(Class) */
SubtypeOfPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#subtypeOf(Class) */
InPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#in(Collection) */
CompositionPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#compose(Predicate, Function) */
ContainsPatternPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#contains(Pattern) */
ContainsPatternFromStringPredicate (/guava/src/com/google/common/base/Predicates.java)/** @see Predicates#containsPattern(String) */
Predicates (/guava/src/com/google/common/base/Predicates.java)/**
 * Static utility methods pertaining to {@code Predicate} instances.
 *
 * <p>All methods return serializable predicates as long as they're given serializable parameters.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/FunctionalExplained">the use of {@code Predicate}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
Present (/guava/src/com/google/common/base/Present.java)/** Implementation of an {@link Optional} containing a reference. */
SmallCharMatcher (/guava/src/com/google/common/base/SmallCharMatcher.java)/**
 * An immutable version of CharMatcher for smallish sets of characters that uses a hash table with
 * linear probing to check for matches.
 *
 * @author Christopher Swenson
 */
MapSplitter (/guava/src/com/google/common/base/Splitter.java)/**
   * An object that splits strings into maps as {@code Splitter} splits iterables and lists. Like
   * {@code Splitter}, it is thread-safe and immutable. The common way to build instances is by
   * providing an additional {@linkplain Splitter#withKeyValueSeparator key-value separator} to
   * {@link Splitter}.
   *
   * @since 10.0
   */
Splitter (/guava/src/com/google/common/base/Splitter.java)/**
 * Extracts non-overlapping substrings from an input string, typically by recognizing appearances of
 * a <i>separator</i> sequence. This separator can be specified as a single {@linkplain #on(char)
 * character}, fixed {@linkplain #on(String) string}, {@linkplain #onPattern regular expression} or
 * {@link #on(CharMatcher) CharMatcher} instance. Or, instead of using a separator at all, a
 * splitter can extract adjacent substrings of a given {@linkplain #fixedLength fixed length}.
 *
 * <p>For example, this expression:
 *
 * <pre>{@code
 * Splitter.on(',').split("foo,bar,qux")
 * }</pre>
 *
 * ... produces an {@code Iterable} containing {@code "foo"}, {@code "bar"} and {@code "qux"}, in
 * that order.
 *
 * <p>By default, {@code Splitter}'s behavior is simplistic and unassuming. The following
 * expression:
 *
 * <pre>{@code
 * Splitter.on(',').split(" foo,,,  bar ,")
 * }</pre>
 *
 * ... yields the substrings {@code [" foo", "", "", " bar ", ""]}. If this is not the desired
 * behavior, use configuration methods to obtain a <i>new</i> splitter instance with modified
 * behavior:
 *
 * <pre>{@code
 * private static final Splitter MY_SPLITTER = Splitter.on(',')
 *     .trimResults()
 *     .omitEmptyStrings();
 * }</pre>
 *
 * <p>Now {@code MY_SPLITTER.split("foo,,, bar ,")} returns just {@code ["foo", "bar"]}. Note that
 * the order in which these configuration methods are called is never significant.
 *
 * <p><b>Warning:</b> Splitter instances are immutable. Invoking a configuration method has no
 * effect on the receiving instance; you must store and use the new splitter instance it returns
 * instead.
 *
 * <pre>{@code
 * // Do NOT do this
 * Splitter splitter = Splitter.on('/');
 * splitter.trimResults(); // does nothing!
 * return splitter.split("wrong / wrong / wrong");
 * }</pre>
 *
 * <p>For separator-based splitters that do not use {@code omitEmptyStrings}, an input string
 * containing {@code n} occurrences of the separator naturally yields an iterable of size {@code n +
 * 1}. So if the separator does not occur anywhere in the input, a single substring is returned
 * containing the entire input. Consequently, all splitters split the empty string to {@code [""]}
 * (note: even fixed-length splitters).
 *
 * <p>Splitter instances are thread-safe immutable, and are therefore safe to store as {@code static
 * final} constants.
 *
 * <p>The {@link Joiner} class provides the inverse operation to splitting, but note that a
 * round-trip between the two should be assumed to be lossy.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/StringsExplained#splitter">{@code Splitter}</a>.
 *
 * @author Julien Silland
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 1.0
 */
Stopwatch (/guava/src/com/google/common/base/Stopwatch.java)/**
 * An object that measures elapsed time in nanoseconds. It is useful to measure elapsed time using
 * this class instead of direct calls to {@link System#nanoTime} for a few reasons:
 *
 * <ul>
 *   <li>An alternate time source can be substituted, for testing or performance reasons.
 *   <li>As documented by {@code nanoTime}, the value returned has no absolute meaning, and can only
 *       be interpreted as relative to another timestamp returned by {@code nanoTime} at a different
 *       time. {@code Stopwatch} is a more effective abstraction because it exposes only these
 *       relative values, not the absolute ones.
 * </ul>
 *
 * <p>Basic usage:
 *
 * <pre>{@code
 * Stopwatch stopwatch = Stopwatch.createStarted();
 * doSomething();
 * stopwatch.stop(); // optional
 *
 * Duration duration = stopwatch.elapsed();
 *
 * log.info("time: " + stopwatch); // formatted string like "12.3 ms"
 * }</pre>
 *
 * <p>Stopwatch methods are not idempotent; it is an error to start or stop a stopwatch that is
 * already in the desired state.
 *
 * <p>When testing code that uses this class, use {@link #createUnstarted(Ticker)} or {@link
 * #createStarted(Ticker)} to supply a fake or mock ticker. This allows you to simulate any valid
 * behavior of the stopwatch.
 *
 * <p><b>Note:</b> This class is not thread-safe.
 *
 * <p><b>Warning for Android users:</b> a stopwatch with default behavior may not continue to keep
 * time while the device is asleep. Instead, create one like this:
 *
 * <pre>{@code
 * Stopwatch.createStarted(
 *      new Ticker() {
 *        public long read() {
 *          return android.os.SystemClock.elapsedRealtimeNanos();
 *        }
 *      });
 * }</pre>
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
Strings (/guava/src/com/google/common/base/Strings.java)/**
 * Static utility methods pertaining to {@code String} or {@code CharSequence} instances.
 *
 * @author Kevin Bourrillion
 * @since 3.0
 */
Supplier (/guava/src/com/google/common/base/Supplier.java)/**
 * Legacy version of {@link java.util.function.Supplier java.util.function.Supplier}. Semantically,
 * this could be a factory, generator, builder, closure, or something else entirely. No guarantees
 * are implied by this interface.
 *
 * <p>The {@link Suppliers} class provides common suppliers and related utilities.
 *
 * <p>As this interface extends {@code java.util.function.Supplier}, an instance of this type can be
 * used as a {@code java.util.function.Supplier} directly. To use a {@code
 * java.util.function.Supplier} in a context where a {@code com.google.common.base.Supplier} is
 * needed, use {@code supplier::get}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/FunctionalExplained">the use of {@code Function}</a>.
 *
 * @author Harry Heymann
 * @since 2.0
 */
Suppliers (/guava/src/com/google/common/base/Suppliers.java)/**
 * Useful suppliers.
 *
 * <p>All methods return serializable suppliers as long as they're given serializable parameters.
 *
 * @author Laurence Gonsalves
 * @author Harry Heymann
 * @since 2.0
 */
Throwables (/guava/src/com/google/common/base/Throwables.java)/**
 * Static utility methods pertaining to instances of {@link Throwable}.
 *
 * <p>See the Guava User Guide entry on <a
 * href="https://github.com/google/guava/wiki/ThrowablesExplained">Throwables</a>.
 *
 * @author Kevin Bourrillion
 * @author Ben Yu
 * @since 1.0
 */
Ticker (/guava/src/com/google/common/base/Ticker.java)/**
 * A time source; returns a time value representing the number of nanoseconds elapsed since some
 * fixed but arbitrary point in time. Note that most users should use {@link Stopwatch} instead of
 * interacting with this class directly.
 *
 * <p><b>Warning:</b> this interface can only be used to measure elapsed time, not wall time.
 *
 * @author Kevin Bourrillion
 * @since 10.0 (<a href="https://github.com/google/guava/wiki/Compatibility">mostly
 *     source-compatible</a> since 9.0)
 */
Utf8 (/guava/src/com/google/common/base/Utf8.java)/**
 * Low-level, high-performance utility methods related to the {@linkplain Charsets#UTF_8 UTF-8}
 * character encoding. UTF-8 is defined in section D92 of <a
 * href="http://www.unicode.org/versions/Unicode6.2.0/ch03.pdf">The Unicode Standard Core
 * Specification, Chapter 3</a>.
 *
 * <p>The variant of UTF-8 implemented by this class is the restricted definition of UTF-8
 * introduced in Unicode 3.1. One implication of this is that it rejects <a
 * href="http://www.unicode.org/versions/corrigendum1.html">"non-shortest form"</a> byte sequences,
 * even though the JDK decoder may accept them.
 *
 * @author Martin Buchholz
 * @author Clément Roux
 * @since 16.0
 */
Verify (/guava/src/com/google/common/base/Verify.java)/**
 * Static convenience methods that serve the same purpose as Java language <a
 * href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html">assertions</a>,
 * except that they are always enabled. These methods should be used instead of Java assertions
 * whenever there is a chance the check may fail "in real life". Example:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 *
 * // In case bug 12345 happens again we'd rather just die
 * Verify.verify(bill.status() == Status.UNPAID,
 *     "Unexpected bill status: %s", bill.status());
 * }</pre>
 *
 * <h3>Comparison to alternatives</h3>
 *
 * <p><b>Note:</b> In some cases the differences explained below can be subtle. When it's unclear
 * which approach to use, <b>don't worry</b> too much about it; just pick something that seems
 * reasonable and it will be fine.
 *
 * <ul>
 *   <li>If checking whether the <i>caller</i> has violated your method or constructor's contract
 *       (such as by passing an invalid argument), use the utilities of the {@link Preconditions}
 *       class instead.
 *   <li>If checking an <i>impossible</i> condition (which <i>cannot</i> happen unless your own
 *       class or its <i>trusted</i> dependencies is badly broken), this is what ordinary Java
 *       assertions are for. Note that assertions are not enabled by default; they are essentially
 *       considered "compiled comments."
 *   <li>An explicit {@code if/throw} (as illustrated below) is always acceptable; we still
 *       recommend using our {@link VerifyException} exception type. Throwing a plain {@link
 *       RuntimeException} is frowned upon.
 *   <li>Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since
 *       {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the
 *       same function with more clarity.
 * </ul>
 *
 * <h3>Warning about performance</h3>
 *
 * <p>Remember that parameter values for message construction must all be computed eagerly, and
 * autoboxing and varargs array creation may happen as well, even when the verification succeeds and
 * the message ends up unneeded. Performance-sensitive verification checks should continue to use
 * usual form:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 * if (bill.status() != Status.UNPAID) {
 *   throw new VerifyException("Unexpected bill status: " + bill.status());
 * }
 * }</pre>
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>As with {@link Preconditions}, {@code Verify} uses {@link Strings#lenientFormat} to format
 * error message template strings. This only supports the {@code "%s"} specifier, not the full range
 * of {@link java.util.Formatter} specifiers. However, note that if the number of arguments does not
 * match the number of occurrences of {@code "%s"} in the format string, {@code Verify} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * See <a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional
 * failures explained</a> in the Guava User Guide for advice on when this class should be used.
 *
 * @since 17.0
 */
VerifyException (/guava/src/com/google/common/base/VerifyException.java)/**
 * Exception thrown upon the failure of a <a
 * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">verification check</a>,
 * including those performed by the convenience methods of the {@link Verify} class.
 *
 * @since 17.0
 */
StatsCounter (/guava/src/com/google/common/cache/AbstractCache.java)/**
   * Accumulates statistics during the operation of a {@link Cache} for presentation by {@link
   * Cache#stats}. This is solely intended for consumption by {@code Cache} implementors.
   *
   * @since 10.0
   */
SimpleStatsCounter (/guava/src/com/google/common/cache/AbstractCache.java)/**
   * A thread-safe {@link StatsCounter} implementation for use by {@link Cache} implementors.
   *
   * @since 10.0
   */
AbstractCache (/guava/src/com/google/common/cache/AbstractCache.java)/**
 * This class provides a skeletal implementation of the {@code Cache} interface to minimize the
 * effort required to implement this interface.
 *
 * <p>To implement a cache, the programmer needs only to extend this class and provide an
 * implementation for the {@link #put} and {@link #getIfPresent} methods. {@link #getAllPresent} is
 * implemented in terms of {@link #getIfPresent}; {@link #putAll} is implemented in terms of {@link
 * #put}, {@link #invalidateAll(Iterable)} is implemented in terms of {@link #invalidate}. The
 * method {@link #cleanUp} is a no-op. All other methods throw an {@link
 * UnsupportedOperationException}.
 *
 * @author Charles Fry
 * @since 10.0
 */
AbstractLoadingCache (/guava/src/com/google/common/cache/AbstractLoadingCache.java)/**
 * This class provides a skeletal implementation of the {@code Cache} interface to minimize the
 * effort required to implement this interface.
 *
 * <p>To implement a cache, the programmer needs only to extend this class and provide an
 * implementation for the {@link #get(Object)} and {@link #getIfPresent} methods. {@link
 * #getUnchecked}, {@link #get(Object, Callable)}, and {@link #getAll} are implemented in terms of
 * {@code get}; {@link #getAllPresent} is implemented in terms of {@code getIfPresent}; {@link
 * #putAll} is implemented in terms of {@link #put}, {@link #invalidateAll(Iterable)} is implemented
 * in terms of {@link #invalidate}. The method {@link #cleanUp} is a no-op. All other methods throw
 * an {@link UnsupportedOperationException}.
 *
 * @author Charles Fry
 * @since 11.0
 */
Cache (/guava/src/com/google/common/cache/Cache.java)/**
 * A semi-persistent mapping from keys to values. Cache entries are manually added using {@link
 * #get(Object, Callable)} or {@link #put(Object, Object)}, and are stored in the cache until either
 * evicted or manually invalidated. The common way to build instances is using {@link CacheBuilder}.
 *
 * <p>Implementations of this interface are expected to be thread-safe, and can be safely accessed
 * by multiple concurrent threads.
 *
 * @author Charles Fry
 * @since 10.0
 */
CacheBuilder (/guava/src/com/google/common/cache/CacheBuilder.java)/**
 * A builder of {@link LoadingCache} and {@link Cache} instances having any combination of the
 * following features:
 *
 * <ul>
 *   <li>automatic loading of entries into the cache
 *   <li>least-recently-used eviction when a maximum size is exceeded
 *   <li>time-based expiration of entries, measured since last access or last write
 *   <li>keys automatically wrapped in {@linkplain WeakReference weak} references
 *   <li>values automatically wrapped in {@linkplain WeakReference weak} or {@linkplain
 *       SoftReference soft} references
 *   <li>notification of evicted (or otherwise removed) entries
 *   <li>accumulation of cache access statistics
 * </ul>
 *
 *
 * <p>These features are all optional; caches can be created using all or none of them. By default
 * cache instances created by {@code CacheBuilder} will not perform any type of eviction.
 *
 * <p>Usage example:
 *
 * <pre>{@code
 * LoadingCache<Key, Graph> graphs = CacheBuilder.newBuilder()
 *     .maximumSize(10000)
 *     .expireAfterWrite(Duration.ofMinutes(10))
 *     .removalListener(MY_LISTENER)
 *     .build(
 *         new CacheLoader<Key, Graph>() {
 *           public Graph load(Key key) throws AnyException {
 *             return createExpensiveGraph(key);
 *           }
 *         });
 * }</pre>
 *
 * <p>Or equivalently,
 *
 * <pre>{@code
 * // In real life this would come from a command-line flag or config file
 * String spec = "maximumSize=10000,expireAfterWrite=10m";
 *
 * LoadingCache<Key, Graph> graphs = CacheBuilder.from(spec)
 *     .removalListener(MY_LISTENER)
 *     .build(
 *         new CacheLoader<Key, Graph>() {
 *           public Graph load(Key key) throws AnyException {
 *             return createExpensiveGraph(key);
 *           }
 *         });
 * }</pre>
 *
 * <p>The returned cache is implemented as a hash table with similar performance characteristics to
 * {@link ConcurrentHashMap}. It implements all optional operations of the {@link LoadingCache} and
 * {@link Cache} interfaces. The {@code asMap} view (and its collection views) have <i>weakly
 * consistent iterators</i>. This means that they are safe for concurrent use, but if other threads
 * modify the cache after the iterator is created, it is undefined which of these changes, if any,
 * are reflected in that iterator. These iterators never throw {@link
 * ConcurrentModificationException}.
 *
 * <p><b>Note:</b> by default, the returned cache uses equality comparisons (the {@link
 * Object#equals equals} method) to determine equality for keys or values. However, if {@link
 * #weakKeys} was specified, the cache uses identity ({@code ==}) comparisons instead for keys.
 * Likewise, if {@link #weakValues} or {@link #softValues} was specified, the cache uses identity
 * comparisons for values.
 *
 * <p>Entries are automatically evicted from the cache when any of {@linkplain #maximumSize(long)
 * maximumSize}, {@linkplain #maximumWeight(long) maximumWeight}, {@linkplain #expireAfterWrite
 * expireAfterWrite}, {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys
 * weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain #softValues softValues} are
 * requested.
 *
 * <p>If {@linkplain #maximumSize(long) maximumSize} or {@linkplain #maximumWeight(long)
 * maximumWeight} is requested entries may be evicted on each cache modification.
 *
 * <p>If {@linkplain #expireAfterWrite expireAfterWrite} or {@linkplain #expireAfterAccess
 * expireAfterAccess} is requested entries may be evicted on each cache modification, on occasional
 * cache accesses, or on calls to {@link Cache#cleanUp}. Expired entries may be counted by {@link
 * Cache#size}, but will never be visible to read or write operations.
 *
 * <p>If {@linkplain #weakKeys weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain
 * #softValues softValues} are requested, it is possible for a key or value present in the cache to
 * be reclaimed by the garbage collector. Entries with reclaimed keys or values may be removed from
 * the cache on each cache modification, on occasional cache accesses, or on calls to {@link
 * Cache#cleanUp}; such entries may be counted in {@link Cache#size}, but will never be visible to
 * read or write operations.
 *
 * <p>Certain cache configurations will result in the accrual of periodic maintenance tasks which
 * will be performed during write operations, or during occasional read operations in the absence of
 * writes. The {@link Cache#cleanUp} method of the returned cache will also perform maintenance, but
 * calling it should not be necessary with a high throughput cache. Only caches built with
 * {@linkplain #removalListener removalListener}, {@linkplain #expireAfterWrite expireAfterWrite},
 * {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys weakKeys}, {@linkplain
 * #weakValues weakValues}, or {@linkplain #softValues softValues} perform periodic maintenance.
 *
 * <p>The caches produced by {@code CacheBuilder} are serializable, and the deserialized caches
 * retain all the configuration properties of the original cache. Note that the serialized form does
 * <i>not</i> include cache contents, but only configuration.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/CachesExplained">caching</a> for a higher-level
 * explanation.
 *
 * @param <K> the most general key type this builder will be able to create caches for. This is
 *     normally {@code Object} unless it is constrained by using a method like {@code
 *     #removalListener}
 * @param <V> the most general value type this builder will be able to create caches for. This is
 *     normally {@code Object} unless it is constrained by using a method like {@code
 *     #removalListener}
 * @author Charles Fry
 * @author Kevin Bourrillion
 * @since 10.0
 */
ValueParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parses a single value. */
IntegerParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Base class for parsing integers. */
LongParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Base class for parsing integers. */
InitialCapacityParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse initialCapacity */
MaximumSizeParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse maximumSize */
MaximumWeightParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse maximumWeight */
ConcurrencyLevelParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse concurrencyLevel */
KeyStrengthParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse weakKeys */
ValueStrengthParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse weakValues and softValues */
RecordStatsParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse recordStats */
DurationParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Base class for parsing times with durations */
AccessDurationParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse expireAfterAccess */
WriteDurationParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse expireAfterWrite */
RefreshDurationParser (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/** Parse refreshAfterWrite */
CacheBuilderSpec (/guava/src/com/google/common/cache/CacheBuilderSpec.java)/**
 * A specification of a {@link CacheBuilder} configuration.
 *
 * <p>{@code CacheBuilderSpec} supports parsing configuration off of a string, which makes it
 * especially useful for command-line configuration of a {@code CacheBuilder}.
 *
 * <p>The string syntax is a series of comma-separated keys or key-value pairs, each corresponding
 * to a {@code CacheBuilder} method.
 *
 * <ul>
 *   <li>{@code concurrencyLevel=[integer]}: sets {@link CacheBuilder#concurrencyLevel}.
 *   <li>{@code initialCapacity=[integer]}: sets {@link CacheBuilder#initialCapacity}.
 *   <li>{@code maximumSize=[long]}: sets {@link CacheBuilder#maximumSize}.
 *   <li>{@code maximumWeight=[long]}: sets {@link CacheBuilder#maximumWeight}.
 *   <li>{@code expireAfterAccess=[duration]}: sets {@link CacheBuilder#expireAfterAccess}.
 *   <li>{@code expireAfterWrite=[duration]}: sets {@link CacheBuilder#expireAfterWrite}.
 *   <li>{@code refreshAfterWrite=[duration]}: sets {@link CacheBuilder#refreshAfterWrite}.
 *   <li>{@code weakKeys}: sets {@link CacheBuilder#weakKeys}.
 *   <li>{@code softValues}: sets {@link CacheBuilder#softValues}.
 *   <li>{@code weakValues}: sets {@link CacheBuilder#weakValues}.
 *   <li>{@code recordStats}: sets {@link CacheBuilder#recordStats}.
 * </ul>
 *
 * <p>The set of supported keys will grow as {@code CacheBuilder} evolves, but existing keys will
 * never be removed.
 *
 * <p>Durations are represented by an integer, followed by one of "d", "h", "m", or "s",
 * representing days, hours, minutes, or seconds respectively. (There is currently no syntax to
 * request expiration in milliseconds, microseconds, or nanoseconds.)
 *
 * <p>Whitespace before and after commas and equal signs is ignored. Keys may not be repeated; it is
 * also illegal to use the following pairs of keys in a single value:
 *
 * <ul>
 *   <li>{@code maximumSize} and {@code maximumWeight}
 *   <li>{@code softValues} and {@code weakValues}
 * </ul>
 *
 * <p>{@code CacheBuilderSpec} does not support configuring {@code CacheBuilder} methods with
 * non-value parameters. These must be configured in code.
 *
 * <p>A new {@code CacheBuilder} can be instantiated from a {@code CacheBuilderSpec} using {@link
 * CacheBuilder#from(CacheBuilderSpec)} or {@link CacheBuilder#from(String)}.
 *
 * @author Adam Winer
 * @since 12.0
 */
UnsupportedLoadingOperationException (/guava/src/com/google/common/cache/CacheLoader.java)/**
   * Exception thrown by {@code loadAll()} to indicate that it is not supported.
   *
   * @since 19.0
   */
InvalidCacheLoadException (/guava/src/com/google/common/cache/CacheLoader.java)/**
   * Thrown to indicate that an invalid response was returned from a call to {@link CacheLoader}.
   *
   * @since 11.0
   */
CacheLoader (/guava/src/com/google/common/cache/CacheLoader.java)/**
 * Computes or retrieves values, based on a key, for use in populating a {@link LoadingCache}.
 *
 * <p>Most implementations will only need to implement {@link #load}. Other methods may be
 * overridden as desired.
 *
 * <p>Usage example:
 *
 * <pre>{@code
 * CacheLoader<Key, Graph> loader = new CacheLoader<Key, Graph>() {
 *   public Graph load(Key key) throws AnyException {
 *     return createExpensiveGraph(key);
 *   }
 * };
 * LoadingCache<Key, Graph> cache = CacheBuilder.newBuilder().build(loader);
 * }</pre>
 *
 * <p>Since this example doesn't support reloading or bulk loading, it can also be specified much
 * more simply:
 *
 * <pre>{@code
 * CacheLoader<Key, Graph> loader = CacheLoader.from(key -> createExpensiveGraph(key));
 * }</pre>
 *
 * @author Charles Fry
 * @since 10.0
 */
CacheStats (/guava/src/com/google/common/cache/CacheStats.java)/**
 * Statistics about the performance of a {@link Cache}. Instances of this class are immutable.
 *
 * <p>Cache statistics are incremented according to the following rules:
 *
 * <ul>
 *   <li>When a cache lookup encounters an existing cache entry {@code hitCount} is incremented.
 *   <li>When a cache lookup first encounters a missing cache entry, a new entry is loaded.
 *       <ul>
 *         <li>After successfully loading an entry {@code missCount} and {@code loadSuccessCount}
 *             are incremented, and the total loading time, in nanoseconds, is added to {@code
 *             totalLoadTime}.
 *         <li>When an exception is thrown while loading an entry, {@code missCount} and {@code
 *             loadExceptionCount} are incremented, and the total loading time, in nanoseconds, is
 *             added to {@code totalLoadTime}.
 *         <li>Cache lookups that encounter a missing cache entry that is still loading will wait
 *             for loading to complete (whether successful or not) and then increment {@code
 *             missCount}.
 *       </ul>
 *   <li>When an entry is evicted from the cache, {@code evictionCount} is incremented.
 *   <li>No stats are modified when a cache entry is invalidated or manually removed.
 *   <li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of
 *       the cache.
 * </ul>
 *
 * <p>A lookup is specifically defined as an invocation of one of the methods {@link
 * LoadingCache#get(Object)}, {@link LoadingCache#getUnchecked(Object)}, {@link Cache#get(Object,
 * Callable)}, or {@link LoadingCache#getAll(Iterable)}.
 *
 * @author Charles Fry
 * @since 10.0
 */
SimpleForwardingCache (/guava/src/com/google/common/cache/ForwardingCache.java)/**
   * A simplified version of {@link ForwardingCache} where subclasses can pass in an already
   * constructed {@link Cache} as the delegate.
   *
   * @since 10.0
   */
ForwardingCache (/guava/src/com/google/common/cache/ForwardingCache.java)/**
 * A cache which forwards all its method calls to another cache. Subclasses should override one or
 * more methods to modify the behavior of the backing cache as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * @author Charles Fry
 * @since 10.0
 */
SimpleForwardingLoadingCache (/guava/src/com/google/common/cache/ForwardingLoadingCache.java)/**
   * A simplified version of {@link ForwardingLoadingCache} where subclasses can pass in an already
   * constructed {@link LoadingCache} as the delegate.
   *
   * @since 10.0
   */
ForwardingLoadingCache (/guava/src/com/google/common/cache/ForwardingLoadingCache.java)/**
 * A cache which forwards all its method calls to another cache. Subclasses should override one or
 * more methods to modify the behavior of the backing cache as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p>Note that {@link #get}, {@link #getUnchecked}, and {@link #apply} all expose the same
 * underlying functionality, so should probably be overridden as a group.
 *
 * @author Charles Fry
 * @since 11.0
 */
LoadingCache (/guava/src/com/google/common/cache/LoadingCache.java)/**
 * A semi-persistent mapping from keys to values. Values are automatically loaded by the cache, and
 * are stored in the cache until either evicted or manually invalidated. The common way to build
 * instances is using {@link CacheBuilder}.
 *
 * <p>Implementations of this interface are expected to be thread-safe, and can be safely accessed
 * by multiple concurrent threads.
 *
 * <p>When evaluated as a {@link Function}, a cache yields the same result as invoking {@link
 * #getUnchecked}.
 *
 * @author Charles Fry
 * @since 11.0
 */
ValueReference (/guava/src/com/google/common/cache/LocalCache.java)/** A reference to a value. */
StrongEntry (/guava/src/com/google/common/cache/LocalCache.java)/** Used for strongly-referenced keys. */
WeakEntry (/guava/src/com/google/common/cache/LocalCache.java)/** Used for weakly-referenced keys. */
WeakValueReference (/guava/src/com/google/common/cache/LocalCache.java)/** References a weak value. */
SoftValueReference (/guava/src/com/google/common/cache/LocalCache.java)/** References a soft value. */
StrongValueReference (/guava/src/com/google/common/cache/LocalCache.java)/** References a strong value. */
WeightedWeakValueReference (/guava/src/com/google/common/cache/LocalCache.java)/** References a weak value. */
WeightedSoftValueReference (/guava/src/com/google/common/cache/LocalCache.java)/** References a soft value. */
WeightedStrongValueReference (/guava/src/com/google/common/cache/LocalCache.java)/** References a strong value. */
Segment (/guava/src/com/google/common/cache/LocalCache.java)/**
   * Segments are specialized versions of hash tables. This subclass inherits from ReentrantLock
   * opportunistically, just to simplify some locking and avoid separate construction.
   */
WriteQueue (/guava/src/com/google/common/cache/LocalCache.java)/**
   * A custom queue for managing eviction order. Note that this is tightly integrated with {@code
   * ReferenceEntry}, upon which it relies to perform its linking.
   *
   * <p>Note that this entire implementation makes the assumption that all elements which are in the
   * map are also in this queue, and that all elements not in the queue are not in the map.
   *
   * <p>The benefits of creating our own queue are that (1) we can replace elements in the middle of
   * the queue as part of copyWriteEntry, and (2) the contains method is highly optimized for the
   * current model.
   */
AccessQueue (/guava/src/com/google/common/cache/LocalCache.java)/**
   * A custom queue for managing access order. Note that this is tightly integrated with {@code
   * ReferenceEntry}, upon which it relies to perform its linking.
   *
   * <p>Note that this entire implementation makes the assumption that all elements which are in the
   * map are also in this queue, and that all elements not in the queue are not in the map.
   *
   * <p>The benefits of creating our own queue are that (1) we can replace elements in the middle of
   * the queue as part of copyWriteEntry, and (2) the contains method is highly optimized for the
   * current model.
   */
WriteThroughEntry (/guava/src/com/google/common/cache/LocalCache.java)/**
   * Custom Entry class used by EntryIterator.next(), that relays setValue changes to the underlying
   * map.
   */
ManualSerializationProxy (/guava/src/com/google/common/cache/LocalCache.java)/**
   * Serializes the configuration of a LocalCache, reconstituting it as a Cache using CacheBuilder
   * upon deserialization. An instance of this class is fit for use by the writeReplace of
   * LocalManualCache.
   *
   * <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so
   * the proxy must be able to behave as the cache itself.
   */
LoadingSerializationProxy (/guava/src/com/google/common/cache/LocalCache.java)/**
   * Serializes the configuration of a LocalCache, reconstituting it as an LoadingCache using
   * CacheBuilder upon deserialization. An instance of this class is fit for use by the writeReplace
   * of LocalLoadingCache.
   *
   * <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so
   * the proxy must be able to behave as the cache itself.
   */
LocalCache (/guava/src/com/google/common/cache/LocalCache.java)/**
 * The concurrent hash map implementation built by {@link CacheBuilder}.
 *
 * <p>This implementation is heavily derived from revision 1.96 of <a
 * href="http://tinyurl.com/ConcurrentHashMap">ConcurrentHashMap.java</a>.
 *
 * @author Charles Fry
 * @author Bob Lee ({@code com.google.common.collect.MapMaker})
 * @author Doug Lea ({@code ConcurrentHashMap})
 */
LongAddable (/guava/src/com/google/common/cache/LongAddable.java)/**
 * Abstract interface for objects that can concurrently add longs.
 *
 * @author Louis Wasserman
 */
LongAddables (/guava/src/com/google/common/cache/LongAddables.java)/**
 * Source of {@link LongAddable} objects that deals with GWT, Unsafe, and all that.
 *
 * @author Louis Wasserman
 */
LongAdder (/guava/src/com/google/common/cache/LongAdder.java)/**
 * One or more variables that together maintain an initially zero {@code long} sum. When updates
 * (method {@link #add}) are contended across threads, the set of variables may grow dynamically to
 * reduce contention. Method {@link #sum} (or, equivalently, {@link #longValue}) returns the current
 * total combined across the variables maintaining the sum.
 *
 * <p>This class is usually preferable to {@link AtomicLong} when multiple threads update a common
 * sum that is used for purposes such as collecting statistics, not for fine-grained synchronization
 * control. Under low update contention, the two classes have similar characteristics. But under
 * high contention, expected throughput of this class is significantly higher, at the expense of
 * higher space consumption.
 *
 * <p>This class extends {@link Number}, but does <em>not</em> define methods such as {@code
 * equals}, {@code hashCode} and {@code compareTo} because instances are expected to be mutated, and
 * so are not useful as collection keys.
 *
 * <p><em>jsr166e note: This class is targeted to be placed in java.util.concurrent.atomic.</em>
 *
 * @since 1.8
 * @author Doug Lea
 */
ReferenceEntry (/guava/src/com/google/common/cache/ReferenceEntry.java)/**
 * An entry in a reference map.
 *
 * <p>Entries in the map can be in the following states:
 *
 * <p>Valid:
 *
 * <ul>
 *   <li>Live: valid key/value are set
 *   <li>Loading: loading is pending
 * </ul>
 *
 * <p>Invalid:
 *
 * <ul>
 *   <li>Expired: time expired (key/value may still be set)
 *   <li>Collected: key/value was partially collected, but not yet cleaned up
 *   <li>Unset: marked as unset, awaiting cleanup or reuse
 * </ul>
 */
RemovalListener (/guava/src/com/google/common/cache/RemovalListener.java)/**
 * An object that can receive a notification when an entry is removed from a cache. The removal
 * resulting in notification could have occurred to an entry being manually removed or replaced, or
 * due to eviction resulting from timed expiration, exceeding a maximum size, or garbage collection.
 *
 * <p>An instance may be called concurrently by multiple threads to process different entries.
 * Implementations of this interface should avoid performing blocking calls or synchronizing on
 * shared resources.
 *
 * @param <K> the most general type of keys this listener can listen for; for example {@code Object}
 *     if any key is acceptable
 * @param <V> the most general type of values this listener can listen for; for example {@code
 *     Object} if any key is acceptable
 * @author Charles Fry
 * @since 10.0
 */
RemovalListeners (/guava/src/com/google/common/cache/RemovalListeners.java)/**
 * A collection of common removal listeners.
 *
 * @author Charles Fry
 * @since 10.0
 */
RemovalNotification (/guava/src/com/google/common/cache/RemovalNotification.java)/**
 * A notification of the removal of a single entry. The key and/or value may be null if they were
 * already garbage collected.
 *
 * <p>Like other {@code Entry} instances associated with {@code CacheBuilder}, this class holds
 * strong references to the key and value, regardless of the type of references the cache may be
 * using.
 *
 * @author Charles Fry
 * @since 10.0
 */
Cell (/guava/src/com/google/common/cache/Striped64.java)/**
   * Padded variant of AtomicLong supporting only raw accesses plus CAS. The value field is placed
   * between pads, hoping that the JVM doesn't reorder them.
   *
   * <p>JVM intrinsics note: It would be possible to use a release-only form of CAS here, if it were
   * provided.
   */
Striped64 (/guava/src/com/google/common/cache/Striped64.java)/**
 * A package-local class holding common representation and mechanics for classes supporting dynamic
 * striping on 64bit values. The class extends Number so that concrete subclasses must publicly do
 * so.
 */
Weigher (/guava/src/com/google/common/cache/Weigher.java)/**
 * Calculates the weights of cache entries.
 *
 * @author Charles Fry
 * @since 11.0
 */
Inverse (/guava/src/com/google/common/collect/AbstractBiMap.java)/** The inverse of any other {@code AbstractBiMap} subclass. */
AbstractBiMap (/guava/src/com/google/common/collect/AbstractBiMap.java)/**
 * A general-purpose bimap implementation using any two backing {@code Map} instances.
 *
 * <p>Note that this class contains {@code equals()} calls that keep it from supporting {@code
 * IdentityHashMap} backing maps.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 */
AbstractIndexedListIterator (/guava/src/com/google/common/collect/AbstractIndexedListIterator.java)/**
 * This class provides a skeletal implementation of the {@link ListIterator} interface across a
 * fixed number of elements that may be retrieved by position. It does not support {@link #remove},
 * {@link #set}, or {@link #add}.
 *
 * @author Jared Levy
 */
AbstractListMultimap (/guava/src/com/google/common/collect/AbstractListMultimap.java)/**
 * Basic implementation of the {@link ListMultimap} interface. It's a wrapper around {@link
 * AbstractMapBasedMultimap} that converts the returned collections into {@code Lists}. The {@link
 * #createCollection} method must return a {@code List}.
 *
 * @author Jared Levy
 * @since 2.0
 */
WrappedIterator (/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** Collection iterator for {@code WrappedCollection}. */
WrappedCollection (/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/**
   * Collection decorator that stays in sync with the multimap values for a key. There are two kinds
   * of wrapped collections: full and subcollections. Both have a delegate pointing to the
   * underlying collection class.
   *
   * <p>Full collections, identified by a null ancestor field, contain all multimap values for a
   * given key. Its delegate is a value in {@link AbstractMapBasedMultimap#map} whenever the
   * delegate is non-empty. The {@code refreshIfEmpty}, {@code removeIfEmpty}, and {@code addToMap}
   * methods ensure that the {@code WrappedCollection} and map remain consistent.
   *
   * <p>A subcollection, such as a sublist, contains some of the values for a given key. Its
   * ancestor field points to the full wrapped collection with all values for the key. The
   * subcollection {@code refreshIfEmpty}, {@code removeIfEmpty}, and {@code addToMap} methods call
   * the corresponding methods of the full wrapped collection.
   */
WrappedSet (/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** Set decorator that stays in sync with the multimap values for a key. */
WrappedSortedSet (/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** SortedSet decorator that stays in sync with the multimap values for a key. */
WrappedListIterator (/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** ListIterator decorator. */
WrappedList (/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** List decorator that stays in sync with the multimap values for a key. */
RandomAccessWrappedList (/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/**
   * List decorator that stays in sync with the multimap values for a key and supports rapid random
   * access.
   */
AsMapIterator (/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/** Iterator across all keys and value collections. */
AbstractMapBasedMultimap (/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java)/**
 * Basic implementation of the {@link Multimap} interface. This class represents a multimap as a map
 * that associates each key with a collection of values. All methods of {@link Multimap} are
 * supported, including those specified as optional in the interface.
 *
 * <p>To implement a multimap, a subclass must define the method {@link #createCollection()}, which
 * creates an empty collection of values for a key.
 *
 * <p>The multimap constructor takes a map that has a single entry for each distinct key. When you
 * insert a key-value pair with a key that isn't already in the multimap, {@code
 * AbstractMapBasedMultimap} calls {@link #createCollection()} to create the collection of values
 * for that key. The subclass should not call {@link #createCollection()} directly, and a new
 * instance should be created every time the method is called.
 *
 * <p>For example, the subclass could pass a {@link java.util.TreeMap} during construction, and
 * {@link #createCollection()} could return a {@link java.util.TreeSet}, in which case the
 * multimap's iterators would propagate through the keys and values in sorted order.
 *
 * <p>Keys and values may be null, as long as the underlying collection classes support null
 * elements.
 *
 * <p>The collections created by {@link #createCollection()} may or may not allow duplicates. If the
 * collection, such as a {@link Set}, does not support duplicates, an added key-value pair will
 * replace an existing pair with the same key and value, if such a pair is present. With collections
 * like {@link List} that allow duplicates, the collection will keep the existing key-value pairs
 * while adding a new pair.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap, even if the
 * underlying map and {@link #createCollection()} method return threadsafe classes. Concurrent read
 * operations will work correctly. To allow concurrent update operations, wrap your multimap with a
 * call to {@link Multimaps#synchronizedMultimap}.
 *
 * <p>For serialization to work, the subclass must specify explicit {@code readObject} and {@code
 * writeObject} methods.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
AbstractMapBasedMultiset (/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java)/**
 * Basic implementation of {@code Multiset<E>} backed by an instance of {@code Map<E, Count>}.
 *
 * <p>For serialization to work, the subclass must specify explicit {@code readObject} and {@code
 * writeObject} methods.
 *
 * @author Kevin Bourrillion
 */
AbstractMapEntry (/guava/src/com/google/common/collect/AbstractMapEntry.java)/**
 * Implementation of the {@code equals}, {@code hashCode}, and {@code toString} methods of {@code
 * Entry}.
 *
 * @author Jared Levy
 */
AbstractMultimap (/guava/src/com/google/common/collect/AbstractMultimap.java)/**
 * A skeleton {@code Multimap} implementation, not necessarily in terms of a {@code Map}.
 *
 * @author Louis Wasserman
 */
AbstractMultiset (/guava/src/com/google/common/collect/AbstractMultiset.java)/**
 * This class provides a skeletal implementation of the {@link Multiset} interface. A new multiset
 * implementation can be created easily by extending this class and implementing the {@link
 * Multiset#entrySet()} method, plus optionally overriding {@link #add(Object, int)} and {@link
 * #remove(Object, int)} to enable modifications to the multiset.
 *
 * <p>The {@link #count} and {@link #size} implementations all iterate across the set returned by
 * {@link Multiset#entrySet()}, as do many methods acting on the set returned by {@link
 * #elementSet()}. Override those methods for better performance.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
AbstractNavigableMap (/guava/src/com/google/common/collect/AbstractNavigableMap.java)/**
 * Skeletal implementation of {@link NavigableMap}.
 *
 * @author Louis Wasserman
 */
AbstractRangeSet (/guava/src/com/google/common/collect/AbstractRangeSet.java)/**
 * A skeletal implementation of {@code RangeSet}.
 *
 * @author Louis Wasserman
 */
AbstractSequentialIterator (/guava/src/com/google/common/collect/AbstractSequentialIterator.java)/**
 * This class provides a skeletal implementation of the {@code Iterator} interface for sequences
 * whose next element can always be derived from the previous element. Null elements are not
 * supported, nor is the {@link #remove()} method.
 *
 * <p>Example:
 *
 * <pre>{@code
 * Iterator<Integer> powersOfTwo =
 *     new AbstractSequentialIterator<Integer>(1) {
 *       protected Integer computeNext(Integer previous) {
 *         return (previous == 1 << 30) ? null : previous * 2;
 *       }
 *     };
 * }</pre>
 *
 * @author Chris Povirk
 * @since 12.0 (in Guava as {@code AbstractLinkedIterator} since 8.0)
 */
AbstractSetMultimap (/guava/src/com/google/common/collect/AbstractSetMultimap.java)/**
 * Basic implementation of the {@link SetMultimap} interface. It's a wrapper around {@link
 * AbstractMapBasedMultimap} that converts the returned collections into {@code Sets}. The {@link
 * #createCollection} method must return a {@code Set}.
 *
 * @author Jared Levy
 */
AbstractSortedKeySortedSetMultimap (/guava/src/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java)/**
 * Basic implementation of a {@link SortedSetMultimap} with a sorted key set.
 *
 * <p>This superclass allows {@code TreeMultimap} to override methods to return navigable set and
 * map types in non-GWT only, while GWT code will inherit the SortedMap/SortedSet overrides.
 *
 * @author Louis Wasserman
 */
AbstractSortedMultiset (/guava/src/com/google/common/collect/AbstractSortedMultiset.java)/**
 * This class provides a skeletal implementation of the {@link SortedMultiset} interface.
 *
 * <p>The {@link #count} and {@link #size} implementations all iterate across the set returned by
 * {@link Multiset#entrySet()}, as do many methods acting on the set returned by {@link
 * #elementSet()}. Override those methods for better performance.
 *
 * @author Louis Wasserman
 */
AbstractSortedSetMultimap (/guava/src/com/google/common/collect/AbstractSortedSetMultimap.java)/**
 * Basic implementation of the {@link SortedSetMultimap} interface. It's a wrapper around {@link
 * AbstractMapBasedMultimap} that converts the returned collections into sorted sets. The {@link
 * #createCollection} method must return a {@code SortedSet}.
 *
 * @author Jared Levy
 */
AbstractTable (/guava/src/com/google/common/collect/AbstractTable.java)/**
 * Skeletal, implementation-agnostic implementation of the {@link Table} interface.
 *
 * @author Louis Wasserman
 */
AllEqualOrdering (/guava/src/com/google/common/collect/AllEqualOrdering.java)/**
 * An ordering that treats all references as equals, even nulls.
 *
 * @author Emily Soldal
 */
ArrayListMultimap (/guava/src/com/google/common/collect/ArrayListMultimap.java)/**
 * Implementation of {@code Multimap} that uses an {@code ArrayList} to store the values for a given
 * key. A {@link HashMap} associates each key with an {@link ArrayList} of values.
 *
 * <p>When iterating through the collections supplied by this class, the ordering of values for a
 * given key agrees with the order in which the values were added.
 *
 * <p>This multimap allows duplicate key-value pairs. After adding a new key-value pair equal to an
 * existing key-value pair, the {@code ArrayListMultimap} will contain entries for both the new
 * value and the old value.
 *
 * <p>Keys and values may be null. All optional multimap methods are supported, and all returned
 * views are modifiable.
 *
 * <p>The lists returned by {@link #get}, {@link #removeAll}, and {@link #replaceValues} all
 * implement {@link java.util.RandomAccess}.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedListMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
ArrayListMultimapGwtSerializationDependencies (/guava/src/com/google/common/collect/ArrayListMultimapGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element types of an {@link
 * ArrayListMultimap}. The GWT supersource for this class contains a field for each type.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 */
ArrayTable (/guava/src/com/google/common/collect/ArrayTable.java)/**
 * Fixed-size {@link Table} implementation backed by a two-dimensional array.
 *
 * <p>The allowed row and column keys must be supplied when the table is created. The table always
 * contains a mapping for every row key / column pair. The value corresponding to a given row and
 * column is null unless another value is provided.
 *
 * <p>The table's size is constant: the product of the number of supplied row keys and the number of
 * supplied column keys. The {@code remove} and {@code clear} methods are not supported by the table
 * or its views. The {@link #erase} and {@link #eraseAll} methods may be used instead.
 *
 * <p>The ordering of the row and column keys provided when the table is constructed determines the
 * iteration ordering across rows and columns in the table's views. None of the view iterators
 * support {@link Iterator#remove}. If the table is modified after an iterator is created, the
 * iterator remains valid.
 *
 * <p>This class requires less memory than the {@link HashBasedTable} and {@link TreeBasedTable}
 * implementations, except when the table is sparse.
 *
 * <p>Null row keys or column keys are not permitted.
 *
 * <p>This class provides methods involving the underlying array structure, where the array indices
 * correspond to the position of a row or column in the lists of allowed keys and values. See the
 * {@link #at}, {@link #set}, {@link #toArray}, {@link #rowKeyList}, and {@link #columnKeyList}
 * methods for more details.
 *
 * <p>Note that this implementation is not synchronized. If multiple threads access the same cell of
 * an {@code ArrayTable} concurrently and one of the threads modifies its value, there is no
 * guarantee that the new value will be fully visible to the other threads. To guarantee that
 * modifications are visible, synchronize access to the table. Unlike other {@code Table}
 * implementations, synchronization is unnecessary between a thread that writes to one cell and a
 * thread that reads from another.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"> {@code Table}</a>.
 *
 * @author Jared Levy
 * @since 10.0
 */
BaseImmutableMultimap (/guava/src/com/google/common/collect/BaseImmutableMultimap.java)/**
 * A dummy superclass of {@link ImmutableMultimap} that can be instanceof'd without ProGuard
 * retaining additional implementation details of {@link ImmutableMultimap}.
 */
BiMap (/guava/src/com/google/common/collect/BiMap.java)/**
 * A bimap (or "bidirectional map") is a map that preserves the uniqueness of its values as well as
 * that of its keys. This constraint enables bimaps to support an "inverse view", which is another
 * bimap containing the same entries as this bimap but with reversed keys and values.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap"> {@code BiMap}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
ByFunctionOrdering (/guava/src/com/google/common/collect/ByFunctionOrdering.java)/**
 * An ordering that orders elements by applying an order to the result of a function on those
 * elements.
 */
CartesianList (/guava/src/com/google/common/collect/CartesianList.java)/**
 * Implementation of {@link Lists#cartesianProduct(List)}.
 *
 * @author Louis Wasserman
 */
ClassToInstanceMap (/guava/src/com/google/common/collect/ClassToInstanceMap.java)/**
 * A map, each entry of which maps a Java <a href="http://tinyurl.com/2cmwkz">raw type</a> to an
 * instance of that type. In addition to implementing {@code Map}, the additional type-safe
 * operations {@link #putInstance} and {@link #getInstance} are available.
 *
 * <p>Like any other {@code Map<Class, Object>}, this map may contain entries for primitive types,
 * and a primitive type and its corresponding wrapper type may map to different values.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#classtoinstancemap"> {@code
 * ClassToInstanceMap}</a>.
 *
 * <p>To map a generic type to an instance of that type, use {@link
 * com.google.common.reflect.TypeToInstanceMap} instead.
 *
 * @param <B> the common supertype that all entries must share; often this is simply {@link Object}
 * @author Kevin Bourrillion
 * @since 2.0
 */
CollectCollectors (/guava/src/com/google/common/collect/CollectCollectors.java)/** Collectors utilities for {@code common.collect} internals. */
Collections2 (/guava/src/com/google/common/collect/Collections2.java)/**
 * Provides static methods for working with {@code Collection} instances.
 *
 * <p><b>Java 8 users:</b> several common uses for this class are now more comprehensively addressed
 * by the new {@link java.util.stream.Stream} library. Read the method documentation below for
 * comparisons. These methods are not being deprecated, but we gently encourage you to migrate to
 * streams.
 *
 * @author Chris Povirk
 * @author Mike Bostock
 * @author Jared Levy
 * @since 2.0
 */
CollectPreconditions (/guava/src/com/google/common/collect/CollectPreconditions.java)/** Precondition checks useful in collection implementations. */
Factory (/guava/src/com/google/common/collect/CollectSpliterators.java)/** Factory for constructing {@link FlatMapSpliterator} instances. */
FlatMapSpliterator (/guava/src/com/google/common/collect/CollectSpliterators.java)/**
   * Implements the {@link Stream#flatMap} operation on spliterators.
   *
   * @param <InElementT> the element type of the input spliterator
   * @param <OutElementT> the element type of the output spliterators
   * @param <OutSpliteratorT> the type of the output spliterators
   */
FlatMapSpliteratorOfObject (/guava/src/com/google/common/collect/CollectSpliterators.java)/**
   * Implementation of {@link Stream#flatMap} with an object spliterator output type.
   *
   * <p>To avoid having this type, we could use {@code FlatMapSpliterator} directly. The main
   * advantages to having the type are the ability to use its constructor reference below and the
   * parallelism with the primitive version. In short, it makes its caller ({@code flatMap})
   * simpler.
   *
   * @param <InElementT> the element type of the input spliterator
   * @param <OutElementT> the element type of the output spliterators
   */
FlatMapSpliteratorOfPrimitive (/guava/src/com/google/common/collect/CollectSpliterators.java)/**
   * Implementation of {@link Stream#flatMap} with a primitive spliterator output type.
   *
   * @param <InElementT> the element type of the input spliterator
   * @param <OutElementT> the (boxed) element type of the output spliterators
   * @param <OutConsumerT> the specialized consumer type for the primitive output type
   * @param <OutSpliteratorT> the primitive spliterator type associated with {@code OutElementT}
   */
FlatMapSpliteratorOfInt (/guava/src/com/google/common/collect/CollectSpliterators.java)/** Implementation of {@link #flatMapToInt}. */
FlatMapSpliteratorOfLong (/guava/src/com/google/common/collect/CollectSpliterators.java)/** Implementation of {@link #flatMapToLong}. */
FlatMapSpliteratorOfDouble (/guava/src/com/google/common/collect/CollectSpliterators.java)/** Implementation of {@link #flatMapToDouble}. */
CollectSpliterators (/guava/src/com/google/common/collect/CollectSpliterators.java)/** Spliterator utilities for {@code common.collect} internals. */
CompactHashMap (/guava/src/com/google/common/collect/CompactHashMap.java)/**
 * CompactHashMap is an implementation of a Map. All optional operations (put and remove) are
 * supported. Null keys and values are supported.
 *
 * <p>{@code containsKey(k)}, {@code put(k, v)} and {@code remove(k)} are all (expected and
 * amortized) constant time operations. Expected in the hashtable sense (depends on the hash
 * function doing a good job of distributing the elements to the buckets to a distribution not far
 * from uniform), and amortized since some operations can trigger a hash table resize.
 *
 * <p>Unlike {@code java.util.HashMap}, iteration is only proportional to the actual {@code size()},
 * which is optimal, and <i>not</i> the size of the internal hashtable, which could be much larger
 * than {@code size()}. Furthermore, this structure places significantly reduced load on the garbage
 * collector by only using a constant number of internal objects.
 *
 * <p>If there are no removals, then iteration order for the {@link #entrySet}, {@link #keySet}, and
 * {@link #values} views is the same as insertion order. Any removal invalidates any ordering
 * guarantees.
 *
 * <p>This class should not be assumed to be universally superior to {@code java.util.HashMap}.
 * Generally speaking, this class reduces object allocation and memory consumption at the price of
 * moderately increased constant factors of CPU. Only use this class when there is a specific reason
 * to prioritize memory over CPU.
 *
 * @author Louis Wasserman
 */
CompactHashSet (/guava/src/com/google/common/collect/CompactHashSet.java)/**
 * CompactHashSet is an implementation of a Set. All optional operations (adding and removing) are
 * supported. The elements can be any objects.
 *
 * <p>{@code contains(x)}, {@code add(x)} and {@code remove(x)}, are all (expected and amortized)
 * constant time operations. Expected in the hashtable sense (depends on the hash function doing a
 * good job of distributing the elements to the buckets to a distribution not far from uniform), and
 * amortized since some operations can trigger a hash table resize.
 *
 * <p>Unlike {@code java.util.HashSet}, iteration is only proportional to the actual {@code size()},
 * which is optimal, and <i>not</i> the size of the internal hashtable, which could be much larger
 * than {@code size()}. Furthermore, this structure only depends on a fixed number of arrays; {@code
 * add(x)} operations <i>do not</i> create objects for the garbage collector to deal with, and for
 * every element added, the garbage collector will have to traverse {@code 1.5} references on
 * average, in the marking phase, not {@code 5.0} as in {@code java.util.HashSet}.
 *
 * <p>If there are no removals, then {@link #iterator iteration} order is the same as insertion
 * order. Any removal invalidates any ordering guarantees.
 *
 * <p>This class should not be assumed to be universally superior to {@code java.util.HashSet}.
 * Generally speaking, this class reduces object allocation and memory consumption at the price of
 * moderately increased constant factors of CPU. Only use this class when there is a specific reason
 * to prioritize memory over CPU.
 *
 * @author Dimitris Andreou
 */
CompactLinkedHashMap (/guava/src/com/google/common/collect/CompactLinkedHashMap.java)/**
 * CompactLinkedHashMap is an implementation of a Map with insertion or LRU iteration order,
 * maintained with a doubly linked list through the entries. All optional operations (put and
 * remove) are supported. Null keys and values are supported.
 *
 * <p>{@code containsKey(k)}, {@code put(k, v)} and {@code remove(k)} are all (expected and
 * amortized) constant time operations. Expected in the hashtable sense (depends on the hash
 * function doing a good job of distributing the elements to the buckets to a distribution not far
 * from uniform), and amortized since some operations can trigger a hash table resize.
 *
 * <p>As compared with {@link java.util.LinkedHashMap}, this structure places significantly reduced
 * load on the garbage collector by only using a constant number of internal objects.
 *
 * <p>This class should not be assumed to be universally superior to {@code
 * java.util.LinkedHashMap}. Generally speaking, this class reduces object allocation and memory
 * consumption at the price of moderately increased constant factors of CPU. Only use this class
 * when there is a specific reason to prioritize memory over CPU.
 *
 * @author Louis Wasserman
 */
CompactLinkedHashSet (/guava/src/com/google/common/collect/CompactLinkedHashSet.java)/**
 * CompactLinkedHashSet is an implementation of a Set, which a predictable iteration order that
 * matches the insertion order. All optional operations (adding and removing) are supported. All
 * elements, including {@code null}, are permitted.
 *
 * <p>{@code contains(x)}, {@code add(x)} and {@code remove(x)}, are all (expected and amortized)
 * constant time operations. Expected in the hashtable sense (depends on the hash function doing a
 * good job of distributing the elements to the buckets to a distribution not far from uniform), and
 * amortized since some operations can trigger a hash table resize.
 *
 * <p>This implementation consumes significantly less memory than {@code java.util.LinkedHashSet} or
 * even {@code java.util.HashSet}, and places considerably less load on the garbage collector. Like
 * {@code java.util.LinkedHashSet}, it offers insertion-order iteration, with identical behavior.
 *
 * <p>This class should not be assumed to be universally superior to {@code
 * java.util.LinkedHashSet}. Generally speaking, this class reduces object allocation and memory
 * consumption at the price of moderately increased constant factors of CPU. Only use this class
 * when there is a specific reason to prioritize memory over CPU.
 *
 * @author Louis Wasserman
 */
ComparatorOrdering (/guava/src/com/google/common/collect/ComparatorOrdering.java)/** An ordering for a pre-existing comparator. */
Comparators (/guava/src/com/google/common/collect/Comparators.java)/**
 * Provides static methods for working with {@link Comparator} instances. For many other helpful
 * comparator utilities, see either {@code Comparator} itself (for Java 8 or later), or {@code
 * com.google.common.collect.Ordering} (otherwise).
 *
 * <h3>Relationship to {@code Ordering}</h3>
 *
 * <p>In light of the significant enhancements to {@code Comparator} in Java 8, the overwhelming
 * majority of usages of {@code Ordering} can be written using only built-in JDK APIs. This class is
 * intended to "fill the gap" and provide those features of {@code Ordering} not already provided by
 * the JDK.
 *
 * @since 21.0
 * @author Louis Wasserman
 */
ComparisonChain (/guava/src/com/google/common/collect/ComparisonChain.java)/**
 * A utility for performing a chained comparison statement. For example:
 *
 * <pre>{@code
 * public int compareTo(Foo that) {
 *   return ComparisonChain.start()
 *       .compare(this.aString, that.aString)
 *       .compare(this.anInt, that.anInt)
 *       .compare(this.anEnum, that.anEnum, Ordering.natural().nullsLast())
 *       .result();
 * }
 * }</pre>
 *
 * <p>The value of this expression will have the same sign as the <i>first nonzero</i> comparison
 * result in the chain, or will be zero if every comparison result was zero.
 *
 * <p><b>Note:</b> {@code ComparisonChain} instances are <b>immutable</b>. For this utility to work
 * correctly, calls must be chained as illustrated above.
 *
 * <p>Performance note: Even though the {@code ComparisonChain} caller always invokes its {@code
 * compare} methods unconditionally, the {@code ComparisonChain} implementation stops calling its
 * inputs' {@link Comparable#compareTo compareTo} and {@link Comparator#compare compare} methods as
 * soon as one of them returns a nonzero result. This optimization is typically important only in
 * the presence of expensive {@code compareTo} and {@code compare} implementations.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#comparecompareto"> {@code
 * ComparisonChain}</a>.
 *
 * @author Mark Davis
 * @author Kevin Bourrillion
 * @since 2.0
 */
CompoundOrdering (/guava/src/com/google/common/collect/CompoundOrdering.java)/** An ordering that tries several comparators in order. */
ComputationException (/guava/src/com/google/common/collect/ComputationException.java)/**
 * Wraps an exception that occurred during a computation.
 *
 * @author Bob Lee
 * @since 2.0
 * @deprecated This exception is no longer thrown by {@code com.google.common}. Previously, it was
 *     thrown by {@link MapMaker} computing maps. When support for computing maps was removed from
 *     {@code MapMaker}, it was added to {@code CacheBuilder}, which throws {@code
 *     ExecutionException}, {@code UncheckedExecutionException}, and {@code ExecutionError}. Any
 *     code that is still catching {@code ComputationException} may need to be updated to catch some
 *     of those types instead. (Note that this type, though deprecated, is not planned to be removed
 *     from Guava.)
 */
ConcurrentHashMultiset (/guava/src/com/google/common/collect/ConcurrentHashMultiset.java)/**
 * A multiset that supports concurrent modifications and that provides atomic versions of most
 * {@code Multiset} operations (exceptions where noted). Null elements are not supported.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Cliff L. Biffle
 * @author mike nonemacher
 * @since 2.0
 */
ConsumingQueueIterator (/guava/src/com/google/common/collect/ConsumingQueueIterator.java)/**
 * An Iterator implementation which draws elements from a queue, removing them from the queue as it
 * iterates.
 */
ContiguousSet (/guava/src/com/google/common/collect/ContiguousSet.java)/**
 * A sorted set of contiguous values in a given {@link DiscreteDomain}. Example:
 *
 * <pre>{@code
 * ContiguousSet.create(Range.closed(5, 42), DiscreteDomain.integers())
 * }</pre>
 *
 * <p>Note that because bounded ranges over {@code int} and {@code long} values are so common, this
 * particular example can be written as just:
 *
 * <pre>{@code
 * ContiguousSet.closed(5, 42)
 * }</pre>
 *
 * <p><b>Warning:</b> Be extremely careful what you do with conceptually large instances (such as
 * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomain.integers()}). Certain operations
 * on such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link
 * Collections#frequency}) can cause major performance problems.
 *
 * @author Gregory Kick
 * @since 10.0
 */
Count (/guava/src/com/google/common/collect/Count.java)/**
 * A mutable value of type {@code int}, for multisets to use in tracking counts of values.
 *
 * @author Louis Wasserman
 */
Cut (/guava/src/com/google/common/collect/Cut.java)/**
 * Implementation detail for the internal structure of {@link Range} instances. Represents a unique
 * way of "cutting" a "number line" (actually of instances of type {@code C}, not necessarily
 * "numbers") into two sections; this can be done below a certain value, above a certain value,
 * below all values or above all values. With this object defined in this way, an interval can
 * always be represented by a pair of {@code Cut} instances.
 *
 * @author Kevin Bourrillion
 */
ImmutableArrayMap (/guava/src/com/google/common/collect/DenseImmutableTable.java)/** An immutable map implementation backed by an indexed nullable array. */
DenseImmutableTable (/guava/src/com/google/common/collect/DenseImmutableTable.java)/** A {@code RegularImmutableTable} optimized for dense data. */
DescendingImmutableSortedMultiset (/guava/src/com/google/common/collect/DescendingImmutableSortedMultiset.java)/**
 * A descending wrapper around an {@code ImmutableSortedMultiset}
 *
 * @author Louis Wasserman
 */
DescendingImmutableSortedSet (/guava/src/com/google/common/collect/DescendingImmutableSortedSet.java)/**
 * Skeletal implementation of {@link ImmutableSortedSet#descendingSet()}.
 *
 * @author Louis Wasserman
 */
DescendingMultiset (/guava/src/com/google/common/collect/DescendingMultiset.java)/**
 * A skeleton implementation of a descending multiset. Only needs {@code forwardMultiset()} and
 * {@code entryIterator()}.
 *
 * @author Louis Wasserman
 */
DiscreteDomain (/guava/src/com/google/common/collect/DiscreteDomain.java)/**
 * A descriptor for a <i>discrete</i> {@code Comparable} domain such as all {@link Integer}
 * instances. A discrete domain is one that supports the three basic operations: {@link #next},
 * {@link #previous} and {@link #distance}, according to their specifications. The methods {@link
 * #minValue} and {@link #maxValue} should also be overridden for bounded types.
 *
 * <p>A discrete domain always represents the <i>entire</i> set of values of its type; it cannot
 * represent partial domains such as "prime integers" or "strings of length 5."
 *
 * <p>See the Guava User Guide section on <a href=
 * "https://github.com/google/guava/wiki/RangesExplained#discrete-domains"> {@code
 * DiscreteDomain}</a>.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
EmptyContiguousSet (/guava/src/com/google/common/collect/EmptyContiguousSet.java)/**
 * An empty contiguous set.
 *
 * @author Gregory Kick
 */
EmptyImmutableListMultimap (/guava/src/com/google/common/collect/EmptyImmutableListMultimap.java)/**
 * Implementation of {@link ImmutableListMultimap} with no entries.
 *
 * @author Jared Levy
 */
EmptyImmutableSetMultimap (/guava/src/com/google/common/collect/EmptyImmutableSetMultimap.java)/**
 * Implementation of {@link ImmutableListMultimap} with no entries.
 *
 * @author Mike Ward
 */
EnumBiMap (/guava/src/com/google/common/collect/EnumBiMap.java)/**
 * A {@code BiMap} backed by two {@code EnumMap} instances. Null keys and values are not permitted.
 * An {@code EnumBiMap} and its inverse are both serializable.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap"> {@code BiMap}</a>.
 *
 * @author Mike Bostock
 * @since 2.0
 */
EnumHashBiMap (/guava/src/com/google/common/collect/EnumHashBiMap.java)/**
 * A {@code BiMap} backed by an {@code EnumMap} instance for keys-to-values, and a {@code HashMap}
 * instance for values-to-keys. Null keys are not permitted, but null values are. An {@code
 * EnumHashBiMap} and its inverse are both serializable.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap"> {@code BiMap}</a>.
 *
 * @author Mike Bostock
 * @since 2.0
 */
EnumMultiset (/guava/src/com/google/common/collect/EnumMultiset.java)/**
 * Multiset implementation specialized for enum elements, supporting all single-element operations
 * in O(1).
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
EvictingQueue (/guava/src/com/google/common/collect/EvictingQueue.java)/**
 * A non-blocking queue which automatically evicts elements from the head of the queue when
 * attempting to add new elements onto the queue and it is full. This queue orders elements FIFO
 * (first-in-first-out). This data structure is logically equivalent to a circular buffer (i.e.,
 * cyclic buffer or ring buffer).
 *
 * <p>An evicting queue must be configured with a maximum size. Each time an element is added to a
 * full queue, the queue automatically removes its head element. This is different from conventional
 * bounded queues, which either block or reject new elements when full.
 *
 * <p>This class is not thread-safe, and does not accept null elements.
 *
 * @author Kurt Alfred Kluever
 * @since 15.0
 */
ExplicitOrdering (/guava/src/com/google/common/collect/ExplicitOrdering.java)/** An ordering that compares objects according to a given order. */
FilteredEntryMultimap (/guava/src/com/google/common/collect/FilteredEntryMultimap.java)/**
 * Implementation of {@link Multimaps#filterEntries(Multimap, Predicate)}.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
FilteredEntrySetMultimap (/guava/src/com/google/common/collect/FilteredEntrySetMultimap.java)/**
 * Implementation of {@link Multimaps#filterEntries(SetMultimap, Predicate)}.
 *
 * @author Louis Wasserman
 */
FilteredKeyListMultimap (/guava/src/com/google/common/collect/FilteredKeyListMultimap.java)/**
 * Implementation of {@link Multimaps#filterKeys(ListMultimap, Predicate)}.
 *
 * @author Louis Wasserman
 */
FilteredKeyMultimap (/guava/src/com/google/common/collect/FilteredKeyMultimap.java)/**
 * Implementation of {@link Multimaps#filterKeys(Multimap, Predicate)}.
 *
 * @author Louis Wasserman
 */
FilteredKeySetMultimap (/guava/src/com/google/common/collect/FilteredKeySetMultimap.java)/**
 * Implementation of {@link Multimaps#filterKeys(SetMultimap, Predicate)}.
 *
 * @author Louis Wasserman
 */
FilteredMultimap (/guava/src/com/google/common/collect/FilteredMultimap.java)/**
 * An interface for all filtered multimap types.
 *
 * @author Louis Wasserman
 */
FilteredMultimapValues (/guava/src/com/google/common/collect/FilteredMultimapValues.java)/**
 * Implementation for {@link FilteredMultimap#values()}.
 *
 * @author Louis Wasserman
 */
FilteredSetMultimap (/guava/src/com/google/common/collect/FilteredSetMultimap.java)/**
 * A supertype for filtered {@link SetMultimap} implementations.
 *
 * @author Louis Wasserman
 */
FromIterableFunction (/guava/src/com/google/common/collect/FluentIterable.java)/** Function that transforms {@code Iterable<E>} into a fluent iterable. */
FluentIterable (/guava/src/com/google/common/collect/FluentIterable.java)/**
 * A discouraged (but not deprecated) precursor to Java's superior {@link Stream} library.
 *
 * <p>The following types of methods are provided:
 *
 * <ul>
 *   <li>chaining methods which return a new {@code FluentIterable} based in some way on the
 *       contents of the current one (for example {@link #transform})
 *   <li>element extraction methods which facilitate the retrieval of certain elements (for example
 *       {@link #last})
 *   <li>query methods which answer questions about the {@code FluentIterable}'s contents (for
 *       example {@link #anyMatch})
 *   <li>conversion methods which copy the {@code FluentIterable}'s contents into a new collection
 *       or array (for example {@link #toList})
 * </ul>
 *
 * <p>Several lesser-used features are currently available only as static methods on the {@link
 * Iterables} class.
 *
 * <p><a name="streams"></a>
 *
 * <h3>Comparison to streams</h3>
 *
 * <p>{@link Stream} is similar to this class, but generally more powerful, and certainly more
 * standard. Key differences include:
 *
 * <ul>
 *   <li>A stream is <i>single-use</i>; it becomes invalid as soon as any "terminal operation" such
 *       as {@code findFirst()} or {@code iterator()} is invoked. (Even though {@code Stream}
 *       contains all the right method <i>signatures</i> to implement {@link Iterable}, it does not
 *       actually do so, to avoid implying repeat-iterability.) {@code FluentIterable}, on the other
 *       hand, is multiple-use, and does implement {@link Iterable}.
 *   <li>Streams offer many features not found here, including {@code min/max}, {@code distinct},
 *       {@code reduce}, {@code sorted}, the very powerful {@code collect}, and built-in support for
 *       parallelizing stream operations.
 *   <li>{@code FluentIterable} contains several features not available on {@code Stream}, which are
 *       noted in the method descriptions below.
 *   <li>Streams include primitive-specialized variants such as {@code IntStream}, the use of which
 *       is strongly recommended.
 *   <li>Streams are standard Java, not requiring a third-party dependency.
 * </ul>
 *
 * <h3>Example</h3>
 *
 * <p>Here is an example that accepts a list from a database call, filters it based on a predicate,
 * transforms it by invoking {@code toString()} on each element, and returns the first 10 elements
 * as a {@code List}:
 *
 * <pre>{@code
 * ImmutableList<String> results =
 *     FluentIterable.from(database.getClientList())
 *         .filter(Client::isActiveInLastMonth)
 *         .transform(Object::toString)
 *         .limit(10)
 *         .toList();
 * }</pre>
 *
 * The approximate stream equivalent is:
 *
 * <pre>{@code
 * List<String> results =
 *     database.getClientList()
 *         .stream()
 *         .filter(Client::isActiveInLastMonth)
 *         .map(Object::toString)
 *         .limit(10)
 *         .collect(Collectors.toList());
 * }</pre>
 *
 * @author Marcin Mikosik
 * @since 12.0
 */
ForwardingBlockingDeque (/guava/src/com/google/common/collect/ForwardingBlockingDeque.java)/**
 * A {@link BlockingDeque} which forwards all its method calls to another {@code BlockingDeque}.
 * Subclasses should override one or more methods to modify the behavior of the backing deque as
 * desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingBlockingDeque} forward <b>indiscriminately</b>
 * to the methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change
 * the behaviour of {@link #offer} which can lead to unexpected behaviour. In this case, you should
 * override {@code offer} as well, either providing your own implementation, or delegating to the
 * provided {@code standardOffer} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingBlockingDeque}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Emily Soldal
 * @since 14.0
 * @deprecated This class has moved to {@code com.google.common.util.concurrent}. Please use {@link
 *     com.google.common.util.concurrent.ForwardingBlockingDeque} instead.
 */
ForwardingCollection (/guava/src/com/google/common/collect/ForwardingCollection.java)/**
 * A collection which forwards all its method calls to another collection. Subclasses should
 * override one or more methods to modify the behavior of the backing collection as desired per the
 * <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingCollection} forward <b>indiscriminately</b> to
 * the methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change
 * the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingCollection}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingConcurrentMap (/guava/src/com/google/common/collect/ForwardingConcurrentMap.java)/**
 * A concurrent map which forwards all its method calls to another concurrent map. Subclasses should
 * override one or more methods to modify the behavior of the backing map as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class forwards calls to <i>only some</i> {@code
 * default} methods. Specifically, it forwards calls only for methods that existed <a
 * href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentMap.html">before
 * {@code default} methods were introduced</a>. For newer methods, like {@code forEach}, it inherits
 * their default implementations. When those implementations invoke methods, they invoke methods on
 * the {@code ForwardingConcurrentMap}.
 *
 * @author Charles Fry
 * @since 2.0
 */
ForwardingDeque (/guava/src/com/google/common/collect/ForwardingDeque.java)/**
 * A deque which forwards all its method calls to another deque. Subclasses should override one or
 * more methods to modify the behavior of the backing deque as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingDeque} forward <b>indiscriminately</b> to the
 * methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change the
 * behavior of {@link #offer} which can lead to unexpected behavior. In this case, you should
 * override {@code offer} as well.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingDeque}.
 *
 * @author Kurt Alfred Kluever
 * @since 12.0
 */
ForwardingImmutableCollection (/guava/src/com/google/common/collect/ForwardingImmutableCollection.java)/**
 * Dummy class that makes the GWT serialization policy happy. It isn't used on the server-side.
 *
 * @author Hayward Chan
 */
ForwardingImmutableList (/guava/src/com/google/common/collect/ForwardingImmutableList.java)/**
 * Unused stub class, unreferenced under Java and manually emulated under GWT.
 *
 * @author Chris Povirk
 */
ForwardingImmutableMap (/guava/src/com/google/common/collect/ForwardingImmutableMap.java)/**
 * Unused stub class, unreferenced under Java and manually emulated under GWT.
 *
 * @author Chris Povirk
 */
ForwardingImmutableSet (/guava/src/com/google/common/collect/ForwardingImmutableSet.java)/**
 * Unused stub class, unreferenced under Java and manually emulated under GWT.
 *
 * @author Chris Povirk
 */
ForwardingIterator (/guava/src/com/google/common/collect/ForwardingIterator.java)/**
 * An iterator which forwards all its method calls to another iterator. Subclasses should override
 * one or more methods to modify the behavior of the backing iterator as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class forwards calls to <i>only some</i> {@code
 * default} methods. Specifically, it forwards calls only for methods that existed <a
 * href="https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html">before {@code default}
 * methods were introduced</a>. For newer methods, like {@code forEachRemaining}, it inherits their
 * default implementations. When those implementations invoke methods, they invoke methods on the
 * {@code ForwardingIterator}.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
ForwardingList (/guava/src/com/google/common/collect/ForwardingList.java)/**
 * A list which forwards all its method calls to another list. Subclasses should override one or
 * more methods to modify the behavior of the backing list as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p>This class does not implement {@link java.util.RandomAccess}. If the delegate supports random
 * access, the {@code ForwardingList} subclass should implement the {@code RandomAccess} interface.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingList} forward <b>indiscriminately</b> to the
 * methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change the
 * behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingList}.
 *
 * <p>The {@code standard} methods and any collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingListIterator (/guava/src/com/google/common/collect/ForwardingListIterator.java)/**
 * A list iterator which forwards all its method calls to another list iterator. Subclasses should
 * override one or more methods to modify the behavior of the backing iterator as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class forwards calls to <i>only some</i> {@code
 * default} methods. Specifically, it forwards calls only for methods that existed <a
 * href="https://docs.oracle.com/javase/7/docs/api/java/util/ListIterator.html">before {@code
 * default} methods were introduced</a>. For newer methods, like {@code forEachRemaining}, it
 * inherits their default implementations. When those implementations invoke methods, they invoke
 * methods on the {@code ForwardingListIterator}.
 *
 * @author Mike Bostock
 * @since 2.0
 */
ForwardingListMultimap (/guava/src/com/google/common/collect/ForwardingListMultimap.java)/**
 * A list multimap which forwards all its method calls to another list multimap. Subclasses should
 * override one or more methods to modify the behavior of the backing multimap as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingListMultimap}.
 *
 * @author Kurt Alfred Kluever
 * @since 3.0
 */
StandardKeySet (/guava/src/com/google/common/collect/ForwardingMap.java)/**
   * A sensible implementation of {@link Map#keySet} in terms of the following methods: {@link
   * ForwardingMap#clear}, {@link ForwardingMap#containsKey}, {@link ForwardingMap#isEmpty}, {@link
   * ForwardingMap#remove}, {@link ForwardingMap#size}, and the {@link Set#iterator} method of
   * {@link ForwardingMap#entrySet}. In many cases, you may wish to override {@link
   * ForwardingMap#keySet} to forward to this implementation or a subclass thereof.
   *
   * @since 10.0
   */
StandardValues (/guava/src/com/google/common/collect/ForwardingMap.java)/**
   * A sensible implementation of {@link Map#values} in terms of the following methods: {@link
   * ForwardingMap#clear}, {@link ForwardingMap#containsValue}, {@link ForwardingMap#isEmpty},
   * {@link ForwardingMap#size}, and the {@link Set#iterator} method of {@link
   * ForwardingMap#entrySet}. In many cases, you may wish to override {@link ForwardingMap#values}
   * to forward to this implementation or a subclass thereof.
   *
   * @since 10.0
   */
StandardEntrySet (/guava/src/com/google/common/collect/ForwardingMap.java)/**
   * A sensible implementation of {@link Map#entrySet} in terms of the following methods: {@link
   * ForwardingMap#clear}, {@link ForwardingMap#containsKey}, {@link ForwardingMap#get}, {@link
   * ForwardingMap#isEmpty}, {@link ForwardingMap#remove}, and {@link ForwardingMap#size}. In many
   * cases, you may wish to override {@link #entrySet} to forward to this implementation or a
   * subclass thereof.
   *
   * @since 10.0
   */
ForwardingMap (/guava/src/com/google/common/collect/ForwardingMap.java)/**
 * A map which forwards all its method calls to another map. Subclasses should override one or more
 * methods to modify the behavior of the backing map as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingMap} forward <i>indiscriminately</i> to the
 * methods of the delegate. For example, overriding {@link #put} alone <i>will not</i> change the
 * behavior of {@link #putAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code putAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardPutAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingMap}.
 *
 * <p>Each of the {@code standard} methods, where appropriate, use {@link Objects#equal} to test
 * equality for both keys and values. This may not be the desired behavior for map implementations
 * that use non-standard notions of key equality, such as a {@code SortedMap} whose comparator is
 * not consistent with {@code equals}.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingMapEntry (/guava/src/com/google/common/collect/ForwardingMapEntry.java)/**
 * A map entry which forwards all its method calls to another map entry. Subclasses should override
 * one or more methods to modify the behavior of the backing map entry as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingMapEntry} forward <i>indiscriminately</i> to
 * the methods of the delegate. For example, overriding {@link #getValue} alone <i>will not</i>
 * change the behavior of {@link #equals}, which can lead to unexpected behavior. In this case, you
 * should override {@code equals} as well, either providing your own implementation, or delegating
 * to the provided {@code standardEquals} method.
 *
 * <p>Each of the {@code standard} methods, where appropriate, use {@link Objects#equal} to test
 * equality for both keys and values. This may not be the desired behavior for map implementations
 * that use non-standard notions of key equality, such as the entry of a {@code SortedMap} whose
 * comparator is not consistent with {@code equals}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingMultimap (/guava/src/com/google/common/collect/ForwardingMultimap.java)/**
 * A multimap which forwards all its method calls to another multimap. Subclasses should override
 * one or more methods to modify the behavior of the backing multimap as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingMultimap}.
 *
 * @author Robert Konigsberg
 * @since 2.0
 */
StandardElementSet (/guava/src/com/google/common/collect/ForwardingMultiset.java)/**
   * A sensible implementation of {@link Multiset#elementSet} in terms of the following methods:
   * {@link ForwardingMultiset#clear}, {@link ForwardingMultiset#contains}, {@link
   * ForwardingMultiset#containsAll}, {@link ForwardingMultiset#count}, {@link
   * ForwardingMultiset#isEmpty}, the {@link Set#size} and {@link Set#iterator} methods of {@link
   * ForwardingMultiset#entrySet}, and {@link ForwardingMultiset#remove(Object, int)}. In many
   * situations, you may wish to override {@link ForwardingMultiset#elementSet} to forward to this
   * implementation or a subclass thereof.
   *
   * @since 10.0
   */
ForwardingMultiset (/guava/src/com/google/common/collect/ForwardingMultiset.java)/**
 * A multiset which forwards all its method calls to another multiset. Subclasses should override
 * one or more methods to modify the behavior of the backing multiset as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingMultiset} forward <b>indiscriminately</b> to
 * the methods of the delegate. For example, overriding {@link #add(Object, int)} alone <b>will
 * not</b> change the behavior of {@link #add(Object)}, which can lead to unexpected behavior. In
 * this case, you should override {@code add(Object)} as well, either providing your own
 * implementation, or delegating to the provided {@code standardAdd} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingMultiset}.
 *
 * <p>The {@code standard} methods and any collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 2.0
 */
StandardDescendingMap (/guava/src/com/google/common/collect/ForwardingNavigableMap.java)/**
   * A sensible implementation of {@link NavigableMap#descendingMap} in terms of the methods of this
   * {@code NavigableMap}. In many cases, you may wish to override {@link
   * ForwardingNavigableMap#descendingMap} to forward to this implementation or a subclass thereof.
   *
   * <p>In particular, this map iterates over entries with repeated calls to {@link
   * NavigableMap#lowerEntry}. If a more efficient means of iteration is available, you may wish to
   * override the {@code entryIterator()} method of this class.
   *
   * @since 12.0
   */
StandardNavigableKeySet (/guava/src/com/google/common/collect/ForwardingNavigableMap.java)/**
   * A sensible implementation of {@link NavigableMap#navigableKeySet} in terms of the methods of
   * this {@code NavigableMap}. In many cases, you may wish to override {@link
   * ForwardingNavigableMap#navigableKeySet} to forward to this implementation or a subclass
   * thereof.
   *
   * @since 12.0
   */
ForwardingNavigableMap (/guava/src/com/google/common/collect/ForwardingNavigableMap.java)/**
 * A navigable map which forwards all its method calls to another navigable map. Subclasses should
 * override one or more methods to modify the behavior of the backing map as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingNavigableMap} forward <i>indiscriminately</i>
 * to the methods of the delegate. For example, overriding {@link #put} alone <i>will not</i> change
 * the behavior of {@link #putAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code putAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardPutAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingNavigableMap}.
 *
 * <p>Each of the {@code standard} methods uses the map's comparator (or the natural ordering of the
 * elements, if there is no comparator) to test element equality. As a result, if the comparator is
 * not consistent with equals, some of the standard implementations may violate the {@code Map}
 * contract.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Louis Wasserman
 * @since 12.0
 */
StandardDescendingSet (/guava/src/com/google/common/collect/ForwardingNavigableSet.java)/**
   * A sensible implementation of {@link NavigableSet#descendingSet} in terms of the other methods
   * of {@link NavigableSet}, notably including {@link NavigableSet#descendingIterator}.
   *
   * <p>In many cases, you may wish to override {@link ForwardingNavigableSet#descendingSet} to
   * forward to this implementation or a subclass thereof.
   *
   * @since 12.0
   */
ForwardingNavigableSet (/guava/src/com/google/common/collect/ForwardingNavigableSet.java)/**
 * A navigable set which forwards all its method calls to another navigable set. Subclasses should
 * override one or more methods to modify the behavior of the backing set as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingNavigableSet} forward <i>indiscriminately</i>
 * to the methods of the delegate. For example, overriding {@link #add} alone <i>will not</i> change
 * the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingNavigableSet}.
 *
 * <p>Each of the {@code standard} methods uses the set's comparator (or the natural ordering of the
 * elements, if there is no comparator) to test element equality. As a result, if the comparator is
 * not consistent with equals, some of the standard implementations may violate the {@code Set}
 * contract.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Louis Wasserman
 * @since 12.0
 */
ForwardingObject (/guava/src/com/google/common/collect/ForwardingObject.java)/**
 * An abstract base class for implementing the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>. The {@link
 * #delegate()} method must be overridden to return the instance being decorated.
 *
 * <p>This class does <i>not</i> forward the {@code hashCode} and {@code equals} methods through to
 * the backing object, but relies on {@code Object}'s implementation. This is necessary to preserve
 * the symmetry of {@code equals}. Custom definitions of equality are usually based on an interface,
 * such as {@code Set} or {@code List}, so that the implementation of {@code equals} can cast the
 * object being tested for equality to the custom interface. {@code ForwardingObject} implements no
 * such custom interfaces directly; they are implemented only in subclasses. Therefore, forwarding
 * {@code equals} would break symmetry, as the forwarding object might consider itself equal to the
 * object being tested, but the reverse could not be true. This behavior is consistent with the
 * JDK's collection wrappers, such as {@link java.util.Collections#unmodifiableCollection}. Use an
 * interface-specific subclass of {@code ForwardingObject}, such as {@link ForwardingList}, to
 * preserve equality behavior, or override {@code equals} directly.
 *
 * <p>The {@code toString} method is forwarded to the delegate. Although this class does not
 * implement {@link Serializable}, a serializable subclass may be created since this class has a
 * parameter-less constructor.
 *
 * @author Mike Bostock
 * @since 2.0
 */
ForwardingQueue (/guava/src/com/google/common/collect/ForwardingQueue.java)/**
 * A queue which forwards all its method calls to another queue. Subclasses should override one or
 * more methods to modify the behavior of the backing queue as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingQueue} forward <b>indiscriminately</b> to the
 * methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change the
 * behavior of {@link #offer} which can lead to unexpected behavior. In this case, you should
 * override {@code offer} as well, either providing your own implementation, or delegating to the
 * provided {@code standardOffer} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingQueue}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingSet (/guava/src/com/google/common/collect/ForwardingSet.java)/**
 * A set which forwards all its method calls to another set. Subclasses should override one or more
 * methods to modify the behavior of the backing set as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingSet} forward <b>indiscriminately</b> to the
 * methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change the
 * behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSet}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingSetMultimap (/guava/src/com/google/common/collect/ForwardingSetMultimap.java)/**
 * A set multimap which forwards all its method calls to another set multimap. Subclasses should
 * override one or more methods to modify the behavior of the backing multimap as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSetMultimap}.
 *
 * @author Kurt Alfred Kluever
 * @since 3.0
 */
StandardKeySet (/guava/src/com/google/common/collect/ForwardingSortedMap.java)/**
   * A sensible implementation of {@link SortedMap#keySet} in terms of the methods of {@code
   * ForwardingSortedMap}. In many cases, you may wish to override {@link
   * ForwardingSortedMap#keySet} to forward to this implementation or a subclass thereof.
   *
   * @since 15.0
   */
ForwardingSortedMap (/guava/src/com/google/common/collect/ForwardingSortedMap.java)/**
 * A sorted map which forwards all its method calls to another sorted map. Subclasses should
 * override one or more methods to modify the behavior of the backing sorted map as desired per the
 * <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingSortedMap} forward <i>indiscriminately</i> to
 * the methods of the delegate. For example, overriding {@link #put} alone <i>will not</i> change
 * the behavior of {@link #putAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code putAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardPutAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSortedMap}.
 *
 * <p>Each of the {@code standard} methods, where appropriate, use the comparator of the map to test
 * equality for both keys and values, unlike {@code ForwardingMap}.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
StandardElementSet (/guava/src/com/google/common/collect/ForwardingSortedMultiset.java)/**
   * A sensible implementation of {@link SortedMultiset#elementSet} in terms of the following
   * methods: {@link SortedMultiset#clear}, {@link SortedMultiset#comparator}, {@link
   * SortedMultiset#contains}, {@link SortedMultiset#containsAll}, {@link SortedMultiset#count},
   * {@link SortedMultiset#firstEntry} {@link SortedMultiset#headMultiset}, {@link
   * SortedMultiset#isEmpty}, {@link SortedMultiset#lastEntry}, {@link SortedMultiset#subMultiset},
   * {@link SortedMultiset#tailMultiset}, the {@code size()} and {@code iterator()} methods of
   * {@link SortedMultiset#entrySet}, and {@link SortedMultiset#remove(Object, int)}. In many
   * situations, you may wish to override {@link SortedMultiset#elementSet} to forward to this
   * implementation or a subclass thereof.
   *
   * @since 15.0
   */
StandardDescendingMultiset (/guava/src/com/google/common/collect/ForwardingSortedMultiset.java)/**
   * A skeleton implementation of a descending multiset view. Normally, {@link
   * #descendingMultiset()} will not reflect any changes you make to the behavior of methods such as
   * {@link #add(Object)} or {@link #pollFirstEntry}. This skeleton implementation correctly
   * delegates each of its operations to the appropriate methods of this {@code
   * ForwardingSortedMultiset}.
   *
   * <p>In many cases, you may wish to override {@link #descendingMultiset()} to return an instance
   * of a subclass of {@code StandardDescendingMultiset}.
   *
   * @since 15.0
   */
ForwardingSortedMultiset (/guava/src/com/google/common/collect/ForwardingSortedMultiset.java)/**
 * A sorted multiset which forwards all its method calls to another sorted multiset. Subclasses
 * should override one or more methods to modify the behavior of the backing multiset as desired per
 * the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingSortedMultiset} forward
 * <b>indiscriminately</b> to the methods of the delegate. For example, overriding {@link
 * #add(Object, int)} alone <b>will not</b> change the behavior of {@link #add(Object)}, which can
 * lead to unexpected behavior. In this case, you should override {@code add(Object)} as well,
 * either providing your own implementation, or delegating to the provided {@code standardAdd}
 * method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSortedMultiset}.
 *
 * <p>The {@code standard} methods and any collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Louis Wasserman
 * @since 15.0
 */
ForwardingSortedSet (/guava/src/com/google/common/collect/ForwardingSortedSet.java)/**
 * A sorted set which forwards all its method calls to another sorted set. Subclasses should
 * override one or more methods to modify the behavior of the backing sorted set as desired per the
 * <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingSortedSet} forward <i>indiscriminately</i> to
 * the methods of the delegate. For example, overriding {@link #add} alone <i>will not</i> change
 * the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should
 * override {@code addAll} as well, either providing your own implementation, or delegating to the
 * provided {@code standardAddAll} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSortedSet}.
 *
 * <p>Each of the {@code standard} methods, where appropriate, uses the set's comparator (or the
 * natural ordering of the elements, if there is no comparator) to test element equality. As a
 * result, if the comparator is not consistent with equals, some of the standard implementations may
 * violate the {@code Set} contract.
 *
 * <p>The {@code standard} methods and the collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ForwardingSortedSetMultimap (/guava/src/com/google/common/collect/ForwardingSortedSetMultimap.java)/**
 * A sorted set multimap which forwards all its method calls to another sorted set multimap.
 * Subclasses should override one or more methods to modify the behavior of the backing multimap as
 * desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingSortedSetMultimap}.
 *
 * @author Kurt Alfred Kluever
 * @since 3.0
 */
ForwardingTable (/guava/src/com/google/common/collect/ForwardingTable.java)/**
 * A table which forwards all its method calls to another table. Subclasses should override one or
 * more methods to modify the behavior of the backing map as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * @author Gregory Kick
 * @since 7.0
 */
GeneralRange (/guava/src/com/google/common/collect/GeneralRange.java)/**
 * A generalized interval on any ordering, for internal use. Supports {@code null}. Unlike {@link
 * Range}, this allows the use of an arbitrary comparator. This is designed for use in the
 * implementation of subcollections of sorted collection types.
 *
 * <p>Whenever possible, use {@code Range} instead, which is better supported.
 *
 * @author Louis Wasserman
 */
HashBasedTable (/guava/src/com/google/common/collect/HashBasedTable.java)/**
 * Implementation of {@link Table} using linked hash tables. This guarantees predictable iteration
 * order of the various views.
 *
 * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link #columnMap()} have
 * iterators that don't support {@code remove()}. Otherwise, all optional operations are supported.
 * Null row keys, columns keys, and values are not supported.
 *
 * <p>Lookups by row key are often faster than lookups by column key, because the data is stored in
 * a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs
 * quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer,
 * since an iteration across all row keys occurs.
 *
 * <p>Note that this implementation is not synchronized. If multiple threads access this table
 * concurrently and one of the threads modifies the table, it must be synchronized externally.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"> {@code Table}</a>.
 *
 * @author Jared Levy
 * @since 7.0
 */
HashBiMap (/guava/src/com/google/common/collect/HashBiMap.java)/**
 * A {@link BiMap} backed by two hash tables. This implementation allows null keys and values. A
 * {@code HashBiMap} and its inverse are both serializable.
 *
 * <p>This implementation guarantees insertion-based iteration order of its keys.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap"> {@code BiMap} </a>.
 *
 * @author Louis Wasserman
 * @author Mike Bostock
 * @since 2.0
 */
Hashing (/guava/src/com/google/common/collect/Hashing.java)/**
 * Static methods for implementing hash-based collections.
 *
 * @author Kevin Bourrillion
 * @author Jesse Wilson
 * @author Austin Appleby
 */
HashMultimap (/guava/src/com/google/common/collect/HashMultimap.java)/**
 * Implementation of {@link Multimap} using hash tables.
 *
 * <p>The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an
 * existing key-value pair has no effect.
 *
 * <p>Keys and values may be null. All optional multimap methods are supported, and all returned
 * views are modifiable.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedSetMultimap}.
 *
 * @author Jared Levy
 * @since 2.0
 */
HashMultimapGwtSerializationDependencies (/guava/src/com/google/common/collect/HashMultimapGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element types of a {@link HashMultimap}.
 * The GWT supersource for this class contains a field for each type.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 */
HashMultiset (/guava/src/com/google/common/collect/HashMultiset.java)/**
 * Multiset implementation backed by a {@link HashMap}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @since 2.0
 */
SerializedForm (/guava/src/com/google/common/collect/ImmutableAsList.java)/** Serialized form that leads to the same performance as the original list. */
ImmutableAsList (/guava/src/com/google/common/collect/ImmutableAsList.java)/**
 * List returned by {@link ImmutableCollection#asList} that delegates {@code contains} checks to the
 * backing collection.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
Builder (/guava/src/com/google/common/collect/ImmutableBiMap.java)/**
   * A builder for creating immutable bimap instances, especially {@code public static final} bimaps
   * ("constant bimaps"). Example:
   *
   * <pre>{@code
   * static final ImmutableBiMap<String, Integer> WORD_TO_INT =
   *     new ImmutableBiMap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .put("two", 2)
   *         .put("three", 3)
   *         .build();
   * }</pre>
   *
   * <p>For <i>small</i> immutable bimaps, the {@code ImmutableBiMap.of()} methods are even more
   * convenient.
   *
   * <p>By default, a {@code Builder} will generate bimaps that iterate over entries in the order
   * they were inserted into the builder. For example, in the above example, {@code
   * WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order {@code "one"=1,
   * "two"=2, "three"=3}, and {@code keySet()} and {@code values()} respect the same order. If you
   * want a different order, consider using {@link #orderEntriesByValue(Comparator)}, which changes
   * this builder to sort entries by value.
   *
   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build
   * multiple bimaps in series. Each bimap is a superset of the bimaps created before it.
   *
   * @since 2.0
   */
SerializedForm (/guava/src/com/google/common/collect/ImmutableBiMap.java)/**
   * Serialized type for all ImmutableBiMap instances. It captures the logical contents and they are
   * reconstructed using public factory methods. This ensures that the implementation types remain
   * as implementation details.
   *
   * <p>Since the bimap is immutable, ImmutableBiMap doesn't require special logic for keeping the
   * bimap and its inverse in sync during serialization, the way AbstractBiMap does.
   */
ImmutableBiMap (/guava/src/com/google/common/collect/ImmutableBiMap.java)/**
 * A {@link BiMap} whose contents will never change, with many other important properties detailed
 * at {@link ImmutableCollection}.
 *
 * @author Jared Levy
 * @since 2.0
 */
ImmutableBiMapFauxverideShim (/guava/src/com/google/common/collect/ImmutableBiMapFauxverideShim.java)/**
 * "Overrides" the {@link ImmutableMap} static methods that lack {@link ImmutableBiMap} equivalents
 * with deprecated, exception-throwing versions. See {@link ImmutableSortedSetFauxverideShim} for
 * details.
 *
 * @author Louis Wasserman
 */
Builder (/guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java)/**
   * A builder for creating immutable class-to-instance maps. Example:
   *
   * <pre>{@code
   * static final ImmutableClassToInstanceMap<Handler> HANDLERS =
   *     new ImmutableClassToInstanceMap.Builder<Handler>()
   *         .put(FooHandler.class, new FooHandler())
   *         .put(BarHandler.class, new SubBarHandler())
   *         .put(Handler.class, new QuuxHandler())
   *         .build();
   * }</pre>
   *
   * <p>After invoking {@link #build()} it is still possible to add more entries and build again.
   * Thus each map generated by this builder will be a superset of any map generated before it.
   *
   * @since 2.0
   */
ImmutableClassToInstanceMap (/guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java)/**
 * A {@link ClassToInstanceMap} whose contents will never change, with many other important
 * properties detailed at {@link ImmutableCollection}.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
Builder (/guava/src/com/google/common/collect/ImmutableCollection.java)/**
   * Abstract base class for builders of {@link ImmutableCollection} types.
   *
   * @since 10.0
   */
ImmutableCollection (/guava/src/com/google/common/collect/ImmutableCollection.java)/**
 * A {@link Collection} whose contents will never change, and which offers a few additional
 * guarantees detailed below.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as
 * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
 * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
 * of bugs and confusion.
 *
 * <h3>About <i>all</i> {@code Immutable-} collections</h3>
 *
 * <p>The remainder of this documentation applies to every public {@code Immutable-} type in this
 * package, whether it is a subtype of {@code ImmutableCollection} or not.
 *
 * <h4>Guarantees</h4>
 *
 * <p>Each makes the following guarantees:
 *
 * <ul>
 *   <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this
 *       collection. This is a stronger guarantee than that of {@link
 *       Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection
 *       is modified.
 *   <li><b>Null-hostility.</b> This collection will never contain a null element.
 *   <li><b>Deterministic iteration.</b> The iteration order is always well-defined, depending on
 *       how the collection was created. Typically this is insertion order unless an explicit
 *       ordering is otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}). See the
 *       appropriate factory method for details. View collections such as {@link
 *       ImmutableMultiset#elementSet} iterate in the same order as the parent, except as noted.
 *   <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple
 *       threads.
 *   <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow
 *       these guarantees to be violated).
 * </ul>
 *
 * <h4>"Interfaces", not implementations</h4>
 *
 * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought
 * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a
 * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the
 * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were
 * largely defined by its supertype.
 *
 * <p>For field types and method return types, you should generally use the immutable type (such as
 * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
 * This communicates to your callers all of the semantic guarantees listed above, which is almost
 * always very useful information.
 *
 * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to
 * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
 * appropriate {@code copyOf} method itself.
 *
 * <p>Expressing the immutability guarantee directly in the type that user code references is a
 * powerful advantage. Although Java offers certain immutable collection factory methods, such as
 * {@link Collections#singleton(Object)} and <a
 * href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,
 * we recommend using <i>these</i> classes instead for this reason (as well as for consistency).
 *
 * <h4>Creation</h4>
 *
 * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
 * Immutable} type provides the static operations you need to obtain instances of that type. These
 * usually include:
 *
 * <ul>
 *   <li>Static methods named {@code of}, accepting an explicit list of elements or entries.
 *   <li>Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
 *       collection whose contents should be copied.
 *   <li>A static nested {@code Builder} class which can be used to populate a new immutable
 *       instance.
 * </ul>
 *
 * <h4>Warnings</h4>
 *
 * <ul>
 *   <li><b>Warning:</b> as with any collection, it is almost always a bad idea to modify an element
 *       (in a way that affects its {@link Object#equals} behavior) while it is contained in a
 *       collection. Undefined behavior and bugs will result. It's generally best to avoid using
 *       mutable objects as elements at all, as many users may expect your "immutable" object to be
 *       <i>deeply</i> immutable.
 * </ul>
 *
 * <h4>Performance notes</h4>
 *
 * <ul>
 *   <li>Implementations can be generally assumed to prioritize memory efficiency, then speed of
 *       access, and lastly speed of creation.
 *   <li>The {@code copyOf} methods will sometimes recognize that the actual copy operation is
 *       unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
 *       once. This reduces the expense of habitually making defensive copies at API boundaries.
 *       However, the precise conditions for skipping the copy operation are undefined.
 *   <li><b>Warning:</b> a view collection such as {@link ImmutableMap#keySet} or {@link
 *       ImmutableList#subList} may retain a reference to the entire data set, preventing it from
 *       being garbage collected. If some of the data is no longer reachable through other means,
 *       this constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf}
 *       method to obtain a correctly-sized copy.
 *   <li>The performance of using the associated {@code Builder} class can be assumed to be no
 *       worse, and possibly better, than creating a mutable collection and copying it.
 *   <li>Implementations generally do not cache hash codes. If your element or key type has a slow
 *       {@code hashCode} implementation, it should cache it itself.
 * </ul>
 *
 * <h4>Example usage</h4>
 *
 * <pre>{@code
 * class Foo {
 *   private static final ImmutableSet<String> RESERVED_CODES =
 *       ImmutableSet.of("AZ", "CQ", "ZX");
 *
 *   private final ImmutableSet<String> codes;
 *
 *   public Foo(Iterable<String> codes) {
 *     this.codes = ImmutableSet.copyOf(codes);
 *     checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
 *   }
 * }
 * }</pre>
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @since 2.0
 */
ImmutableEntry (/guava/src/com/google/common/collect/ImmutableEntry.java)/** @see com.google.common.collect.Maps#immutableEntry(Object, Object) */
ImmutableEnumMap (/guava/src/com/google/common/collect/ImmutableEnumMap.java)/**
 * Implementation of {@link ImmutableMap} backed by a non-empty {@link java.util.EnumMap}.
 *
 * @author Louis Wasserman
 */
ImmutableEnumSet (/guava/src/com/google/common/collect/ImmutableEnumSet.java)/**
 * Implementation of {@link ImmutableSet} backed by a non-empty {@link java.util.EnumSet}.
 *
 * @author Jared Levy
 */
Builder (/guava/src/com/google/common/collect/ImmutableList.java)/**
   * A builder for creating immutable list instances, especially {@code public static final} lists
   * ("constant lists"). Example:
   *
   * <pre>{@code
   * public static final ImmutableList<Color> GOOGLE_COLORS
   *     = new ImmutableList.Builder<Color>()
   *         .addAll(WEBSAFE_COLORS)
   *         .add(new Color(0, 191, 255))
   *         .build();
   * }</pre>
   *
   * <p>Elements appear in the resulting list in the same order they were added to the builder.
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple lists in series. Each new list contains all the elements of the ones created before
   * it.
   *
   * @since 2.0
   */
ImmutableList (/guava/src/com/google/common/collect/ImmutableList.java)/**
 * A {@link List} whose contents will never change, with many other important properties detailed at
 * {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @see ImmutableMap
 * @see ImmutableSet
 * @author Kevin Bourrillion
 * @since 2.0
 */
Builder (/guava/src/com/google/common/collect/ImmutableListMultimap.java)/**
   * A builder for creating immutable {@code ListMultimap} instances, especially {@code public
   * static final} multimaps ("constant multimaps"). Example:
   *
   * <pre>{@code
   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =
   *     new ImmutableListMultimap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .putAll("several", 1, 2, 3)
   *         .putAll("many", 1, 2, 3, 4, 5)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously
   * created multimaps.
   *
   * @since 2.0
   */
ImmutableListMultimap (/guava/src/com/google/common/collect/ImmutableListMultimap.java)/**
 * A {@link ListMultimap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
Builder (/guava/src/com/google/common/collect/ImmutableMap.java)/**
   * A builder for creating immutable map instances, especially {@code public static final} maps
   * ("constant maps"). Example:
   *
   * <pre>{@code
   * static final ImmutableMap<String, Integer> WORD_TO_INT =
   *     new ImmutableMap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .put("two", 2)
   *         .put("three", 3)
   *         .build();
   * }</pre>
   *
   * <p>For <i>small</i> immutable maps, the {@code ImmutableMap.of()} methods are even more
   * convenient.
   *
   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order they
   * were inserted into the builder, equivalently to {@code LinkedHashMap}. For example, in the
   * above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the
   * order {@code "one"=1, "two"=2, "three"=3}, and {@code keySet()} and {@code values()} respect
   * the same order. If you want a different order, consider using {@link ImmutableSortedMap} to
   * sort by keys, or call {@link #orderEntriesByValue(Comparator)}, which changes this builder to
   * sort entries by value.
   *
   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build
   * multiple maps in series. Each map is a superset of the maps created before it.
   *
   * @since 2.0
   */
SerializedForm (/guava/src/com/google/common/collect/ImmutableMap.java)/**
   * Serialized type for all ImmutableMap instances. It captures the logical contents and they are
   * reconstructed using public factory methods. This ensures that the implementation types remain
   * as implementation details.
   */
ImmutableMap (/guava/src/com/google/common/collect/ImmutableMap.java)/**
 * A {@link Map} whose contents will never change, with many other important properties detailed at
 * {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 * @since 2.0
 */
ImmutableMapEntry (/guava/src/com/google/common/collect/ImmutableMapEntry.java)/**
 * Implementation of {@code Entry} for {@link ImmutableMap} that adds extra methods to traverse hash
 * buckets for the key and the value. This allows reuse in {@link RegularImmutableMap} and {@link
 * RegularImmutableBiMap}, which don't have to recopy the entries created by their {@code Builder}
 * implementations.
 *
 * <p>This base implementation has no key or value pointers, so instances of ImmutableMapEntry (but
 * not its subclasses) can be reused when copied from one ImmutableMap to another.
 *
 * @author Louis Wasserman
 */
ImmutableMapEntrySet (/guava/src/com/google/common/collect/ImmutableMapEntrySet.java)/**
 * {@code entrySet()} implementation for {@link ImmutableMap}.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 */
ImmutableMapKeySet (/guava/src/com/google/common/collect/ImmutableMapKeySet.java)/**
 * {@code keySet()} implementation for {@link ImmutableMap}.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 */
ImmutableMapValues (/guava/src/com/google/common/collect/ImmutableMapValues.java)/**
 * {@code values()} implementation for {@link ImmutableMap}.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 */
Builder (/guava/src/com/google/common/collect/ImmutableMultimap.java)/**
   * A builder for creating immutable multimap instances, especially {@code public static final}
   * multimaps ("constant multimaps"). Example:
   *
   * <pre>{@code
   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =
   *     new ImmutableMultimap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .putAll("several", 1, 2, 3)
   *         .putAll("many", 1, 2, 3, 4, 5)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously
   * created multimaps.
   *
   * @since 2.0
   */
ImmutableMultimap (/guava/src/com/google/common/collect/ImmutableMultimap.java)/**
 * A {@link Multimap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableMultimap} as a type (as with
 * {@link Multimap} itself). Prefer subtypes such as {@link ImmutableSetMultimap} or {@link
 * ImmutableListMultimap}, which have well-defined {@link #equals} semantics, thus avoiding a common
 * source of bugs and confusion.
 *
 * <p><b>Note:</b> every {@link ImmutableMultimap} offers an {@link #inverse} view, so there is no
 * need for a distinct {@code ImmutableBiMultimap} type.
 *
 * <p><a name="iteration"></a>
 *
 * <p><b>Key-grouped iteration.</b> All view collections follow the same iteration order. In all
 * current implementations, the iteration order always keeps multiple entries with the same key
 * together. Any creation method that would customarily respect insertion order (such as {@link
 * #copyOf(Multimap)}) instead preserves key-grouped order by inserting entries for an existing key
 * immediately after the last entry having that key.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
Builder (/guava/src/com/google/common/collect/ImmutableMultiset.java)/**
   * A builder for creating immutable multiset instances, especially {@code public static final}
   * multisets ("constant multisets"). Example:
   *
   * <pre>{@code
   * public static final ImmutableMultiset<Bean> BEANS =
   *     new ImmutableMultiset.Builder<Bean>()
   *         .addCopies(Bean.COCOA, 4)
   *         .addCopies(Bean.GARDEN, 6)
   *         .addCopies(Bean.RED, 8)
   *         .addCopies(Bean.BLACK_EYED, 10)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multisets in series.
   *
   * @since 2.0
   */
ImmutableMultiset (/guava/src/com/google/common/collect/ImmutableMultiset.java)/**
 * A {@link Multiset} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p><b>Grouped iteration.</b> In all current implementations, duplicate elements always appear
 * consecutively when iterating. Elements iterate in order by the <i>first</i> appearance of that
 * element when the multiset was created.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0
 */
ImmutableMultisetGwtSerializationDependencies (/guava/src/com/google/common/collect/ImmutableMultisetGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element type of an {@link
 * ImmutableMultiset}. The GWT supersource for this class contains a field of type {@code E}.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 *
 * <p>For {@code ImmutableMultiset} in particular, I ran into a problem with the {@code
 * GwtSerializationDependencies} approach: When autogenerating a serializer for the new class, GWT
 * tries to refer to our dummy serializer for the superclass,
 * ImmutableMultiset_CustomFieldSerializer. But that type has no methods (since it's never actually
 * used). We could probably fix the problem by adding dummy methods to that class, but that is
 * starting to sound harder than taking the superclass approach, which I've been coming to like,
 * anyway, since it doesn't require us to declare dummy methods (though occasionally constructors)
 * and make types non-final.
 */
Builder (/guava/src/com/google/common/collect/ImmutableRangeMap.java)/**
   * A builder for immutable range maps. Overlapping ranges are prohibited.
   *
   * @since 14.0
   */
SerializedForm (/guava/src/com/google/common/collect/ImmutableRangeMap.java)/**
   * This class is used to serialize ImmutableRangeMap instances. Serializes the {@link
   * #asMapOfRanges()} form.
   */
ImmutableRangeMap (/guava/src/com/google/common/collect/ImmutableRangeMap.java)/**
 * A {@link RangeMap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
Builder (/guava/src/com/google/common/collect/ImmutableRangeSet.java)/**
   * A builder for immutable range sets.
   *
   * @since 14.0
   */
ImmutableRangeSet (/guava/src/com/google/common/collect/ImmutableRangeSet.java)/**
 * A {@link RangeSet} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
Builder (/guava/src/com/google/common/collect/ImmutableSet.java)/**
   * A builder for creating {@code ImmutableSet} instances. Example:
   *
   * <pre>{@code
   * static final ImmutableSet<Color> GOOGLE_COLORS =
   *     ImmutableSet.<Color>builder()
   *         .addAll(WEBSAFE_COLORS)
   *         .add(new Color(0, 191, 255))
   *         .build();
   * }</pre>
   *
   * <p>Elements appear in the resulting set in the same order they were first added to the builder.
   *
   * <p>Building does not change the state of the builder, so it is still possible to add more
   * elements and to build again.
   *
   * @since 2.0
   */
SetBuilderImpl (/guava/src/com/google/common/collect/ImmutableSet.java)/** Swappable internal implementation of an ImmutableSet.Builder. */
RegularSetBuilderImpl (/guava/src/com/google/common/collect/ImmutableSet.java)/**
   * Default implementation of the guts of ImmutableSet.Builder, creating an open-addressed hash
   * table and deduplicating elements as they come, so it only allocates O(max(distinct,
   * expectedCapacity)) rather than O(calls to add).
   *
   * <p>This implementation attempts to detect hash flooding, and if it's identified, falls back to
   * JdkBackedSetBuilderImpl.
   */
JdkBackedSetBuilderImpl (/guava/src/com/google/common/collect/ImmutableSet.java)/**
   * SetBuilderImpl version that uses a JDK HashSet, which has built in hash flooding protection.
   */
ImmutableSet (/guava/src/com/google/common/collect/ImmutableSet.java)/**
 * A {@link Set} whose contents will never change, with many other important properties detailed at
 * {@link ImmutableCollection}.
 *
 * @since 2.0
 */
Builder (/guava/src/com/google/common/collect/ImmutableSetMultimap.java)/**
   * A builder for creating immutable {@code SetMultimap} instances, especially {@code public static
   * final} multimaps ("constant multimaps"). Example:
   *
   * <pre>{@code
   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =
   *     new ImmutableSetMultimap.Builder<String, Integer>()
   *         .put("one", 1)
   *         .putAll("several", 1, 2, 3)
   *         .putAll("many", 1, 2, 3, 4, 5)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously
   * created multimaps.
   *
   * @since 2.0
   */
ImmutableSetMultimap (/guava/src/com/google/common/collect/ImmutableSetMultimap.java)/**
 * A {@link SetMultimap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Mike Ward
 * @since 2.0
 */
ImmutableSortedAsList (/guava/src/com/google/common/collect/ImmutableSortedAsList.java)/**
 * List returned by {@code ImmutableSortedSet.asList()} when the set isn't empty.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
Builder (/guava/src/com/google/common/collect/ImmutableSortedMap.java)/**
   * A builder for creating immutable sorted map instances, especially {@code public static final}
   * maps ("constant maps"). Example:
   *
   * <pre>{@code
   * static final ImmutableSortedMap<Integer, String> INT_TO_WORD =
   *     new ImmutableSortedMap.Builder<Integer, String>(Ordering.natural())
   *         .put(1, "one")
   *         .put(2, "two")
   *         .put(3, "three")
   *         .build();
   * }</pre>
   *
   * <p>For <i>small</i> immutable sorted maps, the {@code ImmutableSortedMap.of()} methods are even
   * more convenient.
   *
   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build
   * multiple maps in series. Each map is a superset of the maps created before it.
   *
   * @since 2.0
   */
SerializedForm (/guava/src/com/google/common/collect/ImmutableSortedMap.java)/**
   * Serialized type for all ImmutableSortedMap instances. It captures the logical contents and they
   * are reconstructed using public factory methods. This ensures that the implementation types
   * remain as implementation details.
   */
ImmutableSortedMap (/guava/src/com/google/common/collect/ImmutableSortedMap.java)/**
 * A {@link NavigableMap} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p><b>Warning:</b> as with any sorted collection, you are strongly advised not to use a {@link
 * Comparator} or {@link Comparable} type whose comparison behavior is <i>inconsistent with
 * equals</i>. That is, {@code a.compareTo(b)} or {@code comparator.compare(a, b)} should equal zero
 * <i>if and only if</i> {@code a.equals(b)}. If this advice is not followed, the resulting map will
 * not correctly obey its specification.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0 (implements {@code NavigableMap} since 12.0)
 */
ImmutableSortedMapFauxverideShim (/guava/src/com/google/common/collect/ImmutableSortedMapFauxverideShim.java)/**
 * "Overrides" the {@link ImmutableMap} static methods that lack {@link ImmutableSortedMap}
 * equivalents with deprecated, exception-throwing versions. See {@link
 * ImmutableSortedSetFauxverideShim} for details.
 *
 * @author Chris Povirk
 */
Builder (/guava/src/com/google/common/collect/ImmutableSortedMultiset.java)/**
   * A builder for creating immutable multiset instances, especially {@code public static final}
   * multisets ("constant multisets"). Example:
   *
   * <pre>{@code
   * public static final ImmutableSortedMultiset<Bean> BEANS =
   *     new ImmutableSortedMultiset.Builder<Bean>(colorComparator())
   *         .addCopies(Bean.COCOA, 4)
   *         .addCopies(Bean.GARDEN, 6)
   *         .addCopies(Bean.RED, 8)
   *         .addCopies(Bean.BLACK_EYED, 10)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple multisets in series.
   *
   * @since 12.0
   */
ImmutableSortedMultiset (/guava/src/com/google/common/collect/ImmutableSortedMultiset.java)/**
 * A {@link SortedMultiset} whose contents will never change, with many other important properties
 * detailed at {@link ImmutableCollection}.
 *
 * <p><b>Warning:</b> as with any sorted collection, you are strongly advised not to use a {@link
 * Comparator} or {@link Comparable} type whose comparison behavior is <i>inconsistent with
 * equals</i>. That is, {@code a.compareTo(b)} or {@code comparator.compare(a, b)} should equal zero
 * <i>if and only if</i> {@code a.equals(b)}. If this advice is not followed, the resulting
 * collection will not correctly obey its specification.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Louis Wasserman
 * @since 12.0
 */
ImmutableSortedMultisetFauxverideShim (/guava/src/com/google/common/collect/ImmutableSortedMultisetFauxverideShim.java)/**
 * "Overrides" the {@link ImmutableMultiset} static methods that lack {@link
 * ImmutableSortedMultiset} equivalents with deprecated, exception-throwing versions. This prevents
 * accidents like the following:
 *
 * <pre>{@code
 * List<Object> objects = ...;
 * // Sort them:
 * Set<Object> sorted = ImmutableSortedMultiset.copyOf(objects);
 * // BAD CODE! The returned multiset is actually an unsorted ImmutableMultiset!
 * }</pre>
 *
 * <p>While we could put the overrides in {@link ImmutableSortedMultiset} itself, it seems clearer
 * to separate these "do not call" methods from those intended for normal use.
 *
 * @author Louis Wasserman
 */
Builder (/guava/src/com/google/common/collect/ImmutableSortedSet.java)/**
   * A builder for creating immutable sorted set instances, especially {@code public static final}
   * sets ("constant sets"), with a given comparator. Example:
   *
   * <pre>{@code
   * public static final ImmutableSortedSet<Number> LUCKY_NUMBERS =
   *     new ImmutableSortedSet.Builder<Number>(ODDS_FIRST_COMPARATOR)
   *         .addAll(SINGLE_DIGIT_PRIMES)
   *         .add(42)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple sets in series. Each set is a superset of the set created before it.
   *
   * @since 2.0
   */
ImmutableSortedSetFauxverideShim (/guava/src/com/google/common/collect/ImmutableSortedSetFauxverideShim.java)/**
 * "Overrides" the {@link ImmutableSet} static methods that lack {@link ImmutableSortedSet}
 * equivalents with deprecated, exception-throwing versions. This prevents accidents like the
 * following:
 *
 * <pre>{@code
 * List<Object> objects = ...;
 * // Sort them:
 * Set<Object> sorted = ImmutableSortedSet.copyOf(objects);
 * // BAD CODE! The returned set is actually an unsorted ImmutableSet!
 * }</pre>
 *
 * <p>While we could put the overrides in {@link ImmutableSortedSet} itself, it seems clearer to
 * separate these "do not call" methods from those intended for normal use.
 *
 * @author Chris Povirk
 */
Builder (/guava/src/com/google/common/collect/ImmutableTable.java)/**
   * A builder for creating immutable table instances, especially {@code public static final} tables
   * ("constant tables"). Example:
   *
   * <pre>{@code
   * static final ImmutableTable<Integer, Character, String> SPREADSHEET =
   *     new ImmutableTable.Builder<Integer, Character, String>()
   *         .put(1, 'A', "foo")
   *         .put(1, 'B', "bar")
   *         .put(2, 'A', "baz")
   *         .build();
   * }</pre>
   *
   * <p>By default, the order in which cells are added to the builder determines the iteration
   * ordering of all views in the returned table, with {@link #putAll} following the {@link
   * Table#cellSet()} iteration order. However, if {@link #orderRowsBy} or {@link #orderColumnsBy}
   * is called, the views are sorted by the supplied comparators.
   *
   * <p>For empty or single-cell immutable tables, {@link #of()} and {@link #of(Object, Object,
   * Object)} are even more convenient.
   *
   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build
   * multiple tables in series. Each table is a superset of the tables created before it.
   *
   * @since 11.0
   */
SerializedForm (/guava/src/com/google/common/collect/ImmutableTable.java)/**
   * Serialized type for all ImmutableTable instances. It captures the logical contents and
   * preserves iteration order of all views.
   */
ImmutableTable (/guava/src/com/google/common/collect/ImmutableTable.java)/**
 * A {@link Table} whose contents will never change, with many other important properties detailed
 * at {@link ImmutableCollection}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @author Gregory Kick
 * @since 11.0
 */
Interner (/guava/src/com/google/common/collect/Interner.java)/**
 * Provides equivalent behavior to {@link String#intern} for other immutable types. Common
 * implementations are available from the {@link Interners} class.
 *
 * @author Kevin Bourrillion
 * @since 3.0
 */
InternerBuilder (/guava/src/com/google/common/collect/Interners.java)/**
   * Builder for {@link Interner} instances.
   *
   * @since 21.0
   */
Interners (/guava/src/com/google/common/collect/Interners.java)/**
 * Contains static methods pertaining to instances of {@link Interner}.
 *
 * @author Kevin Bourrillion
 * @since 3.0
 */
Iterables (/guava/src/com/google/common/collect/Iterables.java)/**
 * An assortment of mainly legacy static utility methods that operate on or return objects of type
 * {@code Iterable}. Except as noted, each method has a corresponding {@link Iterator}-based method
 * in the {@link Iterators} class.
 *
 * <p><b>Java 8 users:</b> several common uses for this class are now more comprehensively addressed
 * by the new {@link java.util.stream.Stream} library. Read the method documentation below for
 * comparisons. This class is not being deprecated, but we gently encourage you to migrate to
 * streams.
 *
 * <p><i>Performance notes:</i> Unless otherwise noted, all of the iterables produced in this class
 * are <i>lazy</i>, which means that their iterators only advance the backing iteration when
 * absolutely necessary.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables"> {@code
 * Iterables}</a>.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @since 2.0
 */
PeekingImpl (/guava/src/com/google/common/collect/Iterators.java)/** Implementation of PeekingIterator that avoids peeking unless necessary. */
MergingIterator (/guava/src/com/google/common/collect/Iterators.java)/**
   * An iterator that performs a lazy N-way merge, calculating the next value each time the iterator
   * is polled. This amortizes the sorting cost over the iteration and requires less memory than
   * sorting all elements at once.
   *
   * <p>Retrieving a single element takes approximately O(log(M)) time, where M is the number of
   * iterators. (Retrieving all elements takes approximately O(N*log(M)) time, where N is the total
   * number of elements.)
   */
Iterators (/guava/src/com/google/common/collect/Iterators.java)/**
 * This class contains static utility methods that operate on or return objects of type {@link
 * Iterator}. Except as noted, each method has a corresponding {@link Iterable}-based method in the
 * {@link Iterables} class.
 *
 * <p><i>Performance notes:</i> Unless otherwise noted, all of the iterators produced in this class
 * are <i>lazy</i>, which means that they only advance the backing iteration when absolutely
 * necessary.
 *
 * <p>See the Guava User Guide section on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables"> {@code
 * Iterators}</a>.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @since 2.0
 */
JdkBackedImmutableBiMap (/guava/src/com/google/common/collect/JdkBackedImmutableBiMap.java)/**
 * Implementation of ImmutableBiMap backed by a pair of JDK HashMaps, which have smartness
 * protecting against hash flooding.
 */
JdkBackedImmutableMap (/guava/src/com/google/common/collect/JdkBackedImmutableMap.java)/**
 * Implementation of ImmutableMap backed by a JDK HashMap, which has smartness protecting against
 * hash flooding.
 */
JdkBackedImmutableMultiset (/guava/src/com/google/common/collect/JdkBackedImmutableMultiset.java)/**
 * An implementation of ImmutableMultiset backed by a JDK Map and a list of entries. Used to protect
 * against hash flooding attacks.
 *
 * @author Louis Wasserman
 */
JdkBackedImmutableSet (/guava/src/com/google/common/collect/JdkBackedImmutableSet.java)/**
 * ImmutableSet implementation backed by a JDK HashSet, used to defend against apparent hash
 * flooding. This implementation is never used on the GWT client side, but it must be present there
 * for serialization to work.
 *
 * @author Louis Wasserman
 */
LexicographicalOrdering (/guava/src/com/google/common/collect/LexicographicalOrdering.java)/** An ordering which sorts iterables by comparing corresponding elements pairwise. */
ValueEntry (/guava/src/com/google/common/collect/LinkedHashMultimap.java)/**
   * LinkedHashMultimap entries are in no less than three coexisting linked lists: a bucket in the
   * hash table for a {@code Set<V>} associated with a key, the linked list of insertion-ordered
   * entries in that {@code Set<V>}, and the linked list of entries in the LinkedHashMultimap as a
   * whole.
   */
LinkedHashMultimap (/guava/src/com/google/common/collect/LinkedHashMultimap.java)/**
 * Implementation of {@code Multimap} that does not allow duplicate key-value entries and that
 * returns collections whose iterators follow the ordering in which the data was added to the
 * multimap.
 *
 * <p>The collections returned by {@code keySet}, {@code keys}, and {@code asMap} iterate through
 * the keys in the order they were first added to the multimap. Similarly, {@code get}, {@code
 * removeAll}, and {@code replaceValues} return collections that iterate through the values in the
 * order they were added. The collections generated by {@code entries} and {@code values} iterate
 * across the key-value mappings in the order they were added to the multimap.
 *
 * <p>The iteration ordering of the collections generated by {@code keySet}, {@code keys}, and
 * {@code asMap} has a few subtleties. As long as the set of keys remains unchanged, adding or
 * removing mappings does not affect the key iteration order. However, if you remove all values
 * associated with a key and then add the key back to the multimap, that key will come last in the
 * key iteration order.
 *
 * <p>The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an
 * existing key-value pair has no effect.
 *
 * <p>Keys and values may be null. All optional multimap methods are supported, and all returned
 * views are modifiable.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedSetMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0
 */
LinkedHashMultimapGwtSerializationDependencies (/guava/src/com/google/common/collect/LinkedHashMultimapGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element types of a {@link
 * LinkedHashMultimap}. The GWT supersource for this class contains a field for each type.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 */
LinkedHashMultiset (/guava/src/com/google/common/collect/LinkedHashMultiset.java)/**
 * A {@code Multiset} implementation with predictable iteration order. Its iterator orders elements
 * according to when the first occurrence of the element was added. When the multiset contains
 * multiple instances of an element, those instances are consecutive in the iteration order. If all
 * occurrences of an element are removed, after which that element is added to the multiset, the
 * element will appear at the end of the iteration.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @since 2.0
 */
NodeIterator (/guava/src/com/google/common/collect/LinkedListMultimap.java)/** An {@code Iterator} over all nodes. */
DistinctKeyIterator (/guava/src/com/google/common/collect/LinkedListMultimap.java)/** An {@code Iterator} over distinct keys in key head order. */
ValueForKeyIterator (/guava/src/com/google/common/collect/LinkedListMultimap.java)/** A {@code ListIterator} over values for a specified key. */
LinkedListMultimap (/guava/src/com/google/common/collect/LinkedListMultimap.java)/**
 * An implementation of {@code ListMultimap} that supports deterministic iteration order for both
 * keys and values. The iteration order is preserved across non-distinct key values. For example,
 * for the following multimap definition:
 *
 * <pre>{@code
 * Multimap<K, V> multimap = LinkedListMultimap.create();
 * multimap.put(key1, foo);
 * multimap.put(key2, bar);
 * multimap.put(key1, baz);
 * }</pre>
 *
 * ... the iteration order for {@link #keys()} is {@code [key1, key2, key1]}, and similarly for
 * {@link #entries()}. Unlike {@link LinkedHashMultimap}, the iteration order is kept consistent
 * between keys, entries and values. For example, calling:
 *
 * <pre>{@code
 * multimap.remove(key1, foo);
 * }</pre>
 *
 * <p>changes the entries iteration order to {@code [key2=bar, key1=baz]} and the key iteration
 * order to {@code [key2, key1]}. The {@link #entries()} iterator returns mutable map entries, and
 * {@link #replaceValues} attempts to preserve iteration order as much as possible.
 *
 * <p>The collections returned by {@link #keySet()} and {@link #asMap} iterate through the keys in
 * the order they were first added to the multimap. Similarly, {@link #get}, {@link #removeAll}, and
 * {@link #replaceValues} return collections that iterate through the values in the order they were
 * added. The collections generated by {@link #entries()}, {@link #keys()}, and {@link #values}
 * iterate across the key-value mappings in the order they were added to the multimap.
 *
 * <p>The {@link #values()} and {@link #entries()} methods both return a {@code List}, instead of
 * the {@code Collection} specified by the {@link ListMultimap} interface.
 *
 * <p>The methods {@link #get}, {@link #keySet()}, {@link #keys()}, {@link #values}, {@link
 * #entries()}, and {@link #asMap} return collections that are views of the multimap. If the
 * multimap is modified while an iteration over any of those collections is in progress, except
 * through the iterator's methods, the results of the iteration are undefined.
 *
 * <p>Keys and values may be null. All optional multimap methods are supported, and all returned
 * views are modifiable.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedListMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Mike Bostock
 * @since 2.0
 */
ListMultimap (/guava/src/com/google/common/collect/ListMultimap.java)/**
 * A {@code Multimap} that can hold duplicate key-value pairs and that maintains the insertion
 * ordering of values for a given key. See the {@link Multimap} documentation for information common
 * to all multimaps.
 *
 * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods each return a {@link
 * List} of values. Though the method signature doesn't say so explicitly, the map returned by
 * {@link #asMap} has {@code List} values.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
OnePlusArrayList (/guava/src/com/google/common/collect/Lists.java)/** @see Lists#asList(Object, Object[]) */
TwoPlusArrayList (/guava/src/com/google/common/collect/Lists.java)/** @see Lists#asList(Object, Object, Object[]) */
TransformingSequentialList (/guava/src/com/google/common/collect/Lists.java)/**
   * Implementation of a sequential transforming list.
   *
   * @see Lists#transform
   */
TransformingRandomAccessList (/guava/src/com/google/common/collect/Lists.java)/**
   * Implementation of a transforming random access list. We try to make as many of these methods
   * pass-through to the source list as possible so that the performance characteristics of the
   * source list and transformed list are similar.
   *
   * @see Lists#transform
   */
Lists (/guava/src/com/google/common/collect/Lists.java)/**
 * Static utility methods pertaining to {@link List} instances. Also see this class's counterparts
 * {@link Sets}, {@link Maps} and {@link Queues}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#lists"> {@code Lists}</a>.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
ValueDifference (/guava/src/com/google/common/collect/MapDifference.java)/**
   * A difference between the mappings from two maps with the same key. The {@link #leftValue} and
   * {@link #rightValue} are not equal, and one but not both of them may be null.
   *
   * @since 2.0
   */
MapDifference (/guava/src/com/google/common/collect/MapDifference.java)/**
 * An object representing the differences between two maps.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
MapMaker (/guava/src/com/google/common/collect/MapMaker.java)/**
 * A builder of {@link ConcurrentMap} instances that can have keys or values automatically wrapped
 * in {@linkplain WeakReference weak} references.
 *
 * <p>Usage example:
 *
 * <pre>{@code
 * ConcurrentMap<Request, Stopwatch> timers = new MapMaker()
 *     .concurrencyLevel(4)
 *     .weakKeys()
 *     .makeMap();
 * }</pre>
 *
 * <p>These features are all optional; {@code new MapMaker().makeMap()} returns a valid concurrent
 * map that behaves similarly to a {@link ConcurrentHashMap}.
 *
 * <p>The returned map is implemented as a hash table with similar performance characteristics to
 * {@link ConcurrentHashMap}. It supports all optional operations of the {@code ConcurrentMap}
 * interface. It does not permit null keys or values.
 *
 * <p><b>Note:</b> by default, the returned map uses equality comparisons (the {@link Object#equals
 * equals} method) to determine equality for keys or values. However, if {@link #weakKeys} was
 * specified, the map uses identity ({@code ==}) comparisons instead for keys. Likewise, if {@link
 * #weakValues} was specified, the map uses identity comparisons for values.
 *
 * <p>The view collections of the returned map have <i>weakly consistent iterators</i>. This means
 * that they are safe for concurrent use, but if other threads modify the map after the iterator is
 * created, it is undefined which of these changes, if any, are reflected in that iterator. These
 * iterators never throw {@link ConcurrentModificationException}.
 *
 * <p>If {@link #weakKeys} or {@link #weakValues} are requested, it is possible for a key or value
 * present in the map to be reclaimed by the garbage collector. Entries with reclaimed keys or
 * values may be removed from the map on each map modification or on occasional map accesses; such
 * entries may be counted by {@link Map#size}, but will never be visible to read or write
 * operations. A partially-reclaimed entry is never exposed to the user. Any {@link java.util.Entry}
 * instance retrieved from the map's {@linkplain Map#entrySet entry set} is a snapshot of that
 * entry's state at the time of retrieval; such entries do, however, support {@link
 * java.util.Entry#setValue}, which simply calls {@link Map#put} on the entry's key.
 *
 * <p>The maps produced by {@code MapMaker} are serializable, and the deserialized maps retain all
 * the configuration properties of the original map. During deserialization, if the original map had
 * used weak references, the entries are reconstructed as they were, but it's not unlikely they'll
 * be quickly garbage-collected before they are ever accessed.
 *
 * <p>{@code new MapMaker().weakKeys().makeMap()} is a recommended replacement for {@link
 * java.util.WeakHashMap}, but note that it compares keys using object identity whereas {@code
 * WeakHashMap} uses {@link Object#equals}.
 *
 * @author Bob Lee
 * @author Charles Fry
 * @author Kevin Bourrillion
 * @since 2.0
 */
InternalEntryHelper (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * A helper object for operating on {@link InternalEntry} instances in a type-safe and efficient
   * manner.
   *
   * <p>For each of the four combinations of strong/weak key and strong/weak value, there are
   * corresponding {@link InternalEntry}, {@link Segment}, and {@link InternalEntryHelper}
   * implementations.
   *
   * @param <K> the type of the key in each entry
   * @param <V> the type of the value in each entry
   * @param <E> the type of the {@link InternalEntry} entry implementation
   * @param <S> the type of the {@link Segment} entry implementation
   */
InternalEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * An entry in a hash table of a {@link Segment}.
   *
   * <p>Entries in the map can be in the following states:
   *
   * <p>Valid: - Live: valid key/value are set
   *
   * <p>Invalid: - Collected: key/value was partially collected, but not yet cleaned up
   */
AbstractStrongKeyEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Base class for {@link InternalEntry} implementations for strong keys. */
StrongValueEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Marker interface for {@link InternalEntry} implementations for strong values. */
WeakValueEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Marker interface for {@link InternalEntry} implementations for weak values. */
Helper (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntryHelper} for strong keys and strong values. */
StrongKeyStrongValueEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for strong keys and strong values. */
Helper (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntryHelper} for strong keys and weak values. */
StrongKeyWeakValueEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for strong keys and weak values. */
Helper (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
     * Concrete implementation of {@link InternalEntryHelper} for strong keys and {@link Dummy}
     * values.
     */
StrongKeyDummyValueEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for strong keys and {@link Dummy} values. */
AbstractWeakKeyEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Base class for {@link InternalEntry} implementations for weak keys. */
Helper (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
     * Concrete implementation of {@link InternalEntryHelper} for weak keys and {@link Dummy}
     * values.
     */
WeakKeyDummyValueEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for weak keys and {@link Dummy} values. */
Helper (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntryHelper} for weak keys and strong values. */
WeakKeyStrongValueEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for weak keys and strong values. */
Helper (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntryHelper} for weak keys and weak values. */
WeakKeyWeakValueEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link InternalEntry} for weak keys and weak values. */
WeakValueReference (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** A weakly referenced value that also has a reference to its containing entry. */
DummyInternalEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * A dummy implementation of {@link InternalEntry}, solely for use in the type signature of {@link
   * #UNSET_WEAK_VALUE_REFERENCE} below.
   */
WeakValueReferenceImpl (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link WeakValueReference}. */
Segment (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * Segments are specialized versions of hash tables. This subclass inherits from ReentrantLock
   * opportunistically, just to simplify some locking and avoid separate construction.
   */
StrongKeyStrongValueSegment (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for strong keys and strong values. */
StrongKeyWeakValueSegment (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for strong keys and weak values. */
StrongKeyDummyValueSegment (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for strong keys and {@link Dummy} values. */
WeakKeyStrongValueSegment (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for weak keys and strong values. */
WeakKeyWeakValueSegment (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for weak keys and weak values. */
WeakKeyDummyValueSegment (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/** Concrete implementation of {@link Segment} for weak keys and {@link Dummy} values. */
WriteThroughEntry (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * Custom Entry class used by EntryIterator.next(), that relays setValue changes to the underlying
   * map.
   */
AbstractSerializationProxy (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * The actual object that gets serialized. Unfortunately, readResolve() doesn't get called when a
   * circular dependency is present, so the proxy must be able to behave as the map itself.
   */
SerializationProxy (/guava/src/com/google/common/collect/MapMakerInternalMap.java)/**
   * The actual object that gets serialized. Unfortunately, readResolve() doesn't get called when a
   * circular dependency is present, so the proxy must be able to behave as the map itself.
   */
UnmodifiableEntries (/guava/src/com/google/common/collect/Maps.java)/** @see Multimaps#unmodifiableEntries */
UnmodifiableEntrySet (/guava/src/com/google/common/collect/Maps.java)/** @see Maps#unmodifiableEntrySet(Set) */
UnmodifiableBiMap (/guava/src/com/google/common/collect/Maps.java)/** @see Maps#unmodifiableBiMap(BiMap) */
EntryTransformer (/guava/src/com/google/common/collect/Maps.java)/**
   * A transformation of the value of a key-value pair, using both key and value as inputs. To apply
   * the transformation to a map, use {@link Maps#transformEntries(Map, EntryTransformer)}.
   *
   * @param <K> the key type of the input and output entries
   * @param <V1> the value type of the input entry
   * @param <V2> the value type of the output entry
   * @since 7.0
   */
ViewCachingAbstractMap (/guava/src/com/google/common/collect/Maps.java)/**
   * {@code AbstractMap} extension that makes it easy to cache customized keySet, values, and
   * entrySet views.
   */
Maps (/guava/src/com/google/common/collect/Maps.java)/**
 * Static utility methods pertaining to {@link Map} instances (including instances of {@link
 * SortedMap}, {@link BiMap}, etc.). Also see this class's counterparts {@link Lists}, {@link Sets}
 * and {@link Queues}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#maps"> {@code Maps}</a>.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Isaac Shum
 * @author Louis Wasserman
 * @since 2.0
 */
Builder (/guava/src/com/google/common/collect/MinMaxPriorityQueue.java)/**
   * The builder class used in creation of min-max priority queues. Instead of constructing one
   * directly, use {@link MinMaxPriorityQueue#orderedBy(Comparator)}, {@link
   * MinMaxPriorityQueue#expectedSize(int)} or {@link MinMaxPriorityQueue#maximumSize(int)}.
   *
   * @param <B> the upper bound on the eventual type that can be produced by this builder (for
   *     example, a {@code Builder<Number>} can produce a {@code Queue<Number>} or {@code
   *     Queue<Integer>} but not a {@code Queue<Object>}).
   * @since 8.0
   */
Heap (/guava/src/com/google/common/collect/MinMaxPriorityQueue.java)/**
   * Each instance of MinMaxPriortyQueue encapsulates two instances of Heap: a min-heap and a
   * max-heap. Conceptually, these might each have their own array for storage, but for efficiency's
   * sake they are stored interleaved on alternate heap levels in the same array (MMPQ.queue).
   */
QueueIterator (/guava/src/com/google/common/collect/MinMaxPriorityQueue.java)/**
   * Iterates the elements of the queue in no particular order.
   *
   * <p>If the underlying queue is modified during iteration an exception will be thrown.
   */
MinMaxPriorityQueue (/guava/src/com/google/common/collect/MinMaxPriorityQueue.java)/**
 * A double-ended priority queue, which provides constant-time access to both its least element and
 * its greatest element, as determined by the queue's specified comparator. If no comparator is
 * given at creation time, the natural order of elements is used. If no maximum size is given at
 * creation time, the queue is unbounded.
 *
 * <p>Usage example:
 *
 * <pre>{@code
 * MinMaxPriorityQueue<User> users = MinMaxPriorityQueue.orderedBy(userComparator)
 *     .maximumSize(1000)
 *     .create();
 * }</pre>
 *
 * <p>As a {@link Queue} it functions exactly as a {@link PriorityQueue}: its head element -- the
 * implicit target of the methods {@link #peek()}, {@link #poll()} and {@link #remove()} -- is
 * defined as the <i>least</i> element in the queue according to the queue's comparator. But unlike
 * a regular priority queue, the methods {@link #peekLast}, {@link #pollLast} and {@link
 * #removeLast} are also provided, to act on the <i>greatest</i> element in the queue instead.
 *
 * <p>A min-max priority queue can be configured with a maximum size. If so, each time the size of
 * the queue exceeds that value, the queue automatically removes its greatest element according to
 * its comparator (which might be the element that was just added). This is different from
 * conventional bounded queues, which either block or reject new elements when full.
 *
 * <p>This implementation is based on the <a
 * href="http://portal.acm.org/citation.cfm?id=6621">min-max heap</a> developed by Atkinson, et al.
 * Unlike many other double-ended priority queues, it stores elements in a single array, as compact
 * as the traditional heap data structure used in {@link PriorityQueue}.
 *
 * <p>This class is not thread-safe, and does not accept null elements.
 *
 * <p><i>Performance notes:</i>
 *
 * <ul>
 *   <li>If you only access one end of the queue, and do use a maximum size, this class will perform
 *       significantly worse than a {@code PriorityQueue} with manual eviction above the maximum
 *       size. In many cases {@link Ordering#leastOf} may work for your use case with significantly
 *       improved (and asymptotically superior) performance.
 *   <li>The retrieval operations {@link #peek}, {@link #peekFirst}, {@link #peekLast}, {@link
 *       #element}, and {@link #size} are constant-time.
 *   <li>The enqueuing and dequeuing operations ({@link #offer}, {@link #add}, and all the forms of
 *       {@link #poll} and {@link #remove()}) run in {@code O(log n) time}.
 *   <li>The {@link #remove(Object)} and {@link #contains} operations require linear ({@code O(n)})
 *       time.
 *   <li>If you only access one end of the queue, and don't use a maximum size, this class is
 *       functionally equivalent to {@link PriorityQueue}, but significantly slower.
 * </ul>
 *
 * @author Sverre Sundsdal
 * @author Torbjorn Gannholm
 * @since 8.0
 */
ToOptionalState (/guava/src/com/google/common/collect/MoreCollectors.java)/**
   * This atrocity is here to let us report several of the elements in the stream if there were more
   * than one, not just two.
   */
MoreCollectors (/guava/src/com/google/common/collect/MoreCollectors.java)/**
 * Collectors not present in {@code java.util.stream.Collectors} that are not otherwise associated
 * with a {@code com.google.common} type.
 *
 * @author Louis Wasserman
 * @since 21.0
 */
Multimap (/guava/src/com/google/common/collect/Multimap.java)/**
 * A collection that maps keys to values, similar to {@link Map}, but in which each key may be
 * associated with <i>multiple</i> values. You can visualize the contents of a multimap either as a
 * map from keys to <i>nonempty</i> collections of values:
 *
 * <ul>
 *   <li>a → 1, 2
 *   <li>b → 3
 * </ul>
 *
 * ... or as a single "flattened" collection of key-value pairs:
 *
 * <ul>
 *   <li>a → 1
 *   <li>a → 2
 *   <li>b → 3
 * </ul>
 *
 * <p><b>Important:</b> although the first interpretation resembles how most multimaps are
 * <i>implemented</i>, the design of the {@code Multimap} API is based on the <i>second</i> form.
 * So, using the multimap shown above as an example, the {@link #size} is {@code 3}, not {@code 2},
 * and the {@link #values} collection is {@code [1, 2, 3]}, not {@code [[1, 2], [3]]}. For those
 * times when the first style is more useful, use the multimap's {@link #asMap} view (or create a
 * {@code Map<K, Collection<V>>} in the first place).
 *
 * <h3>Example</h3>
 *
 * <p>The following code:
 *
 * <pre>{@code
 * ListMultimap<String, String> multimap = ArrayListMultimap.create();
 * for (President pres : US_PRESIDENTS_IN_ORDER) {
 *   multimap.put(pres.firstName(), pres.lastName());
 * }
 * for (String firstName : multimap.keySet()) {
 *   List<String> lastNames = multimap.get(firstName);
 *   out.println(firstName + ": " + lastNames);
 * }
 * }</pre>
 *
 * ... produces output such as:
 *
 * <pre>{@code
 * Zachary: [Taylor]
 * John: [Adams, Adams, Tyler, Kennedy]  // Remember, Quincy!
 * George: [Washington, Bush, Bush]
 * Grover: [Cleveland, Cleveland]        // Two, non-consecutive terms, rep'ing NJ!
 * ...
 * }</pre>
 *
 * <h3>Views</h3>
 *
 * <p>Much of the power of the multimap API comes from the <i>view collections</i> it provides.
 * These always reflect the latest state of the multimap itself. When they support modification, the
 * changes are <i>write-through</i> (they automatically update the backing multimap). These view
 * collections are:
 *
 * <ul>
 *   <li>{@link #asMap}, mentioned above
 *   <li>{@link #keys}, {@link #keySet}, {@link #values}, {@link #entries}, which are similar to the
 *       corresponding view collections of {@link Map}
 *   <li>and, notably, even the collection returned by {@link #get get(key)} is an active view of
 *       the values corresponding to {@code key}
 * </ul>
 *
 * <p>The collections returned by the {@link #replaceValues replaceValues} and {@link #removeAll
 * removeAll} methods, which contain values that have just been removed from the multimap, are
 * naturally <i>not</i> views.
 *
 * <h3>Subinterfaces</h3>
 *
 * <p>Instead of using the {@code Multimap} interface directly, prefer the subinterfaces {@link
 * ListMultimap} and {@link SetMultimap}. These take their names from the fact that the collections
 * they return from {@code get} behave like (and, of course, implement) {@link List} and {@link
 * Set}, respectively.
 *
 * <p>For example, the "presidents" code snippet above used a {@code ListMultimap}; if it had used a
 * {@code SetMultimap} instead, two presidents would have vanished, and last names might or might
 * not appear in chronological order.
 *
 * <p><b>Warning:</b> instances of type {@code Multimap} may not implement {@link Object#equals} in
 * the way you expect. Multimaps containing the same key-value pairs, even in the same order, may or
 * may not be equal and may or may not have the same {@code hashCode}. The recommended subinterfaces
 * provide much stronger guarantees.
 *
 * <h3>Comparison to a map of collections</h3>
 *
 * <p>Multimaps are commonly used in places where a {@code Map<K, Collection<V>>} would otherwise
 * have appeared. The differences include:
 *
 * <ul>
 *   <li>There is no need to populate an empty collection before adding an entry with {@link #put
 *       put}.
 *   <li>{@code get} never returns {@code null}, only an empty collection.
 *   <li>A key is contained in the multimap if and only if it maps to at least one value. Any
 *       operation that causes a key to have zero associated values has the effect of
 *       <i>removing</i> that key from the multimap.
 *   <li>The total entry count is available as {@link #size}.
 *   <li>Many complex operations become easier; for example, {@code
 *       Collections.min(multimap.values())} finds the smallest value across all keys.
 * </ul>
 *
 * <h3>Implementations</h3>
 *
 * <p>As always, prefer the immutable implementations, {@link ImmutableListMultimap} and {@link
 * ImmutableSetMultimap}. General-purpose mutable implementations are listed above under "All Known
 * Implementing Classes". You can also create a <i>custom</i> multimap, backed by any {@code Map}
 * and {@link Collection} types, using the {@link Multimaps#newMultimap Multimaps.newMultimap}
 * family of methods. Finally, another popular way to obtain a multimap is using {@link
 * Multimaps#index Multimaps.index}. See the {@link Multimaps} class for these and other static
 * utilities related to multimaps.
 *
 * <h3>Other Notes</h3>
 *
 * <p>As with {@code Map}, the behavior of a {@code Multimap} is not specified if key objects
 * already present in the multimap change in a manner that affects {@code equals} comparisons. Use
 * caution if mutable objects are used as keys in a {@code Multimap}.
 *
 * <p>All methods that modify the multimap are optional. The view collections returned by the
 * multimap may or may not be modifiable. Any modification method that is not supported will throw
 * {@link UnsupportedOperationException}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
MultimapBuilderWithKeys (/guava/src/com/google/common/collect/MultimapBuilder.java)/**
   * An intermediate stage in a {@link MultimapBuilder} in which the key-value collection map
   * implementation has been specified, but the value collection implementation has not.
   *
   * @param <K0> The upper bound on the key type of the generated multimap.
   * @since 16.0
   */
ListMultimapBuilder (/guava/src/com/google/common/collect/MultimapBuilder.java)/**
   * A specialization of {@link MultimapBuilder} that generates {@link ListMultimap} instances.
   *
   * @since 16.0
   */
SetMultimapBuilder (/guava/src/com/google/common/collect/MultimapBuilder.java)/**
   * A specialization of {@link MultimapBuilder} that generates {@link SetMultimap} instances.
   *
   * @since 16.0
   */
SortedSetMultimapBuilder (/guava/src/com/google/common/collect/MultimapBuilder.java)/**
   * A specialization of {@link MultimapBuilder} that generates {@link SortedSetMultimap} instances.
   *
   * @since 16.0
   */
MultimapBuilder (/guava/src/com/google/common/collect/MultimapBuilder.java)/**
 * A builder for a multimap implementation that allows customization of the backing map and value
 * collection implementations used in a particular multimap.
 *
 * <p>This can be used to easily configure multimap data structure implementations not provided
 * explicitly in {@code com.google.common.collect}, for example:
 *
 * <pre>{@code
 * ListMultimap<String, Integer> treeListMultimap =
 *     MultimapBuilder.treeKeys().arrayListValues().build();
 * SetMultimap<Integer, MyEnum> hashEnumMultimap =
 *     MultimapBuilder.hashKeys().enumSetValues(MyEnum.class).build();
 * }</pre>
 *
 * <p>{@code MultimapBuilder} instances are immutable. Invoking a configuration method has no effect
 * on the receiving instance; you must store and use the new builder instance it returns instead.
 *
 * <p>The generated multimaps are serializable if the key and value types are serializable, unless
 * stated otherwise in one of the configuration methods.
 *
 * @author Louis Wasserman
 * @param <K0> An upper bound on the key type of the generated multimap.
 * @param <V0> An upper bound on the value type of the generated multimap.
 * @since 16.0
 */
MapMultimap (/guava/src/com/google/common/collect/Multimaps.java)/** @see Multimaps#forMap */
Entries (/guava/src/com/google/common/collect/Multimaps.java)/** A skeleton implementation of {@link Multimap#entries()}. */
AsMap (/guava/src/com/google/common/collect/Multimaps.java)/** A skeleton implementation of {@link Multimap#asMap()}. */
Multimaps (/guava/src/com/google/common/collect/Multimaps.java)/**
 * Provides static methods acting on or generating a {@code Multimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#multimaps"> {@code
 * Multimaps}</a>.
 *
 * @author Jared Levy
 * @author Robert Konigsberg
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
Entry (/guava/src/com/google/common/collect/Multiset.java)/**
   * An unmodifiable element-count pair for a multiset. The {@link Multiset#entrySet} method returns
   * a view of the multiset whose elements are of this class. A multiset implementation may return
   * Entry instances that are either live "read-through" views to the Multiset, or immutable
   * snapshots. Note that this type is unrelated to the similarly-named type {@code Map.Entry}.
   *
   * @since 2.0
   */
Multiset (/guava/src/com/google/common/collect/Multiset.java)/**
 * A collection that supports order-independent equality, like {@link Set}, but may have duplicate
 * elements. A multiset is also sometimes called a <i>bag</i>.
 *
 * <p>Elements of a multiset that are equal to one another are referred to as <i>occurrences</i> of
 * the same single element. The total number of occurrences of an element in a multiset is called
 * the <i>count</i> of that element (the terms "frequency" and "multiplicity" are equivalent, but
 * not used in this API). Since the count of an element is represented as an {@code int}, a multiset
 * may never contain more than {@link Integer#MAX_VALUE} occurrences of any one element.
 *
 * <p>{@code Multiset} refines the specifications of several methods from {@code Collection}. It
 * also defines an additional query operation, {@link #count}, which returns the count of an
 * element. There are five new bulk-modification operations, for example {@link #add(Object, int)},
 * to add or remove multiple occurrences of an element at once, or to set the count of an element to
 * a specific value. These modification operations are optional, but implementations which support
 * the standard collection operations {@link #add(Object)} or {@link #remove(Object)} are encouraged
 * to implement the related methods as well. Finally, two collection views are provided: {@link
 * #elementSet} contains the distinct elements of the multiset "with duplicates collapsed", and
 * {@link #entrySet} is similar but contains {@link Entry Multiset.Entry} instances, each providing
 * both a distinct element and the count of that element.
 *
 * <p>In addition to these required methods, implementations of {@code Multiset} are expected to
 * provide two {@code static} creation methods: {@code create()}, returning an empty multiset, and
 * {@code create(Iterable<? extends E>)}, returning a multiset containing the given initial
 * elements. This is simply a refinement of {@code Collection}'s constructor recommendations,
 * reflecting the new developments of Java 5.
 *
 * <p>As with other collection types, the modification operations are optional, and should throw
 * {@link UnsupportedOperationException} when they are not implemented. Most implementations should
 * support either all add operations or none of them, all removal operations or none of them, and if
 * and only if all of these are supported, the {@code setCount} methods as well.
 *
 * <p>A multiset uses {@link Object#equals} to determine whether two instances should be considered
 * "the same," <i>unless specified otherwise</i> by the implementation.
 *
 * <p>Common implementations include {@link ImmutableMultiset}, {@link HashMultiset}, and {@link
 * ConcurrentHashMultiset}.
 *
 * <p>If your values may be zero, negative, or outside the range of an int, you may wish to use
 * {@link com.google.common.util.concurrent.AtomicLongMap} instead. Note, however, that unlike
 * {@code Multiset}, {@code AtomicLongMap} does not automatically remove zeros.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
AbstractEntry (/guava/src/com/google/common/collect/Multisets.java)/**
   * Implementation of the {@code equals}, {@code hashCode}, and {@code toString} methods of {@link
   * Multiset.Entry}.
   */
ViewMultiset (/guava/src/com/google/common/collect/Multisets.java)/**
   * An {@link AbstractMultiset} with additional default implementations, some of them linear-time
   * implementations in terms of {@code elementSet} and {@code entrySet}.
   */
Multisets (/guava/src/com/google/common/collect/Multisets.java)/**
 * Provides static utility methods for creating and working with {@link Multiset} instances.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#multisets"> {@code
 * Multisets}</a>.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Louis Wasserman
 * @since 2.0
 */
SerializedForm (/guava/src/com/google/common/collect/MutableClassToInstanceMap.java)/** Serialized form of the map, to avoid serializing the constraint. */
MutableClassToInstanceMap (/guava/src/com/google/common/collect/MutableClassToInstanceMap.java)/**
 * A mutable class-to-instance map backed by an arbitrary user-provided map. See also {@link
 * ImmutableClassToInstanceMap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#classtoinstancemap"> {@code
 * ClassToInstanceMap}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
NaturalOrdering (/guava/src/com/google/common/collect/NaturalOrdering.java)/** An ordering that uses the natural order of the values. */
NullsFirstOrdering (/guava/src/com/google/common/collect/NullsFirstOrdering.java)/** An ordering that treats {@code null} as less than all other values. */
NullsLastOrdering (/guava/src/com/google/common/collect/NullsLastOrdering.java)/** An ordering that treats {@code null} as greater than all other values. */
ObjectArrays (/guava/src/com/google/common/collect/ObjectArrays.java)/**
 * Static utility methods pertaining to object arrays.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */
IncomparableValueException (/guava/src/com/google/common/collect/Ordering.java)/**
   * Exception thrown by a {@link Ordering#explicit(List)} or {@link Ordering#explicit(Object,
   * Object[])} comparator when comparing a value outside the set of values it can compare.
   * Extending {@link ClassCastException} may seem odd, but it is required.
   */
Ordering (/guava/src/com/google/common/collect/Ordering.java)/**
 * A comparator, with additional methods to support common operations. This is an "enriched" version
 * of {@code Comparator} for pre-Java-8 users, in the same sense that {@link FluentIterable} is an
 * enriched {@link Iterable} for pre-Java-8 users.
 *
 * <h3>Three types of methods</h3>
 *
 * Like other fluent types, there are three types of methods present: methods for <i>acquiring</i>,
 * <i>chaining</i>, and <i>using</i>.
 *
 * <h4>Acquiring</h4>
 *
 * <p>The common ways to get an instance of {@code Ordering} are:
 *
 * <ul>
 *   <li>Subclass it and implement {@link #compare} instead of implementing {@link Comparator}
 *       directly
 *   <li>Pass a <i>pre-existing</i> {@link Comparator} instance to {@link #from(Comparator)}
 *   <li>Use the natural ordering, {@link Ordering#natural}
 * </ul>
 *
 * <h4>Chaining</h4>
 *
 * <p>Then you can use the <i>chaining</i> methods to get an altered version of that {@code
 * Ordering}, including:
 *
 * <ul>
 *   <li>{@link #reverse}
 *   <li>{@link #compound(Comparator)}
 *   <li>{@link #onResultOf(Function)}
 *   <li>{@link #nullsFirst} / {@link #nullsLast}
 * </ul>
 *
 * <h4>Using</h4>
 *
 * <p>Finally, use the resulting {@code Ordering} anywhere a {@link Comparator} is required, or use
 * any of its special operations, such as:
 *
 * <ul>
 *   <li>{@link #immutableSortedCopy}
 *   <li>{@link #isOrdered} / {@link #isStrictlyOrdered}
 *   <li>{@link #min} / {@link #max}
 * </ul>
 *
 * <h3>Understanding complex orderings</h3>
 *
 * <p>Complex chained orderings like the following example can be challenging to understand.
 *
 * <pre>{@code
 * Ordering<Foo> ordering =
 *     Ordering.natural()
 *         .nullsFirst()
 *         .onResultOf(getBarFunction)
 *         .nullsLast();
 * }</pre>
 *
 * Note that each chaining method returns a new ordering instance which is backed by the previous
 * instance, but has the chance to act on values <i>before</i> handing off to that backing instance.
 * As a result, it usually helps to read chained ordering expressions <i>backwards</i>. For example,
 * when {@code compare} is called on the above ordering:
 *
 * <ol>
 *   <li>First, if only one {@code Foo} is null, that null value is treated as <i>greater</i>
 *   <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be
 *       comparing {@code Bar} values from now on)
 *   <li>Next, if only one {@code Bar} is null, that null value is treated as <i>lesser</i>
 *   <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is
 *       returned)
 * </ol>
 *
 * <p>Alas, {@link #reverse} is a little different. As you read backwards through a chain and
 * encounter a call to {@code reverse}, continue working backwards until a result is determined, and
 * then reverse that result.
 *
 * <h3>Additional notes</h3>
 *
 * <p>Except as noted, the orderings returned by the factory methods of this class are serializable
 * if and only if the provided instances that back them are. For example, if {@code ordering} and
 * {@code function} can themselves be serialized, then {@code ordering.onResultOf(function)} can as
 * well.
 *
 * <h3>For Java 8 users</h3>
 *
 * <p>If you are using Java 8, this class is now obsolete. Most of its functionality is now provided
 * by {@link java.util.stream.Stream Stream} and by {@link Comparator} itself, and the rest can now
 * be found as static methods in our new {@link Comparators} class. See each method below for
 * further instructions. Whenever possible, you should change any references of type {@code
 * Ordering} to be of type {@code Comparator} instead. However, at this time we have no plan to
 * <i>deprecate</i> this class.
 *
 * <p>Many replacements involve adopting {@code Stream}, and these changes can sometimes make your
 * code verbose. Whenever following this advice, you should check whether {@code Stream} could be
 * adopted more comprehensively in your code; the end result may be quite a bit simpler.
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/OrderingExplained">{@code Ordering}</a>.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 * @since 2.0
 */
PeekingIterator (/guava/src/com/google/common/collect/PeekingIterator.java)/**
 * An iterator that supports a one-element lookahead while iterating.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionHelpersExplained#peekingiterator"> {@code
 * PeekingIterator}</a>.
 *
 * @author Mick Killianey
 * @since 2.0
 */
Platform (/guava/src/com/google/common/collect/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * @author Hayward Chan
 */
Queues (/guava/src/com/google/common/collect/Queues.java)/**
 * Static utility methods pertaining to {@link Queue} and {@link Deque} instances. Also see this
 * class's counterparts {@link Lists}, {@link Sets}, and {@link Maps}.
 *
 * @author Kurt Alfred Kluever
 * @since 11.0
 */
RangeLexOrdering (/guava/src/com/google/common/collect/Range.java)/** Needed to serialize sorted collections of Ranges. */
Range (/guava/src/com/google/common/collect/Range.java)/**
 * A range (or "interval") defines the <i>boundaries</i> around a contiguous span of values of some
 * {@code Comparable} type; for example, "integers from 1 to 100 inclusive." Note that it is not
 * possible to <i>iterate</i> over these contained values. To do so, pass this range instance and an
 * appropriate {@link DiscreteDomain} to {@link ContiguousSet#create}.
 *
 * <h3>Types of ranges</h3>
 *
 * <p>Each end of the range may be bounded or unbounded. If bounded, there is an associated
 * <i>endpoint</i> value, and the range is considered to be either <i>open</i> (does not include the
 * endpoint) or <i>closed</i> (includes the endpoint) on that side. With three possibilities on each
 * side, this yields nine basic types of ranges, enumerated below. (Notation: a square bracket
 * ({@code [ ]}) indicates that the range is closed on that side; a parenthesis ({@code ( )}) means
 * it is either open or unbounded. The construct {@code {x | statement}} is read "the set of all
 * <i>x</i> such that <i>statement</i>.")
 *
 * <blockquote>
 *
 * <table>
 * <caption>Range Types</caption>
 * <tr><th>Notation        <th>Definition               <th>Factory method
 * <tr><td>{@code (a..b)}  <td>{@code {x | a < x < b}}  <td>{@link Range#open open}
 * <tr><td>{@code [a..b]}  <td>{@code {x | a <= x <= b}}<td>{@link Range#closed closed}
 * <tr><td>{@code (a..b]}  <td>{@code {x | a < x <= b}} <td>{@link Range#openClosed openClosed}
 * <tr><td>{@code [a..b)}  <td>{@code {x | a <= x < b}} <td>{@link Range#closedOpen closedOpen}
 * <tr><td>{@code (a..+∞)} <td>{@code {x | x > a}}      <td>{@link Range#greaterThan greaterThan}
 * <tr><td>{@code [a..+∞)} <td>{@code {x | x >= a}}     <td>{@link Range#atLeast atLeast}
 * <tr><td>{@code (-∞..b)} <td>{@code {x | x < b}}      <td>{@link Range#lessThan lessThan}
 * <tr><td>{@code (-∞..b]} <td>{@code {x | x <= b}}     <td>{@link Range#atMost atMost}
 * <tr><td>{@code (-∞..+∞)}<td>{@code {x}}              <td>{@link Range#all all}
 * </table>
 *
 * </blockquote>
 *
 * <p>When both endpoints exist, the upper endpoint may not be less than the lower. The endpoints
 * may be equal only if at least one of the bounds is closed:
 *
 * <ul>
 *   <li>{@code [a..a]} : a singleton range
 *   <li>{@code [a..a); (a..a]} : {@linkplain #isEmpty empty} ranges; also valid
 *   <li>{@code (a..a)} : <b>invalid</b>; an exception will be thrown
 * </ul>
 *
 * <h3>Warnings</h3>
 *
 * <ul>
 *   <li>Use immutable value types only, if at all possible. If you must use a mutable type, <b>do
 *       not</b> allow the endpoint instances to mutate after the range is created!
 *   <li>Your value type's comparison method should be {@linkplain Comparable consistent with
 *       equals} if at all possible. Otherwise, be aware that concepts used throughout this
 *       documentation such as "equal", "same", "unique" and so on actually refer to whether {@link
 *       Comparable#compareTo compareTo} returns zero, not whether {@link Object#equals equals}
 *       returns {@code true}.
 *   <li>A class which implements {@code Comparable<UnrelatedType>} is very broken, and will cause
 *       undefined horrible things to happen in {@code Range}. For now, the Range API does not
 *       prevent its use, because this would also rule out all ungenerified (pre-JDK1.5) data types.
 *       <b>This may change in the future.</b>
 * </ul>
 *
 * <h3>Other notes</h3>
 *
 * <ul>
 *   <li>Instances of this type are obtained using the static factory methods in this class.
 *   <li>Ranges are <i>convex</i>: whenever two values are contained, all values in between them
 *       must also be contained. More formally, for any {@code c1 <= c2 <= c3} of type {@code C},
 *       {@code r.contains(c1) && r.contains(c3)} implies {@code r.contains(c2)}). This means that a
 *       {@code Range<Integer>} can never be used to represent, say, "all <i>prime</i> numbers from
 *       1 to 100."
 *   <li>When evaluated as a {@link Predicate}, a range yields the same result as invoking {@link
 *       #contains}.
 *   <li>Terminology note: a range {@code a} is said to be the <i>maximal</i> range having property
 *       <i>P</i> if, for all ranges {@code b} also having property <i>P</i>, {@code a.encloses(b)}.
 *       Likewise, {@code a} is <i>minimal</i> when {@code b.encloses(a)} for all {@code b} having
 *       property <i>P</i>. See, for example, the definition of {@link #intersection intersection}.
 * </ul>
 *
 * <h3>Further reading</h3>
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/RangesExplained">{@code Range}</a>.
 *
 * @author Kevin Bourrillion
 * @author Gregory Kick
 * @since 10.0
 */
RangeGwtSerializationDependencies (/guava/src/com/google/common/collect/RangeGwtSerializationDependencies.java)/**
 * A dummy superclass to support GWT serialization of the element type of a {@link Range}. The GWT
 * supersource for this class contains a field of type {@code C}.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.
 */
RangeMap (/guava/src/com/google/common/collect/RangeMap.java)/**
 * A mapping from disjoint nonempty ranges to non-null values. Queries look up the value associated
 * with the range (if any) that contains a specified key.
 *
 * <p>In contrast to {@link RangeSet}, no "coalescing" is done of {@linkplain
 * Range#isConnected(Range) connected} ranges, even if they are mapped to the same value.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
RangeSet (/guava/src/com/google/common/collect/RangeSet.java)/**
 * A set comprising zero or more {@linkplain Range#isEmpty nonempty}, {@linkplain
 * Range#isConnected(Range) disconnected} ranges of type {@code C}.
 *
 * <p>Implementations that choose to support the {@link #add(Range)} operation are required to
 * ignore empty ranges and coalesce connected ranges. For example:
 *
 * <pre>{@code
 * RangeSet<Integer> rangeSet = TreeRangeSet.create();
 * rangeSet.add(Range.closed(1, 10)); // {[1, 10]}
 * rangeSet.add(Range.closedOpen(11, 15)); // disconnected range; {[1, 10], [11, 15)}
 * rangeSet.add(Range.closedOpen(15, 20)); // connected range; {[1, 10], [11, 20)}
 * rangeSet.add(Range.openClosed(0, 0)); // empty range; {[1, 10], [11, 20)}
 * rangeSet.remove(Range.open(5, 10)); // splits [1, 10]; {[1, 5], [10, 10], [11, 20)}
 * }</pre>
 *
 * <p>Note that the behavior of {@link Range#isEmpty()} and {@link Range#isConnected(Range)} may not
 * be as expected on discrete ranges. See the Javadoc of those methods for details.
 *
 * <p>For a {@link Set} whose contents are specified by a {@link Range}, see {@link ContiguousSet}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#rangeset"> RangeSets</a>.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 * @since 14.0
 */
RegularContiguousSet (/guava/src/com/google/common/collect/RegularContiguousSet.java)/**
 * An implementation of {@link ContiguousSet} that contains one or more elements.
 *
 * @author Gregory Kick
 */
RegularImmutableAsList (/guava/src/com/google/common/collect/RegularImmutableAsList.java)/**
 * An {@link ImmutableAsList} implementation specialized for when the delegate collection is already
 * backed by an {@code ImmutableList} or array.
 *
 * @author Louis Wasserman
 */
RegularImmutableBiMap (/guava/src/com/google/common/collect/RegularImmutableBiMap.java)/**
 * Bimap with zero or more mappings.
 *
 * @author Louis Wasserman
 */
RegularImmutableList (/guava/src/com/google/common/collect/RegularImmutableList.java)/**
 * Implementation of {@link ImmutableList} backed by a simple array.
 *
 * @author Kevin Bourrillion
 */
RegularImmutableMap (/guava/src/com/google/common/collect/RegularImmutableMap.java)/**
 * Implementation of {@link ImmutableMap} with two or more entries.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 * @author Gregory Kick
 */
RegularImmutableMultiset (/guava/src/com/google/common/collect/RegularImmutableMultiset.java)/**
 * Implementation of {@link ImmutableMultiset} with zero or more elements.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
RegularImmutableSet (/guava/src/com/google/common/collect/RegularImmutableSet.java)/**
 * Implementation of {@link ImmutableSet} with two or more elements.
 *
 * @author Kevin Bourrillion
 */
RegularImmutableSortedMultiset (/guava/src/com/google/common/collect/RegularImmutableSortedMultiset.java)/**
 * An immutable sorted multiset with one or more distinct elements.
 *
 * @author Louis Wasserman
 */
RegularImmutableSortedSet (/guava/src/com/google/common/collect/RegularImmutableSortedSet.java)/**
 * An immutable sorted set with one or more elements. TODO(jlevy): Consider separate class for a
 * single-element sorted set.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
RegularImmutableTable (/guava/src/com/google/common/collect/RegularImmutableTable.java)/**
 * An implementation of {@link ImmutableTable} holding an arbitrary number of cells.
 *
 * @author Gregory Kick
 */
ReverseNaturalOrdering (/guava/src/com/google/common/collect/ReverseNaturalOrdering.java)/** An ordering that uses the reverse of the natural order of the values. */
ReverseOrdering (/guava/src/com/google/common/collect/ReverseOrdering.java)/** An ordering that uses the reverse of a given order. */
RowSortedTable (/guava/src/com/google/common/collect/RowSortedTable.java)/**
 * Interface that extends {@code Table} and whose rows are sorted.
 *
 * <p>The {@link #rowKeySet} method returns a {@link SortedSet} and the {@link #rowMap} method
 * returns a {@link SortedMap}, instead of the {@link Set} and {@link Map} specified by the {@link
 * Table} interface.
 *
 * @author Warren Dukes
 * @since 8.0
 */
Serialization (/guava/src/com/google/common/collect/Serialization.java)/**
 * Provides static methods for serializing collection classes.
 *
 * <p>This class assists the implementation of collection classes. Do not use this class to
 * serialize collections that are defined elsewhere.
 *
 * @author Jared Levy
 */
SetMultimap (/guava/src/com/google/common/collect/SetMultimap.java)/**
 * A {@code Multimap} that cannot hold duplicate key-value pairs. Adding a key-value pair that's
 * already in the multimap has no effect. See the {@link Multimap} documentation for information
 * common to all multimaps.
 *
 * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods each return a {@link
 * Set} of values, while {@link #entries} returns a {@code Set} of map entries. Though the method
 * signature doesn't say so explicitly, the map returned by {@link #asMap} has {@code Set} values.
 *
 * <p>If the values corresponding to a single key should be ordered according to a {@link
 * java.util.Comparator} (or the natural order), see the {@link SortedSetMultimap} subinterface.
 *
 * <p>Since the value collections are sets, the behavior of a {@code SetMultimap} is not specified
 * if key <em>or value</em> objects already present in the multimap change in a manner that affects
 * {@code equals} comparisons. Use caution if mutable objects are used as keys or values in a {@code
 * SetMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
ImprovedAbstractSet (/guava/src/com/google/common/collect/Sets.java)/**
   * {@link AbstractSet} substitute without the potentially-quadratic {@code removeAll}
   * implementation.
   */
SetView (/guava/src/com/google/common/collect/Sets.java)/**
   * An unmodifiable view of a set which may be backed by other sets; this view will change as the
   * backing sets do. Contains methods to copy the data into a new set which will then remain
   * stable. There is usually no reason to retain a reference of type {@code SetView}; typically,
   * you either use it as a plain {@link Set}, or immediately invoke {@link #immutableCopy} or
   * {@link #copyInto} and forget the {@code SetView} itself.
   *
   * @since 2.0
   */
Sets (/guava/src/com/google/common/collect/Sets.java)/**
 * Static utility methods pertaining to {@link Set} instances. Also see this class's counterparts
 * {@link Lists}, {@link Maps} and {@link Queues}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#sets"> {@code Sets}</a>.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @author Chris Povirk
 * @since 2.0
 */
SingletonImmutableBiMap (/guava/src/com/google/common/collect/SingletonImmutableBiMap.java)/**
 * Implementation of {@link ImmutableMap} with exactly one entry.
 *
 * @author Jesse Wilson
 * @author Kevin Bourrillion
 */
SingletonImmutableList (/guava/src/com/google/common/collect/SingletonImmutableList.java)/**
 * Implementation of {@link ImmutableList} with exactly one element.
 *
 * @author Hayward Chan
 */
SingletonImmutableSet (/guava/src/com/google/common/collect/SingletonImmutableSet.java)/**
 * Implementation of {@link ImmutableSet} with exactly one element.
 *
 * @author Kevin Bourrillion
 * @author Nick Kralevich
 */
SingletonImmutableTable (/guava/src/com/google/common/collect/SingletonImmutableTable.java)/**
 * An implementation of {@link ImmutableTable} that holds a single cell.
 *
 * @author Gregory Kick
 */
SortedIterable (/guava/src/com/google/common/collect/SortedIterable.java)/**
 * An {@code Iterable} whose elements are sorted relative to a {@code Comparator}, typically
 * provided at creation time.
 *
 * @author Louis Wasserman
 */
SortedIterables (/guava/src/com/google/common/collect/SortedIterables.java)/**
 * Utilities for dealing with sorted collections of all types.
 *
 * @author Louis Wasserman
 */
SortedLists (/guava/src/com/google/common/collect/SortedLists.java)/**
 * Static methods pertaining to sorted {@link List} instances.
 *
 * <p>In this documentation, the terms <i>greatest</i>, <i>greater</i>, <i>least</i>, and
 * <i>lesser</i> are considered to refer to the comparator on the elements, and the terms
 * <i>first</i> and <i>last</i> are considered to refer to the elements' ordering in a list.
 *
 * @author Louis Wasserman
 */
SortedMapDifference (/guava/src/com/google/common/collect/SortedMapDifference.java)/**
 * An object representing the differences between two sorted maps.
 *
 * @author Louis Wasserman
 * @since 8.0
 */
SortedMultiset (/guava/src/com/google/common/collect/SortedMultiset.java)/**
 * A {@link Multiset} which maintains the ordering of its elements, according to either their
 * natural order or an explicit {@link Comparator}. This order is reflected when iterating over the
 * sorted multiset, either directly, or through its {@code elementSet} or {@code entrySet} views. In
 * all cases, this implementation uses {@link Comparable#compareTo} or {@link Comparator#compare}
 * instead of {@link Object#equals} to determine equivalence of instances.
 *
 * <p><b>Warning:</b> The comparison must be <i>consistent with equals</i> as explained by the
 * {@link Comparable} class specification. Otherwise, the resulting multiset will violate the {@link
 * Collection} contract, which it is specified in terms of {@link Object#equals}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
SortedMultisetBridge (/guava/src/com/google/common/collect/SortedMultisetBridge.java)/**
 * Superinterface of {@link SortedMultiset} to introduce a bridge method for {@code elementSet()},
 * to ensure binary compatibility with older Guava versions that specified {@code elementSet()} to
 * return {@code SortedSet}.
 *
 * @author Louis Wasserman
 */
ElementSet (/guava/src/com/google/common/collect/SortedMultisets.java)/** A skeleton implementation for {@link SortedMultiset#elementSet}. */
NavigableElementSet (/guava/src/com/google/common/collect/SortedMultisets.java)/** A skeleton navigable implementation for {@link SortedMultiset#elementSet}. */
SortedMultisets (/guava/src/com/google/common/collect/SortedMultisets.java)/**
 * Provides static utility methods for creating and working with {@link SortedMultiset} instances.
 *
 * @author Louis Wasserman
 */
SortedSetMultimap (/guava/src/com/google/common/collect/SortedSetMultimap.java)/**
 * A {@code SetMultimap} whose set of values for a given key are kept sorted; that is, they comprise
 * a {@link SortedSet}. It cannot hold duplicate key-value pairs; adding a key-value pair that's
 * already in the multimap has no effect. This interface does not specify the ordering of the
 * multimap's keys. See the {@link Multimap} documentation for information common to all multimaps.
 *
 * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods each return a {@link
 * SortedSet} of values, while {@link Multimap#entries()} returns a {@link Set} of map entries.
 * Though the method signature doesn't say so explicitly, the map returned by {@link #asMap} has
 * {@code SortedSet} values.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @since 2.0
 */
SparseImmutableTable (/guava/src/com/google/common/collect/SparseImmutableTable.java)/** A {@code RegularImmutableTable} optimized for sparse data. */
StandardRowSortedTable (/guava/src/com/google/common/collect/StandardRowSortedTable.java)/**
 * Implementation of {@code Table} whose iteration ordering across row keys is sorted by their
 * natural ordering or by a supplied comparator. Note that iterations across the columns keys for a
 * single row key may or may not be ordered, depending on the implementation. When rows and columns
 * are both sorted, it's easier to use the {@link TreeBasedTable} subclass.
 *
 * <p>The {@link #rowKeySet} method returns a {@link SortedSet} and the {@link #rowMap} method
 * returns a {@link SortedMap}, instead of the {@link Set} and {@link Map} specified by the {@link
 * Table} interface.
 *
 * <p>Null keys and values are not supported.
 *
 * <p>See the {@link StandardTable} superclass for more information about the behavior of this
 * class.
 *
 * @author Jared Levy
 */
TableSet (/guava/src/com/google/common/collect/StandardTable.java)/**
   * Abstract set whose {@code isEmpty()} returns whether the table is empty and whose {@code
   * clear()} clears all table mappings.
   */
StandardTable (/guava/src/com/google/common/collect/StandardTable.java)/**
 * {@link Table} implementation backed by a map that associates row keys with column key / value
 * secondary maps. This class provides rapid access to records by the row key alone or by both keys,
 * but not by just the column key.
 *
 * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link #columnMap()} have
 * iterators that don't support {@code remove()}. Otherwise, all optional operations are supported.
 * Null row keys, columns keys, and values are not supported.
 *
 * <p>Lookups by row key are often faster than lookups by column key, because the data is stored in
 * a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs
 * quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer,
 * since an iteration across all row keys occurs.
 *
 * <p>Note that this implementation is not synchronized. If multiple threads access this table
 * concurrently and one of the threads modifies the table, it must be synchronized externally.
 *
 * @author Jared Levy
 */
FunctionWithIndex (/guava/src/com/google/common/collect/Streams.java)/**
   * An analogue of {@link java.util.function.Function} also accepting an index.
   *
   * <p>This interface is only intended for use by callers of {@link #mapWithIndex(Stream,
   * FunctionWithIndex)}.
   *
   * @since 21.0
   */
IntFunctionWithIndex (/guava/src/com/google/common/collect/Streams.java)/**
   * An analogue of {@link java.util.function.IntFunction} also accepting an index.
   *
   * <p>This interface is only intended for use by callers of {@link #mapWithIndex(IntStream,
   * IntFunctionWithIndex)}.
   *
   * @since 21.0
   */
LongFunctionWithIndex (/guava/src/com/google/common/collect/Streams.java)/**
   * An analogue of {@link java.util.function.LongFunction} also accepting an index.
   *
   * <p>This interface is only intended for use by callers of {@link #mapWithIndex(LongStream,
   * LongFunctionWithIndex)}.
   *
   * @since 21.0
   */
DoubleFunctionWithIndex (/guava/src/com/google/common/collect/Streams.java)/**
   * An analogue of {@link java.util.function.DoubleFunction} also accepting an index.
   *
   * <p>This interface is only intended for use by callers of {@link #mapWithIndex(DoubleStream,
   * DoubleFunctionWithIndex)}.
   *
   * @since 21.0
   */
Streams (/guava/src/com/google/common/collect/Streams.java)/**
 * Static utility methods related to {@code Stream} instances.
 *
 * @since 21.0
 */
Synchronized (/guava/src/com/google/common/collect/Synchronized.java)/**
 * Synchronized collection views. The returned synchronized collection views are serializable if the
 * backing collection and the mutex are serializable.
 *
 * <p>If {@code null} is passed as the {@code mutex} parameter to any of this class's top-level
 * methods or inner class constructors, the created object uses itself as the synchronization mutex.
 *
 * <p>This class should be used by other collection classes only.
 *
 * @author Mike Bostock
 * @author Jared Levy
 */
Cell (/guava/src/com/google/common/collect/Table.java)/**
   * Row key / column key / value triplet corresponding to a mapping in a table.
   *
   * @since 7.0
   */
Table (/guava/src/com/google/common/collect/Table.java)/**
 * A collection that associates an ordered pair of keys, called a row key and a column key, with a
 * single value. A table may be sparse, with only a small fraction of row key / column key pairs
 * possessing a corresponding value.
 *
 * <p>The mappings corresponding to a given row key may be viewed as a {@link Map} whose keys are
 * the columns. The reverse is also available, associating a column with a row key / value map. Note
 * that, in some implementations, data access by column key may have fewer supported operations or
 * worse performance than data access by row key.
 *
 * <p>The methods returning collections or maps always return views of the underlying table.
 * Updating the table can change the contents of those collections, and updating the collections
 * will change the table.
 *
 * <p>All methods that modify the table are optional, and the views returned by the table may or may
 * not be modifiable. When modification isn't supported, those methods will throw an {@link
 * UnsupportedOperationException}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"> {@code Table}</a>.
 *
 * @author Jared Levy
 * @param <R> the type of the table row keys
 * @param <C> the type of the table column keys
 * @param <V> the type of the mapped values
 * @since 7.0
 */
Tables (/guava/src/com/google/common/collect/Tables.java)/**
 * Provides static methods that involve a {@code Table}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#tables"> {@code Tables}</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 7.0
 */
TopKSelector (/guava/src/com/google/common/collect/TopKSelector.java)/**
 * An accumulator that selects the "top" {@code k} elements added to it, relative to a provided
 * comparator. "Top" can mean the greatest or the lowest elements, specified in the factory used to
 * create the {@code TopKSelector} instance.
 *
 * <p>If your input data is available as a {@link Stream}, prefer passing {@link
 * Comparators#least(int)} to {@link Stream#collect(java.util.stream.Collector)}. If it is available
 * as an {@link Iterable} or {@link Iterator}, prefer {@link Ordering#leastOf(Iterable, int)}.
 *
 * <p>This uses the same efficient implementation as {@link Ordering#leastOf(Iterable, int)},
 * offering expected O(n + k log k) performance (worst case O(n log k)) for n calls to {@link
 * #offer} and a call to {@link #topK}, with O(k) memory. In comparison, quickselect has the same
 * asymptotics but requires O(n) memory, and a {@code PriorityQueue} implementation takes O(n log
 * k). In benchmarks, this implementation performs at least as well as either implementation, and
 * degrades more gracefully for worst-case input.
 *
 * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
 * equivalent elements are added to it, it is undefined which will come first in the output.
 *
 * @author Louis Wasserman
 */
TransformedIterator (/guava/src/com/google/common/collect/TransformedIterator.java)/**
 * An iterator that transforms a backing iterator; for internal use. This avoids the object overhead
 * of constructing a {@link com.google.common.base.Function Function} for internal methods.
 *
 * @author Louis Wasserman
 */
TransformedListIterator (/guava/src/com/google/common/collect/TransformedListIterator.java)/**
 * An iterator that transforms a backing list iterator; for internal use. This avoids the object
 * overhead of constructing a {@link Function} for internal methods.
 *
 * @author Louis Wasserman
 */
TreeBasedTable (/guava/src/com/google/common/collect/TreeBasedTable.java)/**
 * Implementation of {@code Table} whose row keys and column keys are ordered by their natural
 * ordering or by supplied comparators. When constructing a {@code TreeBasedTable}, you may provide
 * comparators for the row keys and the column keys, or you may use natural ordering for both.
 *
 * <p>The {@link #rowKeySet} method returns a {@link SortedSet} and the {@link #rowMap} method
 * returns a {@link SortedMap}, instead of the {@link Set} and {@link Map} specified by the {@link
 * Table} interface.
 *
 * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link #columnMap()} have
 * iterators that don't support {@code remove()}. Otherwise, all optional operations are supported.
 * Null row keys, columns keys, and values are not supported.
 *
 * <p>Lookups by row key are often faster than lookups by column key, because the data is stored in
 * a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs
 * quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer,
 * since an iteration across all row keys occurs.
 *
 * <p>Because a {@code TreeBasedTable} has unique sorted values for a given row, both {@code
 * row(rowKey)} and {@code rowMap().get(rowKey)} are {@link SortedMap} instances, instead of the
 * {@link Map} specified in the {@link Table} interface.
 *
 * <p>Note that this implementation is not synchronized. If multiple threads access this table
 * concurrently and one of the threads modifies the table, it must be synchronized externally.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"> {@code Table}</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 7.0
 */
TreeMultimap (/guava/src/com/google/common/collect/TreeMultimap.java)/**
 * Implementation of {@code Multimap} whose keys and values are ordered by their natural ordering or
 * by supplied comparators. In all cases, this implementation uses {@link Comparable#compareTo} or
 * {@link Comparator#compare} instead of {@link Object#equals} to determine equivalence of
 * instances.
 *
 * <p><b>Warning:</b> The comparators or comparables used must be <i>consistent with equals</i> as
 * explained by the {@link Comparable} class specification. Otherwise, the resulting multiset will
 * violate the general contract of {@link SetMultimap}, which it is specified in terms of {@link
 * Object#equals}.
 *
 * <p>The collections returned by {@code keySet} and {@code asMap} iterate through the keys
 * according to the key comparator ordering or the natural ordering of the keys. Similarly, {@code
 * get}, {@code removeAll}, and {@code replaceValues} return collections that iterate through the
 * values according to the value comparator ordering or the natural ordering of the values. The
 * collections generated by {@code entries}, {@code keys}, and {@code values} iterate across the
 * keys according to the above key ordering, and for each key they iterate across the values
 * according to the value ordering.
 *
 * <p>The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an
 * existing key-value pair has no effect.
 *
 * <p>Null keys and values are permitted (provided, of course, that the respective comparators
 * support them). All optional multimap methods are supported, and all returned views are
 * modifiable.
 *
 * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
 * read operations will work correctly. To allow concurrent update operations, wrap your multimap
 * with a call to {@link Multimaps#synchronizedSortedSetMultimap}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"> {@code
 * Multimap}</a>.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 * @since 2.0
 */
TreeMultiset (/guava/src/com/google/common/collect/TreeMultiset.java)/**
 * A multiset which maintains the ordering of its elements, according to either their natural order
 * or an explicit {@link Comparator}. In all cases, this implementation uses {@link
 * Comparable#compareTo} or {@link Comparator#compare} instead of {@link Object#equals} to determine
 * equivalence of instances.
 *
 * <p><b>Warning:</b> The comparison must be <i>consistent with equals</i> as explained by the
 * {@link Comparable} class specification. Otherwise, the resulting multiset will violate the {@link
 * java.util.Collection} contract, which is specified in terms of {@link Object#equals}.
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code
 * Multiset}</a>.
 *
 * @author Louis Wasserman
 * @author Jared Levy
 * @since 2.0
 */
TreeRangeMap (/guava/src/com/google/common/collect/TreeRangeMap.java)/**
 * An implementation of {@code RangeMap} based on a {@code TreeMap}, supporting all optional
 * operations.
 *
 * <p>Like all {@code RangeMap} implementations, this supports neither null keys nor null values.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
TreeRangeSet (/guava/src/com/google/common/collect/TreeRangeSet.java)/**
 * An implementation of {@link RangeSet} backed by a {@link TreeMap}.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
UnmodifiableIterator (/guava/src/com/google/common/collect/UnmodifiableIterator.java)/**
 * An iterator that does not support {@link #remove}.
 *
 * <p>{@code UnmodifiableIterator} is used primarily in conjunction with implementations of {@link
 * ImmutableCollection}, such as {@link ImmutableList}. You can, however, convert an existing
 * iterator to an {@code UnmodifiableIterator} using {@link Iterators#unmodifiableIterator}.
 *
 * @author Jared Levy
 * @since 2.0
 */
UnmodifiableListIterator (/guava/src/com/google/common/collect/UnmodifiableListIterator.java)/**
 * A list iterator that does not support {@link #remove}, {@link #add}, or {@link #set}.
 *
 * @since 7.0
 * @author Louis Wasserman
 */
UnmodifiableSortedMultiset (/guava/src/com/google/common/collect/UnmodifiableSortedMultiset.java)/**
 * Implementation of {@link Multisets#unmodifiableSortedMultiset(SortedMultiset)}, split out into
 * its own file so it can be GWT emulated (to deal with the differing elementSet() types in GWT and
 * non-GWT).
 *
 * @author Louis Wasserman
 */
UsingToStringOrdering (/guava/src/com/google/common/collect/UsingToStringOrdering.java)/** An ordering that uses the natural order of the string representation of the values. */
ArrayBasedCharEscaper (/guava/src/com/google/common/escape/ArrayBasedCharEscaper.java)/**
 * A {@link CharEscaper} that uses an array to quickly look up replacement characters for a given
 * {@code char} value. An additional safe range is provided that determines whether {@code char}
 * values without specific replacements are to be considered safe and left unescaped or should be
 * escaped in a general way.
 *
 * <p>A good example of usage of this class is for Java source code escaping where the replacement
 * array contains information about special ASCII characters such as {@code \\t} and {@code \\n}
 * while {@link #escapeUnsafe} is overridden to handle general escaping of the form {@code \\uxxxx}.
 *
 * <p>The size of the data structure used by {@link ArrayBasedCharEscaper} is proportional to the
 * highest valued character that requires escaping. For example a replacement map containing the
 * single character '{@code \}{@code u1000}' will require approximately 16K of memory. If you need
 * to create multiple escaper instances that have the same character replacement mapping consider
 * using {@link ArrayBasedEscaperMap}.
 *
 * @author Sven Mawson
 * @author David Beaumont
 * @since 15.0
 */
ArrayBasedEscaperMap (/guava/src/com/google/common/escape/ArrayBasedEscaperMap.java)/**
 * An implementation-specific parameter class suitable for initializing {@link
 * ArrayBasedCharEscaper} or {@link ArrayBasedUnicodeEscaper} instances. This class should be used
 * when more than one escaper is created using the same character replacement mapping to allow the
 * underlying (implementation specific) data structures to be shared.
 *
 * <p>The size of the data structure used by ArrayBasedCharEscaper and ArrayBasedUnicodeEscaper is
 * proportional to the highest valued character that has a replacement. For example a replacement
 * map containing the single character '{@literal \}u1000' will require approximately 16K of memory.
 * As such sharing this data structure between escaper instances is the primary goal of this class.
 *
 * @author David Beaumont
 * @since 15.0
 */
ArrayBasedUnicodeEscaper (/guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java)/**
 * A {@link UnicodeEscaper} that uses an array to quickly look up replacement characters for a given
 * code point. An additional safe range is provided that determines whether code points without
 * specific replacements are to be considered safe and left unescaped or should be escaped in a
 * general way.
 *
 * <p>A good example of usage of this class is for HTML escaping where the replacement array
 * contains information about the named HTML entities such as {@code &amp;} and {@code &quot;} while
 * {@link #escapeUnsafe} is overridden to handle general escaping of the form {@code &#NNNNN;}.
 *
 * <p>The size of the data structure used by {@link ArrayBasedUnicodeEscaper} is proportional to the
 * highest valued code point that requires escaping. For example a replacement map containing the
 * single character '{@code \}{@code u1000}' will require approximately 16K of memory. If you need
 * to create multiple escaper instances that have the same character replacement mapping consider
 * using {@link ArrayBasedEscaperMap}.
 *
 * @author David Beaumont
 * @since 15.0
 */
CharEscaper (/guava/src/com/google/common/escape/CharEscaper.java)/**
 * An object that converts literal text into a format safe for inclusion in a particular context
 * (such as an XML document). Typically (but not always), the inverse process of "unescaping" the
 * text is performed automatically by the relevant parser.
 *
 * <p>For example, an XML escaper would convert the literal string {@code "Foo<Bar>"} into {@code
 * "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from being confused with an XML tag. When the
 * resulting XML document is parsed, the parser API will return this text as the original literal
 * string {@code "Foo<Bar>"}.
 *
 * <p>A {@code CharEscaper} instance is required to be stateless, and safe when used concurrently by
 * multiple threads.
 *
 * <p>Popular escapers are defined as constants in classes like {@link
 * com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To create
 * your own escapers extend this class and implement the {@link #escape(char)} method.
 *
 * @author Sven Mawson
 * @since 15.0
 */
CharArrayDecorator (/guava/src/com/google/common/escape/CharEscaperBuilder.java)/**
   * Simple decorator that turns an array of replacement char[]s into a CharEscaper, this results in
   * a very fast escape method.
   */
CharEscaperBuilder (/guava/src/com/google/common/escape/CharEscaperBuilder.java)/**
 * Simple helper class to build a "sparse" array of objects based on the indexes that were added to
 * it. The array will be from 0 to the maximum index given. All non-set indexes will contain null
 * (so it's not really a sparse array, just a pseudo sparse array). The builder can also return a
 * CharEscaper based on the generated array.
 *
 * @author Sven Mawson
 * @since 15.0
 */
Escaper (/guava/src/com/google/common/escape/Escaper.java)/**
 * An object that converts literal text into a format safe for inclusion in a particular context
 * (such as an XML document). Typically (but not always), the inverse process of "unescaping" the
 * text is performed automatically by the relevant parser.
 *
 * <p>For example, an XML escaper would convert the literal string {@code "Foo<Bar>"} into {@code
 * "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from being confused with an XML tag. When the
 * resulting XML document is parsed, the parser API will return this text as the original literal
 * string {@code "Foo<Bar>"}.
 *
 * <p>An {@code Escaper} instance is required to be stateless, and safe when used concurrently by
 * multiple threads.
 *
 * <p>Because, in general, escaping operates on the code points of a string and not on its
 * individual {@code char} values, it is not safe to assume that {@code escape(s)} is equivalent to
 * {@code escape(s.substring(0, n)) + escape(s.substring(n))} for arbitrary {@code n}. This is
 * because of the possibility of splitting a surrogate pair. The only case in which it is safe to
 * escape strings and concatenate the results is if you can rule out this possibility, either by
 * splitting an existing long string into short strings adaptively around {@linkplain
 * Character#isHighSurrogate surrogate} {@linkplain Character#isLowSurrogate pairs}, or by starting
 * with short strings already known to be free of unpaired surrogates.
 *
 * <p>The two primary implementations of this interface are {@link CharEscaper} and {@link
 * UnicodeEscaper}. They are heavily optimized for performance and greatly simplify the task of
 * implementing new escapers. It is strongly recommended that when implementing a new escaper you
 * extend one of these classes. If you find that you are unable to achieve the desired behavior
 * using either of these classes, please contact the Java libraries team for advice.
 *
 * <p>Popular escapers are defined as constants in classes like {@link
 * com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To create
 * your own escapers, use {@link CharEscaperBuilder}, or extend {@code CharEscaper} or {@code
 * UnicodeEscaper}.
 *
 * @author David Beaumont
 * @since 15.0
 */
Builder (/guava/src/com/google/common/escape/Escapers.java)/**
   * A builder for simple, fast escapers.
   *
   * <p>Typically an escaper needs to deal with the escaping of high valued characters or code
   * points. In these cases it is necessary to extend either {@link ArrayBasedCharEscaper} or {@link
   * ArrayBasedUnicodeEscaper} to provide the desired behavior. However this builder is suitable for
   * creating escapers that replace a relative small set of characters.
   *
   * @author David Beaumont
   * @since 15.0
   */
Escapers (/guava/src/com/google/common/escape/Escapers.java)/**
 * Static utility methods pertaining to {@link Escaper} instances.
 *
 * @author Sven Mawson
 * @author David Beaumont
 * @since 15.0
 */
Platform (/guava/src/com/google/common/escape/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * @author Jesse Wilson
 */
UnicodeEscaper (/guava/src/com/google/common/escape/UnicodeEscaper.java)/**
 * An {@link Escaper} that converts literal text into a format safe for inclusion in a particular
 * context (such as an XML document). Typically (but not always), the inverse process of
 * "unescaping" the text is performed automatically by the relevant parser.
 *
 * <p>For example, an XML escaper would convert the literal string {@code "Foo<Bar>"} into {@code
 * "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from being confused with an XML tag. When the
 * resulting XML document is parsed, the parser API will return this text as the original literal
 * string {@code "Foo<Bar>"}.
 *
 * <p><b>Note:</b> This class is similar to {@link CharEscaper} but with one very important
 * difference. A CharEscaper can only process Java <a
 * href="http://en.wikipedia.org/wiki/UTF-16">UTF16</a> characters in isolation and may not cope
 * when it encounters surrogate pairs. This class facilitates the correct escaping of all Unicode
 * characters.
 *
 * <p>As there are important reasons, including potential security issues, to handle Unicode
 * correctly if you are considering implementing a new escaper you should favor using UnicodeEscaper
 * wherever possible.
 *
 * <p>A {@code UnicodeEscaper} instance is required to be stateless, and safe when used concurrently
 * by multiple threads.
 *
 * <p>Popular escapers are defined as constants in classes like {@link
 * com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To create
 * your own escapers extend this class and implement the {@link #escape(int)} method.
 *
 * @author David Beaumont
 * @since 15.0
 */
AsyncEventBus (/guava/src/com/google/common/eventbus/AsyncEventBus.java)/**
 * An {@link EventBus} that takes the Executor of your choice and uses it to dispatch events,
 * allowing dispatch to occur asynchronously.
 *
 * @author Cliff Biffle
 * @since 10.0
 */
DeadEvent (/guava/src/com/google/common/eventbus/DeadEvent.java)/**
 * Wraps an event that was posted, but which had no subscribers and thus could not be delivered.
 *
 * <p>Registering a DeadEvent subscriber is useful for debugging or logging, as it can detect
 * misconfigurations in a system's event distribution.
 *
 * @author Cliff Biffle
 * @since 10.0
 */
PerThreadQueuedDispatcher (/guava/src/com/google/common/eventbus/Dispatcher.java)/** Implementation of a {@link #perThreadDispatchQueue()} dispatcher. */
LegacyAsyncDispatcher (/guava/src/com/google/common/eventbus/Dispatcher.java)/** Implementation of a {@link #legacyAsync()} dispatcher. */
ImmediateDispatcher (/guava/src/com/google/common/eventbus/Dispatcher.java)/** Implementation of {@link #immediate()}. */
Dispatcher (/guava/src/com/google/common/eventbus/Dispatcher.java)/**
 * Handler for dispatching events to subscribers, providing different event ordering guarantees that
 * make sense for different situations.
 *
 * <p><b>Note:</b> The dispatcher is orthogonal to the subscriber's {@code Executor}. The dispatcher
 * controls the order in which events are dispatched, while the executor controls how (i.e. on which
 * thread) the subscriber is actually called when an event is dispatched to it.
 *
 * @author Colin Decker
 */
LoggingHandler (/guava/src/com/google/common/eventbus/EventBus.java)/** Simple logging handler for subscriber exceptions. */
EventBus (/guava/src/com/google/common/eventbus/EventBus.java)/**
 * Dispatches events to listeners, and provides ways for listeners to register themselves.
 *
 * <p>The EventBus allows publish-subscribe-style communication between components without requiring
 * the components to explicitly register with one another (and thus be aware of each other). It is
 * designed exclusively to replace traditional Java in-process event distribution using explicit
 * registration. It is <em>not</em> a general-purpose publish-subscribe system, nor is it intended
 * for interprocess communication.
 *
 * <h2>Receiving Events</h2>
 *
 * <p>To receive events, an object should:
 *
 * <ol>
 *   <li>Expose a public method, known as the <i>event subscriber</i>, which accepts a single
 *       argument of the type of event desired;
 *   <li>Mark it with a {@link Subscribe} annotation;
 *   <li>Pass itself to an EventBus instance's {@link #register(Object)} method.
 * </ol>
 *
 * <h2>Posting Events</h2>
 *
 * <p>To post an event, simply provide the event object to the {@link #post(Object)} method. The
 * EventBus instance will determine the type of event and route it to all registered listeners.
 *
 * <p>Events are routed based on their type &mdash; an event will be delivered to any subscriber for
 * any type to which the event is <em>assignable.</em> This includes implemented interfaces, all
 * superclasses, and all interfaces implemented by superclasses.
 *
 * <p>When {@code post} is called, all registered subscribers for an event are run in sequence, so
 * subscribers should be reasonably quick. If an event may trigger an extended process (such as a
 * database load), spawn a thread or queue it for later. (For a convenient way to do this, use an
 * {@link AsyncEventBus}.)
 *
 * <h2>Subscriber Methods</h2>
 *
 * <p>Event subscriber methods must accept only one argument: the event.
 *
 * <p>Subscribers should not, in general, throw. If they do, the EventBus will catch and log the
 * exception. This is rarely the right solution for error handling and should not be relied upon; it
 * is intended solely to help find problems during development.
 *
 * <p>The EventBus guarantees that it will not call a subscriber method from multiple threads
 * simultaneously, unless the method explicitly allows it by bearing the {@link
 * AllowConcurrentEvents} annotation. If this annotation is not present, subscriber methods need not
 * worry about being reentrant, unless also called from outside the EventBus.
 *
 * <h2>Dead Events</h2>
 *
 * <p>If an event is posted, but no registered subscribers can accept it, it is considered "dead."
 * To give the system a second chance to handle dead events, they are wrapped in an instance of
 * {@link DeadEvent} and reposted.
 *
 * <p>If a subscriber for a supertype of all events (such as Object) is registered, no event will
 * ever be considered dead, and no DeadEvents will be generated. Accordingly, while DeadEvent
 * extends {@link Object}, a subscriber registered to receive any Object will never receive a
 * DeadEvent.
 *
 * <p>This class is safe for concurrent use.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/EventBusExplained">{@code EventBus}</a>.
 *
 * @author Cliff Biffle
 * @since 10.0
 */
SynchronizedSubscriber (/guava/src/com/google/common/eventbus/Subscriber.java)/**
   * Subscriber that synchronizes invocations of a method to ensure that only one thread may enter
   * the method at a time.
   */
Subscriber (/guava/src/com/google/common/eventbus/Subscriber.java)/**
 * A subscriber method on a specific object, plus the executor that should be used for dispatching
 * events to it.
 *
 * <p>Two subscribers are equivalent when they refer to the same method on the same object (not
 * class). This property is used to ensure that no subscriber method is registered more than once.
 *
 * @author Colin Decker
 */
SubscriberExceptionContext (/guava/src/com/google/common/eventbus/SubscriberExceptionContext.java)/**
 * Context for an exception thrown by a subscriber.
 *
 * @since 16.0
 */
SubscriberExceptionHandler (/guava/src/com/google/common/eventbus/SubscriberExceptionHandler.java)/**
 * Handler for exceptions thrown by event subscribers.
 *
 * @since 16.0
 */
SubscriberRegistry (/guava/src/com/google/common/eventbus/SubscriberRegistry.java)/**
 * Registry of subscribers to a single event bus.
 *
 * @author Colin Decker
 */
AbstractBaseGraph (/guava/src/com/google/common/graph/AbstractBaseGraph.java)/**
 * This class provides a skeletal implementation of {@link BaseGraph}.
 *
 * <p>The methods implemented in this class should not be overridden unless the subclass admits a
 * more efficient implementation.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 */
AbstractDirectedNetworkConnections (/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java)/**
 * A base implementation of {@link NetworkConnections} for directed networks.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
AbstractGraph (/guava/src/com/google/common/graph/AbstractGraph.java)/**
 * This class provides a skeletal implementation of {@link Graph}. It is recommended to extend this
 * class rather than implement {@link Graph} directly.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @since 20.0
 */
AbstractGraphBuilder (/guava/src/com/google/common/graph/AbstractGraphBuilder.java)/**
 * A base class for builders that construct graphs with user-defined properties.
 *
 * @author James Sexton
 */
AbstractNetwork (/guava/src/com/google/common/graph/AbstractNetwork.java)/**
 * This class provides a skeletal implementation of {@link Network}. It is recommended to extend
 * this class rather than implement {@link Network} directly.
 *
 * <p>The methods implemented in this class should not be overridden unless the subclass admits a
 * more efficient implementation.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 * @since 20.0
 */
AbstractUndirectedNetworkConnections (/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java)/**
 * A base implementation of {@link NetworkConnections} for undirected networks.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
AbstractValueGraph (/guava/src/com/google/common/graph/AbstractValueGraph.java)/**
 * This class provides a skeletal implementation of {@link ValueGraph}. It is recommended to extend
 * this class rather than implement {@link ValueGraph} directly.
 *
 * <p>The methods implemented in this class should not be overridden unless the subclass admits a
 * more efficient implementation.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 * @since 20.0
 */
BaseGraph (/guava/src/com/google/common/graph/BaseGraph.java)/**
 * A non-public interface for the methods shared between {@link Graph} and {@link ValueGraph}.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 */
ConfigurableMutableGraph (/guava/src/com/google/common/graph/ConfigurableMutableGraph.java)/**
 * Configurable implementation of {@link MutableGraph} that supports both directed and undirected
 * graphs. Instances of this class should be constructed with {@link GraphBuilder}.
 *
 * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},
 * which is in O(d_node) where d_node is the degree of {@code node}.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 */
ConfigurableMutableNetwork (/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java)/**
 * Configurable implementation of {@link MutableNetwork} that supports both directed and undirected
 * graphs. Instances of this class should be constructed with {@link NetworkBuilder}.
 *
 * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},
 * which is in O(d_node) where d_node is the degree of {@code node}.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
ConfigurableMutableValueGraph (/guava/src/com/google/common/graph/ConfigurableMutableValueGraph.java)/**
 * Configurable implementation of {@link MutableValueGraph} that supports both directed and
 * undirected graphs. Instances of this class should be constructed with {@link ValueGraphBuilder}.
 *
 * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},
 * which is in O(d_node) where d_node is the degree of {@code node}.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
ConfigurableNetwork (/guava/src/com/google/common/graph/ConfigurableNetwork.java)/**
 * Configurable implementation of {@link Network} that supports the options supplied by {@link
 * NetworkBuilder}.
 *
 * <p>This class maintains a map of nodes to {@link NetworkConnections}. This class also maintains a
 * map of edges to reference nodes. The reference node is defined to be the edge's source node on
 * directed graphs, and an arbitrary endpoint of the edge on undirected graphs.
 *
 * <p>Collection-returning accessors return unmodifiable views: the view returned will reflect
 * changes to the graph (if the graph is mutable) but may not be modified by the user.
 *
 * <p>The time complexity of all collection-returning accessors is O(1), since views are returned.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
ConfigurableValueGraph (/guava/src/com/google/common/graph/ConfigurableValueGraph.java)/**
 * Configurable implementation of {@link ValueGraph} that supports the options supplied by {@link
 * AbstractGraphBuilder}.
 *
 * <p>This class maintains a map of nodes to {@link GraphConnections}.
 *
 * <p>Collection-returning accessors return unmodifiable views: the view returned will reflect
 * changes to the graph (if the graph is mutable) but may not be modified by the user.
 *
 * <p>The time complexity of all collection-returning accessors is O(1), since views are returned.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
PredAndSucc (/guava/src/com/google/common/graph/DirectedGraphConnections.java)/**
   * A wrapper class to indicate a node is both a predecessor and successor while still providing
   * the successor value.
   */
DirectedGraphConnections (/guava/src/com/google/common/graph/DirectedGraphConnections.java)/**
 * An implementation of {@link GraphConnections} for directed graphs.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
DirectedMultiNetworkConnections (/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java)/**
 * An implementation of {@link NetworkConnections} for directed networks with parallel edges.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
DirectedNetworkConnections (/guava/src/com/google/common/graph/DirectedNetworkConnections.java)/**
 * An implementation of {@link NetworkConnections} for directed networks.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
EdgesConnecting (/guava/src/com/google/common/graph/EdgesConnecting.java)/**
 * A class to represent the set of edges connecting an (implicit) origin node to a target node.
 *
 * <p>The {@link #nodeToOutEdge} map means this class only works on networks without parallel edges.
 * See {@link MultiEdgesConnecting} for a class that works with parallel edges.
 *
 * @author James Sexton
 * @param <E> Edge parameter type
 */
ElementOrder (/guava/src/com/google/common/graph/ElementOrder.java)/**
 * Used to represent the order of elements in a data structure that supports different options for
 * iteration order guarantees.
 *
 * <p>Example usage:
 *
 * <pre>{@code
 * MutableGraph<Integer> graph =
 *     GraphBuilder.directed().nodeOrder(ElementOrder.<Integer>natural()).build();
 * }</pre>
 *
 * @author Joshua O'Madadhain
 * @since 20.0
 */
EndpointPair (/guava/src/com/google/common/graph/EndpointPair.java)/**
 * An immutable pair representing the two endpoints of an edge in a graph. The {@link EndpointPair}
 * of a directed edge is an ordered pair of nodes ({@link #source()} and {@link #target()}). The
 * {@link EndpointPair} of an undirected edge is an unordered pair of nodes ({@link #nodeU()} and
 * {@link #nodeV()}).
 *
 * <p>The edge is a self-loop if, and only if, the two endpoints are equal.
 *
 * @author James Sexton
 * @since 20.0
 */
Directed (/guava/src/com/google/common/graph/EndpointPairIterator.java)/**
   * If the graph is directed, each ordered [source, target] pair will be visited once if there is
   * an edge connecting them.
   */
Undirected (/guava/src/com/google/common/graph/EndpointPairIterator.java)/**
   * If the graph is undirected, each unordered [node, otherNode] pair (except self-loops) will be
   * visited twice if there is an edge connecting them. To avoid returning duplicate {@link
   * EndpointPair}s, we keep track of the nodes that we have visited. When processing endpoint
   * pairs, we skip if the "other node" is in the visited set, as shown below:
   *
   * <pre>
   * Nodes = {N1, N2, N3, N4}
   *    N2           __
   *   /  \         |  |
   * N1----N3      N4__|
   *
   * Visited Nodes = {}
   * EndpointPair [N1, N2] - return
   * EndpointPair [N1, N3] - return
   * Visited Nodes = {N1}
   * EndpointPair [N2, N1] - skip
   * EndpointPair [N2, N3] - return
   * Visited Nodes = {N1, N2}
   * EndpointPair [N3, N1] - skip
   * EndpointPair [N3, N2] - skip
   * Visited Nodes = {N1, N2, N3}
   * EndpointPair [N4, N4] - return
   * Visited Nodes = {N1, N2, N3, N4}
   * </pre>
   */
EndpointPairIterator (/guava/src/com/google/common/graph/EndpointPairIterator.java)/**
 * A class to facilitate the set returned by {@link Graph#edges()}.
 *
 * @author James Sexton
 */
ForwardingGraph (/guava/src/com/google/common/graph/ForwardingGraph.java)/**
 * A class to allow {@link Graph} implementations to be backed by a {@link BaseGraph}. This is not
 * currently planned to be released as a general-purpose forwarding class.
 *
 * @author James Sexton
 */
ForwardingNetwork (/guava/src/com/google/common/graph/ForwardingNetwork.java)/**
 * A class to allow {@link Network} implementations to be backed by a provided delegate. This is not
 * currently planned to be released as a general-purpose forwarding class.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 */
ForwardingValueGraph (/guava/src/com/google/common/graph/ForwardingValueGraph.java)/**
 * A class to allow {@link ValueGraph} implementations to be backed by a provided delegate. This is
 * not currently planned to be released as a general-purpose forwarding class.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 */
Graph (/guava/src/com/google/common/graph/Graph.java)/**
 * An interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data,
 * whose edges are anonymous entities with no identity or information of their own.
 *
 * <p>A graph is composed of a set of nodes and a set of edges connecting pairs of nodes.
 *
 * <p>There are three primary interfaces provided to represent graphs. In order of increasing
 * complexity they are: {@link Graph}, {@link ValueGraph}, and {@link Network}. You should generally
 * prefer the simplest interface that satisfies your use case. See the <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#choosing-the-right-graph-type">
 * "Choosing the right graph type"</a> section of the Guava User Guide for more details.
 *
 * <h3>Capabilities</h3>
 *
 * <p>{@code Graph} supports the following use cases (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained#definitions">definitions of
 * terms</a>):
 *
 * <ul>
 *   <li>directed graphs
 *   <li>undirected graphs
 *   <li>graphs that do/don't allow self-loops
 *   <li>graphs whose nodes/edges are insertion-ordered, sorted, or unordered
 * </ul>
 *
 * <p>{@code Graph} explicitly does not support parallel edges, and forbids implementations or
 * extensions with parallel edges. If you need parallel edges, use {@link Network}.
 *
 * <h3>Building a {@code Graph}</h3>
 *
 * <p>The implementation classes that {@code common.graph} provides are not public, by design. To
 * create an instance of one of the built-in implementations of {@code Graph}, use the {@link
 * GraphBuilder} class:
 *
 * <pre>{@code
 * MutableGraph<Integer> graph = GraphBuilder.undirected().build();
 * }</pre>
 *
 * <p>{@link GraphBuilder#build()} returns an instance of {@link MutableGraph}, which is a subtype
 * of {@code Graph} that provides methods for adding and removing nodes and edges. If you do not
 * need to mutate a graph (e.g. if you write a method than runs a read-only algorithm on the graph),
 * you should use the non-mutating {@link Graph} interface, or an {@link ImmutableGraph}.
 *
 * <p>You can create an immutable copy of an existing {@code Graph} using {@link
 * ImmutableGraph#copyOf(Graph)}:
 *
 * <pre>{@code
 * ImmutableGraph<Integer> immutableGraph = ImmutableGraph.copyOf(graph);
 * }</pre>
 *
 * <p>Instances of {@link ImmutableGraph} do not implement {@link MutableGraph} (obviously!) and are
 * contractually guaranteed to be unmodifiable and thread-safe.
 *
 * <p>The Guava User Guide has <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#building-graph-instances">more
 * information on (and examples of) building graphs</a>.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including:
 *
 * <ul>
 *   <li><a
 *       href="https://github.com/google/guava/wiki/GraphsExplained#equals-hashcode-and-graph-equivalence">
 *       {@code equals()}, {@code hashCode()}, and graph equivalence</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#synchronization">
 *       Synchronization policy</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">Notes
 *       for implementors</a>
 * </ul>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @since 20.0
 */
GraphBuilder (/guava/src/com/google/common/graph/GraphBuilder.java)/**
 * A builder for constructing instances of {@link MutableGraph} or {@link ImmutableGraph} with
 * user-defined properties.
 *
 * <p>A graph built by this class will have the following properties by default:
 *
 * <ul>
 *   <li>does not allow self-loops
 *   <li>orders {@link Graph#nodes()} in the order in which the elements were added
 * </ul>
 *
 * <p>Examples of use:
 *
 * <pre>{@code
 * // Building a mutable graph
 * MutableGraph<String> graph = GraphBuilder.undirected().allowsSelfLoops(true).build();
 * graph.putEdge("bread", "bread");
 * graph.putEdge("chocolate", "peanut butter");
 * graph.putEdge("peanut butter", "jelly");
 *
 * // Building an immutable graph
 * ImmutableGraph<String> immutableGraph =
 *     GraphBuilder.undirected()
 *         .allowsSelfLoops(true)
 *         .<String>immutable()
 *         .putEdge("bread", "bread")
 *         .putEdge("chocolate", "peanut butter")
 *         .putEdge("peanut butter", "jelly")
 *         .build();
 * }</pre>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> The most general node type this builder will support. This is normally {@code Object}
 *     unless it is constrained by using a method like {@link #nodeOrder}, or the builder is
 *     constructed based on an existing {@code Graph} using {@link #from(Graph)}.
 * @since 20.0
 */
GraphConnections (/guava/src/com/google/common/graph/GraphConnections.java)/**
 * An interface for representing and manipulating an origin node's adjacent nodes and edge values in
 * a {@link Graph}.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
GraphConstants (/guava/src/com/google/common/graph/GraphConstants.java)/** A utility class to hold various constants used by the Guava Graph library. */
Graphs (/guava/src/com/google/common/graph/Graphs.java)/**
 * Static utility methods for {@link Graph}, {@link ValueGraph}, and {@link Network} instances.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @since 20.0
 */
Builder (/guava/src/com/google/common/graph/ImmutableGraph.java)/**
   * A builder for creating {@link ImmutableGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableGraph<Country> COUNTRY_ADJACENCY_GRAPH =
   *     GraphBuilder.undirected()
   *         .<Country>immutable()
   *         .putEdge(FRANCE, GERMANY)
   *         .putEdge(FRANCE, BELGIUM)
   *         .putEdge(GERMANY, BELGIUM)
   *         .addNode(ICELAND)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */
ImmutableGraph (/guava/src/com/google/common/graph/ImmutableGraph.java)/**
 * A {@link Graph} whose elements and structural relationships will never change. Instances of this
 * class may be obtained with {@link #copyOf(Graph)}.
 *
 * <p>See the Guava User's Guide's <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#immutable-implementations">discussion
 * of the {@code Immutable*} types</a> for more information on the properties and guarantees
 * provided by this class.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @since 20.0
 */
Builder (/guava/src/com/google/common/graph/ImmutableNetwork.java)/**
   * A builder for creating {@link ImmutableNetwork} instances, especially {@code static final}
   * networks. Example:
   *
   * <pre>{@code
   * static final ImmutableNetwork<City, Train> TRAIN_NETWORK =
   *     NetworkBuilder.undirected()
   *         .allowsParallelEdges(true)
   *         .<City, Train>immutable()
   *         .addEdge(PARIS, BRUSSELS, Thalys.trainNumber("1111"))
   *         .addEdge(PARIS, BRUSSELS, RegionalTrain.trainNumber("2222"))
   *         .addEdge(LONDON, PARIS, Eurostar.trainNumber("3333"))
   *         .addEdge(LONDON, BRUSSELS, Eurostar.trainNumber("4444"))
   *         .addNode(REYKJAVIK)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple networks in series. Each new network contains all the elements of the ones created
   * before it.
   *
   * @since 28.0
   */
ImmutableNetwork (/guava/src/com/google/common/graph/ImmutableNetwork.java)/**
 * A {@link Network} whose elements and structural relationships will never change. Instances of
 * this class may be obtained with {@link #copyOf(Network)}.
 *
 * <p>See the Guava User's Guide's <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#immutable-implementations">discussion
 * of the {@code Immutable*} types</a> for more information on the properties and guarantees
 * provided by this class.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 * @since 20.0
 */
Builder (/guava/src/com/google/common/graph/ImmutableValueGraph.java)/**
   * A builder for creating {@link ImmutableValueGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableValueGraph<City, Distance> CITY_ROAD_DISTANCE_GRAPH =
   *     ValueGraphBuilder.undirected()
   *         .<City, Distance>immutable()
   *         .putEdgeValue(PARIS, BERLIN, kilometers(1060))
   *         .putEdgeValue(PARIS, BRUSSELS, kilometers(317))
   *         .putEdgeValue(BERLIN, BRUSSELS, kilometers(764))
   *         .addNode(REYKJAVIK)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */
ImmutableValueGraph (/guava/src/com/google/common/graph/ImmutableValueGraph.java)/**
 * A {@link ValueGraph} whose elements and structural relationships will never change. Instances of
 * this class may be obtained with {@link #copyOf(ValueGraph)}.
 *
 * <p>See the Guava User's Guide's <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#immutable-implementations">discussion
 * of the {@code Immutable*} types</a> for more information on the properties and guarantees
 * provided by this class.
 *
 * @author James Sexton
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 * @since 20.0
 */
MapIteratorCache (/guava/src/com/google/common/graph/MapIteratorCache.java)/**
 * A map-like data structure that wraps a backing map and caches values while iterating through
 * {@link #unmodifiableKeySet()}. By design, the cache is cleared when this structure is mutated. If
 * this structure is never mutated, it provides a thread-safe view of the backing map.
 *
 * <p>The {@link MapIteratorCache} assumes ownership of the backing map, and cannot guarantee
 * correctness in the face of external mutations to the backing map. As such, it is <b>strongly</b>
 * recommended that the caller does not persist a reference to the backing map (unless the backing
 * map is immutable).
 *
 * <p>This class is tailored toward use cases in common.graph. It is *NOT* a general purpose map.
 *
 * @author James Sexton
 */
MapRetrievalCache (/guava/src/com/google/common/graph/MapRetrievalCache.java)/**
 * A {@link MapIteratorCache} that adds additional caching. In addition to the caching provided by
 * {@link MapIteratorCache}, this structure caches values for the two most recently retrieved keys.
 *
 * @author James Sexton
 */
MultiEdgesConnecting (/guava/src/com/google/common/graph/MultiEdgesConnecting.java)/**
 * A class to represent the set of edges connecting an (implicit) origin node to a target node.
 *
 * <p>The {@link #outEdgeToNode} map allows this class to work on networks with parallel edges. See
 * {@link EdgesConnecting} for a class that is more efficient but forbids parallel edges.
 *
 * @author James Sexton
 * @param <E> Edge parameter type
 */
MutableGraph (/guava/src/com/google/common/graph/MutableGraph.java)/**
 * A subinterface of {@link Graph} which adds mutation methods. When mutation is not required, users
 * should prefer the {@link Graph} interface.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @since 20.0
 */
MutableNetwork (/guava/src/com/google/common/graph/MutableNetwork.java)/**
 * A subinterface of {@link Network} which adds mutation methods. When mutation is not required,
 * users should prefer the {@link Network} interface.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 * @since 20.0
 */
MutableValueGraph (/guava/src/com/google/common/graph/MutableValueGraph.java)/**
 * A subinterface of {@link ValueGraph} which adds mutation methods. When mutation is not required,
 * users should prefer the {@link ValueGraph} interface.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 * @since 20.0
 */
Network (/guava/src/com/google/common/graph/Network.java)/**
 * An interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data,
 * whose edges are unique objects.
 *
 * <p>A graph is composed of a set of nodes and a set of edges connecting pairs of nodes.
 *
 * <p>There are three primary interfaces provided to represent graphs. In order of increasing
 * complexity they are: {@link Graph}, {@link ValueGraph}, and {@link Network}. You should generally
 * prefer the simplest interface that satisfies your use case. See the <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#choosing-the-right-graph-type">
 * "Choosing the right graph type"</a> section of the Guava User Guide for more details.
 *
 * <h3>Capabilities</h3>
 *
 * <p>{@code Network} supports the following use cases (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained#definitions">definitions of
 * terms</a>):
 *
 * <ul>
 *   <li>directed graphs
 *   <li>undirected graphs
 *   <li>graphs that do/don't allow parallel edges
 *   <li>graphs that do/don't allow self-loops
 *   <li>graphs whose nodes/edges are insertion-ordered, sorted, or unordered
 *   <li>graphs whose edges are unique objects
 * </ul>
 *
 * <h3>Building a {@code Network}</h3>
 *
 * <p>The implementation classes that {@code common.graph} provides are not public, by design. To
 * create an instance of one of the built-in implementations of {@code Network}, use the {@link
 * NetworkBuilder} class:
 *
 * <pre>{@code
 * MutableNetwork<Integer, MyEdge> graph = NetworkBuilder.directed().build();
 * }</pre>
 *
 * <p>{@link NetworkBuilder#build()} returns an instance of {@link MutableNetwork}, which is a
 * subtype of {@code Network} that provides methods for adding and removing nodes and edges. If you
 * do not need to mutate a graph (e.g. if you write a method than runs a read-only algorithm on the
 * graph), you should use the non-mutating {@link Network} interface, or an {@link
 * ImmutableNetwork}.
 *
 * <p>You can create an immutable copy of an existing {@code Network} using {@link
 * ImmutableNetwork#copyOf(Network)}:
 *
 * <pre>{@code
 * ImmutableNetwork<Integer, MyEdge> immutableGraph = ImmutableNetwork.copyOf(graph);
 * }</pre>
 *
 * <p>Instances of {@link ImmutableNetwork} do not implement {@link MutableNetwork} (obviously!) and
 * are contractually guaranteed to be unmodifiable and thread-safe.
 *
 * <p>The Guava User Guide has <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#building-graph-instances">more
 * information on (and examples of) building graphs</a>.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including:
 *
 * <ul>
 *   <li><a
 *       href="https://github.com/google/guava/wiki/GraphsExplained#equals-hashcode-and-graph-equivalence">
 *       {@code equals()}, {@code hashCode()}, and graph equivalence</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#synchronization">
 *       Synchronization policy</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">Notes
 *       for implementors</a>
 * </ul>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 * @since 20.0
 */
NetworkBuilder (/guava/src/com/google/common/graph/NetworkBuilder.java)/**
 * A builder for constructing instances of {@link MutableNetwork} or {@link ImmutableNetwork} with
 * user-defined properties.
 *
 * <p>A network built by this class will have the following properties by default:
 *
 * <ul>
 *   <li>does not allow parallel edges
 *   <li>does not allow self-loops
 *   <li>orders {@link Network#nodes()} and {@link Network#edges()} in the order in which the
 *       elements were added
 * </ul>
 *
 * <p>Examples of use:
 *
 * <pre>{@code
 * // Building a mutable network
 * MutableNetwork<String, Integer> network =
 *     NetworkBuilder.directed().allowsParallelEdges(true).build();
 * flightNetwork.addEdge("LAX", "ATL", 3025);
 * flightNetwork.addEdge("LAX", "ATL", 1598);
 * flightNetwork.addEdge("ATL", "LAX", 2450);
 *
 * // Building a immutable network
 * ImmutableNetwork<String, Integer> immutableNetwork =
 *     NetworkBuilder.directed()
 *         .allowsParallelEdges(true)
 *         .<String, Integer>immutable()
 *         .addEdge("LAX", "ATL", 3025)
 *         .addEdge("LAX", "ATL", 1598)
 *         .addEdge("ATL", "LAX", 2450)
 *         .build();
 * }</pre>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> The most general node type this builder will support. This is normally {@code Object}
 *     unless it is constrained by using a method like {@link #nodeOrder}, or the builder is
 *     constructed based on an existing {@code Network} using {@link #from(Network)}.
 * @param <N> The most general edge type this builder will support. This is normally {@code Object}
 *     unless it is constrained by using a method like {@link #edgeOrder}, or the builder is
 *     constructed based on an existing {@code Network} using {@link #from(Network)}.
 * @since 20.0
 */
NetworkConnections (/guava/src/com/google/common/graph/NetworkConnections.java)/**
 * An interface for representing and manipulating an origin node's adjacent nodes and incident edges
 * in a {@link Network}.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
PredecessorsFunction (/guava/src/com/google/common/graph/PredecessorsFunction.java)/**
 * A functional interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data.
 *
 * <p>This interface is meant to be used as the type of a parameter to graph algorithms (such as
 * topological sort) that only need a way of accessing the predecessors of a node in a graph.
 *
 * <h3>Usage</h3>
 *
 * Given an algorithm, for example:
 *
 * <pre>{@code
 * public <N> someGraphAlgorithm(N startNode, PredecessorsFunction<N> predecessorsFunction);
 * }</pre>
 *
 * you will invoke it depending on the graph representation you're using.
 *
 * <p>If you have an instance of one of the primary {@code common.graph} types ({@link Graph},
 * {@link ValueGraph}, and {@link Network}):
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, graph);
 * }</pre>
 *
 * This works because those types each implement {@code PredecessorsFunction}. It will also work
 * with any other implementation of this interface.
 *
 * <p>If you have your own graph implementation based around a custom node type {@code MyNode},
 * which has a method {@code getParents()} that retrieves its predecessors in a graph:
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, MyNode::getParents);
 * }</pre>
 *
 * <p>If you have some other mechanism for returning the predecessors of a node, or one that doesn't
 * return a {@code Iterable<? extends N>}, then you can use a lambda to perform a more general
 * transformation:
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, node -> ImmutableList.of(node.mother(), node.father()));
 * }</pre>
 *
 * <p>Graph algorithms that need additional capabilities (accessing both predecessors and
 * successors, iterating over the edges, etc.) should declare their input to be of a type that
 * provides those capabilities, such as {@link Graph}, {@link ValueGraph}, or {@link Network}.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">notes for
 * implementors</a>
 *
 * @author Joshua O'Madadhain
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @since 23.0
 */
SuccessorsFunction (/guava/src/com/google/common/graph/SuccessorsFunction.java)/**
 * A functional interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data.
 *
 * <p>This interface is meant to be used as the type of a parameter to graph algorithms (such as
 * breadth first traversal) that only need a way of accessing the successors of a node in a graph.
 *
 * <h3>Usage</h3>
 *
 * Given an algorithm, for example:
 *
 * <pre>{@code
 * public <N> someGraphAlgorithm(N startNode, SuccessorsFunction<N> successorsFunction);
 * }</pre>
 *
 * you will invoke it depending on the graph representation you're using.
 *
 * <p>If you have an instance of one of the primary {@code common.graph} types ({@link Graph},
 * {@link ValueGraph}, and {@link Network}):
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, graph);
 * }</pre>
 *
 * This works because those types each implement {@code SuccessorsFunction}. It will also work with
 * any other implementation of this interface.
 *
 * <p>If you have your own graph implementation based around a custom node type {@code MyNode},
 * which has a method {@code getChildren()} that retrieves its successors in a graph:
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, MyNode::getChildren);
 * }</pre>
 *
 * <p>If you have some other mechanism for returning the successors of a node, or one that doesn't
 * return an {@code Iterable<? extends N>}, then you can use a lambda to perform a more general
 * transformation:
 *
 * <pre>{@code
 * someGraphAlgorithm(startNode, node -> ImmutableList.of(node.leftChild(), node.rightChild()));
 * }</pre>
 *
 * <p>Graph algorithms that need additional capabilities (accessing both predecessors and
 * successors, iterating over the edges, etc.) should declare their input to be of a type that
 * provides those capabilities, such as {@link Graph}, {@link ValueGraph}, or {@link Network}.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">notes for
 * implementors</a>
 *
 * @author Joshua O'Madadhain
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @since 23.0
 */
NodeAndSuccessors (/guava/src/com/google/common/graph/Traverser.java)/** A simple tuple of a node and a partially iterated {@link Iterator} of its successors. */
NodeAndChildren (/guava/src/com/google/common/graph/Traverser.java)/** A simple tuple of a node and a partially iterated {@link Iterator} of its children. */
Traverser (/guava/src/com/google/common/graph/Traverser.java)/**
 * An object that can traverse the nodes that are reachable from a specified (set of) start node(s)
 * using a specified {@link SuccessorsFunction}.
 *
 * <p>There are two entry points for creating a {@code Traverser}: {@link
 * #forTree(SuccessorsFunction)} and {@link #forGraph(SuccessorsFunction)}. You should choose one
 * based on your answers to the following questions:
 *
 * <ol>
 *   <li>Is there only one path to any node that's reachable from any start node? (If so, the graph
 *       to be traversed is a tree or forest even if it is a subgraph of a graph which is neither.)
 *   <li>Are the node objects' implementations of {@code equals()}/{@code hashCode()} <a
 *       href="https://github.com/google/guava/wiki/GraphsExplained#non-recursiveness">recursive</a>?
 * </ol>
 *
 * <p>If your answers are:
 *
 * <ul>
 *   <li>(1) "no" and (2) "no", use {@link #forGraph(SuccessorsFunction)}.
 *   <li>(1) "yes" and (2) "yes", use {@link #forTree(SuccessorsFunction)}.
 *   <li>(1) "yes" and (2) "no", you can use either, but {@code forTree()} will be more efficient.
 *   <li>(1) "no" and (2) "yes", <b><i>neither will work</i></b>, but if you transform your node
 *       objects into a non-recursive form, you can use {@code forGraph()}.
 * </ul>
 *
 * @author Jens Nyman
 * @param <N> Node parameter type
 * @since 23.1
 */
UndirectedGraphConnections (/guava/src/com/google/common/graph/UndirectedGraphConnections.java)/**
 * An implementation of {@link GraphConnections} for undirected graphs.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */
UndirectedMultiNetworkConnections (/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java)/**
 * An implementation of {@link NetworkConnections} for undirected networks with parallel edges.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
UndirectedNetworkConnections (/guava/src/com/google/common/graph/UndirectedNetworkConnections.java)/**
 * An implementation of {@link NetworkConnections} for undirected networks.
 *
 * @author James Sexton
 * @param <N> Node parameter type
 * @param <E> Edge parameter type
 */
ValueGraph (/guava/src/com/google/common/graph/ValueGraph.java)/**
 * An interface for <a
 * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data,
 * whose edges have associated non-unique values.
 *
 * <p>A graph is composed of a set of nodes and a set of edges connecting pairs of nodes.
 *
 * <p>There are three primary interfaces provided to represent graphs. In order of increasing
 * complexity they are: {@link Graph}, {@link ValueGraph}, and {@link Network}. You should generally
 * prefer the simplest interface that satisfies your use case. See the <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#choosing-the-right-graph-type">
 * "Choosing the right graph type"</a> section of the Guava User Guide for more details.
 *
 * <h3>Capabilities</h3>
 *
 * <p>{@code ValueGraph} supports the following use cases (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained#definitions">definitions of
 * terms</a>):
 *
 * <ul>
 *   <li>directed graphs
 *   <li>undirected graphs
 *   <li>graphs that do/don't allow self-loops
 *   <li>graphs whose nodes/edges are insertion-ordered, sorted, or unordered
 *   <li>graphs whose edges have associated values
 * </ul>
 *
 * <p>{@code ValueGraph}, as a subtype of {@code Graph}, explicitly does not support parallel edges,
 * and forbids implementations or extensions with parallel edges. If you need parallel edges, use
 * {@link Network}. (You can use a positive {@code Integer} edge value as a loose representation of
 * edge multiplicity, but the {@code *degree()} and mutation methods will not reflect your
 * interpretation of the edge value as its multiplicity.)
 *
 * <h3>Building a {@code ValueGraph}</h3>
 *
 * <p>The implementation classes that {@code common.graph} provides are not public, by design. To
 * create an instance of one of the built-in implementations of {@code ValueGraph}, use the {@link
 * ValueGraphBuilder} class:
 *
 * <pre>{@code
 * MutableValueGraph<Integer, Double> graph = ValueGraphBuilder.directed().build();
 * }</pre>
 *
 * <p>{@link ValueGraphBuilder#build()} returns an instance of {@link MutableValueGraph}, which is a
 * subtype of {@code ValueGraph} that provides methods for adding and removing nodes and edges. If
 * you do not need to mutate a graph (e.g. if you write a method than runs a read-only algorithm on
 * the graph), you should use the non-mutating {@link ValueGraph} interface, or an {@link
 * ImmutableValueGraph}.
 *
 * <p>You can create an immutable copy of an existing {@code ValueGraph} using {@link
 * ImmutableValueGraph#copyOf(ValueGraph)}:
 *
 * <pre>{@code
 * ImmutableValueGraph<Integer, Double> immutableGraph = ImmutableValueGraph.copyOf(graph);
 * }</pre>
 *
 * <p>Instances of {@link ImmutableValueGraph} do not implement {@link MutableValueGraph}
 * (obviously!) and are contractually guaranteed to be unmodifiable and thread-safe.
 *
 * <p>The Guava User Guide has <a
 * href="https://github.com/google/guava/wiki/GraphsExplained#building-graph-instances">more
 * information on (and examples of) building graphs</a>.
 *
 * <h3>Additional documentation</h3>
 *
 * <p>See the Guava User Guide for the {@code common.graph} package (<a
 * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for
 * additional documentation, including:
 *
 * <ul>
 *   <li><a
 *       href="https://github.com/google/guava/wiki/GraphsExplained#equals-hashcode-and-graph-equivalence">
 *       {@code equals()}, {@code hashCode()}, and graph equivalence</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#synchronization">
 *       Synchronization policy</a>
 *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">Notes
 *       for implementors</a>
 * </ul>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 * @since 20.0
 */
ValueGraphBuilder (/guava/src/com/google/common/graph/ValueGraphBuilder.java)/**
 * A builder for constructing instances of {@link MutableValueGraph} or {@link ImmutableValueGraph}
 * with user-defined properties.
 *
 * <p>A graph built by this class will have the following properties by default:
 *
 * <ul>
 *   <li>does not allow self-loops
 *   <li>orders {@link Graph#nodes()} in the order in which the elements were added
 * </ul>
 *
 * <p>Examples of use:
 *
 * <pre>{@code
 * // Building a mutable value graph
 * MutableValueGraph<String, Double> graph =
 *     ValueGraphBuilder.undirected().allowsSelfLoops(true).build();
 * graph.putEdgeValue("San Francisco", "San Francisco", 0.0);
 * graph.putEdgeValue("San Jose", "San Jose", 0.0);
 * graph.putEdgeValue("San Francisco", "San Jose", 48.4);
 *
 * // Building an immutable value graph
 * ImmutableValueGraph<String, Double> immutableGraph =
 *     ValueGraphBuilder.undirected()
 *         .allowsSelfLoops(true)
 *         .<String, Double>immutable()
 *         .putEdgeValue("San Francisco", "San Francisco", 0.0)
 *         .putEdgeValue("San Jose", "San Jose", 0.0)
 *         .putEdgeValue("San Francisco", "San Jose", 48.4)
 *         .build();
 * }</pre>
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @param <N> The most general node type this builder will support. This is normally {@code Object}
 *     unless it is constrained by using a method like {@link #nodeOrder}, or the builder is
 *     constructed based on an existing {@code ValueGraph} using {@link #from(ValueGraph)}.
 * @param <V> The most general value type this builder will support. This is normally {@code Object}
 *     unless the builder is constructed based on an existing {@code Graph} using {@link
 *     #from(ValueGraph)}.
 * @since 20.0
 */
AbstractByteHasher (/guava/src/com/google/common/hash/AbstractByteHasher.java)/**
 * Abstract {@link Hasher} that handles converting primitives to bytes using a scratch {@code
 * ByteBuffer} and streams all bytes to a sink to compute the hash.
 *
 * @author Colin Decker
 */
AbstractCompositeHashFunction (/guava/src/com/google/common/hash/AbstractCompositeHashFunction.java)/**
 * An abstract composition of multiple hash functions. {@linkplain #newHasher()} delegates to the
 * {@code Hasher} objects of the delegate hash functions, and in the end, they are used by
 * {@linkplain #makeHash(Hasher[])} that constructs the final {@code HashCode}.
 *
 * @author Dimitris Andreou
 */
AbstractHasher (/guava/src/com/google/common/hash/AbstractHasher.java)/**
 * An abstract implementation of {@link Hasher}, which only requires subtypes to implement {@link
 * #putByte}. Subtypes may provide more efficient implementations, however.
 *
 * @author Dimitris Andreou
 */
AbstractHashFunction (/guava/src/com/google/common/hash/AbstractHashFunction.java)/**
 * Skeleton implementation of {@link HashFunction} in terms of {@link #newHasher()}.
 *
 * <p>TODO(lowasser): make public
 */
BufferingHasher (/guava/src/com/google/common/hash/AbstractNonStreamingHashFunction.java)/** In-memory stream-based implementation of Hasher. */
AbstractNonStreamingHashFunction (/guava/src/com/google/common/hash/AbstractNonStreamingHashFunction.java)/**
 * Skeleton implementation of {@link HashFunction}, appropriate for non-streaming algorithms. All
 * the hash computation done using {@linkplain #newHasher()} are delegated to the {@linkplain
 * #hashBytes(byte[], int, int)} method.
 *
 * @author Dimitris Andreou
 */
Strategy (/guava/src/com/google/common/hash/BloomFilter.java)/**
   * A strategy to translate T instances, to {@code numHashFunctions} bit indexes.
   *
   * <p>Implementations should be collections of pure functions (i.e. stateless).
   */
BloomFilter (/guava/src/com/google/common/hash/BloomFilter.java)/**
 * A Bloom filter for instances of {@code T}. A Bloom filter offers an approximate containment test
 * with one-sided error: if it claims that an element is contained in it, this might be in error,
 * but if it claims that an element is <i>not</i> contained in it, then this is definitely true.
 *
 * <p>If you are unfamiliar with Bloom filters, this nice <a
 * href="http://llimllib.github.com/bloomfilter-tutorial/">tutorial</a> may help you understand how
 * they work.
 *
 * <p>The false positive probability ({@code FPP}) of a Bloom filter is defined as the probability
 * that {@linkplain #mightContain(Object)} will erroneously return {@code true} for an object that
 * has not actually been put in the {@code BloomFilter}.
 *
 * <p>Bloom filters are serializable. They also support a more compact serial representation via the
 * {@link #writeTo} and {@link #readFrom} methods. Both serialized forms will continue to be
 * supported by future versions of this library. However, serial forms generated by newer versions
 * of the code may not be readable by older versions of the code (e.g., a serialized Bloom filter
 * generated today may <i>not</i> be readable by a binary that was compiled 6 months ago).
 *
 * <p>As of Guava 23.0, this class is thread-safe and lock-free. It internally uses atomics and
 * compare-and-swap to ensure correctness when multiple threads are used to access it.
 *
 * @param <T> the type of instances that the {@code BloomFilter} accepts
 * @author Dimitris Andreou
 * @author Kevin Bourrillion
 * @since 11.0 (thread-safe since 23.0)
 */
LockFreeBitArray (/guava/src/com/google/common/hash/BloomFilterStrategies.java)/**
   * Models a lock-free array of bits.
   *
   * <p>We use this instead of java.util.BitSet because we need access to the array of longs and we
   * need compare-and-swap.
   */
ChecksumHasher (/guava/src/com/google/common/hash/ChecksumHashFunction.java)/** Hasher that updates a checksum. */
ChecksumHashFunction (/guava/src/com/google/common/hash/ChecksumHashFunction.java)/**
 * {@link HashFunction} adapter for {@link Checksum} instances.
 *
 * @author Colin Decker
 */
Crc32cHashFunction (/guava/src/com/google/common/hash/Crc32cHashFunction.java)/**
 * This class generates a CRC32C checksum, defined by RFC 3720, Section 12.1. The generator
 * polynomial for this checksum is {@code 0x11EDC6F41}.
 *
 * @author Kurt Alfred Kluever
 */
FarmHashFingerprint64 (/guava/src/com/google/common/hash/FarmHashFingerprint64.java)/**
 * Implementation of FarmHash Fingerprint64, an open-source fingerprinting algorithm for strings.
 *
 * <p>Its speed is comparable to CityHash64, and its quality of hashing is at least as good.
 *
 * <p>Note to maintainers: This implementation relies on signed arithmetic being bit-wise equivalent
 * to unsigned arithmetic in all cases except:
 *
 * <ul>
 *   <li>comparisons (signed values can be negative)
 *   <li>division (avoided here)
 *   <li>shifting (right shift must be unsigned)
 * </ul>
 *
 * @author Kyle Maddison
 * @author Geoff Pike
 */
Funnel (/guava/src/com/google/common/hash/Funnel.java)/**
 * An object which can send data from an object of type {@code T} into a {@code PrimitiveSink}.
 * Implementations for common types can be found in {@link Funnels}.
 *
 * <p>Note that serialization of {@linkplain BloomFilter bloom filters} requires the proper
 * serialization of funnels. When possible, it is recommended that funnels be implemented as a
 * single-element enum to maintain serialization guarantees. See Effective Java (2nd Edition), Item
 * 3: "Enforce the singleton property with a private constructor or an enum type". For example:
 *
 * <pre>{@code
 * public enum PersonFunnel implements Funnel<Person> {
 *   INSTANCE;
 *   public void funnel(Person person, PrimitiveSink into) {
 *     into.putUnencodedChars(person.getFirstName())
 *         .putUnencodedChars(person.getLastName())
 *         .putInt(person.getAge());
 *   }
 * }
 * }</pre>
 *
 * @author Dimitris Andreou
 * @since 11.0
 */
Funnels (/guava/src/com/google/common/hash/Funnels.java)/**
 * Funnels for common types. All implementations are serializable.
 *
 * @author Dimitris Andreou
 * @since 11.0
 */
HashCode (/guava/src/com/google/common/hash/HashCode.java)/**
 * An immutable hash code of arbitrary bit length.
 *
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 * @since 11.0
 */
Hasher (/guava/src/com/google/common/hash/Hasher.java)/**
 * A {@link PrimitiveSink} that can compute a hash code after reading the input. Each hasher should
 * translate all multibyte values ({@link #putInt(int)}, {@link #putLong(long)}, etc) to bytes in
 * little-endian order.
 *
 * <p><b>Warning:</b> The result of calling any methods after calling {@link #hash} is undefined.
 *
 * <p><b>Warning:</b> Using a specific character encoding when hashing a {@link CharSequence} with
 * {@link #putString(CharSequence, Charset)} is generally only useful for cross-language
 * compatibility (otherwise prefer {@link #putUnencodedChars}). However, the character encodings
 * must be identical across languages. Also beware that {@link Charset} definitions may occasionally
 * change between Java releases.
 *
 * <p><b>Warning:</b> Chunks of data that are put into the {@link Hasher} are not delimited. The
 * resulting {@link HashCode} is dependent only on the bytes inserted, and the order in which they
 * were inserted, not how those bytes were chunked into discrete put() operations. For example, the
 * following three expressions all generate colliding hash codes:
 *
 * <pre>{@code
 * newHasher().putByte(b1).putByte(b2).putByte(b3).hash()
 * newHasher().putByte(b1).putBytes(new byte[] { b2, b3 }).hash()
 * newHasher().putBytes(new byte[] { b1, b2, b3 }).hash()
 * }</pre>
 *
 * <p>If you wish to avoid this, you should either prepend or append the size of each chunk. Keep in
 * mind that when dealing with char sequences, the encoded form of two concatenated char sequences
 * is not equivalent to the concatenation of their encoded form. Therefore, {@link
 * #putString(CharSequence, Charset)} should only be used consistently with <i>complete</i>
 * sequences and not broken into chunks.
 *
 * @author Kevin Bourrillion
 * @since 11.0
 */
HashFunction (/guava/src/com/google/common/hash/HashFunction.java)/**
 * A hash function is a collision-averse pure function that maps an arbitrary block of data to a
 * number called a <i>hash code</i>.
 *
 * <h3>Definition</h3>
 *
 * <p>Unpacking this definition:
 *
 * <ul>
 *   <li><b>block of data:</b> the input for a hash function is always, in concept, an ordered byte
 *       array. This hashing API accepts an arbitrary sequence of byte and multibyte values (via
 *       {@link Hasher}), but this is merely a convenience; these are always translated into raw
 *       byte sequences under the covers.
 *   <li><b>hash code:</b> each hash function always yields hash codes of the same fixed bit length
 *       (given by {@link #bits}). For example, {@link Hashing#sha1} produces a 160-bit number,
 *       while {@link Hashing#murmur3_32()} yields only 32 bits. Because a {@code long} value is
 *       clearly insufficient to hold all hash code values, this API represents a hash code as an
 *       instance of {@link HashCode}.
 *   <li><b>pure function:</b> the value produced must depend only on the input bytes, in the order
 *       they appear. Input data is never modified. {@link HashFunction} instances should always be
 *       stateless, and therefore thread-safe.
 *   <li><b>collision-averse:</b> while it can't be helped that a hash function will sometimes
 *       produce the same hash code for distinct inputs (a "collision"), every hash function strives
 *       to <i>some</i> degree to make this unlikely. (Without this condition, a function that
 *       always returns zero could be called a hash function. It is not.)
 * </ul>
 *
 * <p>Summarizing the last two points: "equal yield equal <i>always</i>; unequal yield unequal
 * <i>often</i>." This is the most important characteristic of all hash functions.
 *
 * <h3>Desirable properties</h3>
 *
 * <p>A high-quality hash function strives for some subset of the following virtues:
 *
 * <ul>
 *   <li><b>collision-resistant:</b> while the definition above requires making at least <i>some</i>
 *       token attempt, one measure of the quality of a hash function is <i>how well</i> it succeeds
 *       at this goal. Important note: it may be easy to achieve the theoretical minimum collision
 *       rate when using completely <i>random</i> sample input. The true test of a hash function is
 *       how it performs on representative real-world data, which tends to contain many hidden
 *       patterns and clumps. The goal of a good hash function is to stamp these patterns out as
 *       thoroughly as possible.
 *   <li><b>bit-dispersing:</b> masking out any <i>single bit</i> from a hash code should yield only
 *       the expected <i>twofold</i> increase to all collision rates. Informally, the "information"
 *       in the hash code should be as evenly "spread out" through the hash code's bits as possible.
 *       The result is that, for example, when choosing a bucket in a hash table of size 2^8,
 *       <i>any</i> eight bits could be consistently used.
 *   <li><b>cryptographic:</b> certain hash functions such as {@link Hashing#sha512} are designed to
 *       make it as infeasible as possible to reverse-engineer the input that produced a given hash
 *       code, or even to discover <i>any</i> two distinct inputs that yield the same result. These
 *       are called <i>cryptographic hash functions</i>. But, whenever it is learned that either of
 *       these feats has become computationally feasible, the function is deemed "broken" and should
 *       no longer be used for secure purposes. (This is the likely eventual fate of <i>all</i>
 *       cryptographic hashes.)
 *   <li><b>fast:</b> perhaps self-explanatory, but often the most important consideration.
 * </ul>
 *
 * <h3>Providing input to a hash function</h3>
 *
 * <p>The primary way to provide the data that your hash function should act on is via a {@link
 * Hasher}. Obtain a new hasher from the hash function using {@link #newHasher}, "push" the relevant
 * data into it using methods like {@link Hasher#putBytes(byte[])}, and finally ask for the {@code
 * HashCode} when finished using {@link Hasher#hash}. (See an {@linkplain #newHasher example} of
 * this.)
 *
 * <p>If all you want to hash is a single byte array, string or {@code long} value, there are
 * convenient shortcut methods defined directly on {@link HashFunction} to make this easier.
 *
 * <p>Hasher accepts primitive data types, but can also accept any Object of type {@code T} provided
 * that you implement a {@link Funnel}{@code <T>} to specify how to "feed" data from that object
 * into the function. (See {@linkplain Hasher#putObject an example} of this.)
 *
 * <p><b>Compatibility note:</b> Throughout this API, multibyte values are always interpreted in
 * <i>little-endian</i> order. That is, hashing the byte array {@code {0x01, 0x02, 0x03, 0x04}} is
 * equivalent to hashing the {@code int} value {@code 0x04030201}. If this isn't what you need,
 * methods such as {@link Integer#reverseBytes} and {@link Ints#toByteArray} will help.
 *
 * <h3>Relationship to {@link Object#hashCode}</h3>
 *
 * <p>Java's baked-in concept of hash codes is constrained to 32 bits, and provides no separation
 * between hash algorithms and the data they act on, so alternate hash algorithms can't be easily
 * substituted. Also, implementations of {@code hashCode} tend to be poor-quality, in part because
 * they end up depending on <i>other</i> existing poor-quality {@code hashCode} implementations,
 * including those in many JDK classes.
 *
 * <p>{@code Object.hashCode} implementations tend to be very fast, but have weak collision
 * prevention and <i>no</i> expectation of bit dispersion. This leaves them perfectly suitable for
 * use in hash tables, because extra collisions cause only a slight performance hit, while poor bit
 * dispersion is easily corrected using a secondary hash function (which all reasonable hash table
 * implementations in Java use). For the many uses of hash functions beyond data structures,
 * however, {@code Object.hashCode} almost always falls short -- hence this library.
 *
 * @author Kevin Bourrillion
 * @since 11.0
 */
LinearCongruentialGenerator (/guava/src/com/google/common/hash/Hashing.java)/**
   * Linear CongruentialGenerator to use for consistent hashing. See
   * http://en.wikipedia.org/wiki/Linear_congruential_generator
   */
Hashing (/guava/src/com/google/common/hash/Hashing.java)/**
 * Static methods to obtain {@link HashFunction} instances, and other static hashing-related
 * utilities.
 *
 * <p>A comparison of the various hash functions can be found <a
 * href="http://goo.gl/jS7HH">here</a>.
 *
 * @author Kevin Bourrillion
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 * @since 11.0
 */
HashingInputStream (/guava/src/com/google/common/hash/HashingInputStream.java)/**
 * An {@link InputStream} that maintains a hash of the data read from it.
 *
 * @author Qian Huang
 * @since 16.0
 */
HashingOutputStream (/guava/src/com/google/common/hash/HashingOutputStream.java)/**
 * An {@link OutputStream} that maintains a hash of the data written to it.
 *
 * @author Nick Piepmeier
 * @since 16.0
 */
ImmutableSupplier (/guava/src/com/google/common/hash/ImmutableSupplier.java)/**
 * Explicitly named subinterface of {@link Supplier} that can be marked {@literal @}{@link
 * Immutable}.
 */
LittleEndianBytes (/guava/src/com/google/common/hash/LittleEndianByteArray.java)/**
   * Common interface for retrieving a 64-bit long from a little-endian byte array.
   *
   * <p>This abstraction allows us to use single-instruction load and put when available, or fall
   * back on the slower approach of using Longs.fromBytes(byte...).
   */
LittleEndianByteArray (/guava/src/com/google/common/hash/LittleEndianByteArray.java)/**
 * Utility functions for loading and storing values from a byte array.
 *
 * @author Kevin Damm
 * @author Kyle Maddison
 */
LongAddable (/guava/src/com/google/common/hash/LongAddable.java)/**
 * Abstract interface for objects that can concurrently add longs.
 *
 * @author Louis Wasserman
 */
LongAddables (/guava/src/com/google/common/hash/LongAddables.java)/**
 * Source of {@link LongAddable} objects that deals with GWT, Unsafe, and all that.
 *
 * @author Louis Wasserman
 */
LongAdder (/guava/src/com/google/common/hash/LongAdder.java)/**
 * One or more variables that together maintain an initially zero {@code long} sum. When updates
 * (method {@link #add}) are contended across threads, the set of variables may grow dynamically to
 * reduce contention. Method {@link #sum} (or, equivalently, {@link #longValue}) returns the current
 * total combined across the variables maintaining the sum.
 *
 * <p>This class is usually preferable to {@link AtomicLong} when multiple threads update a common
 * sum that is used for purposes such as collecting statistics, not for fine-grained synchronization
 * control. Under low update contention, the two classes have similar characteristics. But under
 * high contention, expected throughput of this class is significantly higher, at the expense of
 * higher space consumption.
 *
 * <p>This class extends {@link Number}, but does <em>not</em> define methods such as {@code
 * equals}, {@code hashCode} and {@code compareTo} because instances are expected to be mutated, and
 * so are not useful as collection keys.
 *
 * <p><em>jsr166e note: This class is targeted to be placed in java.util.concurrent.atomic.</em>
 *
 * @since 1.8
 * @author Doug Lea
 */
MacHasher (/guava/src/com/google/common/hash/MacHashFunction.java)/** Hasher that updates a {@link Mac} (message authentication code). */
MacHashFunction (/guava/src/com/google/common/hash/MacHashFunction.java)/**
 * {@link HashFunction} adapter for {@link Mac} instances.
 *
 * @author Kurt Alfred Kluever
 */
MessageDigestHasher (/guava/src/com/google/common/hash/MessageDigestHashFunction.java)/** Hasher that updates a message digest. */
MessageDigestHashFunction (/guava/src/com/google/common/hash/MessageDigestHashFunction.java)/**
 * {@link HashFunction} adapter for {@link MessageDigest} instances.
 *
 * @author Kevin Bourrillion
 * @author Dimitris Andreou
 */
Murmur3_128HashFunction (/guava/src/com/google/common/hash/Murmur3_128HashFunction.java)/**
 * See MurmurHash3_x64_128 in <a href="http://smhasher.googlecode.com/svn/trunk/MurmurHash3.cpp">the
 * C++ implementation</a>.
 *
 * @author Austin Appleby
 * @author Dimitris Andreou
 */
Murmur3_32HashFunction (/guava/src/com/google/common/hash/Murmur3_32HashFunction.java)/**
 * See MurmurHash3_x86_32 in <a
 * href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">the C++
 * implementation</a>.
 *
 * @author Austin Appleby
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 */
PrimitiveSink (/guava/src/com/google/common/hash/PrimitiveSink.java)/**
 * An object which can receive a stream of primitive values.
 *
 * @author Kevin Bourrillion
 * @since 12.0 (in 11.0 as {@code Sink})
 */
SipHashFunction (/guava/src/com/google/common/hash/SipHashFunction.java)/**
 * {@link HashFunction} implementation of SipHash-c-d.
 *
 * @author Kurt Alfred Kluever
 * @author Jean-Philippe Aumasson
 * @author Daniel J. Bernstein
 */
Cell (/guava/src/com/google/common/hash/Striped64.java)/**
   * Padded variant of AtomicLong supporting only raw accesses plus CAS. The value field is placed
   * between pads, hoping that the JVM doesn't reorder them.
   *
   * <p>JVM intrinsics note: It would be possible to use a release-only form of CAS here, if it were
   * provided.
   */
Striped64 (/guava/src/com/google/common/hash/Striped64.java)/**
 * A package-local class holding common representation and mechanics for classes supporting dynamic
 * striping on 64bit values. The class extends Number so that concrete subclasses must publicly do
 * so.
 */
HtmlEscapers (/guava/src/com/google/common/html/HtmlEscapers.java)/**
 * {@code Escaper} instances suitable for strings to be included in HTML attribute values and
 * <em>most</em> elements' text contents. When possible, avoid manual escaping by using templating
 * systems and high-level APIs that provide autoescaping.
 * One Google-authored templating system available for external use is <a
 * href="https://developers.google.com/closure/templates/">Closure Templates</a>.
 *
 * <p>HTML escaping is particularly tricky: For example, <a href="http://goo.gl/5TgZb">some
 * elements' text contents must not be HTML escaped</a>. As a result, it is impossible to escape an
 * HTML document correctly without domain-specific knowledge beyond what {@code HtmlEscapers}
 * provides. We strongly encourage the use of HTML templating systems.
 *
 * @author Sven Mawson
 * @author David Beaumont
 * @since 15.0
 */
AppendableWriter (/guava/src/com/google/common/io/AppendableWriter.java)/**
 * Writer that places all output on an {@link Appendable} target. If the target is {@link Flushable}
 * or {@link Closeable}, flush()es and close()s will also be delegated to the target.
 *
 * @author Alan Green
 * @author Sebastian Kanthak
 * @since 1.0
 */
DecodingException (/guava/src/com/google/common/io/BaseEncoding.java)/**
   * Exception indicating invalid base-encoded input encountered while decoding.
   *
   * @author Louis Wasserman
   * @since 15.0
   */
BaseEncoding (/guava/src/com/google/common/io/BaseEncoding.java)/**
 * A binary encoding scheme for reversibly translating between byte sequences and printable ASCII
 * strings. This class includes several constants for encoding schemes specified by <a
 * href="http://tools.ietf.org/html/rfc4648">RFC 4648</a>. For example, the expression:
 *
 * <pre>{@code
 * BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))
 * }</pre>
 *
 * <p>returns the string {@code "MZXW6==="}, and
 *
 * <pre>{@code
 * byte[] decoded = BaseEncoding.base32().decode("MZXW6===");
 * }</pre>
 *
 * <p>...returns the ASCII bytes of the string {@code "foo"}.
 *
 * <p>By default, {@code BaseEncoding}'s behavior is relatively strict and in accordance with RFC
 * 4648. Decoding rejects characters in the wrong case, though padding is optional. To modify
 * encoding and decoding behavior, use configuration methods to obtain a new encoding with modified
 * behavior:
 *
 * <pre>{@code
 * BaseEncoding.base16().lowerCase().decode("deadbeef");
 * }</pre>
 *
 * <p>Warning: BaseEncoding instances are immutable. Invoking a configuration method has no effect
 * on the receiving instance; you must store and use the new encoding instance it returns, instead.
 *
 * <pre>{@code
 * // Do NOT do this
 * BaseEncoding hex = BaseEncoding.base16();
 * hex.lowerCase(); // does nothing!
 * return hex.decode("deadbeef"); // throws an IllegalArgumentException
 * }</pre>
 *
 * <p>It is guaranteed that {@code encoding.decode(encoding.encode(x))} is always equal to {@code
 * x}, but the reverse does not necessarily hold.
 *
 * <table>
 * <caption>Encodings</caption>
 * <tr>
 * <th>Encoding
 * <th>Alphabet
 * <th>{@code char:byte} ratio
 * <th>Default padding
 * <th>Comments
 * <tr>
 * <td>{@link #base16()}
 * <td>0-9 A-F
 * <td>2.00
 * <td>N/A
 * <td>Traditional hexadecimal. Defaults to upper case.
 * <tr>
 * <td>{@link #base32()}
 * <td>A-Z 2-7
 * <td>1.60
 * <td>=
 * <td>Human-readable; no possibility of mixing up 0/O or 1/I. Defaults to upper case.
 * <tr>
 * <td>{@link #base32Hex()}
 * <td>0-9 A-V
 * <td>1.60
 * <td>=
 * <td>"Numerical" base 32; extended from the traditional hex alphabet. Defaults to upper case.
 * <tr>
 * <td>{@link #base64()}
 * <td>A-Z a-z 0-9 + /
 * <td>1.33
 * <td>=
 * <td>
 * <tr>
 * <td>{@link #base64Url()}
 * <td>A-Z a-z 0-9 - _
 * <td>1.33
 * <td>=
 * <td>Safe to use as filenames, or to pass in URLs without escaping
 * </table>
 *
 * <p>All instances of this class are immutable, so they may be stored safely as static constants.
 *
 * @author Louis Wasserman
 * @since 14.0
 */
ByteArrayDataInput (/guava/src/com/google/common/io/ByteArrayDataInput.java)/**
 * An extension of {@code DataInput} for reading from in-memory byte arrays; its methods offer
 * identical functionality but do not throw {@link IOException}.
 *
 * <p><b>Warning:</b> The caller is responsible for not attempting to read past the end of the
 * array. If any method encounters the end of the array prematurely, it throws {@link
 * IllegalStateException} to signify <i>programmer error</i>. This behavior is a technical violation
 * of the supertype's contract, which specifies a checked exception.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
ByteArrayDataOutput (/guava/src/com/google/common/io/ByteArrayDataOutput.java)/**
 * An extension of {@code DataOutput} for writing to in-memory byte arrays; its methods offer
 * identical functionality but do not throw {@link IOException}.
 *
 * @author Jayaprabhakar Kadarkarai
 * @since 1.0
 */
ByteProcessor (/guava/src/com/google/common/io/ByteProcessor.java)/**
 * A callback interface to process bytes from a stream.
 *
 * <p>{@link #processBytes} will be called for each chunk of data that is read, and should return
 * {@code false} when you want to stop processing.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
AsCharSink (/guava/src/com/google/common/io/ByteSink.java)/**
   * A char sink that encodes written characters with a charset and writes resulting bytes to this
   * byte sink.
   */
ByteSink (/guava/src/com/google/common/io/ByteSink.java)/**
 * A destination to which bytes can be written, such as a file. Unlike an {@link OutputStream}, a
 * {@code ByteSink} is not an open, stateful stream that can be written to and closed. Instead, it
 * is an immutable <i>supplier</i> of {@code OutputStream} instances.
 *
 * <p>{@code ByteSink} provides two kinds of methods:
 *
 * <ul>
 *   <li><b>Methods that return a stream:</b> These methods should return a <i>new</i>, independent
 *       instance each time they are called. The caller is responsible for ensuring that the
 *       returned stream is closed.
 *   <li><b>Convenience methods:</b> These are implementations of common operations that are
 *       typically implemented by opening a stream using one of the methods in the first category,
 *       doing something and finally closing the stream or channel that was opened.
 * </ul>
 *
 * @since 14.0
 * @author Colin Decker
 */
AsCharSource (/guava/src/com/google/common/io/ByteSource.java)/**
   * A char source that reads bytes from this source and decodes them as characters using a charset.
   */
SlicedByteSource (/guava/src/com/google/common/io/ByteSource.java)/** A view of a subsection of the containing byte source. */
ByteSource (/guava/src/com/google/common/io/ByteSource.java)/**
 * A readable source of bytes, such as a file. Unlike an {@link InputStream}, a {@code ByteSource}
 * is not an open, stateful stream for input that can be read and closed. Instead, it is an
 * immutable <i>supplier</i> of {@code InputStream} instances.
 *
 * <p>{@code ByteSource} provides two kinds of methods:
 *
 * <ul>
 *   <li><b>Methods that return a stream:</b> These methods should return a <i>new</i>, independent
 *       instance each time they are called. The caller is responsible for ensuring that the
 *       returned stream is closed.
 *   <li><b>Convenience methods:</b> These are implementations of common operations that are
 *       typically implemented by opening a stream using one of the methods in the first category,
 *       doing something and finally closing the stream that was opened.
 * </ul>
 *
 * @since 14.0
 * @author Colin Decker
 */
ByteStreams (/guava/src/com/google/common/io/ByteStreams.java)/**
 * Provides utility methods for working with byte arrays and I/O streams.
 *
 * @author Chris Nokleberg
 * @author Colin Decker
 * @since 1.0
 */
CharSink (/guava/src/com/google/common/io/CharSink.java)/**
 * A destination to which characters can be written, such as a text file. Unlike a {@link Writer}, a
 * {@code CharSink} is not an open, stateful stream that can be written to and closed. Instead, it
 * is an immutable <i>supplier</i> of {@code Writer} instances.
 *
 * <p>{@code CharSink} provides two kinds of methods:
 *
 * <ul>
 *   <li><b>Methods that return a writer:</b> These methods should return a <i>new</i>, independent
 *       instance each time they are called. The caller is responsible for ensuring that the
 *       returned writer is closed.
 *   <li><b>Convenience methods:</b> These are implementations of common operations that are
 *       typically implemented by opening a writer using one of the methods in the first category,
 *       doing something and finally closing the writer that was opened.
 * </ul>
 *
 * <p>Any {@link ByteSink} may be viewed as a {@code CharSink} with a specific {@linkplain Charset
 * character encoding} using {@link ByteSink#asCharSink(Charset)}. Characters written to the
 * resulting {@code CharSink} will written to the {@code ByteSink} as encoded bytes.
 *
 * @since 14.0
 * @author Colin Decker
 */
AsByteSource (/guava/src/com/google/common/io/CharSource.java)/** A byte source that reads chars from this source and encodes them as bytes using a charset. */
StringCharSource (/guava/src/com/google/common/io/CharSource.java)/**
   * Subclass specialized for string instances.
   *
   * <p>Since Strings are immutable and built into the jdk we can optimize some operations
   *
   * <ul>
   *   <li>use {@link StringReader} instead of {@link CharSequenceReader}. It is faster since it can
   *       use {@link String#getChars(int, int, char[], int)} instead of copying characters one by
   *       one with {@link CharSequence#charAt(int)}.
   *   <li>use {@link Appendable#append(CharSequence)} in {@link #copyTo(Appendable)} and {@link
   *       #copyTo(CharSink)}. We know this is correct since strings are immutable and so the length
   *       can't change, and it is faster because many writers and appendables are optimized for
   *       appending string instances.
   * </ul>
   */
CharSource (/guava/src/com/google/common/io/CharSource.java)/**
 * A readable source of characters, such as a text file. Unlike a {@link Reader}, a {@code
 * CharSource} is not an open, stateful stream of characters that can be read and closed. Instead,
 * it is an immutable <i>supplier</i> of {@code Reader} instances.
 *
 * <p>{@code CharSource} provides two kinds of methods:
 *
 * <ul>
 *   <li><b>Methods that return a reader:</b> These methods should return a <i>new</i>, independent
 *       instance each time they are called. The caller is responsible for ensuring that the
 *       returned reader is closed.
 *   <li><b>Convenience methods:</b> These are implementations of common operations that are
 *       typically implemented by opening a reader using one of the methods in the first category,
 *       doing something and finally closing the reader that was opened.
 * </ul>
 *
 * <p>Several methods in this class, such as {@link #readLines()}, break the contents of the source
 * into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \n}, {@code
 * \r} or {@code \r\n}, do not include the line separator in each line and do not consider there to
 * be an empty line at the end if the contents are terminated with a line separator.
 *
 * <p>Any {@link ByteSource} containing text encoded with a specific {@linkplain Charset character
 * encoding} may be viewed as a {@code CharSource} using {@link ByteSource#asCharSource(Charset)}.
 *
 * @since 14.0
 * @author Colin Decker
 */
CharStreams (/guava/src/com/google/common/io/CharStreams.java)/**
 * Provides utility methods for working with character streams.
 *
 * <p>All method parameters must be non-null unless documented otherwise.
 *
 * <p>Some of the methods in this class take arguments with a generic type of {@code Readable &
 * Closeable}. A {@link java.io.Reader} implements both of those interfaces. Similarly for {@code
 * Appendable & Closeable} and {@link java.io.Writer}.
 *
 * @author Chris Nokleberg
 * @author Bin Zhu
 * @author Colin Decker
 * @since 1.0
 */
Closeables (/guava/src/com/google/common/io/Closeables.java)/**
 * Utility methods for working with {@link Closeable} objects.
 *
 * @author Michael Lancaster
 * @since 1.0
 */
Suppressor (/guava/src/com/google/common/io/Closer.java)/** Suppression strategy interface. */
LoggingSuppressor (/guava/src/com/google/common/io/Closer.java)/** Suppresses exceptions by logging them. */
SuppressingSuppressor (/guava/src/com/google/common/io/Closer.java)/**
   * Suppresses exceptions by adding them to the exception that will be thrown using JDK7's
   * addSuppressed(Throwable) mechanism.
   */
CountingInputStream (/guava/src/com/google/common/io/CountingInputStream.java)/**
 * An {@link InputStream} that counts the number of bytes read.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
CountingOutputStream (/guava/src/com/google/common/io/CountingOutputStream.java)/**
 * An OutputStream that counts the number of bytes written.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
MemoryOutput (/guava/src/com/google/common/io/FileBackedOutputStream.java)/** ByteArrayOutputStream that exposes its internals. */
FileBackedOutputStream (/guava/src/com/google/common/io/FileBackedOutputStream.java)/**
 * An {@link OutputStream} that starts buffering to a byte array, but switches to file buffering
 * once the data reaches a configurable size.
 *
 * <p>This class is thread-safe.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
Files (/guava/src/com/google/common/io/Files.java)/**
 * Provides utility methods for working with {@linkplain File files}.
 *
 * <p>{@link java.nio.file.Path} users will find similar utilities in {@link MoreFiles} and the
 * JDK's {@link java.nio.file.Files} class.
 *
 * @author Chris Nokleberg
 * @author Colin Decker
 * @since 1.0
 */
Flushables (/guava/src/com/google/common/io/Flushables.java)/**
 * Utility methods for working with {@link Flushable} objects.
 *
 * @author Michael Lancaster
 * @since 1.0
 */
InsecureRecursiveDeleteException (/guava/src/com/google/common/io/InsecureRecursiveDeleteException.java)/**
 * Exception indicating that a recursive delete can't be performed because the file system does not
 * have the support necessary to guarantee that it is not vulnerable to race conditions that would
 * allow it to delete files and directories outside of the directory being deleted (i.e., {@link
 * SecureDirectoryStream} is not supported).
 *
 * <p>{@link RecursiveDeleteOption#ALLOW_INSECURE} can be used to force the recursive delete method
 * to proceed anyway.
 *
 * @since 21.0
 * @author Colin Decker
 */
LineBuffer (/guava/src/com/google/common/io/LineBuffer.java)/**
 * Package-protected abstract class that implements the line reading algorithm used by {@link
 * LineReader}. Line separators are per {@link java.io.BufferedReader}: line feed, carriage return,
 * or carriage return followed immediately by a linefeed.
 *
 * <p>Subclasses must implement {@link #handleLine}, call {@link #add} to pass character data, and
 * call {@link #finish} at the end of stream.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
LineProcessor (/guava/src/com/google/common/io/LineProcessor.java)/**
 * A callback to be used with the streaming {@code readLines} methods.
 *
 * <p>{@link #processLine} will be called for each line that is read, and should return {@code
 * false} when you want to stop processing.
 *
 * @author Miles Barr
 * @since 1.0
 */
LineReader (/guava/src/com/google/common/io/LineReader.java)/**
 * A class for reading lines of text. Provides the same functionality as {@link
 * java.io.BufferedReader#readLine()} but for all {@link Readable} objects, not just instances of
 * {@link Reader}.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
LittleEndianDataInputStream (/guava/src/com/google/common/io/LittleEndianDataInputStream.java)/**
 * An implementation of {@link DataInput} that uses little-endian byte ordering for reading {@code
 * short}, {@code int}, {@code float}, {@code double}, and {@code long} values.
 *
 * <p><b>Note:</b> This class intentionally violates the specification of its supertype {@code
 * DataInput}, which explicitly requires big-endian byte order.
 *
 * @author Chris Nokleberg
 * @author Keith Bottner
 * @since 8.0
 */
LittleEndianDataOutputStream (/guava/src/com/google/common/io/LittleEndianDataOutputStream.java)/**
 * An implementation of {@link DataOutput} that uses little-endian byte ordering for writing {@code
 * char}, {@code short}, {@code int}, {@code float}, {@code double}, and {@code long} values.
 *
 * <p><b>Note:</b> This class intentionally violates the specification of its supertype {@code
 * DataOutput}, which explicitly requires big-endian byte order.
 *
 * @author Chris Nokleberg
 * @author Keith Bottner
 * @since 8.0
 */
MoreFiles (/guava/src/com/google/common/io/MoreFiles.java)/**
 * Static utilities for use with {@link Path} instances, intended to complement {@link Files}.
 *
 * <p>Many methods provided by Guava's {@code Files} class for {@link java.io.File} instances are
 * now available via the JDK's {@link java.nio.file.Files} class for {@code Path} - check the JDK's
 * class if a sibling method from {@code Files} appears to be missing from this class.
 *
 * @since 21.0
 * @author Colin Decker
 */
MultiInputStream (/guava/src/com/google/common/io/MultiInputStream.java)/**
 * An {@link InputStream} that concatenates multiple substreams. At most one stream will be open at
 * a time.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
MultiReader (/guava/src/com/google/common/io/MultiReader.java)/**
 * A {@link Reader} that concatenates multiple readers.
 *
 * @author Bin Zhu
 * @since 1.0
 */
PatternFilenameFilter (/guava/src/com/google/common/io/PatternFilenameFilter.java)/**
 * File name filter that only accepts files matching a regular expression. This class is thread-safe
 * and immutable.
 *
 * @author Apple Chow
 * @since 1.0
 */
ReaderInputStream (/guava/src/com/google/common/io/ReaderInputStream.java)/**
 * An {@link InputStream} that converts characters from a {@link Reader} into bytes using an
 * arbitrary Charset.
 *
 * <p>This is an alternative to copying the data to an {@code OutputStream} via a {@code Writer},
 * which is necessarily blocking. By implementing an {@code InputStream} it allows consumers to
 * "pull" as much data as they can handle, which is more convenient when dealing with flow
 * controlled, async APIs.
 *
 * @author Chris Nokleberg
 */
UrlByteSource (/guava/src/com/google/common/io/Resources.java)/** A byte source that reads from a URL using {@link URL#openStream()}. */
Resources (/guava/src/com/google/common/io/Resources.java)/**
 * Provides utility methods for working with resources in the classpath. Note that even though these
 * methods use {@link URL} parameters, they are usually not appropriate for HTTP or other
 * non-classpath resources.
 *
 * <p>All method parameters must be non-null unless documented otherwise.
 *
 * @author Chris Nokleberg
 * @author Ben Yu
 * @author Colin Decker
 * @since 1.0
 */
BigIntegerMath (/guava/src/com/google/common/math/BigIntegerMath.java)/**
 * A class for arithmetic on values of type {@code BigInteger}.
 *
 * <p>The implementations of many methods in this class are based on material from Henry S. Warren,
 * Jr.'s <i>Hacker's Delight</i>, (Addison Wesley, 2002).
 *
 * <p>Similar functionality for {@code int} and for {@code long} can be found in {@link IntMath} and
 * {@link LongMath} respectively.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
DoubleMath (/guava/src/com/google/common/math/DoubleMath.java)/**
 * A class for arithmetic on doubles that is not covered by {@link java.lang.Math}.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
DoubleUtils (/guava/src/com/google/common/math/DoubleUtils.java)/**
 * Utilities for {@code double} primitives.
 *
 * @author Louis Wasserman
 */
IntMath (/guava/src/com/google/common/math/IntMath.java)/**
 * A class for arithmetic on values of type {@code int}. Where possible, methods are defined and
 * named analogously to their {@code BigInteger} counterparts.
 *
 * <p>The implementations of many methods in this class are based on material from Henry S. Warren,
 * Jr.'s <i>Hacker's Delight</i>, (Addison Wesley, 2002).
 *
 * <p>Similar functionality for {@code long} and for {@link BigInteger} can be found in {@link
 * LongMath} and {@link BigIntegerMath} respectively. For other common operations on {@code int}
 * values, see {@link com.google.common.primitives.Ints}.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
LinearTransformationBuilder (/guava/src/com/google/common/math/LinearTransformation.java)/**
   * This is an intermediate stage in the construction process. It is returned by {@link
   * LinearTransformation#mapping}. You almost certainly don't want to keep instances around, but
   * instead use method chaining. This represents a single point mapping, i.e. a mapping between one
   * {@code x} and {@code y} value pair.
   *
   * @since 20.0
   */
LinearTransformation (/guava/src/com/google/common/math/LinearTransformation.java)/**
 * The representation of a linear transformation between real numbers {@code x} and {@code y}.
 * Graphically, this is the specification of a straight line on a plane. The transformation can be
 * expressed as {@code y = m * x + c} for finite {@code m} and {@code c}, unless it is a vertical
 * transformation in which case {@code x} has a constant value for all {@code y}. In the
 * non-vertical case, {@code m} is the slope of the transformation (and a horizontal transformation
 * has zero slope).
 *
 * @author Pete Gillin
 * @since 20.0
 */
LongMath (/guava/src/com/google/common/math/LongMath.java)/**
 * A class for arithmetic on values of type {@code long}. Where possible, methods are defined and
 * named analogously to their {@code BigInteger} counterparts.
 *
 * <p>The implementations of many methods in this class are based on material from Henry S. Warren,
 * Jr.'s <i>Hacker's Delight</i>, (Addison Wesley, 2002).
 *
 * <p>Similar functionality for {@code int} and for {@link BigInteger} can be found in {@link
 * IntMath} and {@link BigIntegerMath} respectively. For other common operations on {@code long}
 * values, see {@link com.google.common.primitives.Longs}.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
MathPreconditions (/guava/src/com/google/common/math/MathPreconditions.java)/**
 * A collection of preconditions for math functions.
 *
 * @author Louis Wasserman
 */
PairedStats (/guava/src/com/google/common/math/PairedStats.java)/**
 * An immutable value object capturing some basic statistics about a collection of paired double
 * values (e.g. points on a plane). Build instances with {@link PairedStatsAccumulator#snapshot}.
 *
 * @author Pete Gillin
 * @since 20.0
 */
PairedStatsAccumulator (/guava/src/com/google/common/math/PairedStatsAccumulator.java)/**
 * A mutable object which accumulates paired double values (e.g. points on a plane) and tracks some
 * basic statistics over all the values added so far. This class is not thread safe.
 *
 * @author Pete Gillin
 * @since 20.0
 */
Scale (/guava/src/com/google/common/math/Quantiles.java)/**
   * Describes the point in a fluent API chain where only the scale (i.e. the q in q-quantiles) has
   * been specified.
   *
   * @since 20.0
   */
ScaleAndIndex (/guava/src/com/google/common/math/Quantiles.java)/**
   * Describes the point in a fluent API chain where the scale and a single quantile index (i.e. the
   * q and the k in the kth q-quantile) have been specified.
   *
   * @since 20.0
   */
ScaleAndIndexes (/guava/src/com/google/common/math/Quantiles.java)/**
   * Describes the point in a fluent API chain where the scale and a multiple quantile indexes (i.e.
   * the q and a set of values for the k in the kth q-quantile) have been specified.
   *
   * @since 20.0
   */
Quantiles (/guava/src/com/google/common/math/Quantiles.java)/**
 * Provides a fluent API for calculating <a
 * href="http://en.wikipedia.org/wiki/Quantile">quantiles</a>.
 *
 * <h3>Examples</h3>
 *
 * <p>To compute the median:
 *
 * <pre>{@code
 * double myMedian = median().compute(myDataset);
 * }</pre>
 *
 * where {@link #median()} has been statically imported.
 *
 * <p>To compute the 99th percentile:
 *
 * <pre>{@code
 * double myPercentile99 = percentiles().index(99).compute(myDataset);
 * }</pre>
 *
 * where {@link #percentiles()} has been statically imported.
 *
 * <p>To compute median and the 90th and 99th percentiles:
 *
 * <pre>{@code
 * Map<Integer, Double> myPercentiles =
 *     percentiles().indexes(50, 90, 99).compute(myDataset);
 * }</pre>
 *
 * where {@link #percentiles()} has been statically imported: {@code myPercentiles} maps the keys
 * 50, 90, and 99, to their corresponding quantile values.
 *
 * <p>To compute quartiles, use {@link #quartiles()} instead of {@link #percentiles()}. To compute
 * arbitrary q-quantiles, use {@link #scale scale(q)}.
 *
 * <p>These examples all take a copy of your dataset. If you have a double array, you are okay with
 * it being arbitrarily reordered, and you want to avoid that copy, you can use {@code
 * computeInPlace} instead of {@code compute}.
 *
 * <h3>Definition and notes on interpolation</h3>
 *
 * <p>The definition of the kth q-quantile of N values is as follows: define x = k * (N - 1) / q; if
 * x is an integer, the result is the value which would appear at index x in the sorted dataset
 * (unless there are {@link Double#NaN NaN} values, see below); otherwise, the result is the average
 * of the values which would appear at the indexes floor(x) and ceil(x) weighted by (1-frac(x)) and
 * frac(x) respectively. This is the same definition as used by Excel and by S, it is the Type 7
 * definition in <a
 * href="http://stat.ethz.ch/R-manual/R-devel/library/stats/html/quantile.html">R</a>, and it is
 * described by <a
 * href="http://en.wikipedia.org/wiki/Quantile#Estimating_the_quantiles_of_a_population">
 * wikipedia</a> as providing "Linear interpolation of the modes for the order statistics for the
 * uniform distribution on [0,1]."
 *
 * <h3>Handling of non-finite values</h3>
 *
 * <p>If any values in the input are {@link Double#NaN NaN} then all values returned are {@link
 * Double#NaN NaN}. (This is the one occasion when the behaviour is not the same as you'd get from
 * sorting with {@link java.util.Arrays#sort(double[]) Arrays.sort(double[])} or {@link
 * java.util.Collections#sort(java.util.List) Collections.sort(List&lt;Double&gt;)} and selecting
 * the required value(s). Those methods would sort {@link Double#NaN NaN} as if it is greater than
 * any other value and place them at the end of the dataset, even after {@link
 * Double#POSITIVE_INFINITY POSITIVE_INFINITY}.)
 *
 * <p>Otherwise, {@link Double#NEGATIVE_INFINITY NEGATIVE_INFINITY} and {@link
 * Double#POSITIVE_INFINITY POSITIVE_INFINITY} sort to the beginning and the end of the dataset, as
 * you would expect.
 *
 * <p>If required to do a weighted average between an infinity and a finite value, or between an
 * infinite value and itself, the infinite value is returned. If required to do a weighted average
 * between {@link Double#NEGATIVE_INFINITY NEGATIVE_INFINITY} and {@link Double#POSITIVE_INFINITY
 * POSITIVE_INFINITY}, {@link Double#NaN NaN} is returned (note that this will only happen if the
 * dataset contains no finite values).
 *
 * <h3>Performance</h3>
 *
 * <p>The average time complexity of the computation is O(N) in the size of the dataset. There is a
 * worst case time complexity of O(N^2). You are extremely unlikely to hit this quadratic case on
 * randomly ordered data (the probability decreases faster than exponentially in N), but if you are
 * passing in unsanitized user data then a malicious user could force it. A light shuffle of the
 * data using an unpredictable seed should normally be enough to thwart this attack.
 *
 * <p>The time taken to compute multiple quantiles on the same dataset using {@link Scale#indexes
 * indexes} is generally less than the total time taken to compute each of them separately, and
 * sometimes much less. For example, on a large enough dataset, computing the 90th and 99th
 * percentiles together takes about 55% as long as computing them separately.
 *
 * <p>When calling {@link ScaleAndIndex#compute} (in {@linkplain ScaleAndIndexes#compute either
 * form}), the memory requirement is 8*N bytes for the copy of the dataset plus an overhead which is
 * independent of N (but depends on the quantiles being computed). When calling {@link
 * ScaleAndIndex#computeInPlace computeInPlace} (in {@linkplain ScaleAndIndexes#computeInPlace
 * either form}), only the overhead is required. The number of object allocations is independent of
 * N in both cases.
 *
 * @author Pete Gillin
 * @since 20.0
 */
Stats (/guava/src/com/google/common/math/Stats.java)/**
 * A bundle of statistical summary values -- sum, count, mean/average, min and max, and several
 * forms of variance -- that were computed from a single set of zero or more floating-point values.
 *
 * <p>There are two ways to obtain a {@code Stats} instance:
 *
 * <ul>
 *   <li>If all the values you want to summarize are already known, use the appropriate {@code
 *       Stats.of} factory method below. Primitive arrays, iterables and iterators of any kind of
 *       {@code Number}, and primitive varargs are supported.
 *   <li>Or, to avoid storing up all the data first, create a {@link StatsAccumulator} instance,
 *       feed values to it as you get them, then call {@link StatsAccumulator#snapshot}.
 * </ul>
 *
 * <p>Static convenience methods called {@code meanOf} are also provided for users who wish to
 * calculate <i>only</i> the mean.
 *
 * <p><b>Java 8 users:</b> If you are not using any of the variance statistics, you may wish to use
 * built-in JDK libraries instead of this class.
 *
 * @author Pete Gillin
 * @author Kevin Bourrillion
 * @since 20.0
 */
StatsAccumulator (/guava/src/com/google/common/math/StatsAccumulator.java)/**
 * A mutable object which accumulates double values and tracks some basic statistics over all the
 * values added so far. The values may be added singly or in groups. This class is not thread safe.
 *
 * @author Pete Gillin
 * @author Kevin Bourrillion
 * @since 20.0
 */
HostAndPort (/guava/src/com/google/common/net/HostAndPort.java)/**
 * An immutable representation of a host and port.
 *
 * <p>Example usage:
 *
 * <pre>
 * HostAndPort hp = HostAndPort.fromString("[2001:db8::1]")
 *     .withDefaultPort(80)
 *     .requireBracketsForIPv6();
 * hp.getHost();   // returns "2001:db8::1"
 * hp.getPort();   // returns 80
 * hp.toString();  // returns "[2001:db8::1]:80"
 * </pre>
 *
 * <p>Here are some examples of recognized formats:
 *
 * <ul>
 *   <li>example.com
 *   <li>example.com:80
 *   <li>192.0.2.1
 *   <li>192.0.2.1:80
 *   <li>[2001:db8::1] - {@link #getHost()} omits brackets
 *   <li>[2001:db8::1]:80 - {@link #getHost()} omits brackets
 *   <li>2001:db8::1 - Use {@link #requireBracketsForIPv6()} to prohibit this
 * </ul>
 *
 * <p>Note that this is not an exhaustive list, because these methods are only concerned with
 * brackets, colons, and port numbers. Full validation of the host field (if desired) is the
 * caller's responsibility.
 *
 * @author Paul Marks
 * @since 10.0
 */
HostSpecifier (/guava/src/com/google/common/net/HostSpecifier.java)/**
 * A syntactically valid host specifier, suitable for use in a URI. This may be either a numeric IP
 * address in IPv4 or IPv6 notation, or a domain name.
 *
 * <p>Because this class is intended to represent host specifiers which can reasonably be used in a
 * URI, the domain name case is further restricted to include only those domain names which end in a
 * recognized public suffix; see {@link InternetDomainName#isPublicSuffix()} for details.
 *
 * <p>Note that no network lookups are performed by any {@code HostSpecifier} methods. No attempt is
 * made to verify that a provided specifier corresponds to a real or accessible host. Only syntactic
 * and pattern-based checks are performed.
 *
 * <p>If you know that a given string represents a numeric IP address, use {@link InetAddresses} to
 * obtain and manipulate a {@link java.net.InetAddress} instance from it rather than using this
 * class. Similarly, if you know that a given string represents a domain name, use {@link
 * InternetDomainName} rather than this class.
 *
 * @author Craig Berry
 * @since 5.0
 */
ReferrerPolicyValues (/guava/src/com/google/common/net/HttpHeaders.java)/**
   * Values for the <a href="https://www.w3.org/TR/referrer-policy/">{@code Referrer-Policy}</a>
   * header.
   *
   * @since 23.4
   */
HttpHeaders (/guava/src/com/google/common/net/HttpHeaders.java)/**
 * Contains constant definitions for the HTTP header field names. See:
 *
 * <ul>
 *   <li><a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a>
 *   <li><a href="http://www.ietf.org/rfc/rfc2183.txt">RFC 2183</a>
 *   <li><a href="http://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>
 *   <li><a href="http://www.ietf.org/rfc/rfc2965.txt">RFC 2965</a>
 *   <li><a href="http://www.ietf.org/rfc/rfc5988.txt">RFC 5988</a>
 * </ul>
 *
 *
 * @author Kurt Alfred Kluever
 * @since 11.0
 */
TeredoInfo (/guava/src/com/google/common/net/InetAddresses.java)/**
   * A simple immutable data class to encapsulate the information to be found in a Teredo address.
   *
   * <p>All of the fields in this class are encoded in various portions of the IPv6 address as part
   * of the protocol. More protocols details can be found at: <a target="_parent"
   * href="http://en.wikipedia.org/wiki/Teredo_tunneling">http://en.wikipedia.
   * org/wiki/Teredo_tunneling</a>.
   *
   * <p>The RFC can be found here: <a target="_parent" href="http://tools.ietf.org/html/rfc4380">RFC
   * 4380</a>.
   *
   * @since 5.0
   */
InetAddresses (/guava/src/com/google/common/net/InetAddresses.java)/**
 * Static utility methods pertaining to {@link InetAddress} instances.
 *
 * <p><b>Important note:</b> Unlike {@code InetAddress.getByName()}, the methods of this class never
 * cause DNS services to be accessed. For this reason, you should prefer these methods as much as
 * possible over their JDK equivalents whenever you are expecting to handle only IP address string
 * literals -- there is no blocking DNS penalty for a malformed string.
 *
 * <p>When dealing with {@link Inet4Address} and {@link Inet6Address} objects as byte arrays (vis.
 * {@code InetAddress.getAddress()}) they are 4 and 16 bytes in length, respectively, and represent
 * the address in network byte order.
 *
 * <p>Examples of IP addresses and their byte representations:
 *
 * <dl>
 *   <dt>The IPv4 loopback address, {@code "127.0.0.1"}.
 *   <dd>{@code 7f 00 00 01}
 *   <dt>The IPv6 loopback address, {@code "::1"}.
 *   <dd>{@code 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01}
 *   <dt>From the IPv6 reserved documentation prefix ({@code 2001:db8::/32}), {@code "2001:db8::1"}.
 *   <dd>{@code 20 01 0d b8 00 00 00 00 00 00 00 00 00 00 00 01}
 *   <dt>An IPv6 "IPv4 compatible" (or "compat") address, {@code "::192.168.0.1"}.
 *   <dd>{@code 00 00 00 00 00 00 00 00 00 00 00 00 c0 a8 00 01}
 *   <dt>An IPv6 "IPv4 mapped" address, {@code "::ffff:192.168.0.1"}.
 *   <dd>{@code 00 00 00 00 00 00 00 00 00 00 ff ff c0 a8 00 01}
 * </dl>
 *
 * <p>A few notes about IPv6 "IPv4 mapped" addresses and their observed use in Java.
 *
 * <p>"IPv4 mapped" addresses were originally a representation of IPv4 addresses for use on an IPv6
 * socket that could receive both IPv4 and IPv6 connections (by disabling the {@code IPV6_V6ONLY}
 * socket option on an IPv6 socket). Yes, it's confusing. Nevertheless, these "mapped" addresses
 * were never supposed to be seen on the wire. That assumption was dropped, some say mistakenly, in
 * later RFCs with the apparent aim of making IPv4-to-IPv6 transition simpler.
 *
 * <p>Technically one <i>can</i> create a 128bit IPv6 address with the wire format of a "mapped"
 * address, as shown above, and transmit it in an IPv6 packet header. However, Java's InetAddress
 * creation methods appear to adhere doggedly to the original intent of the "mapped" address: all
 * "mapped" addresses return {@link Inet4Address} objects.
 *
 * <p>For added safety, it is common for IPv6 network operators to filter all packets where either
 * the source or destination address appears to be a "compat" or "mapped" address. Filtering
 * suggestions usually recommend discarding any packets with source or destination addresses in the
 * invalid range {@code ::/3}, which includes both of these bizarre address formats. For more
 * information on "bogons", including lists of IPv6 bogon space, see:
 *
 * <ul>
 *   <li><a target="_parent"
 *       href="http://en.wikipedia.org/wiki/Bogon_filtering">http://en.wikipedia.
 *       org/wiki/Bogon_filtering</a>
 *   <li><a target="_parent"
 *       href="http://www.cymru.com/Bogons/ipv6.txt">http://www.cymru.com/Bogons/ ipv6.txt</a>
 *   <li><a target="_parent" href="http://www.cymru.com/Bogons/v6bogon.html">http://www.cymru.com/
 *       Bogons/v6bogon.html</a>
 *   <li><a target="_parent" href="http://www.space.net/~gert/RIPE/ipv6-filters.html">http://www.
 *       space.net/~gert/RIPE/ipv6-filters.html</a>
 * </ul>
 *
 * @author Erik Kline
 * @since 5.0
 */
InternetDomainName (/guava/src/com/google/common/net/InternetDomainName.java)/**
 * An immutable well-formed internet domain name, such as {@code com} or {@code foo.co.uk}. Only
 * syntactic analysis is performed; no DNS lookups or other network interactions take place. Thus
 * there is no guarantee that the domain actually exists on the internet.
 *
 * <p>One common use of this class is to determine whether a given string is likely to represent an
 * addressable domain on the web -- that is, for a candidate string {@code "xxx"}, might browsing to
 * {@code "http://xxx/"} result in a webpage being displayed? In the past, this test was frequently
 * done by determining whether the domain ended with a {@linkplain #isPublicSuffix() public suffix}
 * but was not itself a public suffix. However, this test is no longer accurate. There are many
 * domains which are both public suffixes and addressable as hosts; {@code "uk.com"} is one example.
 * Using the subset of public suffixes that are {@linkplain #isRegistrySuffix() registry suffixes},
 * one can get a better result, as only a few registry suffixes are addressable. However, the most
 * useful test to determine if a domain is a plausible web host is {@link #hasPublicSuffix()}. This
 * will return {@code true} for many domains which (currently) are not hosts, such as {@code "com"},
 * but given that any public suffix may become a host without warning, it is better to err on the
 * side of permissiveness and thus avoid spurious rejection of valid sites. Of course, to actually
 * determine addressability of any host, clients of this class will need to perform their own DNS
 * lookups.
 *
 * <p>During construction, names are normalized in two ways:
 *
 * <ol>
 *   <li>ASCII uppercase characters are converted to lowercase.
 *   <li>Unicode dot separators other than the ASCII period ({@code '.'}) are converted to the ASCII
 *       period.
 * </ol>
 *
 * <p>The normalized values will be returned from {@link #toString()} and {@link #parts()}, and will
 * be reflected in the result of {@link #equals(Object)}.
 *
 * <p><a href="http://en.wikipedia.org/wiki/Internationalized_domain_name">Internationalized domain
 * names</a> such as {@code 网络.cn} are supported, as are the equivalent <a
 * href="http://en.wikipedia.org/wiki/Internationalized_domain_name">IDNA Punycode-encoded</a>
 * versions.
 *
 * @author Catherine Berry
 * @since 5.0
 */
MediaType (/guava/src/com/google/common/net/MediaType.java)/**
 * Represents an <a href="http://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type</a>
 * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges
 * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">defined by HTTP/1.1</a>.
 * As such, the {@code *} character is treated as a wildcard and is used to represent any acceptable
 * type or subtype value. A media type may not have wildcard type with a declared subtype. The
 * {@code *} character has no special meaning as part of a parameter. All values for type, subtype,
 * parameter attributes or parameter values must be valid according to RFCs <a
 * href="https://tools.ietf.org/html/rfc2045">2045</a> and <a
 * href="https://tools.ietf.org/html/rfc2046">2046</a>.
 *
 * <p>All portions of the media type that are case-insensitive (type, subtype, parameter attributes)
 * are normalized to lowercase. The value of the {@code charset} parameter is normalized to
 * lowercase, but all others are left as-is.
 *
 * <p>Note that this specifically does <strong>not</strong> represent the value of the MIME {@code
 * Content-Type} header and as such has no support for header-specific considerations such as line
 * folding and comments.
 *
 * <p>For media types that take a charset the predefined constants default to UTF-8 and have a
 * "_UTF_8" suffix. To get a version without a character set, use {@link #withoutParameters}.
 *
 * @since 12.0
 * @author Gregory Kick
 */
PercentEscaper (/guava/src/com/google/common/net/PercentEscaper.java)/**
 * A {@code UnicodeEscaper} that escapes some set of Java characters using a UTF-8 based percent
 * encoding scheme. The set of safe characters (those which remain unescaped) can be specified on
 * construction.
 *
 * <p>This class is primarily used for creating URI escapers in {@link UrlEscapers} but can be used
 * directly if required. While URI escapers impose specific semantics on which characters are
 * considered 'safe', this class has a minimal set of restrictions.
 *
 * <p>When escaping a String, the following rules apply:
 *
 * <ul>
 *   <li>All specified safe characters remain unchanged.
 *   <li>If {@code plusForSpace} was specified, the space character " " is converted into a plus
 *       sign {@code "+"}.
 *   <li>All other characters are converted into one or more bytes using UTF-8 encoding and each
 *       byte is then represented by the 3-character string "%XX", where "XX" is the two-digit,
 *       uppercase, hexadecimal representation of the byte value.
 * </ul>
 *
 * <p>For performance reasons the only currently supported character encoding of this class is
 * UTF-8.
 *
 * <p><b>Note:</b> This escaper produces <a
 * href="https://url.spec.whatwg.org/#percent-encode">uppercase</a> hexadecimal sequences.
 *
 * @author David Beaumont
 * @since 15.0
 */
UrlEscapers (/guava/src/com/google/common/net/UrlEscapers.java)/**
 * {@code Escaper} instances suitable for strings to be included in particular sections of URLs.
 *
 * <p>If the resulting URLs are inserted into an HTML or XML document, they will require additional
 * escaping with {@link com.google.common.html.HtmlEscapers} or {@link
 * com.google.common.xml.XmlEscapers}.
 *
 *
 * @author David Beaumont
 * @author Chris Povirk
 * @since 15.0
 */
Booleans (/guava/src/com/google/common/primitives/Booleans.java)/**
 * Static utility methods pertaining to {@code boolean} primitives, that are not already found in
 * either {@link Boolean} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Chars (/guava/src/com/google/common/primitives/Chars.java)/**
 * Static utility methods pertaining to {@code char} primitives, that are not already found in
 * either {@link Character} or {@link Arrays}.
 *
 * <p>All the operations in this class treat {@code char} values strictly numerically; they are
 * neither Unicode-aware nor locale-dependent.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Doubles (/guava/src/com/google/common/primitives/Doubles.java)/**
 * Static utility methods pertaining to {@code double} primitives, that are not already found in
 * either {@link Double} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Floats (/guava/src/com/google/common/primitives/Floats.java)/**
 * Static utility methods pertaining to {@code float} primitives, that are not already found in
 * either {@link Float} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Builder (/guava/src/com/google/common/primitives/ImmutableDoubleArray.java)/**
   * A builder for {@link ImmutableDoubleArray} instances; obtained using {@link
   * ImmutableDoubleArray#builder}.
   */
ImmutableDoubleArray (/guava/src/com/google/common/primitives/ImmutableDoubleArray.java)/**
 * An immutable array of {@code double} values, with an API resembling {@link List}.
 *
 * <p>Advantages compared to {@code double[]}:
 *
 * <ul>
 *   <li>All the many well-known advantages of immutability (read <i>Effective Java</i>, third
 *       edition, Item 17).
 *   <li>Has the value-based (not identity-based) {@link #equals}, {@link #hashCode}, and {@link
 *       #toString} behavior you expect.
 *   <li>Offers useful operations beyond just {@code get} and {@code length}, so you don't have to
 *       hunt through classes like {@link Arrays} and {@link Doubles} for them.
 *   <li>Supports a copy-free {@link #subArray} view, so methods that accept this type don't need to
 *       add overloads that accept start and end indexes.
 *   <li>Can be streamed without "breaking the chain": {@code foo.getBarDoubles().stream()...}.
 *   <li>Access to all collection-based utilities via {@link #asList} (though at the cost of
 *       allocating garbage).
 * </ul>
 *
 * <p>Disadvantages compared to {@code double[]}:
 *
 * <ul>
 *   <li>Memory footprint has a fixed overhead (about 24 bytes per instance).
 *   <li><i>Some</i> construction use cases force the data to be copied (though several construction
 *       APIs are offered that don't).
 *   <li>Can't be passed directly to methods that expect {@code double[]} (though the most common
 *       utilities do have replacements here).
 *   <li>Dependency on {@code com.google.common} / Guava.
 * </ul>
 *
 * <p>Advantages compared to {@link com.google.common.collect.ImmutableList ImmutableList}{@code
 * <Double>}:
 *
 * <ul>
 *   <li>Improved memory compactness and locality.
 *   <li>Can be queried without allocating garbage.
 *   <li>Access to {@code DoubleStream} features (like {@link DoubleStream#sum}) using {@code
 *       stream()} instead of the awkward {@code stream().mapToDouble(v -> v)}.
 * </ul>
 *
 * <p>Disadvantages compared to {@code ImmutableList<Double>}:
 *
 * <ul>
 *   <li>Can't be passed directly to methods that expect {@code Iterable}, {@code Collection}, or
 *       {@code List} (though the most common utilities do have replacements here, and there is a
 *       lazy {@link #asList} view).
 * </ul>
 *
 * @since 22.0
 */
Builder (/guava/src/com/google/common/primitives/ImmutableIntArray.java)/**
   * A builder for {@link ImmutableIntArray} instances; obtained using {@link
   * ImmutableIntArray#builder}.
   */
ImmutableIntArray (/guava/src/com/google/common/primitives/ImmutableIntArray.java)/**
 * An immutable array of {@code int} values, with an API resembling {@link List}.
 *
 * <p>Advantages compared to {@code int[]}:
 *
 * <ul>
 *   <li>All the many well-known advantages of immutability (read <i>Effective Java</i>, third
 *       edition, Item 17).
 *   <li>Has the value-based (not identity-based) {@link #equals}, {@link #hashCode}, and {@link
 *       #toString} behavior you expect.
 *   <li>Offers useful operations beyond just {@code get} and {@code length}, so you don't have to
 *       hunt through classes like {@link Arrays} and {@link Ints} for them.
 *   <li>Supports a copy-free {@link #subArray} view, so methods that accept this type don't need to
 *       add overloads that accept start and end indexes.
 *   <li>Can be streamed without "breaking the chain": {@code foo.getBarInts().stream()...}.
 *   <li>Access to all collection-based utilities via {@link #asList} (though at the cost of
 *       allocating garbage).
 * </ul>
 *
 * <p>Disadvantages compared to {@code int[]}:
 *
 * <ul>
 *   <li>Memory footprint has a fixed overhead (about 24 bytes per instance).
 *   <li><i>Some</i> construction use cases force the data to be copied (though several construction
 *       APIs are offered that don't).
 *   <li>Can't be passed directly to methods that expect {@code int[]} (though the most common
 *       utilities do have replacements here).
 *   <li>Dependency on {@code com.google.common} / Guava.
 * </ul>
 *
 * <p>Advantages compared to {@link com.google.common.collect.ImmutableList ImmutableList}{@code
 * <Integer>}:
 *
 * <ul>
 *   <li>Improved memory compactness and locality.
 *   <li>Can be queried without allocating garbage.
 *   <li>Access to {@code IntStream} features (like {@link IntStream#sum}) using {@code stream()}
 *       instead of the awkward {@code stream().mapToInt(v -> v)}.
 * </ul>
 *
 * <p>Disadvantages compared to {@code ImmutableList<Integer>}:
 *
 * <ul>
 *   <li>Can't be passed directly to methods that expect {@code Iterable}, {@code Collection}, or
 *       {@code List} (though the most common utilities do have replacements here, and there is a
 *       lazy {@link #asList} view).
 * </ul>
 *
 * @since 22.0
 */
Builder (/guava/src/com/google/common/primitives/ImmutableLongArray.java)/**
   * A builder for {@link ImmutableLongArray} instances; obtained using {@link
   * ImmutableLongArray#builder}.
   */
ImmutableLongArray (/guava/src/com/google/common/primitives/ImmutableLongArray.java)/**
 * An immutable array of {@code long} values, with an API resembling {@link List}.
 *
 * <p>Advantages compared to {@code long[]}:
 *
 * <ul>
 *   <li>All the many well-known advantages of immutability (read <i>Effective Java</i>, third
 *       edition, Item 17).
 *   <li>Has the value-based (not identity-based) {@link #equals}, {@link #hashCode}, and {@link
 *       #toString} behavior you expect.
 *   <li>Offers useful operations beyond just {@code get} and {@code length}, so you don't have to
 *       hunt through classes like {@link Arrays} and {@link Longs} for them.
 *   <li>Supports a copy-free {@link #subArray} view, so methods that accept this type don't need to
 *       add overloads that accept start and end indexes.
 *   <li>Can be streamed without "breaking the chain": {@code foo.getBarLongs().stream()...}.
 *   <li>Access to all collection-based utilities via {@link #asList} (though at the cost of
 *       allocating garbage).
 * </ul>
 *
 * <p>Disadvantages compared to {@code long[]}:
 *
 * <ul>
 *   <li>Memory footprint has a fixed overhead (about 24 bytes per instance).
 *   <li><i>Some</i> construction use cases force the data to be copied (though several construction
 *       APIs are offered that don't).
 *   <li>Can't be passed directly to methods that expect {@code long[]} (though the most common
 *       utilities do have replacements here).
 *   <li>Dependency on {@code com.google.common} / Guava.
 * </ul>
 *
 * <p>Advantages compared to {@link com.google.common.collect.ImmutableList ImmutableList}{@code
 * <Long>}:
 *
 * <ul>
 *   <li>Improved memory compactness and locality.
 *   <li>Can be queried without allocating garbage.
 *   <li>Access to {@code LongStream} features (like {@link LongStream#sum}) using {@code stream()}
 *       instead of the awkward {@code stream().mapToLong(v -> v)}.
 * </ul>
 *
 * <p>Disadvantages compared to {@code ImmutableList<Long>}:
 *
 * <ul>
 *   <li>Can't be passed directly to methods that expect {@code Iterable}, {@code Collection}, or
 *       {@code List} (though the most common utilities do have replacements here, and there is a
 *       lazy {@link #asList} view).
 * </ul>
 *
 * @since 22.0
 */
Ints (/guava/src/com/google/common/primitives/Ints.java)/**
 * Static utility methods pertaining to {@code int} primitives, that are not already found in either
 * {@link Integer} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Longs (/guava/src/com/google/common/primitives/Longs.java)/**
 * Static utility methods pertaining to {@code long} primitives, that are not already found in
 * either {@link Long} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
ParseRequest (/guava/src/com/google/common/primitives/ParseRequest.java)/** A string to be parsed as a number and the radix to interpret it in. */
Platform (/guava/src/com/google/common/primitives/Platform.java)/** Methods factored out so that they can be emulated differently in GWT. */
Primitives (/guava/src/com/google/common/primitives/Primitives.java)/**
 * Contains static utility methods pertaining to primitive types and their corresponding wrapper
 * types.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Shorts (/guava/src/com/google/common/primitives/Shorts.java)/**
 * Static utility methods pertaining to {@code short} primitives, that are not already found in
 * either {@link Short} or {@link Arrays}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
LexicographicalComparatorHolder (/guava/src/com/google/common/primitives/UnsignedBytes.java)/**
   * Provides a lexicographical comparator implementation; either a Java implementation or a faster
   * implementation based on {@link Unsafe}.
   *
   * <p>Uses reflection to gracefully fall back to the Java implementation if {@code Unsafe} isn't
   * available.
   */
UnsignedBytes (/guava/src/com/google/common/primitives/UnsignedBytes.java)/**
 * Static utility methods pertaining to {@code byte} primitives that interpret values as
 * <i>unsigned</i> (that is, any negative value {@code b} is treated as the positive value {@code
 * 256 + b}). The corresponding methods that treat the values as signed are found in {@link
 * SignedBytes}, and the methods for which signedness is not an issue are in {@link Bytes}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.
 *
 * @author Kevin Bourrillion
 * @author Martin Buchholz
 * @author Hiroshi Yamauchi
 * @author Louis Wasserman
 * @since 1.0
 */
UnsignedInteger (/guava/src/com/google/common/primitives/UnsignedInteger.java)/**
 * A wrapper class for unsigned {@code int} values, supporting arithmetic operations.
 *
 * <p>In some cases, when speed is more important than code readability, it may be faster simply to
 * treat primitive {@code int} values as unsigned, using the methods from {@link UnsignedInts}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">unsigned
 * primitive utilities</a>.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
UnsignedInts (/guava/src/com/google/common/primitives/UnsignedInts.java)/**
 * Static utility methods pertaining to {@code int} primitives that interpret values as
 * <i>unsigned</i> (that is, any negative value {@code x} is treated as the positive value {@code
 * 2^32 + x}). The methods for which signedness is not an issue are in {@link Ints}, as well as
 * signed versions of methods for which signedness is an issue.
 *
 * <p>In addition, this class provides several static methods for converting an {@code int} to a
 * {@code String} and a {@code String} to an {@code int} that treat the {@code int} as an unsigned
 * number.
 *
 * <p>Users of these utilities must be <i>extremely careful</i> not to mix up signed and unsigned
 * {@code int} values. When possible, it is recommended that the {@link UnsignedInteger} wrapper
 * class be used, at a small efficiency penalty, to enforce the distinction in the type system.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">unsigned
 * primitive utilities</a>.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
UnsignedLong (/guava/src/com/google/common/primitives/UnsignedLong.java)/**
 * A wrapper class for unsigned {@code long} values, supporting arithmetic operations.
 *
 * <p>In some cases, when speed is more important than code readability, it may be faster simply to
 * treat primitive {@code long} values as unsigned, using the methods from {@link UnsignedLongs}.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">unsigned
 * primitive utilities</a>.
 *
 * @author Louis Wasserman
 * @author Colin Evans
 * @since 11.0
 */
UnsignedLongs (/guava/src/com/google/common/primitives/UnsignedLongs.java)/**
 * Static utility methods pertaining to {@code long} primitives that interpret values as
 * <i>unsigned</i> (that is, any negative value {@code x} is treated as the positive value {@code
 * 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as well as
 * signed versions of methods for which signedness is an issue.
 *
 * <p>In addition, this class provides several static methods for converting a {@code long} to a
 * {@code String} and a {@code String} to a {@code long} that treat the {@code long} as an unsigned
 * number.
 *
 * <p>Users of these utilities must be <i>extremely careful</i> not to mix up signed and unsigned
 * {@code long} values. When possible, it is recommended that the {@link UnsignedLong} wrapper class
 * be used, at a small efficiency penalty, to enforce the distinction in the type system.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">unsigned
 * primitive utilities</a>.
 *
 * @author Louis Wasserman
 * @author Brian Milch
 * @author Colin Evans
 * @since 10.0
 */
AbstractInvocationHandler (/guava/src/com/google/common/reflect/AbstractInvocationHandler.java)/**
 * Abstract implementation of {@link InvocationHandler} that handles {@link Object#equals}, {@link
 * Object#hashCode} and {@link Object#toString}. For example:
 *
 * <pre>
 * class Unsupported extends AbstractInvocationHandler {
 *   protected Object handleInvocation(Object proxy, Method method, Object[] args) {
 *     throw new UnsupportedOperationException();
 *   }
 * }
 *
 * CharSequence unsupported = Reflection.newProxy(CharSequence.class, new Unsupported());
 * </pre>
 *
 * @author Ben Yu
 * @since 12.0
 */
ResourceInfo (/guava/src/com/google/common/reflect/ClassPath.java)/**
   * Represents a class path resource that can be either a class file or any other resource file
   * loadable from the class path.
   *
   * @since 14.0
   */
ClassInfo (/guava/src/com/google/common/reflect/ClassPath.java)/**
   * Represents a class that can be loaded through {@link #load}.
   *
   * @since 14.0
   */
Scanner (/guava/src/com/google/common/reflect/ClassPath.java)/**
   * Abstract class that scans through the class path represented by a {@link ClassLoader} and calls
   * {@link #scanDirectory} and {@link #scanJarFile} for directories and jar files on the class path
   * respectively.
   */
ClassPath (/guava/src/com/google/common/reflect/ClassPath.java)/**
 * Scans the source of a {@link ClassLoader} and finds all loadable classes and resources.
 *
 * <p><b>Warning:</b> Current limitations:
 *
 * <ul>
 *   <li>Looks only for files and JARs in URLs available from {@link URLClassLoader} instances or
 *       the {@linkplain ClassLoader#getSystemClassLoader() system class loader}.
 *   <li>Only understands {@code file:} URLs.
 * </ul>
 *
 * <p>In the case of directory classloaders, symlinks are supported but cycles are not traversed.
 * This guarantees discovery of each <em>unique</em> loadable resource. However, not all possible
 * aliases for resources on cyclic paths will be listed.
 *
 * @author Ben Yu
 * @since 14.0
 */
Element (/guava/src/com/google/common/reflect/Element.java)/**
 * Represents either a {@link Field}, a {@link Method} or a {@link Constructor}. Provides
 * convenience methods such as {@link #isPublic} and {@link #isPackagePrivate}.
 *
 * @author Ben Yu
 */
Builder (/guava/src/com/google/common/reflect/ImmutableTypeToInstanceMap.java)/**
   * A builder for creating immutable type-to-instance maps. Example:
   *
   * <pre>{@code
   * static final ImmutableTypeToInstanceMap<Handler<?>> HANDLERS =
   *     ImmutableTypeToInstanceMap.<Handler<?>>builder()
   *         .put(new TypeToken<Handler<Foo>>() {}, new FooHandler())
   *         .put(new TypeToken<Handler<Bar>>() {}, new SubBarHandler())
   *         .build();
   * }</pre>
   *
   * <p>After invoking {@link #build()} it is still possible to add more entries and build again.
   * Thus each map generated by this builder will be a superset of any map generated before it.
   *
   * @since 13.0
   */
ImmutableTypeToInstanceMap (/guava/src/com/google/common/reflect/ImmutableTypeToInstanceMap.java)/**
 * A type-to-instance map backed by an {@link ImmutableMap}. See also {@link
 * MutableTypeToInstanceMap}.
 *
 * @author Ben Yu
 * @since 13.0
 */
Invokable (/guava/src/com/google/common/reflect/Invokable.java)/**
 * Wrapper around either a {@link Method} or a {@link Constructor}. Convenience API is provided to
 * make common reflective operation easier to deal with, such as {@link #isPublic}, {@link
 * #getParameters} etc.
 *
 * <p>In addition to convenience methods, {@link TypeToken#method} and {@link TypeToken#constructor}
 * will resolve the type parameters of the method or constructor in the context of the owner type,
 * which may be a subtype of the declaring class. For example:
 *
 * <pre>{@code
 * Method getMethod = List.class.getMethod("get", int.class);
 * Invokable<List<String>, ?> invokable = new TypeToken<List<String>>() {}.method(getMethod);
 * assertEquals(TypeToken.of(String.class), invokable.getReturnType()); // Not Object.class!
 * assertEquals(new TypeToken<List<String>>() {}, invokable.getOwnerType());
 * }</pre>
 *
 * @param <T> the type that owns this method or constructor.
 * @param <R> the return type of (or supertype thereof) the method or the declaring type of the
 *     constructor.
 * @author Ben Yu
 * @since 14.0
 */
MutableTypeToInstanceMap (/guava/src/com/google/common/reflect/MutableTypeToInstanceMap.java)/**
 * A mutable type-to-instance map. See also {@link ImmutableTypeToInstanceMap}.
 *
 * @author Ben Yu
 * @since 13.0
 */
Parameter (/guava/src/com/google/common/reflect/Parameter.java)/**
 * Represents a method or constructor parameter.
 *
 * @author Ben Yu
 * @since 14.0
 */
Reflection (/guava/src/com/google/common/reflect/Reflection.java)/**
 * Static utilities relating to Java reflection.
 *
 * @since 12.0
 */
TypeCapture (/guava/src/com/google/common/reflect/TypeCapture.java)/**
 * Captures the actual type of {@code T}.
 *
 * @author Ben Yu
 */
TypeParameter (/guava/src/com/google/common/reflect/TypeParameter.java)/**
 * Captures a free type variable that can be used in {@link TypeToken#where}. For example:
 *
 * <pre>{@code
 * static <T> TypeToken<List<T>> listOf(Class<T> elementType) {
 *   return new TypeToken<List<T>>() {}
 *       .where(new TypeParameter<T>() {}, elementType);
 * }
 * }</pre>
 *
 * @author Ben Yu
 * @since 12.0
 */
TypeTable (/guava/src/com/google/common/reflect/TypeResolver.java)/** A TypeTable maintains mapping from {@link TypeVariable} to types. */
TypeVariableKey (/guava/src/com/google/common/reflect/TypeResolver.java)/**
   * Wraps around {@code TypeVariable<?>} to ensure that any two type variables are equal as long as
   * they are declared by the same {@link java.lang.reflect.GenericDeclaration} and have the same
   * name, even if their bounds differ.
   *
   * <p>While resolving a type variable from a {@code var -> type} map, we don't care whether the
   * type variable's bound has been partially resolved. As long as the type variable "identity"
   * matches.
   *
   * <p>On the other hand, if for example we are resolving {@code List<A extends B>} to {@code
   * List<A extends String>}, we need to compare that {@code <A extends B>} is unequal to {@code <A
   * extends String>} in order to decide to use the transformed type instead of the original type.
   */
TypeResolver (/guava/src/com/google/common/reflect/TypeResolver.java)/**
 * An object of this class encapsulates type mappings from type variables. Mappings are established
 * with {@link #where} and types are resolved using {@link #resolveType}.
 *
 * <p>Note that usually type mappings are already implied by the static type hierarchy (for example,
 * the {@code E} type variable declared by class {@code List} naturally maps to {@code String} in
 * the context of {@code class MyStringList implements List<String>}. In such case, prefer to use
 * {@link TypeToken#resolveType} since it's simpler and more type safe. This class should only be
 * used when the type mapping isn't implied by the static type hierarchy, but provided through other
 * means such as an annotation or external configuration file.
 *
 * @author Ben Yu
 * @since 15.0
 */
TypeVariableInvocationHandler (/guava/src/com/google/common/reflect/Types.java)/**
   * Invocation handler to work around a compatibility problem between Java 7 and Java 8.
   *
   * <p>Java 8 introduced a new method {@code getAnnotatedBounds()} in the {@link TypeVariable}
   * interface, whose return type {@code AnnotatedType[]} is also new in Java 8. That means that we
   * cannot implement that interface in source code in a way that will compile on both Java 7 and
   * Java 8. If we include the {@code getAnnotatedBounds()} method then its return type means it
   * won't compile on Java 7, while if we don't include the method then the compiler will complain
   * that an abstract method is unimplemented. So instead we use a dynamic proxy to get an
   * implementation. If the method being called on the {@code TypeVariable} instance has the same
   * name as one of the public methods of {@link TypeVariableImpl}, the proxy calls the same method
   * on its instance of {@code TypeVariableImpl}. Otherwise it throws {@link
   * UnsupportedOperationException}; this should only apply to {@code getAnnotatedBounds()}. This
   * does mean that users on Java 8 who obtain an instance of {@code TypeVariable} from {@link
   * TypeResolver#resolveType} will not be able to call {@code getAnnotatedBounds()} on it, but that
   * should hopefully be rare.
   *
   * <p>This workaround should be removed at a distant future time when we no longer support Java
   * versions earlier than 8.
   */
NativeTypeVariableEquals (/guava/src/com/google/common/reflect/Types.java)/**
   * Per <a href="https://code.google.com/p/guava-libraries/issues/detail?id=1635">issue 1635</a>,
   * In JDK 1.7.0_51-b13, {@link TypeVariableImpl#equals(Object)} is changed to no longer be equal
   * to custom TypeVariable implementations. As a result, we need to make sure our TypeVariable
   * implementation respects symmetry. Moreover, we don't want to reconstruct a native type variable
   * {@code <A>} using our implementation unless some of its bounds have changed in resolution. This
   * avoids creating unequal TypeVariable implementation unnecessarily. When the bounds do change,
   * however, it's fine for the synthetic TypeVariable to be unequal to any native TypeVariable
   * anyway.
   */
Types (/guava/src/com/google/common/reflect/Types.java)/**
 * Utilities for working with {@link Type}.
 *
 * @author Ben Yu
 */
TypeToInstanceMap (/guava/src/com/google/common/reflect/TypeToInstanceMap.java)/**
 * A map, each entry of which maps a {@link TypeToken} to an instance of that type. In addition to
 * implementing {@code Map}, the additional type-safe operations {@link #putInstance} and {@link
 * #getInstance} are available.
 *
 * <p>Generally, implementations don't support {@link #put} and {@link #putAll} because there is no
 * way to check an object at runtime to be an instance of a {@link TypeToken}. Instead, caller
 * should use the type safe {@link #putInstance}.
 *
 * <p>Also, if caller suppresses unchecked warnings and passes in an {@code Iterable<String>} for
 * type {@code Iterable<Integer>}, the map won't be able to detect and throw type error.
 *
 * <p>Like any other {@code Map<Class, Object>}, this map may contain entries for primitive types,
 * and a primitive type and its corresponding wrapper type may map to different values.
 *
 * @param <B> the common supertype that all entries must share; often this is simply {@link Object}
 * @author Ben Yu
 * @since 13.0
 */
TypeSet (/guava/src/com/google/common/reflect/TypeToken.java)/**
   * The set of interfaces and classes that {@code T} is or is a subtype of. {@link Object} is not
   * included in the set if this type is an interface.
   *
   * @since 13.0
   */
TypeCollector (/guava/src/com/google/common/reflect/TypeToken.java)/**
   * Collects parent types from a sub type.
   *
   * @param <K> The type "kind". Either a TypeToken, or Class.
   */
TypeToken (/guava/src/com/google/common/reflect/TypeToken.java)/**
 * A {@link Type} with generics.
 *
 * <p>Operations that are otherwise only available in {@link Class} are implemented to support
 * {@code Type}, for example {@link #isSubtypeOf}, {@link #isArray} and {@link #getComponentType}.
 * It also provides additional utilities such as {@link #getTypes}, {@link #resolveType}, etc.
 *
 * <p>There are three ways to get a {@code TypeToken} instance:
 *
 * <ul>
 *   <li>Wrap a {@code Type} obtained via reflection. For example: {@code
 *       TypeToken.of(method.getGenericReturnType())}.
 *   <li>Capture a generic type with a (usually anonymous) subclass. For example:
 *       <pre>{@code
 * new TypeToken<List<String>>() {}
 * }</pre>
 *       <p>Note that it's critical that the actual type argument is carried by a subclass. The
 *       following code is wrong because it only captures the {@code <T>} type variable of the
 *       {@code listType()} method signature; while {@code <String>} is lost in erasure:
 *       <pre>{@code
 * class Util {
 *   static <T> TypeToken<List<T>> listType() {
 *     return new TypeToken<List<T>>() {};
 *   }
 * }
 *
 * TypeToken<List<String>> stringListType = Util.<String>listType();
 * }</pre>
 *   <li>Capture a generic type with a (usually anonymous) subclass and resolve it against a context
 *       class that knows what the type parameters are. For example:
 *       <pre>{@code
 * abstract class IKnowMyType<T> {
 *   TypeToken<T> type = new TypeToken<T>(getClass()) {};
 * }
 * new IKnowMyType<String>() {}.type => String
 * }</pre>
 * </ul>
 *
 * <p>{@code TypeToken} is serializable when no type variable is contained in the type.
 *
 * <p>Note to Guice users: {@code} TypeToken is similar to Guice's {@code TypeLiteral} class except
 * that it is serializable and offers numerous additional utility methods.
 *
 * @author Bob Lee
 * @author Sven Mawson
 * @author Ben Yu
 * @since 12.0
 */
TypeVisitor (/guava/src/com/google/common/reflect/TypeVisitor.java)/**
 * Based on what a {@link Type} is, dispatch it to the corresponding {@code visit*} method. By
 * default, no recursion is done for type arguments or type bounds. But subclasses can opt to do
 * recursion by calling {@link #visit} for any {@code Type} while visitation is in progress. For
 * example, this can be used to reject wildcards or type variables contained in a type as in:
 *
 * <pre>{@code
 * new TypeVisitor() {
 *   protected void visitParameterizedType(ParameterizedType t) {
 *     visit(t.getOwnerType());
 *     visit(t.getActualTypeArguments());
 *   }
 *   protected void visitGenericArrayType(GenericArrayType t) {
 *     visit(t.getGenericComponentType());
 *   }
 *   protected void visitTypeVariable(TypeVariable<?> t) {
 *     throw new IllegalArgumentException("Cannot contain type variable.");
 *   }
 *   protected void visitWildcardType(WildcardType t) {
 *     throw new IllegalArgumentException("Cannot contain wildcard type.");
 *   }
 * }.visit(type);
 * }</pre>
 *
 * <p>One {@code Type} is visited at most once. The second time the same type is visited, it's
 * ignored by {@link #visit}. This avoids infinite recursion caused by recursive type bounds.
 *
 * <p>This class is <em>not</em> thread safe.
 *
 * @author Ben Yu
 */
AsyncCatchingFuture (/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java)/**
   * An {@link AbstractCatchingFuture} that delegates to an {@link AsyncFunction} and {@link
   * #setFuture(ListenableFuture)}.
   */
CatchingFuture (/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java)/**
   * An {@link AbstractCatchingFuture} that delegates to a {@link Function} and {@link
   * #set(Object)}.
   */
AbstractCatchingFuture (/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java)/** Implementations of {@code Futures.catching*}. */
AbstractExecutionThreadService (/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java)/**
 * Base class for services that can implement {@link #startUp}, {@link #run} and {@link #shutDown}
 * methods. This class uses a single thread to execute the service; consider {@link AbstractService}
 * if you would like to manage any threading manually.
 *
 * @author Jesse Wilson
 * @since 1.0
 */
Trusted (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation
   * of this interface must also be an AbstractFuture and must not override or expose for overriding
   * any of the public methods of ListenableFuture.
   */
TrustedFuture (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
   * A less abstract subclass of AbstractFuture. This can be used to optimize setFuture by ensuring
   * that {@link #get} calls exactly the implementation of {@link AbstractFuture#get}.
   */
Waiter (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** Waiter links form a Treiber stack, in the {@link #waiters} field. */
Listener (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** Listeners also form a stack through the {@link #listeners} field. */
Failure (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** A special value to represent failure, when {@link #setException} is called successfully. */
Cancellation (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** A special value to represent cancellation and the 'wasInterrupted' bit. */
SetFuture (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** A special value that encodes the 'setFuture' state. */
UnsafeAtomicHelper (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
   * {@link AtomicHelper} based on {@link sun.misc.Unsafe}.
   *
   * <p>Static initialization of this class will fail if the {@link sun.misc.Unsafe} object cannot
   * be accessed.
   */
SafeAtomicHelper (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/** {@link AtomicHelper} based on {@link AtomicReferenceFieldUpdater}. */
SynchronizedHelper (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
   * {@link AtomicHelper} based on {@code synchronized} and volatile writes.
   *
   * <p>This is an implementation of last resort for when certain basic VM features are broken (like
   * AtomicReferenceFieldUpdater).
   */
AbstractFuture (/guava/src/com/google/common/util/concurrent/AbstractFuture.java)/**
 * An abstract implementation of {@link ListenableFuture}, intended for advanced users only. More
 * common ways to create a {@code ListenableFuture} include instantiating a {@link SettableFuture},
 * submitting a task to a {@link ListeningExecutorService}, and deriving a {@code Future} from an
 * existing one, typically using methods like {@link Futures#transform(ListenableFuture,
 * com.google.common.base.Function, java.util.concurrent.Executor) Futures.transform} and {@link
 * Futures#catching(ListenableFuture, Class, com.google.common.base.Function,
 * java.util.concurrent.Executor) Futures.catching}.
 *
 * <p>This class implements all methods in {@code ListenableFuture}. Subclasses should provide a way
 * to set the result of the computation through the protected methods {@link #set(Object)}, {@link
 * #setFuture(ListenableFuture)} and {@link #setException(Throwable)}. Subclasses may also override
 * {@link #afterDone()}, which will be invoked automatically when the future completes. Subclasses
 * should rarely override other methods.
 *
 * @author Sven Mawson
 * @author Luke Sandberg
 * @since 1.0
 */
AbstractIdleService (/guava/src/com/google/common/util/concurrent/AbstractIdleService.java)/**
 * Base class for services that do not need a thread while "running" but may need one during startup
 * and shutdown. Subclasses can implement {@link #startUp} and {@link #shutDown} methods, each which
 * run in a executor which by default uses a separate thread for each method.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */
AbstractListeningExecutorService (/guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java)/**
 * Abstract {@link ListeningExecutorService} implementation that creates {@link ListenableFuture}
 * instances for each {@link Runnable} and {@link Callable} submitted to it. These tasks are run
 * with the abstract {@link #execute execute(Runnable)} method.
 *
 * <p>In addition to {@link #execute}, subclasses must implement all methods related to shutdown and
 * termination.
 *
 * @author Chris Povirk
 * @since 14.0
 */
Scheduler (/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/**
   * A scheduler defines the policy for how the {@link AbstractScheduledService} should run its
   * task.
   *
   * <p>Consider using the {@link #newFixedDelaySchedule} and {@link #newFixedRateSchedule} factory
   * methods, these provide {@link Scheduler} instances for the common use case of running the
   * service with a fixed schedule. If more flexibility is needed then consider subclassing {@link
   * CustomScheduler}.
   *
   * @author Luke Sandberg
   * @since 11.0
   */
ReschedulableCallable (/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/** A callable class that can reschedule itself using a {@link CustomScheduler}. */
Schedule (/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/**
     * A value object that represents an absolute delay until a task should be invoked.
     *
     * @author Luke Sandberg
     * @since 11.0
     */
CustomScheduler (/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/**
   * A {@link Scheduler} that provides a convenient way for the {@link AbstractScheduledService} to
   * use a dynamically changing schedule. After every execution of the task, assuming it hasn't been
   * cancelled, the {@link #getNextSchedule} method will be called.
   *
   * @author Luke Sandberg
   * @since 11.0
   */
AbstractScheduledService (/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java)/**
 * Base class for services that can implement {@link #startUp} and {@link #shutDown} but while in
 * the "running" state need to perform a periodic task. Subclasses can implement {@link #startUp},
 * {@link #shutDown} and also a {@link #runOneIteration} method that will be executed periodically.
 *
 * <p>This class uses the {@link ScheduledExecutorService} returned from {@link #executor} to run
 * the {@link #startUp} and {@link #shutDown} methods and also uses that service to schedule the
 * {@link #runOneIteration} that will be executed periodically as specified by its {@link
 * Scheduler}. When this service is asked to stop via {@link #stopAsync} it will cancel the periodic
 * task (but not interrupt it) and wait for it to stop before running the {@link #shutDown} method.
 *
 * <p>Subclasses are guaranteed that the life cycle methods ({@link #runOneIteration}, {@link
 * #startUp} and {@link #shutDown}) will never run concurrently. Notably, if any execution of {@link
 * #runOneIteration} takes longer than its schedule defines, then subsequent executions may start
 * late. Also, all life cycle methods are executed with a lock held, so subclasses can safely modify
 * shared state without additional synchronization necessary for visibility to later executions of
 * the life cycle methods.
 *
 * <h3>Usage Example</h3>
 *
 * <p>Here is a sketch of a service which crawls a website and uses the scheduling capabilities to
 * rate limit itself.
 *
 * <pre>{@code
 * class CrawlingService extends AbstractScheduledService {
 *   private Set<Uri> visited;
 *   private Queue<Uri> toCrawl;
 *   protected void startUp() throws Exception {
 *     toCrawl = readStartingUris();
 *   }
 *
 *   protected void runOneIteration() throws Exception {
 *     Uri uri = toCrawl.remove();
 *     Collection<Uri> newUris = crawl(uri);
 *     visited.add(uri);
 *     for (Uri newUri : newUris) {
 *       if (!visited.contains(newUri)) { toCrawl.add(newUri); }
 *     }
 *   }
 *
 *   protected void shutDown() throws Exception {
 *     saveUris(toCrawl);
 *   }
 *
 *   protected Scheduler scheduler() {
 *     return Scheduler.newFixedRateSchedule(0, 1, TimeUnit.SECONDS);
 *   }
 * }
 * }</pre>
 *
 * <p>This class uses the life cycle methods to read in a list of starting URIs and save the set of
 * outstanding URIs when shutting down. Also, it takes advantage of the scheduling functionality to
 * rate limit the number of queries we perform.
 *
 * @author Luke Sandberg
 * @since 11.0
 */
AbstractService (/guava/src/com/google/common/util/concurrent/AbstractService.java)/**
 * Base class for implementing services that can handle {@link #doStart} and {@link #doStop}
 * requests, responding to them with {@link #notifyStarted()} and {@link #notifyStopped()}
 * callbacks. Its subclasses must manage threads manually; consider {@link
 * AbstractExecutionThreadService} if you need only a single execution thread.
 *
 * @author Jesse Wilson
 * @author Luke Sandberg
 * @since 1.0
 */
AsyncTransformFuture (/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java)/**
   * An {@link AbstractTransformFuture} that delegates to an {@link AsyncFunction} and {@link
   * #setFuture(ListenableFuture)}.
   */
TransformFuture (/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java)/**
   * An {@link AbstractTransformFuture} that delegates to a {@link Function} and {@link
   * #set(Object)}.
   */
AbstractTransformFuture (/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java)/** Implementations of {@code Futures.transform*}. */
AggregateFuture (/guava/src/com/google/common/util/concurrent/AggregateFuture.java)/**
 * A future whose value is derived from a collection of input futures.
 *
 * @param <InputT> the type of the individual inputs
 * @param <OutputT> the type of the output (i.e. this) future
 */
AggregateFutureState (/guava/src/com/google/common/util/concurrent/AggregateFutureState.java)/**
 * A helper which does some thread-safe operations for aggregate futures, which must be implemented
 * differently in GWT. Namely:
 *
 * <ul>
 *   <li>Lazily initializes a set of seen exceptions
 *   <li>Decrements a counter atomically
 * </ul>
 */
AsyncCallable (/guava/src/com/google/common/util/concurrent/AsyncCallable.java)/**
 * Computes a value, possibly asynchronously. For an example usage and more information, see {@link
 * Futures.FutureCombiner#callAsync(AsyncCallable, java.util.concurrent.Executor)}.
 *
 * <p>Much like {@link java.util.concurrent.Callable}, but returning a {@link ListenableFuture}
 * result.
 *
 * @since 20.0
 */
AsyncFunction (/guava/src/com/google/common/util/concurrent/AsyncFunction.java)/**
 * Transforms a value, possibly asynchronously. For an example usage and more information, see
 * {@link Futures#transformAsync(ListenableFuture, AsyncFunction, Executor)}.
 *
 * @author Chris Povirk
 * @since 11.0
 */
AtomicDouble (/guava/src/com/google/common/util/concurrent/AtomicDouble.java)/**
 * A {@code double} value that may be updated atomically. See the {@link
 * java.util.concurrent.atomic} package specification for description of the properties of atomic
 * variables. An {@code AtomicDouble} is used in applications such as atomic accumulation, and
 * cannot be used as a replacement for a {@link Double}. However, this class does extend {@code
 * Number} to allow uniform access by tools and utilities that deal with numerically-based classes.
 *
 * <p><a name="bitEquals"></a>This class compares primitive {@code double} values in methods such as
 * {@link #compareAndSet} by comparing their bitwise representation using {@link
 * Double#doubleToRawLongBits}, which differs from both the primitive double {@code ==} operator and
 * from {@link Double#equals}, as if implemented by:
 *
 * <pre>{@code
 * static boolean bitEquals(double x, double y) {
 *   long xBits = Double.doubleToRawLongBits(x);
 *   long yBits = Double.doubleToRawLongBits(y);
 *   return xBits == yBits;
 * }
 * }</pre>
 *
 * <p>It is possible to write a more scalable updater, at the cost of giving up strict atomicity.
 * See for example <a
 * href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166edocs/jsr166e/DoubleAdder.html">
 * DoubleAdder</a> and <a
 * href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166edocs/jsr166e/DoubleMaxUpdater.html">
 * DoubleMaxUpdater</a>.
 *
 * @author Doug Lea
 * @author Martin Buchholz
 * @since 11.0
 */
AtomicDoubleArray (/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java)/**
 * A {@code double} array in which elements may be updated atomically. See the {@link
 * java.util.concurrent.atomic} package specification for description of the properties of atomic
 * variables.
 *
 * <p><a name="bitEquals"></a>This class compares primitive {@code double} values in methods such as
 * {@link #compareAndSet} by comparing their bitwise representation using {@link
 * Double#doubleToRawLongBits}, which differs from both the primitive double {@code ==} operator and
 * from {@link Double#equals}, as if implemented by:
 *
 * <pre>{@code
 * static boolean bitEquals(double x, double y) {
 *   long xBits = Double.doubleToRawLongBits(x);
 *   long yBits = Double.doubleToRawLongBits(y);
 *   return xBits == yBits;
 * }
 * }</pre>
 *
 * @author Doug Lea
 * @author Martin Buchholz
 * @since 11.0
 */
AtomicLongMap (/guava/src/com/google/common/util/concurrent/AtomicLongMap.java)/**
 * A map containing {@code long} values that can be atomically updated. While writes to a
 * traditional {@code Map} rely on {@code put(K, V)}, the typical mechanism for writing to this map
 * is {@code addAndGet(K, long)}, which adds a {@code long} to the value currently associated with
 * {@code K}. If a key has not yet been associated with a value, its implicit value is zero.
 *
 * <p>Most methods in this class treat absent values and zero values identically, as individually
 * documented. Exceptions to this are {@link #containsKey}, {@link #size}, {@link #isEmpty}, {@link
 * #asMap}, and {@link #toString}.
 *
 * <p>Instances of this class may be used by multiple threads concurrently. All operations are
 * atomic unless otherwise noted.
 *
 * <p><b>Note:</b> If your values are always positive and less than 2^31, you may wish to use a
 * {@link com.google.common.collect.Multiset} such as {@link
 * com.google.common.collect.ConcurrentHashMultiset} instead.
 *
 * <p><b>Warning:</b> Unlike {@code Multiset}, entries whose values are zero are not automatically
 * removed from the map. Instead they must be removed manually with {@link #removeAllZeros}.
 *
 * @author Charles Fry
 * @since 11.0
 */
Atomics (/guava/src/com/google/common/util/concurrent/Atomics.java)/**
 * Static utility methods pertaining to classes in the {@code java.util.concurrent.atomic} package.
 *
 * @author Kurt Alfred Kluever
 * @since 10.0
 */
Callables (/guava/src/com/google/common/util/concurrent/Callables.java)/**
 * Static utility methods pertaining to the {@link Callable} interface.
 *
 * @author Isaac Shum
 * @since 1.0
 */
ListFuture (/guava/src/com/google/common/util/concurrent/CollectionFuture.java)/** Used for {@link Futures#allAsList} and {@link Futures#successfulAsList}. */
CollectionFuture (/guava/src/com/google/common/util/concurrent/CollectionFuture.java)/** Aggregate future that collects (stores) results of each future. */
CombinedFuture (/guava/src/com/google/common/util/concurrent/CombinedFuture.java)/** Aggregate future that computes its value by calling a callable. */
Policy (/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * Encapsulates the action to be taken when a potential deadlock is encountered. Clients can use
   * one of the predefined {@link Policies} or specify a custom implementation. Implementations must
   * be thread-safe.
   *
   * @since 13.0
   */
WithExplicitOrdering (/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * A {@code CycleDetectingLockFactory.WithExplicitOrdering} provides the additional enforcement of
   * an application-specified ordering of lock acquisitions. The application defines the allowed
   * ordering with an {@code Enum} whose values each correspond to a lock type. The order in which
   * the values are declared dictates the allowed order of lock acquisition. In other words, locks
   * corresponding to smaller values of {@link Enum#ordinal()} should only be acquired before locks
   * with larger ordinals. Example:
   *
   * <pre>{@code
   * enum MyLockOrder {
   *   FIRST, SECOND, THIRD;
   * }
   *
   * CycleDetectingLockFactory.WithExplicitOrdering<MyLockOrder> factory =
   *   CycleDetectingLockFactory.newInstanceWithExplicitOrdering(Policies.THROW);
   *
   * Lock lock1 = factory.newReentrantLock(MyLockOrder.FIRST);
   * Lock lock2 = factory.newReentrantLock(MyLockOrder.SECOND);
   * Lock lock3 = factory.newReentrantLock(MyLockOrder.THIRD);
   *
   * lock1.lock();
   * lock3.lock();
   * lock2.lock();  // will throw an IllegalStateException
   * }</pre>
   *
   * <p>As with all locks created by instances of {@code CycleDetectingLockFactory} explicitly
   * ordered locks participate in general cycle detection with all other cycle detecting locks, and
   * a lock's behavior when detecting a cyclic lock acquisition is defined by the {@code Policy} of
   * the factory that created it.
   *
   * <p>Note, however, that although multiple locks can be created for a given Enum value, whether
   * it be through separate factory instances or through multiple calls to the same factory,
   * attempting to acquire multiple locks with the same Enum value (within the same thread) will
   * result in an IllegalStateException regardless of the factory's policy. For example:
   *
   * <pre>{@code
   * CycleDetectingLockFactory.WithExplicitOrdering<MyLockOrder> factory1 =
   *   CycleDetectingLockFactory.newInstanceWithExplicitOrdering(...);
   * CycleDetectingLockFactory.WithExplicitOrdering<MyLockOrder> factory2 =
   *   CycleDetectingLockFactory.newInstanceWithExplicitOrdering(...);
   *
   * Lock lockA = factory1.newReentrantLock(MyLockOrder.FIRST);
   * Lock lockB = factory1.newReentrantLock(MyLockOrder.FIRST);
   * Lock lockC = factory2.newReentrantLock(MyLockOrder.FIRST);
   *
   * lockA.lock();
   *
   * lockB.lock();  // will throw an IllegalStateException
   * lockC.lock();  // will throw an IllegalStateException
   *
   * lockA.lock();  // reentrant acquisition is okay
   * }</pre>
   *
   * <p>It is the responsibility of the application to ensure that multiple lock instances with the
   * same rank are never acquired in the same thread.
   *
   * @param <E> The Enum type representing the explicit lock ordering.
   * @since 13.0
   */
ExampleStackTrace (/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * A Throwable used to record a stack trace that illustrates an example of a specific lock
   * acquisition ordering. The top of the stack trace is truncated such that it starts with the
   * acquisition of the lock in question, e.g.
   *
   * <pre>
   * com...ExampleStackTrace: LockB -&gt; LockC
   *   at com...CycleDetectingReentrantLock.lock(CycleDetectingLockFactory.java:443)
   *   at ...
   *   at ...
   *   at com...MyClass.someMethodThatAcquiresLockB(MyClass.java:123)
   * </pre>
   */
PotentialDeadlockException (/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * Represents a detected cycle in lock acquisition ordering. The exception includes a causal chain
   * of {@code ExampleStackTrace} instances to illustrate the cycle, e.g.
   *
   * <pre>
   * com....PotentialDeadlockException: Potential Deadlock from LockC -&gt; ReadWriteA
   *   at ...
   *   at ...
   * Caused by: com...ExampleStackTrace: LockB -&gt; LockC
   *   at ...
   *   at ...
   * Caused by: com...ExampleStackTrace: ReadWriteA -&gt; LockB
   *   at ...
   *   at ...
   * </pre>
   *
   * <p>Instances are logged for the {@code Policies.WARN}, and thrown for {@code Policies.THROW}.
   *
   * @since 13.0
   */
CycleDetectingLock (/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * Internal Lock implementations implement the {@code CycleDetectingLock} interface, allowing the
   * detection logic to treat all locks in the same manner.
   */
LockGraphNode (/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
   * A {@code LockGraphNode} associated with each lock instance keeps track of the directed edges in
   * the lock acquisition graph.
   */
CycleDetectingLockFactory (/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java)/**
 * The {@code CycleDetectingLockFactory} creates {@link ReentrantLock} instances and {@link
 * ReentrantReadWriteLock} instances that detect potential deadlock by checking for cycles in lock
 * acquisition order.
 *
 * <p>Potential deadlocks detected when calling the {@code lock()}, {@code lockInterruptibly()}, or
 * {@code tryLock()} methods will result in the execution of the {@link Policy} specified when
 * creating the factory. The currently available policies are:
 *
 * <ul>
 *   <li>DISABLED
 *   <li>WARN
 *   <li>THROW
 * </ul>
 *
 * <p>The locks created by a factory instance will detect lock acquisition cycles with locks created
 * by other {@code CycleDetectingLockFactory} instances (except those with {@code Policy.DISABLED}).
 * A lock's behavior when a cycle is detected, however, is defined by the {@code Policy} of the
 * factory that created it. This allows detection of cycles across components while delegating
 * control over lock behavior to individual components.
 *
 * <p>Applications are encouraged to use a {@code CycleDetectingLockFactory} to create any locks for
 * which external/unmanaged code is executed while the lock is held. (See caveats under
 * <strong>Performance</strong>).
 *
 * <p><strong>Cycle Detection</strong>
 *
 * <p>Deadlocks can arise when locks are acquired in an order that forms a cycle. In a simple
 * example involving two locks and two threads, deadlock occurs when one thread acquires Lock A, and
 * then Lock B, while another thread acquires Lock B, and then Lock A:
 *
 * <pre>
 * Thread1: acquire(LockA) --X acquire(LockB)
 * Thread2: acquire(LockB) --X acquire(LockA)
 * </pre>
 *
 * <p>Neither thread will progress because each is waiting for the other. In more complex
 * applications, cycles can arise from interactions among more than 2 locks:
 *
 * <pre>
 * Thread1: acquire(LockA) --X acquire(LockB)
 * Thread2: acquire(LockB) --X acquire(LockC)
 * ...
 * ThreadN: acquire(LockN) --X acquire(LockA)
 * </pre>
 *
 * <p>The implementation detects cycles by constructing a directed graph in which each lock
 * represents a node and each edge represents an acquisition ordering between two locks.
 *
 * <ul>
 *   <li>Each lock adds (and removes) itself to/from a ThreadLocal Set of acquired locks when the
 *       Thread acquires its first hold (and releases its last remaining hold).
 *   <li>Before the lock is acquired, the lock is checked against the current set of acquired
 *       locks---to each of the acquired locks, an edge from the soon-to-be-acquired lock is either
 *       verified or created.
 *   <li>If a new edge needs to be created, the outgoing edges of the acquired locks are traversed
 *       to check for a cycle that reaches the lock to be acquired. If no cycle is detected, a new
 *       "safe" edge is created.
 *   <li>If a cycle is detected, an "unsafe" (cyclic) edge is created to represent a potential
 *       deadlock situation, and the appropriate Policy is executed.
 * </ul>
 *
 * <p>Note that detection of potential deadlock does not necessarily indicate that deadlock will
 * happen, as it is possible that higher level application logic prevents the cyclic lock
 * acquisition from occurring. One example of a false positive is:
 *
 * <pre>
 * LockA -&gt; LockB -&gt; LockC
 * LockA -&gt; LockC -&gt; LockB
 * </pre>
 *
 * <p><strong>ReadWriteLocks</strong>
 *
 * <p>While {@code ReadWriteLock} instances have different properties and can form cycles without
 * potential deadlock, this class treats {@code ReadWriteLock} instances as equivalent to
 * traditional exclusive locks. Although this increases the false positives that the locks detect
 * (i.e. cycles that will not actually result in deadlock), it simplifies the algorithm and
 * implementation considerably. The assumption is that a user of this factory wishes to eliminate
 * any cyclic acquisition ordering.
 *
 * <p><strong>Explicit Lock Acquisition Ordering</strong>
 *
 * <p>The {@link CycleDetectingLockFactory.WithExplicitOrdering} class can be used to enforce an
 * application-specific ordering in addition to performing general cycle detection.
 *
 * <p><strong>Garbage Collection</strong>
 *
 * <p>In order to allow proper garbage collection of unused locks, the edges of the lock graph are
 * weak references.
 *
 * <p><strong>Performance</strong>
 *
 * <p>The extra bookkeeping done by cycle detecting locks comes at some cost to performance.
 * Benchmarks (as of December 2011) show that:
 *
 * <ul>
 *   <li>for an unnested {@code lock()} and {@code unlock()}, a cycle detecting lock takes 38ns as
 *       opposed to the 24ns taken by a plain lock.
 *   <li>for nested locking, the cost increases with the depth of the nesting:
 *       <ul>
 *         <li>2 levels: average of 64ns per lock()/unlock()
 *         <li>3 levels: average of 77ns per lock()/unlock()
 *         <li>4 levels: average of 99ns per lock()/unlock()
 *         <li>5 levels: average of 103ns per lock()/unlock()
 *         <li>10 levels: average of 184ns per lock()/unlock()
 *         <li>20 levels: average of 393ns per lock()/unlock()
 *       </ul>
 * </ul>
 *
 * <p>As such, the CycleDetectingLockFactory may not be suitable for performance-critical
 * applications which involve tightly-looped or deeply-nested locking algorithms.
 *
 * @author Darick Tong
 * @since 13.0
 */
ExecutionError (/guava/src/com/google/common/util/concurrent/ExecutionError.java)/**
 * {@link Error} variant of {@link java.util.concurrent.ExecutionException}. As with {@code
 * ExecutionException}, the error's {@linkplain #getCause() cause} comes from a failed task,
 * possibly run in another thread. That cause should itself be an {@code Error}; if not, use {@code
 * ExecutionException} or {@link UncheckedExecutionException}. This allows the client code to
 * continue to distinguish between exceptions and errors, even when they come from other threads.
 *
 * @author Chris Povirk
 * @since 10.0
 */
ExecutionList (/guava/src/com/google/common/util/concurrent/ExecutionList.java)/**
 * A support class for {@code ListenableFuture} implementations to manage their listeners. An
 * instance contains a list of listeners, each with an associated {@code Executor}, and guarantees
 * that every {@code Runnable} that is {@linkplain #add added} will be executed after {@link
 * #execute()} is called. Any {@code Runnable} added after the call to {@code execute} is still
 * guaranteed to execute. There is no guarantee, however, that listeners will be executed in the
 * order that they are added.
 *
 * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown
 * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception
 * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and logged.
 *
 * @author Nishant Thakkar
 * @author Sven Mawson
 * @since 1.0
 */
ExecutionSequencer (/guava/src/com/google/common/util/concurrent/ExecutionSequencer.java)/**
 * Serializes execution of a set of operations. This class guarantees that a submitted callable will
 * not be called before previously submitted callables (and any {@code Future}s returned from them)
 * have completed.
 *
 * <p>This class implements a superset of the behavior of {@link
 * MoreExecutors#newSequentialExecutor}. If your tasks all run on the same underlying executor and
 * don't need to wait for {@code Future}s returned from {@code AsyncCallable}s, use it instead.
 *
 * @since 26.0
 */
FakeTimeLimiter (/guava/src/com/google/common/util/concurrent/FakeTimeLimiter.java)/**
 * A TimeLimiter implementation which actually does not attempt to limit time at all. This may be
 * desirable to use in some unit tests. More importantly, attempting to debug a call which is
 * time-limited would be extremely annoying, so this gives you a time-limiter you can easily swap in
 * for your real time-limiter while you're debugging.
 *
 * @author Kevin Bourrillion
 * @author Jens Nyman
 * @since 1.0
 */
TrustedFuture (/guava/src/com/google/common/util/concurrent/FluentFuture.java)/**
   * A less abstract subclass of AbstractFuture. This can be used to optimize setFuture by ensuring
   * that {@link #get} calls exactly the implementation of {@link AbstractFuture#get}.
   */
FluentFuture (/guava/src/com/google/common/util/concurrent/FluentFuture.java)/**
 * A {@link ListenableFuture} that supports fluent chains of operations. For example:
 *
 * <pre>{@code
 * ListenableFuture<Boolean> adminIsLoggedIn =
 *     FluentFuture.from(usersDatabase.getAdminUser())
 *         .transform(User::getId, directExecutor())
 *         .transform(ActivityService::isLoggedIn, threadPool)
 *         .catching(RpcException.class, e -> false, directExecutor());
 * }</pre>
 *
 * <h3>Alternatives</h3>
 *
 * <h4>Frameworks</h4>
 *
 * <p>When chaining together a graph of asynchronous operations, you will often find it easier to
 * use a framework. Frameworks automate the process, often adding features like monitoring,
 * debugging, and cancellation. Examples of frameworks include:
 *
 * <ul>
 *   <li><a href="http://dagger.dev/producers.html">Dagger Producers</a>
 * </ul>
 *
 * <h4>{@link java.util.concurrent.CompletableFuture} / {@link java.util.concurrent.CompletionStage}
 * </h4>
 *
 * <p>Users of {@code CompletableFuture} will likely want to continue using {@code
 * CompletableFuture}. {@code FluentFuture} is targeted at people who use {@code ListenableFuture},
 * who can't use Java 8, or who want an API more focused than {@code CompletableFuture}. (If you
 * need to adapt between {@code CompletableFuture} and {@code ListenableFuture}, consider <a
 * href="https://github.com/lukas-krecan/future-converter">Future Converter</a>.)
 *
 * <h3>Extension</h3>
 *
 * If you want a class like {@code FluentFuture} but with extra methods, we recommend declaring your
 * own subclass of {@link ListenableFuture}, complete with a method like {@link #from} to adapt an
 * existing {@code ListenableFuture}, implemented atop a {@link ForwardingListenableFuture} that
 * forwards to that future and adds the desired methods.
 *
 * @since 23.0
 */
ForwardingBlockingDeque (/guava/src/com/google/common/util/concurrent/ForwardingBlockingDeque.java)/**
 * A {@link BlockingDeque} which forwards all its method calls to another {@code BlockingDeque}.
 * Subclasses should override one or more methods to modify the behavior of the backing deque as
 * desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingBlockingDeque} forward <b>indiscriminately</b>
 * to the methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change
 * the behaviour of {@link #offer} which can lead to unexpected behaviour. In this case, you should
 * override {@code offer} as well, either providing your own implementation, or delegating to the
 * provided {@code standardOffer} method.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingBlockingDeque}.
 *
 * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the
 * methods that they depend on are thread-safe.
 *
 * @author Emily Soldal
 * @since 21.0 (since 14.0 as {@link com.google.common.collect.ForwardingBlockingDeque})
 */
ForwardingBlockingQueue (/guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java)/**
 * A {@link BlockingQueue} which forwards all its method calls to another {@link BlockingQueue}.
 * Subclasses should override one or more methods to modify the behavior of the backing collection
 * as desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator
 * pattern</a>.
 *
 * <p><b>{@code default} method warning:</b> This class does <i>not</i> forward calls to {@code
 * default} methods. Instead, it inherits their default implementations. When those implementations
 * invoke methods, they invoke methods on the {@code ForwardingBlockingQueue}.
 *
 * @author Raimundo Mirisola
 * @param <E> the type of elements held in this collection
 * @since 4.0
 */
ForwardingCondition (/guava/src/com/google/common/util/concurrent/ForwardingCondition.java)/** Forwarding wrapper around a {@code Condition}. */
ForwardingExecutorService (/guava/src/com/google/common/util/concurrent/ForwardingExecutorService.java)/**
 * An executor service which forwards all its method calls to another executor service. Subclasses
 * should override one or more methods to modify the behavior of the backing executor service as
 * desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * @author Kurt Alfred Kluever
 * @since 10.0
 */
ForwardingFluentFuture (/guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java)/**
 * {@link FluentFuture} that forwards all calls to a delegate.
 *
 * <h3>Extension</h3>
 *
 * If you want a class like {@code FluentFuture} but with extra methods, we recommend declaring your
 * own subclass of {@link ListenableFuture}, complete with a method like {@link #from} to adapt an
 * existing {@code ListenableFuture}, implemented atop a {@link ForwardingListenableFuture} that
 * forwards to that future and adds the desired methods.
 */
SimpleForwardingFuture (/guava/src/com/google/common/util/concurrent/ForwardingFuture.java)/**
   * A simplified version of {@link ForwardingFuture} where subclasses can pass in an already
   * constructed {@link Future} as the delegate.
   *
   * @since 9.0
   */
ForwardingFuture (/guava/src/com/google/common/util/concurrent/ForwardingFuture.java)/**
 * A {@link Future} which forwards all its method calls to another future. Subclasses should
 * override one or more methods to modify the behavior of the backing future as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p>Most subclasses can just use {@link SimpleForwardingFuture}.
 *
 * @author Sven Mawson
 * @since 1.0
 */
SimpleForwardingListenableFuture (/guava/src/com/google/common/util/concurrent/ForwardingListenableFuture.java)/**
   * A simplified version of {@link ForwardingListenableFuture} where subclasses can pass in an
   * already constructed {@link ListenableFuture} as the delegate.
   *
   * @since 9.0
   */
ForwardingListenableFuture (/guava/src/com/google/common/util/concurrent/ForwardingListenableFuture.java)/**
 * A {@link ListenableFuture} which forwards all its method calls to another future. Subclasses
 * should override one or more methods to modify the behavior of the backing future as desired per
 * the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p>Most subclasses can just use {@link SimpleForwardingListenableFuture}.
 *
 * @author Shardul Deo
 * @since 4.0
 */
ForwardingListeningExecutorService (/guava/src/com/google/common/util/concurrent/ForwardingListeningExecutorService.java)/**
 * A listening executor service which forwards all its method calls to another listening executor
 * service. Subclasses should override one or more methods to modify the behavior of the backing
 * executor service as desired per the <a
 * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * @author Isaac Shum
 * @since 10.0
 */
ForwardingLock (/guava/src/com/google/common/util/concurrent/ForwardingLock.java)/** Forwarding wrapper around a {@code Lock}. */
FutureCallback (/guava/src/com/google/common/util/concurrent/FutureCallback.java)/**
 * A callback for accepting the results of a {@link java.util.concurrent.Future} computation
 * asynchronously.
 *
 * <p>To attach to a {@link ListenableFuture} use {@link Futures#addCallback}.
 *
 * @author Anthony Zana
 * @since 10.0
 */
FutureCombiner (/guava/src/com/google/common/util/concurrent/Futures.java)/**
   * A helper to create a new {@code ListenableFuture} whose result is generated from a combination
   * of input futures.
   *
   * <p>See {@link #whenAllComplete} and {@link #whenAllSucceed} for how to instantiate this class.
   *
   * <p>Example:
   *
   * <pre>{@code
   * final ListenableFuture<Instant> loginDateFuture =
   *     loginService.findLastLoginDate(username);
   * final ListenableFuture<List<String>> recentCommandsFuture =
   *     recentCommandsService.findRecentCommands(username);
   * ListenableFuture<UsageHistory> usageFuture =
   *     Futures.whenAllSucceed(loginDateFuture, recentCommandsFuture)
   *         .call(
   *             () ->
   *                 new UsageHistory(
   *                     username,
   *                     Futures.getDone(loginDateFuture),
   *                     Futures.getDone(recentCommandsFuture)),
   *             executor);
   * }</pre>
   *
   * @since 20.0
   */
NonCancellationPropagatingFuture (/guava/src/com/google/common/util/concurrent/Futures.java)/** A wrapped future that does not propagate cancellation to its delegate. */
CallbackListener (/guava/src/com/google/common/util/concurrent/Futures.java)/** See {@link #addCallback(ListenableFuture, FutureCallback, Executor)} for behavioral notes. */
Futures (/guava/src/com/google/common/util/concurrent/Futures.java)/**
 * Static utility methods pertaining to the {@link Future} interface.
 *
 * <p>Many of these methods use the {@link ListenableFuture} API; consult the Guava User Guide
 * article on <a href="https://github.com/google/guava/wiki/ListenableFutureExplained">{@code
 * ListenableFuture}</a>.
 *
 * <p>The main purpose of {@code ListenableFuture} is to help you chain together a graph of
 * asynchronous operations. You can chain them together manually with calls to methods like {@link
 * Futures#transform(ListenableFuture, Function, Executor) Futures.transform}, but you will often
 * find it easier to use a framework. Frameworks automate the process, often adding features like
 * monitoring, debugging, and cancellation. Examples of frameworks include:
 *
 * <ul>
 *   <li><a href="http://dagger.dev/producers.html">Dagger Producers</a>
 * </ul>
 *
 * <p>If you do chain your operations manually, you may want to use {@link FluentFuture}.
 *
 * @author Kevin Bourrillion
 * @author Nishant Thakkar
 * @author Sven Mawson
 * @since 1.0
 */
GetCheckedTypeValidatorHolder (/guava/src/com/google/common/util/concurrent/FuturesGetChecked.java)/**
   * Provides a check of whether an exception type is valid for use with {@link
   * FuturesGetChecked#getChecked(Future, Class)}, possibly using caching.
   *
   * <p>Uses reflection to gracefully fall back to when certain implementations aren't available.
   */
FuturesGetChecked (/guava/src/com/google/common/util/concurrent/FuturesGetChecked.java)/** Static methods used to implement {@link Futures#getChecked(Future, Class)}. */
GwtFluentFutureCatchingSpecialization (/guava/src/com/google/common/util/concurrent/GwtFluentFutureCatchingSpecialization.java)/**
 * Hidden superclass of {@link FluentFuture} that provides us a place to declare special GWT
 * versions of the {@link FluentFuture#catching(Class, com.google.common.base.Function)
 * FluentFuture.catching} family of methods. Those versions have slightly different signatures.
 */
GwtFuturesCatchingSpecialization (/guava/src/com/google/common/util/concurrent/GwtFuturesCatchingSpecialization.java)/**
 * Hidden superclass of {@link Futures} that provides us a place to declare special GWT versions of
 * the {@link Futures#catching(ListenableFuture, Class, com.google.common.base.Function,
 * java.util.concurrent.Executor) Futures.catching} family of methods. Those versions have slightly
 * different signatures.
 */
ImmediateFuture (/guava/src/com/google/common/util/concurrent/ImmediateFuture.java)/** Implementation of {@link Futures#immediateFuture}. */
Internal (/guava/src/com/google/common/util/concurrent/Internal.java)/** This class is for {@code com.google.common.util.concurrent} use only! */
ListenableFutureAdapter (/guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java)/**
   * An adapter to turn a {@link Future} into a {@link ListenableFuture}. This will wait on the
   * future to finish, and when it completes, run the listeners. This implementation will wait on
   * the source future indefinitely, so if the source future never completes, the adapter will never
   * complete either.
   *
   * <p>If the delegate future is interrupted or throws an unexpected unchecked exception, the
   * listeners will not be invoked.
   */
JdkFutureAdapters (/guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java)/**
 * Utilities necessary for working with libraries that supply plain {@link Future} instances. Note
 * that, whenever possible, it is strongly preferred to modify those libraries to return {@code
 * ListenableFuture} directly.
 *
 * @author Sven Mawson
 * @since 10.0 (replacing {@code Futures.makeListenable}, which existed in 1.0)
 */
ListenableFuture (/guava/src/com/google/common/util/concurrent/ListenableFuture.java)/**
 * A {@link Future} that accepts completion listeners. Each listener has an associated executor, and
 * it is invoked using this executor once the future's computation is {@linkplain Future#isDone()
 * complete}. If the computation has already completed when the listener is added, the listener will
 * execute immediately.
 *
 * <p>See the Guava User Guide article on <a
 * href="https://github.com/google/guava/wiki/ListenableFutureExplained">{@code
 * ListenableFuture}</a>.
 *
 * <p>This class is GWT-compatible.
 *
 * <h3>Purpose</h3>
 *
 * <p>The main purpose of {@code ListenableFuture} is to help you chain together a graph of
 * asynchronous operations. You can chain them together manually with calls to methods like {@link
 * Futures#transform(ListenableFuture, com.google.common.base.Function, Executor)
 * Futures.transform}, but you will often find it easier to use a framework. Frameworks automate the
 * process, often adding features like monitoring, debugging, and cancellation. Examples of
 * frameworks include:
 *
 * <ul>
 *   <li><a href="http://dagger.dev/producers.html">Dagger Producers</a>
 * </ul>
 *
 * <p>The main purpose of {@link #addListener addListener} is to support this chaining. You will
 * rarely use it directly, in part because it does not provide direct access to the {@code Future}
 * result. (If you want such access, you may prefer {@link Futures#addCallback
 * Futures.addCallback}.) Still, direct {@code addListener} calls are occasionally useful:
 *
 * <pre>{@code
 * final String name = ...;
 * inFlight.add(name);
 * ListenableFuture<Result> future = service.query(name);
 * future.addListener(new Runnable() {
 *   public void run() {
 *     processedCount.incrementAndGet();
 *     inFlight.remove(name);
 *     lastProcessed.set(name);
 *     logger.info("Done with {0}", name);
 *   }
 * }, executor);
 * }</pre>
 *
 * <h3>How to get an instance</h3>
 *
 * <p>We encourage you to return {@code ListenableFuture} from your methods so that your users can
 * take advantage of the {@linkplain Futures utilities built atop the class}. The way that you will
 * create {@code ListenableFuture} instances depends on how you currently create {@code Future}
 * instances:
 *
 * <ul>
 *   <li>If you receive them from an {@code java.util.concurrent.ExecutorService}, convert that
 *       service to a {@link ListeningExecutorService}, usually by calling {@link
 *       MoreExecutors#listeningDecorator(java.util.concurrent.ExecutorService)
 *       MoreExecutors.listeningDecorator}.
 *   <li>If you manually call {@link java.util.concurrent.FutureTask#set} or a similar method,
 *       create a {@link SettableFuture} instead. (If your needs are more complex, you may prefer
 *       {@link AbstractFuture}.)
 * </ul>
 *
 * <p><b>Test doubles</b>: If you need a {@code ListenableFuture} for your test, try a {@link
 * SettableFuture} or one of the methods in the {@link Futures#immediateFuture Futures.immediate*}
 * family. <b>Avoid</b> creating a mock or stub {@code Future}. Mock and stub implementations are
 * fragile because they assume that only certain methods will be called and because they often
 * implement subtleties of the API improperly.
 *
 * <p><b>Custom implementation</b>: Avoid implementing {@code ListenableFuture} from scratch. If you
 * can't get by with the standard implementations, prefer to derive a new {@code Future} instance
 * with the methods in {@link Futures} or, if necessary, to extend {@link AbstractFuture}.
 *
 * <p>Occasionally, an API will return a plain {@code Future} and it will be impossible to change
 * the return type. For this case, we provide a more expensive workaround in {@code
 * JdkFutureAdapters}. However, when possible, it is more efficient and reliable to create a {@code
 * ListenableFuture} directly.
 *
 * @author Sven Mawson
 * @author Nishant Thakkar
 * @since 1.0
 */
ListenableFutureTask (/guava/src/com/google/common/util/concurrent/ListenableFutureTask.java)/**
 * A {@link FutureTask} that also implements the {@link ListenableFuture} interface. Unlike {@code
 * FutureTask}, {@code ListenableFutureTask} does not provide an overrideable {@link
 * FutureTask#done() done()} method. For similar functionality, call {@link #addListener}.
 *
 * <p>Few users should use this class. It is intended primarily for those who are implementing an
 * {@code ExecutorService}. Most users should call {@link ListeningExecutorService#submit(Callable)
 * ListeningExecutorService.submit} on a service obtained from {@link
 * MoreExecutors#listeningDecorator}.
 *
 * @author Sven Mawson
 * @since 1.0
 */
ListenableScheduledFuture (/guava/src/com/google/common/util/concurrent/ListenableScheduledFuture.java)/**
 * Helper interface to implement both {@link ListenableFuture} and {@link ScheduledFuture}.
 *
 * @author Anthony Zana
 * @since 15.0
 */
Event (/guava/src/com/google/common/util/concurrent/ListenerCallQueue.java)/** Method reference-compatible listener event. */
PerListenerQueue (/guava/src/com/google/common/util/concurrent/ListenerCallQueue.java)/**
   * A special purpose queue/executor that dispatches listener events serially on a configured
   * executor. Each event event can be added and dispatched as separate phases.
   *
   * <p>This class is very similar to {@link SequentialExecutor} with the exception that events can
   * be added without necessarily executing immediately.
   */
ListenerCallQueue (/guava/src/com/google/common/util/concurrent/ListenerCallQueue.java)/**
 * A list of listeners for implementing a concurrency friendly observable object.
 *
 * <p>Listeners are registered once via {@link #addListener} and then may be invoked by {@linkplain
 * #enqueue enqueueing} and then {@linkplain #dispatch dispatching} events.
 *
 * <p>The API of this class is designed to make it easy to achieve the following properties
 *
 * <ul>
 *   <li>Multiple events for the same listener are never dispatched concurrently.
 *   <li>Events for the different listeners are dispatched concurrently.
 *   <li>All events for a given listener dispatch on the provided {@link #executor}.
 *   <li>It is easy for the user to ensure that listeners are never invoked while holding locks.
 * </ul>
 *
 * The last point is subtle. Often the observable object will be managing its own internal state
 * using a lock, however it is dangerous to dispatch listeners while holding a lock because they
 * might run on the {@code directExecutor()} or be otherwise re-entrant (call back into your
 * object). So it is important to not call {@link #dispatch} while holding any locks. This is why
 * {@link #enqueue} and {@link #dispatch} are 2 different methods. It is expected that the decision
 * to run a particular event is made during the state change, but the decision to actually invoke
 * the listeners can be delayed slightly so that locks can be dropped. Also, because {@link
 * #dispatch} is expected to be called concurrently, it is idempotent.
 */
ListeningExecutorService (/guava/src/com/google/common/util/concurrent/ListeningExecutorService.java)/**
 * An {@link ExecutorService} that returns {@link ListenableFuture} instances. To create an instance
 * from an existing {@link ExecutorService}, call {@link
 * MoreExecutors#listeningDecorator(ExecutorService)}.
 *
 * @author Chris Povirk
 * @since 10.0
 */
ListeningScheduledExecutorService (/guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java)/**
 * A {@link ScheduledExecutorService} that returns {@link ListenableFuture} instances from its
 * {@code ExecutorService} methods. To create an instance from an existing {@link
 * ScheduledExecutorService}, call {@link
 * MoreExecutors#listeningDecorator(ScheduledExecutorService)}.
 *
 * @author Chris Povirk
 * @since 10.0
 */
Guard (/guava/src/com/google/common/util/concurrent/Monitor.java)/**
   * A boolean condition for which a thread may wait. A {@code Guard} is associated with a single
   * {@code Monitor}. The monitor may check the guard at arbitrary times from any thread occupying
   * the monitor, so code should not be written to rely on how often a guard might or might not be
   * checked.
   *
   * <p>If a {@code Guard} is passed into any method of a {@code Monitor} other than the one it is
   * associated with, an {@link IllegalMonitorStateException} is thrown.
   *
   * @since 10.0
   */
Monitor (/guava/src/com/google/common/util/concurrent/Monitor.java)/**
 * A synchronization abstraction supporting waiting on arbitrary boolean conditions.
 *
 * <p>This class is intended as a replacement for {@link ReentrantLock}. Code using {@code Monitor}
 * is less error-prone and more readable than code using {@code ReentrantLock}, without significant
 * performance loss. {@code Monitor} even has the potential for performance gain by optimizing the
 * evaluation and signaling of conditions. Signaling is entirely <a
 * href="http://en.wikipedia.org/wiki/Monitor_(synchronization)#Implicit_signaling">implicit</a>. By
 * eliminating explicit signaling, this class can guarantee that only one thread is awakened when a
 * condition becomes true (no "signaling storms" due to use of {@link
 * java.util.concurrent.locks.Condition#signalAll Condition.signalAll}) and that no signals are lost
 * (no "hangs" due to incorrect use of {@link java.util.concurrent.locks.Condition#signal
 * Condition.signal}).
 *
 * <p>A thread is said to <i>occupy</i> a monitor if it has <i>entered</i> the monitor but not yet
 * <i>left</i>. Only one thread may occupy a given monitor at any moment. A monitor is also
 * reentrant, so a thread may enter a monitor any number of times, and then must leave the same
 * number of times. The <i>enter</i> and <i>leave</i> operations have the same synchronization
 * semantics as the built-in Java language synchronization primitives.
 *
 * <p>A call to any of the <i>enter</i> methods with <b>void</b> return type should always be
 * followed immediately by a <i>try/finally</i> block to ensure that the current thread leaves the
 * monitor cleanly:
 *
 * <pre>{@code
 * monitor.enter();
 * try {
 *   // do things while occupying the monitor
 * } finally {
 *   monitor.leave();
 * }
 * }</pre>
 *
 * <p>A call to any of the <i>enter</i> methods with <b>boolean</b> return type should always appear
 * as the condition of an <i>if</i> statement containing a <i>try/finally</i> block to ensure that
 * the current thread leaves the monitor cleanly:
 *
 * <pre>{@code
 * if (monitor.tryEnter()) {
 *   try {
 *     // do things while occupying the monitor
 *   } finally {
 *     monitor.leave();
 *   }
 * } else {
 *   // do other things since the monitor was not available
 * }
 * }</pre>
 *
 * <h2>Comparison with {@code synchronized} and {@code ReentrantLock}</h2>
 *
 * <p>The following examples show a simple threadsafe holder expressed using {@code synchronized},
 * {@link ReentrantLock}, and {@code Monitor}.
 *
 * <h3>{@code synchronized}</h3>
 *
 * <p>This version is the fewest lines of code, largely because the synchronization mechanism used
 * is built into the language and runtime. But the programmer has to remember to avoid a couple of
 * common bugs: The {@code wait()} must be inside a {@code while} instead of an {@code if}, and
 * {@code notifyAll()} must be used instead of {@code notify()} because there are two different
 * logical conditions being awaited.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *
 *   public synchronized V get() throws InterruptedException {
 *     while (value == null) {
 *       wait();
 *     }
 *     V result = value;
 *     value = null;
 *     notifyAll();
 *     return result;
 *   }
 *
 *   public synchronized void set(V newValue) throws InterruptedException {
 *     while (value != null) {
 *       wait();
 *     }
 *     value = newValue;
 *     notifyAll();
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code ReentrantLock}</h3>
 *
 * <p>This version is much more verbose than the {@code synchronized} version, and still suffers
 * from the need for the programmer to remember to use {@code while} instead of {@code if}. However,
 * one advantage is that we can introduce two separate {@code Condition} objects, which allows us to
 * use {@code signal()} instead of {@code signalAll()}, which may be a performance benefit.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final ReentrantLock lock = new ReentrantLock();
 *   private final Condition valuePresent = lock.newCondition();
 *   private final Condition valueAbsent = lock.newCondition();
 *
 *   public V get() throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value == null) {
 *         valuePresent.await();
 *       }
 *       V result = value;
 *       value = null;
 *       valueAbsent.signal();
 *       return result;
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value != null) {
 *         valueAbsent.await();
 *       }
 *       value = newValue;
 *       valuePresent.signal();
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code Monitor}</h3>
 *
 * <p>This version adds some verbosity around the {@code Guard} objects, but removes that same
 * verbosity, and more, from the {@code get} and {@code set} methods. {@code Monitor} implements the
 * same efficient signaling as we had to hand-code in the {@code ReentrantLock} version above.
 * Finally, the programmer no longer has to hand-code the wait loop, and therefore doesn't have to
 * remember to use {@code while} instead of {@code if}.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final Monitor monitor = new Monitor();
 *   private final Monitor.Guard valuePresent = monitor.newGuard(() -> value != null);
 *   private final Monitor.Guard valueAbsent = monitor.newGuard(() -> value == null);
 *
 *   public V get() throws InterruptedException {
 *     monitor.enterWhen(valuePresent);
 *     try {
 *       V result = value;
 *       value = null;
 *       return result;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     monitor.enterWhen(valueAbsent);
 *     try {
 *       value = newValue;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 * }
 * }</pre>
 *
 * @author Justin T. Sampson
 * @author Martin Buchholz
 * @since 10.0
 */
Application (/guava/src/com/google/common/util/concurrent/MoreExecutors.java)/** Represents the current application to register shutdown hooks. */
MoreExecutors (/guava/src/com/google/common/util/concurrent/MoreExecutors.java)/**
 * Factory and utility methods for {@link java.util.concurrent.Executor}, {@link ExecutorService},
 * and {@link ThreadFactory}.
 *
 * @author Eric Fellheimer
 * @author Kyle Littlefield
 * @author Justin Mahoney
 * @since 3.0
 */
Partially (/guava/src/com/google/common/util/concurrent/Partially.java)/**
 * Outer class that exists solely to let us write {@code Partially.GwtIncompatible} instead of plain
 * {@code GwtIncompatible}. This is more accurate for {@link Futures#catching}, which is available
 * under GWT but with a slightly different signature.
 *
 * <p>We can't use {@code PartiallyGwtIncompatible} because then the GWT compiler wouldn't recognize
 * it as a {@code GwtIncompatible} annotation. And for {@code Futures.catching}, we need the GWT
 * compiler to autostrip the normal server method in order to expose the special, inherited GWT
 * version.
 */
Platform (/guava/src/com/google/common/util/concurrent/Platform.java)/** Methods factored out so that they can be emulated differently in GWT. */
Runnables (/guava/src/com/google/common/util/concurrent/Runnables.java)/**
 * Static utility methods pertaining to the {@link Runnable} interface.
 *
 * @since 16.0
 */
QueueWorker (/guava/src/com/google/common/util/concurrent/SequentialExecutor.java)/** Worker that runs tasks from {@link #queue} until it is empty. */
SequentialExecutor (/guava/src/com/google/common/util/concurrent/SequentialExecutor.java)/**
 * Executor ensuring that all Runnables submitted are executed in order, using the provided
 * Executor, and sequentially such that no two will ever be running at the same time.
 *
 * <p>Tasks submitted to {@link #execute(Runnable)} are executed in FIFO order.
 *
 * <p>The execution of tasks is done by one thread as long as there are tasks left in the queue.
 * When a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks
 * continues. See {@link QueueWorker#workOnQueue} for details.
 *
 * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.
 * If an {@code Error} is thrown, the error will propagate and execution will stop until it is
 * restarted by a call to {@link #execute}.
 */
Listener (/guava/src/com/google/common/util/concurrent/Service.java)/**
   * A listener for the various state changes that a {@link Service} goes through in its lifecycle.
   *
   * <p>All methods are no-ops by default, implementors should override the ones they care about.
   *
   * @author Luke Sandberg
   * @since 15.0 (present as an interface in 13.0)
   */
Service (/guava/src/com/google/common/util/concurrent/Service.java)/**
 * An object with an operational state, plus asynchronous {@link #startAsync()} and {@link
 * #stopAsync()} lifecycle methods to transition between states. Example services include
 * webservers, RPC servers and timers.
 *
 * <p>The normal lifecycle of a service is:
 *
 * <ul>
 *   <li>{@linkplain State#NEW NEW} -&gt;
 *   <li>{@linkplain State#STARTING STARTING} -&gt;
 *   <li>{@linkplain State#RUNNING RUNNING} -&gt;
 *   <li>{@linkplain State#STOPPING STOPPING} -&gt;
 *   <li>{@linkplain State#TERMINATED TERMINATED}
 * </ul>
 *
 * <p>There are deviations from this if there are failures or if {@link Service#stopAsync} is called
 * before the {@link Service} reaches the {@linkplain State#RUNNING RUNNING} state. The set of legal
 * transitions form a <a href="http://en.wikipedia.org/wiki/Directed_acyclic_graph">DAG</a>,
 * therefore every method of the listener will be called at most once. N.B. The {@link State#FAILED}
 * and {@link State#TERMINATED} states are terminal states, once a service enters either of these
 * states it cannot ever leave them.
 *
 * <p>Implementors of this interface are strongly encouraged to extend one of the abstract classes
 * in this package which implement this interface and make the threading and state management
 * easier.
 *
 * @author Jesse Wilson
 * @author Luke Sandberg
 * @since 9.0 (in 1.0 as {@code com.google.common.base.Service})
 */
Listener (/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
   * A listener for the aggregate state changes of the services that are under management. Users
   * that need to listen to more fine-grained events (such as when each particular {@linkplain
   * Service service} starts, or terminates), should attach {@linkplain Service.Listener service
   * listeners} to each individual service.
   *
   * @author Luke Sandberg
   * @since 15.0 (present as an interface in 14.0)
   */
ServiceManagerState (/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
   * An encapsulation of all the mutable state of the {@link ServiceManager} that needs to be
   * accessed by instances of {@link ServiceListener}.
   */
ServiceListener (/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
   * A {@link Service} that wraps another service and times how long it takes for it to start and
   * also calls the {@link ServiceManagerState#transitionService(Service, State, State)}, to record
   * the state transitions.
   */
NoOpService (/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
   * A {@link Service} instance that does nothing. This is only useful as a placeholder to ensure
   * that the {@link ServiceManager} functions properly even when it is managing no services.
   *
   * <p>The use of this class is considered an implementation detail of ServiceManager and as such
   * it is excluded from {@link #servicesByState}, {@link #startupTimes}, {@link #toString} and all
   * logging statements.
   */
EmptyServiceManagerWarning (/guava/src/com/google/common/util/concurrent/ServiceManager.java)/** This is never thrown but only used for logging. */
ServiceManager (/guava/src/com/google/common/util/concurrent/ServiceManager.java)/**
 * A manager for monitoring and controlling a set of {@linkplain Service services}. This class
 * provides methods for {@linkplain #startAsync() starting}, {@linkplain #stopAsync() stopping} and
 * {@linkplain #servicesByState inspecting} a collection of {@linkplain Service services}.
 * Additionally, users can monitor state transitions with the {@linkplain Listener listener}
 * mechanism.
 *
 * <p>While it is recommended that service lifecycles be managed via this class, state transitions
 * initiated via other mechanisms do not impact the correctness of its methods. For example, if the
 * services are started by some mechanism besides {@link #startAsync}, the listeners will be invoked
 * when appropriate and {@link #awaitHealthy} will still work as expected.
 *
 * <p>Here is a simple example of how to use a {@code ServiceManager} to start a server.
 *
 * <pre>{@code
 * class Server {
 *   public static void main(String[] args) {
 *     Set<Service> services = ...;
 *     ServiceManager manager = new ServiceManager(services);
 *     manager.addListener(new Listener() {
 *         public void stopped() {}
 *         public void healthy() {
 *           // Services have been initialized and are healthy, start accepting requests...
 *         }
 *         public void failure(Service service) {
 *           // Something failed, at this point we could log it, notify a load balancer, or take
 *           // some other action.  For now we will just exit.
 *           System.exit(1);
 *         }
 *       },
 *       MoreExecutors.directExecutor());
 *
 *     Runtime.getRuntime().addShutdownHook(new Thread() {
 *       public void run() {
 *         // Give the services 5 seconds to stop to ensure that we are responsive to shutdown
 *         // requests.
 *         try {
 *           manager.stopAsync().awaitStopped(5, TimeUnit.SECONDS);
 *         } catch (TimeoutException timeout) {
 *           // stopping timed out
 *         }
 *       }
 *     });
 *     manager.startAsync();  // start all the services asynchronously
 *   }
 * }
 * }</pre>
 *
 * <p>This class uses the ServiceManager's methods to start all of its services, to respond to
 * service failure and to ensure that when the JVM is shutting down all the services are stopped.
 *
 * @author Luke Sandberg
 * @since 14.0
 */
SettableFuture (/guava/src/com/google/common/util/concurrent/SettableFuture.java)/**
 * A {@link ListenableFuture} whose result can be set by a {@link #set(Object)}, {@link
 * #setException(Throwable)} or {@link #setFuture(ListenableFuture)} call. It can also, like any
 * other {@code Future}, be {@linkplain #cancel cancelled}.
 *
 * <p>{@code SettableFuture} is the recommended {@code ListenableFuture} implementation when your
 * task cannot be implemented with {@link ListeningExecutorService}, the various {@link Futures}
 * utility methods, or {@link ListenableFutureTask}. Those APIs have less opportunity for developer
 * error. If your needs are more complex than {@code SettableFuture} supports, use {@link
 * AbstractFuture}, which offers an extensible version of the API.
 *
 * @author Sven Mawson
 * @since 9.0 (in 1.0 as {@code ValueFuture})
 */
SimpleTimeLimiter (/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java)/**
 * A TimeLimiter that runs method calls in the background using an {@link ExecutorService}. If the
 * time limit expires for a given method call, the thread running the call will be interrupted.
 *
 * @author Kevin Bourrillion
 * @author Jens Nyman
 * @since 1.0
 */
SmoothWarmingUp (/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java)/**
   * This implements the following function where coldInterval = coldFactor * stableInterval.
   *
   * <pre>
   *          ^ throttling
   *          |
   *    cold  +                  /
   * interval |                 /.
   *          |                / .
   *          |               /  .   ← "warmup period" is the area of the trapezoid between
   *          |              /   .     thresholdPermits and maxPermits
   *          |             /    .
   *          |            /     .
   *          |           /      .
   *   stable +----------/  WARM .
   * interval |          .   UP  .
   *          |          . PERIOD.
   *          |          .       .
   *        0 +----------+-------+--------------→ storedPermits
   *          0 thresholdPermits maxPermits
   * </pre>
   *
   * Before going into the details of this particular function, let's keep in mind the basics:
   *
   * <ol>
   *   <li>The state of the RateLimiter (storedPermits) is a vertical line in this figure.
   *   <li>When the RateLimiter is not used, this goes right (up to maxPermits)
   *   <li>When the RateLimiter is used, this goes left (down to zero), since if we have
   *       storedPermits, we serve from those first
   *   <li>When _unused_, we go right at a constant rate! The rate at which we move to the right is
   *       chosen as maxPermits / warmupPeriod. This ensures that the time it takes to go from 0 to
   *       maxPermits is equal to warmupPeriod.
   *   <li>When _used_, the time it takes, as explained in the introductory class note, is equal to
   *       the integral of our function, between X permits and X-K permits, assuming we want to
   *       spend K saved permits.
   * </ol>
   *
   * <p>In summary, the time it takes to move to the left (spend K permits), is equal to the area of
   * the function of width == K.
   *
   * <p>Assuming we have saturated demand, the time to go from maxPermits to thresholdPermits is
   * equal to warmupPeriod. And the time to go from thresholdPermits to 0 is warmupPeriod/2. (The
   * reason that this is warmupPeriod/2 is to maintain the behavior of the original implementation
   * where coldFactor was hard coded as 3.)
   *
   * <p>It remains to calculate thresholdsPermits and maxPermits.
   *
   * <ul>
   *   <li>The time to go from thresholdPermits to 0 is equal to the integral of the function
   *       between 0 and thresholdPermits. This is thresholdPermits * stableIntervals. By (5) it is
   *       also equal to warmupPeriod/2. Therefore
   *       <blockquote>
   *       thresholdPermits = 0.5 * warmupPeriod / stableInterval
   *       </blockquote>
   *   <li>The time to go from maxPermits to thresholdPermits is equal to the integral of the
   *       function between thresholdPermits and maxPermits. This is the area of the pictured
   *       trapezoid, and it is equal to 0.5 * (stableInterval + coldInterval) * (maxPermits -
   *       thresholdPermits). It is also equal to warmupPeriod, so
   *       <blockquote>
   *       maxPermits = thresholdPermits + 2 * warmupPeriod / (stableInterval + coldInterval)
   *       </blockquote>
   * </ul>
   */
SmoothBursty (/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java)/**
   * This implements a "bursty" RateLimiter, where storedPermits are translated to zero throttling.
   * The maximum number of permits that can be saved (when the RateLimiter is unused) is defined in
   * terms of time, in this sense: if a RateLimiter is 2qps, and this time is specified as 10
   * seconds, we can save up to 2 * 10 = 20 permits.
   */
WeakSafeReadWriteLock (/guava/src/com/google/common/util/concurrent/Striped.java)/**
   * ReadWriteLock implementation whose read and write locks retain a reference back to this lock.
   * Otherwise, a reference to just the read lock or just the write lock would not suffice to ensure
   * the {@code ReadWriteLock} is retained.
   */
WeakSafeLock (/guava/src/com/google/common/util/concurrent/Striped.java)/** Lock object that ensures a strong reference is retained to a specified object. */
WeakSafeCondition (/guava/src/com/google/common/util/concurrent/Striped.java)/** Condition object that ensures a strong reference is retained to a specified object. */
CompactStriped (/guava/src/com/google/common/util/concurrent/Striped.java)/**
   * Implementation of Striped where 2^k stripes are represented as an array of the same length,
   * eagerly initialized.
   */
SmallLazyStriped (/guava/src/com/google/common/util/concurrent/Striped.java)/**
   * Implementation of Striped where up to 2^k stripes can be represented, using an
   * AtomicReferenceArray of size 2^k. To map a user key into a stripe, we take a k-bit slice of the
   * user key's (smeared) hashCode(). The stripes are lazily initialized and are weakly referenced.
   */
LargeLazyStriped (/guava/src/com/google/common/util/concurrent/Striped.java)/**
   * Implementation of Striped where up to 2^k stripes can be represented, using a ConcurrentMap
   * where the key domain is [0..2^k). To map a user key into a stripe, we take a k-bit slice of the
   * user key's (smeared) hashCode(). The stripes are lazily initialized and are weakly referenced.
   */
Striped (/guava/src/com/google/common/util/concurrent/Striped.java)/**
 * A striped {@code Lock/Semaphore/ReadWriteLock}. This offers the underlying lock striping similar
 * to that of {@code ConcurrentHashMap} in a reusable form, and extends it for semaphores and
 * read-write locks. Conceptually, lock striping is the technique of dividing a lock into many
 * <i>stripes</i>, increasing the granularity of a single lock and allowing independent operations
 * to lock different stripes and proceed concurrently, instead of creating contention for a single
 * lock.
 *
 * <p>The guarantee provided by this class is that equal keys lead to the same lock (or semaphore),
 * i.e. {@code if (key1.equals(key2))} then {@code striped.get(key1) == striped.get(key2)} (assuming
 * {@link Object#hashCode()} is correctly implemented for the keys). Note that if {@code key1} is
 * <strong>not</strong> equal to {@code key2}, it is <strong>not</strong> guaranteed that {@code
 * striped.get(key1) != striped.get(key2)}; the elements might nevertheless be mapped to the same
 * lock. The lower the number of stripes, the higher the probability of this happening.
 *
 * <p>There are three flavors of this class: {@code Striped<Lock>}, {@code Striped<Semaphore>}, and
 * {@code Striped<ReadWriteLock>}. For each type, two implementations are offered: {@linkplain
 * #lock(int) strong} and {@linkplain #lazyWeakLock(int) weak} {@code Striped<Lock>}, {@linkplain
 * #semaphore(int, int) strong} and {@linkplain #lazyWeakSemaphore(int, int) weak} {@code
 * Striped<Semaphore>}, and {@linkplain #readWriteLock(int) strong} and {@linkplain
 * #lazyWeakReadWriteLock(int) weak} {@code Striped<ReadWriteLock>}. <i>Strong</i> means that all
 * stripes (locks/semaphores) are initialized eagerly, and are not reclaimed unless {@code Striped}
 * itself is reclaimable. <i>Weak</i> means that locks/semaphores are created lazily, and they are
 * allowed to be reclaimed if nobody is holding on to them. This is useful, for example, if one
 * wants to create a {@code Striped<Lock>} of many locks, but worries that in most cases only a
 * small portion of these would be in use.
 *
 * <p>Prior to this class, one might be tempted to use {@code Map<K, Lock>}, where {@code K}
 * represents the task. This maximizes concurrency by having each unique key mapped to a unique
 * lock, but also maximizes memory footprint. On the other extreme, one could use a single lock for
 * all tasks, which minimizes memory footprint but also minimizes concurrency. Instead of choosing
 * either of these extremes, {@code Striped} allows the user to trade between required concurrency
 * and memory footprint. For example, if a set of tasks are CPU-bound, one could easily create a
 * very compact {@code Striped<Lock>} of {@code availableProcessors() * 4} stripes, instead of
 * possibly thousands of locks which could be created in a {@code Map<K, Lock>} structure.
 *
 * @author Dimitris Andreou
 * @since 13.0
 */
ThreadFactoryBuilder (/guava/src/com/google/common/util/concurrent/ThreadFactoryBuilder.java)/**
 * A ThreadFactory builder, providing any combination of these features:
 *
 * <ul>
 *   <li>whether threads should be marked as {@linkplain Thread#setDaemon daemon} threads
 *   <li>a {@linkplain ThreadFactoryBuilder#setNameFormat naming format}
 *   <li>a {@linkplain Thread#setPriority thread priority}
 *   <li>an {@linkplain Thread#setUncaughtExceptionHandler uncaught exception handler}
 *   <li>a {@linkplain ThreadFactory#newThread backing thread factory}
 * </ul>
 *
 * <p>If no backing thread factory is provided, a default backing thread factory is used as if by
 * calling {@code setThreadFactory(}{@link Executors#defaultThreadFactory()}{@code )}.
 *
 * @author Kurt Alfred Kluever
 * @since 4.0
 */
TimeLimiter (/guava/src/com/google/common/util/concurrent/TimeLimiter.java)/**
 * Imposes a time limit on method calls.
 *
 * @author Kevin Bourrillion
 * @author Jens Nyman
 * @since 1.0
 */
Fire (/guava/src/com/google/common/util/concurrent/TimeoutFuture.java)/** A runnable that is called when the delegate or the timer completes. */
TimeoutFuture (/guava/src/com/google/common/util/concurrent/TimeoutFuture.java)/**
 * Implementation of {@code Futures#withTimeout}.
 *
 * <p>Future that delegates to another but will finish early (via a {@link TimeoutException} wrapped
 * in an {@link ExecutionException}) if the specified duration expires. The delegate future is
 * interrupted and cancelled if it times out.
 */
TrustedListenableFutureTask (/guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java)/**
 * A {@link RunnableFuture} that also implements the {@link ListenableFuture} interface.
 *
 * <p>This should be used in preference to {@link ListenableFutureTask} when possible for
 * performance reasons.
 */
UncaughtExceptionHandlers (/guava/src/com/google/common/util/concurrent/UncaughtExceptionHandlers.java)/**
 * Factories for {@link UncaughtExceptionHandler} instances.
 *
 * @author Gregory Kick
 * @since 8.0
 */
UncheckedExecutionException (/guava/src/com/google/common/util/concurrent/UncheckedExecutionException.java)/**
 * Unchecked variant of {@link java.util.concurrent.ExecutionException}. As with {@code
 * ExecutionException}, the exception's {@linkplain #getCause() cause} comes from a failed task,
 * possibly run in another thread.
 *
 * <p>{@code UncheckedExecutionException} is intended as an alternative to {@code
 * ExecutionException} when the exception thrown by a task is an unchecked exception. However, it
 * may also wrap a checked exception in some cases.
 *
 * <p>When wrapping an {@code Error} from another thread, prefer {@link ExecutionError}. When
 * wrapping a checked exception, prefer {@code ExecutionException}.
 *
 * @author Charles Fry
 * @since 10.0
 */
UncheckedTimeoutException (/guava/src/com/google/common/util/concurrent/UncheckedTimeoutException.java)/**
 * Unchecked version of {@link java.util.concurrent.TimeoutException}.
 *
 * @author Kevin Bourrillion
 * @since 1.0
 */
Uninterruptibles (/guava/src/com/google/common/util/concurrent/Uninterruptibles.java)/**
 * Utilities for treating interruptible operations as uninterruptible. In all cases, if a thread is
 * interrupted during such a call, the call continues to block until the result is available or the
 * timeout elapses, and only then re-interrupts the thread.
 *
 * @author Anthony Zana
 * @since 10.0
 */
WrappingExecutorService (/guava/src/com/google/common/util/concurrent/WrappingExecutorService.java)/**
 * An abstract {@code ExecutorService} that allows subclasses to {@linkplain #wrapTask(Callable)
 * wrap} tasks before they are submitted to the underlying executor.
 *
 * <p>Note that task wrapping may occur even if the task is never executed.
 *
 * <p>For delegation without task-wrapping, see {@link ForwardingExecutorService}.
 *
 * @author Chris Nokleberg
 */
WrappingScheduledExecutorService (/guava/src/com/google/common/util/concurrent/WrappingScheduledExecutorService.java)/**
 * An abstract {@code ScheduledExecutorService} that allows subclasses to {@linkplain
 * #wrapTask(Callable) wrap} tasks before they are submitted to the underlying executor.
 *
 * <p>Note that task wrapping may occur even if the task is never executed.
 *
 * @author Luke Sandberg
 */
XmlEscapers (/guava/src/com/google/common/xml/XmlEscapers.java)/**
 * {@code Escaper} instances suitable for strings to be included in XML attribute values and
 * elements' text contents. When possible, avoid manual escaping by using templating systems and
 * high-level APIs that provide autoescaping. For example, consider <a
 * href="http://www.xom.nu/">XOM</a> or <a href="http://www.jdom.org/">JDOM</a>.
 *
 * <p><b>Note:</b> Currently the escapers provided by this class do not escape any characters
 * outside the ASCII character range. Unlike HTML escaping the XML escapers will not escape
 * non-ASCII characters to their numeric entity replacements. These XML escapers provide the minimal
 * level of escaping to ensure that the output can be safely included in a Unicode XML document.
 *
 *
 * <p>For details on the behavior of the escapers in this class, see sections <a
 * href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets">2.2</a> and <a
 * href="http://www.w3.org/TR/2008/REC-xml-20081126/#syntax">2.4</a> of the XML specification.
 *
 * @author Alex Matevossian
 * @author David Beaumont
 * @since 15.0
 */
PublicSuffixPatterns (/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java)/**
 * <b>Do not use this class directly. For access to public-suffix information,
 * use {@link com.google.common.net.InternetDomainName}.</b>
 *
 * A generated static class containing public members which provide domain
 * name patterns used in determining whether a given domain name is an
 * effective top-level domain (public suffix).
 *
 * <p>Because this class is used in GWT, the data members are stored in
 * a space-efficient manner. {@see TrieParser}.
 *
 * @since 16.0
 */
TrieParser (/guava/src/com/google/thirdparty/publicsuffix/TrieParser.java)/** Parser for a map of reversed domain names stored as a serialized radix tree. */
Absent_CustomFieldSerializer (/guava-gwt/src/com/google/common/base/Absent_CustomFieldSerializer.java)/**
 * Custom GWT serializer for {@link Absent}.
 *
 * <p>GWT can serialize an absent {@code Optional} on its own, but the resulting object is a
 * different instance than the singleton {@code Absent.INSTANCE}, which breaks equality. We
 * implement a custom serializer to maintain the singleton property.
 *
 * @author Chris Povirk
 */
GwtSerializationDependencies (/guava-gwt/src/com/google/common/base/GwtSerializationDependencies.java)/**
 * Contains dummy collection implementations to convince GWT that part of serializing a collection
 * is serializing its elements.
 *
 * <p>See {@linkplain com.google.common.collect.GwtSerializationDependencies the
 * com.google.common.collect version} for more details.
 *
 * @author Chris Povirk
 */
PairwiseEquivalence_CustomFieldSerializer (/guava-gwt/src/com/google/common/base/PairwiseEquivalence_CustomFieldSerializer.java)/**
 * GWT serialization logic for {@link PairwiseEquivalence}.
 *
 * @author Kedar Kanitkar
 */
Present_CustomFieldSerializer (/guava-gwt/src/com/google/common/base/Present_CustomFieldSerializer.java)/**
 * Custom GWT serializer for {@link Present}.
 *
 * @author Chris Povirk
 */
AllEqualOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/AllEqualOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link AllEqualOrdering}.
 *
 * @author Chris Povirk
 */
ArrayListMultimap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ArrayListMultimap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ArrayListMultimap}.
 *
 * @author Chris Povirk
 */
ByFunctionOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ByFunctionOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ByFunctionOrdering}.
 *
 * @author Chris Povirk
 */
ComparatorOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ComparatorOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ComparatorOrdering}.
 *
 * @author Chris Povirk
 */
CompoundOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/CompoundOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link CompoundOrdering}.
 *
 * @author Chris Povirk
 */
DenseImmutableTable_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/DenseImmutableTable_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link DenseImmutableTable}.
 *
 * @author Chris Povirk
 */
EmptyImmutableListMultimap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/EmptyImmutableListMultimap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link EmptyImmutableListMultimap}.
 *
 * @author Chris Povirk
 */
EmptyImmutableSetMultimap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/EmptyImmutableSetMultimap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link EmptyImmutableSetMultimap}.
 *
 * @author Chris Povirk
 */
ExplicitOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ExplicitOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ExplicitOrdering}.
 *
 * @author Chris Povirk
 */
ForwardingImmutableList_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ForwardingImmutableList_CustomFieldSerializer.java)/**
 * Even though {@link ForwardingImmutableList} cannot be instantiated, we still need a custom field
 * serializer. TODO(cpovirk): why?
 *
 * @author Hayward Chan
 */
ForwardingImmutableSet_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ForwardingImmutableSet_CustomFieldSerializer.java)/**
 * Even though {@link ForwardingImmutableSet} cannot be instantiated, we still need a custom field
 * serializer. TODO(cpovirk): why?
 *
 * @author Hayward Chan
 */
GwtSerializationDependencies (/guava-gwt/src/com/google/common/collect/GwtSerializationDependencies.java)/**
 * Contains dummy collection implementations to convince GWT that part of serializing a collection
 * is serializing its elements.
 *
 * <p>Because of our use of final fields in our collections, GWT's normal heuristic for determining
 * which classes might be serialized fails. That heuristic is, roughly speaking, to look at each
 * parameter and return type of each RPC interface and to assume that implementations of those types
 * might be serialized. Those types have their own dependencies -- their fields -- which are
 * analyzed recursively and analogously.
 *
 * <p>For classes with final fields, GWT assumes that the class itself might be serialized but
 * doesn't assume the same about its final fields. To work around this, we provide dummy
 * implementations of our collections with their dependencies as non-final fields. Even though these
 * implementations are never instantiated, they are visible to GWT when it performs its
 * serialization analysis, and it assumes that their fields may be serialized.
 *
 * <p>Currently we provide dummy implementations of all the immutable collection classes necessary
 * to support declarations like {@code ImmutableMultiset<String>} in RPC interfaces. Support for
 * {@code ImmutableMultiset} in the interface is support for {@code Multiset}, so there is nothing
 * further to be done to support the new collection interfaces. It is not support, however, for an
 * RPC interface in terms of {@code HashMultiset}. It is still possible to send a {@code
 * HashMultiset} over GWT RPC; it is only the declaration of an interface in terms of {@code
 * HashMultiset} that we haven't tried to support. (We may wish to revisit this decision in the
 * future.)
 *
 * @author Chris Povirk
 */
HashBasedTable_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/HashBasedTable_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link HashBasedTable}.
 *
 * @author Hayward Chan
 */
HashMultimap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/HashMultimap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link HashMultimap}.
 *
 * @author Jord Sonneveld
 */
HashMultiset_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/HashMultiset_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link HashMultiset}.
 *
 * @author Chris Povirk
 */
ImmutableAsList_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableAsList_CustomFieldSerializer.java)/**
 * Even though {@link ImmutableAsList} cannot be instantiated, we still need a custom field
 * serializer. TODO(cpovirk): why?
 *
 * @author Hayward Chan
 */
ImmutableBiMap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableBiMap_CustomFieldSerializer.java)/**
 * Even though {@link ImmutableBiMap} cannot be instantiated, we still need a custom field
 * serializer to unify the type signature of {@code ImmutableBiMap[]} on server and client side.
 *
 * @author Hayward Chan
 */
ImmutableEntry_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableEntry_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ImmutableEntry}.
 *
 * @author Kyle Butt
 */
ImmutableEnumMap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableEnumMap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ImmutableEnumMap}.
 *
 * @author Louis Wasserman
 */
ImmutableEnumSet_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableEnumSet_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ImmutableEnumSet}.
 *
 * @author Hayward Chan
 */
ImmutableListMultimap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableListMultimap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ImmutableListMultimap}.
 *
 * @author Chris Povirk
 */
ImmutableList_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableList_CustomFieldSerializer.java)/**
 * Even though {@link ImmutableList} cannot be instantiated, we still need a custom field serializer
 * to unify the type signature of {@code ImmutableList[]} on server and client side.
 *
 * @author Hayward Chan
 */
ImmutableMultiset_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableMultiset_CustomFieldSerializer.java)/**
 * Even though {@link ImmutableMultiset} cannot be instantiated, we still need a custom field
 * serializer to unify the type signature of {@code ImmutableMultiset[]} on server and client side.
 *
 * @author Chris Povirk
 */
ImmutableSetMultimap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableSetMultimap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ImmutableSetMultimap}.
 *
 * @author Chris Povirk
 */
ImmutableSet_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableSet_CustomFieldSerializer.java)/**
 * Even though {@link ImmutableSet} cannot be instantiated, we still need a custom field serializer
 * to unify the type signature of {@code ImmutableSet[]} on server and client side.
 *
 * @author Hayward Chan
 */
ImmutableSortedMap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableSortedMap_CustomFieldSerializer.java)/**
 * Even though {@link ImmutableSortedMap} cannot be instantiated, we still need a custom field
 * serializer. TODO(cpovirk): why? Does it help if ensure that the GWT and non-GWT classes have the
 * same fields? Is that worth the trouble?
 *
 * @author Chris Povirk
 */
ImmutableSortedMap_CustomFieldSerializerBase (/guava-gwt/src/com/google/common/collect/ImmutableSortedMap_CustomFieldSerializerBase.java)/**
 * This class contains static utility methods for writing {@code ImmutableSortedMap} GWT field
 * serializers.
 *
 * @author Chris Povirk
 */
ImmutableSortedSet_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ImmutableSortedSet_CustomFieldSerializer.java)/**
 * Even though {@link ImmutableSortedSet} cannot be instantiated, we still need a custom field
 * serializer to unify the type signature of {@code ImmutableSortedSet[]} on server and client side.
 *
 * @author Hayward Chan
 */
ImmutableTable_CustomFieldSerializerBase (/guava-gwt/src/com/google/common/collect/ImmutableTable_CustomFieldSerializerBase.java)/**
 * This class contains static utility methods for writing {@link ImmutableTable} GWT field
 * serializers. Serializers should delegate to {@link #serialize} and {@link #instantiate}.
 *
 * @author Chris Povirk
 */
IndexedImmutableSet_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/IndexedImmutableSet_CustomFieldSerializer.java)/**
 * Dummy serializer. Otherwise, GWT, in processing JdkBackedImmutableSet -- even though that class
 * has a custom field serializer -- would generate its own version of this class, implemented in
 * terms of calls to ImmutableSet_CustomFieldSerializer, which is itself a dummy that we've
 * provided. That produces GWT compilation errors, albeit ones that are non-fatal (even with -strict
 * on, oddly).
 */
JdkBackedImmutableBiMap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/JdkBackedImmutableBiMap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link JdkBackedImmutableBiMap}.
 *
 * @author Louis Wasserman
 */
JdkBackedImmutableMap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/JdkBackedImmutableMap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link JdkBackedImmutableMap}.
 *
 * @author Louis Wasserman
 */
JdkBackedImmutableMultiset_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/JdkBackedImmutableMultiset_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link JdkBackedImmutableMultiset}.
 *
 * @author Louis Wasserman
 */
JdkBackedImmutableSet_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/JdkBackedImmutableSet_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link JdkBackedImmutableSet}.
 *
 * @author Louis Wasserman
 */
LexicographicalOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/LexicographicalOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link LexicographicalOrdering}.
 *
 * @author Chris Povirk
 */
LinkedHashMultimap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/LinkedHashMultimap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link LinkedHashMultimap}.
 *
 * @author Chris Povirk
 */
LinkedHashMultiset_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/LinkedHashMultiset_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link LinkedHashMultiset}.
 *
 * @author Chris Povirk
 */
LinkedListMultimap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/LinkedListMultimap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link LinkedListMultimap}.
 *
 * @author Chris Povirk
 */
Multimap_CustomFieldSerializerBase (/guava-gwt/src/com/google/common/collect/Multimap_CustomFieldSerializerBase.java)/**
 * This class contains static utility methods for writing {@code Multimap} GWT field serializers.
 * Serializers should delegate to {@link #serialize(SerializationStreamWriter, Multimap)} and to
 * either {@link #instantiate(SerializationStreamReader, ImmutableMultimap.Builder)} or {@link
 * #populate(SerializationStreamReader, Multimap)}.
 *
 * @author Chris Povirk
 */
Multiset_CustomFieldSerializerBase (/guava-gwt/src/com/google/common/collect/Multiset_CustomFieldSerializerBase.java)/**
 * This class contains static utility methods for writing {@code Multiset} GWT field serializers.
 * Serializers should delegate to {@link #serialize(SerializationStreamWriter, Multiset)} and {@link
 * #populate(SerializationStreamReader, Multiset)}.
 *
 * @author Chris Povirk
 */
NaturalOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/NaturalOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link NaturalOrdering}.
 *
 * @author Chris Povirk
 */
NullsFirstOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/NullsFirstOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link NullsFirstOrdering}.
 *
 * @author Chris Povirk
 */
NullsLastOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/NullsLastOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link NullsLastOrdering}.
 *
 * @author Chris Povirk
 */
Range_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/Range_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link Range}.
 *
 * @author Dean de Bree
 */
RegularImmutableAsList_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/RegularImmutableAsList_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link RegularImmutableAsList}.
 *
 * @author Hayward Chan
 */
RegularImmutableBiMap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/RegularImmutableBiMap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link RegularImmutableBiMap}.
 *
 * @author Chris Povirk
 */
RegularImmutableList_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/RegularImmutableList_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link RegularImmutableList}.
 *
 * @author Hayward Chan
 */
RegularImmutableMap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/RegularImmutableMap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link RegularImmutableMap}.
 *
 * @author Hayward Chan
 */
RegularImmutableMultiset_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/RegularImmutableMultiset_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link RegularImmutableMultiset}.
 *
 * @author Louis Wasserman
 */
RegularImmutableSet_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/RegularImmutableSet_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link RegularImmutableSet}.
 *
 * @author Hayward Chan
 */
RegularImmutableSortedSet_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/RegularImmutableSortedSet_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link RegularImmutableSortedSet}.
 *
 * @author Chris Povirk
 */
ReverseNaturalOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ReverseNaturalOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ReverseNaturalOrdering}.
 *
 * @author Chris Povirk
 */
ReverseOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/ReverseOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link ReverseOrdering}.
 *
 * @author Chris Povirk
 */
SingletonImmutableBiMap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/SingletonImmutableBiMap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link SingletonImmutableBiMap}.
 *
 * @author Chris Povirk
 */
SingletonImmutableList_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/SingletonImmutableList_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link SingletonImmutableList}.
 *
 * @author Chris Povirk
 */
SingletonImmutableSet_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/SingletonImmutableSet_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link SingletonImmutableSet}.
 *
 * @author Hayward Chan
 */
SingletonImmutableTable_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/SingletonImmutableTable_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link SingletonImmutableTable}.
 *
 * @author Chris Povirk
 */
SparseImmutableTable_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/SparseImmutableTable_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link SparseImmutableTable}.
 *
 * @author Chris Povirk
 */
Table_CustomFieldSerializerBase (/guava-gwt/src/com/google/common/collect/Table_CustomFieldSerializerBase.java)/**
 * This class contains static utility methods for writing {@link Table} GWT field serializers.
 * Serializers should delegate to {@link #serialize} and {@link #populate}.
 *
 * <p>For {@link ImmutableTable}, see {@link ImmutableTable_CustomFieldSerializerBase}.
 *
 * @author Chris Povirk
 */
TreeBasedTable_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/TreeBasedTable_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link TreeBasedTable}.
 *
 * @author Hayward Chan
 */
TreeMultimap_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/TreeMultimap_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link TreeMultimap}.
 *
 * @author Nikhil Singhal
 */
UsingToStringOrdering_CustomFieldSerializer (/guava-gwt/src/com/google/common/collect/UsingToStringOrdering_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@link UsingToStringOrdering}.
 *
 * @author Chris Povirk
 */
ForceGuavaCompilationEntryPoint (/guava-gwt/src/com/google/common/ForceGuavaCompilationEntryPoint.java)/**
 * A dummy entry point to convince Maven to compile our classes.
 *
 * @author Chris Povirk
 */
UnsignedLong_CustomFieldSerializer (/guava-gwt/src/com/google/common/primitives/UnsignedLong_CustomFieldSerializer.java)/**
 * This class implements the GWT serialization of {@code UnsignedLong}.
 *
 * @author Louis Wasserman
 */
ExtraObjectsMethodsForWeb (/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/ExtraObjectsMethodsForWeb.java)/** Holder for extra methods of {@code Objects} only in web. */
Platform (/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java)/** @author Jesse Wilson */
LocalManualCache (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java)/**
   * LocalManualCache is a wrapper around LocalCache for a cache without loading.
   *
   * @param <K> the base key type
   * @param <V> the base value type
   */
LocalLoadingCache (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java)/**
   * LocalLoadingCache is a wrapper around LocalCache for a cache with loading.
   *
   * @param <K> the base key type
   * @param <V> the base value type
   */
CapacityEnforcingLinkedHashMap (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java)/**
   * LinkedHashMap that enforces it's maximum size and logs events in a StatsCounter object and an
   * optional RemovalListener.
   *
   * @param <K> the base key type
   * @param <V> the base value type
   */
EntryIterator (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java)/**
   * Implementation for the EntryIterator, which is used to build Key and Value iterators.
   *
   * <p>Expiration is only checked on hasNext(), so as to ensure that a next() call never returns
   * null when hasNext() has already been called.
   */
KeyIterator (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java)/** KeyIterator build on top of EntryIterator. */
ValueIterator (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java)/** ValueIterator build on top of EntryIterator. */
WriteThroughEntry (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java)/**
   * Custom Entry class used by EntryIterator.next(), that relays setValue changes to the underlying
   * map.
   */
LocalCache (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java)/**
 * LocalCache emulation for GWT.
 *
 * @param <K> the base key type
 * @param <V> the base value type
 * @author Charles Fry
 * @author Jon Donovan
 */
LongAddables (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LongAddables.java)/**
 * GWT emulation for LongAddables.
 *
 * @author Louis Wasserman
 */
LongAdder (/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LongAdder.java)/**
 * GWT emulated version of LongAdder.
 *
 * @author Charles Fry
 */
AbstractSortedMultiset (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractSortedMultiset.java)/**
 * This class provides a skeletal implementation of the {@link SortedMultiset} interface.
 *
 * <p>The {@link #count} and {@link #size} implementations all iterate across the set returned by
 * {@link Multiset#entrySet()}, as do many methods acting on the set returned by {@link
 * #elementSet()}. Override those methods for better performance.
 *
 * @author Louis Wasserman
 */
DescendingMultiset (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/DescendingMultiset.java)/**
 * A skeleton implementation of a descending multiset. Only needs {@code forwardMultiset()} and
 * {@code entryIterator()}.
 *
 * @author Louis Wasserman
 */
ForwardingImmutableList (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableList.java)/**
 * GWT emulated version of {@link ImmutableList}. TODO(cpovirk): more doc
 *
 * @author Hayward Chan
 */
ForwardingImmutableMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableMap.java)/**
 * GWT implementation of {@link ImmutableMap} that forwards to another map.
 *
 * @author Hayward Chan
 */
ForwardingImmutableSet (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableSet.java)/**
 * GWT implementation of {@link ImmutableSet} that forwards to another {@code Set} implementation.
 *
 * @author Hayward Chan
 */
StandardElementSet (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingSortedMultiset.java)/**
   * A sensible implementation of {@link SortedMultiset#elementSet} in terms of the following
   * methods: {@link SortedMultiset#clear}, {@link SortedMultiset#comparator}, {@link
   * SortedMultiset#contains}, {@link SortedMultiset#containsAll}, {@link SortedMultiset#count},
   * {@link SortedMultiset#firstEntry} {@link SortedMultiset#headMultiset}, {@link
   * SortedMultiset#isEmpty}, {@link SortedMultiset#lastEntry}, {@link SortedMultiset#subMultiset},
   * {@link SortedMultiset#tailMultiset}, the {@code size()} and {@code iterator()} methods of
   * {@link SortedMultiset#entrySet}, and {@link SortedMultiset#remove(Object, int)}. In many
   * situations, you may wish to override {@link SortedMultiset#elementSet} to forward to this
   * implementation or a subclass thereof.
   */
StandardDescendingMultiset (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingSortedMultiset.java)/**
   * A skeleton implementation of a descending multiset view. Normally, {@link
   * #descendingMultiset()} will not reflect any changes you make to the behavior of methods such as
   * {@link #add(Object)} or {@link #pollFirstEntry}. This skeleton implementation correctly
   * delegates each of its operations to the appropriate methods of this {@code
   * ForwardingSortedMultiset}.
   *
   * <p>In many cases, you may wish to override {@link #descendingMultiset()} to return an instance
   * of a subclass of {@code StandardDescendingMultiset}.
   */
ForwardingSortedMultiset (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingSortedMultiset.java)/**
 * A sorted multiset which forwards all its method calls to another sorted multiset. Subclasses
 * should override one or more methods to modify the behavior of the backing multiset as desired per
 * the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 *
 * <p><b>Warning:</b> The methods of {@code ForwardingSortedMultiset} forward
 * <b>indiscriminately</b> to the methods of the delegate. For example, overriding {@link
 * #add(Object, int)} alone <b>will not</b> change the behavior of {@link #add(Object)}, which can
 * lead to unexpected behavior. In this case, you should override {@code add(Object)} as well,
 * either providing your own implementation, or delegating to the provided {@code standardAdd}
 * method.
 *
 * <p>The {@code standard} methods and any collection views they return are not guaranteed to be
 * thread-safe, even when all of the methods that they depend on are thread-safe.
 *
 * @author Louis Wasserman
 */
ImmutableBiMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableBiMap.java)/**
 * GWT emulation of {@link com.google.common.collect.ImmutableBiMap}.
 *
 * @author Hayward Chan
 */
Builder (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableCollection.java)/** GWT emulated version of {@link ImmutableCollection.Builder}. */
ImmutableCollection (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableCollection.java)/**
 * GWT emulated version of {@link ImmutableCollection}.
 *
 * @author Jesse Wilson
 */
ImmutableEnumMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumMap.java)/**
 * GWT emulation of {@link ImmutableEnumMap}. The type parameter is not bounded by {@code Enum<E>}
 * to avoid code-size bloat.
 *
 * @author Hayward Chan
 */
ImmutableEnumSet (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumSet.java)/**
 * GWT emulation of {@link ImmutableEnumSet}. The type parameter is not bounded by {@code Enum<E>}
 * to avoid code-size bloat.
 *
 * @author Hayward Chan
 */
ImmutableList (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java)/**
 * GWT emulated version of {@link com.google.common.collect.ImmutableList}. TODO(cpovirk): more doc
 *
 * @author Hayward Chan
 */
ImmutableMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java)/**
 * GWT emulation of {@link com.google.common.collect.ImmutableMap}. For non sorted maps, it is a
 * thin wrapper around {@link java.util.Collections#emptyMap()}, {@link
 * Collections#singletonMap(Object, Object)} and {@link java.util.LinkedHashMap} for empty,
 * singleton and regular maps respectively. For sorted maps, it's a thin wrapper around {@link
 * java.util.TreeMap}.
 *
 * @see ImmutableSortedMap
 * @author Hayward Chan
 */
ImmutableSet (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java)/**
 * GWT emulated version of {@link com.google.common.collect.ImmutableSet}. For the unsorted sets,
 * they are thin wrapper around {@link java.util.Collections#emptySet()}, {@link
 * Collections#singleton(Object)} and {@link java.util.LinkedHashSet} for empty, singleton and
 * regular sets respectively. For the sorted sets, it's a thin wrapper around {@link
 * java.util.TreeSet}.
 *
 * @see ImmutableSortedSet
 * @author Hayward Chan
 */
ImmutableSortedMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedMap.java)/**
 * GWT emulated version of {@link com.google.common.collect.ImmutableSortedMap}. It's a thin wrapper
 * around a {@link java.util.TreeMap}.
 *
 * @author Hayward Chan
 */
ImmutableSortedSet (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java)/**
 * GWT emulation of {@link com.google.common.collect.ImmutableSortedSet}.
 *
 * @author Hayward Chan
 */
JdkBackedImmutableBiMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/JdkBackedImmutableBiMap.java)/**
 * GWT emulation of {@link JdkBackedImmutableBiMap}. Never used, but must exist so that the client
 * is willing to deserialize maps that were this type on the server.
 */
JdkBackedImmutableMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/JdkBackedImmutableMap.java)/**
 * GWT emulation of {@link JdkBackedImmutableMap}. Never used, but must exist so that the client is
 * willing to deserialize maps that were this type on the server.
 */
MapMaker (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java)/**
 * MapMaker emulation.
 *
 * @author Charles Fry
 */
Platform (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java)/**
 * Minimal GWT emulation of {@code com.google.common.collect.Platform}.
 *
 * <p><strong>This .java file should never be consumed by javac.</strong>
 *
 * @author Hayward Chan
 */
RegularImmutableBiMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularImmutableBiMap.java)/**
 * GWT emulation of {@link RegularImmutableBiMap}.
 *
 * @author Jared Levy
 * @author Hayward Chan
 */
RegularImmutableList (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularImmutableList.java)/**
 * GWT emulated version of {@link RegularImmutableList}.
 *
 * @author Hayward Chan
 */
RegularImmutableMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularImmutableMap.java)/**
 * GWt emulation of {@link RegularImmutableMap}.
 *
 * @author Hayward Chan
 */
RegularImmutableMultiset (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularImmutableMultiset.java)/** Never actually created; instead delegates to JdkBackedImmutableMultiset. */
RegularImmutableSet (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularImmutableSet.java)/**
 * GWT emulation of {@link RegularImmutableSet}.
 *
 * @author Hayward Chan
 */
RegularImmutableSortedSet (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularImmutableSortedSet.java)/**
 * GWT emulation of {@link RegularImmutableSortedSet}.
 *
 * @author Hayward Chan
 */
SingletonImmutableBiMap (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/SingletonImmutableBiMap.java)/**
 * GWT emulation of {@link SingletonImmutableBiMap}.
 *
 * @author Hayward Chan
 */
SingletonImmutableList (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/SingletonImmutableList.java)/**
 * GWT emulated version of {@link SingletonImmutableList}.
 *
 * @author Hayward Chan
 */
SingletonImmutableSet (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/SingletonImmutableSet.java)/**
 * GWT emulation of {@link SingletonImmutableSet}.
 *
 * @author Hayward Chan
 */
SortedMultiset (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/SortedMultiset.java)/**
 * GWT emulation of {@code SortedMultiset}, with {@code elementSet} reduced to returning a {@code
 * SortedSet} for GWT compatibility.
 *
 * @author Louis Wasserman
 * @since 11.0
 */
UnmodifiableSortedMultiset (/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/UnmodifiableSortedMultiset.java)/**
 * Implementation of {@link Multisets#unmodifiableSortedMultiset(SortedMultiset)} for GWT.
 *
 * @author Louis Wasserman
 */
Platform (/guava-gwt/src-super/com/google/common/escape/super/com/google/common/escape/Platform.java)/** @author Jesse Wilson */
Trusted (/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java)/**
   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation
   * of this interface must also be an AbstractFuture and must not override or expose for overriding
   * any of the public methods of ListenableFuture.
   */
AbstractFuture (/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java)/** Emulation for AbstractFuture in GWT. */
AggregateFutureState (/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AggregateFutureState.java)/** Emulation of AggregateFutureState. */
GwtFluentFutureCatchingSpecialization (/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/GwtFluentFutureCatchingSpecialization.java)/**
 * Hidden superclass of {@link FluentFuture} that provides us a place to declare special GWT
 * versions of the {@link FluentFuture#catching(Class, com.google.common.base.Function)
 * FluentFuture.catching} family of methods. Those versions have slightly different signatures.
 */
GwtFuturesCatchingSpecialization (/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/GwtFuturesCatchingSpecialization.java)/**
 * Hidden superclass of {@link Futures} that provides us a place to declare special GWT versions of
 * the {@link Futures#catching(ListenableFuture, Class, com.google.common.base.Function)
 * Futures.catching} family of methods. Those versions have slightly different signatures.
 */
InterruptibleTask (/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/InterruptibleTask.java)/** Emulation for InterruptibleTask in GWT. */
Platform (/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Platform.java)/** Methods factored out so that they can be emulated differently in GWT. */
Uninterruptibles (/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Uninterruptibles.java)/** Emulation of Uninterruptibles in GWT. */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/base/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/cache/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/collect/testing/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/collect/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/escape/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
GuavaTestsEntryPoint (/guava-gwt/test/com/google/common/GuavaTestsEntryPoint.java)/**
 * A dummy entry point for our tests.
 *
 * @author Chris Povirk
 */
GwtTestSuite (/guava-gwt/test/com/google/common/GwtTestSuite.java)/**
 * Runs all _gwt tests. Grouping them into a suite is much faster than running each as a one-test
 * "suite," as the per-suite setup is expensive.
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/html/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/io/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/math/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/net/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/primitives/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/testing/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/util/concurrent/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
TestModuleEntryPoint (/guava-gwt/test/com/google/common/xml/TestModuleEntryPoint.java)/**
 * A dummy entry point of the test module.
 *
 * @author Hayward Chan
 */
Platform (/guava-gwt/test-super/com/google/common/collect/testing/super/com/google/common/collect/testing/Platform.java)/**
 * Minimal GWT emulation of {@code com.google.common.collect.testing.Platform}.
 *
 * <p><strong>This .java file should never be consumed by javac.</strong>
 *
 * @author Hayward Chan
 */
Platform (/guava-gwt/test-super/com/google/common/collect/testing/super/com/google/common/collect/testing/testers/Platform.java)/**
 * The emulation source used in GWT.
 *
 * @author Hayward Chan
 */
TestPlatform (/guava-gwt/test-super/com/google/common/math/super/com/google/common/math/TestPlatform.java)/** @author Chris Povirk */
Platform (/guava-gwt/test-super/com/google/common/testing/super/com/google/common/testing/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * @author Chris Povirk
 */
TestPlatform (/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/TestPlatform.java)/** Methods factored out so that they can be emulated differently in GWT. */
AbstractCollectionTester (/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java)/**
 * Base class for collection testers.
 *
 * @param <E> the element type of the collection to be tested.
 * @author Kevin Bourrillion
 */
AbstractCollectionTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java)/**
 * Abstract superclass of all test-suite builders for collection interfaces.
 *
 * @author George van den Driessche
 */
AbstractContainerTester (/guava-testlib/src/com/google/common/collect/testing/AbstractContainerTester.java)/**
 * Base class for testers of classes (including {@link Collection} and {@link java.util.Map Map})
 * that contain elements.
 *
 * @param <C> the type of the container
 * @param <E> the type of the container's contents
 * @author George van den Driessche
 */
PermittedMetaException (/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java)/**
   * Meta-exception thrown by {@link AbstractIteratorTester.MultiExceptionListIterator} instead of
   * throwing any particular exception type.
   */
MultiExceptionListIterator (/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java)/**
   * Quasi-implementation of {@link ListIterator} that works from a list of elements and a set of
   * features to support (from the enclosing {@link AbstractIteratorTester} instance). Instead of
   * throwing exceptions like {@link NoSuchElementException} at the appropriate times, it throws
   * {@link PermittedMetaException} instances, which wrap a set of all exceptions that the iterator
   * could throw during the invocation of that method. This is necessary because, e.g., a call to
   * {@code iterator().remove()} of an unmodifiable list could throw either {@link
   * IllegalStateException} or {@link UnsupportedOperationException}. Note that iterator
   * implementations should always throw one of the exceptions in a {@code PermittedExceptions}
   * instance, since {@code PermittedExceptions} is thrown only when a method call is invalid.
   *
   * <p>This class is accessible but not supported in GWT as it references {@link
   * PermittedMetaException}.
   */
AbstractIteratorTester (/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java)/**
 * Most of the logic for {@link IteratorTester} and {@link ListIteratorTester}.
 *
 * @param <E> the type of element returned by the iterator
 * @param <I> the type of the iterator ({@link Iterator} or {@link ListIterator})
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
AbstractMapTester (/guava-testlib/src/com/google/common/collect/testing/AbstractMapTester.java)/**
 * Base class for map testers.
 *
 * <p>TODO: see how much of this is actually needed once Map testers are written. (It was cloned
 * from AbstractCollectionTester.)
 *
 * @param <K> the key type of the map to be tested.
 * @param <V> the value type of the map to be tested.
 * @author George van den Driessche
 */
AbstractTester (/guava-testlib/src/com/google/common/collect/testing/AbstractTester.java)/**
 * This abstract base class for testers allows the framework to inject needed information after
 * JUnit constructs the instances.
 *
 * <p>This class is emulated in GWT.
 *
 * @param <G> the type of the test generator required by this tester. An instance of G should
 *     somehow provide an instance of the class under test, plus any other information required to
 *     parameterize the test.
 * @author George van den Driessche
 */
BaseComparable (/guava-testlib/src/com/google/common/collect/testing/BaseComparable.java)/**
 * Simple base class to verify that we handle generics correctly.
 *
 * @author Kevin Bourrillion
 */
CollectionTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/CollectionTestSuiteBuilder.java)/**
 * Concrete instantiation of {@link AbstractCollectionTestSuiteBuilder} for testing collections that
 * do not have a more specific tester like {@link ListTestSuiteBuilder} or {@link
 * SetTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Louis Wasserman
 */
ConcurrentMapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/ConcurrentMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a ConcurrentMap
 * implementation.
 *
 * @author Louis Wasserman
 */
ConcurrentNavigableMapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/ConcurrentNavigableMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a
 * ConcurrentNavigableMap implementation.
 *
 * @author Louis Wasserman
 */
DerivedCollectionGenerators (/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java)/**
 * Derived suite generators, split out of the suite builders so that they are available to GWT.
 *
 * @author George van den Driessche
 */
DerivedComparable (/guava-testlib/src/com/google/common/collect/testing/DerivedComparable.java)/**
 * Simple derived class to verify that we handle generics correctly.
 *
 * @author Kevin Bourrillion
 */
DerivedGenerator (/guava-testlib/src/com/google/common/collect/testing/DerivedGenerator.java)/**
 * A generator that relies on a preexisting generator for most of its work. For example, a derived
 * iterator generator may delegate the work of creating the underlying collection to an inner
 * collection generator.
 *
 * <p>{@code GwtTestSuiteGenerator} expects every {@code DerivedIterator} implementation to provide
 * a one-arg constructor accepting its inner generator as an argument). This requirement enables it
 * to generate source code (since GWT cannot use reflection to generate the suites).
 *
 * @author Chris Povirk
 */
DerivedTestIteratorGenerator (/guava-testlib/src/com/google/common/collect/testing/DerivedTestIteratorGenerator.java)/**
 * Adapts a test iterable generator to give a TestIteratorGenerator.
 *
 * @author George van den Driessche
 */
ConflictingRequirementsException (/guava-testlib/src/com/google/common/collect/testing/features/ConflictingRequirementsException.java)/**
 * Thrown when requirements on a tester method or class conflict with each other.
 *
 * @author George van den Driessche
 */
Feature (/guava-testlib/src/com/google/common/collect/testing/features/Feature.java)/**
 * Base class for enumerating the features of an interface to be tested.
 *
 * @param <T> The interface whose features are to be enumerated.
 * @author George van den Driessche
 */
FeatureUtil (/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java)/**
 * Utilities for collecting and validating tester requirements from annotations.
 *
 * @author George van den Driessche
 */
TesterRequirements (/guava-testlib/src/com/google/common/collect/testing/features/TesterRequirements.java)/**
 * Encapsulates the constraints that a class under test must satisfy in order for a tester method to
 * be run against that class.
 *
 * @author George van den Driessche
 */
FeatureSpecificTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/FeatureSpecificTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests the object generated
 * by a G, selecting appropriate tests by matching them against specified features.
 *
 * @param <B> The concrete type of this builder (the 'self-type'). All the Builder methods of this
 *     class (such as {@link #named}) return this type, so that Builder methods of more derived
 *     classes can be chained onto them without casting.
 * @param <G> The type of the generator to be passed to testers in the generated test suite. An
 *     instance of G should somehow provide an instance of the class under test, plus any other
 *     information required to parameterize the test.
 * @author George van den Driessche
 */
AbstractBiMapTester (/guava-testlib/src/com/google/common/collect/testing/google/AbstractBiMapTester.java)/** Skeleton for a tester of a {@code BiMap}. */
AbstractListMultimapTester (/guava-testlib/src/com/google/common/collect/testing/google/AbstractListMultimapTester.java)/**
 * Superclass for all {@code ListMultimap} testers.
 *
 * @author Louis Wasserman
 */
AbstractMultimapTester (/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultimapTester.java)/**
 * Superclass for all {@code Multimap} testers.
 *
 * @author Louis Wasserman
 */
AbstractMultisetSetCountTester (/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultisetSetCountTester.java)/**
 * Common superclass for {@link MultisetSetCountUnconditionallyTester} and {@link
 * MultisetSetCountConditionallyTester}. It is used by those testers to test calls to the
 * unconditional {@code setCount()} method and calls to the conditional {@code setCount()} method
 * when the expected present count is correct.
 *
 * @author Chris Povirk
 */
AbstractMultisetTester (/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultisetTester.java)/**
 * Base class for multiset collection tests.
 *
 * @author Jared Levy
 */
BiMapClearTester (/guava-testlib/src/com/google/common/collect/testing/google/BiMapClearTester.java)/**
 * Tester for {@code BiMap.clear}.
 *
 * @author Louis Wasserman
 */
BiMapEntrySetTester (/guava-testlib/src/com/google/common/collect/testing/google/BiMapEntrySetTester.java)/** Tester for {@code BiMap.entrySet} and methods on the entries in the set. */
BiMapGenerators (/guava-testlib/src/com/google/common/collect/testing/google/BiMapGenerators.java)/**
 * Generators of various {@link com.google.common.collect.BiMap}s and derived collections.
 *
 * @author Jared Levy
 * @author Hayward Chan
 */
BiMapInverseTester (/guava-testlib/src/com/google/common/collect/testing/google/BiMapInverseTester.java)/**
 * Tests for the {@code inverse} view of a BiMap.
 *
 * <p>This assumes that {@code bimap.inverse().inverse() == bimap}, which is not technically
 * required but is fulfilled by all current implementations.
 *
 * @author Louis Wasserman
 */
BiMapPutTester (/guava-testlib/src/com/google/common/collect/testing/google/BiMapPutTester.java)/** Tester for {@code BiMap.put} and {@code BiMap.forcePut}. */
BiMapRemoveTester (/guava-testlib/src/com/google/common/collect/testing/google/BiMapRemoveTester.java)/**
 * Tester for {@code BiMap.remove}.
 *
 * @author Louis Wasserman
 */
BiMapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/google/BiMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code BiMap}
 * implementation.
 *
 * @author Louis Wasserman
 */
DerivedGoogleCollectionGenerators (/guava-testlib/src/com/google/common/collect/testing/google/DerivedGoogleCollectionGenerators.java)/**
 * Derived suite generators for Guava collection interfaces, split out of the suite builders so that
 * they are available to GWT.
 *
 * @author Louis Wasserman
 */
GoogleHelpers (/guava-testlib/src/com/google/common/collect/testing/google/GoogleHelpers.java)/**
 * Helper methods/assertions for use with {@code com.google.common.collect} types.
 *
 * @author Colin Decker
 */
ListGenerators (/guava-testlib/src/com/google/common/collect/testing/google/ListGenerators.java)/**
 * Common generators of different types of lists.
 *
 * @author Hayward Chan
 */
ListMultimapAsMapTester (/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapAsMapTester.java)/**
 * Testers for {@link com.google.common.collect.ListMultimap#asMap}.
 *
 * @author Louis Wasserman
 * @param <K> The key type of the tested multimap.
 * @param <V> The value type of the tested multimap.
 */
ListMultimapEqualsTester (/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapEqualsTester.java)/**
 * Testers for {@link ListMultimap#equals(Object)}.
 *
 * @author Louis Wasserman
 */
ListMultimapPutAllTester (/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapPutAllTester.java)/**
 * Testers for {@link ListMultimap#putAll(Object, Iterable)}.
 *
 * @author Louis Wasserman
 */
ListMultimapPutTester (/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapPutTester.java)/**
 * Testers for {@link ListMultimap#put(Object, Object)}.
 *
 * @author Louis Wasserman
 */
ListMultimapRemoveTester (/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapRemoveTester.java)/**
 * Testers for {@link ListMultimap#remove(Object, Object)}.
 *
 * @author Louis Wasserman
 */
ListMultimapReplaceValuesTester (/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapReplaceValuesTester.java)/**
 * Testers for {@link ListMultimap#replaceValues(Object, Iterable)}.
 *
 * @author Louis Wasserman
 */
ListMultimapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code
 * ListMultimap} implementation.
 *
 * @author Louis Wasserman
 */
MapGenerators (/guava-testlib/src/com/google/common/collect/testing/google/MapGenerators.java)/**
 * Generators of different types of map and related collections, such as keys, entries and values.
 *
 * @author Hayward Chan
 */
MultimapAsMapGetTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapAsMapGetTester.java)/**
 * Tests for {@code Multimap.asMap().get(Object)}.
 *
 * @author Louis Wasserman
 */
MultimapAsMapTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapAsMapTester.java)/**
 * Tests for {@link Multimap#asMap}.
 *
 * @author Louis Wasserman
 */
MultimapClearTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapClearTester.java)/**
 * Tests for {@link Multimap#clear()}.
 *
 * @author Louis Wasserman
 */
MultimapContainsEntryTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapContainsEntryTester.java)/**
 * Tester for {@link Multimap#containsEntry}.
 *
 * @author Louis Wasserman
 */
MultimapContainsKeyTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapContainsKeyTester.java)/**
 * Tester for the {@code containsKey} methods of {@code Multimap} and its {@code asMap()} view.
 *
 * @author Louis Wasserman
 */
MultimapContainsValueTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapContainsValueTester.java)/**
 * Tester for {@link Multimap#containsValue}.
 *
 * @author Louis Wasserman
 */
MultimapEntriesTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapEntriesTester.java)/**
 * Tester for {@code Multimap.entries}.
 *
 * @author Louis Wasserman
 */
MultimapEqualsTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapEqualsTester.java)/**
 * Tester for {@code Multimap.equals}.
 *
 * @author Louis Wasserman
 */
MultimapForEachTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapForEachTester.java)/**
 * Tests for {@link Multimap#forEach}.
 *
 * @author Louis Wasserman
 */
MultimapGetTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapGetTester.java)/**
 * Tests for {@link Multimap#get(Object)}.
 *
 * @author Louis Wasserman
 */
MultimapKeySetTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapKeySetTester.java)/**
 * Tester for {@code Multimap.keySet}.
 *
 * @author Louis Wasserman
 */
MultimapKeysTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapKeysTester.java)/**
 * Tester for {@code Multimap.entries}.
 *
 * @author Louis Wasserman
 */
MultimapPutAllMultimapTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapPutAllMultimapTester.java)/**
 * Tester for {@link Multimap#putAll(Multimap)}.
 *
 * @author Louis Wasserman
 */
MultimapPutIterableTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapPutIterableTester.java)/**
 * Tests for {@link Multimap#putAll(Object, Iterable)}.
 *
 * @author Louis Wasserman
 */
MultimapPutTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapPutTester.java)/**
 * Tester for {@link Multimap#put}.
 *
 * @author Louis Wasserman
 */
MultimapRemoveAllTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapRemoveAllTester.java)/**
 * Tests for {@link Multimap#removeAll(Object)}.
 *
 * @author Louis Wasserman
 */
MultimapRemoveEntryTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapRemoveEntryTester.java)/**
 * Tests for {@link Multimap#remove(Object, Object)}.
 *
 * @author Louis Wasserman
 */
MultimapReplaceValuesTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapReplaceValuesTester.java)/**
 * Tests for {@link Multimap#replaceValues(Object, Iterable)}.
 *
 * @author Louis Wasserman
 */
MultimapSizeTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapSizeTester.java)/**
 * Tester for the {@code size} methods of {@code Multimap} and its views.
 *
 * @author Louis Wasserman
 */
MultimapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/google/MultimapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code Multimap}
 * implementation.
 *
 * @author Louis Wasserman
 */
MultimapToStringTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapToStringTester.java)/**
 * Tester for {@code Multimap.toString()}.
 *
 * @author Louis Wasserman
 */
MultimapValuesTester (/guava-testlib/src/com/google/common/collect/testing/google/MultimapValuesTester.java)/**
 * Tester for {@code Multimap.values}.
 *
 * @author Louis Wasserman
 */
MultisetAddTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetAddTester.java)/**
 * Tests for {@code Multiset.add}.
 *
 * @author Jared Levy
 */
MultisetContainsTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetContainsTester.java)/**
 * Tests for {@code Multiset.containsAll} not already addressed by {@code CollectionContainsTester}.
 *
 * @author Louis Wasserman
 */
MultisetCountTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetCountTester.java)/**
 * Tests for {@code Multiset#count}.
 *
 * @author Jared Levy
 */
MultisetElementSetTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetElementSetTester.java)/**
 * Tests for {@code Multiset.elementSet()} not covered by the derived {@code SetTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MultisetEntrySetTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetEntrySetTester.java)/**
 * Tests for {@code Multiset.entrySet}.
 *
 * @author Jared Levy
 */
MultisetEqualsTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetEqualsTester.java)/**
 * Tests for {@code Multiset.equals} and {@code Multiset.hashCode}.
 *
 * @author Louis Wasserman
 */
MultisetForEachEntryTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetForEachEntryTester.java)/**
 * Tests for {@code Multiset#forEachEntry}.
 *
 * @author Louis Wasserman
 */
MultisetIteratorTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetIteratorTester.java)/**
 * Tester to make sure the {@code iterator().remove()} implementation of {@code Multiset} works when
 * there are multiple occurrences of elements.
 *
 * @author Louis Wasserman
 */
MultisetNavigationTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetNavigationTester.java)/**
 * Tester for navigation of SortedMultisets.
 *
 * @author Louis Wasserman
 */
MultisetReadsTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetReadsTester.java)/**
 * A generic JUnit test which tests multiset-specific read operations. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.SetTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
MultisetRemoveTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetRemoveTester.java)/**
 * Tests for {@code Multiset#remove}, {@code Multiset.removeAll}, and {@code Multiset.retainAll} not
 * already covered by the corresponding Collection testers.
 *
 * @author Jared Levy
 */
MultisetSerializationTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetSerializationTester.java)/**
 * A generic JUnit test which tests multiset-specific serialization. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MultisetTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MultisetSetCountConditionallyTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetSetCountConditionallyTester.java)/**
 * A generic JUnit test which tests conditional {@code setCount()} operations on a multiset. Can't
 * be invoked directly; please see {@link MultisetTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
MultisetSetCountUnconditionallyTester (/guava-testlib/src/com/google/common/collect/testing/google/MultisetSetCountUnconditionallyTester.java)/**
 * A generic JUnit test which tests unconditional {@code setCount()} operations on a multiset. Can't
 * be invoked directly; please see {@link MultisetTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
MultisetTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/google/MultisetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code Multiset}
 * implementation.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
SetGenerators (/guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java)/**
 * Generators of different types of sets and derived collections from sets.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @author Hayward Chan
 */
SetMultimapAsMapTester (/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapAsMapTester.java)/**
 * Testers for {@link SetMultimap#asMap}.
 *
 * @author Louis Wasserman
 * @param <K> The key type of the tested multimap.
 * @param <V> The value type of the tested multimap.
 */
SetMultimapEqualsTester (/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapEqualsTester.java)/**
 * Testers for {@link SetMultimap#equals(Object)}.
 *
 * @author Louis Wasserman
 */
SetMultimapPutAllTester (/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapPutAllTester.java)/**
 * Tests for {@link SetMultimap#replaceValues}.
 *
 * @author Louis Wasserman
 */
SetMultimapPutTester (/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapPutTester.java)/**
 * Tests for {@link SetMultimap#replaceValues}.
 *
 * @author Louis Wasserman
 */
SetMultimapReplaceValuesTester (/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapReplaceValuesTester.java)/**
 * Tests for {@link SetMultimap#replaceValues}.
 *
 * @author Louis Wasserman
 */
SetMultimapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code SetMultimap}
 * implementation.
 *
 * @author Louis Wasserman
 */
SortedMapGenerators (/guava-testlib/src/com/google/common/collect/testing/google/SortedMapGenerators.java)/**
 * Generators of sorted maps and derived collections.
 *
 * @author Kevin Bourrillion
 * @author Jesse Wilson
 * @author Jared Levy
 * @author Hayward Chan
 * @author Chris Povirk
 * @author Louis Wasserman
 */
SortedMultisetTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/google/SortedMultisetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code
 * SortedMultiset} implementation.
 *
 * <p><b>Warning:</b> expects that {@code E} is a String.
 *
 * @author Louis Wasserman
 */
SortedSetMultimapAsMapTester (/guava-testlib/src/com/google/common/collect/testing/google/SortedSetMultimapAsMapTester.java)/**
 * Testers for {@link SortedSetMultimap#asMap}.
 *
 * @author Louis Wasserman
 * @param <K> The key type of the tested multimap.
 * @param <V> The value type of the tested multimap.
 */
SortedSetMultimapGetTester (/guava-testlib/src/com/google/common/collect/testing/google/SortedSetMultimapGetTester.java)/**
 * Tester for {@link SortedSetMultimap#get(Object)}.
 *
 * @author Louis Wasserman
 */
SortedSetMultimapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/google/SortedSetMultimapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code
 * SortedSetMultimap} implementation.
 *
 * @author Louis Wasserman
 */
TestBiMapGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestBiMapGenerator.java)/**
 * Creates bimaps, containing sample entries, to be tested.
 *
 * @author Louis Wasserman
 */
TestEnumMultisetGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestEnumMultisetGenerator.java)/**
 * An abstract {@code TestMultisetGenerator} for generating multisets containing enum values.
 *
 * @author Jared Levy
 */
TestListMultimapGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestListMultimapGenerator.java)/**
 * A generator for {@code ListMultimap} implementations based on test data.
 *
 * @author Louis Wasserman
 */
TestMultimapGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestMultimapGenerator.java)/**
 * Creates multimaps, containing sample elements, to be tested.
 *
 * @author Louis Wasserman
 */
TestMultisetGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestMultisetGenerator.java)/**
 * Creates multisets, containing sample elements, to be tested.
 *
 * @author Jared Levy
 */
TestSetMultimapGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestSetMultimapGenerator.java)/**
 * A generator for {@code SetMultimap} implementations based on test data.
 *
 * @author Louis Wasserman
 */
TestStringBiMapGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestStringBiMapGenerator.java)/**
 * Implementation helper for {@link TestBiMapGenerator} for use with bimaps of strings.
 *
 * @author Chris Povirk
 * @author Jared Levy
 * @author George van den Driessche
 * @author Louis Wasserman
 */
TestStringListMultimapGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestStringListMultimapGenerator.java)/**
 * A skeleton generator for a {@code ListMultimap} implementation.
 *
 * @author Louis Wasserman
 */
TestStringMultisetGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestStringMultisetGenerator.java)/**
 * Create multisets of strings for tests.
 *
 * @author Jared Levy
 */
TestStringSetMultimapGenerator (/guava-testlib/src/com/google/common/collect/testing/google/TestStringSetMultimapGenerator.java)/**
 * A skeleton generator for a {@code SetMultimap} implementation.
 *
 * @author Louis Wasserman
 */
UnmodifiableCollectionTests (/guava-testlib/src/com/google/common/collect/testing/google/UnmodifiableCollectionTests.java)/**
 * A series of tests that support asserting that collections cannot be modified, either through
 * direct or indirect means.
 *
 * @author Robert Konigsberg
 */
NullsBefore (/guava-testlib/src/com/google/common/collect/testing/Helpers.java)/**
   * Compares strings in natural order except that null comes immediately before a given value. This
   * works better than Ordering.natural().nullsFirst() because, if null comes before all other
   * values, it lies outside the submap/submultiset ranges we test, and the variety of tests that
   * exercise null handling fail on those subcollections.
   */
IteratorTester (/guava-testlib/src/com/google/common/collect/testing/IteratorTester.java)/**
 * A utility for testing an Iterator implementation by comparing its behavior to that of a "known
 * good" reference implementation. In order to accomplish this, it's important to test a great
 * variety of sequences of the {@link Iterator#next}, {@link Iterator#hasNext} and {@link
 * Iterator#remove} operations. This utility takes the brute-force approach of trying <i>all</i>
 * possible sequences of these operations, up to a given number of steps. So, if the caller
 * specifies to use <i>n</i> steps, a total of <i>3^n</i> tests are actually performed.
 *
 * <p>For instance, if <i>steps</i> is 5, one example sequence that will be tested is:
 *
 * <ol>
 *   <li>remove();
 *   <li>hasNext()
 *   <li>hasNext();
 *   <li>remove();
 *   <li>next();
 * </ol>
 *
 * <p>This particular order of operations may be unrealistic, and testing all 3^5 of them may be
 * thought of as overkill; however, it's difficult to determine which proper subset of this massive
 * set would be sufficient to expose any possible bug. Brute force is simpler.
 *
 * <p>To use this class the concrete subclass must implement the {@link
 * IteratorTester#newTargetIterator()} method. This is because it's impossible to test an Iterator
 * without changing its state, so the tester needs a steady supply of fresh Iterators.
 *
 * <p>If your iterator supports modification through {@code remove()}, you may wish to override the
 * verify() method, which is called <em>after</em> each sequence and is guaranteed to be called
 * using the latest values obtained from {@link IteratorTester#newTargetIterator()}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
ListIteratorTester (/guava-testlib/src/com/google/common/collect/testing/ListIteratorTester.java)/**
 * A utility similar to {@link IteratorTester} for testing a {@link ListIterator} against a known
 * good reference implementation. As with {@code IteratorTester}, a concrete subclass must provide
 * target iterators on demand. It also requires three additional constructor parameters: {@code
 * elementsToInsert}, the elements to be passed to {@code set()} and {@code add()} calls; {@code
 * features}, the features supported by the iterator; and {@code expectedElements}, the elements the
 * iterator should return in order.
 *
 * <p>The items in {@code elementsToInsert} will be repeated if {@code steps} is larger than the
 * number of provided elements.
 *
 * @author Chris Povirk
 */
ListTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/ListTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a List
 * implementation.
 *
 * @author George van den Driessche
 */
IncompatibleKeyType (/guava-testlib/src/com/google/common/collect/testing/MapInterfaceTest.java)/** A key type that is not assignable to any classes but Object. */
MapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/MapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a Map implementation.
 *
 * @author George van den Driessche
 */
MinimalCollection (/guava-testlib/src/com/google/common/collect/testing/MinimalCollection.java)/**
 * A simplistic collection which implements only the bare minimum allowed by the spec, and throws
 * exceptions whenever it can.
 *
 * @author Kevin Bourrillion
 */
MinimalIterable (/guava-testlib/src/com/google/common/collect/testing/MinimalIterable.java)/**
 * An implementation of {@code Iterable} which throws an exception on all invocations of the {@link
 * #iterator()} method after the first, and whose iterator is always unmodifiable.
 *
 * <p>The {@code Iterable} specification does not make it absolutely clear what should happen on a
 * second invocation, so implementors have made various choices, including:
 *
 * <ul>
 *   <li>returning the same iterator again
 *   <li>throwing an exception of some kind
 *   <li>or the usual, <i>robust</i> behavior, which all known {@link Collection} implementations
 *       have, of returning a new, independent iterator
 * </ul>
 *
 * <p>Because of this situation, any public method accepting an iterable should invoke the {@code
 * iterator} method only once, and should be tested using this class. Exceptions to this rule should
 * be clearly documented.
 *
 * <p>Note that although your APIs should be liberal in what they accept, your methods which
 * <i>return</i> iterables should make every attempt to return ones of the robust variety.
 *
 * <p>This testing utility is not thread-safe.
 *
 * @author Kevin Bourrillion
 */
MinimalSet (/guava-testlib/src/com/google/common/collect/testing/MinimalSet.java)/**
 * A simplistic set which implements the bare minimum so that it can be used in tests without
 * relying on any specific Set implementations. Slow. Explicitly allows null elements so that they
 * can be used in the testers.
 *
 * @author Regina O'Dell
 */
NavigableMapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/NavigableMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a NavigableMap
 * implementation.
 */
NavigableSetTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/NavigableSetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a NavigableSet
 * implementation.
 */
OneSizeGenerator (/guava-testlib/src/com/google/common/collect/testing/OneSizeGenerator.java)/**
 * Generator for collection of a particular size.
 *
 * @author George van den Driessche
 */
OneSizeTestContainerGenerator (/guava-testlib/src/com/google/common/collect/testing/OneSizeTestContainerGenerator.java)/**
 * The subject-generator interface accepted by Collection testers, for testing a Collection at one
 * particular {@link CollectionSize}.
 *
 * <p>This interface should not be implemented outside this package; {@link
 * PerCollectionSizeTestSuiteBuilder} constructs instances of it from a more general {@link
 * TestCollectionGenerator}.
 *
 * @author George van den Driessche
 */
OneSizeTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/PerCollectionSizeTestSuiteBuilder.java)/** Builds a test suite for one particular {@link CollectionSize}. */
PerCollectionSizeTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/PerCollectionSizeTestSuiteBuilder.java)/**
 * This builder creates a composite test suite, containing a separate test suite for each {@link
 * CollectionSize} present in the features specified by {@link #withFeatures(Feature...)}.
 *
 * @param <B> The concrete type of this builder (the 'self-type'). All the Builder methods of this
 *     class (such as {@link #named(String)}) return this type, so that Builder methods of more
 *     derived classes can be chained onto them without casting.
 * @param <G> The type of the generator to be passed to testers in the generated test suite. An
 *     instance of G should somehow provide an instance of the class under test, plus any other
 *     information required to parameterize the test.
 * @see FeatureSpecificTestSuiteBuilder
 * @author George van den Driessche
 */
Platform (/guava-testlib/src/com/google/common/collect/testing/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * <p>This class is emulated in GWT.
 *
 * @author Hayward Chan
 */
QueueTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/QueueTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a queue
 * implementation.
 *
 * @author Jared Levy
 */
ReserializingTestCollectionGenerator (/guava-testlib/src/com/google/common/collect/testing/ReserializingTestCollectionGenerator.java)/**
 * Reserializes the sets created by another test set generator.
 *
 * <p>TODO: make CollectionTestSuiteBuilder test reserialized collections
 *
 * @author Jesse Wilson
 */
ReserializingTestSetGenerator (/guava-testlib/src/com/google/common/collect/testing/ReserializingTestSetGenerator.java)/**
 * Reserializes the sets created by another test set generator.
 *
 * <p>TODO: make CollectionTestSuiteBuilder test reserialized collections
 *
 * @author Jesse Wilson
 */
SafeTreeMap (/guava-testlib/src/com/google/common/collect/testing/SafeTreeMap.java)/**
 * A wrapper around {@code TreeMap} that aggressively checks to see if keys are mutually comparable.
 * This implementation passes the navigable map test suites.
 *
 * @author Louis Wasserman
 */
SafeTreeSet (/guava-testlib/src/com/google/common/collect/testing/SafeTreeSet.java)/**
 * A wrapper around {@code TreeSet} that aggressively checks to see if elements are mutually
 * comparable. This implementation passes the navigable set test suites.
 *
 * @author Louis Wasserman
 */
SampleElements (/guava-testlib/src/com/google/common/collect/testing/SampleElements.java)/**
 * A container class for the five sample elements we need for testing.
 *
 * @author Kevin Bourrillion
 */
SetTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/SetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a Set implementation.
 *
 * @author George van den Driessche
 */
SortedMapTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/SortedMapTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a SortedMap
 * implementation.
 */
SortedSetTestSuiteBuilder (/guava-testlib/src/com/google/common/collect/testing/SortedSetTestSuiteBuilder.java)/**
 * Creates, based on your criteria, a JUnit test suite that exhaustively tests a SortedSet
 * implementation.
 */
Ordered (/guava-testlib/src/com/google/common/collect/testing/SpliteratorTester.java)/** Return type from "contains the following elements" assertions. */
SpliteratorTester (/guava-testlib/src/com/google/common/collect/testing/SpliteratorTester.java)/** Tester for {@code Spliterator} implementations. */
TestCharacterListGenerator (/guava-testlib/src/com/google/common/collect/testing/TestCharacterListGenerator.java)/**
 * Generates {@code List<Character>} instances for test suites.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
TestCollectionGenerator (/guava-testlib/src/com/google/common/collect/testing/TestCollectionGenerator.java)/**
 * Creates collections, containing sample elements, to be tested.
 *
 * @author Kevin Bourrillion
 */
TestCollidingSetGenerator (/guava-testlib/src/com/google/common/collect/testing/TestCollidingSetGenerator.java)/**
 * A generator using sample elements whose hash codes all collide badly.
 *
 * @author Kevin Bourrillion
 */
TestContainerGenerator (/guava-testlib/src/com/google/common/collect/testing/TestContainerGenerator.java)/**
 * To be implemented by test generators of things that can contain elements. Such things include
 * both {@link Collection} and {@link Map}; since there isn't an established collective noun that
 * encompasses both of these, 'container' is used.
 *
 * @author George van den Driessche
 */
TestEnumMapGenerator (/guava-testlib/src/com/google/common/collect/testing/TestEnumMapGenerator.java)/**
 * Implementation helper for {@link TestMapGenerator} for use with enum maps.
 *
 * @author Kevin Bourrillion
 */
TestEnumSetGenerator (/guava-testlib/src/com/google/common/collect/testing/TestEnumSetGenerator.java)/**
 * An abstract TestSetGenerator for generating sets containing enum values.
 *
 * @author Kevin Bourrillion
 */
AbstractListIndexOfTester (/guava-testlib/src/com/google/common/collect/testing/testers/AbstractListIndexOfTester.java)/**
 * Common parent class for {@link ListIndexOfTester} and {@link ListLastIndexOfTester}.
 *
 * @author Chris Povirk
 */
AbstractListTester (/guava-testlib/src/com/google/common/collect/testing/testers/AbstractListTester.java)/**
 * Base class for list testers.
 *
 * @author George van den Driessche
 */
AbstractQueueTester (/guava-testlib/src/com/google/common/collect/testing/testers/AbstractQueueTester.java)/**
 * Base class for queue collection tests.
 *
 * @author Jared Levy
 */
AbstractSetTester (/guava-testlib/src/com/google/common/collect/testing/testers/AbstractSetTester.java)/** @author George van den Driessche */
CollectionAddAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionAddAllTester.java)/**
 * A generic JUnit test which tests addAll operations on a collection. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
CollectionAddTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionAddTester.java)/**
 * A generic JUnit test which tests {@code add} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
CollectionClearTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionClearTester.java)/**
 * A generic JUnit test which tests {@code clear()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
CollectionContainsAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionContainsAllTester.java)/**
 * A generic JUnit test which tests {@code containsAll()} operations on a collection. Can't be
 * invoked directly; please see {@link
 * com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
CollectionContainsTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionContainsTester.java)/**
 * A generic JUnit test which tests {@code contains()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
CollectionCreationTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionCreationTester.java)/**
 * A generic JUnit test which tests creation (typically through a constructor or static factory
 * method) of a collection. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
CollectionEqualsTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionEqualsTester.java)/**
 * Tests {@link java.util.Collection#equals}.
 *
 * @author George van den Driessche
 */
CollectionForEachTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionForEachTester.java)/**
 * A generic JUnit test which tests {@code forEach} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
CollectionIsEmptyTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionIsEmptyTester.java)/**
 * A generic JUnit test which tests {@code isEmpty()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
CollectionIteratorTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionIteratorTester.java)/**
 * A generic JUnit test which tests {@code iterator} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
CollectionRemoveAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionRemoveAllTester.java)/**
 * A generic JUnit test which tests {@code removeAll} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
CollectionRemoveIfTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionRemoveIfTester.java)/**
 * A generic JUnit test which tests {@link Collection#removeIf}. Can't be invoked directly; please
 * see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
CollectionRemoveTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionRemoveTester.java)/**
 * A generic JUnit test which tests {@code remove} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
Target (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionRetainAllTester.java)/** A collection of elements to retain, along with a description for use in failure messages. */
CollectionRetainAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionRetainAllTester.java)/**
 * A generic JUnit test which tests {@code retainAll} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
CollectionSerializationEqualTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationEqualTester.java)/**
 * Basic reserialization test for collection types that must preserve {@code equals()} behavior when
 * reserialized. (Sets and Lists, but not bare Collections.)
 *
 * @author Louis Wasserman
 */
CollectionSerializationTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationTester.java)/**
 * Basic reserialization test for collections.
 *
 * @author Louis Wasserman
 */
CollectionSizeTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSizeTester.java)/**
 * A generic JUnit test which tests {@code size()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
CollectionSpliteratorTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSpliteratorTester.java)/**
 * A generic JUnit test which tests {@code spliterator} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
CollectionStreamTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionStreamTester.java)/**
 * A generic JUnit test which tests {@code stream} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
CollectionToArrayTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionToArrayTester.java)/**
 * A generic JUnit test which tests {@code toArray()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
CollectionToStringTester (/guava-testlib/src/com/google/common/collect/testing/testers/CollectionToStringTester.java)/**
 * A generic JUnit test which tests {@code toString()} operations on a collection. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
ConcurrentMapPutIfAbsentTester (/guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapPutIfAbsentTester.java)/**
 * A generic JUnit test which tests {@code putIfAbsent} operations on a concurrent map. Can't be
 * invoked directly; please see {@link
 * com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
ConcurrentMapRemoveTester (/guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapRemoveTester.java)/**
 * Tester for {@link ConcurrentMap#remove}. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
ConcurrentMapReplaceEntryTester (/guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapReplaceEntryTester.java)/**
 * A generic JUnit test which tests {@code replace(K, V, V)} operations on a concurrent map. Can't
 * be invoked directly; please see {@link
 * com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
ConcurrentMapReplaceTester (/guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapReplaceTester.java)/**
 * A generic JUnit test which tests {@code replace(K, V)} operations on a concurrent map. Can't be
 * invoked directly; please see {@link
 * com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
ListAddAllAtIndexTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListAddAllAtIndexTester.java)/**
 * A generic JUnit test which tests {@code addAll(int, Collection)} operations on a list. Can't be
 * invoked directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListAddAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListAddAllTester.java)/**
 * A generic JUnit test which tests {@code addAll(Collection)} operations on a list. Can't be
 * invoked directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListAddAtIndexTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListAddAtIndexTester.java)/**
 * A generic JUnit test which tests {@code add(int, Object)} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListAddTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListAddTester.java)/**
 * A generic JUnit test which tests {@code add(Object)} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListCreationTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListCreationTester.java)/**
 * A generic JUnit test which tests creation (typically through a constructor or static factory
 * method) of a list. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListEqualsTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListEqualsTester.java)/**
 * Tests {@link List#equals}.
 *
 * @author George van den Driessche
 */
ListGetTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListGetTester.java)/**
 * A generic JUnit test which tests {@code get()} operations on a list. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListHashCodeTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListHashCodeTester.java)/**
 * Tests {@link java.util.List#hashCode}.
 *
 * @author George van den Driessche
 */
ListIndexOfTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListIndexOfTester.java)/**
 * A generic JUnit test which tests {@code indexOf()} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListLastIndexOfTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListLastIndexOfTester.java)/**
 * A generic JUnit test which tests {@code lastIndexOf()} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListListIteratorTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListListIteratorTester.java)/**
 * A generic JUnit test which tests {@code listIterator} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
ListRemoveAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListRemoveAllTester.java)/**
 * A generic JUnit test which tests removeAll operations on a list. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
ListRemoveAtIndexTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListRemoveAtIndexTester.java)/**
 * A generic JUnit test which tests {@code remove(int)} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListRemoveTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListRemoveTester.java)/**
 * A generic JUnit test which tests {@code remove(Object)} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
ListReplaceAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListReplaceAllTester.java)/**
 * A generic JUnit test which tests {@link List#replaceAll}. Can't be invoked directly; please see
 * {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
ListRetainAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListRetainAllTester.java)/**
 * A generic JUnit test which tests {@code retainAll} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListSetTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListSetTester.java)/**
 * A generic JUnit test which tests {@code set()} operations on a list. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
ListSubListTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListSubListTester.java)/**
 * A generic JUnit test which tests {@code subList()} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
ListToArrayTester (/guava-testlib/src/com/google/common/collect/testing/testers/ListToArrayTester.java)/**
 * A generic JUnit test which tests {@code toArray()} operations on a list. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
MapClearTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapClearTester.java)/**
 * A generic JUnit test which tests {@code clear()} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapComputeIfAbsentTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapComputeIfAbsentTester.java)/**
 * A generic JUnit test which tests {@link Map#computeIfAbsent}. Can't be invoked directly; please
 * see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapComputeIfPresentTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapComputeIfPresentTester.java)/**
 * A generic JUnit test which tests {@link Map#computeIfPresent}. Can't be invoked directly; please
 * see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapComputeTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapComputeTester.java)/**
 * A generic JUnit test which tests {@link Map#compute}. Can't be invoked directly; please see
 * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapContainsKeyTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapContainsKeyTester.java)/**
 * A generic JUnit test which tests {@code containsKey()} operations on a map. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
MapContainsValueTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapContainsValueTester.java)/**
 * A generic JUnit test which tests {@code containsValue()} operations on a map. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapCreationTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapCreationTester.java)/**
 * A generic JUnit test which tests creation (typically through a constructor or static factory
 * method) of a map. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
MapEntrySetTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapEntrySetTester.java)/**
 * Tests {@link java.util.Map#entrySet}.
 *
 * @author Louis Wasserman
 * @param <K> The key type of the map implementation under test.
 * @param <V> The value type of the map implementation under test.
 */
MapEqualsTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapEqualsTester.java)/**
 * Tests {@link java.util.Map#equals}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapForEachTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapForEachTester.java)/**
 * A generic JUnit test which tests {@link Map#forEach}. Can't be invoked directly; please see
 * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapGetOrDefaultTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapGetOrDefaultTester.java)/**
 * A generic JUnit test which tests {@link Map#getOrDefault}. Can't be invoked directly; please see
 * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapGetTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapGetTester.java)/**
 * A generic JUnit test which tests {@code get} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
MapHashCodeTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapHashCodeTester.java)/**
 * Tests {@link java.util.Map#hashCode}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapIsEmptyTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapIsEmptyTester.java)/**
 * A generic JUnit test which tests {@code isEmpty()} operations on a map. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
MapMergeTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapMergeTester.java)/**
 * A generic JUnit test which tests {@link Map#merge}. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapPutAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapPutAllTester.java)/**
 * A generic JUnit test which tests {@code putAll} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
MapPutIfAbsentTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapPutIfAbsentTester.java)/**
 * A generic JUnit test which tests {@link Map#putIfAbsent}. Can't be invoked directly; please see
 * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapPutTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapPutTester.java)/**
 * A generic JUnit test which tests {@code put} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
MapRemoveEntryTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapRemoveEntryTester.java)/**
 * Tester for {@link Map#remove(Object, Object)}. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapRemoveTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapRemoveTester.java)/**
 * A generic JUnit test which tests {@code remove} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 * @author Chris Povirk
 */
MapReplaceAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapReplaceAllTester.java)/**
 * A generic JUnit test which tests {@code replaceAll()} operations on a map. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapReplaceEntryTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapReplaceEntryTester.java)/**
 * A generic JUnit test which tests {@link Map#replace(Object, Object, Object)}. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapReplaceTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapReplaceTester.java)/**
 * A generic JUnit test which tests {@link Map#replace(Object, Object)}. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 *
 * @author Louis Wasserman
 */
MapSerializationTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapSerializationTester.java)/**
 * Basic serialization test for maps.
 *
 * @author Louis Wasserman
 */
MapSizeTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapSizeTester.java)/**
 * A generic JUnit test which tests {@code size()} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
MapToStringTester (/guava-testlib/src/com/google/common/collect/testing/testers/MapToStringTester.java)/**
 * A generic JUnit test which tests {@code toString()} operations on a map. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
NavigableMapNavigationTester (/guava-testlib/src/com/google/common/collect/testing/testers/NavigableMapNavigationTester.java)/**
 * A generic JUnit test which tests operations on a NavigableMap. Can't be invoked directly; please
 * see {@code NavigableMapTestSuiteBuilder}.
 *
 * @author Jesse Wilson
 * @author Louis Wasserman
 */
NavigableSetNavigationTester (/guava-testlib/src/com/google/common/collect/testing/testers/NavigableSetNavigationTester.java)/**
 * A generic JUnit test which tests operations on a NavigableSet. Can't be invoked directly; please
 * see {@code NavigableSetTestSuiteBuilder}.
 *
 * @author Jesse Wilson
 * @author Louis Wasserman
 */
Platform (/guava-testlib/src/com/google/common/collect/testing/testers/Platform.java)/**
 * This class is emulated in GWT.
 *
 * @author Hayward Chan
 */
QueueElementTester (/guava-testlib/src/com/google/common/collect/testing/testers/QueueElementTester.java)/**
 * A generic JUnit test which tests {@code element()} operations on a queue. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
QueueOfferTester (/guava-testlib/src/com/google/common/collect/testing/testers/QueueOfferTester.java)/**
 * A generic JUnit test which tests offer operations on a queue. Can't be invoked directly; please
 * see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
QueuePeekTester (/guava-testlib/src/com/google/common/collect/testing/testers/QueuePeekTester.java)/**
 * A generic JUnit test which tests {@code peek()} operations on a queue. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
QueuePollTester (/guava-testlib/src/com/google/common/collect/testing/testers/QueuePollTester.java)/**
 * A generic JUnit test which tests {@code poll()} operations on a queue. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
QueueRemoveTester (/guava-testlib/src/com/google/common/collect/testing/testers/QueueRemoveTester.java)/**
 * A generic JUnit test which tests {@code remove()} operations on a queue. Can't be invoked
 * directly; please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 *
 * @author Jared Levy
 */
SetAddAllTester (/guava-testlib/src/com/google/common/collect/testing/testers/SetAddAllTester.java)/**
 * A generic JUnit test which tests addAll operations on a set. Can't be invoked directly; please
 * see {@link com.google.common.collect.testing.SetTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
SetAddTester (/guava-testlib/src/com/google/common/collect/testing/testers/SetAddTester.java)/**
 * A generic JUnit test which tests add operations on a set. Can't be invoked directly; please see
 * {@link com.google.common.collect.testing.SetTestSuiteBuilder}.
 *
 * @author Kevin Bourrillion
 */
SetCreationTester (/guava-testlib/src/com/google/common/collect/testing/testers/SetCreationTester.java)/**
 * A generic JUnit test which tests creation (typically through a constructor or static factory
 * method) of a set. Can't be invoked directly; please see {@link
 * com.google.common.collect.testing.SetTestSuiteBuilder}.
 *
 * @author Chris Povirk
 */
SetEqualsTester (/guava-testlib/src/com/google/common/collect/testing/testers/SetEqualsTester.java)/**
 * Tests {@link java.util.Set#equals}.
 *
 * @author George van den Driessche
 */
SetHashCodeTester (/guava-testlib/src/com/google/common/collect/testing/testers/SetHashCodeTester.java)/**
 * Tests {@link java.util.Set#hashCode}.
 *
 * @author George van den Driessche
 */
SetRemoveTester (/guava-testlib/src/com/google/common/collect/testing/testers/SetRemoveTester.java)/**
 * A generic JUnit test which tests remove operations on a set. Can't be invoked directly; please
 * see {@link com.google.common.collect.testing.ListTestSuiteBuilder}.
 *
 * @author George van den Driessche
 */
SortedMapNavigationTester (/guava-testlib/src/com/google/common/collect/testing/testers/SortedMapNavigationTester.java)/**
 * A generic JUnit test which tests operations on a SortedMap. Can't be invoked directly; please see
 * {@code SortedMapTestSuiteBuilder}.
 *
 * @author Jesse Wilson
 * @author Louis Wasserman
 */
SortedSetNavigationTester (/guava-testlib/src/com/google/common/collect/testing/testers/SortedSetNavigationTester.java)/**
 * A generic JUnit test which tests operations on a SortedSet. Can't be invoked directly; please see
 * {@code SortedSetTestSuiteBuilder}.
 *
 * @author Jesse Wilson
 * @author Louis Wasserman
 */
TestIntegerSetGenerator (/guava-testlib/src/com/google/common/collect/testing/TestIntegerSetGenerator.java)/**
 * Create integer sets for collection tests.
 *
 * @author Gregory Kick
 */
TestIntegerSortedSetGenerator (/guava-testlib/src/com/google/common/collect/testing/TestIntegerSortedSetGenerator.java)/**
 * Create integer sets for testing collections that are sorted by natural ordering.
 *
 * @author Chris Povirk
 * @author Jared Levy
 */
TestIteratorGenerator (/guava-testlib/src/com/google/common/collect/testing/TestIteratorGenerator.java)/**
 * Creates iterators to be tested.
 *
 * @param <E> the element type of the iterator.
 * @author George van den Driessche
 */
TestListGenerator (/guava-testlib/src/com/google/common/collect/testing/TestListGenerator.java)/**
 * Creates sets, containing sample elements, to be tested.
 *
 * @author Kevin Bourrillion
 */
TestMapEntrySetGenerator (/guava-testlib/src/com/google/common/collect/testing/TestMapEntrySetGenerator.java)/**
 * Creates map entries using sample keys and sample values.
 *
 * @author Jesse Wilson
 */
TestMapGenerator (/guava-testlib/src/com/google/common/collect/testing/TestMapGenerator.java)/**
 * Creates maps, containing sample elements, to be tested.
 *
 * @author George van den Driessche
 */
TestQueueGenerator (/guava-testlib/src/com/google/common/collect/testing/TestQueueGenerator.java)/**
 * Creates queues, containing sample elements, to be tested.
 *
 * @author Jared Levy
 */
TestSetGenerator (/guava-testlib/src/com/google/common/collect/testing/TestSetGenerator.java)/**
 * Creates sets, containing sample elements, to be tested.
 *
 * @author Kevin Bourrillion
 */
TestsForListsInJavaUtil (/guava-testlib/src/com/google/common/collect/testing/TestsForListsInJavaUtil.java)/**
 * Generates a test suite covering the {@link List} implementations in the {@link java.util}
 * package. Can be subclassed to specify tests that should be suppressed.
 *
 * @author Kevin Bourrillion
 */
TestsForMapsInJavaUtil (/guava-testlib/src/com/google/common/collect/testing/TestsForMapsInJavaUtil.java)/**
 * Generates a test suite covering the {@link Map} implementations in the {@link java.util} package.
 * Can be subclassed to specify tests that should be suppressed.
 *
 * @author Kevin Bourrillion
 */
TestsForQueuesInJavaUtil (/guava-testlib/src/com/google/common/collect/testing/TestsForQueuesInJavaUtil.java)/**
 * Generates a test suite covering the {@link Queue} implementations in the {@link java.util}
 * package. Can be subclassed to specify tests that should be suppressed.
 *
 * @author Jared Levy
 */
TestsForSetsInJavaUtil (/guava-testlib/src/com/google/common/collect/testing/TestsForSetsInJavaUtil.java)/**
 * Generates a test suite covering the {@link Set} implementations in the {@link java.util} package.
 * Can be subclassed to specify tests that should be suppressed.
 *
 * @author Kevin Bourrillion
 */
TestSortedMapGenerator (/guava-testlib/src/com/google/common/collect/testing/TestSortedMapGenerator.java)/**
 * Creates sorted maps, containing sample elements, to be tested.
 *
 * @author Louis Wasserman
 */
TestSortedSetGenerator (/guava-testlib/src/com/google/common/collect/testing/TestSortedSetGenerator.java)/**
 * Creates sorted sets, containing sample elements, to be tested.
 *
 * @author Louis Wasserman
 */
TestStringCollectionGenerator (/guava-testlib/src/com/google/common/collect/testing/TestStringCollectionGenerator.java)/**
 * String creation for testing arbitrary collections.
 *
 * @author Jared Levy
 */
TestStringListGenerator (/guava-testlib/src/com/google/common/collect/testing/TestStringListGenerator.java)/**
 * TODO: javadoc.
 *
 * @author Kevin Bourrillion
 */
TestStringMapGenerator (/guava-testlib/src/com/google/common/collect/testing/TestStringMapGenerator.java)/**
 * Implementation helper for {@link TestMapGenerator} for use with maps of strings.
 *
 * @author Chris Povirk
 * @author Jared Levy
 * @author George van den Driessche
 */
TestStringQueueGenerator (/guava-testlib/src/com/google/common/collect/testing/TestStringQueueGenerator.java)/**
 * Create queue of strings for tests.
 *
 * @author Jared Levy
 */
TestStringSetGenerator (/guava-testlib/src/com/google/common/collect/testing/TestStringSetGenerator.java)/**
 * Create string sets for collection tests.
 *
 * @author Kevin Bourrillion
 */
TestStringSortedMapGenerator (/guava-testlib/src/com/google/common/collect/testing/TestStringSortedMapGenerator.java)/**
 * Implementation helper for {@link TestMapGenerator} for use with sorted maps of strings.
 *
 * @author Chris Povirk
 */
TestStringSortedSetGenerator (/guava-testlib/src/com/google/common/collect/testing/TestStringSortedSetGenerator.java)/**
 * Create string sets for testing collections that are sorted by natural ordering.
 *
 * @author Jared Levy
 */
TestSubjectGenerator (/guava-testlib/src/com/google/common/collect/testing/TestSubjectGenerator.java)/**
 * To be implemented by test generators that can produce test subjects without requiring any
 * parameters.
 *
 * @param <T> the type created by this generator.
 * @author George van den Driessche
 */
TestUnhashableCollectionGenerator (/guava-testlib/src/com/google/common/collect/testing/TestUnhashableCollectionGenerator.java)/**
 * Creates collections containing unhashable sample elements, to be tested.
 *
 * @author Regina O'Dell
 */
UnhashableObject (/guava-testlib/src/com/google/common/collect/testing/UnhashableObject.java)/**
 * An unhashable object to be used in testing as values in our collections.
 *
 * @author Regina O'Dell
 */
EscaperAsserts (/guava-testlib/src/com/google/common/escape/testing/EscaperAsserts.java)/**
 * Extra assert methods for testing Escaper implementations.
 *
 * @author David Beaumont
 * @since 15.0
 */
AbstractPackageSanityTests (/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java)/**
 * Automatically runs sanity checks against top level classes in the same package of the test that
 * extends {@code AbstractPackageSanityTests}. Currently sanity checks include {@link
 * NullPointerTester}, {@link EqualsTester} and {@link SerializableTester}. For example:
 *
 * <pre>
 * public class PackageSanityTests extends AbstractPackageSanityTests {}
 * </pre>
 *
 * <p>Note that only top-level classes with either a non-private constructor or a non-private static
 * factory method to construct instances can have their instance methods checked. For example:
 *
 * <pre>
 * public class Address {
 *   private final String city;
 *   private final String state;
 *   private final String zipcode;
 *
 *   public Address(String city, String state, String zipcode) {...}
 *
 *   {@literal @Override} public boolean equals(Object obj) {...}
 *   {@literal @Override} public int hashCode() {...}
 *   ...
 * }
 * </pre>
 *
 * <p>No cascading checks are performed against the return values of methods unless the method is a
 * static factory method. Neither are semantics of mutation methods such as {@code
 * someList.add(obj)} checked. For more detailed discussion of supported and unsupported cases, see
 * {@link #testEquals}, {@link #testNulls} and {@link #testSerializable}.
 *
 * <p>For testing against the returned instances from a static factory class, such as
 *
 * <pre>
 * interface Book {...}
 * public class Books {
 *   public static Book hardcover(String title) {...}
 *   public static Book paperback(String title) {...}
 * }
 * </pre>
 *
 * <p>please use {@link ClassSanityTester#forAllPublicStaticMethods}.
 *
 * <p>If not all classes on the classpath should be covered, {@link #ignoreClasses} can be used to
 * exclude certain classes. As a special case, classes with an underscore in the name (like {@code
 * AutoValue_Foo}) can be excluded using <code>ignoreClasses({@link #UNDERSCORE_IN_NAME})</code>.
 *
 * <p>{@link #setDefault} allows subclasses to specify default values for types.
 *
 * <p>This class incurs IO because it scans the classpath and reads classpath resources.
 *
 * @author Ben Yu
 * @since 14.0
 */
ArbitraryInstances (/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java)/**
 * Supplies an arbitrary "default" instance for a wide range of types, often useful in testing
 * utilities.
 *
 * <p>Covers arrays, enums and common types defined in {@code java.lang}, {@code java.lang.reflect},
 * {@code java.io}, {@code java.nio}, {@code java.math}, {@code java.util}, {@code
 * java.util.concurrent}, {@code java.util.regex}, {@code com.google.common.base}, {@code
 * com.google.common.collect} and {@code com.google.common.primitives}. In addition, if the type
 * exposes at least one public static final constant of the same type, one of the constants will be
 * used; or if the class exposes a public parameter-less constructor then it will be "new"d and
 * returned.
 *
 * <p>All default instances returned by {@link #get} are generics-safe. Clients won't get type
 * errors for using {@code get(Comparator.class)} as a {@code Comparator<Foo>}, for example.
 * Immutable empty instances are returned for collection types; {@code ""} for string; {@code 0} for
 * number types; reasonable default instance for other stateless types. For mutable types, a fresh
 * instance is created each time {@code get()} is called.
 *
 * @author Kevin Bourrillion
 * @author Ben Yu
 * @since 12.0
 */
FactoryMethodReturnValueTester (/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/** Runs sanity tests against return values of static factory methods declared by a class. */
ParameterNotInstantiableException (/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/**
   * Thrown if the test tries to invoke a constructor or static factory method but failed because
   * the dummy value of a constructor or method parameter is unknown.
   */
ParameterHasNoDistinctValueException (/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/**
   * Thrown if the test fails to generate two distinct non-null values of a constructor or factory
   * parameter in order to test {@link Object#equals} and {@link Object#hashCode} of the declaring
   * class.
   */
FactoryMethodReturnsNullException (/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/**
   * Thrown if the test tries to invoke a static factory method to test instance methods but the
   * factory returned null.
   */
ClassSanityTester (/guava-testlib/src/com/google/common/testing/ClassSanityTester.java)/**
 * Tester that runs automated sanity tests for any given class. A typical use case is to test static
 * factory classes like:
 *
 * <pre>
 * interface Book {...}
 * public class Books {
 *   public static Book hardcover(String title) {...}
 *   public static Book paperback(String title) {...}
 * }
 * </pre>
 *
 * <p>And all the created {@code Book} instances can be tested with:
 *
 * <pre>
 * new ClassSanityTester()
 *     .forAllPublicStaticMethods(Books.class)
 *     .thatReturn(Book.class)
 *     .testEquals(); // or testNulls(), testSerializable() etc.
 * </pre>
 *
 * @author Ben Yu
 * @since 14.0
 */
ClusterException (/guava-testlib/src/com/google/common/testing/ClusterException.java)/**
 * An {@link ClusterException} is a data structure that allows for some code to "throw multiple
 * exceptions", or something close to it. The prototypical code that calls for this class is
 * presented below:
 *
 * <pre>
 * void runManyThings({@literal List<ThingToRun>} thingsToRun) {
 *   for (ThingToRun thingToRun : thingsToRun) {
 *     thingToRun.run(); // say this may throw an exception, but you want to
 *                       // always run all thingsToRun
 *   }
 * }
 * </pre>
 *
 * <p>This is what the code would become:
 *
 * <pre>
 * void runManyThings({@literal List<ThingToRun>} thingsToRun) {
 *   {@literal List<Exception>} exceptions = Lists.newArrayList();
 *   for (ThingToRun thingToRun : thingsToRun) {
 *     try {
 *       thingToRun.run();
 *     } catch (Exception e) {
 *       exceptions.add(e);
 *     }
 *   }
 *   if (exceptions.size() &gt; 0) {
 *     throw ClusterException.create(exceptions);
 *   }
 * }
 * </pre>
 *
 * <p>See semantic details at {@link #create(Collection)}.
 *
 * @author Luiz-Otavio Zorzella
 */
CollectorTester (/guava-testlib/src/com/google/common/testing/CollectorTester.java)/**
 * Tester for {@code Collector} implementations.
 *
 * <p>Example usage:
 *
 * <pre>
 * CollectorTester.of(Collectors.summingInt(Integer::parseInt))
 *     .expectCollects(3, "1", "2")
 *     .expectCollects(10, "1", "4", "3", "2")
 *     .expectCollects(5, "-3", "0", "8");
 * </pre>
 *
 * @author Louis Wasserman
 * @since 21.0
 */
DummyProxy (/guava-testlib/src/com/google/common/testing/DummyProxy.java)/**
 * Generates a dummy interface proxy that simply returns a dummy value for each method.
 *
 * @author Ben Yu
 */
EqualsTester (/guava-testlib/src/com/google/common/testing/EqualsTester.java)/**
 * Tester for equals() and hashCode() methods of a class.
 *
 * <p>The simplest use case is:
 *
 * <pre>
 * new EqualsTester().addEqualityGroup(foo).testEquals();
 * </pre>
 *
 * <p>This tests {@code foo.equals(foo)}, {@code foo.equals(null)}, and a few other operations.
 *
 * <p>For more extensive testing, add multiple equality groups. Each group should contain objects
 * that are equal to each other but unequal to the objects in any other group. For example:
 *
 * <pre>
 * new EqualsTester()
 *     .addEqualityGroup(new User("page"), new User("page"))
 *     .addEqualityGroup(new User("sergey"))
 *     .testEquals();
 * </pre>
 *
 * <p>This tests:
 *
 * <ul>
 *   <li>comparing each object against itself returns true
 *   <li>comparing each object against null returns false
 *   <li>comparing each object against an instance of an incompatible class returns false
 *   <li>comparing each pair of objects within the same equality group returns true
 *   <li>comparing each pair of objects from different equality groups returns false
 *   <li>the hash codes of any two equal objects are equal
 * </ul>
 *
 * <p>When a test fails, the error message labels the objects involved in the failed comparison as
 * follows:
 *
 * <ul>
 *   <li>"{@code [group }<i>i</i>{@code , item }<i>j</i>{@code ]}" refers to the
 *       <i>j</i><sup>th</sup> item in the <i>i</i><sup>th</sup> equality group, where both equality
 *       groups and the items within equality groups are numbered starting from 1. When either a
 *       constructor argument or an equal object is provided, that becomes group 1.
 * </ul>
 *
 * @author Jim McMaster
 * @author Jige Yu
 * @since 10.0
 */
EquivalenceTester (/guava-testlib/src/com/google/common/testing/EquivalenceTester.java)/**
 * Tester for {@link Equivalence} relationships between groups of objects.
 *
 * <p>To use, create a new {@link EquivalenceTester} and add equivalence groups where each group
 * contains objects that are supposed to be equal to each other. Objects of different groups are
 * expected to be unequal. For example:
 *
 * <pre>{@code
 * EquivalenceTester.of(someStringEquivalence)
 *     .addEquivalenceGroup("hello", "h" + "ello")
 *     .addEquivalenceGroup("world", "wor" + "ld")
 *     .test();
 * }</pre>
 *
 * <p>Note that testing {@link Object#equals(Object)} is more simply done using the {@link
 * EqualsTester}. It includes an extra test against an instance of an arbitrary class without having
 * to explicitly add another equivalence group.
 *
 * @author Gregory Kick
 * @since 10.0
 */
FakeTicker (/guava-testlib/src/com/google/common/testing/FakeTicker.java)/**
 * A Ticker whose value can be advanced programmatically in test.
 *
 * <p>The ticker can be configured so that the time is incremented whenever {@link #read} is called:
 * see {@link #setAutoIncrementStep}.
 *
 * <p>This class is thread-safe.
 *
 * @author Jige Yu
 * @since 10.0
 */
InteractionTester (/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java)/** Tests a single interaction against a method. */
ForwardingWrapperTester (/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java)/**
 * Tester to ensure forwarding wrapper works by delegating calls to the corresponding method with
 * the same parameters forwarded and return value forwarded back or exception propagated as is.
 *
 * <p>For example:
 *
 * <pre>{@code
 * new ForwardingWrapperTester().testForwarding(Foo.class, new Function<Foo, Foo>() {
 *   public Foo apply(Foo foo) {
 *     return new ForwardingFoo(foo);
 *   }
 * });
 * }</pre>
 *
 * @author Ben Yu
 * @since 14.0
 */
FreshValueGenerator (/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java)/**
 * Generates fresh instances of types that are different from each other (if possible).
 *
 * @author Ben Yu
 */
FinalizationPredicate (/guava-testlib/src/com/google/common/testing/GcFinalization.java)/**
   * A predicate that is expected to return true subsequent to <em>finalization</em>, that is, one
   * of the following actions taken by the garbage collector when performing a full collection in
   * response to {@link System#gc()}:
   *
   * <ul>
   *   <li>invoking the {@code finalize} methods of unreachable objects
   *   <li>clearing weak references to unreachable referents
   *   <li>enqueuing weak references to unreachable referents in their reference queue
   * </ul>
   */
GcFinalization (/guava-testlib/src/com/google/common/testing/GcFinalization.java)/**
 * Testing utilities relating to garbage collection finalization.
 *
 * <p>Use this class to test code triggered by <em>finalization</em>, that is, one of the following
 * actions taken by the java garbage collection system:
 *
 * <ul>
 *   <li>invoking the {@code finalize} methods of unreachable objects
 *   <li>clearing weak references to unreachable referents
 *   <li>enqueuing weak references to unreachable referents in their reference queue
 * </ul>
 *
 * <p>This class uses (possibly repeated) invocations of {@link java.lang.System#gc()} to cause
 * finalization to happen. However, a call to {@code System.gc()} is specified to be no more than a
 * hint, so this technique may fail at the whim of the JDK implementation, for example if a user
 * specified the JVM flag {@code -XX:+DisableExplicitGC}. But in practice, it works very well for
 * ordinary tests.
 *
 * <p>Failure of the expected event to occur within an implementation-defined "reasonable" time
 * period or an interrupt while waiting for the expected event will result in a {@link
 * RuntimeException}.
 *
 * <p>Here's an example that tests a {@code finalize} method:
 *
 * <pre>{@code
 * final CountDownLatch latch = new CountDownLatch(1);
 * Object x = new MyClass() {
 *   ...
 *   protected void finalize() { latch.countDown(); ... }
 * };
 * x = null;  // Hint to the JIT that x is stack-unreachable
 * GcFinalization.await(latch);
 * }</pre>
 *
 * <p>Here's an example that uses a user-defined finalization predicate:
 *
 * <pre>{@code
 * final WeakHashMap<Object, Object> map = new WeakHashMap<>();
 * map.put(new Object(), Boolean.TRUE);
 * GcFinalization.awaitDone(new FinalizationPredicate() {
 *   public boolean isDone() {
 *     return map.isEmpty();
 *   }
 * });
 * }</pre>
 *
 * <p>Even if your non-test code does not use finalization, you can use this class to test for
 * leaks, by ensuring that objects are no longer strongly referenced:
 *
 * <pre>{@code
 * // Helper function keeps victim stack-unreachable.
 * private WeakReference<Foo> fooWeakRef() {
 *   Foo x = ....;
 *   WeakReference<Foo> weakRef = new WeakReference<>(x);
 *   // ... use x ...
 *   x = null;  // Hint to the JIT that x is stack-unreachable
 *   return weakRef;
 * }
 * public void testFooLeak() {
 *   GcFinalization.awaitClear(fooWeakRef());
 * }
 * }</pre>
 *
 * <p>This class cannot currently be used to test soft references, since this class does not try to
 * create the memory pressure required to cause soft references to be cleared.
 *
 * <p>This class only provides testing utilities. It is not designed for direct use in production or
 * for benchmarking.
 *
 * @author mike nonemacher
 * @author Martin Buchholz
 * @since 11.0
 */
NullPointerTester (/guava-testlib/src/com/google/common/testing/NullPointerTester.java)/**
 * A test utility that verifies that your methods and constructors throw {@link
 * NullPointerException} or {@link UnsupportedOperationException} whenever null is passed to a
 * parameter whose declaration or type isn't annotated with an annotation with the simple name
 * {@code Nullable}, {@lcode CheckForNull}, {@link NullableType}, or {@link NullableDecl}.
 *
 * <p>The tested methods and constructors are invoked -- each time with one parameter being null and
 * the rest not null -- and the test fails if no expected exception is thrown. {@code
 * NullPointerTester} uses best effort to pick non-null default values for many common JDK and Guava
 * types, and also for interfaces and public classes that have public parameter-less constructors.
 * When the non-null default value for a particular parameter type cannot be provided by {@code
 * NullPointerTester}, the caller can provide a custom non-null default value for the parameter type
 * via {@link #setDefault}.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
Platform (/guava-testlib/src/com/google/common/testing/Platform.java)/**
 * Methods factored out so that they can be emulated differently in GWT.
 *
 * @author Chris Povirk
 */
RelationshipTester (/guava-testlib/src/com/google/common/testing/RelationshipTester.java)/**
 * Implementation helper for {@link EqualsTester} and {@link EquivalenceTester} that tests for
 * equivalence classes.
 *
 * @author Gregory Kick
 */
SerializableTester (/guava-testlib/src/com/google/common/testing/SerializableTester.java)/**
 * Tests serialization and deserialization of an object, optionally asserting that the resulting
 * object is equal to the original.
 *
 * <p><b>GWT warning:</b> Under GWT, both methods simply returns their input, as proper GWT
 * serialization tests require more setup. This no-op behavior allows test authors to intersperse
 * {@code SerializableTester} calls with other, GWT-compatible tests.
 *
 *
 * @author Mike Bostock
 * @since 10.0
 */
SloppyTearDown (/guava-testlib/src/com/google/common/testing/SloppyTearDown.java)/**
 * Simple utility for when you want to create a {@link TearDown} that may throw an exception but
 * should not fail a test when it does. (The behavior of a {@code TearDown} that throws an exception
 * varies; see its documentation for details.) Use it just like a {@code TearDown}, except override
 * {@link #sloppyTearDown()} instead.
 *
 * @author Luiz-Otavio Zorzella
 * @since 10.0
 */
TearDown (/guava-testlib/src/com/google/common/testing/TearDown.java)/**
 * An object that can perform a {@link #tearDown} operation.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
TearDownAccepter (/guava-testlib/src/com/google/common/testing/TearDownAccepter.java)/**
 * Any object which can accept registrations of {@link TearDown} instances.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
TearDownStack (/guava-testlib/src/com/google/common/testing/TearDownStack.java)/**
 * A {@code TearDownStack} contains a stack of {@link TearDown} instances.
 *
 * <p>This class is thread-safe.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
TestLogHandler (/guava-testlib/src/com/google/common/testing/TestLogHandler.java)/**
 * Tests may use this to intercept messages that are logged by the code under test. Example:
 *
 * <pre>
 *   TestLogHandler handler;
 *
 *   protected void setUp() throws Exception {
 *     super.setUp();
 *     handler = new TestLogHandler();
 *     SomeClass.logger.addHandler(handler);
 *     addTearDown(new TearDown() {
 *       public void tearDown() throws Exception {
 *         SomeClass.logger.removeHandler(handler);
 *       }
 *     });
 *   }
 *
 *   public void test() {
 *     SomeClass.foo();
 *     LogRecord firstRecord = handler.getStoredLogRecords().get(0);
 *     assertEquals("some message", firstRecord.getMessage());
 *   }
 * </pre>
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */
AbstractListenableFutureTest (/guava-testlib/src/com/google/common/util/concurrent/testing/AbstractListenableFutureTest.java)/**
 * Abstract test case parent for anything implementing {@link ListenableFuture}. Tests the two get
 * methods and the addListener method.
 *
 * @author Sven Mawson
 * @since 10.0
 */
MockFutureListener (/guava-testlib/src/com/google/common/util/concurrent/testing/MockFutureListener.java)/**
 * A simple mock implementation of {@code Runnable} that can be used for testing ListenableFutures.
 *
 * @author Nishant Thakkar
 * @since 10.0
 */
SameThreadScheduledExecutorService (/guava-testlib/src/com/google/common/util/concurrent/testing/SameThreadScheduledExecutorService.java)/**
 * A ScheduledExecutorService that executes all scheduled actions immediately in the calling thread.
 *
 * <p>See {@link TestingExecutors#sameThreadScheduledExecutor()} for a full list of constraints.
 *
 * @author John Sirois
 * @author Zach van Schouwen
 */
TestingExecutors (/guava-testlib/src/com/google/common/util/concurrent/testing/TestingExecutors.java)/**
 * Factory methods for {@link ExecutorService} for testing.
 *
 * @author Chris Nokleberg
 * @since 14.0
 */
FeatureEnumTest (/guava-testlib/test/com/google/common/collect/testing/features/FeatureEnumTest.java)/**
 * Since annotations have some reusability issues that force copy and paste all over the place, it's
 * worth having a test to ensure that all our Feature enums have their annotations correctly set up.
 *
 * @author George van den Driessche
 */
FeatureSpecificTestSuiteBuilderTest (/guava-testlib/test/com/google/common/collect/testing/FeatureSpecificTestSuiteBuilderTest.java)/** @author Max Ross */
HelpersTest (/guava-testlib/test/com/google/common/collect/testing/HelpersTest.java)/**
 * Unit test for {@link Helpers}.
 *
 * @author Chris Povirk
 */
IteratorWithSunJavaBug6529795 (/guava-testlib/test/com/google/common/collect/testing/IteratorTesterTest.java)/**
   * This Iterator wraps another iterator and gives it a bug found in JDK6.
   *
   * <p>This bug is this: if you create an iterator from a TreeSet and call next() on that iterator
   * when hasNext() is false, so that next() throws a NoSuchElementException, then subsequent calls
   * to remove() will incorrectly throw an IllegalStateException, instead of removing the last
   * element returned.
   *
   * <p>See <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6529795">Sun bug 6529795</a>
   */
IteratorTesterTest (/guava-testlib/test/com/google/common/collect/testing/IteratorTesterTest.java)/**
 * Unit test for IteratorTester.
 *
 * @author Mick Killianey
 */
MapTestSuiteBuilderTests (/guava-testlib/test/com/google/common/collect/testing/MapTestSuiteBuilderTests.java)/**
 * Tests {@link MapTestSuiteBuilder} by using it against maps that have various negative behaviors.
 *
 * @author George van den Driessche
 */
MinimalCollectionTest (/guava-testlib/test/com/google/common/collect/testing/MinimalCollectionTest.java)/**
 * Unit test for {@link MinimalCollection}.
 *
 * @author Kevin Bourrillion
 */
MinimalIterableTest (/guava-testlib/test/com/google/common/collect/testing/MinimalIterableTest.java)/**
 * Unit test for {@link MinimalIterable}.
 *
 * @author Kevin Bourrillion
 */
MinimalSetTest (/guava-testlib/test/com/google/common/collect/testing/MinimalSetTest.java)/**
 * Unit test for {@link MinimalSet}.
 *
 * @author Regina O'Dell
 */
OpenJdk6ListTests (/guava-testlib/test/com/google/common/collect/testing/OpenJdk6ListTests.java)/**
 * Tests the {@link List} implementations of {@link java.util}, suppressing tests that trip known
 * OpenJDK 6 bugs.
 *
 * @author Kevin Bourrillion
 */
OpenJdk6QueueTests (/guava-testlib/test/com/google/common/collect/testing/OpenJdk6QueueTests.java)/**
 * Tests the {@link Queue} implementations of {@link java.util}, suppressing tests that trip known
 * OpenJDK 6 bugs.
 *
 * @author Kevin Bourrillion
 */
OpenJdk6SetTests (/guava-testlib/test/com/google/common/collect/testing/OpenJdk6SetTests.java)/**
 * Tests the {@link Set} implementations of {@link java.util}, suppressing tests that trip known
 * OpenJDK 6 bugs.
 *
 * @author Kevin Bourrillion
 */
OpenJdk6Tests (/guava-testlib/test/com/google/common/collect/testing/OpenJdk6Tests.java)/**
 * Suite of tests for OpenJdk 6 tests. The existence of this class is a hack because the
 * suitebuilder won't pick up the suites directly in the other classes because they don't extend
 * TestCase. Ergh.
 *
 * @author Kevin Bourrillion
 */
SafeTreeMapTest (/guava-testlib/test/com/google/common/collect/testing/SafeTreeMapTest.java)/**
 * Tests for SafeTreeMap.
 *
 * @author Louis Wasserman
 */
AbstractPackageSanityTestsTest (/guava-testlib/test/com/google/common/testing/AbstractPackageSanityTestsTest.java)/**
 * Unit tests for {@link AbstractPackageSanityTests}.
 *
 * @author Ben Yu
 */
ChainingCalls (/guava-testlib/test/com/google/common/testing/anotherpackage/ForwardingWrapperTesterTest.java)/** An interface for the 2 ways that a chaining call might be defined. */
ForwardingWrapperTesterTest (/guava-testlib/test/com/google/common/testing/anotherpackage/ForwardingWrapperTesterTest.java)/**
 * Tests for {@link ForwardingWrapperTester}. Live in a different package to detect reflection
 * access issues, if any.
 *
 * @author Ben Yu
 */
SomeClassThatDoesNotUseNullable (/guava-testlib/test/com/google/common/testing/anotherpackage/SomeClassThatDoesNotUseNullable.java)/** Does not check null, but should not matter since it's in a different package. */
ArbitraryInstancesTest (/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java)/**
 * Unit test for {@link ArbitraryInstances}.
 *
 * @author Ben Yu
 */
JdkObjectFactory (/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java)/** String doesn't check nulls as we expect. But the framework should ignore. */
ClassSanityTesterTest (/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java)/**
 * Unit tests for {@link ClassSanityTester}.
 *
 * @author Ben Yu
 */
ValidTestObject (/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/**
   * Test class with valid equals and hashCode methods. Testers created with instances of this class
   * should always pass.
   */
InvalidHashCodeObject (/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/** Test class with invalid hashCode method. */
NonReflexiveObject (/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/** Test class that violates reflexivity. It is not equal to itself */
InvalidEqualsNullObject (/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/** Test class that returns true if the test object is null */
InvalidEqualsIncompatibleClassObject (/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/** Test class that returns true even if the test object is of the wrong class */
EqualsTesterTest (/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java)/**
 * Unit tests for {@link EqualsTester}.
 *
 * @author Jim McMaster
 */
TestObject (/guava-testlib/test/com/google/common/testing/EquivalenceTesterTest.java)/** An object with a friendly {@link #toString()}. */
EquivalenceTesterTest (/guava-testlib/test/com/google/common/testing/EquivalenceTesterTest.java)/**
 * Tests for {@link EquivalenceTester}.
 *
 * @author Gregory Kick
 */
FakeTickerTest (/guava-testlib/test/com/google/common/testing/FakeTickerTest.java)/**
 * Unit test for {@link FakeTicker}.
 *
 * @author Jige Yu
 */
FreshValueGeneratorTest (/guava-testlib/test/com/google/common/testing/FreshValueGeneratorTest.java)/**
 * Tests for {@link FreshValueGenerator}.
 *
 * @author Ben Yu
 */
FooException (/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/** Non-NPE RuntimeException. */
OneArg (/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/**
   * Class for testing all permutations of static/non-static one-argument methods using
   * methodParameter().
   */
TwoArg (/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/**
   * Class for testing all permutations of nullable/non-nullable two-argument methods using
   * testMethod().
   *
   * <ul>
   *   <li>normalNormal: two params, neither is Nullable
   *   <li>nullableNormal: only first param is Nullable
   *   <li>normalNullable: only second param is Nullable
   *   <li>nullableNullable: both params are Nullable
   * </ul>
   */
PassObject (/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/** Lots of well-behaved methods. */
NullPointerTesterTest (/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java)/**
 * Unit test for {@link NullPointerTester}.
 *
 * @author Kevin Bourrillion
 * @author Mick Killianey
 */
RelationshipTesterTest (/guava-testlib/test/com/google/common/testing/RelationshipTesterTest.java)/**
 * Tests for {@link RelationshipTester}.
 *
 * @author Ben Yu
 */
SerializableTesterTest (/guava-testlib/test/com/google/common/testing/SerializableTesterTest.java)/**
 * Tests for {@link SerializableTester}.
 *
 * @author Nick Kralevich
 */
TearDownStackTest (/guava-testlib/test/com/google/common/testing/TearDownStackTest.java)/** @author Luiz-Otavio "Z" Zorzella */
TestLogHandlerTest (/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java)/**
 * Unit test for {@link TestLogHandler}.
 *
 * @author kevinb
 */
TestingExecutorsTest (/guava-testlib/test/com/google/common/util/concurrent/testing/TestingExecutorsTest.java)/**
 * Tests for TestingExecutors.
 *
 * @author Eric Chang
 */
AsciiBenchmark (/guava-tests/benchmark/com/google/common/base/AsciiBenchmark.java)/**
 * Benchmarks for the ASCII class.
 *
 * @author Kevin Bourrillion
 */
CharSamples (/guava-tests/benchmark/com/google/common/base/CharMatcherBenchmark.java)/**
   * Provides samples on a random distribution derived from the web.
   *
   * <p>Adapted from data provided by Mark Davis.
   *
   * @author Christopher Swenson
   */
CharMatcherBenchmark (/guava-tests/benchmark/com/google/common/base/CharMatcherBenchmark.java)/**
 * Benchmark for the {@link CharMatcher} class.
 *
 *
 * @author David Beaumont
 * @author Kevin Bourrillion
 * @author David Richter
 */
JoinerBenchmark (/guava-tests/benchmark/com/google/common/base/JoinerBenchmark.java)/**
 * Benchmarks {@link Joiner} against some common implementations of delimiter-based string joining.
 *
 * @author Adomas Paltanavicius
 */
LazyStackTraceBenchmark (/guava-tests/benchmark/com/google/common/base/LazyStackTraceBenchmark.java)/**
 * Quick and dirty benchmark of {@link Throwables#lazyStackTrace(Throwable)}. We benchmark a "caller
 * finder" implementation that might be used in a logging framework.
 */
ObjectsBenchmark (/guava-tests/benchmark/com/google/common/base/ObjectsBenchmark.java)/**
 * Some microbenchmarks for the {@link com.google.common.base.Objects} class.
 *
 * @author Ben L. Titzer
 */
SplitterBenchmark (/guava-tests/benchmark/com/google/common/base/SplitterBenchmark.java)/**
 * Microbenchmark for {@link Splitter#on} with char vs String with length == 1.
 *
 * @author Paul Lindner
 */
StopwatchBenchmark (/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java)/**
 * Simple benchmark: create, start, read. This does not currently report the most useful result
 * because it's ambiguous to what extent the stopwatch benchmark is being affected by GC.
 *
 * @author Kevin Bourrillion
 */
StringsRepeatBenchmark (/guava-tests/benchmark/com/google/common/base/StringsRepeatBenchmark.java)/**
 * Microbenchmark for {@link com.google.common.base.Strings#repeat}
 *
 * @author Mike Cripps
 */
ToStringHelperBenchmark (/guava-tests/benchmark/com/google/common/base/ToStringHelperBenchmark.java)/**
 * Some microbenchmarks for the {@link MoreObjects.ToStringHelper} class.
 *
 * @author Osvaldo Doederlein
 */
WhitespaceMatcherBenchmark (/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java)/** Benchmark for the {@link CharMatcher#whitespace} implementation. */
ChainBenchmark (/guava-tests/benchmark/com/google/common/cache/ChainBenchmark.java)/**
 * Benchmark for {@code LocalCache.Segment.removeEntryFromChain}.
 *
 * @author Charles Fry
 */
LoadingCacheSingleThreadBenchmark (/guava-tests/benchmark/com/google/common/cache/LoadingCacheSingleThreadBenchmark.java)/**
 * Single-threaded benchmark for {@link LoadingCache}.
 *
 * @author Charles Fry
 */
MapMakerComparisonBenchmark (/guava-tests/benchmark/com/google/common/cache/MapMakerComparisonBenchmark.java)/**
 * Compare CacheBuilder and MapMaker performance, ensuring that they remain on par with each other.
 *
 * @author Nikita Sidorov
 */
SegmentBenchmark (/guava-tests/benchmark/com/google/common/cache/SegmentBenchmark.java)/**
 * Benchmark for {@code LocalCache.Segment.expand()}.
 *
 * @author Charles Fry
 */
BinaryTreeTraverserBenchmark (/guava-tests/benchmark/com/google/common/collect/BinaryTreeTraverserBenchmark.java)/**
 * Benchmarks for the {@code TreeTraverser} operations on binary trees.
 *
 * @author Louis Wasserman
 */
ComparatorDelegationOverheadBenchmark (/guava-tests/benchmark/com/google/common/collect/ComparatorDelegationOverheadBenchmark.java)/**
 * A benchmark to determine the overhead of sorting with {@link Ordering#from(Comparator)}, or with
 * {@link Ordering#natural()}, as opposed to using the inlined {@link Arrays#sort(Object[])}
 * implementation, which uses {@link Comparable#compareTo} directly.
 *
 * @author Louis Wasserman
 */
OldConcurrentHashMultiset (/guava-tests/benchmark/com/google/common/collect/ConcurrentHashMultisetBenchmark.java)/**
   * Duplication of the old version of ConcurrentHashMultiset (with some unused stuff removed, like
   * serialization code) which used a map with boxed integers for the values.
   */
ConcurrentHashMultisetBenchmark (/guava-tests/benchmark/com/google/common/collect/ConcurrentHashMultisetBenchmark.java)/**
 * Benchmarks for {@link ConcurrentHashMultiset}.
 *
 * @author mike nonemacher
 */
HashMultisetAddPresentBenchmark (/guava-tests/benchmark/com/google/common/collect/HashMultisetAddPresentBenchmark.java)/**
 * Benchmark for HashMultiset.add for an already-present element.
 *
 * @author Louis Wasserman
 */
ImmutableListCreationBenchmark (/guava-tests/benchmark/com/google/common/collect/ImmutableListCreationBenchmark.java)/**
 * Benchmark for various ways to create an {@code ImmutableList}.
 *
 * @author Louis Wasserman
 */
ImmutableSetHashFloodingDetectionBenchmark (/guava-tests/benchmark/com/google/common/collect/ImmutableSetHashFloodingDetectionBenchmark.java)/** Benchmark of implementations of {@link ImmutableSet#hashFloodingDetected(Object[])}. */
InternersBenchmark (/guava-tests/benchmark/com/google/common/collect/InternersBenchmark.java)/**
 * Benchmarking interners.
 *
 * @author Dimitris Andreou
 */
IteratorBenchmark (/guava-tests/benchmark/com/google/common/collect/IteratorBenchmark.java)/**
 * Tests the speed of iteration of different iteration methods for collections.
 *
 * @author David Richter
 */
MapBenchmark (/guava-tests/benchmark/com/google/common/collect/MapBenchmark.java)/**
 * A microbenchmark that tests the performance of get() and iteration on various map
 * implementations. Forked from {@link SetContainsBenchmark}.
 *
 * @author Nicholaus Shupe
 */
InvertedMinMaxPriorityQueue (/guava-tests/benchmark/com/google/common/collect/MinMaxPriorityQueueBenchmark.java)/**
   * Implementation of the InvertedMinMaxPriorityQueue which forwards all calls to a
   * MinMaxPriorityQueue, except poll, which is forwarded to pollMax. That way we can benchmark
   * pollMax using the same code that benchmarks poll.
   */
ExpensiveComputation (/guava-tests/benchmark/com/google/common/collect/MinMaxPriorityQueueBenchmark.java)/**
   * Does a CPU intensive operation on Integer and returns a BigInteger Used to implement an
   * ordering that spends a lot of cpu.
   */
MinMaxPriorityQueueBenchmark (/guava-tests/benchmark/com/google/common/collect/MinMaxPriorityQueueBenchmark.java)/**
 * Benchmarks to compare performance of MinMaxPriorityQueue and PriorityQueue.
 *
 * @author Sverre Sundsdal
 */
MultipleSetContainsBenchmark (/guava-tests/benchmark/com/google/common/collect/MultipleSetContainsBenchmark.java)/** A benchmark that tries invoking {@code Set.contains} on many different sets. */
MultisetIteratorBenchmark (/guava-tests/benchmark/com/google/common/collect/MultisetIteratorBenchmark.java)/**
 * Tests the speed of iteration of different iteration methods for collections.
 *
 * @author David Richter
 */
PowerSetBenchmark (/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java)/**
 * Very simple powerSet iteration benchmark.
 *
 * @author Kevin Bourrillion
 */
SetContainsBenchmark (/guava-tests/benchmark/com/google/common/collect/SetContainsBenchmark.java)/**
 * A microbenchmark that tests the performance of contains() on various Set implementations.
 *
 * @author Kevin Bourrillion
 */
SetCreationBenchmark (/guava-tests/benchmark/com/google/common/collect/SetCreationBenchmark.java)/**
 * This is meant to be used with {@code --measureMemory} to measure the memory usage of various
 * {@code Set} implementations.
 *
 * @author Christopher Swenson
 */
SetIterationBenchmark (/guava-tests/benchmark/com/google/common/collect/SetIterationBenchmark.java)/**
 * Test iteration speed at various size for {@link Set} instances.
 *
 * @author Christopher Swenson
 */
SortedCopyBenchmark (/guava-tests/benchmark/com/google/common/collect/SortedCopyBenchmark.java)/**
 * Provides supporting data for performance notes in the documentation of {@link
 * Ordering#sortedCopy} and {@link Ordering#immutableSortedCopy}, as well as for automated code
 * suggestions.
 *
 */
StreamsBenchmark (/guava-tests/benchmark/com/google/common/collect/StreamsBenchmark.java)/**
 * Test stream operation speed.
 *
 * @author Louis Wasserman
 */
EventBusBenchmark (/guava-tests/benchmark/com/google/common/eventbus/EventBusBenchmark.java)/**
 * Benchmark for {@link EventBus}.
 *
 * @author Eric Fellheimer
 */
ChecksumBenchmark (/guava-tests/benchmark/com/google/common/hash/ChecksumBenchmark.java)/**
 * Benchmarks for comparing {@link Checksum}s and {@link HashFunction}s that wrap {@link Checksum}s.
 *
 * <p>Parameters for the benchmark are:
 *
 * <ul>
 *   <li>size: The length of the byte array to hash.
 * </ul>
 *
 * @author Colin Decker
 */
HashCodeBenchmark (/guava-tests/benchmark/com/google/common/hash/HashCodeBenchmark.java)/**
 * Benchmarks for comparing the various {@link HashCode#equals} methods.
 *
 * <p>Parameters for the benchmark are:
 *
 * <ul>
 *   <li>size: the length of the byte array to hash
 *   <li>whereToDiffer: where in the array the bytes should differ
 *   <li>equalsImpl: which implementation of array equality to use
 * </ul>
 *
 * <p><b>Important note:</b> the primary goal of this benchmark is to ensure that varying {@code
 * whereToDiffer} produces no observable change in performance. We want to make sure that the array
 * equals implementation is *not* short-circuiting to prevent timing-based attacks. Being fast is
 * only a secondary goal.
 *
 * @author Kurt Alfred Kluever
 */
HashFunctionBenchmark (/guava-tests/benchmark/com/google/common/hash/HashFunctionBenchmark.java)/**
 * Benchmarks for comparing the various {@link HashFunction functions} that we provide.
 *
 * <p>Parameters for the benchmark are:
 *
 * <ul>
 *   <li>size: The length of the byte array to hash.
 *   <li>hashFunctionEnum: The {@link HashFunction} to use for hashing.
 * </ul>
 *
 * @author Kurt Alfred Kluever
 */
HashStringBenchmark (/guava-tests/benchmark/com/google/common/hash/HashStringBenchmark.java)/** Benchmarks for the hashing of UTF-8 strings. */
MessageDigestAlgorithmBenchmark (/guava-tests/benchmark/com/google/common/hash/MessageDigestAlgorithmBenchmark.java)/**
 * Benchmarks for comparing {@link MessageDigest}s and {@link com.google.common.hash.HashFunction}s
 * that wrap {@link MessageDigest}s.
 *
 * <p>Parameters for the benchmark are:
 *
 * <ul>
 *   <li>size: The length of the byte array to hash.
 *   <li>algorithm: the algorithm to hash with (e.g. MD5, SHA1, etc.).
 *   <li>hashMethod: how to hash the data (using the Hashing API or the MessageDigest API).
 * </ul>
 *
 * @author Kurt Alfred Kluever
 */
MessageDigestCreationBenchmark (/guava-tests/benchmark/com/google/common/hash/MessageDigestCreationBenchmark.java)/**
 * Benchmarks for comparing instance creation of {@link MessageDigest}s.
 *
 * @author Kurt Alfred Kluever
 */
BaseEncodingBenchmark (/guava-tests/benchmark/com/google/common/io/BaseEncodingBenchmark.java)/** Benchmark for {@code BaseEncoding} performance. */
ApacheBenchmark (/guava-tests/benchmark/com/google/common/math/ApacheBenchmark.java)/**
 * Benchmarks against the Apache Commons Math utilities.
 *
 * <p>Note: the Apache benchmarks are not open sourced to avoid the extra dependency.
 *
 * @author Louis Wasserman
 */
BigIntegerMathBenchmark (/guava-tests/benchmark/com/google/common/math/BigIntegerMathBenchmark.java)/**
 * Benchmarks for the non-rounding methods of {@code BigIntegerMath}.
 *
 * @author Louis Wasserman
 */
BigIntegerMathRoundingBenchmark (/guava-tests/benchmark/com/google/common/math/BigIntegerMathRoundingBenchmark.java)/**
 * Benchmarks for the rounding methods of {@code BigIntegerMath}.
 *
 * @author Louis Wasserman
 */
DoubleMathBenchmark (/guava-tests/benchmark/com/google/common/math/DoubleMathBenchmark.java)/**
 * Tests for the non-rounding methods of {@code DoubleMath}.
 *
 * @author Louis Wasserman
 */
DoubleMathRoundingBenchmark (/guava-tests/benchmark/com/google/common/math/DoubleMathRoundingBenchmark.java)/**
 * Benchmarks for the rounding methods of {@code DoubleMath}.
 *
 * @author Louis Wasserman
 */
IntMathBenchmark (/guava-tests/benchmark/com/google/common/math/IntMathBenchmark.java)/**
 * Benchmarks for the non-rounding methods of {@code IntMath}.
 *
 * @author Louis Wasserman
 */
IntMathRoundingBenchmark (/guava-tests/benchmark/com/google/common/math/IntMathRoundingBenchmark.java)/**
 * Benchmarks for the rounding methods of {@code IntMath}.
 *
 * @author Louis Wasserman
 */
LessThanBenchmark (/guava-tests/benchmark/com/google/common/math/LessThanBenchmark.java)/**
 * Benchmarks for various ways of writing the expression {@code foo + ((bar < baz) ? 1 : 0)}.
 *
 * @author Louis Wasserman
 */
LongMathBenchmark (/guava-tests/benchmark/com/google/common/math/LongMathBenchmark.java)/**
 * Benchmarks for the non-rounding methods of {@code LongMath}.
 *
 * @author Louis Wasserman
 */
LongMathRoundingBenchmark (/guava-tests/benchmark/com/google/common/math/LongMathRoundingBenchmark.java)/**
 * Benchmarks for the rounding methods of {@code LongMath}.
 *
 * @author Louis Wasserman
 */
QuantilesBenchmark (/guava-tests/benchmark/com/google/common/math/QuantilesBenchmark.java)/** Benchmarks some algorithms providing the same functionality as {@link Quantiles}. */
StatsBenchmark (/guava-tests/benchmark/com/google/common/math/StatsBenchmark.java)/**
 * Benchmarks for various algorithms for computing the mean and/or variance.
 *
 * @author Louis Wasserman
 */
UnsignedBytesBenchmark (/guava-tests/benchmark/com/google/common/primitives/UnsignedBytesBenchmark.java)/**
 * Microbenchmark for {@link UnsignedBytes}.
 *
 * @author Hiroshi Yamauchi
 */
UnsignedLongsBenchmark (/guava-tests/benchmark/com/google/common/primitives/UnsignedLongsBenchmark.java)/**
 * Benchmarks for certain methods of {@code UnsignedLongs}.
 *
 * @author Eamonn McManus
 */
AbstractFutureFootprintBenchmark (/guava-tests/benchmark/com/google/common/util/concurrent/AbstractFutureFootprintBenchmark.java)/** Measures the size of AbstractFuture implementations. */
CycleDetectingLockFactoryBenchmark (/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java)/**
 * Benchmarks for {@link CycleDetectingLockFactory}.
 *
 * @author Darick Tong
 */
ExecutionListBenchmark (/guava-tests/benchmark/com/google/common/util/concurrent/ExecutionListBenchmark.java)/** Benchmarks for {@link ExecutionList}. */
FuturesGetCheckedBenchmark (/guava-tests/benchmark/com/google/common/util/concurrent/FuturesGetCheckedBenchmark.java)/** Microbenchmark for {@link Futures#getChecked}. */
Itr (/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java)/** Iterator for MonitorBasedArrayBlockingQueue */
MonitorBasedArrayBlockingQueue (/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java)/**
 * A bounded {@linkplain BlockingQueue blocking queue} backed by an array. This queue orders
 * elements FIFO (first-in-first-out). The <em>head</em> of the queue is that element that has been
 * on the queue the longest time. The <em>tail</em> of the queue is that element that has been on
 * the queue the shortest time. New elements are inserted at the tail of the queue, and the queue
 * retrieval operations obtain elements at the head of the queue.
 *
 * <p>This is a classic &quot;bounded buffer&quot;, in which a fixed-sized array holds elements
 * inserted by producers and extracted by consumers. Once created, the capacity cannot be increased.
 * Attempts to <tt>put</tt> an element into a full queue will result in the operation blocking;
 * attempts to <tt>take</tt> an element from an empty queue will similarly block.
 *
 * <p>This class supports an optional fairness policy for ordering waiting producer and consumer
 * threads. By default, this ordering is not guaranteed. However, a queue constructed with fairness
 * set to <tt>true</tt> grants threads access in FIFO order. Fairness generally decreases throughput
 * but reduces variability and avoids starvation.
 *
 * <p>This class and its iterator implement all of the <em>optional</em> methods of the {@link
 * Collection} and {@link Iterator} interfaces.
 *
 * @author Doug Lea
 * @author Justin T. Sampson
 * @param <E> the type of elements held in this collection
 */
Itr (/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java)/** Snapshot iterator that works off copy of underlying q array. */
MonitorBasedPriorityBlockingQueue (/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java)/**
 * An unbounded {@linkplain BlockingQueue blocking queue} that uses the same ordering rules as class
 * {@link PriorityQueue} and supplies blocking retrieval operations. While this queue is logically
 * unbounded, attempted additions may fail due to resource exhaustion (causing
 * <tt>OutOfMemoryError</tt>). This class does not permit <tt>null</tt> elements. A priority queue
 * relying on {@linkplain Comparable natural ordering} also does not permit insertion of
 * non-comparable objects (doing so results in <tt>ClassCastException</tt>).
 *
 * <p>This class and its iterator implement all of the <em>optional</em> methods of the {@link
 * Collection} and {@link Iterator} interfaces. The Iterator provided in method {@link #iterator()}
 * is <em>not</em> guaranteed to traverse the elements of the MonitorBasedPriorityBlockingQueue in
 * any particular order. If you need ordered traversal, consider using
 * <tt>Arrays.sort(pq.toArray())</tt>. Also, method <tt>drainTo</tt> can be used to <em>remove</em>
 * some or all elements in priority order and place them in another collection.
 *
 * <p>Operations on this class make no guarantees about the ordering of elements with equal
 * priority. If you need to enforce an ordering, you can define custom classes or comparators that
 * use a secondary key to break ties in primary priority values. For example, here is a class that
 * applies first-in-first-out tie-breaking to comparable elements. To use it, you would insert a
 * <tt>new FIFOEntry(anEntry)</tt> instead of a plain entry object.
 *
 * <pre>
 * class FIFOEntry&lt;E extends Comparable&lt;? super E&gt;&gt;
 *     implements Comparable&lt;FIFOEntry&lt;E&gt;&gt; {
 *   final static AtomicLong seq = new AtomicLong();
 *   final long seqNum;
 *   final E entry;
 *   public FIFOEntry(E entry) {
 *     seqNum = seq.getAndIncrement();
 *     this.entry = entry;
 *   }
 *   public E getEntry() { return entry; }
 *   public int compareTo(FIFOEntry&lt;E&gt; other) {
 *     int res = entry.compareTo(other.entry);
 *     if (res == 0 &amp;&amp; other.entry != this.entry)
 *       res = (seqNum &lt; other.seqNum ? -1 : 1);
 *     return res;
 *   }
 * }</pre>
 *
 * @author Doug Lea
 * @author Justin T. Sampson
 * @param <E> the type of elements held in this collection
 */
MonitorBenchmark (/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBenchmark.java)/**
 * Benchmarks for {@link Monitor}.
 *
 * @author Justin T. Sampson
 */
MoreExecutorsDirectExecutorBenchmark (/guava-tests/benchmark/com/google/common/util/concurrent/MoreExecutorsDirectExecutorBenchmark.java)/**
 * A benchmark comparing the {@link MoreExecutors#newDirectExecutorService()} to {@link
 * MoreExecutors#directExecutor}.
 */
SingleThreadAbstractFutureBenchmark (/guava-tests/benchmark/com/google/common/util/concurrent/SingleThreadAbstractFutureBenchmark.java)/** A benchmark that times how long it takes to add a given number of */
StripedBenchmark (/guava-tests/benchmark/com/google/common/util/concurrent/StripedBenchmark.java)/** A benchmark comparing the various striped implementations. */
AbstractIteratorTest (/guava-tests/test/com/google/common/base/AbstractIteratorTest.java)/**
 * Unit test for {@code AbstractIterator}.
 *
 * @author Kevin Bourrillion
 */
AsciiTest (/guava-tests/test/com/google/common/base/AsciiTest.java)/**
 * Unit test for {@link Ascii}.
 *
 * @author Craig Berry
 */
BenchmarkHelpers (/guava-tests/test/com/google/common/base/BenchmarkHelpers.java)/**
 * Common benchmarking utilities.
 *
 * @author Christopher Swenson
 * @author Louis Wasserman
 */
CaseFormatTest (/guava-tests/test/com/google/common/base/CaseFormatTest.java)/**
 * Unit test for {@link CaseFormat}.
 *
 * @author Mike Bostock
 */
CharMatcherTest (/guava-tests/test/com/google/common/base/CharMatcherTest.java)/**
 * Unit test for {@link CharMatcher}.
 *
 * @author Kevin Bourrillion
 */
CharsetsTest (/guava-tests/test/com/google/common/base/CharsetsTest.java)/**
 * Unit test for {@link Charsets}.
 *
 * @author Mike Bostock
 */
ConverterTest (/guava-tests/test/com/google/common/base/ConverterTest.java)/** Unit tests for {@link Converter}. */
DefaultsTest (/guava-tests/test/com/google/common/base/DefaultsTest.java)/**
 * Unit test for {@link Defaults}.
 *
 * @author Jige Yu
 */
EnumsTest (/guava-tests/test/com/google/common/base/EnumsTest.java)/**
 * Tests for {@link Enums}.
 *
 * @author Steve McKay
 */
EquivalenceTest (/guava-tests/test/com/google/common/base/EquivalenceTest.java)/**
 * Unit test for {@link Equivalence}.
 *
 * @author Jige Yu
 */
FinalizableReferenceQueueTest (/guava-tests/test/com/google/common/base/FinalizableReferenceQueueTest.java)/**
 * Unit test for {@link FinalizableReferenceQueue}.
 *
 * @author Bob Lee
 */
FunctionsTest (/guava-tests/test/com/google/common/base/FunctionsTest.java)/**
 * Tests for {@link Functions}.
 *
 * @author Mike Bostock
 * @author Vlad Patryshev
 */
JoinerTest (/guava-tests/test/com/google/common/base/JoinerTest.java)/**
 * Unit test for {@link Joiner}.
 *
 * @author Kevin Bourrillion
 */
ObjectsTest (/guava-tests/test/com/google/common/base/ObjectsTest.java)/**
 * Tests for {@link Objects}.
 *
 * @author Laurence Gonsalves
 */
OptionalTest (/guava-tests/test/com/google/common/base/OptionalTest.java)/**
 * Unit test for {@link Optional}.
 *
 * @author Kurt Alfred Kluever
 */
PreconditionsTest (/guava-tests/test/com/google/common/base/PreconditionsTest.java)/**
 * Unit test for {@link Preconditions}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
IsOdd (/guava-tests/test/com/google/common/base/PredicatesTest.java)/** Instantiable predicate with reasonable hashCode() and equals() methods. */
PredicatesTest (/guava-tests/test/com/google/common/base/PredicatesTest.java)/**
 * Unit test for {@link Predicates}.
 *
 * @author Kevin Bourrillion
 */
SplitterTest (/guava-tests/test/com/google/common/base/SplitterTest.java)/** @author Julien Silland */
StandardSystemPropertyTest (/guava-tests/test/com/google/common/base/StandardSystemPropertyTest.java)/**
 * Tests for {@link StandardSystemProperty}.
 *
 * @author Kurt Alfred Kluever
 */
StopwatchTest (/guava-tests/test/com/google/common/base/StopwatchTest.java)/**
 * Unit test for {@link Stopwatch}.
 *
 * @author Kevin Bourrillion
 */
StringsTest (/guava-tests/test/com/google/common/base/StringsTest.java)/**
 * Unit test for {@link Strings}.
 *
 * @author Kevin Bourrillion
 */
SuppliersTest (/guava-tests/test/com/google/common/base/SuppliersTest.java)/**
 * Tests com.google.common.base.Suppliers.
 *
 * @author Laurence Gonsalves
 * @author Harry Heymann
 */
ThrowablesTest (/guava-tests/test/com/google/common/base/ThrowablesTest.java)/**
 * Unit test for {@link Throwables}.
 *
 * @author Kevin Bourrillion
 */
TestClass (/guava-tests/test/com/google/common/base/ToStringHelperTest.java)/** Test class for testing formatting of inner classes. */
ToStringHelperTest (/guava-tests/test/com/google/common/base/ToStringHelperTest.java)/**
 * Tests for {@link MoreObjects#toStringHelper(Object)}.
 *
 * @author Jason Lee
 */
Utf8Test (/guava-tests/test/com/google/common/base/Utf8Test.java)/**
 * Unit tests for {@link Utf8}.
 *
 * @author Jon Perlow
 * @author Martin Buchholz
 * @author Clément Roux
 */
VerifyTest (/guava-tests/test/com/google/common/base/VerifyTest.java)/** Unit test for {@link com.google.common.base.Verify}. */
AbstractCacheTest (/guava-tests/test/com/google/common/cache/AbstractCacheTest.java)/**
 * Unit test for {@link AbstractCache}.
 *
 * @author Charles Fry
 */
AbstractLoadingCacheTest (/guava-tests/test/com/google/common/cache/AbstractLoadingCacheTest.java)/**
 * Unit test for {@link AbstractLoadingCache}.
 *
 * @author Charles Fry
 */
CacheBuilderFactory (/guava-tests/test/com/google/common/cache/CacheBuilderFactory.java)/**
 * Helper class for creating {@link CacheBuilder} instances with all combinations of several sets of
 * parameters.
 *
 * @author mike nonemacher
 */
CacheBuilderGwtTest (/guava-tests/test/com/google/common/cache/CacheBuilderGwtTest.java)/**
 * Test suite for {@link CacheBuilder}. TODO(cpovirk): merge into CacheBuilderTest?
 *
 * @author Jon Donovan
 */
CacheBuilderSpecTest (/guava-tests/test/com/google/common/cache/CacheBuilderSpecTest.java)/**
 * Tests CacheBuilderSpec. TODO(user): tests of a few invalid input conditions, boundary
 * conditions.
 *
 * @author Adam Winer
 */
CacheBuilderTest (/guava-tests/test/com/google/common/cache/CacheBuilderTest.java)/** Unit tests for CacheBuilder. */
CacheEvictionTest (/guava-tests/test/com/google/common/cache/CacheEvictionTest.java)/**
 * Tests relating to cache eviction: what does and doesn't count toward maximumSize, what happens
 * when maximumSize is reached, etc.
 *
 * @author mike nonemacher
 */
CacheExpirationTest (/guava-tests/test/com/google/common/cache/CacheExpirationTest.java)/**
 * Tests relating to cache expiration: make sure entries expire at the right times, make sure
 * expired entries don't show up, etc.
 *
 * @author mike nonemacher
 */
CacheLoaderTest (/guava-tests/test/com/google/common/cache/CacheLoaderTest.java)/**
 * Unit tests for {@link CacheLoader}.
 *
 * @author Charles Fry
 */
CacheLoadingTest (/guava-tests/test/com/google/common/cache/CacheLoadingTest.java)/**
 * Tests relating to cache loading: concurrent loading, exceptions during loading, etc.
 *
 * @author mike nonemacher
 */
CacheManualTest (/guava-tests/test/com/google/common/cache/CacheManualTest.java)/** @author Charles Fry */
CacheReferencesTest (/guava-tests/test/com/google/common/cache/CacheReferencesTest.java)/**
 * Tests of basic {@link LoadingCache} operations with all possible combinations of key & value
 * strengths.
 *
 * @author mike nonemacher
 */
CacheRefreshTest (/guava-tests/test/com/google/common/cache/CacheRefreshTest.java)/**
 * Tests relating to automatic cache refreshing.
 *
 * @author Charles Fry
 */
CacheStatsTest (/guava-tests/test/com/google/common/cache/CacheStatsTest.java)/**
 * Unit test for {@link CacheStats}.
 *
 * @author Charles Fry
 */
CacheTesting (/guava-tests/test/com/google/common/cache/CacheTesting.java)/**
 * A collection of utilities for {@link Cache} testing.
 *
 * @author mike nonemacher
 */
OnlyGet (/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java)/** Make sure that all methods are forwarded. */
ForwardingCacheTest (/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java)/**
 * Unit test for {@link ForwardingCache}.
 *
 * @author Charles Fry
 */
OnlyGet (/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java)/** Make sure that all methods are forwarded. */
ForwardingLoadingCacheTest (/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java)/**
 * Unit test for {@link ForwardingLoadingCache}.
 *
 * @author Charles Fry
 */
LocalCacheMapComputeTest (/guava-tests/test/com/google/common/cache/LocalCacheMapComputeTest.java)/** Test Java8 map.compute in concurrent cache context. */
LocalCacheTest (/guava-tests/test/com/google/common/cache/LocalCacheTest.java)/** @author Charles Fry */
LocalLoadingCacheTest (/guava-tests/test/com/google/common/cache/LocalLoadingCacheTest.java)/** @author Charles Fry */
LongAdderTest (/guava-tests/test/com/google/common/cache/LongAdderTest.java)/** Unit tests for {@link LongAdder}. */
NullCacheTest (/guava-tests/test/com/google/common/cache/NullCacheTest.java)/**
 * {@link LoadingCache} tests for caches with a maximum size of zero.
 *
 * @author mike nonemacher
 */
RemovalNotificationTest (/guava-tests/test/com/google/common/cache/RemovalNotificationTest.java)/**
 * Unit tests of {@link RemovalNotification}.
 *
 * @author Ben Yu
 */
CountingLoader (/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java)/**
   * Returns a {@code new Object()} for every request, and increments a counter for every request.
   * The count is accessible via {@link #getCount}.
   */
IncrementingLoader (/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java)/**
   * Returns a {@code new Object()} for every request, and increments a counter for every request.
   * An {@code Integer} loader that returns the key for {@code load} requests, and increments the
   * old value on {@code reload} requests. The load counts are accessible via {@link #getLoadCount}
   * and {@link #getReloadCount}.
   */
TestingCacheLoaders (/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java)/**
 * Utility {@link CacheLoader} implementations intended for use in testing.
 *
 * @author mike nonemacher
 */
QueuingRemovalListener (/guava-tests/test/com/google/common/cache/TestingRemovalListeners.java)/** {@link RemovalListener} that adds all {@link RemovalNotification} objects to a queue. */
CountingRemovalListener (/guava-tests/test/com/google/common/cache/TestingRemovalListeners.java)/**
   * {@link RemovalListener} that counts each {@link RemovalNotification} it receives, and provides
   * access to the most-recently received one.
   */
NullRemovalListener (/guava-tests/test/com/google/common/cache/TestingRemovalListeners.java)/** No-op {@link RemovalListener}. */
TestingRemovalListeners (/guava-tests/test/com/google/common/cache/TestingRemovalListeners.java)/**
 * Utility {@link RemovalListener} implementations intended for use in testing.
 *
 * @author mike nonemacher
 */
TestingWeighers (/guava-tests/test/com/google/common/cache/TestingWeighers.java)/**
 * Utility {@link Weigher} implementations intended for use in testing.
 *
 * @author Charles Fry
 */
AbstractBiMapTest (/guava-tests/test/com/google/common/collect/AbstractBiMapTest.java)/**
 * Tests for {@code AbstractBiMap}.
 *
 * @author Mike Bostock
 */
AbstractImmutableSetTest (/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java)/**
 * Base class for {@link ImmutableSet} and {@link ImmutableSortedSet} tests.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
AbstractImmutableTableTest (/guava-tests/test/com/google/common/collect/AbstractImmutableTableTest.java)/**
 * Tests {@link ImmutableTable}
 *
 * @author Gregory Kick
 */
AbstractIteratorTest (/guava-tests/test/com/google/common/collect/AbstractIteratorTest.java)/**
 * Unit test for {@code AbstractIterator}.
 *
 * @author Kevin Bourrillion
 */
AbstractMapEntryTest (/guava-tests/test/com/google/common/collect/AbstractMapEntryTest.java)/**
 * Tests for {@code AbstractMapEntry}.
 *
 * @author Mike Bostock
 */
AbstractMultimapAsMapImplementsMapTest (/guava-tests/test/com/google/common/collect/AbstractMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for an arbitrary multimap with {@link MapInterfaceTest}.
 *
 * @author George van den Driessche
 * @author Jared Levy
 */
AbstractRangeSetTest (/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java)/**
 * Base class for {@link RangeSet} tests.
 *
 * @author Louis Wasserman
 */
AbstractSequentialIteratorTest (/guava-tests/test/com/google/common/collect/AbstractSequentialIteratorTest.java)/** Tests for {@link AbstractSequentialIterator}. */
AbstractTableReadTest (/guava-tests/test/com/google/common/collect/AbstractTableReadTest.java)/**
 * Test cases for {@link Table} read operations.
 *
 * @author Jared Levy
 */
AbstractTableTest (/guava-tests/test/com/google/common/collect/AbstractTableTest.java)/**
 * Test cases for a {@link Table} implementation supporting reads and writes.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
ArrayListMultimapTest (/guava-tests/test/com/google/common/collect/ArrayListMultimapTest.java)/**
 * Unit tests for {@code ArrayListMultimap}.
 *
 * @author Jared Levy
 */
ArrayTableTest (/guava-tests/test/com/google/common/collect/ArrayTableTest.java)/**
 * Test cases for {@link ArrayTable}.
 *
 * @author Jared Levy
 */
CollectionsImplEnum (/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java)/** So far, this is the best way to test various implementations of {@link Set} subclasses. */
BenchmarkHelpers (/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java)/**
 * Helper classes for various benchmarks.
 *
 * @author Christopher Swenson
 */
CollectionBenchmarkSampleData (/guava-tests/test/com/google/common/collect/CollectionBenchmarkSampleData.java)/**
 * Package up sample data for common collections benchmarking.
 *
 * @author Nicholaus Shupe
 */
Collections2Test (/guava-tests/test/com/google/common/collect/Collections2Test.java)/**
 * Tests for {@link Collections2}.
 *
 * @author Chris Povirk
 * @author Jared Levy
 */
CollectSpliteratorsTest (/guava-tests/test/com/google/common/collect/CollectSpliteratorsTest.java)/** Tests for {@code CollectSpliterators}. */
CompactHashMapTest (/guava-tests/test/com/google/common/collect/CompactHashMapTest.java)/**
 * Tests for {@code CompactHashMap}.
 *
 * @author Louis Wasserman
 */
CompactHashSetTest (/guava-tests/test/com/google/common/collect/CompactHashSetTest.java)/**
 * Tests for CompactHashSet.
 *
 * @author Dimitris Andreou
 */
CompactLinkedHashMapTest (/guava-tests/test/com/google/common/collect/CompactLinkedHashMapTest.java)/**
 * Tests for {@code CompactLinkedHashMap}.
 *
 * @author Louis Wasserman
 */
CompactLinkedHashSetTest (/guava-tests/test/com/google/common/collect/CompactLinkedHashSetTest.java)/**
 * Tests for CompactLinkedHashSet.
 *
 * @author Dimitris Andreou
 */
ComparatorsTest (/guava-tests/test/com/google/common/collect/ComparatorsTest.java)/**
 * Tests for {@code Comparators}.
 *
 * @author Louis Wasserman
 */
ComparisonChainTest (/guava-tests/test/com/google/common/collect/ComparisonChainTest.java)/**
 * Unit test for {@link ComparisonChain}.
 *
 * @author Kevin Bourrillion
 */
ConcurrentHashMultisetTest (/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java)/**
 * Test case for {@link ConcurrentHashMultiset}.
 *
 * @author Cliff L. Biffle
 * @author mike nonemacher
 */
ContiguousSetTest (/guava-tests/test/com/google/common/collect/ContiguousSetTest.java)/** @author Gregory Kick */
CountTest (/guava-tests/test/com/google/common/collect/CountTest.java)/**
 * Tests for {@code Count}.
 *
 * @author Louis Wasserman
 */
DiscreteDomainTest (/guava-tests/test/com/google/common/collect/DiscreteDomainTest.java)/**
 * Tests for {@link DiscreteDomain}.
 *
 * @author Chris Povirk
 */
EmptyImmutableTableTest (/guava-tests/test/com/google/common/collect/EmptyImmutableTableTest.java)/**
 * Tests {@link EmptyImmutableTable}
 *
 * @author Gregory Kick
 */
EnumBiMapTest (/guava-tests/test/com/google/common/collect/EnumBiMapTest.java)/**
 * Tests for {@code EnumBiMap}.
 *
 * @author Mike Bostock
 * @author Jared Levy
 */
EnumHashBiMapTest (/guava-tests/test/com/google/common/collect/EnumHashBiMapTest.java)/**
 * Tests for {@code EnumHashBiMap}.
 *
 * @author Mike Bostock
 */
EnumMultisetTest (/guava-tests/test/com/google/common/collect/EnumMultisetTest.java)/**
 * Tests for an {@link EnumMultiset}.
 *
 * @author Jared Levy
 */
EvictingQueueTest (/guava-tests/test/com/google/common/collect/EvictingQueueTest.java)/**
 * Tests for {@link EvictingQueue}.
 *
 * @author Kurt Alfred Kluever
 */
MethodSignature (/guava-tests/test/com/google/common/collect/FauxveridesTest.java)/**
   * Not really a signature -- just the parts that affect whether one method is a fauxveride of a
   * method from an ancestor class.
   *
   * <p>See JLS 8.4.2 for the definition of the related "override-equivalent."
   */
FauxveridesTest (/guava-tests/test/com/google/common/collect/FauxveridesTest.java)/**
 * Tests that all {@code public static} methods "inherited" from superclasses are "overridden" in
 * each immutable-collection class. This ensures, for example, that a call written "{@code
 * ImmutableSortedSet.copyOf()}" cannot secretly be a call to {@code ImmutableSet.copyOf()}.
 *
 * @author Chris Povirk
 */
FilteredCollectionsTest (/guava-tests/test/com/google/common/collect/FilteredCollectionsTest.java)/**
 * Tests for filtered collection views.
 *
 * @author Louis Wasserman
 */
FilteredMultimapTest (/guava-tests/test/com/google/common/collect/FilteredMultimapTest.java)/**
 * Unit tests for {@link Multimaps} filtering methods.
 *
 * @author Jared Levy
 */
FluentIterableTest (/guava-tests/test/com/google/common/collect/FluentIterableTest.java)/**
 * Unit test for {@link FluentIterable}.
 *
 * @author Marcin Mikosik
 */
ForMapMultimapAsMapImplementsMapTest (/guava-tests/test/com/google/common/collect/ForMapMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for a {@link Multimaps#forMap} multimap with {@link
 * MapInterfaceTest}.
 *
 * @author Jared Levy
 */
ForwardingCollectionTest (/guava-tests/test/com/google/common/collect/ForwardingCollectionTest.java)/**
 * Tests for {@link ForwardingCollection}.
 *
 * @author Robert Konigsberg
 * @author Hayward Chan
 * @author Louis Wasserman
 */
ForwardingConcurrentMapTest (/guava-tests/test/com/google/common/collect/ForwardingConcurrentMapTest.java)/**
 * Tests for {@link ForwardingConcurrentMap}.
 *
 * @author Jared Levy
 */
ForwardingDequeTest (/guava-tests/test/com/google/common/collect/ForwardingDequeTest.java)/**
 * Tests for {@code ForwardingDeque}.
 *
 * @author Kurt Alfred Kluever
 */
ForwardingListIteratorTest (/guava-tests/test/com/google/common/collect/ForwardingListIteratorTest.java)/**
 * Tests for {@code ForwardingListIterator}.
 *
 * @author Robert Konigsberg
 */
ForwardingListMultimapTest (/guava-tests/test/com/google/common/collect/ForwardingListMultimapTest.java)/**
 * Unit test for {@link ForwardingListMultimap}.
 *
 * @author Kurt Alfred Kluever
 */
ForwardingListTest (/guava-tests/test/com/google/common/collect/ForwardingListTest.java)/**
 * Tests for {@code ForwardingList}.
 *
 * @author Robert Konigsberg
 * @author Louis Wasserman
 */
ForwardingMapTest (/guava-tests/test/com/google/common/collect/ForwardingMapTest.java)/**
 * Unit test for {@link ForwardingMap}.
 *
 * @author Hayward Chan
 * @author Louis Wasserman
 */
ForwardingMultimapTest (/guava-tests/test/com/google/common/collect/ForwardingMultimapTest.java)/**
 * Unit test for {@link ForwardingMultimap}.
 *
 * @author Hayward Chan
 */
ForwardingMultisetTest (/guava-tests/test/com/google/common/collect/ForwardingMultisetTest.java)/**
 * Tests for {@link ForwardingMultiset}.
 *
 * @author Hayward Chan
 * @author Louis Wasserman
 */
ForwardingNavigableMapTest (/guava-tests/test/com/google/common/collect/ForwardingNavigableMapTest.java)/**
 * Tests for {@code ForwardingNavigableMap}.
 *
 * @author Robert Konigsberg
 * @author Louis Wasserman
 */
ForwardingNavigableSetTest (/guava-tests/test/com/google/common/collect/ForwardingNavigableSetTest.java)/**
 * Tests for {@code ForwardingNavigableSet}.
 *
 * @author Louis Wasserman
 */
ForwardingObjectTest (/guava-tests/test/com/google/common/collect/ForwardingObjectTest.java)/**
 * Tests for {@code ForwardingObject}.
 *
 * @author Mike Bostock
 */
ForwardingQueueTest (/guava-tests/test/com/google/common/collect/ForwardingQueueTest.java)/**
 * Tests for {@code ForwardingQueue}.
 *
 * @author Robert Konigsberg
 * @author Louis Wasserman
 */
ForwardingSetMultimapTest (/guava-tests/test/com/google/common/collect/ForwardingSetMultimapTest.java)/**
 * Unit test for {@link ForwardingSetMultimap}.
 *
 * @author Kurt Alfred Kluever
 */
ForwardingSetTest (/guava-tests/test/com/google/common/collect/ForwardingSetTest.java)/**
 * Tests for {@code ForwardingSet}.
 *
 * @author Robert Konigsberg
 * @author Louis Wasserman
 */
ForwardingSortedMapImplementsMapTest (/guava-tests/test/com/google/common/collect/ForwardingSortedMapImplementsMapTest.java)/**
 * Tests for {@link ForwardingSortedMap} using {@link MapInterfaceTest}.
 *
 * @author George van den Driessche
 */
ForwardingSortedMapTest (/guava-tests/test/com/google/common/collect/ForwardingSortedMapTest.java)/**
 * Tests for {@code ForwardingSortedMap}.
 *
 * @author Robert KonigsbergSortedMapFeature
 */
ForwardingSortedMultisetTest (/guava-tests/test/com/google/common/collect/ForwardingSortedMultisetTest.java)/**
 * Tests for {@link ForwardingSortedMultiset}.
 *
 * @author Louis Wasserman
 */
ForwardingSortedSetMultimapTest (/guava-tests/test/com/google/common/collect/ForwardingSortedSetMultimapTest.java)/**
 * Unit test for {@link ForwardingSortedSetMultimap}.
 *
 * @author Kurt Alfred Kluever
 */
ForwardingSortedSetTest (/guava-tests/test/com/google/common/collect/ForwardingSortedSetTest.java)/**
 * Tests for {@code ForwardingSortedSet}.
 *
 * @author Louis Wasserman
 */
ForwardingTableTest (/guava-tests/test/com/google/common/collect/ForwardingTableTest.java)/**
 * Tests {@link ForwardingTable}.
 *
 * @author Gregory Kick
 */
GeneralRangeTest (/guava-tests/test/com/google/common/collect/GeneralRangeTest.java)/**
 * Tests for {@code GeneralRange}.
 *
 * @author Louis Wasserman
 */
HashBasedTableTest (/guava-tests/test/com/google/common/collect/HashBasedTableTest.java)/**
 * Test cases for {@link HashBasedTable}.
 *
 * @author Jared Levy
 */
HashBiMapTest (/guava-tests/test/com/google/common/collect/HashBiMapTest.java)/**
 * Tests for {@link HashBiMap}.
 *
 * @author Mike Bostock
 */
HashingTest (/guava-tests/test/com/google/common/collect/HashingTest.java)/** Tests for {@code Hashing}. */
HashMultimapTest (/guava-tests/test/com/google/common/collect/HashMultimapTest.java)/**
 * Unit tests for {@link HashMultimap}.
 *
 * @author Jared Levy
 */
HashMultisetTest (/guava-tests/test/com/google/common/collect/HashMultisetTest.java)/**
 * Unit test for {@link HashMultiset}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
CountsHashCodeAndEquals (/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java)/**
   * A Comparable wrapper around a String which executes callbacks on calls to hashCode, equals, and
   * compareTo.
   */
CallsCounter (/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java)/** A holder of counters for calls to hashCode, equals, and compareTo. */
ImmutableBiMapTest (/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java)/**
 * Tests for {@link ImmutableBiMap}.
 *
 * @author Jared Levy
 */
ImmutableClassToInstanceMapTest (/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java)/**
 * Unit test for {@link ImmutableClassToInstanceMap}.
 *
 * @author Kevin Bourrillion
 */
ImmutableCollectionTest (/guava-tests/test/com/google/common/collect/ImmutableCollectionTest.java)/**
 * Tests for {@code ImmutableCollection}.
 *
 * @author Louis Wasserman
 */
ImmutableEnumMapTest (/guava-tests/test/com/google/common/collect/ImmutableEnumMapTest.java)/**
 * Tests for {@code ImmutableEnumMap}.
 *
 * @author Louis Wasserman
 */
ImmutableListMultimapTest (/guava-tests/test/com/google/common/collect/ImmutableListMultimapTest.java)/**
 * Tests for {@link ImmutableListMultimap}.
 *
 * @author Jared Levy
 */
ListFrobber (/guava-tests/test/com/google/common/collect/ImmutableListTest.java)/** An operation to perform on a list. */
ConcurrentlyMutatedList (/guava-tests/test/com/google/common/collect/ImmutableListTest.java)/** A list that mutates itself after every call to each of its {@link List} methods. */
ImmutableListTest (/guava-tests/test/com/google/common/collect/ImmutableListTest.java)/**
 * Unit test for {@link ImmutableList}.
 *
 * @author Kevin Bourrillion
 * @author George van den Driessche
 * @author Jared Levy
 */
CountsHashCodeAndEquals (/guava-tests/test/com/google/common/collect/ImmutableMapTest.java)/**
   * A Comparable wrapper around a String which executes callbacks on calls to hashCode, equals, and
   * compareTo.
   */
CallsCounter (/guava-tests/test/com/google/common/collect/ImmutableMapTest.java)/** A holder of counters for calls to hashCode, equals, and compareTo. */
ImmutableMapTest (/guava-tests/test/com/google/common/collect/ImmutableMapTest.java)/**
 * Tests for {@link ImmutableMap}.
 *
 * @author Kevin Bourrillion
 * @author Jesse Wilson
 */
ImmutableMultimapAsMapImplementsMapTest (/guava-tests/test/com/google/common/collect/ImmutableMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for an {@link ImmutableMultimap} with {@link MapInterfaceTest}.
 *
 * @author Jared Levy
 */
ImmutableMultimapTest (/guava-tests/test/com/google/common/collect/ImmutableMultimapTest.java)/**
 * Tests for {@link ImmutableMultimap}.
 *
 * @author Jared Levy
 */
CountsHashCodeAndEquals (/guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java)/**
   * A Comparable wrapper around a String which executes callbacks on calls to hashCode, equals, and
   * compareTo.
   */
CallsCounter (/guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java)/** A holder of counters for calls to hashCode, equals, and compareTo. */
ImmutableMultisetTest (/guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java)/**
 * Tests for {@link ImmutableMultiset}.
 *
 * @author Jared Levy
 */
ImmutableRangeMapTest (/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java)/**
 * Tests for {@code ImmutableRangeMap}.
 *
 * @author Louis Wasserman
 */
ImmutableRangeSetTest (/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java)/**
 * Tests for {@link ImmutableRangeSet}.
 *
 * @author Louis Wasserman
 */
ImmutableSetMultimapAsMapImplementsMapTest (/guava-tests/test/com/google/common/collect/ImmutableSetMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for an {@link ImmutableSetMultimap} with {@link MapInterfaceTest}.
 *
 * @author Mike Ward
 */
ImmutableSetMultimapTest (/guava-tests/test/com/google/common/collect/ImmutableSetMultimapTest.java)/**
 * Tests for {@link ImmutableSetMultimap}.
 *
 * @author Mike Ward
 */
CountsHashCodeAndEquals (/guava-tests/test/com/google/common/collect/ImmutableSetTest.java)/**
   * A Comparable wrapper around a String which executes callbacks on calls to hashCode, equals, and
   * compareTo.
   */
CallsCounter (/guava-tests/test/com/google/common/collect/ImmutableSetTest.java)/** A holder of counters for calls to hashCode, equals, and compareTo. */
ImmutableSetTest (/guava-tests/test/com/google/common/collect/ImmutableSetTest.java)/**
 * Unit test for {@link ImmutableSet}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 * @author Nick Kralevich
 */
ImmutableSortedMapTest (/guava-tests/test/com/google/common/collect/ImmutableSortedMapTest.java)/**
 * Tests for {@link ImmutableSortedMap}.
 *
 * @author Kevin Bourrillion
 * @author Jesse Wilson
 * @author Jared Levy
 */
ImmutableSortedMultisetTest (/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java)/**
 * Tests for {@link ImmutableSortedMultiset}.
 *
 * @author Louis Wasserman
 */
ImmutableSortedSetTest (/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java)/**
 * Unit tests for {@link ImmutableSortedSet}.
 *
 * @author Jared Levy
 */
ImmutableTableTest (/guava-tests/test/com/google/common/collect/ImmutableTableTest.java)/**
 * Tests common methods in {@link ImmutableTable}
 *
 * @author Gregory Kick
 */
InternersTest (/guava-tests/test/com/google/common/collect/InternersTest.java)/**
 * Unit test for {@link Interners}.
 *
 * @author Kevin Bourrillion
 */
DiesOnIteratorArrayList (/guava-tests/test/com/google/common/collect/IterablesTest.java)/**
   * {@link ArrayList} extension that forbids the use of {@link Collection#iterator} for tests that
   * need to prove that it isn't called.
   */
IterablesTest (/guava-tests/test/com/google/common/collect/IterablesTest.java)/**
 * Unit test for {@code Iterables}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
PickyIterable (/guava-tests/test/com/google/common/collect/IteratorsTest.java)/** An Iterable whose Iterator is rigorous in checking for concurrent modification. */
IteratorsTest (/guava-tests/test/com/google/common/collect/IteratorsTest.java)/**
 * Unit test for {@code Iterators}.
 *
 * @author Kevin Bourrillion
 */
LegacyComparable (/guava-tests/test/com/google/common/collect/LegacyComparable.java)/**
 * A class that implements {@code Comparable} without generics, such as those found in libraries
 * that support Java 1.4 and before. Our library needs to do the bare minimum to accommodate such
 * types, though their use may still require an explicit type parameter and/or warning suppression.
 *
 * @author Kevin Bourrillion
 */
LinkedHashMultimapTest (/guava-tests/test/com/google/common/collect/LinkedHashMultimapTest.java)/**
 * Unit tests for {@code LinkedHashMultimap}.
 *
 * @author Jared Levy
 */
LinkedHashMultisetTest (/guava-tests/test/com/google/common/collect/LinkedHashMultisetTest.java)/**
 * Unit test for {@link LinkedHashMultiset}.
 *
 * @author Kevin Bourrillion
 */
LinkedListMultimapTest (/guava-tests/test/com/google/common/collect/LinkedListMultimapTest.java)/**
 * Tests for {@code LinkedListMultimap}.
 *
 * @author Mike Bostock
 */
ListExample (/guava-tests/test/com/google/common/collect/ListsImplTest.java)/** Handles the creation of lists needed for the tests */
ListsImplTest (/guava-tests/test/com/google/common/collect/ListsImplTest.java)/** Tests the package level *impl methods directly using various types of lists. */
ListsTest (/guava-tests/test/com/google/common/collect/ListsTest.java)/**
 * Unit test for {@code Lists}.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Jared Levy
 */
MapMakerInternalMapTest (/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java)/** @author Charles Fry */
MakerTest (/guava-tests/test/com/google/common/collect/MapMakerTest.java)/** Tests for the builder. */
MapMakerTest (/guava-tests/test/com/google/common/collect/MapMakerTest.java)/** @author Charles Fry */
MapsCollectionTest (/guava-tests/test/com/google/common/collect/MapsCollectionTest.java)/**
 * Test suites for wrappers in {@code Maps}.
 *
 * @author Louis Wasserman
 */
MapsSortedTransformValuesTest (/guava-tests/test/com/google/common/collect/MapsSortedTransformValuesTest.java)/**
 * Tests for {@link Maps#transformValues(SortedMap, Function)}.
 *
 * @author Louis Wasserman
 */
MapsTest (/guava-tests/test/com/google/common/collect/MapsTest.java)/**
 * Unit test for {@code Maps}.
 *
 * @author Kevin Bourrillion
 * @author Mike Bostock
 * @author Jared Levy
 */
MapsTransformValuesTest (/guava-tests/test/com/google/common/collect/MapsTransformValuesTest.java)/**
 * Tests for {@link Maps#transformValues}.
 *
 * @author Isaac Shum
 */
MapsTransformValuesUnmodifiableIteratorTest (/guava-tests/test/com/google/common/collect/MapsTransformValuesUnmodifiableIteratorTest.java)/**
 * Tests for {@link Maps#transformValues} when the backing map's views have iterators that don't
 * support {@code remove()}.
 *
 * @author Jared Levy
 */
MinMaxPriorityQueueTest (/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java)/**
 * Unit test for {@link MinMaxPriorityQueue}.
 *
 * @author Alexei Stolboushkin
 * @author Sverre Sundsdal
 */
MoreCollectorsTest (/guava-tests/test/com/google/common/collect/MoreCollectorsTest.java)/**
 * Tests for {@code MoreCollectors}.
 *
 * @author Louis Wasserman
 */
MultimapBuilderTest (/guava-tests/test/com/google/common/collect/MultimapBuilderTest.java)/**
 * Tests for {@link MultimapBuilder}.
 *
 * @author Louis Wasserman
 */
PopulatableMapAsMultimap (/guava-tests/test/com/google/common/collect/MultimapsCollectionTest.java)/**
   * Implements {@code Multimap.put()} -- and no other methods -- for a {@code Map} by ignoring all
   * but the latest value for each key. This class exists only so that we can use {@link
   * MultimapsCollectionTest#populateMultimapForGet(Multimap, String[])} and similar methods to
   * populate a map to be passed to {@link Multimaps#forMap(Map)}. All tests should run against the
   * result of {@link #build()}.
   */
MultimapsCollectionTest (/guava-tests/test/com/google/common/collect/MultimapsCollectionTest.java)/**
 * Run collection tests on wrappers from {@link Multimaps}.
 *
 * @author Jared Levy
 */
MultimapsFilterEntriesAsMapTest (/guava-tests/test/com/google/common/collect/MultimapsFilterEntriesAsMapTest.java)/**
 * Tests for Multimaps.filterEntries().asMap().
 *
 * @author Jared Levy
 */
MultimapsTest (/guava-tests/test/com/google/common/collect/MultimapsTest.java)/**
 * Unit test for {@code Multimaps}.
 *
 * @author Jared Levy
 */
MultimapsTransformValuesAsMapTest (/guava-tests/test/com/google/common/collect/MultimapsTransformValuesAsMapTest.java)/**
 * Tests for Multimaps.transformValues().asMap().
 *
 * @author Louis Wasserman
 */
MultisetsCollectionTest (/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java)/**
 * Collection tests on wrappers from {@link Multisets}.
 *
 * @author Jared Levy
 */
MultisetsImmutableEntryTest (/guava-tests/test/com/google/common/collect/MultisetsImmutableEntryTest.java)/**
 * Tests for {@link Multisets#immutableEntry}.
 *
 * @author Mike Bostock
 */
MultisetsTest (/guava-tests/test/com/google/common/collect/MultisetsTest.java)/**
 * Tests for {@link Multisets}.
 *
 * @author Mike Bostock
 * @author Jared Levy
 * @author Louis Wasserman
 */
MutableClassToInstanceMapTest (/guava-tests/test/com/google/common/collect/MutableClassToInstanceMapTest.java)/**
 * Unit test of {@link MutableClassToInstanceMap}.
 *
 * @author Kevin Bourrillion
 */
NewCustomTableTest (/guava-tests/test/com/google/common/collect/NewCustomTableTest.java)/**
 * Test cases for {@link Tables#newCustomTable}.
 *
 * @author Jared Levy
 */
ObjectArraysTest (/guava-tests/test/com/google/common/collect/ObjectArraysTest.java)/**
 * Unit test for {@code ObjectArrays}.
 *
 * @author Kevin Bourrillion
 */
Scenario (/guava-tests/test/com/google/common/collect/OrderingTest.java)/**
   * An aggregation of an ordering with a list (of size > 1) that should prove to be in strictly
   * increasing order according to that ordering.
   */
Composite (/guava-tests/test/com/google/common/collect/OrderingTest.java)/**
   * A dummy object we create so that we can have something meaningful to have a compound ordering
   * over.
   */
OrderingTest (/guava-tests/test/com/google/common/collect/OrderingTest.java)/**
 * Unit tests for {@code Ordering}.
 *
 * @author Jesse Wilson
 */
PeekingIteratorTester (/guava-tests/test/com/google/common/collect/PeekingIteratorTest.java)/**
   * Version of {@link IteratorTester} that compares an iterator over a given collection of elements
   * (used as the reference iterator) against a {@code PeekingIterator} that *wraps* such an
   * iterator (used as the target iterator).
   *
   * <p>This IteratorTester makes copies of the master so that it can later verify that {@link
   * PeekingIterator#remove()} removes the same elements as the reference's iterator {@code
   * #remove()}.
   */
ThrowsAtEndIterator (/guava-tests/test/com/google/common/collect/PeekingIteratorTest.java)/**
   * This Iterator claims to have more elements than the underlying iterable, but when you try to
   * fetch the extra elements, it throws an unchecked exception.
   */
PeekingIteratorTest (/guava-tests/test/com/google/common/collect/PeekingIteratorTest.java)/**
 * Unit test for {@link PeekingIterator}.
 *
 * @author Mick Killianey
 */
RangeNonGwtTest (/guava-tests/test/com/google/common/collect/RangeNonGwtTest.java)/**
 * Test cases for {@link Range} which cannot run as GWT tests.
 *
 * @author Gregory Kick
 * @see RangeTest
 */
RangeTest (/guava-tests/test/com/google/common/collect/RangeTest.java)/**
 * Unit test for {@link Range}.
 *
 * @author Kevin Bourrillion
 */
RegularImmutableAsListTest (/guava-tests/test/com/google/common/collect/RegularImmutableAsListTest.java)/**
 * Tests for {@link RegularImmutableAsList}.
 *
 * @author Louis Wasserman
 */
RegularImmutableTableTest (/guava-tests/test/com/google/common/collect/RegularImmutableTableTest.java)/** @author Gregory Kick */
SetOperationsTest (/guava-tests/test/com/google/common/collect/SetOperationsTest.java)/**
 * Unit tests for {@link Sets#union}, {@link Sets#intersection} and {@link Sets#difference}.
 *
 * @author Kevin Bourrillion
 */
Base (/guava-tests/test/com/google/common/collect/SetsTest.java)/** Simple base class to verify that we handle generics correctly. */
Derived (/guava-tests/test/com/google/common/collect/SetsTest.java)/** Simple derived class to verify that we handle generics correctly. */
SetsTest (/guava-tests/test/com/google/common/collect/SetsTest.java)/**
 * Unit test for {@code Sets}.
 *
 * @author Kevin Bourrillion
 * @author Jared Levy
 */
SimpleAbstractMultisetTest (/guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java)/**
 * Unit test for {@link AbstractMultiset}.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
SingletonImmutableTableTest (/guava-tests/test/com/google/common/collect/SingletonImmutableTableTest.java)/**
 * Tests {@link SingletonImmutableTable}.
 *
 * @author Gregory Kick
 */
SortedIterablesTest (/guava-tests/test/com/google/common/collect/SortedIterablesTest.java)/**
 * Unit tests for {@code SortedIterables}.
 *
 * @author Louis Wasserman
 */
SortedListsTest (/guava-tests/test/com/google/common/collect/SortedListsTest.java)/**
 * Tests for SortedLists.
 *
 * @author Louis Wasserman
 */
SpecialRandom (/guava-tests/test/com/google/common/collect/SpecialRandom.java)/**
 * Utility class for being able to seed a {@link Random} value with a passed in seed from a
 * benchmark parameter.
 *
 * <p>TODO: Remove this class once Caliper has a better way.
 *
 * @author Nicholaus Shupe
 */
StreamsTest (/guava-tests/test/com/google/common/collect/StreamsTest.java)/** Unit test for {@link Streams}. */
SubMapMultimapAsMapImplementsMapTest (/guava-tests/test/com/google/common/collect/SubMapMultimapAsMapImplementsMapTest.java)/**
 * Test {@code TreeMultimap.asMap().subMap()} with {@link MapInterfaceTest}.
 *
 * @author Jared Levy
 */
SynchronizedBiMapTest (/guava-tests/test/com/google/common/collect/SynchronizedBiMapTest.java)/**
 * Tests for {@code Synchronized#biMap}.
 *
 * @author Mike Bostock
 */
SynchronizedDequeTest (/guava-tests/test/com/google/common/collect/SynchronizedDequeTest.java)/**
 * Tests for {@link Synchronized#deque} and {@link Queues#synchronizedDeque}.
 *
 * @author Kurt Alfred Kluever
 */
SynchronizedMapTest (/guava-tests/test/com/google/common/collect/SynchronizedMapTest.java)/**
 * Tests for {@code Synchronized#map}.
 *
 * @author Mike Bostock
 */
SynchronizedMultimapTest (/guava-tests/test/com/google/common/collect/SynchronizedMultimapTest.java)/**
 * Tests for {@code Synchronized#multimap}.
 *
 * @author Mike Bostock
 */
SynchronizedNavigableMapTest (/guava-tests/test/com/google/common/collect/SynchronizedNavigableMapTest.java)/**
 * Tests for {@link Maps#synchronizedNavigableMap(NavigableMap)}.
 *
 * @author Louis Wasserman
 */
SynchronizedNavigableSetTest (/guava-tests/test/com/google/common/collect/SynchronizedNavigableSetTest.java)/**
 * Tests for {@link Sets#synchronizedNavigableSet(NavigableSet)}.
 *
 * @author Louis Wasserman
 */
SynchronizedQueueTest (/guava-tests/test/com/google/common/collect/SynchronizedQueueTest.java)/**
 * Tests for {@link Synchronized#queue} and {@link Queues#synchronizedQueue}.
 *
 * @author Kurt Alfred Kluever
 */
SynchronizedSetTest (/guava-tests/test/com/google/common/collect/SynchronizedSetTest.java)/**
 * Tests for {@code Synchronized#set}.
 *
 * @author Mike Bostock
 */
TableCollectionTest (/guava-tests/test/com/google/common/collect/TableCollectionTest.java)/**
 * Collection tests for {@link Table} implementations.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
TablesTest (/guava-tests/test/com/google/common/collect/TablesTest.java)/**
 * Tests for {@link Tables}.
 *
 * @author Jared Levy
 */
TablesTransformValuesTest (/guava-tests/test/com/google/common/collect/TablesTransformValuesTest.java)/**
 * Test cases for {@link Tables#transformValues}.
 *
 * @author Jared Levy
 */
TopKSelectorTest (/guava-tests/test/com/google/common/collect/TopKSelectorTest.java)/**
 * Tests for {@code TopKSelector}.
 *
 * @author Louis Wasserman
 */
TransposedTableTest (/guava-tests/test/com/google/common/collect/TransposedTableTest.java)/**
 * Test cases for {@link Tables#transpose}.
 *
 * @author Jared Levy
 */
TreeBasedTableTest (/guava-tests/test/com/google/common/collect/TreeBasedTableTest.java)/**
 * Test cases for {@link TreeBasedTable}.
 *
 * @author Jared Levy
 * @author Louis Wasserman
 */
TreeMultimapExplicitTest (/guava-tests/test/com/google/common/collect/TreeMultimapExplicitTest.java)/**
 * Unit tests for {@code TreeMultimap} with explicit comparators.
 *
 * @author Jared Levy
 */
TreeMultimapNaturalTest (/guava-tests/test/com/google/common/collect/TreeMultimapNaturalTest.java)/**
 * Unit tests for {@code TreeMultimap} with natural ordering.
 *
 * @author Jared Levy
 */
TreeMultisetTest (/guava-tests/test/com/google/common/collect/TreeMultisetTest.java)/**
 * Unit test for {@link TreeMultiset}.
 *
 * @author Neal Kanodia
 */
TreeRangeMapTest (/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java)/**
 * Tests for {@code TreeRangeMap}.
 *
 * @author Louis Wasserman
 */
TreeRangeSetTest (/guava-tests/test/com/google/common/collect/TreeRangeSetTest.java)/**
 * Tests for {@link TreeRangeSet}.
 *
 * @author Louis Wasserman
 * @author Chris Povirk
 */
TreeTraverserTest (/guava-tests/test/com/google/common/collect/TreeTraverserTest.java)/**
 * Tests for {@code TreeTraverser}.
 *
 * @author Louis Wasserman
 */
UnmodifiableIteratorTest (/guava-tests/test/com/google/common/collect/UnmodifiableIteratorTest.java)/**
 * Tests for {@link UnmodifiableIterator}.
 *
 * @author Jared Levy
 */
UnmodifiableListIteratorTest (/guava-tests/test/com/google/common/collect/UnmodifiableListIteratorTest.java)/**
 * Tests for UnmodifiableListIterator.
 *
 * @author Louis Wasserman
 */
UnmodifiableMultimapAsMapImplementsMapTest (/guava-tests/test/com/google/common/collect/UnmodifiableMultimapAsMapImplementsMapTest.java)/**
 * Test {@link Multimap#asMap()} for an unmodifiable multimap with {@link MapInterfaceTest}.
 *
 * @author Jared Levy
 */
ArrayBasedCharEscaperTest (/guava-tests/test/com/google/common/escape/ArrayBasedCharEscaperTest.java)/** @author David Beaumont */
ArrayBasedEscaperMapTest (/guava-tests/test/com/google/common/escape/ArrayBasedEscaperMapTest.java)/** @author David Beaumont */
ArrayBasedUnicodeEscaperTest (/guava-tests/test/com/google/common/escape/ArrayBasedUnicodeEscaperTest.java)/** @author David Beaumont */
EscapersTest (/guava-tests/test/com/google/common/escape/EscapersTest.java)/** @author David Beaumont */
UnicodeEscaperTest (/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java)/**
 * Tests for {@link UnicodeEscaper}.
 *
 * @author David Beaumont
 */
FakeExecutor (/guava-tests/test/com/google/common/eventbus/AsyncEventBusTest.java)/**
   * An {@link Executor} wanna-be that simply records the tasks it's given. Arguably the Worst
   * Executor Ever.
   *
   * @author cbiffle
   */
AsyncEventBusTest (/guava-tests/test/com/google/common/eventbus/AsyncEventBusTest.java)/**
 * Test case for {@link AsyncEventBus}.
 *
 * @author Cliff Biffle
 */
RecordingSubscriberExceptionHandler (/guava-tests/test/com/google/common/eventbus/EventBusTest.java)/** Records thrown exception information. */
Registrator (/guava-tests/test/com/google/common/eventbus/EventBusTest.java)/** Runnable which registers a StringCatcher on an event bus and adds it to a list. */
GhostCatcher (/guava-tests/test/com/google/common/eventbus/EventBusTest.java)/**
   * A collector for DeadEvents.
   *
   * @author cbiffle
   */
EventBusTest (/guava-tests/test/com/google/common/eventbus/EventBusTest.java)/**
 * Test case for {@link EventBus}.
 *
 * @author Cliff Biffle
 */
AnnotatedSubscriberFinderTests (/guava-tests/test/com/google/common/eventbus/outside/AnnotatedSubscriberFinderTests.java)/**
 * Test that EventBus finds the correct subscribers.
 *
 * <p>This test must be outside the c.g.c.eventbus package to test correctly.
 *
 * @author Louis Wasserman
 */
OutsideEventBusTest (/guava-tests/test/com/google/common/eventbus/outside/OutsideEventBusTest.java)/**
 * Test cases for {@code EventBus} that must not be in the same package.
 *
 * @author Louis Wasserman
 */
ReentrantEventsTest (/guava-tests/test/com/google/common/eventbus/ReentrantEventsTest.java)/**
 * Validate that {@link EventBus} behaves carefully when listeners publish their own events.
 *
 * @author Jesse Wilson
 */
StringCatcher (/guava-tests/test/com/google/common/eventbus/StringCatcher.java)/**
 * A simple EventSubscriber mock that records Strings.
 *
 * <p>For testing fun, also includes a landmine method that EventBus tests are required <em>not</em>
 * to call ({@link #methodWithoutAnnotation(String)}).
 *
 * @author Cliff Biffle
 */
SubscriberRegistryTest (/guava-tests/test/com/google/common/eventbus/SubscriberRegistryTest.java)/**
 * Tests for {@link SubscriberRegistry}.
 *
 * @author Colin Decker
 */
IntentionalException (/guava-tests/test/com/google/common/eventbus/SubscriberTest.java)/** Local exception subclass to check variety of exception thrown. */
JudgmentError (/guava-tests/test/com/google/common/eventbus/SubscriberTest.java)/** Local Error subclass to check variety of error thrown. */
SubscriberTest (/guava-tests/test/com/google/common/eventbus/SubscriberTest.java)/**
 * Tests for {@link Subscriber}.
 *
 * @author Cliff Biffle
 * @author Colin Decker
 */
AbstractDirectedGraphTest (/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java)/**
 * Abstract base class for testing implementations of {@link Graph} interface.
 *
 * <p>This class is responsible for testing that a directed implementation of {@link Graph} is
 * correctly handling directed edges. Implementation-dependent test cases are left to subclasses.
 * Test cases that do not require the graph to be directed are found in superclasses.
 */
AbstractDirectedNetworkTest (/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java)/**
 * Abstract base class for testing implementations of {@link Network} interface.
 *
 * <p>This class is responsible for testing that a directed implementation of {@link Network} is
 * correctly handling directed edges. Implementation-dependent test cases are left to subclasses.
 * Test cases that do not require the graph to be directed are found in superclasses.
 */
AbstractGraphTest (/guava-tests/test/com/google/common/graph/AbstractGraphTest.java)/**
 * Abstract base class for testing implementations of {@link Graph} interface. Graph instances
 * created for testing should have Integer node and String edge objects.
 *
 * <p>Test cases that should be handled similarly in any graph implementation are included in this
 * class. For example, testing that {@code nodes()} method returns the set of the nodes in the
 * graph. The following test cases are left for the subclasses to handle:
 *
 * <ul>
 *   <li>Test cases related to whether the graph is directed, undirected, mutable, or immutable.
 *   <li>Test cases related to the specific implementation of the {@link Graph} interface.
 * </ul>
 *
 * TODO(user): Make this class generic (using <N, E>) for all node and edge types.
 * TODO(user): Differentiate between directed and undirected edge strings.
 */
AbstractNetworkTest (/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java)/**
 * Abstract base class for testing implementations of {@link Network} interface. Network instances
 * created for testing should have Integer node and String edge objects.
 *
 * <p>Test cases that should be handled similarly in any graph implementation are included in this
 * class. For example, testing that {@code nodes()} method returns the set of the nodes in the
 * graph. The following test cases are left for the subclasses to handle:
 *
 * <ul>
 *   <li>Test cases related to whether the graph is directed, undirected, mutable, or immutable.
 *   <li>Test cases related to the specific implementation of the {@link Network} interface.
 * </ul>
 *
 * TODO(user): Make this class generic (using <N, E>) for all node and edge types.
 * TODO(user): Differentiate between directed and undirected edge strings.
 */
AbstractUndirectedGraphTest (/guava-tests/test/com/google/common/graph/AbstractUndirectedGraphTest.java)/**
 * Abstract base class for testing undirected implementations of the {@link Graph} interface.
 *
 * <p>This class is responsible for testing that an undirected implementation of {@link Graph} is
 * correctly handling undirected edges. Implementation-dependent test cases are left to subclasses.
 * Test cases that do not require the graph to be undirected are found in superclasses.
 */
AbstractUndirectedNetworkTest (/guava-tests/test/com/google/common/graph/AbstractUndirectedNetworkTest.java)/**
 * Abstract base class for testing undirected implementations of the {@link Network} interface.
 *
 * <p>This class is responsible for testing that an undirected implementation of {@link Network} is
 * correctly handling undirected edges. Implementation-dependent test cases are left to subclasses.
 * Test cases that do not require the graph to be undirected are found in superclasses.
 */
ConfigurableDirectedGraphTest (/guava-tests/test/com/google/common/graph/ConfigurableDirectedGraphTest.java)/** Tests for a directed {@link ConfigurableMutableGraph} allowing self-loops. */
ConfigurableDirectedMultiNetworkTest (/guava-tests/test/com/google/common/graph/ConfigurableDirectedMultiNetworkTest.java)/**
 * Tests for a directed {@link ConfigurableMutableNetwork} allowing parallel edges and self-loops.
 */
ConfigurableDirectedNetworkTest (/guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java)/** Tests for a directed {@link ConfigurableMutableNetwork} allowing self-loops. */
ConfigurableSimpleDirectedGraphTest (/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedGraphTest.java)/**
 * Tests for a directed {@link ConfigurableMutableGraph}, creating a simple directed graph
 * (self-loop edges are not allowed).
 */
ConfigurableSimpleDirectedNetworkTest (/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedNetworkTest.java)/**
 * Tests for a directed {@link ConfigurableMutableNetwork}, creating a simple directed graph
 * (parallel and self-loop edges are not allowed).
 */
ConfigurableSimpleDirectedSortedNetworkTest (/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedSortedNetworkTest.java)/**
 * Tests for a directed {@link ConfigurableMutableNetwork}, creating a simple directed sorted graph
 * (parallel and self-loop edges are not allowed).
 *
 * <p>The main purpose of this class is to run the inherited {@link #concurrentIteration} test
 * against a sorted graph so as to cover {@link MapRetrievalCache}.
 */
ConfigurableSimpleUndirectedGraphTest (/guava-tests/test/com/google/common/graph/ConfigurableSimpleUndirectedGraphTest.java)/**
 * Tests for an undirected {@link ConfigurableMutableGraph}, creating a simple undirected graph
 * (self-loop edges are not allowed).
 */
ConfigurableSimpleUndirectedNetworkTest (/guava-tests/test/com/google/common/graph/ConfigurableSimpleUndirectedNetworkTest.java)/**
 * Tests for an undirected {@link ConfigurableMutableNetwork}, creating a simple undirected graph
 * (parallel and self-loop edges are not allowed).
 */
ConfigurableUndirectedGraphTest (/guava-tests/test/com/google/common/graph/ConfigurableUndirectedGraphTest.java)/** Tests for an undirected {@link ConfigurableMutableGraph} allowing self-loops. */
ConfigurableUndirectedMultiNetworkTest (/guava-tests/test/com/google/common/graph/ConfigurableUndirectedMultiNetworkTest.java)/**
 * Tests for an undirected {@link ConfigurableMutableNetwork} allowing parallel edges and
 * self-loops.
 */
ConfigurableUndirectedNetworkTest (/guava-tests/test/com/google/common/graph/ConfigurableUndirectedNetworkTest.java)/** Tests for an undirected {@link ConfigurableMutableNetwork} allowing self-loops. */
DefaultNetworkImplementationsTest (/guava-tests/test/com/google/common/graph/DefaultNetworkImplementationsTest.java)/**
 * Test for {@link Network} methods which have default implementations. Currently those
 * implementations are in {@link AbstractNetwork}; in future they might be in {@link Network}
 * itself, once we are willing to use Java 8 default methods.
 */
ElementOrderTest (/guava-tests/test/com/google/common/graph/ElementOrderTest.java)/** Tests for ordering the elements of graphs. */
EndpointPairTest (/guava-tests/test/com/google/common/graph/EndpointPairTest.java)/** Tests for {@link EndpointPair} and {@link Graph#edges()}. */
GraphMutationTest (/guava-tests/test/com/google/common/graph/GraphMutationTest.java)/** Tests for repeated node and edge addition and removal in a {@link Graph}. */
GraphsTest (/guava-tests/test/com/google/common/graph/GraphsTest.java)/**
 * Tests for {@link Graphs}. Tests assume that the implementation of the method {@code addEdge} adds
 * the missing nodes to the graph, then adds the edge between them.
 */
ImmutableGraphTest (/guava-tests/test/com/google/common/graph/ImmutableGraphTest.java)/** Tests for {@link ImmutableGraph}. */
ImmutableNetworkTest (/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java)/** Tests for {@link ImmutableNetwork}. */
ImmutableValueGraphTest (/guava-tests/test/com/google/common/graph/ImmutableValueGraphTest.java)/** Tests for {@link ImmutableValueGraph} . */
MapCacheTest (/guava-tests/test/com/google/common/graph/MapCacheTest.java)/** Tests for {@link MapIteratorCache} and {@link MapRetrievalCache}. */
NetworkMutationTest (/guava-tests/test/com/google/common/graph/NetworkMutationTest.java)/** Tests for repeated node and edge addition and removal in a {@link Network}. */
TestUtil (/guava-tests/test/com/google/common/graph/TestUtil.java)/** Utility methods used in various common.graph tests. */
AbstractByteHasherTest (/guava-tests/test/com/google/common/hash/AbstractByteHasherTest.java)/**
 * Tests for AbstractByteHasher.
 *
 * @author Colin Decker
 */
AbstractNonStreamingHashFunctionTest (/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java)/** Tests for AbstractNonStreamingHashFunction. */
AbstractStreamingHasherTest (/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java)/**
 * Tests for AbstractStreamingHasher.
 *
 * @author Dimitris Andreou
 */
BloomFilterTest (/guava-tests/test/com/google/common/hash/BloomFilterTest.java)/**
 * Tests for SimpleGenericBloomFilter and derived BloomFilter views.
 *
 * @author Dimitris Andreou
 */
ChecksumHashFunctionTest (/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java)/**
 * Tests for ChecksumHashFunction.
 *
 * @author Colin Decker
 */
Crc32cHashFunctionTest (/guava-tests/test/com/google/common/hash/Crc32cHashFunctionTest.java)/**
 * Unit tests for {@link Crc32c}. Known test values are from RFC 3720, Section B.4.
 *
 * @author Patrick Costello
 * @author Kurt Alfred Kluever
 */
FarmHashFingerprint64Test (/guava-tests/test/com/google/common/hash/FarmHashFingerprint64Test.java)/**
 * Unit test for FarmHashFingerprint64.
 *
 * @author Kyle Maddison
 * @author Geoff Pike
 */
FunnelsTest (/guava-tests/test/com/google/common/hash/FunnelsTest.java)/**
 * Tests for HashExtractors.
 *
 * @author Dimitris Andreou
 */
HashCodeTest (/guava-tests/test/com/google/common/hash/HashCodeTest.java)/**
 * Unit tests for {@link HashCode}.
 *
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 */
HashingInputStreamTest (/guava-tests/test/com/google/common/hash/HashingInputStreamTest.java)/**
 * Tests for {@link HashingInputStream}.
 *
 * @author Qian Huang
 */
HashingOutputStreamTest (/guava-tests/test/com/google/common/hash/HashingOutputStreamTest.java)/**
 * Tests for {@link HashingOutputStream}.
 *
 * @author Nick Piepmeier
 */
HashingTest (/guava-tests/test/com/google/common/hash/HashingTest.java)/**
 * Unit tests for {@link Hashing}.
 *
 * <p>TODO(b/33919189): Migrate repeated testing methods to {@link #HashTestUtils} and tweak unit
 * tests to reference them from there.
 *
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 */
HashTestUtils (/guava-tests/test/com/google/common/hash/HashTestUtils.java)/**
 * Various utilities for testing {@link HashFunction}s.
 *
 * @author Dimitris Andreou
 * @author Kurt Alfred Kluever
 */
MacHashFunctionTest (/guava-tests/test/com/google/common/hash/MacHashFunctionTest.java)/**
 * Tests for the MacHashFunction.
 *
 * @author Kurt Alfred Kluever
 */
MessageDigestHashFunctionTest (/guava-tests/test/com/google/common/hash/MessageDigestHashFunctionTest.java)/**
 * Tests for the MessageDigestHashFunction.
 *
 * @author Kurt Alfred Kluever
 */
Murmur3Hash128Test (/guava-tests/test/com/google/common/hash/Murmur3Hash128Test.java)/** Tests for {@link Murmur3_128HashFunction}. */
Murmur3Hash32Test (/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java)/** Tests for {@link Murmur3_32HashFunction}. */
SipHashFunctionTest (/guava-tests/test/com/google/common/hash/SipHashFunctionTest.java)/**
 * Unit tests for {@link SipHashFunction}.
 *
 * @author Kurt Alfred Kluever
 */
HtmlEscapersTest (/guava-tests/test/com/google/common/html/HtmlEscapersTest.java)/**
 * Tests for the {@link HtmlEscapers} class.
 *
 * @author David Beaumont
 */
SpyAppendable (/guava-tests/test/com/google/common/io/AppendableWriterTest.java)/** Helper class for testing behavior with Flushable and Closeable targets. */
AppendableWriterTest (/guava-tests/test/com/google/common/io/AppendableWriterTest.java)/**
 * Unit test for {@link AppendableWriter}.
 *
 * @author Alan Green
 */
BaseEncodingTest (/guava-tests/test/com/google/common/io/BaseEncodingTest.java)/**
 * Tests for {@code BaseEncoding}.
 *
 * @author Louis Wasserman
 */
ByteSinkTest (/guava-tests/test/com/google/common/io/ByteSinkTest.java)/**
 * Tests for the default implementations of {@code ByteSink} methods.
 *
 * @author Colin Decker
 */
ByteSinkTester (/guava-tests/test/com/google/common/io/ByteSinkTester.java)/**
 * A generator of {@code TestSuite} instances for testing {@code ByteSink} implementations.
 * Generates tests of a all methods on a {@code ByteSink} given various inputs written to it as well
 * as sub-suites for testing the {@code CharSink} view in the same way.
 *
 * @author Colin Decker
 */
ByteSourceTest (/guava-tests/test/com/google/common/io/ByteSourceTest.java)/**
 * Tests for the default implementations of {@code ByteSource} methods.
 *
 * @author Colin Decker
 */
ByteSourceTester (/guava-tests/test/com/google/common/io/ByteSourceTester.java)/**
 * A generator of {@code TestSuite} instances for testing {@code ByteSource} implementations.
 * Generates tests of a all methods on a {@code ByteSource} given various inputs the source is
 * expected to contain as well as as sub-suites for testing the {@code CharSource} view and {@code
 * slice()} views in the same way.
 *
 * @author Colin Decker
 */
SlowSkipper (/guava-tests/test/com/google/common/io/ByteStreamsTest.java)/** Stream that will skip a maximum number of bytes at a time. */
ByteStreamsTest (/guava-tests/test/com/google/common/io/ByteStreamsTest.java)/**
 * Unit test for {@link ByteStreams}.
 *
 * @author Chris Nokleberg
 */
CharSequenceReaderTest (/guava-tests/test/com/google/common/io/CharSequenceReaderTest.java)/**
 * Tests for {@link CharSequenceReader}.
 *
 * @author Colin Decker
 */
CharSinkTest (/guava-tests/test/com/google/common/io/CharSinkTest.java)/**
 * Tests for the default implementations of {@code CharSink} methods.
 *
 * @author Colin Decker
 */
CharSinkTester (/guava-tests/test/com/google/common/io/CharSinkTester.java)/**
 * A generator of {@code TestSuite} instances for testing {@code CharSink} implementations.
 * Generates tests of a all methods on a {@code CharSink} given various inputs written to it.
 *
 * @author Colin Decker
 */
CharSourceTest (/guava-tests/test/com/google/common/io/CharSourceTest.java)/**
 * Tests for the default implementations of {@code CharSource} methods.
 *
 * @author Colin Decker
 */
CharSourceTester (/guava-tests/test/com/google/common/io/CharSourceTester.java)/**
 * A generator of {@code TestSuite} instances for testing {@code CharSource} implementations.
 * Generates tests of a all methods on a {@code CharSource} given various inputs the source is
 * expected to contain.
 *
 * @author Colin Decker
 */
CharStreamsTest (/guava-tests/test/com/google/common/io/CharStreamsTest.java)/**
 * Unit test for {@link CharStreams}.
 *
 * @author Chris Nokleberg
 */
CloseablesTest (/guava-tests/test/com/google/common/io/CloseablesTest.java)/**
 * Unit tests for {@link Closeables}.
 *
 * <p>Checks proper closing behavior, and ensures that IOExceptions on Closeable.close() are not
 * propagated out from the {@link Closeables#close} method if {@code swallowException} is true.
 *
 * @author Michael Lancaster
 */
TestSuppressor (/guava-tests/test/com/google/common/io/CloserTest.java)/** Suppressor that records suppressions. */
Suppression (/guava-tests/test/com/google/common/io/CloserTest.java)/** Record of a call to suppress. */
CloserTest (/guava-tests/test/com/google/common/io/CloserTest.java)/**
 * Tests for {@link Closer}.
 *
 * @author Colin Decker
 */
CountingInputStreamTest (/guava-tests/test/com/google/common/io/CountingInputStreamTest.java)/**
 * Unit tests for {@link CountingInputStream}.
 *
 * @author Chris Nokleberg
 */
CountingOutputStreamTest (/guava-tests/test/com/google/common/io/CountingOutputStreamTest.java)/**
 * Unit tests for {@link CountingOutputStream}.
 *
 * @author Chris Nokleberg
 */
FileBackedOutputStreamTest (/guava-tests/test/com/google/common/io/FileBackedOutputStreamTest.java)/**
 * Unit tests for {@link FileBackedOutputStream}.
 *
 * @author Chris Nokleberg
 */
FilesSimplifyPathTest (/guava-tests/test/com/google/common/io/FilesSimplifyPathTest.java)/**
 * Unit tests for {@link Files#simplifyPath}.
 *
 * @author Pablo Bellver
 */
BadLengthFile (/guava-tests/test/com/google/common/io/FilesTest.java)/** A {@link File} that provides a specialized value for {@link File#length()}. */
FlushablesTest (/guava-tests/test/com/google/common/io/FlushablesTest.java)/**
 * Unit tests for {@link Flushables}.
 *
 * <p>Checks proper flushing behavior, and ensures that IOExceptions on Flushable.flush() are not
 * propagated out from the {@link Flushables#flush} method if {@code swallowException} is true.
 *
 * @author Michael Lancaster
 */
IoTestCase (/guava-tests/test/com/google/common/io/IoTestCase.java)/**
 * Base test case class for I/O tests.
 *
 * @author Chris Nokleberg
 * @author Colin Decker
 */
LineBufferTest (/guava-tests/test/com/google/common/io/LineBufferTest.java)/**
 * Unit tests for {@link LineBuffer} and {@link LineReader}.
 *
 * @author Chris Nokleberg
 */
LittleEndianDataInputStreamTest (/guava-tests/test/com/google/common/io/LittleEndianDataInputStreamTest.java)/**
 * Test class for {@link LittleEndianDataInputStream}.
 *
 * @author Chris Nokleberg
 */
LittleEndianDataOutputStreamTest (/guava-tests/test/com/google/common/io/LittleEndianDataOutputStreamTest.java)/**
 * Test class for {@link LittleEndianDataOutputStream}.
 *
 * @author Keith Bottner
 */
MultiInputStreamTest (/guava-tests/test/com/google/common/io/MultiInputStreamTest.java)/**
 * Test class for {@link MultiInputStream}.
 *
 * @author Chris Nokleberg
 */
MultiReaderTest (/guava-tests/test/com/google/common/io/MultiReaderTest.java)/** @author ricebin */
PatternFilenameFilterTest (/guava-tests/test/com/google/common/io/PatternFilenameFilterTest.java)/**
 * Unit test for {@link PatternFilenameFilter}.
 *
 * @author Chris Nokleberg
 */
RandomAmountInputStream (/guava-tests/test/com/google/common/io/RandomAmountInputStream.java)/** Returns a random portion of the requested bytes on each call. */
SourceSinkFactories (/guava-tests/test/com/google/common/io/SourceSinkFactories.java)/**
 * {@link SourceSinkFactory} implementations.
 *
 * @author Colin Decker
 */
SourceFactory (/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for byte or char sources. */
SinkFactory (/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for byte or char sinks. */
ByteSourceFactory (/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for {@link ByteSource} instances. */
ByteSinkFactory (/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for {@link ByteSink} instances. */
CharSourceFactory (/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for {@link CharSource} instances. */
CharSinkFactory (/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/** Factory for {@link CharSink} instances. */
SourceSinkFactory (/guava-tests/test/com/google/common/io/SourceSinkFactory.java)/**
 * A test factory for byte or char sources or sinks. In addition to creating sources or sinks, the
 * factory specifies what content should be expected to be read from a source or contained in a sink
 * given the content data that was used to create the source or that was written to the sink.
 *
 * <p>A single {@code SourceSinkFactory} implementation generally corresponds to one specific way of
 * creating a source or sink, such as {@link Files#asByteSource(File)}. Implementations of {@code
 * SourceSinkFactory} for common.io are found in {@link SourceSinkFactories}.
 *
 * @param <S> the source or sink type
 * @param <T> the data type (byte[] or String)
 * @author Colin Decker
 */
SourceSinkTester (/guava-tests/test/com/google/common/io/SourceSinkTester.java)/**
 * @param <S> the source or sink type
 * @param <T> the data type (byte[] or String)
 * @param <F> the factory type
 * @author Colin Decker
 */
TestByteSink (/guava-tests/test/com/google/common/io/TestByteSink.java)/**
 * A byte sink for testing that has configurable behavior.
 *
 * @author Colin Decker
 */
TestByteSource (/guava-tests/test/com/google/common/io/TestByteSource.java)/**
 * A byte source for testing that has configurable behavior.
 *
 * @author Colin Decker
 */
TestCharSink (/guava-tests/test/com/google/common/io/TestCharSink.java)/**
 * A char sink for testing that has configurable behavior.
 *
 * @author Colin Decker
 */
TestCharSource (/guava-tests/test/com/google/common/io/TestCharSource.java)/**
 * A char source for testing that has configurable options.
 *
 * @author Colin Decker
 */
TestInputStream (/guava-tests/test/com/google/common/io/TestInputStream.java)/** @author Colin Decker */
TestOutputStream (/guava-tests/test/com/google/common/io/TestOutputStream.java)/** @author Colin Decker */
TestReader (/guava-tests/test/com/google/common/io/TestReader.java)/** @author Colin Decker */
TestStreamSupplier (/guava-tests/test/com/google/common/io/TestStreamSupplier.java)/**
 * Interface for a supplier of streams that can report whether a stream was opened and whether that
 * stream was closed. Intended for use in a test where only a single stream should be opened and
 * possibly closed.
 *
 * @author Colin Decker
 */
TestWriter (/guava-tests/test/com/google/common/io/TestWriter.java)/** @author Colin Decker */
BigIntegerMathTest (/guava-tests/test/com/google/common/math/BigIntegerMathTest.java)/**
 * Tests for BigIntegerMath.
 *
 * @author Louis Wasserman
 */
DoubleMathTest (/guava-tests/test/com/google/common/math/DoubleMathTest.java)/**
 * Tests for {@code DoubleMath}.
 *
 * @author Louis Wasserman
 */
DoubleUtilsTest (/guava-tests/test/com/google/common/math/DoubleUtilsTest.java)/**
 * Tests for {@link DoubleUtils}.
 *
 * @author Louis Wasserman
 */
IntMathTest (/guava-tests/test/com/google/common/math/IntMathTest.java)/**
 * Tests for {@link IntMath}.
 *
 * @author Louis Wasserman
 */
LinearTransformationTest (/guava-tests/test/com/google/common/math/LinearTransformationTest.java)/**
 * Tests for {@link LinearTransformation}.
 *
 * @author Pete Gillin
 */
LongMathTest (/guava-tests/test/com/google/common/math/LongMathTest.java)/**
 * Tests for LongMath.
 *
 * @author Louis Wasserman
 */
MathBenchmarking (/guava-tests/test/com/google/common/math/MathBenchmarking.java)/**
 * Utilities for benchmarks.
 *
 * <p>In many cases, we wish to vary the order of magnitude of the input as much as we want to vary
 * the input itself, so most methods which generate values use an exponential distribution varying
 * the order of magnitude of the generated values uniformly at random.
 *
 * @author Louis Wasserman
 */
MathPreconditionsTest (/guava-tests/test/com/google/common/math/MathPreconditionsTest.java)/**
 * Unit tests for {@link MathPreconditions}.
 *
 * @author Ben Yu
 */
MathTesting (/guava-tests/test/com/google/common/math/MathTesting.java)/**
 * Exhaustive input sets for every integral type.
 *
 * @author Louis Wasserman
 */
PairedStatsAccumulatorTest (/guava-tests/test/com/google/common/math/PairedStatsAccumulatorTest.java)/**
 * Tests for {@link PairedStatsAccumulator}. This tests the stats methods for instances built with
 * {@link PairedStatsAccumulator#add}, and various error cases of that method. For tests of the
 * {@link PairedStatsAccumulator#snapshot} method which returns {@link PairedStats} instances, see
 * {@link PairedStatsTest}.
 *
 * @author Pete Gillin
 */
PairedStatsTest (/guava-tests/test/com/google/common/math/PairedStatsTest.java)/**
 * Tests for {@link PairedStats}. This tests instances created by {@link
 * PairedStatsAccumulator#snapshot}.
 *
 * @author Pete Gillin
 */
QuantilesAlgorithmTest (/guava-tests/test/com/google/common/math/QuantilesAlgorithmTest.java)/**
 * Tests that the different algorithms benchmarked in {@link QuantilesBenchmark} are actually all
 * returning more-or-less the same answers.
 */
QuantilesTest (/guava-tests/test/com/google/common/math/QuantilesTest.java)/**
 * Tests for {@link Quantiles}.
 *
 * @author Pete Gillin
 */
StatsAccumulatorTest (/guava-tests/test/com/google/common/math/StatsAccumulatorTest.java)/**
 * Tests for {@link StatsAccumulator}. This tests the stats methods for instances built with {@link
 * StatsAccumulator#add} and {@link StatsAccumulator#addAll}, and various error cases of the {@link
 * StatsAccumulator#add} and {@link StatsAccumulator#addAll} methods. For tests of the {@link
 * StatsAccumulator#snapshot} method which returns {@link Stats} instances, see {@link StatsTest}.
 *
 * @author Pete Gillin
 */
StatsTest (/guava-tests/test/com/google/common/math/StatsTest.java)/**
 * Tests for {@link Stats}. This tests instances created by both {@link Stats#of} and {@link
 * StatsAccumulator#snapshot}.
 *
 * @author Pete Gillin
 */
ManyValues (/guava-tests/test/com/google/common/math/StatsTesting.java)/**
   * Helper class for testing with non-finite values. {@link #ALL_MANY_VALUES} gives a number
   * instances with many combinations of finite and non-finite values. All have {@link
   * #MANY_VALUES_COUNT} values. If all the values are finite then the mean is {@link
   * #MANY_VALUES_MEAN} and the sum-of-squares-of-deltas is {@link
   * #MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS}. The smallest and largest finite values are always
   * {@link #MANY_VALUES_MIN} and {@link #MANY_VALUES_MAX}, although setting non-finite values will
   * change the true min and max.
   */
StatsTesting (/guava-tests/test/com/google/common/math/StatsTesting.java)/**
 * Inputs, expected outputs, and helper methods for tests of {@link StatsAccumulator}, {@link
 * Stats}, {@link PairedStatsAccumulator}, and {@link PairedStats}.
 *
 * @author Pete Gillin
 */
TestPlatform (/guava-tests/test/com/google/common/math/TestPlatform.java)/** @author Chris Povirk */
HostAndPortTest (/guava-tests/test/com/google/common/net/HostAndPortTest.java)/**
 * Tests for {@link HostAndPort}
 *
 * @author Paul Marks
 */
HostSpecifierTest (/guava-tests/test/com/google/common/net/HostSpecifierTest.java)/**
 * {@link TestCase} for {@link HostSpecifier}. This is a relatively cursory test, as HostSpecifier
 * is a thin wrapper around {@link InetAddresses} and {@link InternetDomainName}; the unit tests for
 * those classes explore numerous corner cases. The intent here is to confirm that everything is
 * wired up properly.
 *
 * @author Craig Berry
 */
HttpHeadersTest (/guava-tests/test/com/google/common/net/HttpHeadersTest.java)/**
 * Tests for the HttpHeaders class.
 *
 * @author Kurt Alfred Kluever
 */
InetAddressesTest (/guava-tests/test/com/google/common/net/InetAddressesTest.java)/**
 * Tests for {@link InetAddresses}.
 *
 * @author Erik Kline
 */
InternetDomainNameTest (/guava-tests/test/com/google/common/net/InternetDomainNameTest.java)/**
 * {@link TestCase} for {@link InternetDomainName}.
 *
 * @author Craig Berry
 */
MediaTypeTest (/guava-tests/test/com/google/common/net/MediaTypeTest.java)/**
 * Tests for {@link MediaType}.
 *
 * @author Gregory Kick
 */
PercentEscaperTest (/guava-tests/test/com/google/common/net/PercentEscaperTest.java)/**
 * Tests for {@link PercentEscaper}.
 *
 * @author David Beaumont
 */
UrlEscapersTest (/guava-tests/test/com/google/common/net/UrlEscapersTest.java)/**
 * Tests for the {@link UrlEscapers} class.
 *
 * @author David Beaumont
 */
BooleansTest (/guava-tests/test/com/google/common/primitives/BooleansTest.java)/**
 * Unit test for {@link Booleans}.
 *
 * @author Kevin Bourrillion
 */
ByteArrayAsListTest (/guava-tests/test/com/google/common/primitives/ByteArrayAsListTest.java)/**
 * Test suite covering {@link Bytes#asList(byte[])}.
 *
 * @author Kevin Bourrillion
 */
BytesTest (/guava-tests/test/com/google/common/primitives/BytesTest.java)/**
 * Unit test for {@link Bytes}.
 *
 * @author Kevin Bourrillion
 */
CharArrayAsListTest (/guava-tests/test/com/google/common/primitives/CharArrayAsListTest.java)/**
 * Test suite covering {@link Chars#asList(char[])}.
 *
 * @author Kevin Bourrillion
 */
CharsTest (/guava-tests/test/com/google/common/primitives/CharsTest.java)/**
 * Unit test for {@link Chars}.
 *
 * @author Kevin Bourrillion
 */
DoubleArrayAsListTest (/guava-tests/test/com/google/common/primitives/DoubleArrayAsListTest.java)/**
 * Test suite covering {@link Doubles#asList(double[])}.
 *
 * @author Kevin Bourrillion
 */
DoublesTest (/guava-tests/test/com/google/common/primitives/DoublesTest.java)/**
 * Unit test for {@link Doubles}.
 *
 * @author Kevin Bourrillion
 */
FloatArrayAsListTest (/guava-tests/test/com/google/common/primitives/FloatArrayAsListTest.java)/**
 * Test suite covering {@link Floats#asList(float[])})}.
 *
 * @author Kevin Bourrillion
 */
FloatsTest (/guava-tests/test/com/google/common/primitives/FloatsTest.java)/**
 * Unit test for {@link Floats}.
 *
 * @author Kevin Bourrillion
 */
ImmutableDoubleArrayTest (/guava-tests/test/com/google/common/primitives/ImmutableDoubleArrayTest.java)/** @author Kevin Bourrillion */
ImmutableIntArrayTest (/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java)/** @author Kevin Bourrillion */
ImmutableLongArrayTest (/guava-tests/test/com/google/common/primitives/ImmutableLongArrayTest.java)/** @author Kevin Bourrillion */
IntArrayAsListTest (/guava-tests/test/com/google/common/primitives/IntArrayAsListTest.java)/**
 * Test suite covering {@link Ints#asList(int[])}.
 *
 * @author Kevin Bourrillion
 */
IntsTest (/guava-tests/test/com/google/common/primitives/IntsTest.java)/**
 * Unit test for {@link Ints}.
 *
 * @author Kevin Bourrillion
 */
LongArrayAsListTest (/guava-tests/test/com/google/common/primitives/LongArrayAsListTest.java)/**
 * Test suite covering {@link Longs#asList(long[])}.
 *
 * @author Kevin Bourrillion
 */
LongsTest (/guava-tests/test/com/google/common/primitives/LongsTest.java)/**
 * Unit test for {@link Longs}.
 *
 * @author Kevin Bourrillion
 */
PrimitivesTest (/guava-tests/test/com/google/common/primitives/PrimitivesTest.java)/**
 * Unit test for {@link Primitives}.
 *
 * @author Kevin Bourrillion
 */
ShortArrayAsListTest (/guava-tests/test/com/google/common/primitives/ShortArrayAsListTest.java)/**
 * Test suite covering {@link Shorts#asList(short[])}.
 *
 * @author Kevin Bourrillion
 */
ShortsTest (/guava-tests/test/com/google/common/primitives/ShortsTest.java)/**
 * Unit test for {@link Shorts}.
 *
 * @author Kevin Bourrillion
 */
SignedBytesTest (/guava-tests/test/com/google/common/primitives/SignedBytesTest.java)/**
 * Unit test for {@link SignedBytes}.
 *
 * @author Kevin Bourrillion
 */
UnsignedBytesTest (/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java)/**
 * Unit test for {@link UnsignedBytes}.
 *
 * @author Kevin Bourrillion
 * @author Louis Wasserman
 */
UnsignedIntegerTest (/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java)/**
 * Tests for {@code UnsignedInteger}.
 *
 * @author Louis Wasserman
 */
UnsignedIntsTest (/guava-tests/test/com/google/common/primitives/UnsignedIntsTest.java)/**
 * Tests for UnsignedInts
 *
 * @author Louis Wasserman
 */
UnsignedLongsTest (/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java)/**
 * Tests for UnsignedLongs
 *
 * @author Brian Milch
 * @author Louis Wasserman
 */
UnsignedLongTest (/guava-tests/test/com/google/common/primitives/UnsignedLongTest.java)/**
 * Tests for {@code UnsignedLong}.
 *
 * @author Louis Wasserman
 */
AbstractInvocationHandlerTest (/guava-tests/test/com/google/common/reflect/AbstractInvocationHandlerTest.java)/**
 * Tests for {@link AbstractInvocationHandler}.
 *
 * @author Ben Yu
 */
ClassPathTest (/guava-tests/test/com/google/common/reflect/ClassPathTest.java)/** Functional tests of {@link ClassPath}. */
ElementTest (/guava-tests/test/com/google/common/reflect/ElementTest.java)/**
 * Unit tests of {@link Element}.
 *
 * @author Ben Yu
 */
ImmutableTypeToInstanceMapTest (/guava-tests/test/com/google/common/reflect/ImmutableTypeToInstanceMapTest.java)/**
 * Unit test for {@link ImmutableTypeToInstanceMap}.
 *
 * @author Ben Yu
 */
LocalClassWithSeeminglyHiddenThisInStaticInitializer (/guava-tests/test/com/google/common/reflect/InvokableTest.java)/**
   * This class demonstrates a bug in getParameters() when the local class is inside static
   * initializer.
   */
Prepender (/guava-tests/test/com/google/common/reflect/InvokableTest.java)/** Class for testing constructor, static method and instance method. */
InvokableTest (/guava-tests/test/com/google/common/reflect/InvokableTest.java)/**
 * Unit tests for {@link Invokable}.
 *
 * @author Ben Yu
 */
MutableTypeToInstanceMapTest (/guava-tests/test/com/google/common/reflect/MutableTypeToInstanceMapTest.java)/**
 * Unit test of {@link MutableTypeToInstanceMap}.
 *
 * @author Ben Yu
 */
ParameterTest (/guava-tests/test/com/google/common/reflect/ParameterTest.java)/**
 * Tests for {@link Parameter}.
 *
 * @author Ben Yu
 */
ReflectionTest (/guava-tests/test/com/google/common/reflect/ReflectionTest.java)/** Tests for {@link Reflection} */
SubtypeTester (/guava-tests/test/com/google/common/reflect/SubtypeTester.java)/**
 * Tester of subtyping relationships between two types.
 *
 * <p>Tests should inherit from this class, and declare subtyping relationship with public methods
 * annotated by {@link TestSubtype}.
 *
 * <p>These declaration methods rely on Java static type checking to make sure what we want to
 * assert as subtypes are really subtypes according to javac. For example:
 *
 * <pre>{@code
 * class MySubtypeTests extends SubtypeTester {
 *   @TestSubtype(suppressGetSubtype = true, suppressGetSupertype = true)
 *   public <T> Iterable<? extends T> listIsSubtypeOfIterable(List<T> list) {
 *     return isSubtype(list);
 *   }
 *
 *   @TestSubtype
 *   public List<String> intListIsNotSubtypeOfStringList(List<Integer> intList) {
 *     return notSubtype(intList);
 *   }
 * }
 *
 * public void testMySubtypes() throws Exception {
 *   new MySubtypeTests().testAllDeclarations();
 * }
 * }</pre>
 *
 * The calls to {@link #isSubtype} and {@link #notSubtype} tells the framework what assertions need
 * to be made.
 *
 * <p>The declaration methods must be public.
 */
TypeParameterTest (/guava-tests/test/com/google/common/reflect/TypeParameterTest.java)/**
 * Unit test for {@link TypeParameter}.
 *
 * @author Ben Yu
 */
TypeResolverTest (/guava-tests/test/com/google/common/reflect/TypeResolverTest.java)/**
 * Unit tests of {@link TypeResolver}.
 *
 * @author Ben Yu
 */
TypesTest (/guava-tests/test/com/google/common/reflect/TypesTest.java)/**
 * Tests for {@link Types}.
 *
 * @author Ben Yu
 */
TypeTokenResolutionTest (/guava-tests/test/com/google/common/reflect/TypeTokenResolutionTest.java)/**
 * Unit test for {@link TypeToken} and {@link TypeResolver}.
 *
 * @author Ben Yu
 */
TypeTokenTest (/guava-tests/test/com/google/common/reflect/TypeTokenTest.java)/**
 * Test cases for {@link TypeToken}.
 *
 * @author Sven Mawson
 * @author Ben Yu
 */
TypeVisitorTest (/guava-tests/test/com/google/common/reflect/TypeVisitorTest.java)/**
 * Tests of {@link TypeVisitor}.
 *
 * @author Ben Yu
 */
TestedFuture (/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java)/** Concrete subclass for testing. */
AbstractAbstractFutureTest (/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java)/**
 * Base class for tests for emulated {@link AbstractFuture} that allow subclasses to swap in a
 * different "source Future" for {@link AbstractFuture#setFuture} calls.
 */
AbstractChainedListenableFutureTest (/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java)/**
 * Unit tests for any listenable future that chains other listenable futures. Unit tests need only
 * override buildChainingFuture and getSuccessfulResult, but they can add custom tests as needed.
 *
 * @author Nishant Thakkar
 */
AbstractExecutionThreadServiceTest (/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java)/**
 * Unit test for {@link AbstractExecutionThreadService}.
 *
 * @author Jesse Wilson
 */
Sync (/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java)/**
     * Following the contract of {@link AbstractQueuedSynchronizer} we create a private subclass to
     * hold the synchronizer. This synchronizer is used to implement the blocking and waiting calls
     * as well as to handle state changes in a thread-safe manner. The current state of the future
     * is held in the Sync state, and the lock is released whenever the state changes to {@link
     * #COMPLETED}, {@link #CANCELLED}, or {@link #INTERRUPTED}
     *
     * <p>To avoid races between threads doing release and acquire, we transition to the final state
     * in two steps. One thread will successfully CAS from RUNNING to COMPLETING, that thread will
     * then set the result of the computation, and only then transition to COMPLETED, CANCELLED, or
     * INTERRUPTED.
     *
     * <p>We don't use the integer argument passed between acquire methods so we pass around a -1
     * everywhere.
     */
AbstractFutureBenchmarks (/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java)/** Utilities for the AbstractFutureBenchmarks */
AbstractIdleServiceTest (/guava-tests/test/com/google/common/util/concurrent/AbstractIdleServiceTest.java)/**
 * Tests for {@link AbstractIdleService}.
 *
 * @author Chris Nokleberg
 * @author Ben Yu
 */
TestListeningExecutorService (/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java)/** Simple same thread listening executor service that doesn't handle shutdown. */
AbstractListeningExecutorServiceTest (/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java)/**
 * Tests for {@link AbstractListeningExecutorService}.
 *
 * @author Colin Decker
 */
ManualSwitchedService (/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java)/**
   * The user of this service should call {@link #notifyStarted} and {@link #notifyStopped} after
   * calling {@link #startAsync} and {@link #stopAsync}.
   */
AbstractServiceTest (/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java)/**
 * Unit test for {@link AbstractService}.
 *
 * @author Jesse Wilson
 */
AtomicDoubleArrayTest (/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java)/** Unit test for {@link AtomicDoubleArray}. */
AtomicDoubleTest (/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleTest.java)/** Unit test for {@link AtomicDouble}. */
AtomicLongMapBasherTest (/guava-tests/test/com/google/common/util/concurrent/AtomicLongMapBasherTest.java)/**
 * Basher test for {@link AtomicLongMap}.
 *
 * @author mike nonemacher
 */
AtomicLongMapTest (/guava-tests/test/com/google/common/util/concurrent/AtomicLongMapTest.java)/**
 * Tests for {@link AtomicLongMap}.
 *
 * @author mike nonemacher
 */
AtomicsTest (/guava-tests/test/com/google/common/util/concurrent/AtomicsTest.java)/**
 * Unit test for {@link Atomics}.
 *
 * @author Kurt Alfred Kluever
 */
CallablesTest (/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java)/**
 * Unit tests for {@link Callables}.
 *
 * @author Isaac Shum
 */
ClassPathUtil (/guava-tests/test/com/google/common/util/concurrent/ClassPathUtil.java)/** Utility method to parse the system class path. */
CycleDetectingLockFactoryTest (/guava-tests/test/com/google/common/util/concurrent/CycleDetectingLockFactoryTest.java)/**
 * Unittests for {@link CycleDetectingLockFactory}.
 *
 * @author Darick Tong
 */
ExecutionListTest (/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java)/**
 * Unit tests for {@link ExecutionList}.
 *
 * @author Nishant Thakkar
 * @author Sven Mawson
 */
ExecutionSequencerTest (/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java)/** Tests for {@link ExecutionSequencer} */
FakeTimeLimiterTest (/guava-tests/test/com/google/common/util/concurrent/FakeTimeLimiterTest.java)/**
 * Unit test for {@link FakeTimeLimiter}.
 *
 * @author Jens Nyman
 */
FluentFutureTest (/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java)/**
 * Tests for {@link FluentFuture}. The tests cover only the basics for the API. The actual logic is
 * tested in {@link FuturesTest}.
 */
ForwardingBlockingDequeTest (/guava-tests/test/com/google/common/util/concurrent/ForwardingBlockingDequeTest.java)/**
 * Test for {@link ForwardingBlockingDeque}
 *
 * @author Emily Soldal
 */
ForwardingBlockingQueueTest (/guava-tests/test/com/google/common/util/concurrent/ForwardingBlockingQueueTest.java)/** Unit tests for {@link ForwardingBlockingQueue} */
ForwardingExecutorServiceTest (/guava-tests/test/com/google/common/util/concurrent/ForwardingExecutorServiceTest.java)/** Unit tests for {@link ForwardingExecutorService} */
ForwardingFutureTest (/guava-tests/test/com/google/common/util/concurrent/ForwardingFutureTest.java)/** Unit tests for {@link ForwardingFuture} */
ForwardingListenableFutureTest (/guava-tests/test/com/google/common/util/concurrent/ForwardingListenableFutureTest.java)/**
 * Tests for {@link ForwardingListenableFuture}.
 *
 * @author Ben Yu
 */
ForwardingListeningExecutorServiceTest (/guava-tests/test/com/google/common/util/concurrent/ForwardingListeningExecutorServiceTest.java)/** Unit tests for {@link ForwardingListeningExecutorService} */
ForwardingObjectTester (/guava-tests/test/com/google/common/util/concurrent/ForwardingObjectTester.java)/**
 * Tester for typical subclass of {@link ForwardingObject} by using EasyMock partial mocks.
 *
 * @author Ben Yu
 */
ForwardingObjectTesterTest (/guava-tests/test/com/google/common/util/concurrent/ForwardingObjectTesterTest.java)/**
 * Tests for {@link ForwardingObjectTester}.
 *
 * @author Ben Yu
 */
FutureCallbackTest (/guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java)/**
 * Test for {@link FutureCallback}.
 *
 * @author Anthony Zana
 */
FuturesGetCheckedInputs (/guava-tests/test/com/google/common/util/concurrent/FuturesGetCheckedInputs.java)/**
 * Classes and futures used in {@link FuturesGetCheckedTest} and {@link FuturesGetUncheckedTest}.
 */
FuturesGetCheckedTest (/guava-tests/test/com/google/common/util/concurrent/FuturesGetCheckedTest.java)/** Unit tests for {@link Futures#getChecked(Future, Class)}. */
FuturesGetDoneTest (/guava-tests/test/com/google/common/util/concurrent/FuturesGetDoneTest.java)/** Unit tests for {@link Futures#getDone}. */
FuturesGetUncheckedTest (/guava-tests/test/com/google/common/util/concurrent/FuturesGetUncheckedTest.java)/** Unit tests for {@link Futures#getUnchecked(Future)}. */
TestFuture (/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java)/**
   * A future in {@link TestFutureBatch} that also has a name for debugging purposes and a {@code
   * finisher}, a task that will complete the future in some fashion when it is called, allowing for
   * testing both before and after the completion of the future.
   */
TestFutureBatch (/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java)/**
   * A collection of several futures, covering cancellation, success, and failure (both {@link
   * ExecutionException} and {@link RuntimeException}), both immediate and delayed. We use each
   * possible pair of these futures in {@link FuturesTest#runExtensiveMergerTest}.
   *
   * <p>Each test requires a new {@link TestFutureBatch} because we need new delayed futures each
   * time, as the old delayed futures were completed as part of the old test.
   */
Merger (/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java)/**
   * {@link Futures#allAsList(Iterable)} or {@link Futures#successfulAsList(Iterable)}, hidden
   * behind a common interface for testing.
   */
FuturesTest (/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java)/**
 * Unit tests for {@link Futures}.
 *
 * @author Nishant Thakkar
 */
BadFuture (/guava-tests/test/com/google/common/util/concurrent/FuturesTransformAsyncTest.java)/** Proxy to throw a {@link RuntimeException} out of the {@link #get()} method. */
FuturesTransformAsyncTest (/guava-tests/test/com/google/common/util/concurrent/FuturesTransformAsyncTest.java)/**
 * Unit tests for {@link Futures#transformAsync(ListenableFuture, AsyncFunction, Executor)}.
 *
 * @author Nishant Thakkar
 */
FuturesTransformTest (/guava-tests/test/com/google/common/util/concurrent/FuturesTransformTest.java)/**
 * Unit tests for {@link Futures#transform(ListenableFuture, Function, Executor)}.
 *
 * @author Nishant Thakkar
 */
FlagGuard (/guava-tests/test/com/google/common/util/concurrent/GeneratedMonitorTest.java)/** A guard that encapsulates a simple, mutable boolean flag. */
Interruptenator (/guava-tests/test/com/google/common/util/concurrent/InterruptionUtil.java)/** Runnable which will interrupt the target thread repeatedly when run. */
InterruptionUtil (/guava-tests/test/com/google/common/util/concurrent/InterruptionUtil.java)/**
 * Utilities for performing thread interruption in tests
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
NonListenableSettableFuture (/guava-tests/test/com/google/common/util/concurrent/JdkFutureAdaptersTest.java)/** A Future that doesn't implement ListenableFuture, useful for testing listenInPoolThread. */
JdkFutureAdaptersTest (/guava-tests/test/com/google/common/util/concurrent/JdkFutureAdaptersTest.java)/**
 * Unit tests for {@link JdkFutureAdapters}.
 *
 * @author Sven Mawson
 * @author Kurt Alfred Kluever
 */
AdjustablePolicy (/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/** A security policy where new permissions can be dynamically added or all cleared. */
SimpleThreadFactory (/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/** For use as ThreadFactory in constructors */
NoOpREHandler (/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/** For use as RejectedExecutionHandler in constructors */
CheckedBarrier (/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/**
   * A CyclicBarrier that uses timed await and fails with AssertionFailedErrors instead of throwing
   * checked exceptions.
   */
JSR166TestCase (/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java)/**
 * Base class for JSR166 Junit TCK tests. Defines some constants, utility methods and classes, as
 * well as a simple framework for helping to make sure that assertions failing in generated threads
 * cause the associated test that generated them to itself fail (which JUnit does not otherwise
 * arrange). The rules for creating such tests are:
 *
 * <ol>
 *   <li>All assertions in code running in generated threads must use the forms {@link #threadFail},
 *       {@link #threadAssertTrue}, {@link #threadAssertEquals}, or {@link #threadAssertNull}, (not
 *       {@code fail}, {@code assertTrue}, etc.) It is OK (but not particularly recommended) for
 *       other code to use these forms too. Only the most typically used JUnit assertion methods are
 *       defined this way, but enough to live with.
 *   <li>If you override {@link #setUp} or {@link #tearDown}, make sure to invoke {@code
 *       super.setUp} and {@code super.tearDown} within them. These methods are used to clear and
 *       check for thread assertion failures.
 *   <li>All delays and timeouts must use one of the constants {@code SHORT_DELAY_MS}, {@code
 *       SMALL_DELAY_MS}, {@code MEDIUM_DELAY_MS}, {@code LONG_DELAY_MS}. The idea here is that a
 *       SHORT is always discriminable from zero time, and always allows enough time for the small
 *       amounts of computation (creating a thread, calling a few methods, etc) needed to reach a
 *       timeout point. Similarly, a SMALL is always discriminable as larger than SHORT and smaller
 *       than MEDIUM. And so on. These constants are set to conservative values, but even so, if
 *       there is ever any doubt, they can all be increased in one spot to rerun tests on slower
 *       platforms.
 *   <li>All threads generated must be joined inside each test case method (or {@code fail} to do
 *       so) before returning from the method. The {@code joinPool} method can be used to do this
 *       when using Executors.
 * </ol>
 *
 * <p><b>Other notes</b>
 *
 * <ul>
 *   <li>Usually, there is one testcase method per JSR166 method covering "normal" operation, and
 *       then as many exception-testing methods as there are exceptions the method can throw.
 *       Sometimes there are multiple tests per JSR166 method when the different "normal" behaviors
 *       differ significantly. And sometimes testcases cover multiple methods when they cannot be
 *       tested in isolation.
 *   <li>The documentation style for testcases is to provide as javadoc a simple sentence or two
 *       describing the property that the testcase method purports to test. The javadocs do not say
 *       anything about how the property is tested. To find out, read the code.
 *   <li>These tests are "conformance tests", and do not attempt to test throughput, latency,
 *       scalability or other performance factors (see the separate "jtreg" tests for a set intended
 *       to check these for the most central aspects of functionality.) So, most tests use the
 *       smallest sensible numbers of threads, collection sizes, etc needed to check basic
 *       conformance.
 *   <li>The test classes currently do not declare inclusion in any particular package to simplify
 *       things for people integrating them in TCK test suites.
 *   <li>As a convenience, the {@code main} of this class (JSR166TestCase) runs all JSR166 unit
 *       tests.
 * </ul>
 */
ListenableFutureTaskTest (/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTaskTest.java)/**
 * Test case for {@link ListenableFutureTask}.
 *
 * @author Sven Mawson
 */
ListenableFutureTester (/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTester.java)/**
 * Used to test listenable future implementations.
 *
 * @author Sven Mawson
 */
ListenerCallQueueTest (/guava-tests/test/com/google/common/util/concurrent/ListenerCallQueueTest.java)/** Tests for {@link ListenerCallQueue}. */
MoreExecutorsTest (/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java)/**
 * Tests for MoreExecutors.
 *
 * @author Kyle Littlefield (klittle)
 */
FakeStopwatch (/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java)/**
   * The stopwatch gathers events and presents them as strings. R0.6 means a delay of 0.6 seconds
   * caused by the (R)ateLimiter U1.0 means the (U)ser caused the stopwatch to sleep for a second.
   */
RateLimiterTest (/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java)/**
 * Tests for RateLimiter.
 *
 * @author Dimitris Andreou
 */
RunnablesTest (/guava-tests/test/com/google/common/util/concurrent/RunnablesTest.java)/**
 * Unit tests for {@link Runnables}.
 *
 * @author Olivier Pernet
 */
SequentialExecutorTest (/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java)/**
 * Tests {@link SequentialExecutor}.
 *
 * @author JJ Furman
 */
SnappyShutdownService (/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java)/**
   * This service will shutdown very quickly after stopAsync is called and uses a background thread
   * so that we know that the stopping() listeners will execute on a different thread than the
   * terminated() listeners.
   */
ServiceManagerTest (/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java)/**
 * Tests for {@link ServiceManager}.
 *
 * @author Luke Sandberg
 * @author Chris Nokleberg
 */
ServiceTest (/guava-tests/test/com/google/common/util/concurrent/ServiceTest.java)/** Unit tests for {@link Service} */
SettableFutureTest (/guava-tests/test/com/google/common/util/concurrent/SettableFutureTest.java)/**
 * Test cases for {@link SettableFuture}.
 *
 * @author Sven Mawson
 */
StripedTest (/guava-tests/test/com/google/common/util/concurrent/StripedTest.java)/**
 * Tests for Striped.
 *
 * @author Dimitris Andreou
 */
TestPlatform (/guava-tests/test/com/google/common/util/concurrent/TestPlatform.java)/** Methods factored out so that they can be emulated differently in GWT. */
TestThread (/guava-tests/test/com/google/common/util/concurrent/TestThread.java)/**
 * A helper for concurrency testing. One or more {@code TestThread} instances are instantiated in a
 * test with reference to the same "lock-like object", and then their interactions with that object
 * are choreographed via the various methods on this class.
 *
 * <p>A "lock-like object" is really any object that may be used for concurrency control. If the
 * {@link #callAndAssertBlocks} method is ever called in a test, the lock-like object must have a
 * method equivalent to {@link java.util.concurrent.locks.ReentrantLock#hasQueuedThread(Thread)}. If
 * the {@link #callAndAssertWaits} method is ever called in a test, the lock-like object must have a
 * method equivalent to {@link
 * java.util.concurrent.locks.ReentrantLock#hasWaiters(java.util.concurrent.locks.Condition)},
 * except that the method parameter must accept whatever condition-like object is passed into {@code
 * callAndAssertWaits} by the test.
 *
 * @param <L> the type of the lock-like object to be used
 * @author Justin T. Sampson
 */
ThreadFactoryBuilderTest (/guava-tests/test/com/google/common/util/concurrent/ThreadFactoryBuilderTest.java)/**
 * Tests for ThreadFactoryBuilder.
 *
 * @author Kurt Alfred Kluever
 * @author Martin Buchholz
 */
TrustedInputFutureTest (/guava-tests/test/com/google/common/util/concurrent/TrustedInputFutureTest.java)/**
 * Tests for {@link AbstractFuture} that use a {@link TrustedFuture} for {@link
 * AbstractFuture#setFuture} calls.
 */
TrustedListenableFutureTaskTest (/guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java)/** Test case for {@link TrustedListenableFutureTask}. */
UncheckedThrowingFuture (/guava-tests/test/com/google/common/util/concurrent/UncheckedThrowingFuture.java)/**
 * A {@link Future} implementation which always throws directly from calls to {@code get()} (i.e.
 * not wrapped in {@code ExecutionException}. For just a normal failure, use {@link
 * SettableFuture}).
 *
 * <p>Useful for testing the behavior of Future utilities against odd futures.
 *
 * @author Anthony Zana
 */
UninterruptibleFutureTest (/guava-tests/test/com/google/common/util/concurrent/UninterruptibleFutureTest.java)/**
 * Unit test for {@link Uninterruptibles#getUninterruptibly}
 *
 * @author Kevin Bourrillion
 * @author Chris Povirk
 */
Completion (/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java)/**
   * Wrapper around {@link Stopwatch} which also contains an "expected completion time." Creating a
   * {@code Completion} starts the underlying stopwatch.
   */
TimedPutQueue (/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java)/** Manages a {@link BlockingQueue} and associated timings for a {@code put} call. */
TimedTakeQueue (/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java)/** Manages a {@link BlockingQueue} and associated timings for a {@code take} call. */
TimedSemaphore (/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java)/** Manages a {@link Semaphore} and associated timings. */
UntrustedInputFutureTest (/guava-tests/test/com/google/common/util/concurrent/UntrustedInputFutureTest.java)/**
 * Tests for {@link AbstractFuture} that use a non-{@link TrustedFuture} for {@link
 * AbstractFuture#setFuture} calls.
 */
WrappingExecutorServiceTest (/guava-tests/test/com/google/common/util/concurrent/WrappingExecutorServiceTest.java)/**
 * Test for {@link WrappingExecutorService}
 *
 * @author Chris Nokleberg
 */
WrappingScheduledExecutorServiceTest (/guava-tests/test/com/google/common/util/concurrent/WrappingScheduledExecutorServiceTest.java)/**
 * Test for {@link WrappingScheduledExecutorService}
 *
 * @author Luke Sandberg
 */
XmlEscapersTest (/guava-tests/test/com/google/common/xml/XmlEscapersTest.java)/**
 * Tests for the {@link XmlEscapers} class.
 *
 * @author Alex Matevossian
 * @author David Beaumont
 */
CharMatcherRewrite (/refactorings/CharMatcherRewrite.java)/**
 * Refaster refactorings to rewrite uses of CharMatcher static constants to the static factory
 * methods.
 */
TraverserRewrite (/refactorings/TraverserRewrite.java)/**
 * Refaster rules to rewrite usages of {@code com.google.common.collect.TreeTraverser} in terms of
 * {@code com.google.common.graph.Traverser}.
 */
