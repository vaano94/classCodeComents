AnimationEndListener (/client/src/main/java/com/vaadin/client/AnimationUtil.java)/** For internal use only. May be removed or replaced in the future. */
AnimationUtil (/client/src/main/java/com/vaadin/client/AnimationUtil.java)/**
 * Utility methods for working with CSS transitions and animations.
 *
 * @author Vaadin Ltd
 * @since 7.3
 */
JsoConfiguration (/client/src/main/java/com/vaadin/client/ApplicationConfiguration.java)/**
     * Helper class for reading configuration options from the bootstap
     * javascript
     *
     * @since 7.0
     */
ErrorMessage (/client/src/main/java/com/vaadin/client/ApplicationConfiguration.java)/**
     * Wraps a native javascript object containing fields for an error message.
     *
     * @since 7.0
     */
CommunicationHandler (/client/src/main/java/com/vaadin/client/ApplicationConnection.java)/**
     * The communication handler methods are called at certain points during
     * communication with the server. This allows for making add-ons that keep
     * track of different aspects of the communication.
     */
ApplicationStoppedEvent (/client/src/main/java/com/vaadin/client/ApplicationConnection.java)/**
     * Event triggered when a application is stopped by calling
     * {@link ApplicationConnection#setApplicationRunning(false)}.
     *
     * To listen for the event add a {@link ApplicationStoppedHandler} by
     * invoking
     * {@link ApplicationConnection#addHandler(GwtEvent.Type, ApplicationStoppedHandler)}
     * to the {@link ApplicationConnection}
     *
     * @since 7.1.8
     * @author Vaadin Ltd
     */
CommunicationErrorHandler (/client/src/main/java/com/vaadin/client/ApplicationConnection.java)/**
     * Allows custom handling of communication errors.
     */
ApplicationStoppedHandler (/client/src/main/java/com/vaadin/client/ApplicationConnection.java)/**
     * A listener for listening to application stopped events. The listener can
     * be added to a {@link ApplicationConnection} by invoking
     * {@link ApplicationConnection#addHandler(GwtEvent.Type, ApplicationStoppedHandler)}
     *
     * @since 7.1.8
     * @author Vaadin Ltd
     */
ApplicationConnection (/client/src/main/java/com/vaadin/client/ApplicationConnection.java)/**
 * This is the client side communication "engine", managing client-server
 * communication with its server side counterpart
 * com.vaadin.server.VaadinService.
 *
 * Client-side connectors receive updates from the corresponding server-side
 * connector (typically component) as state updates or RPC calls. The connector
 * has the possibility to communicate back with its server side counter part
 * through RPC calls.
 *
 * TODO document better
 *
 * Entry point classes (widgetsets) define <code>onModuleLoad()</code>.
 */
BrowserInfo (/client/src/main/java/com/vaadin/client/BrowserInfo.java)/**
 * Class used to query information about web browser.
 *
 * Browser details are detected only once and those are stored in this singleton
 * class.
 *
 */
FragmentedMessage (/client/src/main/java/com/vaadin/client/communication/AtmospherePushConnection.java)/**
     * Represents a message that should be sent as multiple fragments.
     */
AtmospherePushConnection (/client/src/main/java/com/vaadin/client/communication/AtmospherePushConnection.java)/**
 * The default {@link PushConnection} implementation that uses Atmosphere for
 * handling the communication channel.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
ConnectionStateHandler (/client/src/main/java/com/vaadin/client/communication/ConnectionStateHandler.java)/**
 * Interface for handling problems and other events which occur during
 * communication with the server.
 *
 * The handler is responsible for handling any problem in XHR, heartbeat and
 * push connections in a way it sees fit. The default implementation is
 * {@link DefaultConnectionStateHandler}.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
Date_Serializer (/client/src/main/java/com/vaadin/client/communication/Date_Serializer.java)/**
 * Client side serializer/deserializer for java.util.Date.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
DefaultConnectionStateHandler (/client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java)/**
 * Default implementation of the connection state handler.
 * <p>
 * Handles temporary errors by showing a reconnect dialog to the user while
 * trying to re-establish the connection to the server and re-send the pending
 * message.
 * <p>
 * Handles permanent errors by showing a critical system notification to the
 * user
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
DefaultReconnectDialog (/client/src/main/java/com/vaadin/client/communication/DefaultReconnectDialog.java)/**
 * The default implementation of the reconnect dialog.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
Heartbeat (/client/src/main/java/com/vaadin/client/communication/Heartbeat.java)/**
 * Handles sending of heartbeats to the server and reacting to the response.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
JavaScriptMethodInvocation (/client/src/main/java/com/vaadin/client/communication/JavaScriptMethodInvocation.java)/**
 * A {@link MethodInvocation} that originates from JavaScript. This means that
 * there might not be any type information available on the client.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
JsonDecoder (/client/src/main/java/com/vaadin/client/communication/JsonDecoder.java)/**
 * Client side decoder for decodeing shared state and other values from JSON
 * received from the server.
 *
 * Currently, basic data types as well as Map, String[] and Object[] are
 * supported, where maps and Object[] can contain other supported data types.
 *
 * TODO extensible type support
 *
 * @since 7.0
 */
JsonEncoder (/client/src/main/java/com/vaadin/client/communication/JsonEncoder.java)/**
 * Encoder for converting RPC parameters and other values to JSON for transfer
 * between the client and the server.
 *
 * Currently, basic data types as well as Map, String[] and Object[] are
 * supported, where maps and Object[] can contain other supported data types.
 *
 * TODO extensible type support
 *
 * @since 7.0
 */
JSONSerializer (/client/src/main/java/com/vaadin/client/communication/JSONSerializer.java)/**
 * Implementors of this interface knows how to serialize an Object of a given
 * type to JSON and how to deserialize the JSON back into an object.
 * <p>
 * The {@link #serialize(Object, ApplicationConnection)} and
 * {@link #deserialize(Type, JsonValue, ApplicationConnection)} methods must be
 * symmetric so they can be chained and produce the original result (or an equal
 * result).
 * <p>
 * Each {@link JSONSerializer} implementation can handle an object of a single
 * type - see {@link Type#findSerializer()}.
 * <p>
 * This is the client side interface, see
 * com.vaadin.server.communication.JSONSerializer for the server side interface.
 *
 * @since 7.0
 */
ConnectorHierarchyUpdateResult (/client/src/main/java/com/vaadin/client/communication/MessageHandler.java)/**
     * Helper used to return two values when updating the connector hierarchy.
     */
PendingUIDLMessage (/client/src/main/java/com/vaadin/client/communication/MessageHandler.java)/**
     * Data structure holding information about pending UIDL messages.
     */
MessageHandler (/client/src/main/java/com/vaadin/client/communication/MessageHandler.java)/**
 * A MessageHandler is responsible for handling all incoming messages (JSON)
 * from the server (state changes, RPCs and other updates) and ensuring that the
 * connectors are updated accordingly.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
MessageSender (/client/src/main/java/com/vaadin/client/communication/MessageSender.java)/**
 * MessageSender is responsible for sending messages to the server.
 * <p>
 * Internally uses {@link XhrConnection} and/or {@link PushConnection} for
 * delivering messages, depending on the application configuration.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
PushConnection (/client/src/main/java/com/vaadin/client/communication/PushConnection.java)/**
 * Represents the client-side endpoint of a bidirectional ("push") communication
 * channel. Can be used to send UIDL request messages to the server and to
 * receive UIDL messages from the server (either asynchronously or as a response
 * to a UIDL request.) Delegates the UIDL handling to the
 * {@link ApplicationConnection}.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
ReconnectDialog (/client/src/main/java/com/vaadin/client/communication/ReconnectDialog.java)/**
 * Interface which must be implemented by the reconnect dialog.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
RpcManager (/client/src/main/java/com/vaadin/client/communication/RpcManager.java)/**
 * Client side RPC manager that can invoke methods based on RPC calls received
 * from the server.
 *
 * A GWT generator is used to create an implementation of this class at
 * run-time.
 *
 * @since 7.0
 */
RpcProxy (/client/src/main/java/com/vaadin/client/communication/RpcProxy.java)/**
 * Class for creating proxy instances for Client to Server RPC.
 *
 * @since 7.0
 */
ServerRpcQueue (/client/src/main/java/com/vaadin/client/communication/ServerRpcQueue.java)/**
 * Manages the queue of server invocations (RPC) which are waiting to be sent to
 * the server.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
StateChangeHandler (/client/src/main/java/com/vaadin/client/communication/StateChangeEvent.java)/**
     * Event handler that gets notified whenever any part of the state has been
     * updated by the server.
     *
     * @author Vaadin Ltd
     * @since 7.0.0
     */
TranslatedURLReference (/client/src/main/java/com/vaadin/client/communication/TranslatedURLReference.java)/**
 * A URLReference implementation which does late URL translation to be able to
 * re-translate URLs if e.g. the theme changes
 *
 * @since 7.3
 * @author Vaadin Ltd
 */
XhrConnection (/client/src/main/java/com/vaadin/client/communication/XhrConnection.java)/**
 * Provides a connection to the /UIDL url on the server and knows how to send
 * messages to that end point.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
XhrConnectionError (/client/src/main/java/com/vaadin/client/communication/XhrConnectionError.java)/**
 * XhrConnectionError provides detail about an error which occurred during an
 * XHR request to the server.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
ComponentConnector (/client/src/main/java/com/vaadin/client/ComponentConnector.java)/**
 * An interface used by client-side widgets or paintable parts to receive
 * updates from the corresponding server-side components in the form of
 * {@link UIDL}.
 *
 * Updates can be sent back to the server using the
 * {@link ApplicationConnection#updateVariable()} methods.
 */
ComponentLocator (/client/src/main/java/com/vaadin/client/componentlocator/ComponentLocator.java)/**
 * ComponentLocator provides methods for generating a String locator for a given
 * DOM element and for locating a DOM element using a String locator.
 * <p>
 * The main use for this class is locating components for automated testing
 * purposes.
 *
 * @since 7.2, moved from {@link com.vaadin.client.ComponentLocator}
 */
LegacyLocatorStrategy (/client/src/main/java/com/vaadin/client/componentlocator/LegacyLocatorStrategy.java)/**
 * The LegacyLocatorStrategy class handles the legacy locator syntax that was
 * introduced in version 5.4 of the framework. The legacy locator strategy is
 * always used if no other strategy claims responsibility for a locator string.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
LocatorStrategy (/client/src/main/java/com/vaadin/client/componentlocator/LocatorStrategy.java)/**
 * This interface should be implemented by all locator strategies. A locator
 * strategy is responsible for generating and decoding a string that identifies
 * an element in the DOM. A strategy can implement its own syntax for the
 * locator string, which may be completely different from any other strategy's
 * syntax.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
LocatorUtil (/client/src/main/java/com/vaadin/client/componentlocator/LocatorUtil.java)/**
 * Common String manipulator utilities used in VaadinFinderLocatorStrategy and
 * SelectorPredicates.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
SelectorPredicate (/client/src/main/java/com/vaadin/client/componentlocator/SelectorPredicate.java)/**
 * SelectorPredicates are statements about the state of different components
 * that VaadinFinderLocatorStrategy is finding. SelectorPredicates also provide
 * useful information of said components to debug window by giving means to
 * provide better variable naming.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
ConnectorPath (/client/src/main/java/com/vaadin/client/componentlocator/VaadinFinderLocatorStrategy.java)/**
     * Internal descriptor for connector/element/widget name combinations
     */
VaadinFinderLocatorStrategy (/client/src/main/java/com/vaadin/client/componentlocator/VaadinFinderLocatorStrategy.java)/**
 * The VaadinFinder locator strategy implements an XPath-like syntax for
 * locating elements in Vaadin applications. This is used in the new
 * VaadinFinder API in TestBench 4.
 *
 * Examples of the supported syntax:
 * <ul>
 * <li>Find the third text field in the DOM: {@code //VTextField[2]}</li>
 * <li>Find the second button inside the first vertical layout:
 * {@code //VVerticalLayout/VButton[1]}</li>
 * <li>Find the first column on the third row of the "Accounts" table:
 * {@code //VScrollTable[caption="Accounts"]#row[2]/col[0]}</li>
 * </ul>
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
ConnectorHierarchyChangeHandler (/client/src/main/java/com/vaadin/client/ConnectorHierarchyChangeEvent.java)/**
     * Handles connector hierarchy events. You should typically not directly
     * implement this interface, but instead make your connector class extend
     * {@link AbstractHasComponentsConnector} or an appropriate subclass.
     */
ConnectorHierarchyChangeEvent (/client/src/main/java/com/vaadin/client/ConnectorHierarchyChangeEvent.java)/**
 * Event for containing data related to a change in the {@link ServerConnector}
 * hierarchy. A {@link ConnectorHierarchyChangedEvent} is fired when an update
 * from the server has been fully processed and all hierarchy updates have been
 * completed.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 */
AbstractFocusableListingConnector (/client/src/main/java/com/vaadin/client/connectors/AbstractFocusableListingConnector.java)/**
 * Abstract class for listing widget connectors that contains focusable children
 * to track their focus/blur events.
 *
 * @author Vaadin Ltd
 *
 * @param <WIDGET>
 *            widget type which has to allow to register focus/blur handlers
 * @since 8.0
 */
AbstractListingConnector (/client/src/main/java/com/vaadin/client/connectors/AbstractListingConnector.java)/**
 * A base connector class for {@link AbstractListing}.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
MultiSelectWidget (/client/src/main/java/com/vaadin/client/connectors/AbstractMultiSelectConnector.java)/**
     * Abstraction layer to help populate different multiselect widgets based on
     * same JSON data.
     */
AbstractMultiSelectConnector (/client/src/main/java/com/vaadin/client/connectors/AbstractMultiSelectConnector.java)/**
 * A base connector class for multiselects.
 * <p>
 * Does not care about the framework provided selection model for now, instead
 * just passes selection information per item.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
AbstractRendererConnector (/client/src/main/java/com/vaadin/client/connectors/AbstractRendererConnector.java)/**
 * An abstract base class for renderer connectors.
 *
 * @param <T>
 *            the presentation type of the renderer
 */
AbstractSingleSelectConnector (/client/src/main/java/com/vaadin/client/connectors/AbstractSingleSelectConnector.java)/**
 * An abstract class for single selection connectors.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
ButtonRendererConnector (/client/src/main/java/com/vaadin/client/connectors/ButtonRendererConnector.java)/**
 * A connector for {@link ButtonRenderer}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ClickableRendererConnector (/client/src/main/java/com/vaadin/client/connectors/ClickableRendererConnector.java)/**
 * An abstract base class for
 * {@link com.vaadin.client.renderers.ClickableRenderer ClickableRenderer}
 * connectors.
 *
 * @param <T>
 *            the presentation type of the renderer
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
VaadinDataSource (/client/src/main/java/com/vaadin/client/connectors/data/DataCommunicatorConnector.java)/**
     * Client-side {@link DataSource} implementation to be used with
     * {@link DataCommunicator}.
     */
DataCommunicatorConnector (/client/src/main/java/com/vaadin/client/connectors/data/DataCommunicatorConnector.java)/**
 * A connector for DataCommunicator class.
 *
 * @since 8.0
 */
HasDataSource (/client/src/main/java/com/vaadin/client/connectors/data/HasDataSource.java)/**
 * A marker interface for connectors that have a data source.
 *
 * @author Vaadin Ltd.
 * @see DataSource
 * @since 8.0
 */
HierarchicalDataCommunicatorConnector (/client/src/main/java/com/vaadin/client/connectors/data/HierarchicalDataCommunicatorConnector.java)/**
 * A connector for HierarchicalDataCommunicator class.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
AbstractGridRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/AbstractGridRendererConnector.java)/**
 * An abstract base class for renderer connectors. A renderer connector is used
 * to link a client-side {@link com.vaadin.client.renderers.Renderer Renderer}
 * to a server-side {@link com.vaadin.ui.renderers.Renderer Renderer}. As a
 * connector, it can use the regular Vaadin RPC and shared state mechanism to
 * pass additional state and information between the client and the server. This
 * base class itself only uses the basic
 * {@link com.vaadin.shared.communication.SharedState SharedState} and no RPC
 * interfaces.
 *
 * @param <T>
 *            the presentation type of the renderer
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
AbstractSelectionModelConnector (/client/src/main/java/com/vaadin/client/connectors/grid/AbstractSelectionModelConnector.java)/**
 * Abstract base class for grid's selection models.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 */
ColumnConnector (/client/src/main/java/com/vaadin/client/connectors/grid/ColumnConnector.java)/**
 * A connector class for columns of the Grid component.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
ComponentRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/ComponentRendererConnector.java)/**
 * Connector for {@link ComponentRenderer}. The renderer wraps the component
 * into a {@link SimplePanel} to allow handling events correctly.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
DateRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/DateRendererConnector.java)/**
 * A connector for {@link com.vaadin.ui.renderers.DateRenderer DateRenderer}.
 * <p>
 * The server-side Renderer operates on dates, but the data is serialized as a
 * string, and displayed as-is on the client side. This is to be able to support
 * the server's locale.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
DetailsChangeHandler (/client/src/main/java/com/vaadin/client/connectors/grid/DetailsManagerConnector.java)/**
     * DataChangeHandler for updating the visibility of detail widgets.
     */
CustomDetailsGenerator (/client/src/main/java/com/vaadin/client/connectors/grid/DetailsManagerConnector.java)/**
     * Height aware details generator for client-side Grid.
     */
DetailsManagerConnector (/client/src/main/java/com/vaadin/client/connectors/grid/DetailsManagerConnector.java)/**
 * Connector class for {@link DetailsManager} of the Grid component.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
CustomEditorHandler (/client/src/main/java/com/vaadin/client/connectors/grid/EditorConnector.java)/**
     * EditorHandler for communicating with the server-side implementation.
     */
EditorConnector (/client/src/main/java/com/vaadin/client/connectors/grid/EditorConnector.java)/**
 * Connector for Grid Editor.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
GridConnectorClientRpc (/client/src/main/java/com/vaadin/client/connectors/grid/GridConnector.java)/**
     * Server-to-client RPC implementation for GridConnector.
     * <p>
     * The scrolling methods must trigger the scrolling only after any potential
     * resizing or other similar action triggered from the server side within
     * the same round trip has had a chance to happen, so there needs to be a
     * delay. The delay is done with <code>scheduleFinally</code> rather than
     * <code>scheduleDeferred</code> because the latter has been known to cause
     * flickering in Grid.
     *
     */
GridConnector (/client/src/main/java/com/vaadin/client/connectors/grid/GridConnector.java)/**
 * A connector class for the typed Grid component.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
GridDragSourceConnector (/client/src/main/java/com/vaadin/client/connectors/grid/GridDragSourceConnector.java)/**
 * Adds HTML5 drag and drop functionality to a
 * {@link com.vaadin.client.widgets.Grid Grid}'s rows. This is the client side
 * counterpart of {@link GridDragSource}.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
GridDropTargetConnector (/client/src/main/java/com/vaadin/client/connectors/grid/GridDropTargetConnector.java)/**
 * Makes Grid an HTML5 drop target. This is the client side counterpart of
 * {@link GridDropTarget}.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
LocalDateRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/LocalDateRendererConnector.java)/**
 * A connector for LocalDateRenderer.
 * <p>
 * The server-side Renderer operates on {@code LocalDate}s, but the data is
 * serialized as a string, and displayed as-is on the client side. This is to be
 * able to support the server's locale.
 *
 * @since 8.1
 * @author Vaadin Ltd
 */
LocalDateTimeRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/LocalDateTimeRendererConnector.java)/**
 * A connector for LocalDateTimeRenderer.
 * <p>
 * The server-side Renderer operates on {@code LocalDateTime}s, but the data is
 * serialized as a string, and displayed as-is on the client side. This is to be
 * able to support the server's locale.
 *
 * @since 8.1
 * @author Vaadin Ltd
 */
MultiSelectionModel (/client/src/main/java/com/vaadin/client/connectors/grid/MultiSelectionModelConnector.java)/**
     * Client side multiselection model implementation.
     */
MultiSelectionModelConnector (/client/src/main/java/com/vaadin/client/connectors/grid/MultiSelectionModelConnector.java)/**
 * Connector for server side multiselection model implementation.
 * <p>
 * This selection model displays a selection column {@link SelectionColumn} as
 * the first column of the grid.
 * <p>
 * Implementation detail: The Grid selection is updated immediately on client
 * side, without waiting for the server response.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 */
NoSelectionModelConnector (/client/src/main/java/com/vaadin/client/connectors/grid/NoSelectionModelConnector.java)/**
 * Connector for grids selection model that doesn't allow selecting anything.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 */
NumberRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/NumberRendererConnector.java)/**
 * A connector for {@link com.vaadin.ui.renderers.NumberRenderer
 * NumberRenderer}.
 * <p>
 * The server-side Renderer operates on numbers, but the data is serialized as a
 * string, and displayed as-is on the client side. This is to be able to support
 * the server's locale.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
ProgressBarRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/ProgressBarRendererConnector.java)/**
 * A connector for {@link ProgressBarRenderer}.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
SingleSelectionModel (/client/src/main/java/com/vaadin/client/connectors/grid/SingleSelectionModelConnector.java)/**
     * Single selection model for grid.
     */
SingleSelectionModelConnector (/client/src/main/java/com/vaadin/client/connectors/grid/SingleSelectionModelConnector.java)/**
 * Client side connector for grid single selection model.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
TextRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/TextRendererConnector.java)/**
 * A connector for {@link TextRenderer}.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
TreeGridDragSourceConnector (/client/src/main/java/com/vaadin/client/connectors/grid/TreeGridDragSourceConnector.java)/**
 * Adds HTML5 drag and drop functionality to a TreeGrid's rows. This is the
 * client side counterpart of {@link TreeGridDragSource}.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
TreeGridDropTargetConnector (/client/src/main/java/com/vaadin/client/connectors/grid/TreeGridDropTargetConnector.java)/**
 * Makes TreeGrid an HTML5 drop target. This is the client side counterpart of
 * {@link TreeGridDropTarget}.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
TreeRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/TreeRendererConnector.java)/**
 * Connector for TreeRenderer.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
UnsafeHtmlRendererConnector (/client/src/main/java/com/vaadin/client/connectors/grid/UnsafeHtmlRendererConnector.java)/**
 * A connector for {@link UnsafeHtmlRenderer}.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
ImageRendererConnector (/client/src/main/java/com/vaadin/client/connectors/ImageRendererConnector.java)/**
 * A connector for {@link ImageRenderer}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TreeMultiSelectionModelConnector (/client/src/main/java/com/vaadin/client/connectors/tree/TreeMultiSelectionModelConnector.java)/**
 * Connector for the server side multiselection model of the tree component.
 * <p>
 * Implementation detail: The selection is updated immediately on client side,
 * without waiting for the server response.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
ContainerResizedListener (/client/src/main/java/com/vaadin/client/ContainerResizedListener.java)/**
 * ContainerResizedListener interface is useful for Widgets that support
 * relative sizes and who need some additional sizing logic.
 *
 * @deprecated As of 7.0, serves no purpose. Use {@link LayoutManager} and its
 *             methods instead.
 */
CSSRule (/client/src/main/java/com/vaadin/client/CSSRule.java)/**
 * Utility class for fetching CSS properties from DOM StyleSheets JS object.
 */
RequestRowsCallback (/client/src/main/java/com/vaadin/client/data/AbstractRemoteDataSource.java)/**
     * Callback used by
     * {@link AbstractRemoteDataSource#requestRows(int, int, RequestRowsCallback)}
     * to pass data to the underlying implementation when data has been fetched.
     *
     * @param <T>
     *            the row type
     */
AbstractRemoteDataSource (/client/src/main/java/com/vaadin/client/data/AbstractRemoteDataSource.java)/**
 * Base implementation for data sources that fetch data from a remote system.
 * This class takes care of caching data and communicating with the data source
 * user. An implementation of this class should override
 * {@link #requestRows(int, int, RequestRowsCallback)} to trigger asynchronously
 * loading of data and then pass the loaded data into the provided callback.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @param <T>
 *            the row type
 */
AbstractBasicSymmetricalCacheStrategy (/client/src/main/java/com/vaadin/client/data/CacheStrategy.java)/**
     * A helper class for creating a simple symmetric cache strategy that uses
     * the same logic for both rows before and after the currently cached range.
     * <p>
     * This simple approach rules out more advanced heuristics that would take
     * the current scrolling direction or past scrolling behavior into account.
     */
DefaultCacheStrategy (/client/src/main/java/com/vaadin/client/data/CacheStrategy.java)/**
     * The default cache strategy used by {@link AbstractRemoteDataSource},
     * using multiples of the page size for determining the minimum and maximum
     * number of items to keep in the cache. By default, at least three times
     * the page size both before and after the currently used range are kept in
     * the cache and items are discarded if there's yet another page size worth
     * of items cached in either direction.
     */
CacheStrategy (/client/src/main/java/com/vaadin/client/data/CacheStrategy.java)/**
 * Determines what data an {@link AbstractRemoteDataSource} should fetch and
 * keep cached.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DataChangeHandler (/client/src/main/java/com/vaadin/client/data/DataChangeHandler.java)/**
 * Callback interface used by {@link DataSource} to inform its user about
 * updates to the data.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RowHandle (/client/src/main/java/com/vaadin/client/data/DataSource.java)/**
     * A handle that contains information on whether a row should be
     * {@link #pin() pinned} or {@link #unpin() unpinned}, and also always the
     * most recent representation for that particular row.
     *
     * @param <T>
     *            the row type
     */
DataSource (/client/src/main/java/com/vaadin/client/data/DataSource.java)/**
 * Source of data for widgets showing lazily loaded data based on indexable
 * items (e.g. rows) of a specified type. The data source is a lazy view into a
 * larger data set.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @param <T>
 *            the row type
 */
DelayedResetScheduler (/client/src/main/java/com/vaadin/client/data/SimpleDataChangeHandler.java)/**
     * Class to request the data source to get the full data set.
     */
SimpleDataChangeHandler (/client/src/main/java/com/vaadin/client/data/SimpleDataChangeHandler.java)/**
 * Helper class for creating a {@link DataChangeHandler} for a Widget that does
 * not support lazy loading.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
DateTimeService (/client/src/main/java/com/vaadin/client/DateTimeService.java)/**
 * This class provides date/time parsing services to all components on the
 * client side.
 *
 * @author Vaadin Ltd.
 *
 */
AnalyzeLayoutsPanel (/client/src/main/java/com/vaadin/client/debug/internal/AnalyzeLayoutsPanel.java)/**
 * Analyze layouts view panel of the debug window.
 *
 * @since 7.1.4
 */
ConnectorInfoPanel (/client/src/main/java/com/vaadin/client/debug/internal/ConnectorInfoPanel.java)/**
 * Connector information view panel of the debug window.
 *
 * @since 7.1.4
 */
DebugButton (/client/src/main/java/com/vaadin/client/debug/internal/DebugButton.java)/**
 * Simple extension of {@link Button} that is preconfigured with for use in
 * {@link VDebugWindow}. Uses icon-font for icons, and allows title to be
 * specified in the constructor.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
ErrorNotificationHandler (/client/src/main/java/com/vaadin/client/debug/internal/ErrorNotificationHandler.java)/**
 * Log message handler that shows big red notification for {@link Level#SEVERE}
 * messages that have a throwable.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
HierarchyPanel (/client/src/main/java/com/vaadin/client/debug/internal/HierarchyPanel.java)/**
 * Hierarchy view panel of the debug window. This class can be used in various
 * debug window sections to show the current connector hierarchy.
 *
 * @since 7.1.4
 */
HierarchySection (/client/src/main/java/com/vaadin/client/debug/internal/HierarchySection.java)/**
 * Provides functionality for examining the UI component hierarchy.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
Highlight (/client/src/main/java/com/vaadin/client/debug/internal/Highlight.java)/**
 * Highlights a widget in the UI by overlaying a semi-transparent colored div.
 * <p>
 * Multiple highlights can be added, then selectively removed with
 * {@link #hide(Element)} or all at once with {@link #hideAll()}.
 * </p>
 * <p>
 * Note that highlights are intended to be short-term; highlights do not move or
 * disappear with the highlighted widget, and it is also fairly likely that
 * someone else calls {@link #hideAll()} eventually.
 * </p>
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
InfoSection (/client/src/main/java/com/vaadin/client/debug/internal/InfoSection.java)/**
 * Information section of the debug window.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
LogSection (/client/src/main/java/com/vaadin/client/debug/internal/LogSection.java)/**
 * Displays the log messages.
 * <p>
 * Scroll lock state is persisted.
 * </p>
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
NetworkSection (/client/src/main/java/com/vaadin/client/debug/internal/NetworkSection.java)/**
 * Displays network activity; requests and responses.
 *
 * Currently only displays responses in a simple manner.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
OptimizedWidgetsetPanel (/client/src/main/java/com/vaadin/client/debug/internal/OptimizedWidgetsetPanel.java)/**
 * Optimized widgetset view panel of the debug window.
 *
 * @since 7.1.4
 */
ProfilerSection (/client/src/main/java/com/vaadin/client/debug/internal/ProfilerSection.java)/**
 * Debug window section for investigating {@link Profiler} data. This section is
 * only visible if the profiler is enabled ({@link Profiler#isEnabled()}).
 *
 * @since 7.1
 * @author Vaadin Ltd
 *
 * @see Profiler
 */
Section (/client/src/main/java/com/vaadin/client/debug/internal/Section.java)/**
 * A Section is displayed as a tab in the {@link VDebugWindow}.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
SelectConnectorListener (/client/src/main/java/com/vaadin/client/debug/internal/SelectConnectorListener.java)/**
 * Listener for the selection of a connector in the debug window.
 *
 * @since 7.1.4
 */
SelectorPath (/client/src/main/java/com/vaadin/client/debug/internal/SelectorPath.java)/**
 * A single segment of a selector path pointing to an Element.
 * <p>
 * This class should be considered internal to the framework and may change at
 * any time.
 * <p>
 *
 * @since 7.1.x
 */
SelectorWidget (/client/src/main/java/com/vaadin/client/debug/internal/TestBenchSection.java)/**
     * Selector widget showing a selector in a program-usable form.
     */
TestBenchSection (/client/src/main/java/com/vaadin/client/debug/internal/TestBenchSection.java)/**
 * Provides functionality for picking selectors for Vaadin TestBench.
 *
 * @since 7.1.x
 * @author Vaadin Ltd
 */
Menu (/client/src/main/java/com/vaadin/client/debug/internal/VDebugWindow.java)/**
     * Popup menu for {@link VDebugWindow}.
     *
     * @since 7.1
     * @author Vaadin Ltd
     */
MouseHandler (/client/src/main/java/com/vaadin/client/debug/internal/VDebugWindow.java)/**
     * Handler for resizing and moving window, also updates cursor on mousemove.
     *
     * @since 7.1
     * @author Vaadin Ltd
     */
VDebugWindow (/client/src/main/java/com/vaadin/client/debug/internal/VDebugWindow.java)/**
 * Debug window implementation.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
DeferredWorker (/client/src/main/java/com/vaadin/client/DeferredWorker.java)/**
 * Give widgets and connectors the possibility to indicate to the framework that
 * there is work scheduled to be executed in the near future and that the
 * framework should wait for this work to complete before assuming the UI has
 * reached a steady state.
 *
 * @since 7.3
 * @author Vaadin Ltd
 */
DependencyLoader (/client/src/main/java/com/vaadin/client/DependencyLoader.java)/**
 * Handles loading of dependencies (style sheets and scripts) in the
 * application.
 *
 * Use {@link ApplicationConfiguration#runWhenDependenciesLoaded(Command)} to
 * execute a command after all dependencies have finished loading.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
InputEvent (/client/src/main/java/com/vaadin/client/event/InputEvent.java)/**
 * Represents a native InputEvent.
 *
 * @since 8.0
 */
InputHandler (/client/src/main/java/com/vaadin/client/event/InputHandler.java)/**
 * Handler interface for {@link InputEvent}s.
 *
 * @since 8.0
 */
PointerCancelEvent (/client/src/main/java/com/vaadin/client/event/PointerCancelEvent.java)/**
 * Represents a native PointerCancelEvent.
 *
 * @since 7.2
 */
PointerCancelHandler (/client/src/main/java/com/vaadin/client/event/PointerCancelHandler.java)/**
 * Handler interface for {@link PointerCancelEvent} events.
 *
 * @since 7.2
 */
PointerDownEvent (/client/src/main/java/com/vaadin/client/event/PointerDownEvent.java)/**
 * Represents a native PointerDownEvent.
 *
 * @since 7.2
 */
PointerDownHandler (/client/src/main/java/com/vaadin/client/event/PointerDownHandler.java)/**
 * Handler interface for {@link PointerDownEvent} events.
 *
 * @since 7.2
 */
PointerEvent (/client/src/main/java/com/vaadin/client/event/PointerEvent.java)/**
 * Abstract class representing Pointer events.
 *
 * @param <H>
 *            handler type
 *
 * @since 7.2
 */
PointerEventSupport (/client/src/main/java/com/vaadin/client/event/PointerEventSupport.java)/**
 * Main class for pointer event support. Contains functionality for determining
 * if pointer events are available or not.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
PointerEventSupportImpl (/client/src/main/java/com/vaadin/client/event/PointerEventSupportImpl.java)/**
 * Main pointer event support implementation class. Made for browser without
 * pointer event support.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
PointerEventSupportImplIE10 (/client/src/main/java/com/vaadin/client/event/PointerEventSupportImplIE10.java)/**
 * Pointer event support class for IE 10 ("ms" prefixed pointer events).
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
PointerMoveEvent (/client/src/main/java/com/vaadin/client/event/PointerMoveEvent.java)/**
 * Represents a native PointerMoveEvent event.
 *
 * @since 7.2
 */
PointerMoveHandler (/client/src/main/java/com/vaadin/client/event/PointerMoveHandler.java)/**
 * Handler interface for {@link PointerMoveEvent} events.
 *
 * @since 7.2
 */
PointerUpEvent (/client/src/main/java/com/vaadin/client/event/PointerUpEvent.java)/**
 * Represents a native PointerUpEvent.
 *
 * @since 7.2
 */
PointerUpHandler (/client/src/main/java/com/vaadin/client/event/PointerUpHandler.java)/**
 * Handler interface for {@link PointerUpEvent} events.
 *
 * @since 7.2
 */
EventHelper (/client/src/main/java/com/vaadin/client/EventHelper.java)/**
 * Helper class for attaching/detaching handlers for Vaadin client side
 * components, based on identifiers in UIDL. Helpers expect Paintables to be
 * both listeners and sources for events. This helper cannot be used for more
 * complex widgets.
 * <p>
 * Possible current registration is given as parameter. The returned
 * registration (possibly the same as given, should be store for next update.
 * <p>
 * Pseudocode what helpers do:
 *
 * <pre>
 *
 * if paintable has event listener in UIDL
 *      if registration is null
 *              register paintable as as handler for event
 *      return the registration
 * else
 *      if registration is not null
 *              remove the handler from paintable
 *      return null
 *
 *
 * </pre>
 */
AbstractEventTriggerExtensionConnector (/client/src/main/java/com/vaadin/client/extensions/AbstractEventTriggerExtensionConnector.java)/**
 * An abstract extension connector with trigger support. Implementor's
 * {@link #trigger} method call may be initiated by another {@code Component}
 * without server round-trip. The class is used to overcome browser security
 * limitations. For instance, window may not be open with the round-trip.
 *
 * @author Vaadin Ltd.
 * @since 8.4
 */
AbstractExtensionConnector (/client/src/main/java/com/vaadin/client/extensions/AbstractExtensionConnector.java)/**
 * An abstract implementation for extension connectors.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 */
BrowserWindowOpenerConnector (/client/src/main/java/com/vaadin/client/extensions/BrowserWindowOpenerConnector.java)/**
 * Client-side code for {@link BrowserWindowOpener}.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
DragSourceExtensionConnector (/client/src/main/java/com/vaadin/client/extensions/DragSourceExtensionConnector.java)/**
 * Extension to add drag source functionality to a widget for using HTML5 drag
 * and drop. Client side counterpart of {@link DragSourceExtension}.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
DropTargetExtensionConnector (/client/src/main/java/com/vaadin/client/extensions/DropTargetExtensionConnector.java)/**
 * Extension to add drop target functionality to a widget for using HTML5 drag
 * and drop. Client side counterpart of {@link DropTargetExtension}.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
EventTrigger (/client/src/main/java/com/vaadin/client/extensions/EventTrigger.java)/**
 * Provides support for triggering an event from a given parts of a component or
 * using various events.
 * <p>
 * Used by features such as {@link FileDownloaderConnector} and
 * {@link BrowserWindowOpenerConnector} to listen to a given event on a given
 * element. The component is the one responsible for deciding the element and
 * the event to listen to.
 * <p>
 * This is the client side interface.
 * <p>
 * If the component on the server side implements
 * {@code com.vaadin.server.EventTrigger} then this interface should be
 * implemented by the {@link Widget} used by the client side connector.
 *
 * @since 8.4
 */
FileUploadXHR (/client/src/main/java/com/vaadin/client/extensions/FileDropTargetConnector.java)/**
     * XHR that is used for uploading a file to the server.
     */
FileDropTargetConnector (/client/src/main/java/com/vaadin/client/extensions/FileDropTargetConnector.java)/**
 * Extension to add file drop target functionality to a widget. It allows
 * dropping files onto the widget and uploading the dropped files to the server.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
ResponsiveConnector (/client/src/main/java/com/vaadin/client/extensions/ResponsiveConnector.java)/**
 * The client side connector for the Responsive extension.
 *
 * @author Vaadin Ltd
 * @since 7.2
 */
Focusable (/client/src/main/java/com/vaadin/client/Focusable.java)/**
 * GWT's HasFocus is way too overkill for just receiving focus in simple
 * components. Vaadin uses this interface in addition to GWT's HasFocus to pass
 * focus requests from server to actual ui widgets in browsers.
 *
 * So in to make your server side focusable component receive focus on client
 * side it must either implement this or HasFocus interface.
 */
HasChildMeasurementHintConnector (/client/src/main/java/com/vaadin/client/HasChildMeasurementHintConnector.java)/**
 * Connector with layout measuring hint. Used to improve granularity of control
 * over child component measurements.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
HasComponentsConnector (/client/src/main/java/com/vaadin/client/HasComponentsConnector.java)/**
 * An interface used by client-side connectors whose widget is a component
 * container (implements {@link HasWidgets}).
 */
HasWidget (/client/src/main/java/com/vaadin/client/HasWidget.java)/**
 * An interface used by client-side connectors which have widgets.
 */
LocaleService (/client/src/main/java/com/vaadin/client/LocaleService.java)/**
 * Date / time etc. localization service for all widgets. Caches all loaded
 * locales as JSONObjects.
 *
 * @author Vaadin Ltd.
 *
 */
JsniInvoker (/client/src/main/java/com/vaadin/client/metadata/JsniInvoker.java)/**
 * Special {@link Invoker} that uses JSNI to invoke methods with limited
 * visibility.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
OnStateChangeMethod (/client/src/main/java/com/vaadin/client/metadata/OnStateChangeMethod.java)/**
 * Encapsulates the data that the widgetset compiler generates for supporting a
 * connector method annotated with {@link OnStateChange}.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
MouseEventDetailsBuilder (/client/src/main/java/com/vaadin/client/MouseEventDetailsBuilder.java)/**
 * Helper class for constructing a MouseEventDetails object from a
 * {@link NativeEvent}.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 */
Paintable (/client/src/main/java/com/vaadin/client/Paintable.java)/**
 * An interface used by client-side widgets or paintable parts to receive
 * updates from the corresponding server-side components in the form of
 * {@link UIDL}.
 *
 * Updates can be sent back to the server using the
 * {@link ApplicationConnection#updateVariable()} methods.
 */
EnabledProfiler (/client/src/main/java/com/vaadin/client/Profiler.java)/**
     * Class to include using deferred binding to enable the profiling.
     *
     * @author Vaadin Ltd
     * @since 7.0.0
     */
ProfilerResultConsumer (/client/src/main/java/com/vaadin/client/Profiler.java)/**
     * Interface for getting data from the {@link Profiler}.
     * <p>
     * <b>Warning!</b> This interface is most likely to change in the future
     *
     * @since 7.1
     * @author Vaadin Ltd
     */
Node (/client/src/main/java/com/vaadin/client/Profiler.java)/**
     * A hierarchical representation of the time spent running a named block of
     * code.
     * <p>
     * <b>Warning!</b> This class is most likely to change in the future and is
     * therefore defined in this class in an internal package instead of
     * Profiler where it might seem more logical.
     */
Profiler (/client/src/main/java/com/vaadin/client/Profiler.java)/**
 * Lightweight profiling tool that can be used to collect profiling data with
 * zero overhead unless enabled. To enable profiling, add
 * <code>&lt;set-property name="vaadin.profiler" value="true" /&gt;</code> to
 * your .gwt.xml file.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ButtonRenderer (/client/src/main/java/com/vaadin/client/renderers/ButtonRenderer.java)/**
 * A Renderer that displays buttons with textual captions. The values of the
 * corresponding column are used as the captions. Click handlers can be added to
 * the renderer, invoked when any of the rendered buttons is clicked.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RendererClickHandler (/client/src/main/java/com/vaadin/client/renderers/ClickableRenderer.java)/**
     * A handler for {@link RendererClickEvent renderer click events}.
     *
     * @param <R>
     *            the row type of the containing Grid
     *
     * @see ButtonRenderer#addClickHandler(RendererClickHandler)
     */
RendererClickEvent (/client/src/main/java/com/vaadin/client/renderers/ClickableRenderer.java)/**
     * An event fired when a widget rendered by a ClickableWidgetRenderer
     * subclass is clicked.
     *
     * @param <R>
     *            the row type of the containing Grid
     */
ClickableRenderer (/client/src/main/java/com/vaadin/client/renderers/ClickableRenderer.java)/**
 * An abstract superclass for renderers that render clickable widgets. Click
 * handlers can be added to a renderer to listen to click events emitted by all
 * widgets rendered by the renderer.
 *
 * @param <T>
 *            the presentation (column) type
 * @param <W>
 *            the widget type
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ComplexRenderer (/client/src/main/java/com/vaadin/client/renderers/ComplexRenderer.java)/**
 * Base class for renderers that needs initialization and destruction logic
 * (override {@link #init(FlyweightCell)} and {@link #destroy(FlyweightCell) }
 * and event handling (see {@link #onBrowserEvent(Cell, NativeEvent)},
 * {@link #getConsumedEvents()} and {@link #onActivate()}.
 *
 * <p>
 * Also provides a helper method for hiding the cell contents by overriding
 * {@link #setContentVisible(FlyweightCell, boolean)}
 *
 * @since 7.4.0
 * @author Vaadin Ltd
 */
DateRenderer (/client/src/main/java/com/vaadin/client/renderers/DateRenderer.java)/**
 * A renderer for rendering dates into cells.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HierarchyRendererCellReferenceWrapper (/client/src/main/java/com/vaadin/client/renderers/HierarchyRenderer.java)/**
     * Wrapper for cell references. Used to get the correct inner element to
     * render.
     *
     * @author Vaadin Ltd
     * @since 8.1
     */
HierarchyRenderer (/client/src/main/java/com/vaadin/client/renderers/HierarchyRenderer.java)/**
 * A renderer for displaying hierarchical columns in TreeGrid.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
HtmlRenderer (/client/src/main/java/com/vaadin/client/renderers/HtmlRenderer.java)/**
 * Renders a string as HTML into a cell.
 * <p>
 * The html string is rendered as is without any escaping. It is up to the
 * developer to ensure that the html string honors the {@link SafeHtml}
 * contract. For more information see
 * {@link SafeHtmlUtils#fromSafeConstant(String)}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see SafeHtmlUtils#fromSafeConstant(String)
 */
ImageRenderer (/client/src/main/java/com/vaadin/client/renderers/ImageRenderer.java)/**
 * A renderer that renders an image into a cell. Click handlers can be added to
 * the renderer, invoked every time any of the images rendered by that rendered
 * is clicked.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
NumberRenderer (/client/src/main/java/com/vaadin/client/renderers/NumberRenderer.java)/**
 * Renders a number into a cell using a specific {@link NumberFormat}. By
 * default uses the default number format returned by
 * {@link NumberFormat#getDecimalFormat()}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ProgressBarRenderer (/client/src/main/java/com/vaadin/client/renderers/ProgressBarRenderer.java)/**
 * A Renderer that represents a double value as a graphical progress bar.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
Renderer (/client/src/main/java/com/vaadin/client/renderers/Renderer.java)/**
 * Renderer for rending a value &lt;T&gt; into cell.
 * <p>
 * You can add a renderer to any column by overring the
 * {@link GridColumn#getRenderer()} method and returning your own renderer. You
 * can retrieve the cell element using {@link Cell#getElement()}.
 *
 * @param <T>
 *            The column type
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TextRenderer (/client/src/main/java/com/vaadin/client/renderers/TextRenderer.java)/**
 * Renderer that renders text into a cell.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
WidgetRenderer (/client/src/main/java/com/vaadin/client/renderers/WidgetRenderer.java)/**
 * A renderer for rendering widgets into cells.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @param <T>
 *            the row data type
 * @param <W>
 *            the Widget type
 */
RenderInformation (/client/src/main/java/com/vaadin/client/RenderInformation.java)/**
 * Contains size information about a rendered container and its content area.
 *
 * @author Artur Signell
 *
 */
RenderSpace (/client/src/main/java/com/vaadin/client/RenderSpace.java)/**
 * Contains information about render area.
 */
ResourceLoadEvent (/client/src/main/java/com/vaadin/client/ResourceLoader.java)/**
     * Event fired when a resource has been loaded.
     */
ResourceLoadListener (/client/src/main/java/com/vaadin/client/ResourceLoader.java)/**
     * Event listener that gets notified when a resource has been loaded.
     */
ResourceLoader (/client/src/main/java/com/vaadin/client/ResourceLoader.java)/**
 * ResourceLoader lets you dynamically include external scripts and styles on
 * the page and lets you know when the resource has been loaded.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ServerConnector (/client/src/main/java/com/vaadin/client/ServerConnector.java)/**
 * Interface implemented by all client side classes that can be communicate with
 * the server. Classes implementing this interface are initialized by the
 * framework when needed and have the ability to communicate with the server.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
SimpleTree (/client/src/main/java/com/vaadin/client/SimpleTree.java)/**
 * @author Vaadin Ltd
 *
 * @deprecated as of 7.1. This class was mainly used by the old debug console
 *             but is retained for now for backwards compatibility.
 */
SuperDevMode (/client/src/main/java/com/vaadin/client/SuperDevMode.java)/**
 * Class that enables SuperDevMode using a ?superdevmode parameter in the url.
 *
 * @author Vaadin Ltd
 * @since 7.0
 *
 */
TooltipInfo (/client/src/main/java/com/vaadin/client/TooltipInfo.java)/**
 * An object that contains information about a tooltip, such as the tooltip's
 * title, error message, error level and an ID.
 */
AbsoluteLayoutConnector (/client/src/main/java/com/vaadin/client/ui/absolutelayout/AbsoluteLayoutConnector.java)/**
 * Connects the server side {@link AbsoluteLayout} with the client side
 * counterpart {@link VAbsoluteLayout}.
 */
AbstractComponentContainerConnector (/client/src/main/java/com/vaadin/client/ui/AbstractComponentContainerConnector.java)/**
 * Client side connector for subclasses of AbstractComponentConnector.
 *
 * @since 7.0
 */
AbstractConnector (/client/src/main/java/com/vaadin/client/ui/AbstractConnector.java)/**
 * An abstract implementation of Connector.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 */
AbstractSingleComponentContainerConnector (/client/src/main/java/com/vaadin/client/ui/AbstractSingleComponentContainerConnector.java)/**
 * Client side connector for subclasses of AbstractSingleComponentConnector.
 *
 * @since 7.0
 */
AbstractTextFieldWidget (/client/src/main/java/com/vaadin/client/ui/AbstractTextFieldWidget.java)/**
 * Implemented by all widgets used by a connector extending
 * {@link AbstractTextFieldConnector}.
 *
 * @since 8.0
 */
AriaHelper (/client/src/main/java/com/vaadin/client/ui/aria/AriaHelper.java)/**
 * Helper class that helps to implement the WAI-ARIA functionality.
 */
HandlesAriaCaption (/client/src/main/java/com/vaadin/client/ui/aria/HandlesAriaCaption.java)/**
 * Some Widgets need to handle the caption handling for WAI-ARIA themselfs, as
 * for example the required ids need to be set in a specific way. In such a
 * case, the Widget needs to implement this interface.
 */
HandlesAriaInvalid (/client/src/main/java/com/vaadin/client/ui/aria/HandlesAriaInvalid.java)/**
 * Some Widgets need to handle the required handling for WAI-ARIA themselfs, as
 * this attribute needs to be set to the input element itself. In such a case,
 * the Widget needs to implement this interface.
 */
HandlesAriaRequired (/client/src/main/java/com/vaadin/client/ui/aria/HandlesAriaRequired.java)/**
 * Some Widgets need to handle the required handling for WAI-ARIA themselfs, as
 * this attribute needs to be set to the input element itself. In such a case,
 * the Widget needs to implement this interface.
 */
CheckBoxConnector (/client/src/main/java/com/vaadin/client/ui/checkbox/CheckBoxConnector.java)/**
 * The client-side connector for the {@code CheckBoxGroup} component.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
AbstractColorPickerConnector (/client/src/main/java/com/vaadin/client/ui/colorpicker/AbstractColorPickerConnector.java)/**
 * An abstract class that defines default implementation for a color picker
 * connector.
 *
 * @since 7.0.0
 */
ColorPickerAreaConnector (/client/src/main/java/com/vaadin/client/ui/colorpicker/ColorPickerAreaConnector.java)/**
 * A class that defines an implementation for a color picker connector. Connects
 * the server side {@link com.vaadin.ui.ColorPickerArea} with the client side
 * counterpart {@link VColorPickerArea}
 *
 * @since 7.0.0
 */
ColorPickerConnector (/client/src/main/java/com/vaadin/client/ui/colorpicker/ColorPickerConnector.java)/**
 * A class that defines default implementation for a color picker connector.
 * Connects the server side {@link com.vaadin.ui.ColorPicker} with the client
 * side counterpart {@link VColorPicker}
 *
 * @since 7.0.0
 */
ColorPickerGradientConnector (/client/src/main/java/com/vaadin/client/ui/colorpicker/ColorPickerGradientConnector.java)/**
 * A class that defines the default implementation for a color picker gradient
 * connector. Connects the server side
 * {@link com.vaadin.ui.components.colorpicker.ColorPickerGradient} with the
 * client side counterpart {@link VColorPickerGradient}
 *
 * @since 7.0.0
 */
ColorPickerGridConnector (/client/src/main/java/com/vaadin/client/ui/colorpicker/ColorPickerGridConnector.java)/**
 * A class that defines the default implementation for a color picker grid
 * connector. Connects the server side
 * {@link com.vaadin.ui.components.colorpicker.ColorPickerGrid} with the client
 * side counterpart {@link VColorPickerGrid}
 *
 * @since 7.0.0
 */
VColorPickerGradient (/client/src/main/java/com/vaadin/client/ui/colorpicker/VColorPickerGradient.java)/**
 * Client side implementation for ColorPickerGradient.
 *
 * @since 7.0.0
 *
 */
VColorPickerGrid (/client/src/main/java/com/vaadin/client/ui/colorpicker/VColorPickerGrid.java)/**
 * Client side implementation for ColorPickerGrid.
 *
 * @since 7.0.0
 *
 */
CompositeConnector (/client/src/main/java/com/vaadin/client/ui/composite/CompositeConnector.java)/**
 * Connector for the Composite component.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
ConnectorFocusAndBlurHandler (/client/src/main/java/com/vaadin/client/ui/ConnectorFocusAndBlurHandler.java)/**
 * A handler for focus and blur events which uses {@link FocusAndBlurServerRpc}
 * to transmit received events to the server. Events are only handled if there
 * is a corresponding listener on the server side.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
CssLayoutConnector (/client/src/main/java/com/vaadin/client/ui/csslayout/CssLayoutConnector.java)/**
 * Connects the server side widget {@link CssLayout} with the client side
 * counterpart {@link VCssLayout}.
 */
AbstractInlineDateFieldConnector (/client/src/main/java/com/vaadin/client/ui/datefield/AbstractInlineDateFieldConnector.java)/**
 * Base class for inline data field connector.
 *
 * @author Vaadin Ltd
 *
 * @param <R>
 *            the resolution type which the field is based on (day, month, ...)
 * @param <PANEL>
 *            Subclass of VAbstractCalendarPanel specific for the implementation
 * @since 8.0
 */
AbstractTextualDateConnector (/client/src/main/java/com/vaadin/client/ui/datefield/AbstractTextualDateConnector.java)/**
 * Abstract base class for date fields with textual date representation.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <R>
 *            resolution type
 */
DateFieldConnector (/client/src/main/java/com/vaadin/client/ui/datefield/DateFieldConnector.java)/**
 * @author Vaadin Ltd
 *
 */
DateTimeFieldConnector (/client/src/main/java/com/vaadin/client/ui/datefield/DateTimeFieldConnector.java)/**
 * The client-side connector for AbstractLocalDateTimeField.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
InlineDateFieldConnector (/client/src/main/java/com/vaadin/client/ui/datefield/InlineDateFieldConnector.java)/**
 * The client-side connector for InlineDateField.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
InlineDateTimeFieldConnector (/client/src/main/java/com/vaadin/client/ui/datefield/InlineDateTimeFieldConnector.java)/**
 * The client-side connector for InlineDateTimeField.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
PopupDateFieldConnector (/client/src/main/java/com/vaadin/client/ui/datefield/PopupDateFieldConnector.java)/**
 * The client-side connector for DateField.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
PopupDateTimeFieldConnector (/client/src/main/java/com/vaadin/client/ui/datefield/PopupDateTimeFieldConnector.java)/**
 * The client-side connector for DateTimeField.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
TextualDateConnector (/client/src/main/java/com/vaadin/client/ui/datefield/TextualDateConnector.java)/**
 * Abstract date/time field connector which extend
 * {@link AbstractTextualDateConnector} functionality with widget that shows
 * date/time chooser as a popup panel.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @param <PANEL>
 *            Subclass of VAbstractCalendarPanel specific for the implementation
 * @param <R>
 *            the resolution type which the field is based on (day, month, ...)
 */
DDEventHandleStrategy (/client/src/main/java/com/vaadin/client/ui/dd/DDEventHandleStrategy.java)/**
 * Strategy to handle native preview events for VDragAndDropManager.
 *
 * The strategy could be overridden via GWT Deferred Binding mechanism.
 *
 * @author Vaadin Ltd
 * @since 7.4.4
 * @deprecated Replaced in 8.1 with {@link DropTargetExtensionConnector}
 */
DragAndDropCallback (/client/src/main/java/com/vaadin/client/ui/dd/DragAndDropHandler.java)/**
     * Callback interface for drag and drop.
     */
DragAndDropHandler (/client/src/main/java/com/vaadin/client/ui/dd/DragAndDropHandler.java)/**
 * A simple event handler for elements that can be drag and dropped. Properly
 * handles drag start, cancel and end. For example, used in {@link Grid} column
 * header reordering.
 * <p>
 * The showing of the dragged element, drag hints and reacting to drop/cancel is
 * delegated to {@link DragAndDropCallback} implementation.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
DragHandleCallback (/client/src/main/java/com/vaadin/client/ui/dd/DragHandle.java)/**
     * Callback interface for the DragHandle event life cycle.
     */
DragHandle (/client/src/main/java/com/vaadin/client/ui/dd/DragHandle.java)/**
 * Drag handle implementation. Drag handles are used for moving or resizing
 * widgets. This is a minimal-case component, meant to be used specifically as a
 * drag handle attached to another widget or element. As such, it does
 * <b>not</b> provide access to the events it's listening to (from the point of
 * view of this component, there really is no use for that). For the more
 * general, event-providing interface that this component is based on, see
 * {@link DragAndDropHandler}.
 *
 * @since 7.6
 */
DragImageModifier (/client/src/main/java/com/vaadin/client/ui/dd/DragImageModifier.java)/**
 * Interface implemented by widgets if the drag image used for drag'n'drop
 * requires additional initialization/configuration. The method
 * {@link #modifyDragImage(Element)} is called for each element in the
 * automatically generated drag image.
 *
 * @since 7.2
 * @author Vaadin Ltd
 * @deprecated Since 8.1, no direct replacement, see
 *             {@link DragSourceExtensionConnector}
 */
VAbstractDropHandler (/client/src/main/java/com/vaadin/client/ui/dd/VAbstractDropHandler.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with {@link DropTargetExtensionConnector}
 */
VAcceptAll (/client/src/main/java/com/vaadin/client/ui/dd/VAcceptAll.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DragSourceExtension#setEffectAllowed(com.vaadin.shared.ui.dnd.EffectAllowed)}
 *             and
 *             {@link DropTargetExtension#setDropEffect(com.vaadin.shared.ui.dnd.DropEffect)}
 */
VAcceptCallback (/client/src/main/java/com/vaadin/client/ui/dd/VAcceptCallback.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Since 8.1, no direct replacement, see
 *             {@link DropTargetExtensionConnector}
 */
VAcceptCriteria (/client/src/main/java/com/vaadin/client/ui/dd/VAcceptCriteria.java)/**
 * A class via all AcceptCriteria instances are fetched by an identifier.
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
VAcceptCriterion (/client/src/main/java/com/vaadin/client/ui/dd/VAcceptCriterion.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 *
 */
VAcceptCriterionFactory (/client/src/main/java/com/vaadin/client/ui/dd/VAcceptCriterionFactory.java)/**
 * Generated by
 * {@link com.vaadin.server.widgetsetutils.AcceptCriteriaFactoryGenerator}.
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
VAnd (/client/src/main/java/com/vaadin/client/ui/dd/VAnd.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
VContainsDataFlavor (/client/src/main/java/com/vaadin/client/ui/dd/VContainsDataFlavor.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
DDManagerMediator (/client/src/main/java/com/vaadin/client/ui/dd/VDragAndDropManager.java)/**
     * Implementation if this interface is provided as a parameter to
     * DDEventHandleStrategy methods. The mediator instance allows to manage
     * DnD.
     *
     * @since 7.4.4
     */
VDragAndDropManager (/client/src/main/java/com/vaadin/client/ui/dd/VDragAndDropManager.java)/**
 * Helper class to manage the state of drag and drop event on Vaadin client
 * side. Can be used to implement most of the drag and drop operation
 * automatically via cross-browser event preview method or just as a helper when
 * implementing own low level drag and drop operation (like with HTML5 api).
 * <p>
 * Singleton. Only one drag and drop operation can be active anyways. Use
 * {@link #get()} to get instance.
 *
 * TODO cancel drag and drop if more than one touches !?
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with {@link DropTargetExtensionConnector} and
 *             {@link DragSourceExtensionConnector}
 */
VDragEvent (/client/src/main/java/com/vaadin/client/ui/dd/VDragEvent.java)/**
 * DragEvent used by Vaadin client side engine. Supports components, items,
 * properties and custom payload (HTML5 style).
 *
 * @deprecated Since 8.1, no direct replacement, see
 *             {@link DropTargetExtensionConnector}
 */
VDragEventServerCallback (/client/src/main/java/com/vaadin/client/ui/dd/VDragEventServerCallback.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 {@link DropTargetRpc}
 */
VDragSourceIs (/client/src/main/java/com/vaadin/client/ui/dd/VDragSourceIs.java)/**
 *
 * @since 6.3
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
VDropHandler (/client/src/main/java/com/vaadin/client/ui/dd/VDropHandler.java)/**
 * Vaadin Widgets that want to receive something via drag and drop implement
 * this interface.
 *
 * @deprecated Replaced in 8.1 with {@link DropListener} and
 *             {@link DropTargetExtension}
 */
VHasDropHandler (/client/src/main/java/com/vaadin/client/ui/dd/VHasDropHandler.java)/**
 * Used to detect Widget from widget tree that has {@link #getDropHandler()}
 *
 * Decide whether to get rid of this class. If so, {@link VAbstractDropHandler}
 * must extend {@link ComponentConnector}.
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with {@link DropTargetExtensionConnector}
 */
VHtml5DragEvent (/client/src/main/java/com/vaadin/client/ui/dd/VHtml5DragEvent.java)/**
 * Helper class to access html5 style drag events.
 *
 * @author Vaadin Ltd
 * @deprecated Since 8.1, no direct replacement currently, see
 *             {@link DropTargetExtensionConnector}
 */
VHtml5File (/client/src/main/java/com/vaadin/client/ui/dd/VHtml5File.java)/**
 * Wrapper for html5 File object.
 *
 * @author Vaadin Ltd
 * @deprecated Since 8.1, will be replaced by FileDropTargetExtensionConnector
 *             and FileDropTargetExtension,
 *             https://github.com/vaadin/framework/issues/8891
 */
VLazyInitItemIdentifiers (/client/src/main/java/com/vaadin/client/ui/dd/VLazyInitItemIdentifiers.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDragOverCriteria(String)} and
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
VNot (/client/src/main/java/com/vaadin/client/ui/dd/VNot.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
VOr (/client/src/main/java/com/vaadin/client/ui/dd/VOr.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
VOverTreeNode (/client/src/main/java/com/vaadin/client/ui/dd/VOverTreeNode.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Since 8.1, no direct replacement, see {@link DropTargetExtension}
 *             and extending classes
 */
VServerAccept (/client/src/main/java/com/vaadin/client/ui/dd/VServerAccept.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with {@link DropTargetExtension}
 */
VSourceIsTarget (/client/src/main/java/com/vaadin/client/ui/dd/VSourceIsTarget.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
VTargetDetailIs (/client/src/main/java/com/vaadin/client/ui/dd/VTargetDetailIs.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 *             {@link DropTargetExtension#setDropCriteria(String)}
 */
VTransferable (/client/src/main/java/com/vaadin/client/ui/dd/VTransferable.java)/**
 * Client side counterpart for Transferable in com.vaadin.event.Transferable.
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with {@link DragSourceExtensionConnector}
 */
DragAndDropWrapperConnector (/client/src/main/java/com/vaadin/client/ui/draganddropwrapper/DragAndDropWrapperConnector.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with {@link DragSourceExtensionConnector} and
 *             {@link DropTargetExtensionConnector}.
 */
Field (/client/src/main/java/com/vaadin/client/ui/Field.java)/**
 * This interface indicates that the component is a Field (serverside), and
 * wants (for instance) to automatically get the v-modified classname.
 *
 */
FocusableFlexTable (/client/src/main/java/com/vaadin/client/ui/FocusableFlexTable.java)/**
 * Adds keyboard focus to {@link FlexPanel}.
 */
FocusableScrollPanel (/client/src/main/java/com/vaadin/client/ui/FocusableScrollPanel.java)/**
 * A scrollhandlers similar to {@link ScrollPanel}.
 *
 */
FocusElementPanel (/client/src/main/java/com/vaadin/client/ui/FocusElementPanel.java)/**
 * A panel that contains an always visible 0x0 size element that holds the
 * focus.
 */
FocusUtil (/client/src/main/java/com/vaadin/client/ui/FocusUtil.java)/**
 * A helper class used to make it easier for {@link Widget}s to implement
 * {@link Focusable}.
 *
 * @author Vaadin Ltd
 * @since 7.0.3
 *
 */
FontIcon (/client/src/main/java/com/vaadin/client/ui/FontIcon.java)/**
 * A font-based icon implementation.
 * <p>
 * The icon represents a specific character (identified by codepoint,
 * {@link #getCodepoint()}, {@link #setCodepoint(int)}) within a specific font
 * (identified by font-family, {@link #getFontFamily()},
 * {@link #setFontFamily(String)}).
 * </p>
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
HasErrorIndicator (/client/src/main/java/com/vaadin/client/ui/HasErrorIndicator.java)/**
 * Implemented by connectors supporting an error indicator.
 *
 * @since 8.0
 */
HasErrorIndicatorElement (/client/src/main/java/com/vaadin/client/ui/HasErrorIndicatorElement.java)/**
 * Implemented by widgets supporting an error indicator.
 *
 * @since 8.2
 */
HasRequiredIndicator (/client/src/main/java/com/vaadin/client/ui/HasRequiredIndicator.java)/**
 * Implemented by connectors supporting a required flag.
 *
 * @since 8.0
 */
Icon (/client/src/main/java/com/vaadin/client/ui/Icon.java)/**
 * An abstract representation of an icon.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
ImageIcon (/client/src/main/java/com/vaadin/client/ui/ImageIcon.java)/**
 * A image based implementation of {@link Icon}.
 * <p>
 * The image is loaded from the given URL ( {@link #setUri(String)}) and
 * displayed in full.
 * </p>
 *
 * @author Vaadin Ltd
 */
LayoutDependencyTree (/client/src/main/java/com/vaadin/client/ui/layout/LayoutDependencyTree.java)/**
 * Internal class used to keep track of layout dependencies during one layout
 * run. This class is not intended to be used directly by applications.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
LegacyConnector (/client/src/main/java/com/vaadin/client/ui/LegacyConnector.java)/**
 * @deprecated This class is only intended to ease migration and should not be
 *             used for new projects.
 */
ListSelectConnector (/client/src/main/java/com/vaadin/client/ui/listselect/ListSelectConnector.java)/**
 * Client side connector for {@link ListSelect} component.
 *
 * @author Vaadin Ltd
 *
 */
MenuBar (/client/src/main/java/com/vaadin/client/ui/menubar/MenuBar.java)/**
 * A standard menu bar widget. A menu bar can contain any number of menu items,
 * each of which can either fire a {@link com.google.gwt.user.client.Command} or
 * open a cascaded menu bar.
 *
 * <p>
 * <img class='gallery' src='MenuBar.png'/>
 * </p>
 *
 * <h3>CSS Style Rules</h3>
 * <ul class='css'>
 * <li>.gwt-MenuBar { the menu bar itself }</li>
 * <li>.gwt-MenuBar .gwt-MenuItem { menu items }</li>
 * <li>.gwt-MenuBar .gwt-MenuItem-selected { selected menu items }</li>
 * </ul>
 *
 * <p>
 * <h3>Example</h3> {@example com.google.gwt.examples.MenuBarExample}
 * </p>
 *
 * @deprecated
 */
MenuItem (/client/src/main/java/com/vaadin/client/ui/menubar/MenuItem.java)/**
 * A widget that can be placed in a
 * {@link com.google.gwt.user.client.ui.MenuBar}. Menu items can either fire a
 * {@link com.google.gwt.user.client.Command} when they are clicked, or open a
 * cascading sub-menu.
 *
 * @deprecated
 */
NativeSelectConnector (/client/src/main/java/com/vaadin/client/ui/nativeselect/NativeSelectConnector.java)/**
 * The client-side connector for the {@code NativeSelect} component.
 *
 * @author Vaadin Ltd.
 *
 * @see com.vaadin.ui.NativeSelect
 * @see com.vaadin.client.ui.VNativeSelect
 *
 * @since 8.0
 */
NotificationConnector (/client/src/main/java/com/vaadin/client/ui/notification/NotificationConnector.java)/**
 * The client-side connector for the {@code Notification}.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.2
 */
CheckBoxGroupConnector (/client/src/main/java/com/vaadin/client/ui/optiongroup/CheckBoxGroupConnector.java)/**
 * CheckBoxGroup client side connector.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
RadioButtonGroupConnector (/client/src/main/java/com/vaadin/client/ui/optiongroup/RadioButtonGroupConnector.java)/**
 * CheckBoxGroup client side connector.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
AbstractOrderedLayoutConnector (/client/src/main/java/com/vaadin/client/ui/orderedlayout/AbstractOrderedLayoutConnector.java)/**
 * Base class for vertical and horizontal ordered layouts.
 */
HorizontalLayoutConnector (/client/src/main/java/com/vaadin/client/ui/orderedlayout/HorizontalLayoutConnector.java)/**
 * Connects the client widget {@link VHorizontalLayout} with the Vaadin server
 * side counterpart {@link HorizontalLayout}.
 */
Slot (/client/src/main/java/com/vaadin/client/ui/orderedlayout/Slot.java)/**
 * Represents a slot which contains the actual widget in the layout.
 */
VAbstractOrderedLayout (/client/src/main/java/com/vaadin/client/ui/orderedlayout/VAbstractOrderedLayout.java)/**
 * Base class for ordered layouts.
 */
VerticalLayoutConnector (/client/src/main/java/com/vaadin/client/ui/orderedlayout/VerticalLayoutConnector.java)/**
 * Connects the client widget {@link VVerticalLayout} with the Vaadin server
 * side counterpart {@link VerticalLayout}.
 */
PostLayoutListener (/client/src/main/java/com/vaadin/client/ui/PostLayoutListener.java)/**
 * Interface implemented by {@link ComponentConnector} implementations that want
 * to know whenever a layout phase has ended. At the end of each layout phase,
 * {@link LayoutManager} invokes the {@link #postLayout()} method for all
 * registered component connectors implementing this interface.
 *
 * @since 7.0
 * @author Vaadin Ltd
 */
ProgressBarConnector (/client/src/main/java/com/vaadin/client/ui/progressbar/ProgressBarConnector.java)/**
 * Connector for {@link VProgressBar}.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
RichTextAreaConnector (/client/src/main/java/com/vaadin/client/ui/richtextarea/RichTextAreaConnector.java)/**
 * Connector for RichTextArea.
 */
Images (/client/src/main/java/com/vaadin/client/ui/richtextarea/VRichTextToolbar.java)/**
     * This {@link ClientBundle} is used for all the button icons. Using a
     * bundle allows all of these images to be packed into a single image, which
     * saves a lot of HTTP requests, drastically improving startup time.
     */
Strings (/client/src/main/java/com/vaadin/client/ui/richtextarea/VRichTextToolbar.java)/**
     * This {@link Constants} interface is used to make the toolbar's strings
     * internationalizable.
     */
EventHandler (/client/src/main/java/com/vaadin/client/ui/richtextarea/VRichTextToolbar.java)/**
     * We use an inner EventHandler class to avoid exposing event methods on the
     * RichTextToolbar itself.
     */
VRichTextToolbar (/client/src/main/java/com/vaadin/client/ui/richtextarea/VRichTextToolbar.java)/**
 * A modified version of sample toolbar for use with {@link RichTextArea}. It
 * provides a simple UI for all rich text formatting, dynamically displayed only
 * for the available functionality.
 */
ShortcutActionHandlerOwner (/client/src/main/java/com/vaadin/client/ui/ShortcutActionHandler.java)/**
     * An interface implemented by those users of this helper class that want to
     * support special components like {@code VRichTextArea} that don't properly
     * propagate key down events. Those components can build support for
     * shortcut actions by traversing the closest
     * {@link ShortcutActionHandlerOwner} from the component hierarchy an
     * passing keydown events to {@link ShortcutActionHandler}.
     */
ShortcutActionHandler (/client/src/main/java/com/vaadin/client/ui/ShortcutActionHandler.java)/**
 * A helper class to implement keyboard shortcut handling. Keeps a list of
 * owners actions and fires actions to server. User class needs to delegate
 * keyboard events to handleKeyboardEvents function.
 *
 * @author Vaadin Ltd
 */
SimpleFocusablePanel (/client/src/main/java/com/vaadin/client/ui/SimpleFocusablePanel.java)/**
 * Compared to FocusPanel in GWT this panel does not support e.g. accesskeys,
 * but is simpler by its dom hierarchy nor supports focusing via java api.
 */
SubPartAware (/client/src/main/java/com/vaadin/client/ui/SubPartAware.java)/**
 * Interface implemented by {@link Widget}s which can provide identifiers for at
 * least one element inside the component.
 *
 */
AbstractTextFieldConnector (/client/src/main/java/com/vaadin/client/ui/textfield/AbstractTextFieldConnector.java)/**
 * Connector class for AbstractTextField.
 *
 * @since 8.0
 */
TextFieldConnector (/client/src/main/java/com/vaadin/client/ui/textfield/TextFieldConnector.java)/**
 * Connector class for TextField.
 */
Owner (/client/src/main/java/com/vaadin/client/ui/textfield/ValueChangeHandler.java)/**
     * Must be implemented by any user of a ValueChangeHandler.
     */
ValueChangeHandler (/client/src/main/java/com/vaadin/client/ui/textfield/ValueChangeHandler.java)/**
 * Helper for dealing with scheduling value change events based on a given mode
 * and possibly timeout.
 *
 * @since 8.0
 */
TouchScrollHandler (/client/src/main/java/com/vaadin/client/ui/TouchScrollDelegate.java)/**
     * A helper class for making a widget scrollable. Uses native scrolling if
     * supported by the browser, otherwise registers a touch start handler
     * delegating to a TouchScrollDelegate instance.
     */
TouchScrollDelegate (/client/src/main/java/com/vaadin/client/ui/TouchScrollDelegate.java)/**
 * Provides one finger touch scrolling for elements with once scrollable
 * elements inside. One widget can have several of these scrollable elements.
 * Scrollable elements are provided in the constructor. Users must pass
 * touchStart events to this delegate, from there on the delegate takes over
 * with an event preview. Other touch events needs to be sunken though.
 * <p>
 * This is bit similar as Scroller class in GWT expenses example, but ideas
 * drawn from iscroll.js project:
 * <ul>
 * <li>uses GWT event mechanism.
 * <li>uses modern CSS trick during scrolling for smoother experience:
 * translate3d and transitions
 * </ul>
 * <p>
 * Scroll event should only happen when the "touch scrolling actually ends".
 * Later we might also tune this so that a scroll event happens if user stalls
 * her finger long enought.
 *
 * TODO static getter for active touch scroll delegate. Components might need to
 * prevent scrolling in some cases. Consider Table with drag and drop, or drag
 * and drop in scrollable area. Optimal implementation might be to start the
 * drag and drop only if user keeps finger down for a moment, otherwise do the
 * scroll. In this case, the draggable component would need to cancel scrolling
 * in a timer after touchstart event and take over from there.
 *
 * TODO support scrolling horizontally
 *
 * TODO cancel if user add second finger to the screen (user expects a gesture).
 *
 * TODO "scrollbars", see e.g. iscroll.js
 *
 * TODO write an email to sjobs √§t apple dot com and beg for this feature to be
 * built into webkit. Seriously, we should try to lobbying this to webkit folks.
 * This sure ain't our business to implement this with javascript.
 *
 * TODO collect all general touch related constant to better place.
 *
 * @author Matti Tahvonen, Vaadin Ltd
 */
TreeAction (/client/src/main/java/com/vaadin/client/ui/TreeAction.java)/**
 * This class is used for "row actions" in VTree and VScrollTable.
 */
CellFocusEventHandler (/client/src/main/java/com/vaadin/client/ui/treegrid/TreeGridConnector.java)/**
     * Class to replace
     * {@link com.vaadin.client.widgets.Grid.CellFocusEventHandler}. The only
     * difference is that it handles events originated from widgets in hierarchy
     * cells.
     */
TreeGridConnector (/client/src/main/java/com/vaadin/client/ui/treegrid/TreeGridConnector.java)/**
 * A connector class for the TreeGrid component.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
TwinColSelectConnector (/client/src/main/java/com/vaadin/client/ui/twincolselect/TwinColSelectConnector.java)/**
 * Client side connector for {@link TwinColSelect} component.
 *
 * @author Vaadin Ltd
 *
 */
UnknownExtensionConnector (/client/src/main/java/com/vaadin/client/ui/UnknownExtensionConnector.java)/**
 * Connector used as a placeholder for extensions that are not present in the
 * widgetset.
 *
 * @since 7.7.4
 * @author Vaadin Ltd
 */
UploadIFrameOnloadStrategyIE (/client/src/main/java/com/vaadin/client/ui/upload/UploadIFrameOnloadStrategyIE.java)/**
 * IE does not have onload, detect onload via readystatechange.
 *
 */
AbsoluteWrapper (/client/src/main/java/com/vaadin/client/ui/VAbsoluteLayout.java)/**
     * Internal wrapper for wrapping widgets in the Absolute layout.
     */
FocusOutListener (/client/src/main/java/com/vaadin/client/ui/VAbstractCalendarPanel.java)/**
     * Blur listener that listens to blur event from the panel.
     */
FocusChangeListener (/client/src/main/java/com/vaadin/client/ui/VAbstractCalendarPanel.java)/**
     * FocusChangeListener is notified when the panel changes its _focused_
     * value.
     */
VEventButton (/client/src/main/java/com/vaadin/client/ui/VAbstractCalendarPanel.java)/**
     * Represents a Date button in the calendar
     */
Day (/client/src/main/java/com/vaadin/client/ui/VAbstractCalendarPanel.java)/**
     * A widget representing a single day in the calendar panel.
     */
FocusedDate (/client/src/main/java/com/vaadin/client/ui/VAbstractCalendarPanel.java)/**
     * Helper class to inform the screen reader that the user changed the
     * selected date. It sets the value of a field that is outside the view, and
     * is defined as a live area. That way the screen reader recognizes the
     * change and reads it to the user.
     */
VAbstractCalendarPanel (/client/src/main/java/com/vaadin/client/ui/VAbstractCalendarPanel.java)/**
 * Abstract calendar panel to show and select a date using a resolution. The
 * class is parameterized by the date resolution enumeration type.
 *
 * @author Vaadin Ltd
 *
 * @param <R>
 *            the resolution type which this field is based on (day, month, ...)
 * @since 8.0
 */
VAbstractDateFieldCalendar (/client/src/main/java/com/vaadin/client/ui/VAbstractDateFieldCalendar.java)/**
 * A client side implementation for inline date field.
 */
VAbstractPopupCalendar (/client/src/main/java/com/vaadin/client/ui/VAbstractPopupCalendar.java)/**
 * Represents a date selection component with a text field and a popup date/time
 * selector.
 *
 * <b>Note:</b> To change the keyboard assignments used in the popup dialog you
 * should extend <code>com.vaadin.client.ui.VAbstractCalendarPanel</code> and
 * then pass set it by calling the
 * <code>setCalendarPanel(VAbstractCalendarPanel panel)</code> method.
 *
 * @since 8.0
 */
VAbstractTextualDate (/client/src/main/java/com/vaadin/client/ui/VAbstractTextualDate.java)/**
 * Abstract textual date field base implementation. Provides a text box as an
 * editor for a date. The class is parameterized by the date resolution
 * enumeration type.
 *
 * @author Vaadin Ltd
 *
 * @param <R>
 *            the resolution type which this field is based on (day, month, ...)
 * @since 8.0
 */
StackItem (/client/src/main/java/com/vaadin/client/ui/VAccordion.java)/**
     * A StackItem has always two children, Child 0 is a VCaption, Child 1 is
     * the actual child widget.
     */
VCheckBoxGroup (/client/src/main/java/com/vaadin/client/ui/VCheckBoxGroup.java)/**
 * The client-side widget for the {@code CheckBoxGroup} component.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
VColorPicker (/client/src/main/java/com/vaadin/client/ui/VColorPicker.java)/**
 * Client side implementation for ColorPicker.
 *
 * @since 7.0.0
 */
VColorPickerArea (/client/src/main/java/com/vaadin/client/ui/VColorPickerArea.java)/**
 * Client side implementation for ColorPickerArea.
 *
 * @since 7.0.0
 */
ComboBoxSuggestion (/client/src/main/java/com/vaadin/client/ui/VComboBox.java)/**
     * Represents a suggestion in the suggestion popup box.
     */
MouseWheeler (/client/src/main/java/com/vaadin/client/ui/VComboBox.java)/** An inner class that handles all logic related to mouse wheel. */
JsniUtil (/client/src/main/java/com/vaadin/client/ui/VComboBox.java)/**
     * A utility class that contains utility methods that are usually called
     * from JSNI.
     * <p>
     * The methods are moved in this class to minimize the amount of JSNI code
     * as much as feasible.
     */
SuggestionPopup (/client/src/main/java/com/vaadin/client/ui/VComboBox.java)/**
     * Represents the popup box with the selection options. Wraps a suggestion
     * menu.
     */
SuggestionMenu (/client/src/main/java/com/vaadin/client/ui/VComboBox.java)/**
     * The menu where the suggestions are rendered.
     */
FilterSelectTextBox (/client/src/main/java/com/vaadin/client/ui/VComboBox.java)/**
     * TextBox variant used as input element for filter selects, which prevents
     * selecting text when disabled.
     *
     * @since 7.1.5
     */
DataReceivedHandler (/client/src/main/java/com/vaadin/client/ui/VComboBox.java)/**
     * Handler receiving notifications from the connector and updating the
     * widget state accordingly.
     *
     * This class is still subject to change and should not be considered as
     * public stable API.
     *
     * @since 8.0
     */
VComboBox (/client/src/main/java/com/vaadin/client/ui/VComboBox.java)/**
 * Client side implementation of the ComboBox component.
 *
 * TODO needs major refactoring (to be extensible etc)
 *
 * @since 8.0
 */
CMenuBar (/client/src/main/java/com/vaadin/client/ui/VContextMenu.java)/**
     * Extend standard Gwt MenuBar to set proper settings and to override
     * onPopupClosed method so that PopupPanel gets closed.
     */
VCssLayout (/client/src/main/java/com/vaadin/client/ui/VCssLayout.java)/**
 * VCssLayout is a layout which supports configuring it's children with CSS
 * selectors.
 */
VCustomLayout (/client/src/main/java/com/vaadin/client/ui/VCustomLayout.java)/**
 * Custom Layout implements complex layout defined with HTML template.
 *
 * @author Vaadin Ltd
 *
 */
VDateCalendarPanel (/client/src/main/java/com/vaadin/client/ui/VDateCalendarPanel.java)/**
 * @author Vaadin Ltd
 * @since 8.0
 */
VDateField (/client/src/main/java/com/vaadin/client/ui/VDateField.java)/**
 * A very base widget class for a date field.
 *
 * @author Vaadin Ltd
 *
 * @param <R>
 *            the resolution type which this field is based on (day, month, ...)
 */
VDateFieldCalendar (/client/src/main/java/com/vaadin/client/ui/VDateFieldCalendar.java)/**
 * A client side implementation for InlineDateField.
 *
 * @author Vaadin Ltd
 *
 */
VTime (/client/src/main/java/com/vaadin/client/ui/VDateTimeCalendarPanel.java)/**
     * TimeSelector is a widget consisting of list boxes that modify the Date
     * object that is given for.
     *
     */
TimeChangeListener (/client/src/main/java/com/vaadin/client/ui/VDateTimeCalendarPanel.java)/**
     * Dispatches an event when the panel when time is changed.
     */
VDateTimeCalendarPanel (/client/src/main/java/com/vaadin/client/ui/VDateTimeCalendarPanel.java)/**
 * @author Vaadin Ltd
 * @since 8.0
 */
VDateTimeFieldCalendar (/client/src/main/java/com/vaadin/client/ui/VDateTimeFieldCalendar.java)/**
 * A client side implementation for inline date/time field.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
UploadHandler (/client/src/main/java/com/vaadin/client/ui/VDragAndDropWrapper.java)/**
     * Internal client side interface used by the connector and the widget for
     * the drag and drop wrapper to signal the completion of an HTML5 file
     * upload.
     *
     * @since 7.6.4
     */
VDragAndDropWrapper (/client/src/main/java/com/vaadin/client/ui/VDragAndDropWrapper.java)/**
 * A wrapper for Drag and Drop. Must have features pending:
 *
 * drop details: locations + sizes in document hierarchy up to wrapper
 *
 */
ErrorFlag (/client/src/main/java/com/vaadin/client/ui/VFormLayout.java)/** For internal use only. May be removed or replaced in the future. */
VFormLayout (/client/src/main/java/com/vaadin/client/ui/VFormLayout.java)/**
 * Two col Layout that places caption on left col and field on right col.
 */
Cell (/client/src/main/java/com/vaadin/client/ui/VGridLayout.java)/** For internal use only. May be removed or replaced in the future. */
VHorizontalLayout (/client/src/main/java/com/vaadin/client/ui/VHorizontalLayout.java)/**
 * Represents a layout where the children is ordered vertically.
 */
VLazyExecutor (/client/src/main/java/com/vaadin/client/ui/VLazyExecutor.java)/**
 * Executes the given command {@code delayMs} milliseconds after a call to
 * {@link #trigger()}. Calling {@link #trigger()} again before the command has
 * been executed causes the execution to be rescheduled to {@code delayMs} after
 * the second call.
 *
 */
VListSelect (/client/src/main/java/com/vaadin/client/ui/VListSelect.java)/**
 * A simple list select for selecting multiple items.
 *
 * @author Vaadin Ltd
 */
LazyCloser (/client/src/main/java/com/vaadin/client/ui/VMenuBar.java)/**
     * Used to autoclose submenus when they the menu is in a mode which opens
     * root menus on mouse hover.
     */
CustomMenuItem (/client/src/main/java/com/vaadin/client/ui/VMenuBar.java)/**
     *
     * A class to hold information on menu items.
     *
     */
VNativeSelect (/client/src/main/java/com/vaadin/client/ui/VNativeSelect.java)/**
 * The client-side widget for the {@code NativeSelect} component.
 *
 * @author Vaadin Ltd.
 */
NotificationRedirect (/client/src/main/java/com/vaadin/client/ui/VNotification.java)/**
     * Listens for Notification hide event, and redirects. Used for system
     * messages, such as session expired.
     *
     */
VOverlay (/client/src/main/java/com/vaadin/client/ui/VOverlay.java)/**
 * In Vaadin UI this VOverlay should always be used for all elements that
 * temporary float over other components like context menus etc. This is to deal
 * stacking order correctly with VWindow objects.
 * <p>
 * To use this correctly, use {@link GWT#create(Class)} to create the
 * {@link Overlay} superclass and the default widgetset will replace it with
 * this. The widget will not be dependent on this Vaadin specific widget and can
 * be used in a pure GWT environment.
 *
 * @deprecated as this is specifically for Vaadin only, it should not be used
 *             directly.
 */
VPasswordField (/client/src/main/java/com/vaadin/client/ui/VPasswordField.java)/**
 * This class represents a password field.
 *
 * @author Vaadin Ltd.
 */
VPopupCalendar (/client/src/main/java/com/vaadin/client/ui/VPopupCalendar.java)/**
 * Represents a date selection component with a text field and a popup date
 * selector.
 *
 * @author Vaadin Ltd
 *
 */
VPopupTimeCalendar (/client/src/main/java/com/vaadin/client/ui/VPopupTimeCalendar.java)/**
 * Represents a date-time selection component with a text field and a popup date
 * selector.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 */
CustomPopup (/client/src/main/java/com/vaadin/client/ui/VPopupView.java)/**
     * This class is only public to enable overriding showPopup, and is
     * currently not intended to be extended or otherwise used directly. Its API
     * (other than it being a VOverlay) is to be considered private and
     * potentially subject to change.
     */
VProgressBar (/client/src/main/java/com/vaadin/client/ui/VProgressBar.java)/**
 * Widget for showing the current progress of a long running task.
 * <p>
 * The default mode is to show the current progress internally represented by a
 * floating point value between 0 and 1 (inclusive). The progress bar can also
 * be in an indeterminate mode showing an animation indicating that the task is
 * running but without providing any information about the current progress.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
VRadioButtonGroup (/client/src/main/java/com/vaadin/client/ui/VRadioButtonGroup.java)/**
 * The client-side widget for the {@code RadioButtonGroup} component.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
VRichTextArea (/client/src/main/java/com/vaadin/client/ui/VRichTextArea.java)/**
 * This class implements a basic client side rich text editor component.
 *
 * @author Vaadin Ltd.
 *
 */
Tab (/client/src/main/java/com/vaadin/client/ui/VTabsheet.java)/**
     * Representation of a single "tab" shown in the TabBar.
     *
     */
PlaceHolder (/client/src/main/java/com/vaadin/client/ui/VTabsheet.java)/**
     * @deprecated as of 7.1, VTabsheet only keeps the active tab in the DOM
     *             without any place holders.
     */
VTabsheetPanel (/client/src/main/java/com/vaadin/client/ui/VTabsheetPanel.java)/**
 * A panel that displays all of its child widgets in a 'deck', where only one
 * can be visible at a time. It is used by
 * {@link com.vaadin.client.ui.VTabsheet}.
 *
 * This class has the same basic functionality as the GWT DeckPanel
 * {@link com.google.gwt.user.client.ui.DeckPanel}, with the exception that it
 * doesn't manipulate the child widgets' width and height attributes.
 */
VTextArea (/client/src/main/java/com/vaadin/client/ui/VTextArea.java)/**
 * This class represents a multiline textfield (textarea).
 *
 * @author Vaadin Ltd.
 *
 */
VTextField (/client/src/main/java/com/vaadin/client/ui/VTextField.java)/**
 * This class represents a basic text input field with one row.
 *
 * @author Vaadin Ltd.
 *
 */
DoubleClickListBox (/client/src/main/java/com/vaadin/client/ui/VTwinColSelect.java)/**
     * A multiselect ListBox which catches double clicks.
     */
VTwinColSelect (/client/src/main/java/com/vaadin/client/ui/VTwinColSelect.java)/**
 * A list builder widget that has two selects; one for selectable options,
 * another for selected options, and buttons for selecting and deselecting the
 * items.
 *
 * @author Vaadin Ltd
 */
VUpload (/client/src/main/java/com/vaadin/client/ui/VUpload.java)/**
 *
 * Note, we are not using GWT FormPanel as we want to listen submitcomplete
 * events even though the upload component is already detached.
 *
 * @author Vaadin Ltd
 *
 */
VVerticalLayout (/client/src/main/java/com/vaadin/client/ui/VVerticalLayout.java)/**
 * Represents a layout where the children is ordered vertically.
 */
VWindow (/client/src/main/java/com/vaadin/client/ui/VWindow.java)/**
 * "Sub window" component.
 *
 * @author Vaadin Ltd
 */
WindowMoveEvent (/client/src/main/java/com/vaadin/client/ui/window/WindowMoveEvent.java)/**
 * Event for window position updates.
 *
 * @since 7.1.9
 * @author Vaadin Ltd
 */
WindowMoveHandler (/client/src/main/java/com/vaadin/client/ui/window/WindowMoveHandler.java)/**
 * Handler for {@link WindowMoveEvent}s.
 *
 * @since 7.1.9
 * @author Vaadin Ltd
 */
WindowOrderEvent (/client/src/main/java/com/vaadin/client/ui/window/WindowOrderEvent.java)/**
 * Event for window order position updates.
 *
 * @since 8.0
 *
 * @author Vaadin Ltd
 */
WindowOrderHandler (/client/src/main/java/com/vaadin/client/ui/window/WindowOrderHandler.java)/**
 * Handler for {@link WindowOrderEvent}s.
 *
 * @since 8.0
 *
 * @author Vaadin Ltd
 */
XML (/client/src/main/java/com/vaadin/client/UIDL.java)/**
     * @deprecated should not be used anymore
     */
UIDL (/client/src/main/java/com/vaadin/client/UIDL.java)/**
 * When a component is updated, it's client side widget's
 * {@link ComponentConnector#updateFromUIDL(UIDL, ApplicationConnection)
 * updateFromUIDL()} will be called with the updated ("changes") UIDL received
 * from the server.
 * <p>
 * UIDL is hierarchical, and there are a few methods to retrieve the children,
 * {@link #getChildCount()}, {@link #iterator()} {@link #getChildString(int)},
 * {@link #getChildUIDL(int)}.
 * </p>
 * <p>
 * It can be helpful to keep in mind that UIDL was originally modeled in XML, so
 * it's structure is very XML -like. For instance, the first to children in the
 * underlying UIDL representation will contain the "tag" name and attributes,
 * but will be skipped by the methods mentioned above.
 * </p>
 */
VConsole (/client/src/main/java/com/vaadin/client/VConsole.java)/**
 * A helper class to do some client side logging.
 *
 * @deprecated as of 7.1, use {@link Logger} from java.util.logging instead.
 */
VLoadingIndicator (/client/src/main/java/com/vaadin/client/VLoadingIndicator.java)/**
 * Class representing the loading indicator for Vaadin applications. The loading
 * indicator has four states: "triggered", "first", "second" and "third". When
 * {@link #trigger()} is called the indicator moves to its "triggered" state and
 * then transitions from one state to the next when the timeouts specified using
 * the set*StateDelay methods occur.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
VTooltip (/client/src/main/java/com/vaadin/client/VTooltip.java)/**
 * A tooltip used by components.
 *
 * TODO open for extension
 */
StateChangeItem (/client/src/main/java/com/vaadin/client/VUIDLBrowser.java)/**
     * A debug view of a server-originated component state change.
     */
SharedStateItem (/client/src/main/java/com/vaadin/client/VUIDLBrowser.java)/**
     * A debug view of a Vaadin 7 style shared state change.
     */
UIDLItem (/client/src/main/java/com/vaadin/client/VUIDLBrowser.java)/**
     * A debug view of a Vaadin 6 style hierarchical component state change.
     */
VUIDLBrowser (/client/src/main/java/com/vaadin/client/VUIDLBrowser.java)/**
 * @author Vaadin Ltd
 *
 * @deprecated as of 7.1. This class was mainly used by the old debug console
 *             but is retained for now for backwards compatibility.
 */
Cell (/client/src/main/java/com/vaadin/client/widget/escalator/Cell.java)/**
 * Describes a cell
 * <p>
 * It's a representation of the element in a grid cell, and its row and column
 * indices.
 * <p>
 * Unlike the {@link FlyweightRow}, an instance of {@link Cell} can be stored in
 * a field.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ColumnConfiguration (/client/src/main/java/com/vaadin/client/widget/escalator/ColumnConfiguration.java)/**
 * A representation of the columns in an instance of {@link Escalator}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see Escalator#getColumnConfiguration()
 */
EscalatorUpdater (/client/src/main/java/com/vaadin/client/widget/escalator/EscalatorUpdater.java)/**
 * An interface that allows client code to define how a certain row in Escalator
 * will be displayed. The contents of an escalator's header, body and footer are
 * rendered by their respective updaters.
 * <p>
 * The updater is responsible for internally handling all remote communication,
 * should the displayed data need to be fetched remotely.
 * <p>
 * This has a similar function to {@link com.vaadin.client.widgets.Grid Grid's}
 * {@link com.vaadin.client.renderers.Renderer Renderers} , although they
 * operate on different abstraction levels.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see RowContainer#setEscalatorUpdater(EscalatorUpdater)
 * @see Escalator#getHeader()
 * @see Escalator#getBody()
 * @see Escalator#getFooter()
 * @see com.vaadin.client.renderers.Renderer Renderer
 */
RowHeightChangedEvent (/client/src/main/java/com/vaadin/client/widget/escalator/events/RowHeightChangedEvent.java)/**
 * Event fired when the row height changed in the Escalator's header, body or
 * footer.
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
RowHeightChangedHandler (/client/src/main/java/com/vaadin/client/widget/escalator/events/RowHeightChangedHandler.java)/**
 * Event handler for a row height changed event.
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
SpacerIndexChangedEvent (/client/src/main/java/com/vaadin/client/widget/escalator/events/SpacerIndexChangedEvent.java)/**
 * Event fired when a spacer element is moved to a new index in Escalator.
 *
 * @author Vaadin Ltd
 * @since 8.9
 */
SpacerIndexChangedHandler (/client/src/main/java/com/vaadin/client/widget/escalator/events/SpacerIndexChangedHandler.java)/**
 * Event handler for a spacer index changed event.
 *
 * @author Vaadin Ltd
 * @since 8.9
 */
SpacerVisibilityChangedEvent (/client/src/main/java/com/vaadin/client/widget/escalator/events/SpacerVisibilityChangedEvent.java)/**
 * Event fired when a spacer element is hidden or shown in Escalator.
 *
 * @author Vaadin Ltd
 * @since 8.3.2
 */
SpacerVisibilityChangedHandler (/client/src/main/java/com/vaadin/client/widget/escalator/events/SpacerVisibilityChangedHandler.java)/**
 * Event handler for a spacer visibility changed event.
 *
 * @author Vaadin Ltd
 * @since 8.3.2
 */
FlyweightCell (/client/src/main/java/com/vaadin/client/widget/escalator/FlyweightCell.java)/**
 * A {@link FlyweightCell} represents a cell in the
 * {@link com.vaadin.client.widgets.Grid Grid} or {@link Escalator} at a certain
 * point in time.
 *
 * <p>
 * Since the {@link FlyweightCell} follows the <code>Flyweight</code>-pattern
 * any instance of this object is subject to change without the user knowing it
 * and so should not be stored anywhere outside of the method providing these
 * instances.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FlyweightRow (/client/src/main/java/com/vaadin/client/widget/escalator/FlyweightRow.java)/**
 * An internal implementation of the {@link Row} interface.
 * <p>
 * There is only one instance per Escalator. This is designed to be re-used when
 * rendering rows.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see com.vaadin.client.widgets.Escalator.AbstractRowContainer#refreshRow(TableRowElement,
 *      int)
 */
Translate3DPosition (/client/src/main/java/com/vaadin/client/widget/escalator/PositionFunction.java)/**
     * A position function using "transform: translate3d(x,y,z)" to position
     * elements in the DOM.
     */
TranslatePosition (/client/src/main/java/com/vaadin/client/widget/escalator/PositionFunction.java)/**
     * A position function using "transform: translate(x,y)" to position
     * elements in the DOM.
     */
WebkitTranslate3DPosition (/client/src/main/java/com/vaadin/client/widget/escalator/PositionFunction.java)/**
     * A position function using "-webkit-transform: translate3d(x,y,z)" to
     * position elements in the DOM.
     */
PositionFunction (/client/src/main/java/com/vaadin/client/widget/escalator/PositionFunction.java)/**
 * A functional interface that can be used for positioning elements in the DOM.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
Row (/client/src/main/java/com/vaadin/client/widget/escalator/Row.java)/**
 * A representation of a row in an {@link Escalator}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyRowContainer (/client/src/main/java/com/vaadin/client/widget/escalator/RowContainer.java)/**
     * The row container for the body section in an
     * {@link com.vaadin.client.widgets.Escalator}.
     * <p>
     * The body section can contain both rows and spacers.
     *
     * @since 7.5.0
     * @author Vaadin Ltd
     * @see com.vaadin.client.widgets.Escalator#getBody()
     */
RowContainer (/client/src/main/java/com/vaadin/client/widget/escalator/RowContainer.java)/**
 * A representation of the rows in each of the sections (header, body and
 * footer) in an {@link com.vaadin.client.widgets.Escalator}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see com.vaadin.client.widgets.Escalator#getHeader()
 * @see com.vaadin.client.widgets.Escalator#getBody()
 * @see com.vaadin.client.widgets.Escalator#getFooter()
 * @see SpacerContainer
 */
RowVisibilityChangeEvent (/client/src/main/java/com/vaadin/client/widget/escalator/RowVisibilityChangeEvent.java)/**
 * Event fired when the range of visible rows changes e.g. because of scrolling.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RowVisibilityChangeHandler (/client/src/main/java/com/vaadin/client/widget/escalator/RowVisibilityChangeHandler.java)/**
 * Event handler that gets notified when the range of visible rows changes e.g.
 * because of scrolling.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
VisibilityHandler (/client/src/main/java/com/vaadin/client/widget/escalator/ScrollbarBundle.java)/**
     * A means to listen to when the scrollbar handle in a
     * {@link ScrollbarBundle} either appears or is removed.
     */
VerticalScrollbarBundle (/client/src/main/java/com/vaadin/client/widget/escalator/ScrollbarBundle.java)/**
     * A representation of a single vertical scrollbar.
     *
     * @see VerticalScrollbarBundle#getElement()
     */
HorizontalScrollbarBundle (/client/src/main/java/com/vaadin/client/widget/escalator/ScrollbarBundle.java)/**
     * A representation of a single horizontal scrollbar.
     *
     * @see HorizontalScrollbarBundle#getElement()
     */
ScrollbarBundle (/client/src/main/java/com/vaadin/client/widget/escalator/ScrollbarBundle.java)/**
 * An element-like bundle representing a configurable and visual scrollbar in
 * one axis.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see VerticalScrollbarBundle
 * @see HorizontalScrollbarBundle
 */
Spacer (/client/src/main/java/com/vaadin/client/widget/escalator/Spacer.java)/**
 * A representation of a spacer element in a
 * {@link com.vaadin.client.widget.escalator.RowContainer.BodyRowContainer}.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
SpacerUpdater (/client/src/main/java/com/vaadin/client/widget/escalator/SpacerUpdater.java)/**
 * An interface that handles the display of content for spacers.
 * <p>
 * The updater is responsible for making sure all elements are properly
 * constructed and cleaned up.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 * @see Spacer
 * @see BodyRowContainer
 */
AutoScrollerCallback (/client/src/main/java/com/vaadin/client/widget/grid/AutoScroller.java)/**
     * Callback that notifies when the cursor is on top of a new row or column
     * because of the automatic scrolling.
     */
TouchEventHandler (/client/src/main/java/com/vaadin/client/widget/grid/AutoScroller.java)/**
     * This class's main objective is to listen when to stop autoscrolling, and
     * make sure everything stops accordingly.
     */
AutoScrollingFrame (/client/src/main/java/com/vaadin/client/widget/grid/AutoScroller.java)/**
     * This class's responsibility is to scroll the table while a pointer is
     * kept in a scrolling zone.
     * <p>
     * <em>Techical note:</em> This class is an AnimationCallback because we
     * need a timer: when the finger is kept in place while the grid scrolls, we
     * still need to be able to make new selections. So, instead of relying on
     * events (which won't be fired, since the pointer isn't necessarily
     * moving), we do this check on each frame while the pointer is "active"
     * (mouse is pressed, finger is on screen).
     */
AutoScroller (/client/src/main/java/com/vaadin/client/widget/grid/AutoScroller.java)/**
 * A class for handling automatic scrolling vertically / horizontally in the
 * Grid when the cursor is close enough the edge of the body of the grid,
 * depending on the scroll direction chosen.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
CellReference (/client/src/main/java/com/vaadin/client/widget/grid/CellReference.java)/**
 * A data class which contains information which identifies a cell in a
 * {@link Grid}.
 * <p>
 * Since this class follows the <code>Flyweight</code>-pattern any instance of
 * this object is subject to change without the user knowing it and so should
 * not be stored anywhere outside of the method providing these instances.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the type of the row object containing this cell
 * @since 7.4
 */
CellStyleGenerator (/client/src/main/java/com/vaadin/client/widget/grid/CellStyleGenerator.java)/**
 * Callback interface for generating custom style names for cells.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the row type of the target grid
 * @see Grid#setCellStyleGenerator(CellStyleGenerator)
 * @since 7.4
 */
DataAvailableEvent (/client/src/main/java/com/vaadin/client/widget/grid/DataAvailableEvent.java)/**
 * Event object describing a change of row availability in DataSource of a Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DataAvailableHandler (/client/src/main/java/com/vaadin/client/widget/grid/DataAvailableHandler.java)/**
 * Handler for {@link DataAvailableEvent}s.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ListWrapper (/client/src/main/java/com/vaadin/client/widget/grid/datasources/ListDataSource.java)/**
     * Wraps the datasource list and notifies the change handler of changing to
     * the list
     */
ListWrapperIterator (/client/src/main/java/com/vaadin/client/widget/grid/datasources/ListDataSource.java)/**
     * Iterator returned by {@link ListWrapper}
     */
ListDataSource (/client/src/main/java/com/vaadin/client/widget/grid/datasources/ListDataSource.java)/**
 * A simple list based on an in-memory data source for simply adding a list of
 * row pojos to the grid. Based on a wrapped list instance which supports adding
 * and removing of items.
 *
 * <p>
 * Usage:
 *
 * <pre>
 * ListDataSource&lt;Integer&gt; ds = new ListDataSource&lt;Integer&gt;(1, 2, 3, 4);
 *
 * // Add item to the data source
 * ds.asList().add(5);
 *
 * // Remove item from the data source
 * ds.asList().remove(3);
 *
 * // Add multiple items
 * ds.asList().addAll(Arrays.asList(5, 6, 7));
 * </pre>
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ListSorter (/client/src/main/java/com/vaadin/client/widget/grid/datasources/ListSorter.java)/**
 * Provides sorting facility from Grid for the {@link ListDataSource} in-memory
 * data source.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            Grid row data type
 * @since 7.4
 */
DefaultEditorEventHandler (/client/src/main/java/com/vaadin/client/widget/grid/DefaultEditorEventHandler.java)/**
 * The default handler for Grid editor events. Offers several overridable
 * protected methods for easier customization.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
DetailsGenerator (/client/src/main/java/com/vaadin/client/widget/grid/DetailsGenerator.java)/**
 * A callback interface for generating details for a particular row in Grid.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
EditorRequest (/client/src/main/java/com/vaadin/client/widget/grid/EditorHandler.java)/**
     * A request class passed as a parameter to the editor handler methods. The
     * request is callback-based to facilitate usage with remote or otherwise
     * asynchronous data sources.
     * <p>
     * An implementation must call either {@link #success()} or {@link #fail()},
     * according to whether the operation was a success or failed during
     * execution, respectively.
     *
     * @param <T>
     *            the row data type
     */
EditorHandler (/client/src/main/java/com/vaadin/client/widget/grid/EditorHandler.java)/**
 * An interface for binding widgets and data to the grid row editor. Used by the
 * editor to support different row types, data sources and custom data binding
 * mechanisms.
 *
 * @param <T>
 *            the row data type
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
EventCellReference (/client/src/main/java/com/vaadin/client/widget/grid/EventCellReference.java)/**
 * A data class which contains information which identifies a cell being the
 * target of an event from {@link Grid}.
 * <p>
 * Since this class follows the <code>Flyweight</code>-pattern any instance of
 * this object is subject to change without the user knowing it and so should
 * not be stored anywhere outside of the method providing these instances.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
AbstractGridKeyEventHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/AbstractGridKeyEventHandler.java)/**
 * Base interface of all handlers for {@link AbstractGridKeyEvent}s.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
AbstractGridMouseEventHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/AbstractGridMouseEventHandler.java)/**
 * Base interface of all handlers for {@link AbstractGridMouseEvent}s.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyClickHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/BodyClickHandler.java)/**
 * Handler for {@link GridClickEvent}s that happen in the body of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyDoubleClickHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/BodyDoubleClickHandler.java)/**
 * Handler for {@link GridDoubleClickEvent}s that happen in the body of the
 * Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyKeyDownHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/BodyKeyDownHandler.java)/**
 * Handler for {@link GridKeyDownEvent}s that happen when the focused cell is in
 * the body of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyKeyPressHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/BodyKeyPressHandler.java)/**
 * Handler for {@link GridKeyPressEvent}s that happen when the focused cell is
 * in the body of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyKeyUpHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/BodyKeyUpHandler.java)/**
 * Handler for {@link GridKeyUpEvent}s that happen when the focused cell is in
 * the body of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ColumnReorderEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/ColumnReorderEvent.java)/**
 * An event for notifying that the columns in the Grid have been reordered.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.5.0
 * @author Vaadin Ltd
 */
ColumnReorderHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/ColumnReorderHandler.java)/**
 * Handler for a Grid column reorder event, called when the Grid's columns has
 * been reordered.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.5.0
 * @author Vaadin Ltd
 */
ColumnResizeEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/ColumnResizeEvent.java)/**
 * An event for notifying that the columns in the Grid have been resized.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.6
 * @author Vaadin Ltd
 */
ColumnResizeHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/ColumnResizeHandler.java)/**
 * Handler for a Grid column resize event, called when the Grid's columns has
 * been resized.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.6
 * @author Vaadin Ltd
 */
ColumnVisibilityChangeEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/ColumnVisibilityChangeEvent.java)/**
 * An event for notifying that the columns in the Grid's have changed
 * visibility.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.5.0
 * @author Vaadin Ltd
 */
ColumnVisibilityChangeHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/ColumnVisibilityChangeHandler.java)/**
 * Handler for a Grid column visibility change event, called when the Grid's
 * columns have changed visibility to hidden or visible.
 *
 * @param<T> The
 *               row type of the grid. The row type is the POJO type from where
 *               the data is retrieved into the column cells.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
FooterClickHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/FooterClickHandler.java)/**
 * Handler for {@link GridClickEvent}s that happen in the footer of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FooterDoubleClickHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/FooterDoubleClickHandler.java)/**
 * Handler for {@link GridDoubleClickEvent}s that happen in the footer of the
 * Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FooterKeyDownHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/FooterKeyDownHandler.java)/**
 * Handler for {@link GridKeyDownEvent}s that happen when the focused cell is in
 * the footer of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FooterKeyPressHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/FooterKeyPressHandler.java)/**
 * Handler for {@link GridKeyPressEvent}s that happen when the focused cell is
 * in the footer of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FooterKeyUpHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/FooterKeyUpHandler.java)/**
 * Handler for {@link GridKeyUpEvent}s that happen when the focused cell is in
 * the footer of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridClickEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/GridClickEvent.java)/**
 * Represents native mouse click event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridDoubleClickEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/GridDoubleClickEvent.java)/**
 * Represents native mouse double click event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridEnabledEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/GridEnabledEvent.java)/**
 * An enabled/disabled event, fired by the Grid when it is disabled or enabled.
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
GridEnabledHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/GridEnabledHandler.java)/**
 * Handler for a Grid enabled/disabled event, called when the Grid is enabled or
 * disabled.
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
GridKeyDownEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/GridKeyDownEvent.java)/**
 * Represents native key down event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridKeyPressEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/GridKeyPressEvent.java)/**
 * Represents native key press event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridKeyUpEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/GridKeyUpEvent.java)/**
 * Represents native key up event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridSelectionAllowedEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/GridSelectionAllowedEvent.java)/**
 * A selection allowed event, fired by the Grid when its selection allowed value
 * changes.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
GridSelectionAllowedHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/GridSelectionAllowedHandler.java)/**
 * Handler for a Grid {@link GridSelectionAllowedEvent}, called when the Grid is
 * becomes allowed for selection or disallowed.
 *
 * @see GridSelectionAllowedEvent
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
HeaderClickHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/HeaderClickHandler.java)/**
 * Handler for {@link GridClickEvent}s that happen in the header of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HeaderDoubleClickHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/HeaderDoubleClickHandler.java)/**
 * Handler for {@link GridDoubleClickEvent}s that happen in the header of the
 * Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HeaderKeyDownHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/HeaderKeyDownHandler.java)/**
 * Handler for {@link GridKeyDownEvent}s that happen when the focused cell is in
 * the header of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HeaderKeyPressHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/HeaderKeyPressHandler.java)/**
 * Handler for {@link GridKeyPressEvent}s that happen when the focused cell is
 * in the header of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HeaderKeyUpHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/HeaderKeyUpHandler.java)/**
 * Handler for {@link GridKeyUpEvent}s that happen when the focused cell is in
 * the header of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ScrollEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/ScrollEvent.java)/**
 * An event that signifies that a scrollbar bundle has been scrolled.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
ScrollHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/ScrollHandler.java)/**
 * A handler that gets called whenever a scrollbar bundle is scrolled.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
SelectAllEvent (/client/src/main/java/com/vaadin/client/widget/grid/events/SelectAllEvent.java)/**
 * A select all event, fired by the Grid when it needs all rows in data source
 * to be selected, OR when all rows have been selected and are now deselected.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @param <T>
 *            the type of the rows in grid
 */
SelectAllHandler (/client/src/main/java/com/vaadin/client/widget/grid/events/SelectAllHandler.java)/**
 * Handler for a Grid select all event, called when the Grid needs all rows in
 * data source to be selected.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridEventHandler (/client/src/main/java/com/vaadin/client/widget/grid/GridEventHandler.java)/**
 * A handler for events emitted by elements in Grid.
 *
 * @param <T>
 *            the grid row type
 */
HeightAwareDetailsGenerator (/client/src/main/java/com/vaadin/client/widget/grid/HeightAwareDetailsGenerator.java)/**
 * {@link DetailsGenerator} that is aware of content heights.
 * <p>
 * <b>FOR INTERNAL USE ONLY!</b> This class exists only for the sake of a
 * temporary workaround and might be removed or renamed at any time.
 * </p>
 *
 * @since 7.6.1
 * @author Vaadin Ltd
 */
RendererCellReference (/client/src/main/java/com/vaadin/client/widget/grid/RendererCellReference.java)/**
 * A data class which contains information which identifies a cell being
 * rendered in a {@link Grid}.
 * <p>
 * Since this class follows the <code>Flyweight</code>-pattern any instance of
 * this object is subject to change without the user knowing it and so should
 * not be stored anywhere outside of the method providing these instances.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RowReference (/client/src/main/java/com/vaadin/client/widget/grid/RowReference.java)/**
 * A data class which contains information which identifies a row in a
 * {@link Grid}.
 * <p>
 * Since this class follows the <code>Flyweight</code>-pattern any instance of
 * this object is subject to change without the user knowing it and so should
 * not be stored anywhere outside of the method providing these instances.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the row object type
 * @since 7.4
 */
RowStyleGenerator (/client/src/main/java/com/vaadin/client/widget/grid/RowStyleGenerator.java)/**
 * Callback interface for generating custom style names for data rows.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the row type of the target grid
 * @see com.vaadin.client.widgets.Grid#setRowStyleGenerator(RowStyleGenerator)
 *      Grid#setRowStyleGenerator(RowStyleGenerator)
 * @since 7.4
 */
ClickSelectHandler (/client/src/main/java/com/vaadin/client/widget/grid/selection/ClickSelectHandler.java)/**
 * Generic class to perform selections when clicking on cells in body of Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HasSelectionHandlers (/client/src/main/java/com/vaadin/client/widget/grid/selection/HasSelectionHandlers.java)/**
 * Marker interface for widgets that fires selection events.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
CheckBoxEventHandler (/client/src/main/java/com/vaadin/client/widget/grid/selection/MultiSelectionRenderer.java)/**
     * Handler for MouseDown and TouchStart events for selection checkboxes.
     *
     * @since 7.5
     */
TouchEventHandler (/client/src/main/java/com/vaadin/client/widget/grid/selection/MultiSelectionRenderer.java)/**
     * This class's main objective is to listen when to stop autoscrolling, and
     * make sure everything stops accordingly.
     */
AutoScrollerAndSelector (/client/src/main/java/com/vaadin/client/widget/grid/selection/MultiSelectionRenderer.java)/**
     * This class's responsibility is to
     * <ul>
     * <li>scroll the table while a pointer is kept in a scrolling zone and
     * <li>select rows whenever a pointer is "activated" on a selection cell
     * </ul>
     * <p>
     * <em>Techical note:</em> This class is an AnimationCallback because we
     * need a timer: when the finger is kept in place while the grid scrolls, we
     * still need to be able to make new selections. So, instead of relying on
     * events (which won't be fired, since the pointer isn't necessarily
     * moving), we do this check on each frame while the pointer is "active"
     * (mouse is pressed, finger is on screen).
     */
AutoScrollHandler (/client/src/main/java/com/vaadin/client/widget/grid/selection/MultiSelectionRenderer.java)/**
     * This class makes sure that pointer movemenets are registered and
     * delegated to the autoscroller so that it can:
     * <ul>
     * <li>modify the speed in which we autoscroll.
     * <li>"paint" a new row with the selection.
     * </ul>
     * Essentially, when a pointer is pressed on the selection column, a native
     * preview handler is registered (so that selection gestures can happen
     * outside of the selection column). The handler itself makes sure that it's
     * detached when the pointer is "lifted".
     */
MultiSelectionRenderer (/client/src/main/java/com/vaadin/client/widget/grid/selection/MultiSelectionRenderer.java)/**
 * Renderer showing multi selection check boxes.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the type of the associated grid
 * @since 7.4
 */
SelectionEvent (/client/src/main/java/com/vaadin/client/widget/grid/selection/SelectionEvent.java)/**
 * Event object describing a change in Grid row selection state.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SelectionHandler (/client/src/main/java/com/vaadin/client/widget/grid/selection/SelectionHandler.java)/**
 * Handler for {@link SelectionEvent}s.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            The row data type
 * @since 7.4
 */
SelectionModel (/client/src/main/java/com/vaadin/client/widget/grid/selection/SelectionModel.java)/**
 * Models the selection logic of a {@code Grid} component. Determines how items
 * can be selected and deselected.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the type of the items to select
 * @since 8.0
 */
SelectionModelWithSelectionColumn (/client/src/main/java/com/vaadin/client/widget/grid/selection/SelectionModelWithSelectionColumn.java)/**
 * Interface for SelectionModels that wants Grid to display a selection column.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @see Renderer
 */
SpaceKeyDownHandler (/client/src/main/java/com/vaadin/client/widget/grid/selection/SpaceSelectHandler.java)/**
     * Handler for space key down events in Grid Body
     */
SpaceSelectHandler (/client/src/main/java/com/vaadin/client/widget/grid/selection/SpaceSelectHandler.java)/**
 * Generic class to perform selections when pressing space key.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            row data type
 * @since 7.4
 */
Sort (/client/src/main/java/com/vaadin/client/widget/grid/sort/Sort.java)/**
 * Fluid Sort descriptor object.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SortEvent (/client/src/main/java/com/vaadin/client/widget/grid/sort/SortEvent.java)/**
 * A sort event, fired by the Grid when it needs its data source to provide data
 * sorted in a specific manner.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SortHandler (/client/src/main/java/com/vaadin/client/widget/grid/sort/SortHandler.java)/**
 * Handler for a Grid sort event, called when the Grid needs its data source to
 * provide data sorted in a specific manner.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SortOrder (/client/src/main/java/com/vaadin/client/widget/grid/sort/SortOrder.java)/**
 * Sort order descriptor. Contains column and direction references.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TreeGridClickEvent (/client/src/main/java/com/vaadin/client/widget/treegrid/events/TreeGridClickEvent.java)/**
 * Represents native mouse click event in TreeGrid.
 * <p>
 * Differs from {@link GridClickEvent} only in allowing events to originate form
 * hierarchy widget.
 *
 * @since 8.1
 * @author Vaadin Ltd
 */
TreeGridDoubleClickEvent (/client/src/main/java/com/vaadin/client/widget/treegrid/events/TreeGridDoubleClickEvent.java)/**
 * Represents native mouse double click event in TreeGrid.
 * <p>
 * Differs from {@link GridDoubleClickEvent} only in allowing events to
 * originate form hierarchy widget.
 *
 * @author Vaadin Ltd
 * @since 8.2
 */
BodyUpdater (/client/src/main/java/com/vaadin/client/widget/treegrid/TreeGrid.java)/**
     * Body updater that adds additional style to each row containing depth
     * information inside the hierarchy.
     */
TreeGrid (/client/src/main/java/com/vaadin/client/widget/treegrid/TreeGrid.java)/**
 * An extension of the Grid widget, which supports displaying of hierarchical
 * data.
 *
 * @author Vaadin Ltd
 * @see Grid
 * @since 8.1
 */
WidgetInstantiator (/client/src/main/java/com/vaadin/client/WidgetInstantiator.java)/**
 * A helper class used by WidgetMap implementation. Used by the generated code.
 */
WidgetLoader (/client/src/main/java/com/vaadin/client/WidgetLoader.java)/**
 * A helper class used by WidgetMap implementation. Used by the generated code.
 */
WidgetMap (/client/src/main/java/com/vaadin/client/WidgetMap.java)/**
 * Abstract class mapping between {@link ComponentConnector} instances and their
 * instances.
 *
 * A concrete implementation of this class is generated by WidgetMapGenerator or
 * one of its subclasses during widgetset compilation.
 */
ChildFocusAwareFlowPanel (/client/src/main/java/com/vaadin/client/widgets/ChildFocusAwareFlowPanel.java)/**
 * Focusable flow panel which fires focus/blur events if it or any of its child
 * is focused/blurred, but doesn't fire events if it happens between its content
 * (child) elements.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
JsniWorkaround (/client/src/main/java/com/vaadin/client/widgets/Escalator.java)/**
 * A workaround-class for GWT and JSNI.
 * <p>
 * GWT is unable to handle some method calls to Java methods in inner-classes
 * from within JSNI blocks. Having that inner class extend a non-inner-class (or
 * implement such an interface), makes it possible for JSNI to indirectly refer
 * to the inner class, by invoking methods and fields in the non-inner-class
 * API.
 *
 * @see Escalator.Scroller
 */
CustomTouchEvent (/client/src/main/java/com/vaadin/client/widgets/Escalator.java)/**
             * A <a href=
             * "http://www.gwtproject.org/doc/latest/DevGuideCodingBasicsOverlay.html"
             * >JavaScriptObject overlay</a> for the
             * <a href="http://www.w3.org/TR/touch-events/">JavaScript
             * TouchEvent</a> object.
             * <p>
             * This needs to be used in the touch event handlers, since GWT's
             * {@link com.google.gwt.event.dom.client.TouchEvent TouchEvent}
             * can't be cast from the JSNI call, and the
             * {@link com.google.gwt.dom.client.NativeEvent NativeEvent} isn't
             * properly populated with the correct values.
             */
JsniUtil (/client/src/main/java/com/vaadin/client/widgets/Escalator.java)/**
     * A utility class that contains utility methods that are usually called
     * from JSNI.
     * <p>
     * The methods are moved in this class to minimize the amount of JSNI code
     * as much as feasible.
     */
Scroller (/client/src/main/java/com/vaadin/client/widgets/Escalator.java)/** An inner class that handles all logic related to scrolling. */
AriaGridHelper (/client/src/main/java/com/vaadin/client/widgets/Escalator.java)/**
     * Helper class that helps to implement the WAI-ARIA functionality for the
     * Grid and TreeGrid component.
     * <p>
     * The following WAI-ARIA attributes are added through this class:
     *
     * <ul>
     * <li>aria-rowcount (since 8.2)</li>
     * <li>roles provided by {@link AriaGridRole} (since 8.2)</li>
     * </ul>
     *
     * @since 8.2
     */
SubPartArguments (/client/src/main/java/com/vaadin/client/widgets/Escalator.java)/**
     * Utility class for parsing and storing SubPart request string attributes
     * for Grid and Escalator.
     *
     * @since 7.5.0
     */
Escalator (/client/src/main/java/com/vaadin/client/widgets/Escalator.java)/**
 * A low-level table-like widget that features a scrolling virtual viewport and
 * lazily generated rows.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FocusableFlowPanelComposite (/client/src/main/java/com/vaadin/client/widgets/FocusableFlowPanelComposite.java)/**
 * Focusable composite whose widget is {@link ChildFocusAwareFlowPanel} (flow
 * panel that tracks focus/blur events from its children).
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StaticCell (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
         * A header or footer cell. Has a simple textual caption.
         *
         */
StaticRow (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
         * Abstract base class for Grid header and footer rows.
         *
         * @param <CELLTYPE>
         *            the type of the cells in the row
         */
StaticSection (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * Abstract base class for Grid header and footer sections.
     *
     * @since 7.5.0
     *
     * @param <ROWTYPE>
     *            the type of the rows in the section
     */
Header (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * Represents the header section of a Grid. A header consists of a single
     * header row containing a header cell for each column. Each cell has a
     * simple textual caption.
     */
HeaderRow (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * A single row in a grid header section.
     *
     */
HeaderCell (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * A single cell in a grid header row. Has a caption and, if it's in a
     * default row, a drag handle.
     */
Footer (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * Represents the footer section of a Grid. The footer is always empty.
     */
FooterCell (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * A single cell in a grid Footer row. Has a textual caption.
     *
     */
FooterRow (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * A single row in a grid Footer section.
     *
     */
RequestCallback (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
         * A callback interface used to notify the invoker of the editor handler
         * of completed editor requests.
         *
         * @param <T>
         *            the row data type
         */
GridEvent (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * A wrapper for native DOM events originating from Grid. In addition to the
     * native event, contains a {@link CellReference} instance specifying which
     * cell the event originated from.
     *
     * @since 7.6
     * @param <T>
     *            The row type of the grid
     */
EditorDomEvent (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * A wrapper for native DOM events related to the {@link Editor Grid editor}
     * .
     *
     * @since 7.6
     * @param <T>
     *            the row type of the grid
     */
EventHandler (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
         * A handler for events related to the Grid editor. Responsible for
         * opening, moving or closing the editor based on the received event.
         *
         * @since 7.6
         * @author Vaadin Ltd
         * @param <T>
         *            the row type of the grid
         */
Editor (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * An editor UI for Grid rows. A single Grid row at a time can be opened for
     * editing.
     *
     * @since 7.6
     * @param <T>
     *            the row type of the grid
     */
UserSorter (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * Helper class for performing sorting through the user interface. Controls
     * the sort() method, reporting USER as the event originator. This is a
     * completely internal class, and is, as such, safe to re-name should a more
     * descriptive name come to mind.
     */
AutoColumnWidthsRecalculator (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * @see Grid#autoColumnWidthsRecalculator
     */
Sidebar (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * Sidebar displaying toggles for hidable columns and custom widgets
     * provided by the application.
     * <p>
     * The button for opening the sidebar is automatically visible inside the
     * grid, if it contains any column hiding options or custom widgets. The
     * column hiding toggles and custom widgets become visible once the sidebar
     * has been opened.
     *
     * @since 7.5.0
     */
ColumnHider (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * UI and functionality related to hiding columns with toggles in the
     * sidebar.
     */
DefaultTextRenderer (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
         * Default renderer for GridColumns. Renders everything into text
         * through {@link Object#toString()}.
         */
Column (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
     * Base class for grid columns internally used by the Grid. The user should
     * use {@link Column} when creating new columns.
     *
     * @param <C>
     *            the column type
     *
     * @param <T>
     *            the row type
     */
Grid (/client/src/main/java/com/vaadin/client/widgets/Grid.java)/**
 * A data grid view that supports columns and lazy loading of data rows from a
 * data source.
 *
 * <h1>Columns</h1>
 * <p>
 * Each column in Grid is represented by a {@link Column}. Each
 * {@code GridColumn} has a custom implementation for
 * {@link Column#getValue(Object)} that gets the row object as an argument, and
 * returns the value for that particular column, extracted from the row object.
 * <p>
 * Each column also has a Renderer. Its function is to take the value that is
 * given by the {@code GridColumn} and display it to the user. A simple column
 * might have a {@link com.vaadin.client.renderers.TextRenderer TextRenderer}
 * that simply takes in a {@code String} and displays it as the cell's content.
 * A more complex renderer might be
 * {@link com.vaadin.client.renderers.ProgressBarRenderer ProgressBarRenderer}
 * that takes in a floating point number, and displays a progress bar instead,
 * based on the given number.
 * <p>
 * <em>See:</em> {@link #addColumn(Column)}, {@link #addColumn(Column, int)} and
 * {@link #addColumns(Column...)}. <em>Also</em>
 * {@link Column#setRenderer(Renderer)}.
 *
 * <h1>Data Sources</h1>
 * <p>
 * Grid gets its data from a {@link DataSource}, providing row objects to Grid
 * from a user-defined endpoint. It can be either a local in-memory data source
 * (e.g. {@link com.vaadin.client.widget.grid.datasources.ListDataSource
 * ListDataSource}) or even a remote one, retrieving data from e.g. a REST API
 * (see {@link com.vaadin.client.data.AbstractRemoteDataSource
 * AbstractRemoteDataSource}).
 *
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.4
 * @author Vaadin Ltd
 */
Overlay (/client/src/main/java/com/vaadin/client/widgets/Overlay.java)/**
 * Overlay widget extending the PopupPanel. Overlay is used to float elements on
 * top of other elements temporarily.
 * <p>
 * <b>Note:</b> This class should always be constructed with
 * {@link GWT#create(Class)}.
 *
 * @since 7.6.1
 */
Reference (/client/src/main/java/com/vaadin/client/WidgetUtil.java)/**
     * Simple object to store another object.
     *
     * @param <T>
     *            the object type to store
     * @since 8.4
     */
CssSize (/client/src/main/java/com/vaadin/client/WidgetUtil.java)/**
     * Wrap a css size value and its unit and translate back and forth to the
     * string representation.<br/>
     * E.g. 50%, 123px, ...
     *
     * @since 7.2.6
     * @author Vaadin Ltd
     */
ErrorUtil (/client/src/main/java/com/vaadin/client/WidgetUtil.java)/**
     * Utility methods for displaying error message on components.
     *
     * @since 8.2
     */
WidgetUtil (/client/src/main/java/com/vaadin/client/WidgetUtil.java)/**
 * Utility methods which are related to client side code only.
 */
ServerMessageHandlerTest (/client/src/test/java/com/vaadin/client/communication/ServerMessageHandlerTest.java)/**
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
FileInfo (/client-compiler/src/main/java/com/vaadin/sass/linker/SassLinker.java)/**
     * Temporal storage for file info from Artifact.
     */
SassLinker (/client-compiler/src/main/java/com/vaadin/sass/linker/SassLinker.java)/**
 * Pre-linker that checks for the existence of SASS files in public folders,
 * compiles them to CSS files with the SassCompiler from Vaadin and adds the CSS
 * back into the artifact.
 *
 */
AcceptCriteriaFactoryGenerator (/client-compiler/src/main/java/com/vaadin/server/widgetsetutils/AcceptCriteriaFactoryGenerator.java)/**
 * GWT generator to build {@link VAcceptCriterionFactory} implementation
 * dynamically based on {@link AcceptCriterion} annotations available in
 * classpath.
 *
 */
SplittingSourceWriter (/client-compiler/src/main/java/com/vaadin/server/widgetsetutils/ConnectorBundleLoaderFactory.java)/**
     * Special SourceWriter that approximates the number of written bytes to
     * support splitting long methods into shorter chunks to avoid hitting the
     * 65535 byte limit.
     */
OnStateChangeVisitor (/client-compiler/src/main/java/com/vaadin/server/widgetsetutils/metadata/OnStateChangeVisitor.java)/**
 * Visits Connector classes and check for methods with @OnStateChange
 * annotations.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
RendererVisitor (/client-compiler/src/main/java/com/vaadin/server/widgetsetutils/metadata/RendererVisitor.java)/**
 * Generates type data for renderer connectors.
 * <ul>
 * <li>Stores the return type of the overridden
 * {@link AbstractGridRendererConnector#getRenderer() getRenderer} method to
 * enable automatic creation of an instance of the proper renderer type.
 * <li>Stores the presentation type of the connector to enable the
 * {@link AbstractGridRendererConnector#decode(elemental.json.JsonValue) decode}
 * method to work without having to implement a "getPresentationType" method.
 * </ul>
 *
 * @see WidgetInitVisitor
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
CvalAddonsChecker (/client-compiler/src/main/java/com/vaadin/tools/CvalAddonsChecker.java)/**
 * This class is able to visit all MANIFEST.MF files present in the classpath,
 * filter by name, and check if the user has a valid license.
 *
 * Manifest files should have a few attributes indicating the license type of
 * the addon:
 * <ul>
 * <li>Implementation-Version: 4.x.x
 * <li>AdVaaName: addon_name
 * <li>AdVaaLicen: cval, agpl, empty
 * <li>AdVaaPkg: package of the widgets in this addon
 * </ul>
 *
 * The class also have a method to check just one product.
 *
 * @since 7.3
 */
InvalidCvalException (/client-compiler/src/main/java/com/vaadin/tools/CvalChecker.java)/**
     * Exception thrown when the user does not have a valid cval license.
     */
UnreachableCvalServerException (/client-compiler/src/main/java/com/vaadin/tools/CvalChecker.java)/**
     * Exception thrown when the license server is unreachable.
     */
CvalChecker (/client-compiler/src/main/java/com/vaadin/tools/CvalChecker.java)/**
 * This class is able to validate the vaadin CVAL license.
 *
 * It reads the developer license file and asks the server to validate the
 * licenseKey. If the license is invalid it throws an exception with the
 * information about the problem and the server response.
 *
 * @since 7.3
 */
WidgetsetCompiler (/client-compiler/src/main/java/com/vaadin/tools/WidgetsetCompiler.java)/**
 * A wrapper for the GWT compiler that runs the compiler in a new thread after
 * updating the widgetset file.
 *
 * This class originally existed to allow circumventing a J2SE 5.0 bug (6316197)
 * that prevents setting the stack size for the main thread.
 *
 * This class takes the same command line arguments as the
 * com.google.gwt.dev.Compiler class.
 *
 * A typical invocation would use e.g. the following arguments
 *
 * "-war WebContent/VAADIN/widgetsets com.vaadin.DefaultWidgetSet"
 *
 * In addition, larger memory usage settings for the VM should be used, e.g.
 *
 * "-Xms256M -Xmx512M -Xss8M"
 *
 * The source directory containing widgetset and related classes must be
 * included in the classpath, as well as other relevant JARs.
 *
 * @deprecated with Java 6, can use com.google.gwt.dev.Compiler directly (also
 *             in Eclipse plug-in etc.)
 */
CvalAddonsCheckerTest (/client-compiler/src/test/java/com/vaadin/tools/CvalAddonsCheckerTest.java)/**
 * The CvalAddonsChecker test.
 */
CvalAddonstCheckerUseCasesTest (/client-compiler/src/test/java/com/vaadin/tools/CvalAddonstCheckerUseCasesTest.java)/**
 * Tests for Use Cases
 */
CvalCheckerTest (/client-compiler/src/test/java/com/vaadin/tools/CvalCheckerTest.java)/**
 * The CvalChecker test.
 */
ComponentConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ComponentConnector.java)/**
 * Legacy ComponentConnector with {@code isReadOnly}.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
AbstractGridRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/AbstractGridRendererConnector.java)/**
 * An abstract base class for renderer connectors. A renderer connector is used
 * to link a client-side {@link Renderer} to a server-side
 * {@link com.vaadin.ui.components.grid.Renderer Renderer}. As a connector, it
 * can use the regular Vaadin RPC and shared state mechanism to pass additional
 * state and information between the client and the server. This base class
 * itself only uses the basic {@link com.vaadin.shared.communication.SharedState
 * SharedState} and no RPC interfaces.
 *
 * @param <T>
 *            the presentation type of the renderer
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
AbstractRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/AbstractRendererConnector.java)/**
 * An abstract base class for renderer connectors.
 *
 * @param <T>
 *            the presentation type of the renderer
 */
AbstractSelectionModelConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/AbstractSelectionModelConnector.java)/**
 * Base class for all selection model connectors.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
ButtonRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/ButtonRendererConnector.java)/**
 * A connector for {@link ButtonRenderer}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ClickableRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/ClickableRendererConnector.java)/**
 * An abstract base class for {@link ClickableRenderer} connectors.
 *
 * @param <T>
 *            the presentation type of the renderer
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DateRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/DateRendererConnector.java)/**
 * A connector for {@link com.vaadin.ui.components.grid.renderers.DateRenderer
 * DateRenderer}.
 * <p>
 * The server-side Renderer operates on dates, but the data is serialized as a
 * string, and displayed as-is on the client side. This is to be able to support
 * the server's locale.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DetailComponentManagerConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/DetailComponentManagerConnector.java)/**
 * Client-side connector for the DetailComponentManager of Grid.
 *
 * @since 7.6.1
 */
CustomGridColumn (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/GridConnector.java)/**
     * Custom implementation of the custom grid column using a JSONObject to
     * represent the cell value and String as a column type.
     */
LazyDetailsScroller (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/GridConnector.java)/**
     * Class for handling scrolling issues with open details.
     *
     * @since 7.5.2
     */
GridConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/GridConnector.java)/**
 * Connects the client side {@link Grid} widget with the server side
 * <code>Grid</code> component.
 * <p>
 * The Grid is typed to JSONObject. The structure of the JSONObject is described
 * at {@link com.vaadin.shared.data.DataProviderRpc#setRowData(int, List)
 * DataProviderRpc.setRowData(int, List)}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ImageRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/ImageRendererConnector.java)/**
 * A connector for {@link ImageRenderer}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
MultiSelectionModel (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/MultiSelectionModelConnector.java)/**
     * The default multi selection model used for this connector.
     *
     */
MultiSelectionModelConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/MultiSelectionModelConnector.java)/**
 * Connector for server-side {@link MultiSelectionModel}.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
NoSelectionModelConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/NoSelectionModelConnector.java)/**
 * Connector for server-side {@link NoSelectionModel}.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
NumberRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/NumberRendererConnector.java)/**
 * A connector for {@link com.vaadin.ui.components.grid.renderers.NumberRenderer
 * NumberRenderer} .
 * <p>
 * The server-side Renderer operates on numbers, but the data is serialized as a
 * string, and displayed as-is on the client side. This is to be able to support
 * the server's locale.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ProgressBarRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/ProgressBarRendererConnector.java)/**
 * A connector for {@link ProgressBarRenderer}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DetailsListener (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/RpcDataSourceConnector.java)/**
     * A callback interface to let {@link GridConnector} know that detail
     * visibilities might have changed.
     *
     * @since 7.5.0
     * @author Vaadin Ltd
     */
RpcDataSourceConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/RpcDataSourceConnector.java)/**
 * Connects a Vaadin server-side container data source to a Grid. This is
 * currently implemented as an Extension hardcoded to support a specific
 * connector type. This will be changed once framework support for something
 * more flexible has been implemented.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SingleSelectionModel (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/SingleSelectionModelConnector.java)/**
     * SingleSelectionModel without a selection column renderer.
     */
SingleSelectionModelConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/SingleSelectionModelConnector.java)/**
 * Connector for server-side {@link SingleSelectionModel}.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
TextRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/TextRendererConnector.java)/**
 * A connector for {@link TextRenderer}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
UnsafeHtmlRendererConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/connectors/UnsafeHtmlRendererConnector.java)/**
 * A connector for {@link UnsafeHtmlRenderer}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ButtonRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/ButtonRenderer.java)/**
 * A Renderer that displays buttons with textual captions. The values of the
 * corresponding column are used as the captions. Click handlers can be added to
 * the renderer, invoked when any of the rendered buttons is clicked.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RendererClickHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/ClickableRenderer.java)/**
     * A handler for {@link RendererClickEvent renderer click events}.
     *
     * @param <R>
     *            the row type of the containing Grid
     *
     * @see ButtonRenderer#addClickHandler(RendererClickHandler)
     */
RendererClickEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/ClickableRenderer.java)/**
     * An event fired when a widget rendered by a ClickableWidgetRenderer
     * subclass is clicked.
     *
     * @param <R>
     *            the row type of the containing Grid
     */
ClickableRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/ClickableRenderer.java)/**
 * An abstract superclass for renderers that render clickable widgets. Click
 * handlers can be added to a renderer to listen to click events emitted by all
 * widgets rendered by the renderer.
 *
 * @param <T>
 *            the presentation (column) type
 * @param <W>
 *            the widget type
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ComplexRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/ComplexRenderer.java)/**
 * Base class for renderers that needs initialization and destruction logic
 * (override {@link #init(FlyweightCell)} and {@link #destroy(FlyweightCell) }
 * and event handling (see {@link #onBrowserEvent(Cell, NativeEvent)},
 * {@link #getConsumedEvents()} and {@link #onActivate()}.
 *
 * <p>
 * Also provides a helper method for hiding the cell contents by overriding
 * {@link #setContentVisible(FlyweightCell, boolean)}
 *
 * @since 7.4.0
 * @author Vaadin Ltd
 */
DateRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/DateRenderer.java)/**
 * A renderer for rendering dates into cells.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HtmlRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/HtmlRenderer.java)/**
 * Renders a string as HTML into a cell.
 * <p>
 * The html string is rendered as is without any escaping. It is up to the
 * developer to ensure that the html string honors the {@link SafeHtml}
 * contract. For more information see
 * {@link SafeHtmlUtils#fromSafeConstant(String)}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see SafeHtmlUtils#fromSafeConstant(String)
 */
ImageRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/ImageRenderer.java)/**
 * A renderer that renders an image into a cell. Click handlers can be added to
 * the renderer, invoked every time any of the images rendered by that rendered
 * is clicked.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
NumberRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/NumberRenderer.java)/**
 * Renders a number into a cell using a specific {@link NumberFormat}. By
 * default uses the default number format returned by
 * {@link NumberFormat#getDecimalFormat()}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ProgressBarRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/ProgressBarRenderer.java)/**
 * A Renderer that represents a double value as a graphical progress bar.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
Renderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/Renderer.java)/**
 * Renderer for rending a value &lt;T&gt; into cell.
 * <p>
 * You can add a renderer to any column by overring the
 * {@link GridColumn#getRenderer()} method and returning your own renderer. You
 * can retrieve the cell element using {@link Cell#getElement()}.
 *
 * @param <T>
 *            The column type
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TextRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/TextRenderer.java)/**
 * Renderer that renders text into a cell.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
WidgetRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/renderers/WidgetRenderer.java)/**
 * A renderer for rendering widgets into cells.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @param <T>
 *            the row data type
 * @param <W>
 *            the Widget type
 */
AbstractLegacyComponentConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/AbstractLegacyComponentConnector.java)/**
 * Legacy connector for Vaadin 7 compatibility connectors. Needed because
 * <code>immediate</code> has been removed from {@link AbstractConnector} in
 * Vaadin 8.
 *
 * @author Vaadin Ltd
 * @since 8.0
 * @deprecated only used for Vaadin 7 compatiblity components
 */
CalendarConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/CalendarConnector.java)/**
 * Handles communication between Calendar on the server side and
 * {@link VCalendar} on the client side.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
CalendarDay (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/CalendarDay.java)/**
 * Utility class used to represent a day when updating views. Only used
 * internally.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
CalendarEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/CalendarEvent.java)/**
 * A client side implementation of a calendar event.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
DateCellContainer (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/DateCellContainer.java)/**
 * Internally used class by the Calendar.
 *
 * since 7.1
 */
DateCellDayEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/DateCellDayEvent.java)/**
 * Internally used by the calendar.
 *
 * @since 7.1
 */
DateCellGroup (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/DateCellGroup.java)/**
 * Internally used by the calendar.
 *
 * @since 7.1
 */
DateUtil (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/DateUtil.java)/**
 * Utility class for {@link Date} operations.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
DayToolbar (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/DayToolbar.java)/**
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
CalendarDropHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/dd/CalendarDropHandler.java)/**
 * Abstract base class for calendar drop handlers.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
CalendarMonthDropHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/dd/CalendarMonthDropHandler.java)/**
 * Handles DD when the monthly view is showing in the Calendar. In the monthly
 * view, drops are only allowed in the the day cells. Only the day index is
 * included in the drop details sent to the server.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
CalendarWeekDropHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/dd/CalendarWeekDropHandler.java)/**
 * Handles DD when the weekly view is showing in the Calendar. In the weekly
 * view, drops are only allowed in the the time slots for each day. The slot
 * index and the day index are included in the drop details sent to the server.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
FocusableComplexPanel (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/FocusableComplexPanel.java)/**
 * A ComplexPanel that can be focused.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
FocusableGrid (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/FocusableGrid.java)/**
 * A Grid that can be focused.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
FocusableHTML (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/FocusableHTML.java)/**
 * A HTML widget that can be focused.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
HasTooltipKey (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/HasTooltipKey.java)/**
 * For Calendar client-side internal use only.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
MonthEventLabel (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/MonthEventLabel.java)/**
 * The label in a month cell.
 *
 * @since 7.1
 */
MonthGrid (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/MonthGrid.java)/**
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
SimpleDayCell (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/SimpleDayCell.java)/**
 * A class representing a single cell within the calendar in month-view.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
SimpleDayToolbar (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/SimpleDayToolbar.java)/**
 *
 * @since 7.1.0
 * @author Vaadin Ltd.
 *
 */
SimpleWeekToolbar (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/SimpleWeekToolbar.java)/**
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
WeekGrid (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/WeekGrid.java)/**
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
WeekGridMinuteTimeRange (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/WeekGridMinuteTimeRange.java)/**
 * Internally used by the calendar.
 *
 * @since 7.1
 */
WeekLabel (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/WeekLabel.java)/**
 * A label in the {@link SimpleWeekToolbar}.
 *
 * @since 7.1
 */
WeeklyLongEvents (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/WeeklyLongEvents.java)/**
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
WeeklyLongEventsDateCell (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/schedule/WeeklyLongEventsDateCell.java)/**
 * Represents a cell used in {@link WeeklyLongEvents}.
 *
 * @since 7.1
 */
VCalendarAction (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/calendar/VCalendarAction.java)/**
 * Action performed by the calendar.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
AbstractColorPickerConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/colorpicker/AbstractColorPickerConnector.java)/**
 * An abstract class that defines default implementation for a color picker
 * connector.
 *
 * @since 7.0.0
 */
ColorPickerAreaConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/colorpicker/ColorPickerAreaConnector.java)/**
 * A class that defines an implementation for a color picker connector. Connects
 * the server side {@link ColorPickerArea} with the client side counterpart
 * {@link VColorPickerArea}
 *
 * @since 7.0.0
 */
ColorPickerConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/colorpicker/ColorPickerConnector.java)/**
 * A class that defines default implementation for a color picker connector.
 * Connects the server side {@link ColorPicker} with the client side counterpart
 * {@link VColorPicker}
 *
 * @since 7.0.0
 */
ColorPickerGradientConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/colorpicker/ColorPickerGradientConnector.java)/**
 * A class that defines the default implementation for a color picker gradient
 * connector. Connects the server side {@link ColorPickerGradient} with the
 * client side counterpart {@link VColorPickerGradient}
 *
 * @since 7.0.0
 */
ColorPickerGridConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/colorpicker/ColorPickerGridConnector.java)/**
 * A class that defines the default implementation for a color picker grid
 * connector. Connects the server side {@link ColorPickerGrid} with the client
 * side counterpart {@link VColorPickerGrid}
 *
 * @since 7.0.0
 */
JsniMousewheelHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/JsniMousewheelHandler.java)/**
 * A mousewheel handling class to get around the limits of
 * {@link Event#ONMOUSEWHEEL}.
 *
 * For internal use only. May be removed or replaced in the future.
 *
 * @see com.vaadin.v7.client.widgets.JsniWorkaround JsniWorkaround
 */
ProgressBarConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/progressindicator/ProgressBarConnector.java)/**
 * Connector for {@link VProgressBar}.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
ProgressIndicatorConnector (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/progressindicator/ProgressIndicatorConnector.java)/**
 * Connector for {@link VProgressBar} with polling support.
 *
 * @since 7.0
 * @author Vaadin Ltd
 * @deprecated as of 7.1, use {@link ProgressBarConnector} combined with server
 *             push or UI polling.
 */
Images (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/richtextarea/VRichTextToolbar.java)/**
     * This {@link ClientBundle} is used for all the button icons. Using a
     * bundle allows all of these images to be packed into a single image, which
     * saves a lot of HTTP requests, drastically improving startup time.
     */
Strings (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/richtextarea/VRichTextToolbar.java)/**
     * This {@link Constants} interface is used to make the toolbar's strings
     * internationalizable.
     */
EventHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/richtextarea/VRichTextToolbar.java)/**
     * We use an inner EventHandler class to avoid exposing event methods on the
     * RichTextToolbar itself.
     */
VRichTextToolbar (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/richtextarea/VRichTextToolbar.java)/**
 * A modified version of sample toolbar for use with {@link RichTextArea}. It
 * provides a simple UI for all rich text formatting, dynamically displayed only
 * for the available functionality.
 */
UploadIFrameOnloadStrategyIE (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/upload/UploadIFrameOnloadStrategyIE.java)/**
 * IE does not have onload, detect onload via readystatechange.
 *
 */
DateClickListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for listening to event click events.
     */
WeekClickListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for listening to week number click events.
     */
ForwardListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for listening to forward events.
     */
BackwardListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for listening to backward events.
     */
RangeSelectListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for listening to selection events.
     */
EventClickListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for listening to click events.
     */
EventMovedListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for listening to event moved events. Occurs when a
     * user drags an event to a new position
     */
EventResizeListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for when an event gets resized (its start or end date
     * changes).
     */
ScrollListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for listening to scroll events.
     */
MouseEventListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
     * Listener interface for listening to mouse events.
     */
VCalendar (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendar.java)/**
 * Client side implementation for Calendar.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
FocusOutListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendarPanel.java)/**
     * Blur listener that listens to blur event from the panel.
     */
FocusChangeListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendarPanel.java)/**
     * FocusChangeListener is notified when the panel changes its _focused_
     * value.
     */
TimeChangeListener (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendarPanel.java)/**
     * Dispatches an event when the panel when time is changed.
     */
VEventButton (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendarPanel.java)/**
     * Represents a Date button in the calendar
     */
VTime (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendarPanel.java)/**
     * TimeSelector is a widget consisting of list boxes that modify the Date
     * object that is given for.
     *
     */
Day (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendarPanel.java)/**
     * A widget representing a single day in the calendar panel.
     */
FocusedDate (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VCalendarPanel.java)/**
     * Helper class to inform the screen reader that the user changed the
     * selected date. It sets the value of a field that is outside the view, and
     * is defined as a live area. That way the screen reader recognizes the
     * change and reads it to the user.
     */
VDateFieldCalendar (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VDateFieldCalendar.java)/**
 * A client side implementation for InlineDateField.
 */
FilterSelectSuggestion (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VFilterSelect.java)/**
     * Represents a suggestion in the suggestion popup box.
     */
MouseWheeler (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VFilterSelect.java)/** An inner class that handles all logic related to mouse wheel. */
JsniUtil (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VFilterSelect.java)/**
     * A utility class that contains utility methods that are usually called
     * from JSNI.
     * <p>
     * The methods are moved in this class to minimize the amount of JSNI code
     * as much as feasible.
     */
SuggestionPopup (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VFilterSelect.java)/**
     * Represents the popup box with the selection options. Wraps a suggestion
     * menu.
     */
SuggestionMenu (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VFilterSelect.java)/**
     * The menu where the suggestions are rendered.
     */
FilterSelectTextBox (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VFilterSelect.java)/**
     * TextBox variant used as input element for filter selects, which prevents
     * selecting text when disabled.
     *
     * @since 7.1.5
     */
VFilterSelect (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VFilterSelect.java)/**
 * Client side implementation of the Select component.
 *
 * TODO needs major refactoring (to be extensible etc)
 */
VPasswordField (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VPasswordField.java)/**
 * This class represents a password field.
 *
 * @author Vaadin Ltd.
 *
 */
VPopupCalendar (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VPopupCalendar.java)/**
 * Represents a date selection component with a text field and a popup date
 * selector.
 *
 * <b>Note:</b> To change the keyboard assignments used in the popup dialog you
 * should extend <code>VCalendarPanel</code> and then pass set it by calling the
 * <code>setCalendarPanel(VCalendarPanel panel)</code> method.
 *
 */
VProgressBar (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VProgressBar.java)/**
 * Widget for showing the current progress of a long running task.
 * <p>
 * The default mode is to show the current progress internally represented by a
 * floating point value between 0 and 1 (inclusive). The progress bar can also
 * be in an indeterminate mode showing an animation indicating that the task is
 * running but without providing any information about the current progress.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
VProgressIndicator (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VProgressIndicator.java)/**
 *
 * @author Vaadin Ltd
 *
 * @deprecated as of 7.1, renamed to VProgressBar
 */
VRichTextArea (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VRichTextArea.java)/**
 * This class implements a basic client side rich text editor component.
 *
 * @author Vaadin Ltd.
 *
 */
ContextMenuOwner (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * Simple interface for parts of the table capable of owning a context menu.
     *
     * @since 7.2
     * @author Vaadin Ltd
     */
TouchContextProvider (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * Handles showing context menu on "long press" from a touch screen.
     *
     * @since 7.2
     * @author Vaadin Ltd
     */
SelectionRange (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * Represents a select range of rows
     */
FocusableScrollContextPanel (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * For internal use only. May be removed or replaced in the future.
     *
     * Overwrites onBrowserEvent function on FocusableScrollPanel to give event
     * access to touchContextProvider. Has to be public to give TableConnector
     * access to the scrollBodyPanel field.
     *
     * @since 7.2
     * @author Vaadin Ltd
     */
ContextMenuDetails (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * Used to recall the position of an open context menu if we need to close
     * and reopen it during a row update.
     * <p>
     * For internal use only. May be removed or replaced in the future.
     */
RowRequestHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/** For internal use only. May be removed or replaced in the future. */
RowHeadersHeaderCell (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * HeaderCell that is header cell for row headers.
     *
     * Reordering disabled and clicking on it resets sorting.
     */
FooterCell (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * A cell in the footer.
     */
RowHeadersFooterCell (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * HeaderCell that is header cell for row headers.
     *
     * Reordering disabled and clicking on it resets sorting.
     */
TableFooter (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * The footer of the table which can be seen in the bottom of the Table.
     */
VScrollTableBody (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
     * This Panel can only contain VScrollTableRow type of widgets. This
     * "simulates" very large table, keeping spacers which take room of
     * unrendered rows.
     *
     */
VScrollTable (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VScrollTable.java)/**
 * VScrollTable
 *
 * VScrollTable is a FlowPanel having two widgets in it: * TableHead component *
 * ScrollPanel
 *
 * TableHead contains table's header and widgets + logic for resizing,
 * reordering and hiding columns.
 *
 * ScrollPanel contains VScrollTableBody object which handles content. To save
 * some bandwidth and to improve clients responsiveness with loads of data, in
 * VScrollTableBody all rows are not necessary rendered. There are "spacers" in
 * VScrollTableBody to use the exact same space as non-rendered rows would use.
 * This way we can use seamlessly traditional scrollbars and scrolling to fetch
 * more rows instead of "paging".
 *
 * In VScrollTable we listen to scroll events. On horizontal scrolling we also
 * update TableHeads scroll position which has its scrollbars hidden. On
 * vertical scroll events we will check if we are reaching the end of area where
 * we have rows rendered and
 *
 * TODO implement unregistering for child components in Cells
 */
VTextArea (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VTextArea.java)/**
 * This class represents a multiline textfield (textarea).
 *
 * TODO consider replacing this with a RichTextArea based implementation. IE
 * does not support CSS height for textareas in Strict mode :-(
 *
 * @author Vaadin Ltd.
 *
 */
VTextField (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VTextField.java)/**
 * This class represents a basic text input field with one row.
 *
 * @author Vaadin Ltd.
 *
 */
VTree (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VTree.java)/**
 *
 */
PendingNavigationEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VTreeTable.java)/** For internal use only. May be removed or replaced in the future. */
AnimationPreparator (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VTreeTable.java)/**
         * Prepares the table for animation by copying the background colors of
         * all TR elements to their respective TD elements if the TD element is
         * transparent. This is needed, since if TDs have transparent
         * backgrounds, the rows sliding behind them are visible.
         */
RowExpandAnimation (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VTreeTable.java)/**
         * Animates row expansion using the GWT animation framework.
         *
         * The idea is as follows:
         *
         * 1. Insert all rows normally
         *
         * 2. Insert a newly created DIV containing a new TABLE element below
         * the DIV containing the actual scroll table body.
         *
         * 3. Clone the rows that were inserted in step 1 and attach the clones
         * to the new TABLE element created in step 2.
         *
         * 4. The new DIV from step 2 is absolutely positioned so that the last
         * inserted row is just behind the row that was expanded.
         *
         * 5. Hide the contents of the originally inserted rows by setting the
         * DIV.v-table-cell-wrapper to display:none;.
         *
         * 6. Set the height of the originally inserted rows to 0.
         *
         * 7. The animation loop slides the DIV from step 2 downwards, while at
         * the same pace growing the height of each of the inserted rows from 0
         * to full height. The first inserted row grows from 0 to full and after
         * this the second row grows from 0 to full, etc until all rows are full
         * height.
         *
         * 8. Remove the DIV from step 2
         *
         * 9. Restore display:block; to the DIV.v-table-cell-wrapper elements.
         *
         * 10. DONE
         */
RowCollapseAnimation (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VTreeTable.java)/**
         * This is the inverse of the RowExpandAnimation and is implemented by
         * extending it and overriding the calculation of offsets and heights.
         */
DoubleClickListBox (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VTwinColSelect.java)/**
     * A ListBox which catches double clicks.
     *
     */
VUpload (/compatibility-client/src/main/java/com/vaadin/v7/client/ui/VUpload.java)/**
 *
 * Note, we are not using GWT FormPanel as we want to listen submitcomplete
 * events even though the upload component is already detached.
 *
 */
Cell (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/Cell.java)/**
 * Describes a cell
 * <p>
 * It's a representation of the element in a grid cell, and its row and column
 * indices.
 * <p>
 * Unlike the {@link FlyweightRow}, an instance of {@link Cell} can be stored in
 * a field.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ColumnConfiguration (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/ColumnConfiguration.java)/**
 * A representation of the columns in an instance of {@link Escalator}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see Escalator#getColumnConfiguration()
 */
EscalatorUpdater (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/EscalatorUpdater.java)/**
 * An interface that allows client code to define how a certain row in Escalator
 * will be displayed. The contents of an escalator's header, body and footer are
 * rendered by their respective updaters.
 * <p>
 * The updater is responsible for internally handling all remote communication,
 * should the displayed data need to be fetched remotely.
 * <p>
 * This has a similar function to {@link com.vaadin.v7.client.widgets.Grid Grid's}
 * {@link com.vaadin.v7.client.renderers.Renderer Renderers}
 * , although they operate on different abstraction levels.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see RowContainer#setEscalatorUpdater(EscalatorUpdater)
 * @see Escalator#getHeader()
 * @see Escalator#getBody()
 * @see Escalator#getFooter()
 * @see Renderer
 */
RowHeightChangedEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/events/RowHeightChangedEvent.java)/**
 * Event fired when the row height changed in the Escalator's header, body or
 * footer.
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
RowHeightChangedHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/events/RowHeightChangedHandler.java)/**
 * Event handler for a row height changed event.
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
SpacerVisibilityChangedEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/events/SpacerVisibilityChangedEvent.java)/**
 * Event fired when a spacer element is hidden or shown in Escalator.
 *
 * @author Vaadin Ltd
 * @since 7.7.13
 */
SpacerVisibilityChangedHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/events/SpacerVisibilityChangedHandler.java)/**
 * Event handler for a spacer visibility changed event.
 *
 * @author Vaadin Ltd
 * @since 7.7.13
 */
FlyweightCell (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/FlyweightCell.java)/**
 * A {@link FlyweightCell} represents a cell in the
 * {@link com.vaadin.v7.client.widgets.Grid Grid} or {@link Escalator} at a
 * certain point in time.
 *
 * <p>
 * Since the {@link FlyweightCell} follows the <code>Flyweight</code>-pattern
 * any instance of this object is subject to change without the user knowing it
 * and so should not be stored anywhere outside of the method providing these
 * instances.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FlyweightRow (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/FlyweightRow.java)/**
 * An internal implementation of the {@link Row} interface.
 * <p>
 * There is only one instance per Escalator. This is designed to be re-used when
 * rendering rows.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see com.vaadin.v7.client.widgets.Escalator.AbstractRowContainer#refreshRow(TableRowElement,
 *      int) Escalator.AbstractRowContainer#refreshRow(TableRowElement, int)
 */
Translate3DPosition (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/PositionFunction.java)/**
     * A position function using "transform: translate3d(x,y,z)" to position
     * elements in the DOM.
     */
TranslatePosition (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/PositionFunction.java)/**
     * A position function using "transform: translate(x,y)" to position
     * elements in the DOM.
     */
WebkitTranslate3DPosition (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/PositionFunction.java)/**
     * A position function using "-webkit-transform: translate3d(x,y,z)" to
     * position elements in the DOM.
     */
AbsolutePosition (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/PositionFunction.java)/**
     * A position function using "left: x" and "top: y" to position elements in
     * the DOM.
     */
PositionFunction (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/PositionFunction.java)/**
 * A functional interface that can be used for positioning elements in the DOM.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
Row (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/Row.java)/**
 * A representation of a row in an {@link Escalator}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyRowContainer (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/RowContainer.java)/**
     * The row container for the body section in an {@link Escalator}.
     * <p>
     * The body section can contain both rows and spacers.
     *
     * @since 7.5.0
     * @author Vaadin Ltd
     * @see Escalator#getBody()
     */
RowContainer (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/RowContainer.java)/**
 * A representation of the rows in each of the sections (header, body and
 * footer) in an {@link Escalator}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see Escalator#getHeader()
 * @see Escalator#getBody()
 * @see Escalator#getFooter()
 * @see SpacerContainer
 */
RowVisibilityChangeEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/RowVisibilityChangeEvent.java)/**
 * Event fired when the range of visible rows changes e.g. because of scrolling.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RowVisibilityChangeHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/RowVisibilityChangeHandler.java)/**
 * Event handler that gets notified when the range of visible rows changes e.g.
 * because of scrolling.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
VisibilityHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/ScrollbarBundle.java)/**
     * A means to listen to when the scrollbar handle in a
     * {@link ScrollbarBundle} either appears or is removed.
     */
VerticalScrollbarBundle (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/ScrollbarBundle.java)/**
     * A representation of a single vertical scrollbar.
     *
     * @see VerticalScrollbarBundle#getElement()
     */
HorizontalScrollbarBundle (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/ScrollbarBundle.java)/**
     * A representation of a single horizontal scrollbar.
     *
     * @see HorizontalScrollbarBundle#getElement()
     */
ScrollbarBundle (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/ScrollbarBundle.java)/**
 * An element-like bundle representing a configurable and visual scrollbar in
 * one axis.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @see VerticalScrollbarBundle
 * @see HorizontalScrollbarBundle
 */
Spacer (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/Spacer.java)/**
 * A representation of a spacer element in a
 * {@link RowContainer.BodyRowContainer}.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
SpacerUpdater (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/escalator/SpacerUpdater.java)/**
 * An interface that handles the display of content for spacers.
 * <p>
 * The updater is responsible for making sure all elements are properly
 * constructed and cleaned up.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 * @see Spacer
 * @see BodyRowContainer
 */
AutoScrollerCallback (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/AutoScroller.java)/**
     * Callback that notifies when the cursor is on top of a new row or column
     * because of the automatic scrolling.
     */
TouchEventHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/AutoScroller.java)/**
     * This class's main objective is to listen when to stop autoscrolling, and
     * make sure everything stops accordingly.
     */
AutoScrollingFrame (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/AutoScroller.java)/**
     * This class's responsibility is to scroll the table while a pointer is
     * kept in a scrolling zone.
     * <p>
     * <em>Techical note:</em> This class is an AnimationCallback because we
     * need a timer: when the finger is kept in place while the grid scrolls, we
     * still need to be able to make new selections. So, instead of relying on
     * events (which won't be fired, since the pointer isn't necessarily
     * moving), we do this check on each frame while the pointer is "active"
     * (mouse is pressed, finger is on screen).
     */
AutoScroller (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/AutoScroller.java)/**
 * A class for handling automatic scrolling vertically / horizontally in the
 * Grid when the cursor is close enough the edge of the body of the grid,
 * depending on the scroll direction chosen.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
CellReference (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/CellReference.java)/**
 * A data class which contains information which identifies a cell in a
 * {@link Grid}.
 * <p>
 * Since this class follows the <code>Flyweight</code>-pattern any instance of
 * this object is subject to change without the user knowing it and so should
 * not be stored anywhere outside of the method providing these instances.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the type of the row object containing this cell
 * @since 7.4
 */
CellStyleGenerator (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/CellStyleGenerator.java)/**
 * Callback interface for generating custom style names for cells.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the row type of the target grid
 * @see Grid#setCellStyleGenerator(CellStyleGenerator)
 * @since 7.4
 */
DataAvailableEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/DataAvailableEvent.java)/**
 * Event object describing a change of row availability in DataSource of a Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DataAvailableHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/DataAvailableHandler.java)/**
 * Handler for {@link DataAvailableEvent}s.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ListWrapper (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/datasources/ListDataSource.java)/**
     * Wraps the datasource list and notifies the change handler of changing to
     * the list
     */
ListWrapperIterator (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/datasources/ListDataSource.java)/**
     * Iterator returned by {@link ListWrapper}
     */
ListDataSource (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/datasources/ListDataSource.java)/**
 * A simple list based on an in-memory data source for simply adding a list of
 * row pojos to the grid. Based on a wrapped list instance which supports adding
 * and removing of items.
 *
 * <p>
 * Usage:
 *
 * <pre>
 * ListDataSource&lt;Integer&gt; ds = new ListDataSource&lt;Integer&gt;(1, 2, 3, 4);
 *
 * // Add item to the data source
 * ds.asList().add(5);
 *
 * // Remove item from the data source
 * ds.asList().remove(3);
 *
 * // Add multiple items
 * ds.asList().addAll(Arrays.asList(5, 6, 7));
 * </pre>
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ListSorter (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/datasources/ListSorter.java)/**
 * Provides sorting facility from Grid for the {@link ListDataSource} in-memory
 * data source.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            Grid row data type
 * @since 7.4
 */
DefaultEditorEventHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/DefaultEditorEventHandler.java)/**
 * The default handler for Grid editor events. Offers several overridable
 * protected methods for easier customization.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
DetailsGenerator (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/DetailsGenerator.java)/**
 * A callback interface for generating details for a particular row in Grid.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
EditorRequest (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/EditorHandler.java)/**
     * A request class passed as a parameter to the editor handler methods. The
     * request is callback-based to facilitate usage with remote or otherwise
     * asynchronous data sources.
     * <p>
     * An implementation must call either {@link #success()} or {@link #fail()},
     * according to whether the operation was a success or failed during
     * execution, respectively.
     *
     * @param <T>
     *            the row data type
     */
EditorHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/EditorHandler.java)/**
 * An interface for binding widgets and data to the grid row editor. Used by the
 * editor to support different row types, data sources and custom data binding
 * mechanisms.
 *
 * @param <T>
 *            the row data type
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
EventCellReference (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/EventCellReference.java)/**
 * A data class which contains information which identifies a cell being the
 * target of an event from {@link Grid}.
 * <p>
 * Since this class follows the <code>Flyweight</code>-pattern any instance of
 * this object is subject to change without the user knowing it and so should
 * not be stored anywhere outside of the method providing these instances.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
AbstractGridKeyEventHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/AbstractGridKeyEventHandler.java)/**
 * Base interface of all handlers for {@link AbstractGridKeyEvent}s.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
AbstractGridMouseEventHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/AbstractGridMouseEventHandler.java)/**
 * Base interface of all handlers for {@link AbstractGridMouseEvent}s.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyClickHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/BodyClickHandler.java)/**
 * Handler for {@link GridClickEvent}s that happen in the body of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyDoubleClickHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/BodyDoubleClickHandler.java)/**
 * Handler for {@link GridDoubleClickEvent}s that happen in the body of the
 * Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyKeyDownHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/BodyKeyDownHandler.java)/**
 * Handler for {@link GridKeyDownEvent}s that happen when the focused cell is in
 * the body of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyKeyPressHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/BodyKeyPressHandler.java)/**
 * Handler for {@link GridKeyPressEvent}s that happen when the focused cell is
 * in the body of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BodyKeyUpHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/BodyKeyUpHandler.java)/**
 * Handler for {@link GridKeyUpEvent}s that happen when the focused cell is in
 * the body of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ColumnReorderEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/ColumnReorderEvent.java)/**
 * An event for notifying that the columns in the Grid have been reordered.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.5.0
 * @author Vaadin Ltd
 */
ColumnReorderHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/ColumnReorderHandler.java)/**
 * Handler for a Grid column reorder event, called when the Grid's columns has
 * been reordered.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.5.0
 * @author Vaadin Ltd
 */
ColumnResizeEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/ColumnResizeEvent.java)/**
 * An event for notifying that the columns in the Grid have been resized.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.6
 * @author Vaadin Ltd
 */
ColumnResizeHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/ColumnResizeHandler.java)/**
 * Handler for a Grid column resize event, called when the Grid's columns has
 * been resized.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.6
 * @author Vaadin Ltd
 */
ColumnVisibilityChangeEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/ColumnVisibilityChangeEvent.java)/**
 * An event for notifying that the columns in the Grid's have changed
 * visibility.
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.5.0
 * @author Vaadin Ltd
 */
ColumnVisibilityChangeHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/ColumnVisibilityChangeHandler.java)/**
 * Handler for a Grid column visibility change event, called when the Grid's
 * columns have changed visibility to hidden or visible.
 *
 * @param<T> The
 *               row type of the grid. The row type is the POJO type from where
 *               the data is retrieved into the column cells.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
FooterClickHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/FooterClickHandler.java)/**
 * Handler for {@link GridClickEvent}s that happen in the footer of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FooterDoubleClickHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/FooterDoubleClickHandler.java)/**
 * Handler for {@link GridDoubleClickEvent}s that happen in the footer of the
 * Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FooterKeyDownHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/FooterKeyDownHandler.java)/**
 * Handler for {@link GridKeyDownEvent}s that happen when the focused cell is in
 * the footer of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FooterKeyPressHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/FooterKeyPressHandler.java)/**
 * Handler for {@link GridKeyPressEvent}s that happen when the focused cell is
 * in the footer of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FooterKeyUpHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/FooterKeyUpHandler.java)/**
 * Handler for {@link GridKeyUpEvent}s that happen when the focused cell is in
 * the footer of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridClickEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/GridClickEvent.java)/**
 * Represents native mouse click event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridDoubleClickEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/GridDoubleClickEvent.java)/**
 * Represents native mouse double click event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridEnabledEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/GridEnabledEvent.java)/**
 * An enabled/disabled event, fired by the Grid when it is disabled or enabled.
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
GridEnabledHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/GridEnabledHandler.java)/**
 * Handler for a Grid enabled/disabled event, called when the Grid is enabled or
 * disabled.
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
GridKeyDownEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/GridKeyDownEvent.java)/**
 * Represents native key down event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridKeyPressEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/GridKeyPressEvent.java)/**
 * Represents native key press event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridKeyUpEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/GridKeyUpEvent.java)/**
 * Represents native key up event in Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HeaderClickHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/HeaderClickHandler.java)/**
 * Handler for {@link GridClickEvent}s that happen in the header of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HeaderDoubleClickHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/HeaderDoubleClickHandler.java)/**
 * Handler for {@link GridDoubleClickEvent}s that happen in the header of the
 * Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HeaderKeyDownHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/HeaderKeyDownHandler.java)/**
 * Handler for {@link GridKeyDownEvent}s that happen when the focused cell is in
 * the header of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HeaderKeyPressHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/HeaderKeyPressHandler.java)/**
 * Handler for {@link GridKeyPressEvent}s that happen when the focused cell is
 * in the header of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HeaderKeyUpHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/HeaderKeyUpHandler.java)/**
 * Handler for {@link GridKeyUpEvent}s that happen when the focused cell is in
 * the header of the Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ScrollEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/ScrollEvent.java)/**
 * An event that signifies that a scrollbar bundle has been scrolled.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
ScrollHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/ScrollHandler.java)/**
 * A handler that gets called whenever a scrollbar bundle is scrolled.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
SelectAllEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/SelectAllEvent.java)/**
 * A select all event, fired by the Grid when it needs all rows in data source
 * to be selected.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SelectAllHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/events/SelectAllHandler.java)/**
 * Handler for a Grid select all event, called when the Grid needs all rows in
 * data source to be selected.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridEventHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/GridEventHandler.java)/**
 * A handler for events emitted by elements in Grid.
 *
 * @param <T>
 *            the grid row type
 */
HeightAwareDetailsGenerator (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/HeightAwareDetailsGenerator.java)/**
 * {@link DetailsGenerator} that is aware of content heights.
 * <p>
 * <b>FOR INTERNAL USE ONLY!</b> This class exists only for the sake of a
 * temporary workaround and might be removed or renamed at any time.
 * </p>
 *
 * @since 7.6.1
 * @author Vaadin Ltd
 */
RendererCellReference (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/RendererCellReference.java)/**
 * A data class which contains information which identifies a cell being
 * rendered in a {@link Grid}.
 * <p>
 * Since this class follows the <code>Flyweight</code>-pattern any instance of
 * this object is subject to change without the user knowing it and so should
 * not be stored anywhere outside of the method providing these instances.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RowReference (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/RowReference.java)/**
 * A data class which contains information which identifies a row in a
 * {@link Grid}.
 * <p>
 * Since this class follows the <code>Flyweight</code>-pattern any instance of
 * this object is subject to change without the user knowing it and so should
 * not be stored anywhere outside of the method providing these instances.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the row object type
 * @since 7.4
 */
RowStyleGenerator (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/RowStyleGenerator.java)/**
 * Callback interface for generating custom style names for data rows.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the row type of the target grid
 * @see com.vaadin.v7.client.widgets.Grid#setRowStyleGenerator(RowStyleGenerator)
 *      Grid#setRowStyleGenerator(RowStyleGenerator)
 * @since 7.4
 */
AbstractRowHandleSelectionModel (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/AbstractRowHandleSelectionModel.java)/**
 * An abstract class that adds a consistent API for common methods that's needed
 * by Vaadin's server-based selection models to work.
 * <p>
 * <em>Note:</em> This should be an interface instead of an abstract class, if
 * only we could define protected methods in an interface.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            The grid's row type
 * @since 7.4
 */
ClickSelectHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/ClickSelectHandler.java)/**
 * Generic class to perform selections when clicking on cells in body of Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HasSelectionHandlers (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/HasSelectionHandlers.java)/**
 * Marker interface for widgets that fires selection events.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
HasUserSelectionAllowed (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/HasUserSelectionAllowed.java)/**
 * Interface implemented by selection models which support disabling client side
 * selection while still allowing programmatic selection on the server.
 *
 * @param <T>
 *            Grid's row type
 *
 * @since 7.7.7
 */
CheckBoxEventHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/MultiSelectionRenderer.java)/**
     * Handler for MouseDown and TouchStart events for selection checkboxes.
     *
     * @since 7.5
     */
TouchEventHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/MultiSelectionRenderer.java)/**
     * This class's main objective is to listen when to stop autoscrolling, and
     * make sure everything stops accordingly.
     */
AutoScrollerAndSelector (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/MultiSelectionRenderer.java)/**
     * This class's responsibility is to
     * <ul>
     * <li>scroll the table while a pointer is kept in a scrolling zone and
     * <li>select rows whenever a pointer is "activated" on a selection cell
     * </ul>
     * <p>
     * <em>Techical note:</em> This class is an AnimationCallback because we
     * need a timer: when the finger is kept in place while the grid scrolls, we
     * still need to be able to make new selections. So, instead of relying on
     * events (which won't be fired, since the pointer isn't necessarily
     * moving), we do this check on each frame while the pointer is "active"
     * (mouse is pressed, finger is on screen).
     */
AutoScrollHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/MultiSelectionRenderer.java)/**
     * This class makes sure that pointer movemenets are registered and
     * delegated to the autoscroller so that it can:
     * <ul>
     * <li>modify the speed in which we autoscroll.
     * <li>"paint" a new row with the selection.
     * </ul>
     * Essentially, when a pointer is pressed on the selection column, a native
     * preview handler is registered (so that selection gestures can happen
     * outside of the selection column). The handler itself makes sure that it's
     * detached when the pointer is "lifted".
     */
MultiSelectionRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/MultiSelectionRenderer.java)/**
 * Renderer showing multi selection check boxes.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the type of the associated grid
 * @since 7.4
 */
SelectionEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionEvent.java)/**
 * Event object describing a change in Grid row selection state.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SelectionHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionHandler.java)/**
 * Handler for {@link SelectionEvent}s.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            The row data type
 * @since 7.4
 */
Single (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionModel.java)/**
     * Selection model that allows a maximum of one row to be selected at any
     * one time.
     *
     * @param <T>
     *            type parameter corresponding with Grid row type
     */
Batched (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionModel.java)/**
         * A multi selection model that can send selections and deselections in
         * a batch, instead of committing them one-by-one.
         *
         * @param <T>
         *            type parameter corresponding with Grid row type
         */
Multi (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionModel.java)/**
     * Selection model that allows for several rows to be selected at once.
     *
     * @param <T>
     *            type parameter corresponding with Grid row type
     */
None (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionModel.java)/**
     * Interface for a selection model that does not allow anything to be
     * selected.
     *
     * @param <T>
     *            type parameter corresponding with Grid row type
     */
SelectionModel (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionModel.java)/**
 * Common interface for all selection models.
 * <p>
 * Selection models perform tracking of selected rows in the Grid, as well as
 * dispatching events when the selection state changes.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            Grid's row type
 * @since 7.4
 */
SelectionModelMulti (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionModelMulti.java)/**
 * Multi-row selection model.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
SelectionModelNone (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionModelNone.java)/**
 * No-row selection model.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
SelectionModelSingle (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SelectionModelSingle.java)/**
 * Single-row selection model.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
SpaceKeyDownHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SpaceSelectHandler.java)/**
     * Handler for space key down events in Grid Body
     */
SpaceSelectHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/selection/SpaceSelectHandler.java)/**
 * Generic class to perform selections when pressing space key.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            row data type
 * @since 7.4
 */
Sort (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/sort/Sort.java)/**
 * Fluid Sort descriptor object.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SortEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/sort/SortEvent.java)/**
 * A sort event, fired by the Grid when it needs its data source to provide data
 * sorted in a specific manner.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SortHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/sort/SortHandler.java)/**
 * Handler for a Grid sort event, called when the Grid needs its data source to
 * provide data sorted in a specific manner.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SortOrder (/compatibility-client/src/main/java/com/vaadin/v7/client/widget/grid/sort/SortOrder.java)/**
 * Sort order descriptor. Contains column and direction references.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
JsniWorkaround (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Escalator.java)/**
 * A workaround-class for GWT and JSNI.
 * <p>
 * GWT is unable to handle some method calls to Java methods in inner-classes
 * from within JSNI blocks. Having that inner class extend a non-inner-class (or
 * implement such an interface), makes it possible for JSNI to indirectly refer
 * to the inner class, by invoking methods and fields in the non-inner-class
 * API.
 *
 * @see Escalator.Scroller
 */
CustomTouchEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Escalator.java)/**
             * A <a href=
             * "http://www.gwtproject.org/doc/latest/DevGuideCodingBasicsOverlay.html"
             * >JavaScriptObject overlay</a> for the
             * <a href="http://www.w3.org/TR/touch-events/">JavaScript
             * TouchEvent</a> object.
             * <p>
             * This needs to be used in the touch event handlers, since GWT's
             * {@link com.google.gwt.event.dom.client.TouchEvent TouchEvent}
             * can't be cast from the JSNI call, and the
             * {@link com.google.gwt.dom.client.NativeEvent NativeEvent} isn't
             * properly populated with the correct values.
             */
JsniUtil (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Escalator.java)/**
     * A utility class that contains utility methods that are usually called
     * from JSNI.
     * <p>
     * The methods are moved in this class to minimize the amount of JSNI code
     * as much as feasible.
     */
Scroller (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Escalator.java)/** An inner class that handles all logic related to scrolling. */
SubPartArguments (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Escalator.java)/**
     * Utility class for parsing and storing SubPart request string attributes
     * for Grid and Escalator.
     *
     * @since 7.5.0
     */
Escalator (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Escalator.java)/**
 * A low-level table-like widget that features a scrolling virtual viewport and
 * lazily generated rows.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
StaticCell (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
         * A header or footer cell. Has a simple textual caption.
         *
         */
StaticRow (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
         * Abstract base class for Grid header and footer rows.
         *
         * @param <CELLTYPE>
         *            the type of the cells in the row
         */
StaticSection (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * Abstract base class for Grid header and footer sections.
     *
     * @since 7.5.0
     *
     * @param <ROWTYPE>
     *            the type of the rows in the section
     */
Header (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * Represents the header section of a Grid. A header consists of a single
     * header row containing a header cell for each column. Each cell has a
     * simple textual caption.
     */
HeaderRow (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * A single row in a grid header section.
     *
     */
HeaderCell (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * A single cell in a grid header row. Has a caption and, if it's in a
     * default row, a drag handle.
     */
Footer (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * Represents the footer section of a Grid. The footer is always empty.
     */
FooterCell (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * A single cell in a grid Footer row. Has a textual caption.
     *
     */
FooterRow (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * A single row in a grid Footer section.
     *
     */
RequestCallback (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
         * A callback interface used to notify the invoker of the editor handler
         * of completed editor requests.
         *
         * @param <T>
         *            the row data type
         */
GridEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * A wrapper for native DOM events originating from Grid. In addition to the
     * native event, contains a {@link CellReference} instance specifying which
     * cell the event originated from.
     *
     * @since 7.6
     * @param <T>
     *            The row type of the grid
     */
EditorDomEvent (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * A wrapper for native DOM events related to the {@link Editor Grid editor}
     * .
     *
     * @since 7.6
     * @param <T>
     *            the row type of the grid
     */
EventHandler (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
         * A handler for events related to the Grid editor. Responsible for
         * opening, moving or closing the editor based on the received event.
         *
         * @since 7.6
         * @author Vaadin Ltd
         * @param <T>
         *            the row type of the grid
         */
Editor (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * An editor UI for Grid rows. A single Grid row at a time can be opened for
     * editing.
     *
     * @since 7.6
     * @param <T>
     *            the row type of the grid
     */
UserSorter (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * Helper class for performing sorting through the user interface. Controls
     * the sort() method, reporting USER as the event originator. This is a
     * completely internal class, and is, as such, safe to re-name should a more
     * descriptive name come to mind.
     */
AutoColumnWidthsRecalculator (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * @see Grid#autoColumnWidthsRecalculator
     */
Sidebar (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * Sidebar displaying toggles for hidable columns and custom widgets
     * provided by the application.
     * <p>
     * The button for opening the sidebar is automatically visible inside the
     * grid, if it contains any column hiding options or custom widgets. The
     * column hiding toggles and custom widgets become visible once the sidebar
     * has been opened.
     *
     * @since 7.5.0
     */
ColumnHider (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * UI and functionality related to hiding columns with toggles in the
     * sidebar.
     */
DefaultTextRenderer (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
         * Default renderer for GridColumns. Renders everything into text
         * through {@link Object#toString()}.
         */
Column (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
     * Base class for grid columns internally used by the Grid. The user should
     * use {@link Column} when creating new columns.
     *
     * @param <C>
     *            the column type
     *
     * @param <T>
     *            the row type
     */
Grid (/compatibility-client/src/main/java/com/vaadin/v7/client/widgets/Grid.java)/**
 * A data grid view that supports columns and lazy loading of data rows from a
 * data source.
 *
 * <h1>Columns</h1>
 * <p>
 * Each column in Grid is represented by a {@link Column}. Each
 * {@code GridColumn} has a custom implementation for
 * {@link Column#getValue(Object)} that gets the row object as an argument, and
 * returns the value for that particular column, extracted from the row object.
 * <p>
 * Each column also has a Renderer. Its function is to take the value that is
 * given by the {@code GridColumn} and display it to the user. A simple column
 * might have a {@link TextRenderer} that simply takes in a {@code String} and
 * displays it as the cell's content. A more complex renderer might be
 * {@link ProgressBarRenderer} that takes in a floating point number, and
 * displays a progress bar instead, based on the given number.
 * <p>
 * <em>See:</em> {@link #addColumn(Column)}, {@link #addColumn(Column, int)} and
 * {@link #addColumns(Column...)}. <em>Also</em>
 * {@link Column#setRenderer(Renderer)}.
 *
 * <h1>Data Sources</h1>
 * <p>
 * Grid gets its data from a {@link DataSource}, providing row objects to Grid
 * from a user-defined endpoint. It can be either a local in-memory data source
 * (e.g. {@link ListDataSource}) or even a remote one, retrieving data from e.g.
 * a REST API (see {@link AbstractRemoteDataSource}).
 *
 *
 * @param <T>
 *            The row type of the grid. The row type is the POJO type from where
 *            the data is retrieved into the column cells.
 * @since 7.4
 * @author Vaadin Ltd
 */
SourceException (/compatibility-server/src/main/java/com/vaadin/v7/data/Buffered.java)/**
     * An exception that signals that one or more exceptions occurred while a
     * buffered object tried to access its data source or if there is a problem
     * in processing a data source.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
Buffered (/compatibility-server/src/main/java/com/vaadin/v7/data/Buffered.java)/**
 * <p>
 * Defines the interface to commit and discard changes to an object, supporting
 * buffering.
 *
 * <p>
 * In <i>buffered</i> mode the initial value is read from the data source and
 * then buffered. Any subsequential writes or reads will be done on the buffered
 * value. Calling {@link #commit()} will write the buffered value to the data
 * source while calling {@link #discard()} while discard the buffered value and
 * re-read the value from the data source.
 *
 * <p>
 * In <i>non-buffered</i> mode the value is always read directly from the data
 * source. Any write is done directly to the data source with no buffering in
 * between. Reads are also done directly from the data source. Calling
 * {@link #commit()} or {@link #discard()} in this mode is efficiently a no-op.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 * @deprecated As of 8.0, no replacement available, see
 *             {@link Binder#writeBean(Object)}, {@link Binder#clearFields()}
 *
 */
BufferedValidatable (/compatibility-server/src/main/java/com/vaadin/v7/data/BufferedValidatable.java)/**
 * <p>
 * This interface defines the combination of <code>Validatable</code> and
 * <code>Buffered</code> interfaces. The combination of the interfaces defines
 * if the invalid data is committed to datasource.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 * @deprecated As of 8.0, no direct replacement available. See {@link Binder}, {@link com.vaadin.data.Validator}.
 */
Collapsible (/compatibility-server/src/main/java/com/vaadin/v7/data/Collapsible.java)/**
 * Container needed by large lazy loading hierarchies displayed e.g. in
 * TreeTable.
 * <p>
 * Container of this type gets notified when a subtree is opened/closed in a
 * component displaying its content. This allows container to lazy load subtrees
 * and release memory when a sub-tree is no longer displayed.
 * <p>
 * Methods from {@link Container.Ordered} (and from {@linkContainer.Indexed} if
 * implemented) are expected to work as in "preorder" of the currently visible
 * hierarchy. This means for example that the return value of size method
 * changes when subtree is collapsed/expanded. In other words items in collapsed
 * sub trees should be "ignored" by container when the container is accessed
 * with methods introduced in {@link Container.Ordered} or
 * {@linkContainer.Indexed}. From the accessors point of view, items in
 * collapsed subtrees don't exist.
 * <p>
 *
 * @deprecated Use {@code TreeGrid.addExpandListener()} and
 *             {@code TreeGrid.addCollapseListener()}.
 */
Ordered (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * Interface for Container classes whose {@link Item}s can be traversed in
     * order.
     *
     * <p>
     * If the container is filtered or sorted, the traversal applies to the
     * filtered and sorted view.
     * </p>
     * <p>
     * The <code>addItemAfter()</code> methods should apply filters to the added
     * item after inserting it, possibly hiding it immediately. If the container
     * is being sorted, they may add items at the correct sorted position
     * instead of the given position. See also {@link Filterable} and
     * {@link Sortable} for more information.
     * </p>
     */
Sortable (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * Interface for Container classes whose {@link Item}s can be sorted.
     * <p>
     * When an {@link Ordered} or {@link Indexed} container is sorted, all
     * relevant operations of these interfaces should only use the filtered and
     * sorted contents and the filtered indices to the container. Indices or
     * item identifiers in the public API refer to the visible view unless
     * otherwise stated. However, the <code>addItem*()</code> methods may add
     * items that will be filtered out after addition or moved to another
     * position based on sorting.
     * </p>
     * <p>
     * How sorting is performed when a {@link Hierarchical} container implements
     * {@link Sortable} is implementation specific and should be documented in
     * the implementing class. However, the recommended approach is sorting the
     * roots and the sets of children of each item separately.
     * </p>
     * <p>
     * Depending on the container type, sorting a container may permanently
     * change the internal order of items in the container.
     * </p>
     *
     * @deprecated As of 8.0, sorting is integrated into {@link DataProvider}
     *             and {@link Query#getSortOrders()}. For in-memory case, you
     *             can use also
     *             {@link ListDataProvider#setSortComparator(SerializableComparator)}.
     *             For back-end DataProviders, see
     *             {@link AbstractBackEndDataProvider#setSortOrders(List)}.
     */
ItemAddEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
         * An <code>Event</code> object specifying information about the added
         * items.
         *
         * @since 7.4
         */
ItemRemoveEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
         * An <code>Event</code> object specifying information about the removed
         * items.
         *
         * @since 7.4
         */
Indexed (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * Interface for Container classes whose {@link Item}s can be accessed by
     * their position in the container.
     * <p>
     * If the container is filtered or sorted, all indices refer to the filtered
     * and sorted view. However, the <code>addItemAt()</code> methods may add
     * items that will be filtered out after addition or moved to another
     * position based on sorting.
     * </p>
     */
Hierarchical (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * <p>
     * Interface for <code>Container</code> classes whose Items can be arranged
     * hierarchically. This means that the Items in the container belong in a
     * tree-like structure, with the following quirks:
     * </p>
     *
     * <ul>
     * <li>The Item structure may have more than one root elements
     * <li>The Items in the hierarchy can be declared explicitly to be able or
     * unable to have children.
     * </ul>
     *
     * @deprecated See {@code HierarchicalDataProvider} and its implementations.
     */
SimpleFilterable (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * Interface that is implemented by containers which allow reducing their
     * visible contents based on a set of filters. This interface has been
     * renamed from {@link Filterable}, and implementing the new
     * {@link Filterable} instead of or in addition to {@link SimpleFilterable}
     * is recommended. This interface might be removed in future Vaadin
     * versions.
     * <p>
     * When a set of filters are set, only items that match all the filters are
     * included in the visible contents of the container. Still new items that
     * do not match filters can be added to the container. Multiple filters can
     * be added and the container remembers the state of the filters. When
     * multiple filters are added, all filters must match for an item to be
     * visible in the container.
     * </p>
     * <p>
     * When an {@link Ordered} or {@link Indexed} container is filtered, all
     * operations of these interfaces should only use the filtered contents and
     * the filtered indices to the container.
     * </p>
     * <p>
     * How filtering is performed when a {@link Hierarchical} container
     * implements {@link SimpleFilterable} is implementation specific and should
     * be documented in the implementing class.
     * </p>
     * <p>
     * Adding items (if supported) to a filtered {@link Ordered} or
     * {@link Indexed} container should insert them immediately after the
     * indicated visible item. The unfiltered position of items added at index
     * 0, at index {@link Container#size()} or at an undefined position is up to
     * the implementation.
     * </p>
     * <p>
     * The functionality of SimpleFilterable can be implemented using the
     * {@link Filterable} API and {@link SimpleStringFilter}.
     * </p>
     *
     * @since 5.0 (renamed from Filterable to SimpleFilterable in 6.6)
     */
Filter (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * Filter interface for container filtering.
     * <p>
     * If a filter does not support in-memory filtering,
     * {@link #passesFilter(Item)} should throw
     * {@link UnsupportedOperationException}.
     * <p>
     * Lazy containers must be able to map filters to their internal
     * representation (e.g. SQL or JPA 2.0 Criteria).
     * <p>
     * An {@link UnsupportedFilterException} can be thrown by the container if a
     * particular filter is not supported by the container.
     * <p>
     * An {@link Filter} should implement {@link #equals(Object)} and
     * {@link #hashCode()} correctly to avoid duplicate filter registrations
     * etc.
     *
     * @see Filterable
     *
     * @since 6.6
     *
     * @deprecated As of 8.0, the whole filtering feature is integrated into
     *             {@link DataProvider}. For in-memory case
     *             ({@link ListDataProvider}), use predicates as filters. For
     *             back-end DataProviders, filters are specific to the
     *             implementation.
     */
Filterable (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * Interface that is implemented by containers which allow reducing their
     * visible contents based on a set of filters.
     * <p>
     * When a set of filters are set, only items that match all the filters are
     * included in the visible contents of the container. Still new items that
     * do not match filters can be added to the container. Multiple filters can
     * be added and the container remembers the state of the filters. When
     * multiple filters are added, all filters must match for an item to be
     * visible in the container.
     * </p>
     * <p>
     * When an {@link Ordered} or {@link Indexed} container is filtered, all
     * operations of these interfaces should only use the filtered and sorted
     * contents and the filtered indices to the container. Indices or item
     * identifiers in the public API refer to the visible view unless otherwise
     * stated. However, the <code>addItem*()</code> methods may add items that
     * will be filtered out after addition or moved to another position based on
     * sorting.
     * </p>
     * <p>
     * How filtering is performed when a {@link Hierarchical} container
     * implements {@link Filterable} is implementation specific and should be
     * documented in the implementing class.
     * </p>
     * <p>
     * Adding items (if supported) to a filtered {@link Ordered} or
     * {@link Indexed} container should insert them immediately after the
     * indicated visible item. However, the unfiltered position of items added
     * at index 0, at index {@link Container#size()} or at an undefined position
     * is up to the implementation.
     * </p>
     *
     * <p>
     * This API replaces the old Filterable interface, renamed to
     * {@link SimpleFilterable} in Vaadin 6.6.
     * </p>
     *
     * @since 6.6
     */
Viewer (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * Interface implemented by viewer classes capable of using a Container as a
     * data source.
     */
Editor (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * <p>
     * Interface implemented by the editor classes supporting editing the
     * Container. Implementing this interface means that the Container serving
     * as the data source of the editor can be modified through it.
     * </p>
     * <p>
     * Note that not implementing the <code>Container.Editor</code> interface
     * does not restrict the class from editing the Container contents
     * internally.
     * </p>
     */
ItemSetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * An <code>Event</code> object specifying the Container whose Item set has
     * changed (items added, removed or reordered).
     *
     * A simple property value change is not an item set change.
     */
ItemSetChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * Container Item set change listener interface.
     * <p>
     * An item set change refers to addition, removal or reordering of items in
     * the container. A simple property value change is not an item set change.
     */
ItemSetChangeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * The interface for adding and removing <code>ItemSetChangeEvent</code>
     * listeners. By implementing this interface a class explicitly announces
     * that it will generate a <code>ItemSetChangeEvent</code> when its contents
     * are modified.
     * <p>
     * An item set change refers to addition, removal or reordering of items in
     * the container. A simple property value change is not an item set change.
     *
     * <p>
     * Note: The general Java convention is not to explicitly declare that a
     * class generates events, but to directly define the
     * <code>addListener</code> and <code>removeListener</code> methods. That
     * way the caller of these methods has no real way of finding out if the
     * class really will send the events, or if it just defines the methods to
     * be able to implement an interface.
     * </p>
     */
PropertySetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * An <code>Event</code> object specifying the Container whose Property set
     * has changed.
     * <p>
     * A property set change means the addition, removal or other structural
     * changes to the properties of a container. Changes concerning the set of
     * items in the container and their property values are not property set
     * changes.
     */
PropertySetChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * The listener interface for receiving <code>PropertySetChangeEvent</code>
     * objects.
     * <p>
     * A property set change means the addition, removal or other structural
     * change of the properties (supported property IDs) of a container. Changes
     * concerning the set of items in the container and their property values
     * are not property set changes.
     */
PropertySetChangeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
     * <p>
     * The interface for adding and removing <code>PropertySetChangeEvent</code>
     * listeners. By implementing this interface a class explicitly announces
     * that it will generate a <code>PropertySetChangeEvent</code> when the set
     * of property IDs supported by the container is modified.
     * </p>
     *
     * <p>
     * A property set change means the addition, removal or other structural
     * changes to the properties of a container. Changes concerning the set of
     * items in the container and their property values are not property set
     * changes.
     * </p>
     *
     * <p>
     * Note that the general Java convention is not to explicitly declare that a
     * class generates events, but to directly define the
     * <code>addListener</code> and <code>removeListener</code> methods. That
     * way the caller of these methods has no real way of finding out if the
     * class really will send the events, or if it just defines the methods to
     * be able to implement an interface.
     * </p>
     */
Container (/compatibility-server/src/main/java/com/vaadin/v7/data/Container.java)/**
 * <p>
 * A specialized set of identified Items. Basically the Container is a set of
 * {@link Item}s, but it imposes certain constraints on its contents. These
 * constraints state the following:
 * </p>
 *
 * <ul>
 * <li>All Items in the Container must have the same number of Properties.
 * <li>All Items in the Container must have the same Property ID's (see
 * {@link Item#getItemPropertyIds()}).
 * <li>All Properties in the Items corresponding to the same Property ID must
 * have the same data type.
 * <li>All Items within a container are uniquely identified by their non-null
 * IDs.
 * </ul>
 *
 * <p>
 * The Container can be visualized as a representation of a relational database
 * table. Each Item in the Container represents a row in the table, and all
 * cells in a column (identified by a Property ID) have the same data type. Note
 * that as with the cells in a database table, no Property in a Container may be
 * empty, though they may contain <code>null</code> values.
 * </p>
 *
 * <p>
 * Note that though uniquely identified, the Items in a Container are not
 * necessarily {@link Container.Ordered ordered} or {@link Container.Indexed
 * indexed}.
 * </p>
 *
 * <p>
 * Containers can derive Item ID's from the item properties or use other,
 * container specific or user specified identifiers.
 * </p>
 *
 * <p>
 * If a container is {@link Filterable filtered} or {@link Sortable sorted},
 * most of the the methods of the container interface and its subinterfaces
 * (container size, {@link #containsId(Object)}, iteration and indices etc.)
 * relate to the filtered and sorted view, not to the full container contents.
 * See individual method javadoc for exceptions to this (adding and removing
 * items).
 * </p>
 *
 * <p>
 * <img src=doc-files/Container_full.gif>
 * </p>
 *
 * <p>
 * The Container interface is split to several subinterfaces so that a class can
 * implement only the ones it needs.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 3.0
 *
 * @deprecated As of 8.0, replaced by {@link DataProvider}
 */
ContainerHelpers (/compatibility-server/src/main/java/com/vaadin/v7/data/ContainerHelpers.java)/**
 * Contains helper methods for containers that can be used to ease development
 * of containers in Vaadin.
 *
 * @since 7.0
 *
 * @deprecated As of 8.0, no direct replacement available, see
 *             {@link DataProvider}
 */
BeanFieldGroup (/compatibility-server/src/main/java/com/vaadin/v7/data/fieldgroup/BeanFieldGroup.java)/**
 *
 * @deprecated As of 8.0, replaced by {@link Binder} and
 *             {@link BeanValidationBinder}
 */
DefaultFieldGroupFieldFactory (/compatibility-server/src/main/java/com/vaadin/v7/data/fieldgroup/DefaultFieldGroupFieldFactory.java)/**
 * This class contains a basic implementation for {@link FieldGroupFieldFactory}
 * .The class is singleton, use {@link #get()} method to get reference to the
 * instance.
 *
 * @author Vaadin Ltd
 * @deprecated As of 8.0, no direct replacement available. {@link Binder#forMemberField(HasValue)} and
 * {@link Binder#bindInstanceFields(Object)} should be used instead.
 */
FieldGroupInvalidValueException (/compatibility-server/src/main/java/com/vaadin/v7/data/fieldgroup/FieldGroup.java)/**
     * Exception which wraps InvalidValueExceptions from all invalid fields in a
     * FieldGroup.
     *
     * @since 7.4
     */
CommitHandler (/compatibility-server/src/main/java/com/vaadin/v7/data/fieldgroup/FieldGroup.java)/**
     * CommitHandlers are used by {@link FieldGroup#commit()} as part of the
     * commit transactions. CommitHandlers can perform custom operations as part
     * of the commit and cause the commit to be aborted by throwing a
     * {@link CommitException}.
     */
CommitEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/fieldgroup/FieldGroup.java)/**
     * The commit event.
     *
     */
CommitException (/compatibility-server/src/main/java/com/vaadin/v7/data/fieldgroup/FieldGroup.java)/**
     * Exception thrown by a FieldGroup when the commit operation fails.
     *
     * Provides information about validation errors through
     * {@link #getInvalidFields()} if the cause of the failure is that all bound
     * fields did not pass validation
     *
     */
FieldGroup (/compatibility-server/src/main/java/com/vaadin/v7/data/fieldgroup/FieldGroup.java)/**
 * FieldGroup provides an easy way of binding fields to data and handling
 * commits of these fields.
 * <p>
 * The functionality of FieldGroup is similar to {@link com.vaadin.v7.ui.Form
 * Form} but {@link FieldGroup} does not handle layouts in any way. The typical
 * use case is to create a layout outside the FieldGroup and then use FieldGroup
 * to bind the fields to a data source.
 * </p>
 * <p>
 * {@link FieldGroup} is not a UI component so it cannot be added to a layout.
 * Using the buildAndBind methods {@link FieldGroup} can create fields for you
 * using a FieldGroupFieldFactory but you still have to add them to the correct
 * position in your layout.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0
 * @deprecated As of 8.0, replaced by {@link Binder}
 */
FieldGroupFieldFactory (/compatibility-server/src/main/java/com/vaadin/v7/data/fieldgroup/FieldGroupFieldFactory.java)/**
 * Factory interface for creating new Field-instances based on the data type
 * that should be edited.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 * @deprecated As of 8.0, no direct replacement available.
 *             {@link Binder#forMemberField(HasValue)} and
 *             {@link Binder#bindInstanceFields(Object)} should be used instead.
 */
Viewer (/compatibility-server/src/main/java/com/vaadin/v7/data/Item.java)/**
     * Interface implemented by viewer classes capable of using an Item as a
     * data source.
     */
Editor (/compatibility-server/src/main/java/com/vaadin/v7/data/Item.java)/**
     * Interface implemented by the <code>Editor</code> classes capable of
     * editing the Item. Implementing this interface means that the Item serving
     * as the data source of the editor can be modified through it.
     * <p>
     * Note : Not implementing the <code>Item.Editor</code> interface does not
     * restrict the class from editing the contents of an internally.
     * </p>
     */
PropertySetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/Item.java)/**
     * An <code>Event</code> object specifying the Item whose contents has been
     * changed through the <code>Property</code> interface.
     * <p>
     * Note: The values stored in the Properties may change without triggering
     * this event.
     * </p>
     */
PropertySetChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/data/Item.java)/**
     * The listener interface for receiving <code>PropertySetChangeEvent</code>
     * objects.
     */
PropertySetChangeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/data/Item.java)/**
     * The interface for adding and removing <code>PropertySetChangeEvent</code>
     * listeners. By implementing this interface a class explicitly announces
     * that it will generate a <code>PropertySetChangeEvent</code> when its
     * Property set is modified.
     * <p>
     * Note : The general Java convention is not to explicitly declare that a
     * class generates events, but to directly define the
     * <code>addListener</code> and <code>removeListener</code> methods. That
     * way the caller of these methods has no real way of finding out if the
     * class really will send the events, or if it just defines the methods to
     * be able to implement an interface.
     * </p>
     */
Item (/compatibility-server/src/main/java/com/vaadin/v7/data/Item.java)/**
 * <p>
 * Provides a mechanism for handling a set of Properties, each associated to a
 * locally unique non-null identifier. The interface is split into subinterfaces
 * to enable a class to implement only the functionalities it needs.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 3.0
 * @deprecated As of 8.0, no direct replacement available, see {@link Binder}, {@link DataProvider}
 */
Transactional (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * A Property that is capable of handle a transaction that can end in commit
     * or rollback.
     *
     * Note that this does not refer to e.g. database transactions but rather
     * two-phase commit that allows resetting old field values (in e.g. a
     * FieldGroup) if the commit of one of the properties fails after other
     * properties have already been committed.
     *
     * @param <T>
     *            The type of the property
     * @author Vaadin Ltd
     * @since 7.0
     */
ReadOnlyException (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * <code>Exception</code> object that signals that a requested Property
     * modification failed because it's in read-only mode.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
Viewer (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * Interface implemented by the viewer classes capable of using a Property
     * as a data source.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
Editor (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * Interface implemented by the editor classes capable of editing the
     * Property.
     * <p>
     * Implementing this interface means that the Property serving as the data
     * source of the editor can be modified through the editor. It does not
     * restrict the editor from editing the Property internally, though if the
     * Property is in a read-only mode, attempts to modify it will result in the
     * <code>ReadOnlyException</code> being thrown.
     * </p>
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ValueChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * An <code>Event</code> object specifying the Property whose value has been
     * changed.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ValueChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * The <code>listener</code> interface for receiving
     * <code>ValueChangeEvent</code> objects.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ValueChangeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * The interface for adding and removing <code>ValueChangeEvent</code>
     * listeners. If a Property wishes to allow other objects to receive
     * <code>ValueChangeEvent</code> generated by it, it must implement this
     * interface.
     * <p>
     * Note : The general Java convention is not to explicitly declare that a
     * class generates events, but to directly define the
     * <code>addListener</code> and <code>removeListener</code> methods. That
     * way the caller of these methods has no real way of finding out if the
     * class really will send the events, or if it just defines the methods to
     * be able to implement an interface.
     * </p>
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ReadOnlyStatusChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * An <code>Event</code> object specifying the Property whose read-only
     * status has been changed.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ReadOnlyStatusChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * The listener interface for receiving
     * <code>ReadOnlyStatusChangeEvent</code> objects.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ReadOnlyStatusChangeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
     * The interface for adding and removing
     * <code>ReadOnlyStatusChangeEvent</code> listeners. If a Property wishes to
     * allow other objects to receive <code>ReadOnlyStatusChangeEvent</code>
     * generated by it, it must implement this interface.
     * <p>
     * Note : The general Java convention is not to explicitly declare that a
     * class generates events, but to directly define the
     * <code>addListener</code> and <code>removeListener</code> methods. That
     * way the caller of these methods has no real way of finding out if the
     * class really will send the events, or if it just defines the methods to
     * be able to implement an interface.
     * </p>
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
Property (/compatibility-server/src/main/java/com/vaadin/v7/data/Property.java)/**
 * <p>
 * The <code>Property</code> is a simple data object that contains one typed
 * value. This interface contains methods to inspect and modify the stored value
 * and its type, and the object's read-only state.
 * </p>
 *
 * <p>
 * The <code>Property</code> also defines the events
 * <code>ReadOnlyStatusChangeEvent</code> and <code>ValueChangeEvent</code>, and
 * the associated <code>listener</code> and <code>notifier</code> interfaces.
 * </p>
 *
 * <p>
 * The <code>Property.Viewer</code> interface should be used to attach the
 * Property to an external data source. This way the value in the data source
 * can be inspected using the <code>Property</code> interface.
 * </p>
 *
 * <p>
 * The <code>Property.editor</code> interface should be implemented if the value
 * needs to be changed through the implementing class.
 * </p>
 *
 * @param <T>
 *            type of values of the property
 *
 * @author Vaadin Ltd
 * @deprecated As of 8.0, replaced by {@link HasValue}, {@link ValueProvider}, {@link Setter}, see {@link Binder}
 * @since 3.0
 */
Sort (/compatibility-server/src/main/java/com/vaadin/v7/data/sort/Sort.java)/**
 * Fluid Sort API. Provides a convenient, human-readable way of specifying
 * multi-column sort order.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SortOrder (/compatibility-server/src/main/java/com/vaadin/v7/data/sort/SortOrder.java)/**
 * Sort order descriptor. Links together a {@link SortDirection} value and a
 * Vaadin container property ID.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
BeanIdResolver (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractBeanContainer.java)/**
     * Resolver that maps beans to their (item) identifiers, removing the need
     * to explicitly specify item identifiers when there is no need to customize
     * this.
     *
     * Note that beans can also be added with an explicit id even if a resolver
     * has been set.
     *
     * @param <IDTYPE>
     * @param <BEANTYPE>
     *
     * @since 6.5
     */
PropertyBasedBeanIdResolver (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractBeanContainer.java)/**
     * A item identifier resolver that returns the value of a bean property.
     *
     * The bean must have a getter for the property, and the getter must return
     * an object of type IDTYPE.
     */
AbstractBeanContainer (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractBeanContainer.java)/**
 * An abstract base class for in-memory containers for JavaBeans.
 *
 * <p>
 * The properties of the container are determined automatically by introspecting
 * the used JavaBean class and explicitly adding or removing properties is not
 * supported. Only beans of the same type can be added to the container.
 * </p>
 *
 * <p>
 * Subclasses should implement any public methods adding items to the container,
 * typically calling the protected methods {@link #addItem(Object, Object)},
 * {@link #addItemAfter(Object, Object, Object)} and
 * {@link #addItemAt(int, Object, Object)}.
 * </p>
 *
 * @param <IDTYPE>
 *            The type of the item identifier
 * @param <BEANTYPE>
 *            The type of the Bean
 *
 * @since 6.5
 *
 *
 * @deprecated As of 8.0, replaced by {@link DataProvider}
 */
BasePropertySetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractContainer.java)/**
     * An <code>event</code> object specifying the container whose Property set
     * has changed.
     *
     * This class does not provide information about which properties were
     * concerned by the change, but subclasses can provide additional
     * information about the changes.
     */
BaseItemSetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractContainer.java)/**
     * An <code>event</code> object specifying the container whose Item set has
     * changed.
     *
     * This class does not provide information about the exact changes
     * performed, but subclasses can add provide additional information about
     * the changes.
     */
AbstractContainer (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractContainer.java)/**
 * Abstract container class that manages event listeners and sending events to
 * them ({@link PropertySetChangeNotifier}, {@link ItemSetChangeNotifier}).
 *
 * Note that this class provides the internal implementations for both types of
 * events and notifiers as protected methods, but does not implement the
 * {@link PropertySetChangeNotifier} and {@link ItemSetChangeNotifier}
 * interfaces directly. This way, subclasses can choose not to implement them.
 * Subclasses implementing those interfaces should also override the
 * corresponding {@link #addListener()} and {@link #removeListener()} methods to
 * make them public.
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, replaced by {@link DataProvider}
 */
BaseItemAddEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractInMemoryContainer.java)/**
     * An <code>Event</code> object specifying information about the added
     * items.
     *
     * <p>
     * This class provides information about the first added item and the number
     * of added items.
     * </p>
     *
     * @since 7.4
     */
BaseItemRemoveEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractInMemoryContainer.java)/**
     * An <code>Event</code> object specifying information about the removed
     * items.
     *
     * <p>
     * This class provides information about the first removed item and the
     * number of removed items.
     * </p>
     *
     * @since 7.4
     */
AbstractInMemoryContainer (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractInMemoryContainer.java)/**
 * Abstract {@link Container} class that handles common functionality for
 * in-memory containers. Concrete in-memory container classes can either inherit
 * this class, inherit {@link AbstractContainer}, or implement the
 * {@link Container} interface directly.
 *
 * Adding and removing items (if desired) must be implemented in subclasses by
 * overriding the appropriate add*Item() and remove*Item() and removeAllItems()
 * methods, calling the corresponding
 * {@link #internalAddItemAfter(Object, Object, Item)},
 * {@link #internalAddItemAt(int, Object, Item)},
 * {@link #internalAddItemAtEnd(Object, Item, boolean)},
 * {@link #internalRemoveItem(Object)} and {@link #internalRemoveAllItems()}
 * methods.
 *
 * By default, adding and removing container properties is not supported, and
 * subclasses need to implement {@link #getContainerPropertyIds()}. Optionally,
 * subclasses can override {@link #addContainerProperty(Object, Class, Object)}
 * and {@link #removeContainerProperty(Object)} to implement them.
 *
 * Features:
 * <ul>
 * <li>{@link Container.Ordered}
 * <li>{@link Container.Indexed}
 * <li>{@link Filterable} and {@link SimpleFilterable} (internal implementation,
 * does not implement the interface directly)
 * <li>{@link Sortable} (internal implementation, does not implement the
 * interface directly)
 * </ul>
 *
 * To implement {@link Sortable}, subclasses need to implement
 * {@link #getSortablePropertyIds()} and call the superclass method
 * {@link #sortContainer(Object[], boolean[])} in the method
 * <code>sort(Object[], boolean[])</code>.
 *
 * To implement {@link Filterable}, subclasses need to implement the methods
 * {@link Filterable#addContainerFilter(Container.Filter)} (calling
 * {@link #addFilter(Filter)}), {@link Filterable#removeAllContainerFilters()}
 * (calling {@link #removeAllFilters()}) and
 * {@link Filterable#removeContainerFilter(Container.Filter)} (calling
 * {@link #removeFilter(Container.Filter)}).
 *
 * To implement {@link SimpleFilterable}, subclasses also need to implement the
 * methods
 * {@link SimpleFilterable#addContainerFilter(Object, String, boolean, boolean)}
 * and {@link SimpleFilterable#removeContainerFilters(Object)} calling
 * {@link #addFilter(Container.Filter)} and {@link #removeFilters(Object)}
 * respectively.
 *
 * @param <ITEMIDTYPE>
 *            the class of item identifiers in the container, use Object if can
 *            be any class
 * @param <PROPERTYIDCLASS>
 *            the class of property identifiers for the items in the container,
 *            use Object if can be any class
 * @param <ITEMCLASS>
 *            the (base) class of the Item instances in the container, use
 *            {@link Item} if unknown
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, replaced by {@link DataProvider}
 */
ReadOnlyStatusChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractProperty.java)/**
     * An <code>Event</code> object specifying the Property whose read-only
     * status has been changed.
     */
ValueChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractProperty.java)/**
     * An <code>Event</code> object specifying the Property whose value has been
     * changed.
     */
AbstractProperty (/compatibility-server/src/main/java/com/vaadin/v7/data/util/AbstractProperty.java)/**
 * Abstract base class for {@link Property} implementations.
 *
 * Handles listener management for {@link ValueChangeListener}s and
 * {@link ReadOnlyStatusChangeListener}s.
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see
 *             {@link Binder}
 */
BeanContainer (/compatibility-server/src/main/java/com/vaadin/v7/data/util/BeanContainer.java)/**
 * An in-memory container for JavaBeans.
 *
 * <p>
 * The properties of the container are determined automatically by introspecting
 * the used JavaBean class. Only beans of the same type can be added to the
 * container.
 * </p>
 *
 * <p>
 * In BeanContainer (unlike {@link BeanItemContainer}), the item IDs do not have
 * to be the beans themselves. The container can be used either with explicit
 * item IDs or the item IDs can be generated when adding beans.
 * </p>
 *
 * <p>
 * To use explicit item IDs, use the methods {@link #addItem(Object, Object)},
 * {@link #addItemAfter(Object, Object, Object)} and
 * {@link #addItemAt(int, Object, Object)}.
 * </p>
 *
 * <p>
 * If a bean id resolver is set using
 * {@link #setBeanIdResolver(AbstractBeanContainer.BeanIdResolver)} or
 * {@link #setBeanIdProperty(Object)}, the methods {@link #addBean(Object)},
 * {@link #addBeanAfter(Object, Object)}, {@link #addBeanAt(int, Object)} and
 * {@link #addAll(java.util.Collection)} can be used to add items to the
 * container. If one of these methods is called, the resolver is used to
 * generate an identifier for the item (must not return null).
 * </p>
 *
 * <p>
 * Note that explicit item identifiers can also be used when a resolver has been
 * set by calling the addItem*() methods - the resolver is only used when adding
 * beans using the addBean*() or {@link #addAll(Collection)} methods.
 * </p>
 *
 * <p>
 * It is not possible to add additional properties to the container.
 * </p>
 *
 * @param <IDTYPE>
 *            The type of the item identifier
 * @param <BEANTYPE>
 *            The type of the Bean
 *
 * @see AbstractBeanContainer
 * @see BeanItemContainer
 *
 * @since 6.5
 *
 * @deprecated As of 8.0, replaced by {@link ListDataProvider}
 */
BeanItem (/compatibility-server/src/main/java/com/vaadin/v7/data/util/BeanItem.java)/**
 * A wrapper class for adding the Item interface to any Java Bean.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, no direct replacement available. You can use any bean directly as an item for {@link Binder}
 * or {@link DataProvider} and access the item properties with lambdas like {@code binder.forField(component).bind(...)} or
 * {@code new Grid<Bean>(dataProvider).addColumn(bean->bean.getSomething())}.
 */
IdentityBeanIdResolver (/compatibility-server/src/main/java/com/vaadin/v7/data/util/BeanItemContainer.java)/**
     * Bean identity resolver that returns the bean itself as its item
     * identifier.
     *
     * This corresponds to the old behavior of {@link BeanItemContainer}, and
     * requires suitable (identity-based) equals() and hashCode() methods on the
     * beans.
     *
     * @param <BT>
     *
     * @since 6.5
     */
BeanItemContainer (/compatibility-server/src/main/java/com/vaadin/v7/data/util/BeanItemContainer.java)/**
 * An in-memory container for JavaBeans.
 *
 * <p>
 * The properties of the container are determined automatically by introspecting
 * the used JavaBean class. Only beans of the same type can be added to the
 * container.
 * </p>
 *
 * <p>
 * BeanItemContainer uses the beans themselves as identifiers. The
 * {@link Object#hashCode()} of a bean is used when storing and looking up beans
 * so it must not change during the lifetime of the bean (it should not depend
 * on any part of the bean that can be modified). Typically this restricts the
 * implementation of {@link Object#equals(Object)} as well in order for it to
 * fulfill the contract between {@code equals()} and {@code hashCode()}.
 * </p>
 *
 * <p>
 * To add items to the container, use the methods {@link #addBean(Object)},
 * {@link #addBeanAfter(Object, Object)} and {@link #addBeanAt(int, Object)}.
 * Also {@link #addItem(Object)}, {@link #addItemAfter(Object, Object)} and
 * {@link #addItemAt(int, Object)} can be used as synonyms for them.
 * </p>
 *
 * <p>
 * It is not possible to add additional properties to the container.
 * </p>
 *
 * @param <BEANTYPE>
 *            The type of the Bean
 *
 * @since 5.4
 * @deprecated As of 8.0, replaced by {@link ListDataProvider}
 */
ListedItemsFirstComparator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/ContainerHierarchicalWrapper.java)/**
     * A comparator that sorts the listed items before other items. Otherwise,
     * the order is undefined.
     */
PiggybackListener (/compatibility-server/src/main/java/com/vaadin/v7/data/util/ContainerHierarchicalWrapper.java)/**
     * This listener 'piggybacks' on the real listener in order to update the
     * wrapper when needed. It proxies equals() and hashCode() to the real
     * listener so that the correct listener gets removed.
     *
     */
ContainerHierarchicalWrapper (/compatibility-server/src/main/java/com/vaadin/v7/data/util/ContainerHierarchicalWrapper.java)/**
 * <p>
 * A wrapper class for adding external hierarchy to containers not implementing
 * the {@link Container.Hierarchical} interface.
 * </p>
 *
 * <p>
 * If the wrapped container is changed directly (that is, not through the
 * wrapper), and does not implement Container.ItemSetChangeNotifier and/or
 * Container.PropertySetChangeNotifier the hierarchy information must be updated
 * with the {@link #updateHierarchicalWrapper()} method.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated No direct replacement - use an appropriate implementation of
 *             {@code HierarchicalDataProvider} such as {@code TreeDataProvider}
 *             or {@code AbstractBackEndHierarchicalDataProvider}.
 */
PiggybackListener (/compatibility-server/src/main/java/com/vaadin/v7/data/util/ContainerOrderedWrapper.java)/**
     * This listener 'piggybacks' on the real listener in order to update the
     * wrapper when needed. It proxies equals() and hashCode() to the real
     * listener so that the correct listener gets removed.
     *
     */
ContainerOrderedWrapper (/compatibility-server/src/main/java/com/vaadin/v7/data/util/ContainerOrderedWrapper.java)/**
 * <p>
 * A wrapper class for adding external ordering to containers not implementing
 * the {@link Container.Ordered} interface.
 * </p>
 *
 * <p>
 * If the wrapped container is changed directly (that is, not through the
 * wrapper), and does not implement Container.ItemSetChangeNotifier and/or
 * Container.PropertySetChangeNotifier the hierarchy information must be updated
 * with the {@link #updateOrderWrapper()} method.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, replaced by {@link DataProvider}
 */
AbstractStringToNumberConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/AbstractStringToNumberConverter.java)/**
 * A converter that converts from the number type T to {@link String} and back.
 * Uses the given locale and {@link NumberFormat} for formatting and parsing.
 * Automatically trims the input string, removing any leading and trailing white
 * space.
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
ConversionException (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/Converter.java)/**
     * An exception that signals that the value passed to
     * {@link Converter#convertToPresentation(Object, Class, Locale)} or
     * {@link Converter#convertToModel(Object, Class, Locale)} could not be
     * converted.
     *
     * @author Vaadin Ltd
     * @since 7.0
     */
Converter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/Converter.java)/**
 * Interface that implements conversion between a model and a presentation type.
 * <p>
 * Typically {@link #convertToPresentation(Object, Class, Locale)} and
 * {@link #convertToModel(Object, Class, Locale)} should be symmetric so that
 * chaining these together returns the original result for all input but this is
 * not a requirement.
 * </p>
 * <p>
 * Converters must not have any side effects (never update UI from inside a
 * converter).
 * </p>
 * <p>
 * All Converters must be stateless and thread safe.
 * </p>
 * <p>
 * If conversion of a value fails, a {@link ConversionException} is thrown.
 * </p>
 *
 * @param <PRESENTATION>
 *            The presentation type. Must be compatible with what
 *            {@link #getPresentationType()} returns.
 * @param <MODEL>
 *            The model type. Must be compatible with what
 *            {@link #getModelType()} returns.
 * @author Vaadin Ltd.
 * @since 7.0
 */
ConverterFactory (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/ConverterFactory.java)/**
 * Factory interface for providing Converters based on a presentation type and a
 * model type.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 *
 * @deprecated As of 8.0, no replacement available - provide explicit converters for {@link Binder}.
 */
DateToLongConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/DateToLongConverter.java)/**
 * A converter that converts from {@link Long} to {@link Date} and back.
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
DateToSqlDateConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/DateToSqlDateConverter.java)/**
 * Converter for handling conversion between {@link java.util.Date} and
 * {@link java.sql.Date}. This is used when a PopupDateField or InlineDateField
 * is connected to a java.sql.Date property, typically through a JPAContainer or
 * SQLContainer. Note that information (time information) is lost when
 * converting from {@link java.util.Date} to {@link java.sql.Date}.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
DefaultConverterFactory (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/DefaultConverterFactory.java)/**
 * Default implementation of {@link ConverterFactory}. Provides converters for
 * standard types like {@link String}, {@link Double} and {@link Date}.
 * <p>
 * Custom converters can be provided by extending this class and using
 * {@link VaadinSession#setConverterFactory(ConverterFactory)}.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0
 *
 * @deprecated As of 8.0, no replacement available.
 */
ReverseConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/ReverseConverter.java)/**
 * A converter that wraps another {@link Converter} and reverses source and
 * target types.
 *
 * @param <MODEL>
 *            The source type
 * @param <PRESENTATION>
 *            The target type
 *
 * @author Vaadin Ltd
 * @since 7.0
 *
 * @deprecated As of 8.0, no direct replacement available.
 */
StringToBigDecimalConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToBigDecimalConverter.java)/**
 * A converter that converts from {@link String} to {@link BigDecimal} and back.
 * Uses the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.2
 */
StringToBigIntegerConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToBigIntegerConverter.java)/**
 * A converter that converts from {@link String} to {@link BigInteger} and back.
 * Uses the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
StringToBooleanConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToBooleanConverter.java)/**
 * A converter that converts from {@link String} to {@link Boolean} and back.
 * The String representation is given by {@link Boolean#toString()} or provided
 * in constructor {@link #StringToBooleanConverter(String, String)}.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * For language-dependent representation, subclasses should overwrite
 * {@link #getFalseString(Locale)} and {@link #getTrueString(Locale)}
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
StringToByteConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToByteConverter.java)/**
 * A converter that converts from {@link String} to {@link Byte} and back. Uses
 * the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.4
 *
 * @deprecated As of 8.0, a lightweight lambda-based converter can be build with
 *             {@link Binder}{@code .forField(...).withConverter(...)} methods.
 */
DefaultCollectionFactory (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToCollectionConverter.java)/**
     * Default collection factory implementation.
     *
     * @author Vaadin Ltd
     */
CollectionFactory (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToCollectionConverter.java)/**
     * Collection factory. Defines a strategy to create collection by collection
     * class.
     *
     * @author Vaadin Ltd
     */
StringToCollectionConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToCollectionConverter.java)/**
 * A converter that converts from {@link String} to {@link Collection} of tokens
 * and back.
 * <p>
 * Allows to break a string into tokens using delimiter. Each token can be
 * converted to its own model using provided converter.
 * <p>
 * Default constructor uses <code>", "</code> as delimiter string and
 * {@link String} for token types. Other constructors allow to configure
 * delimiter and token types.
 *
 * @since 7.5.0
 *
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0, a lightweight lambda-based converter can be build with
 *             {@link com.vaadin.data.Binder
 *             Binder}{@code .forField(...).withConverter(...)} methods.
 */
StringToDateConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToDateConverter.java)/**
 * A converter that converts from {@link Date} to {@link String} and back. Uses
 * the given locale and {@link DateFormat} for formatting and parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
StringToDoubleConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToDoubleConverter.java)/**
 * A converter that converts from {@link String} to {@link Double} and back.
 * Uses the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
StringToEnumConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToEnumConverter.java)/**
 * A converter that converts from {@link String} to an {@link Enum} and back.
 * <p>
 * Designed to provide nice human readable strings for {@link Enum} classes
 * conforming to one of these patterns:
 * <ul>
 * <li>The constants are named SOME_UPPERCASE_WORDS and there's no toString
 * implementation.</li>
 * <li>toString() always returns the same human readable string that is not the
 * same as its name() value. Each constant in the enum type returns a distinct
 * toString() value.</li>
 * </ul>
 * Will not necessarily work correctly for other cases.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.4
 *
 * @deprecated As of 8.0, a lightweight lambda-based converter can be build with
 *             {@link Binder}{@code .forField(...).withConverter(...)} methods.
 */
StringToFloatConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToFloatConverter.java)/**
 * A converter that converts from {@link String} to {@link Float} and back. Uses
 * the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
StringToIntegerConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToIntegerConverter.java)/**
 * A converter that converts from {@link String} to {@link Integer} and back.
 * Uses the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
StringToLongConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToLongConverter.java)/**
 * A converter that converts from {@link String} to {@link Long} and back. Uses
 * the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.2
 */
StringToShortConverter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/converter/StringToShortConverter.java)/**
 * A converter that converts from {@link String} to {@link Short} and back. Uses
 * the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.4
 *
 * @deprecated As of 8.0, no direct replacement available, see
 *             {@link com.vaadin.data.converter.StringToIntegerConverter}
 */
DefaultPropertyValueComparator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/DefaultItemSorter.java)/**
     * Provides a default comparator used for comparing {@link Property} values.
     * The <code>DefaultPropertyValueComparator</code> assumes all objects it
     * compares can be cast to Comparable.
     *
     */
DefaultItemSorter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/DefaultItemSorter.java)/**
 * Provides a default implementation of an ItemSorter. The
 * <code>DefaultItemSorter</code> adheres to the
 * {@link Sortable#sort(Object[], boolean[])} rules and sorts the container
 * according to the properties given using
 * {@link #setSortProperties(Sortable, Object[], boolean[])}.
 * <p>
 * A Comparator is used for comparing the individual <code>Property</code>
 * values. The comparator can be set using the constructor. If no comparator is
 * provided a default comparator is used.
 *
 *
 * @deprecated As of 8.0, sorting is integrated into {@link DataProvider} and {@link Query#getSortOrders()}.
 * For in-memory case, you can use also {@link ListDataProvider#setSortComparator(SerializableComparator)}.
 * For back-end DataProviders, see {@link AbstractBackEndDataProvider#setSortOrders(List)}.
 */
FileItem (/compatibility-server/src/main/java/com/vaadin/v7/data/util/FilesystemContainer.java)/**
     * A Item wrapper for files in a filesystem.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
FileExtensionFilter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/FilesystemContainer.java)/**
     * Generic file extension filter for displaying only files having certain
     * extension.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
FilesystemContainer (/compatibility-server/src/main/java/com/vaadin/v7/data/util/FilesystemContainer.java)/**
 * A hierarchical container wrapper for a filesystem.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated No direct replacement - use a subclass of
 *             {@code AbstractBackEndHierarchicalDataProvider}, such as the
 *             example in Vaadin Sampler for File System Explorer.
 */
AbstractJunctionFilter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/AbstractJunctionFilter.java)/**
 * Abstract base class for filters that are composed of multiple sub-filters.
 *
 * The method {@link #appliesToProperty(Object)} is provided to help
 * implementing {@link Filter} for in-memory filters.
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
 * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
 * filters are specific to the implementation.
 */
And (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/And.java)/**
 * A compound {@link Filter} that accepts an item if all of its filters accept
 * the item.
 *
 * If no filters are given, the filter should accept all items.
 *
 * This filter also directly supports in-memory filtering when all sub-filters
 * do so.
 *
 * @see Or
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
 * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
 * filters are specific to the implementation.
 */
Between (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Between.java)/**
 * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
 * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
 * filters are specific to the implementation.
 */
Equal (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Compare.java)/**
     * A {@link Compare} filter that accepts items for which the identified
     * property value is equal to <code>value</code>.
     *
     * For in-memory filters, {@link Comparable#compareTo(Object)} or, if not
     * Comparable, {@link #equals(Object)} is used for the comparison. For other
     * containers, the comparison implementation is container dependent and may
     * use e.g. database comparison operations.
     *
     * @since 6.6
     *
     * @deprecated  As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
     * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
     * filters are specific to the implementation.
     */
Greater (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Compare.java)/**
     * A {@link Compare} filter that accepts items for which the identified
     * property value is greater than <code>value</code>.
     *
     * For in-memory filters, the values must implement {@link Comparable} and
     * {@link Comparable#compareTo(Object)} is used for the comparison. For
     * other containers, the comparison implementation is container dependent
     * and may use e.g. database comparison operations.
     *
     * @since 6.6
     *
     * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
     * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
     * filters are specific to the implementation.
     */
Less (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Compare.java)/**
     * A {@link Compare} filter that accepts items for which the identified
     * property value is less than <code>value</code>.
     *
     * For in-memory filters, the values must implement {@link Comparable} and
     * {@link Comparable#compareTo(Object)} is used for the comparison. For
     * other containers, the comparison implementation is container dependent
     * and may use e.g. database comparison operations.
     *
     * @since 6.6
     *
     * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
     * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
     * filters are specific to the implementation.
     */
GreaterOrEqual (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Compare.java)/**
     * A {@link Compare} filter that accepts items for which the identified
     * property value is greater than or equal to <code>value</code>.
     *
     * For in-memory filters, the values must implement {@link Comparable} and
     * {@link Comparable#compareTo(Object)} is used for the comparison. For
     * other containers, the comparison implementation is container dependent
     * and may use e.g. database comparison operations.
     *
     * @since 6.6
     *
     * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
     * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
     * filters are specific to the implementation.
     */
LessOrEqual (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Compare.java)/**
     * A {@link Compare} filter that accepts items for which the identified
     * property value is less than or equal to <code>value</code>.
     *
     * For in-memory filters, the values must implement {@link Comparable} and
     * {@link Comparable#compareTo(Object)} is used for the comparison. For
     * other containers, the comparison implementation is container dependent
     * and may use e.g. database comparison operations.
     *
     * @since 6.6
     *
     * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
     * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
     * filters are specific to the implementation.
     */
Compare (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Compare.java)/**
 * Simple container filter comparing an item property value against a given
 * constant value. Use the nested classes {@link Equal}, {@link Greater},
 * {@link Less}, {@link GreaterOrEqual} and {@link LessOrEqual} instead of this
 * class directly.
 *
 * This filter also directly supports in-memory filtering.
 *
 * The reference and actual values must implement {@link Comparable} and the
 * class of the actual property value must be assignable from the class of the
 * reference value.
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
 * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
 * filters are specific to the implementation.
 */
IsNull (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/IsNull.java)/**
 * Simple container filter checking whether an item property value is null.
 *
 * This filter also directly supports in-memory filtering.
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
 * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
 * filters are specific to the implementation.
 */
Like (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Like.java)/**
 * @deprecated As of 8.0, the whole filtering feature is integrated into
 *             {@link DataProvider}. For in-memory case
 *             ({@link ListDataProvider}), use predicates as filters. For
 *             back-end DataProviders, filters are specific to the
 *             implementation.
 */
Not (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Not.java)/**
 * Negating filter that accepts the items rejected by another filter.
 *
 * This filter directly supports in-memory filtering when the negated filter
 * does so.
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
 * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
 * filters are specific to the implementation.
 */
Or (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/Or.java)/**
 * A compound {@link Filter} that accepts an item if any of its filters accept
 * the item.
 *
 * If no filters are given, the filter should reject all items.
 *
 * This filter also directly supports in-memory filtering when all sub-filters
 * do so.
 *
 * @see And
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, the whole filtering feature is integrated into {@link DataProvider}.
 * For in-memory case ({@link ListDataProvider}), use predicates as filters. For back-end DataProviders,
 * filters are specific to the implementation.
 */
SimpleStringFilter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/SimpleStringFilter.java)/**
 * Simple string filter for matching items that start with or contain a
 * specified string. The matching can be case-sensitive or case-insensitive.
 *
 * This filter also directly supports in-memory filtering. When performing
 * in-memory filtering, values of other types are converted using toString(),
 * but other (lazy container) implementations do not need to perform such
 * conversions and might not support values of different types.
 *
 * Note that this filter is modeled after the pre-6.6 filtering mechanisms, and
 * might not be very efficient e.g. for database filtering.
 *
 * TODO this might still change
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, the whole filtering feature is integrated into
 *             {@link DataProvider}. For in-memory case
 *             ({@link ListDataProvider}), use predicates as filters. For
 *             back-end DataProviders, filters are specific to the
 *             implementation.
 */
UnsupportedFilterException (/compatibility-server/src/main/java/com/vaadin/v7/data/util/filter/UnsupportedFilterException.java)/**
 * Exception for cases where a container does not support a specific type of
 * filters.
 *
 * If possible, this should be thrown already when adding a filter to a
 * container. If a problem is not detected at that point, an
 * {@link UnsupportedOperationException} can be throws when attempting to
 * perform filtering.
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, no replacement available. See {@link Query#getFilter()}
 */
GeneratedProperty (/compatibility-server/src/main/java/com/vaadin/v7/data/util/GeneratedPropertyContainer.java)/**
     * Property implementation for generated properties.
     */
GeneratedPropertyItem (/compatibility-server/src/main/java/com/vaadin/v7/data/util/GeneratedPropertyContainer.java)/**
     * Item implementation for generated properties, used to wrap the Item that
     * belongs to the wrapped container. To reach that Item use
     * {@link #getWrappedItem()}
     */
GeneratedItemAddOrRemoveEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/GeneratedPropertyContainer.java)/**
     * Base implementation for item add or remove events. This is used when an
     * event is fired from wrapped container and needs to be reconstructed to
     * act like it actually came from this container.
     */
GeneratedPropertyContainer (/compatibility-server/src/main/java/com/vaadin/v7/data/util/GeneratedPropertyContainer.java)/**
 * Container wrapper that adds support for generated properties. This container
 * only supports adding new generated properties. Adding new normal properties
 * should be done for the wrapped container.
 *
 * <p>
 * Removing properties from this container does not remove anything from the
 * wrapped container but instead only hides them from the results. These
 * properties can be returned to this container by calling
 * {@link #addContainerProperty(Object, Class, Object)} with same property id
 * which was removed.
 *
 * <p>
 * If wrapped container is Filterable and/or Sortable it should only be handled
 * through this container as generated properties need to be handled in a
 * specific way when sorting/filtering.
 *
 * <p>
 * Items returned by this container do not support adding or removing
 * properties. Generated properties are always read-only. Trying to make them
 * editable throws an exception.
 *
 * @since 7.4
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0, replaced by {@link DataProvider}
 */
HierarchicalContainer (/compatibility-server/src/main/java/com/vaadin/v7/data/util/HierarchicalContainer.java)/**
 * A specialized Container whose contents can be accessed like it was a
 * tree-like structure.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated Use an appropriate implementation of
 *             {@code HierarchicalDataProvider} such as {@code TreeDataProvider}
 *             or {@code AbstractBackEndHierarchicalDataProvider}.
 */
HierarchicalContainerOrderedWrapper (/compatibility-server/src/main/java/com/vaadin/v7/data/util/HierarchicalContainerOrderedWrapper.java)/**
 * A wrapper class for adding external ordering to containers not implementing
 * the {@link com.vaadin.v7.data.Container.Ordered Container.Ordered}
 * interface while retaining {@link Hierarchical} features.
 *
 * @see ContainerOrderedWrapper
 *
 * @deprecated No direct replacement - use an appropriate implementation of
 *             {@code HierarchicalDataProvider} such as {@code TreeDataProvider}
 *             or {@code AbstractBackEndHierarchicalDataProvider}.
 */
ItemSetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/IndexedContainer.java)/**
     * An <code>event</code> object specifying the list whose Item set has
     * changed.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
PropertyValueChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/IndexedContainer.java)/**
     * An <code>event</code> object specifying the Property in a list whose
     * value has changed.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
IndexedContainerItem (/compatibility-server/src/main/java/com/vaadin/v7/data/util/IndexedContainer.java)/**
     * A class implementing the {@link Item} interface to be contained in the
     * list.
     *
     * @author Vaadin Ltd.
     *
     *
     * @since 3.0
     */
IndexedContainerProperty (/compatibility-server/src/main/java/com/vaadin/v7/data/util/IndexedContainer.java)/**
     * A class implementing the {@link Property} interface to be contained in
     * the {@link IndexedContainerItem} contained in the
     * {@link IndexedContainer}.
     *
     * @author Vaadin Ltd.
     *
     * @since 3.0
     */
ItemSorter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/ItemSorter.java)/**
 * An item comparator which is compatible with the {@link Sortable} interface.
 * The <code>ItemSorter</code> interface can be used in <code>Sortable</code>
 * implementations to provide a custom sorting method.
 *
 * @deprecated As of 8.0, sorting is integrated into {@link DataProvider} and {@link Query#getSortOrders()}.
 * For in-memory case, you can use also {@link ListDataProvider#setSortComparator(SerializableComparator)}.
 * For back-end DataProviders, see {@link AbstractBackEndDataProvider#setSortOrders(List)}.
 */
ListSet (/compatibility-server/src/main/java/com/vaadin/v7/data/util/ListSet.java)/**
 * ListSet is an internal Vaadin class which implements a combination of a List
 * and a Set. The main purpose of this class is to provide a list with a fast
 * {@link #contains(Object)} method. Each inserted object must by unique (as
 * specified by {@link #equals(Object)}). The {@link #set(int, Object)} method
 * allows duplicates because of the way {@link Collections#sort(java.util.List)}
 * works.
 *
 * This class is subject to change and should not be used outside Vaadin core.
 *
 * @deprecated As of 8.0, no replacement available.
 */
MethodException (/compatibility-server/src/main/java/com/vaadin/v7/data/util/MethodProperty.java)/**
     * <code>Exception</code> object that signals that there were problems
     * calling or finding the specified getter or setter methods of the
     * property.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
MethodProperty (/compatibility-server/src/main/java/com/vaadin/v7/data/util/MethodProperty.java)/**
 * <p>
 * Proxy class for creating Properties from pairs of getter and setter methods
 * of a Bean property. An instance of this class can be thought as having been
 * attached to a field of an object. Accessing the object through the Property
 * interface directly manipulates the underlying field.
 * </p>
 *
 * <p>
 * It's assumed that the return value returned by the getter method is
 * assignable to the type of the property, and the setter method parameter is
 * assignable to that value.
 * </p>
 *
 * <p>
 * A valid getter method must always be available, but instance of this class
 * can be constructed with a <code>null</code> setter method in which case the
 * resulting MethodProperty is read-only.
 * </p>
 *
 * <p>
 * MethodProperty implements Property.ValueChangeNotifier, but does not
 * automatically know whether or not the getter method will actually return a
 * new value - value change listeners are always notified when setValue is
 * called, without verifying what the getter returns.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see
 *             {@link Binder}
 */
MethodPropertyDescriptor (/compatibility-server/src/main/java/com/vaadin/v7/data/util/MethodPropertyDescriptor.java)/**
 * Property descriptor that is able to create simple {@link MethodProperty}
 * instances for a bean, using given accessors.
 *
 * @param <BT>
 *            bean type
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, no replacement available.
 */
NestedMethodProperty (/compatibility-server/src/main/java/com/vaadin/v7/data/util/NestedMethodProperty.java)/**
 * Nested accessor based property for a bean.
 *
 * The property is specified in the dotted notation, e.g. "address.street", and
 * can contain multiple levels of nesting.
 *
 * When accessing the property value, all intermediate getters must exist and
 * should return non-null values when the property value is accessed. If an
 * intermediate getter returns null, a null value will be returned.
 *
 * @see MethodProperty
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see
 *             {@link Binder}
 */
NestedPropertyDescriptor (/compatibility-server/src/main/java/com/vaadin/v7/data/util/NestedPropertyDescriptor.java)/**
 * Property descriptor that is able to create nested property instances for a
 * bean.
 *
 * The property is specified in the dotted notation, e.g. "address.street", and
 * can contain multiple levels of nesting.
 *
 * @param <BT>
 *            bean type
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, no replacement available.
 */
ObjectProperty (/compatibility-server/src/main/java/com/vaadin/v7/data/util/ObjectProperty.java)/**
 * A simple data object containing one typed value. This class is a
 * straightforward implementation of the the {@link Property} interface.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see {@link Binder}
 */
PropertyFormatter (/compatibility-server/src/main/java/com/vaadin/v7/data/util/PropertyFormatter.java)/**
 * Formatting proxy for a {@link Property}.
 *
 * <p>
 * This class can be used to implement formatting for any type of Property
 * datasources. The idea is to connect this as proxy between UI component and
 * the original datasource.
 * </p>
 *
 * <p>
 * For example <code>
 * <pre>textfield.setPropertyDataSource(new PropertyFormatter(property) {
            public String format(Object value) {
                return ((Double) value) + "000000000";
            }

            public Object parse(String formattedValue) throws Exception {
                return Double.parseDouble(formattedValue);
            }

        });</pre></code> adds formatter for Double-typed property that extends
 * standard "1.0" notation with more zeroes.
 * </p>
 *
 * @param T
 *            type of the underlying property (a PropertyFormatter is always a
 *            Property&lt;String&gt;)
 *
 * @deprecated As of 7.0, replaced by {@link Converter}
 * @author Vaadin Ltd.
 * @since 5.3.0
 */
PropertySetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/PropertysetItem.java)/**
     * An <code>event</code> object specifying an Item whose Property set has
     * changed.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
PropertysetItem (/compatibility-server/src/main/java/com/vaadin/v7/data/util/PropertysetItem.java)/**
 * Class for handling a set of identified Properties. The elements contained in
 * a <code>MapItem</code> can be referenced using locally unique identifiers.
 * The class supports listeners who are interested in changes to the Property
 * set managed by the class.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, no direct replacement available. You can use
 *             {@link Map} directly as an item for {@link Binder} or
 *             {@link DataProvider} and access item properties with lambdas like
 *             {@code binder.forField(component).bind(...)} or
 *             {@code new Grid<Map<...>>(dataProvider).addColumn(map->map.get(...))}.
 */
PropertyValueGenerator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/PropertyValueGenerator.java)/**
 * PropertyValueGenerator for GeneratedPropertyContainer.
 *
 * @param <T>
 *            Property data type
 * @since 7.4
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0, no direct replacement available. You can use any bean directly as an item for {@link Binder}
 * or {@link DataProvider} and access item properties with lambdas like {@code binder.forField(component).bind(...)} or
 * {@code new Grid<Bean>(dataProvider).addColumn(bean->bean.getSomething())}.
 */
CacheFlushNotifier (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/CacheFlushNotifier.java)/**
 * CacheFlushNotifier is a simple static notification mechanism to inform other
 * SQLContainers that the contents of their caches may have become stale.
 */
CacheMap (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/CacheMap.java)/**
 * CacheMap extends LinkedHashMap, adding the possibility to adjust maximum
 * number of items. In SQLContainer this is used for RowItem -cache. Cache size
 * will be two times the page length parameter of the container.
 */
NotNullableException (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/ColumnProperty.java)/**
     * An exception that signals that a <code>null</code> value was passed to
     * the <code>setValue</code> method, but the value of this property can not
     * be set to <code>null</code>.
     */
ColumnProperty (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/ColumnProperty.java)/**
 * ColumnProperty represents the value of one column in a RowItem. In addition
 * to the value, ColumnProperty also contains some basic column attributes such
 * as nullability status, read-only status and data type.
 *
 * Note that depending on the QueryDelegate in use this does not necessarily map
 * into an actual column in a database table.
 *
 * @deprecated As of 8.0, no replacement available.
 */
J2EEConnectionPool (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/connection/J2EEConnectionPool.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
JDBCConnectionPool (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/connection/JDBCConnectionPool.java)/**
 * Interface for implementing connection pools to be used with SQLContainer.
 * @deprecated As of 8.0, no replacement available.
 */
SimpleJDBCConnectionPool (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/connection/SimpleJDBCConnectionPool.java)/**
 * Simple implementation of the JDBCConnectionPool interface. Handles loading
 * the JDBC driver, setting up the connections and ensuring they are still
 * usable upon release.
 *
 * @deprecated As of 8.0, no replacement available.
 */
OptimisticLockException (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/OptimisticLockException.java)/**
 * An OptimisticLockException is thrown when trying to update or delete a row
 * that has been changed since last read from the database.
 *
 * OptimisticLockException is a runtime exception because optimistic locking is
 * turned off by default, and as such will never be thrown in a default
 * configuration. In order to turn on optimistic locking, you need to specify
 * the version column in your TableQuery instance.
 *
 * @see TableQuery#setVersionColumn(String)
 *
 * @author Jonatan Kronqvist / Vaadin Ltd
 * @deprecated As of 8.0, no replacement available.
 */
AbstractTransactionalQuery (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/AbstractTransactionalQuery.java)/**
 * Common base class for database query classes that handle connections and
 * transactions.
 *
 * @author Vaadin Ltd
 * @since 6.8.9
 *
 * @deprecated As of 8.0, no replacement available.
 */
FreeformQuery (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/FreeformQuery.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
FreeformQueryDelegate (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/FreeformQueryDelegate.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
FreeformStatementDelegate (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/FreeformStatementDelegate.java)/**
 * FreeformStatementDelegate is an extension to FreeformQueryDelegate that
 * provides definitions for methods that produce StatementHelper objects instead
 * of basic query strings. This allows the FreeformQuery query delegate to use
 * PreparedStatements instead of regular Statement when accessing the database.
 *
 * Due to the injection protection and other benefits of prepared statements, it
 * is advisable to implement this interface instead of the FreeformQueryDelegate
 * whenever possible.
 *
 * @deprecated As of 8.0, no replacement available.
 */
DefaultSQLGenerator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/DefaultSQLGenerator.java)/**
 * Generates generic SQL that is supported by HSQLDB, MySQL and PostgreSQL.
 *
 * @author Jonatan Kronqvist / Vaadin Ltd
 *
 * @deprecated As of 8.0, no replacement available.
 */
AndTranslator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/AndTranslator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
BetweenTranslator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/BetweenTranslator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
CompareTranslator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/CompareTranslator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
FilterTranslator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/FilterTranslator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
IsNullTranslator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/IsNullTranslator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
LikeTranslator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/LikeTranslator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
NotTranslator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/NotTranslator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
OrTranslator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/OrTranslator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
QueryBuilder (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/QueryBuilder.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
SimpleStringTranslator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/SimpleStringTranslator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
StringDecorator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/filter/StringDecorator.java)/**
 * The StringDecorator knows how to produce a quoted string using the specified
 * quote start and quote end characters. It also handles grouping of a string
 * (surrounding it in parenthesis).
 *
 * Extend this class if you need to support special characters for grouping
 * (parenthesis).
 *
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0, no replacement available.
 */
MSSQLGenerator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/MSSQLGenerator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
OracleGenerator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/OracleGenerator.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
SQLGenerator (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/SQLGenerator.java)/**
 * The SQLGenerator interface is meant to be implemented for each different SQL
 * syntax that is to be supported. By default there are implementations for
 * HSQLDB, MySQL, PostgreSQL, MSSQL and Oracle syntaxes.
 *
 * @author Jonatan Kronqvist / Vaadin Ltd
 *
 * @deprecated As of 8.0, no replacement available.
 */
StatementHelper (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/generator/StatementHelper.java)/**
 * StatementHelper is a simple helper class that assists TableQuery and the
 * query generators in filling a PreparedStatement. The actual statement is
 * generated by the query generator methods, but the resulting statement and all
 * the parameter values are stored in an instance of StatementHelper.
 *
 * This class will also fill the values with correct setters into the
 * PreparedStatement on request.
 *
 * @deprecated As of 8.0, no replacement available.
 */
OrderBy (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/OrderBy.java)/**
 * OrderBy represents a sorting rule to be applied to a query made by the
 * SQLContainer's QueryDelegate.
 *
 * The sorting rule is simple and contains only the affected column's name and
 * the direction of the sort.
 *
 * @deprecated As of 8.0, no replacement available.
 */
RowIdChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/QueryDelegate.java)/**
     * An <code>Event</code> object specifying the old and new RowId of an added
     * item after the addition has been successfully committed.
     */
RowIdChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/QueryDelegate.java)/** RowId change listener interface. */
RowIdChangeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/QueryDelegate.java)/**
     * The interface for adding and removing <code>RowIdChangeEvent</code>
     * listeners. By implementing this interface a class explicitly announces
     * that it will generate a <code>RowIdChangeEvent</code> when it performs a
     * database commit that may change the RowId.
     */
QueryDelegate (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/QueryDelegate.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
RowIdChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/TableQuery.java)/**
     * Simple RowIdChangeEvent implementation.
     */
TableQuery (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/query/TableQuery.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
ReadOnlyRowId (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/ReadOnlyRowId.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
Reference (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/Reference.java)/**
 * The reference class represents a simple [usually foreign key] reference to
 * another SQLContainer. Actual foreign key reference in the database is not
 * required, but it is recommended to make sure that certain constraints are
 * followed.
 */
RowId (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/RowId.java)/**
 * RowId represents identifiers of a single database result set row.
 *
 * The data structure of a RowId is an Object array which contains the values of
 * the primary key columns of the identified row. This allows easy equals()
 * -comparison of RowItems.
 *
 *  @deprecated As of 8.0, no replacement available.
 */
RowItem (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/RowItem.java)/**
 * RowItem represents one row of a result set obtained from a QueryDelegate.
 *
 * Note that depending on the QueryDelegate in use this does not necessarily map
 * into an actual row in a database table.
 *
 * @deprecated As of 8.0, no replacement available.
 */
ItemSetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/SQLContainer.java)/**
     * Simple ItemSetChangeEvent implementation.
     */
SQLContainer (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/SQLContainer.java)/**
 * @deprecated As of 8.0, no replacement available, see {@link DataProvider}.
 */
SQLUtil (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/SQLUtil.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
TemporaryRowId (/compatibility-server/src/main/java/com/vaadin/v7/data/util/sqlcontainer/TemporaryRowId.java)/**
 * @deprecated As of 8.0, no replacement available.
 */
TextFileProperty (/compatibility-server/src/main/java/com/vaadin/v7/data/util/TextFileProperty.java)/**
 * Property implementation for wrapping a text file.
 *
 * Supports reading and writing of a File from/to String.
 *
 * {@link ValueChangeListener}s are supported, but only fire when
 * setValue(Object) is explicitly called. {@link ReadOnlyStatusChangeListener}s
 * are supported but only fire when setReadOnly(boolean) is explicitly called.
 *
 * @deprecated As of 8.0, no replacement available.
 */
VaadinPropertyDescriptor (/compatibility-server/src/main/java/com/vaadin/v7/data/util/VaadinPropertyDescriptor.java)/**
 * Property descriptor that can create a property instance for a bean.
 *
 * Used by {@link BeanItem} and {@link AbstractBeanContainer} to keep track of
 * the set of properties of items.
 *
 * @param <BT>
 *            bean type
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, no replacement available.
 */
Validatable (/compatibility-server/src/main/java/com/vaadin/v7/data/Validatable.java)/**
 * <p>
 * Interface for validatable objects. Defines methods to verify if the object's
 * value is valid or not, and to add, remove and list registered validators of
 * the object.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 * @see Validator
 * @deprecated As of 8.0, no direct replacement available. See {@link Binder}, {@link com.vaadin.data.Validator}.
 */
AbstractStringValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/AbstractStringValidator.java)/**
 * Validator base class for validating strings.
 * <p>
 * To include the value that failed validation in the exception message you can
 * use "{0}" in the error message. This will be replaced with the failed value
 * (converted to string using {@link #toString()}) or "null" if the value is
 * null.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 5.4
 *
 *
 * @deprecated As of 8.0, replaced by {@link com.vaadin.data.validator.AbstractValidator}
 */
AbstractValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/AbstractValidator.java)/**
 * Abstract {@link Validator} implementation that provides a basic Validator
 * implementation except the {@link #isValidValue(Object)} method.
 * <p>
 * To include the value that failed validation in the exception message you can
 * use "{0}" in the error message. This will be replaced with the failed value
 * (converted to string using {@link #toString()}) or "null" if the value is
 * null.
 * </p>
 * <p>
 * The default implementation of AbstractValidator does not support HTML in
 * error messages. To enable HTML support, override
 * {@link InvalidValueException#getHtmlMessage()} and throw such exceptions from
 * {@link #validate(Object)}.
 * </p>
 * <p>
 * Since Vaadin 7, subclasses can either implement {@link #validate(Object)}
 * directly or implement {@link #isValidValue(Object)} when migrating legacy
 * applications. To check validity, {@link #validate(Object)} should be used.
 * </p>
 *
 * @param <T>
 *            The type
 * @author Vaadin Ltd.
 * @since 5.4
 *
 * @deprecated As of 8.0, replaced by {@link com.vaadin.data.validator.AbstractValidator}
 */
SimpleContext (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/BeanValidator.java)/**
     * Simple implementation of a message interpolator context that returns
     * fixed values.
     */
BeanValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/BeanValidator.java)/**
 * Vaadin {@link Validator} using the JSR-303 (javax.validation)
 * annotation-based bean validation.
 *
 * The annotations of the fields of the beans are used to determine the
 * validation to perform.
 *
 * Note that a JSR-303 implementation (e.g. Hibernate Validator or Apache Bean
 * Validation - formerly agimatec validation) must be present on the project
 * classpath when using bean validation.
 *
 * @since 7.0
 *
 * @author Petri Hakala
 * @author Henri Sara
 *
 * @deprecated See {@link BeanValidationBinder} and
 *             {@link com.vaadin.data.validator.BeanValidator}
 */
BigDecimalRangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/BigDecimalRangeValidator.java)/**
 * Validator for validating that an {@link BigDecimal} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 7.4
 */
BigIntegerRangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/BigIntegerRangeValidator.java)/**
 * Validator for validating that an {@link BigInteger} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 7.4
 */
ByteRangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/ByteRangeValidator.java)/**
 * Validator for validating that an {@link Byte} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 7.4
 */
CompositeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/CompositeValidator.java)/**
 * The <code>CompositeValidator</code> allows you to chain (compose) many
 * validators to validate one field. The contained validators may be required to
 * all validate the value to validate or it may be enough that one contained
 * validator validates the value. This behavior is controlled by the modes
 * <code>AND</code> and <code>OR</code>.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, no direct replacement available. See
 *             {@link Binder#forField(HasValue)} and various methods for
 *             validation and conversion chaining: {@code withValidator(...)},
 *             {@code withConverter(...)}, {@code withNullRepresentation(...)}
 */
DateRangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/DateRangeValidator.java)/**
 * Validator for validating that a Date is inside a given range.
 *
 * <p>
 * Note that the comparison is done directly on the Date object so take care
 * that the hours/minutes/seconds/milliseconds of the min/max values are
 * properly set.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 7.0
 */
DoubleRangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/DoubleRangeValidator.java)/**
 * Validator for validating that a {@link Double} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 */
DoubleValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/DoubleValidator.java)/**
 * String validator for a double precision floating point number. See
 * {@link AbstractStringValidator} for more information.
 *
 * @author Vaadin Ltd.
 * @since 5.4
 * @deprecated As of 7.0. Use a {@link StringToDoubleConverter} converter on the
 *             field instead or bind the field to a {@link Property} of type
 *             {@link Double}.
 */
EmailValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/EmailValidator.java)/**
 * String validator for e-mail addresses. The e-mail address syntax is not
 * complete according to RFC 822 but handles the vast majority of valid e-mail
 * addresses correctly.
 *
 * See {@link AbstractStringValidator} for more information.
 *
 * <p>
 * An empty string or a null is always accepted - use the required flag on
 * fields or a separate validator (or override {@link #isValidValue(String)}) to
 * fail on empty values.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 5.4
 */
FloatRangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/FloatRangeValidator.java)/**
 * Validator for validating that a {@link Float} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 7.4
 */
IntegerRangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/IntegerRangeValidator.java)/**
 * Validator for validating that an {@link Integer} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 5.4
 */
IntegerValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/IntegerValidator.java)/**
 * String validator for integers. See {@link AbstractStringValidator} for more
 * information.
 *
 * @author Vaadin Ltd.
 * @since 5.4
 * @deprecated As of 7.0. Use a {@link StringToIntegerConverter} converter on
 *             the field instead or bind the field to a {@link Property} of type
 *             {@link Integer}.
 */
LongRangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/LongRangeValidator.java)/**
 * Validator for validating that an {@link Long} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 7.4
 */
NullValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/NullValidator.java)/**
 * This validator is used for validating properties that do or do not allow null
 * values. By default, nulls are not allowed.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, no direct replacement available. See {@link Binder#forField(HasValue)} and various methods for
 * validation and conversion chaining: {@code withValidator(...)}, {@code withConverter(...)},
 * {@code withNullRepresentation(...)}
 */
RangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/RangeValidator.java)/**
 * An base implementation for validating any objects that implement
 * {@link Comparable}.
 *
 * Verifies that the value is of the given type and within the (optionally)
 * given limits. Typically you want to use a sub class of this like
 * {@link IntegerRangeValidator}, {@link DoubleRangeValidator} or
 * {@link DateRangeValidator} in applications.
 * <p>
 * Note that {@link RangeValidator} always accept null values. Make a field
 * required to ensure that no empty values are accepted or override
 * {@link #isValidValue(Comparable)}.
 * </p>
 *
 * @param <T>
 *            The type of Number to validate. Must implement Comparable so that
 *            minimum and maximum checks work.
 * @author Vaadin Ltd.
 * @since 7.0
 */
RegexpValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/RegexpValidator.java)/**
 * String validator comparing the string against a Java regular expression. Both
 * complete matches and substring matches are supported.
 *
 * <p>
 * For the Java regular expression syntax, see
 * {@link java.util.regex.Pattern#sum}
 * </p>
 * <p>
 * See {@link AbstractStringValidator} for more information.
 * </p>
 * <p>
 * An empty string or a null is always accepted - use the required flag on
 * fields or a separate validator (or override {@link #isValidValue(String)}) to
 * fail on empty values.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 5.4
 */
ShortRangeValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/ShortRangeValidator.java)/**
 * Validator for validating that an {@link Short} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 7.4
 */
StringLengthValidator (/compatibility-server/src/main/java/com/vaadin/v7/data/validator/StringLengthValidator.java)/**
 * This <code>StringLengthValidator</code> is used to validate the length of
 * strings.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
InvalidValueException (/compatibility-server/src/main/java/com/vaadin/v7/data/Validator.java)/**
     * Exception that is thrown by a {@link Validator} when a value is invalid.
     *
     * <p>
     * The default implementation of InvalidValueException does not support HTML
     * in error messages. To enable HTML support, override
     * {@link #getHtmlMessage()} and use the subclass in validators.
     * </p>
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
EmptyValueException (/compatibility-server/src/main/java/com/vaadin/v7/data/Validator.java)/**
     * A specific type of {@link InvalidValueException} that indicates that
     * validation failed because the value was empty. What empty means is up to
     * the thrower.
     *
     * @author Vaadin Ltd.
     * @since 5.3.0
     */
Validator (/compatibility-server/src/main/java/com/vaadin/v7/data/Validator.java)/**
 * Interface that implements a method for validating if an {@link Object} is
 * valid or not.
 * <p>
 * Implementors of this class can be added to any {@link Validatable}
 * implementor to verify its value.
 * </p>
 * <p>
 * {@link #validate(Object)} can be used to check if a value is valid. An
 * {@link InvalidValueException} with an appropriate validation error message is
 * thrown if the value is not valid.
 * </p>
 * <p>
 * Validators must not have any side effects.
 * </p>
 * <p>
 * Since Vaadin 7, the method isValid(Object) does not exist in the interface -
 * {@link #validate(Object)} should be used instead, and the exception caught
 * where applicable. Concrete classes implementing {@link Validator} can still
 * internally implement and use isValid(Object) for convenience or to ease
 * migration from earlier Vaadin versions.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 * @deprecated As of 8.0, replaced by {@link com.vaadin.data.Validator}. The
 *             validation is performed outside components, see
 *             {@link Binder}.{@code withValidator(...)}
 */
DataBoundTransferable (/compatibility-server/src/main/java/com/vaadin/v7/event/DataBoundTransferable.java)/**
 * Parent class for {@link Transferable} implementations that have a Vaadin
 * container as a data source. The transfer is associated with an item
 * (identified by its Id) and optionally also a property identifier (e.g. a
 * table column identifier when transferring a single table cell).
 *
 * The component must implement the interface {@link Container.Viewer}.
 *
 * In most cases, receivers of data transfers should depend on this class
 * instead of its concrete subclasses.
 *
 * @since 6.3
 *
 * @deprecated As of 8.0, no replacement available.
 */
FocusNotifier (/compatibility-server/src/main/java/com/vaadin/v7/event/FieldEvents.java)/**
     * The interface for adding and removing <code>FocusEvent</code> listeners.
     * By implementing this interface a class explicitly announces that it will
     * generate a <code>FocusEvent</code> when it receives keyboard focus.
     *
     * @since 6.2
     * @see FocusListener
     * @see FocusEvent
     */
BlurNotifier (/compatibility-server/src/main/java/com/vaadin/v7/event/FieldEvents.java)/**
     * The interface for adding and removing <code>BlurEvent</code> listeners.
     * By implementing this interface a class explicitly announces that it will
     * generate a <code>BlurEvent</code> when it loses keyboard focus.
     *
     * @since 6.2
     * @see BlurListener
     * @see BlurEvent
     */
TextChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/event/FieldEvents.java)/**
     * TextChangeEvents are fired when the user is editing the text content of a
     * field. Most commonly text change events are triggered by typing text with
     * keyboard, but e.g. pasting content from clip board to a text field also
     * triggers an event.
     * <p>
     * TextChangeEvents differ from {@link ValueChangeEvent}s so that they are
     * triggered repeatedly while the end user is filling the field.
     * ValueChangeEvents are not fired until the user for example hits enter or
     * focuses another field. Also note the difference that TextChangeEvents are
     * only fired if the change is triggered from the user, while
     * ValueChangeEvents are also fired if the field value is set by the
     * application code.
     * <p>
     * The {@link TextChangeNotifier}s implementation may decide when exactly
     * TextChangeEvents are fired. TextChangeEvents are not necessary fire for
     * example on each key press, but buffered with a small delay. The
     * {@code TextField} component supports different modes for triggering
     * TextChangeEvents.
     *
     * @see TextChangeListener
     * @see TextChangeNotifier
     * @see TextField#setTextChangeEventMode(com.vaadin.ui.TextField.TextChangeEventMode)
     * @since 6.5
     */
TextChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/event/FieldEvents.java)/**
     * A listener for {@link TextChangeEvent}s.
     *
     * @since 6.5
     */
TextChangeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/event/FieldEvents.java)/**
     * An interface implemented by a {@link Field} supporting
     * {@link TextChangeEvent}s. An example a {@link TextField} supports
     * {@link TextChangeListener}s.
     */
FieldEvents (/compatibility-server/src/main/java/com/vaadin/v7/event/FieldEvents.java)/**
 * Interface that serves as a wrapper for {@link Field} related events.
 */
ItemClickNotifier (/compatibility-server/src/main/java/com/vaadin/v7/event/ItemClickEvent.java)/**
     * The interface for adding and removing <code>ItemClickEvent</code>
     * listeners. By implementing this interface a class explicitly announces
     * that it will generate an <code>ItemClickEvent</code> when one of its
     * items is clicked.
     * <p>
     * Note: The general Java convention is not to explicitly declare that a
     * class generates events, but to directly define the
     * <code>addListener</code> and <code>removeListener</code> methods. That
     * way the caller of these methods has no real way of finding out if the
     * class really will send the events, or if it just defines the methods to
     * be able to implement an interface.
     * </p>
     *
     * @since 6.5
     * @see ItemClickListener
     * @see ItemClickEvent
     */
ItemClickEvent (/compatibility-server/src/main/java/com/vaadin/v7/event/ItemClickEvent.java)/**
 *
 * Click event fired by a {@link Component} implementing {@link Container}
 * interface. ItemClickEvents happens on an {@link Item} rendered somehow on
 * terminal. Event may also contain a specific {@link Property} on which the
 * click event happened.
 *
 * @since 5.3
 *
 * @deprecated As of 8.0, see component-specific click events.
 */
SelectionListener (/compatibility-server/src/main/java/com/vaadin/v7/event/SelectionEvent.java)/**
     * The listener interface for receiving {@link SelectionEvent
     * SelectionEvents}.
     */
SelectionNotifier (/compatibility-server/src/main/java/com/vaadin/v7/event/SelectionEvent.java)/**
     * The interface for adding and removing listeners for {@link SelectionEvent
     * SelectionEvents}.
     */
SelectionEvent (/compatibility-server/src/main/java/com/vaadin/v7/event/SelectionEvent.java)/**
 * An event that specifies what in a selection has changed, and where the
 * selection took place.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
SortListener (/compatibility-server/src/main/java/com/vaadin/v7/event/SortEvent.java)/**
     * Listener for sort order change events.
     */
SortNotifier (/compatibility-server/src/main/java/com/vaadin/v7/event/SortEvent.java)/**
     * The interface for adding and removing listeners for {@link SortEvent
     * SortEvents}.
     */
SortEvent (/compatibility-server/src/main/java/com/vaadin/v7/event/SortEvent.java)/**
 * Event describing a change in sorting of a {@link com.vaadin.v7.data.Container Container}.
 * Fired by {@link SortNotifier SortNotifiers}.
 *
 * @see SortListener
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DataGenerator (/compatibility-server/src/main/java/com/vaadin/v7/server/communication/data/DataGenerator.java)/**
 * Interface for {@link AbstractGridExtension}s that allows adding data to row
 * objects being sent to client by the {@link RpcDataProviderExtension}.
 * <p>
 * This class also provides a way to remove any unneeded data once the data
 * object is no longer used on the client-side.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
ActiveItemHandler (/compatibility-server/src/main/java/com/vaadin/v7/server/communication/data/RpcDataProviderExtension.java)/**
     * Class for keeping track of current items and ValueChangeListeners.
     *
     * @since 7.6
     */
GridValueChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/server/communication/data/RpcDataProviderExtension.java)/**
     * A class to listen to changes in property values in the Container added
     * with {@link Grid#setContainerDatasource(com.vaadin.v7.data.Container.Indexed)
     * Grid#setContainerDatasource(Container.Indexed)},
     * and notifies the data source to update the client-side representation
     * of the modified item.
     * <p>
     * One instance of this class can (and should) be reused for all the
     * properties in an item, since this class will inform that the entire row
     * needs to be re-evaluated (in contrast to a property-based change
     * management)
     * <p>
     * Since there's no Container-wide possibility to listen to any kind of
     * value changes, an instance of this class needs to be attached to each and
     * every Item's Property in the container.
     *
     * @see Grid#addValueChangeListener(com.vaadin.v7.data.Container, Object, Object)
     *      Grid#addValueChangeListener(Container, Object, Object)
     * @see Grid#valueChangeListeners
     */
RpcDataProviderExtension (/compatibility-server/src/main/java/com/vaadin/v7/server/communication/data/RpcDataProviderExtension.java)/**
 * Provides Vaadin server-side container data source to a
 * {@link com.vaadin.v7.client.connectors.GridConnector GridConnector}. This is currently
 * implemented as an Extension hardcoded to support a specific connector type.
 * This will be changed once framework support for something more flexible has
 * been implemented.
 *
 * @since 7.4
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0, no replacement available.
 */
Coordinates2Color (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractColorPicker.java)/**
     * Interface for converting 2d-coordinates to a Color.
     */
AbstractColorPicker (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractColorPicker.java)/**
 * An abstract class that defines default implementation for a color picker
 * component.
 *
 * @since 7.0.0
 */
ReadOnlyStatusChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractField.java)/**
     * An <code>Event</code> object specifying the Property whose read-only
     * status has changed.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
FocusShortcut (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractField.java)/**
     * A ready-made {@link ShortcutListener} that focuses the given
     * {@link Focusable} (usually a {@link Field}) when the keyboard shortcut is
     * invoked.
     * 
     * @deprecated Replaced in 8.0 with {@link com.vaadin.event.FocusShortcut}
     */
AbstractField (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractField.java)/**
 * <p>
 * Abstract field component for implementing buffered property editors. The
 * field may hold an internal value, or it may be connected to any data source
 * that implements the {@link Property} interface. <code>AbstractField</code>
 * implements that interface itself, too, so accessing the Property value
 * represented by it is straightforward.
 * </p>
 *
 * <p>
 * AbstractField also provides the {@link Buffered} interface for buffering the
 * data source value. By default the Field is in write through-mode and
 * {@link #setWriteThrough(boolean)}should be called to enable buffering.
 * </p>
 *
 * <p>
 * The class also supports {@link Validator validators} to make sure the value
 * contained in the field is valid.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated This class is, apart from the rename, identical to the Vaadin 7
 *             {@code com.vaadin.ui.AbstractField}. It is provided for
 *             compatibility and migration purposes. As of 8.0, new field
 *             implementations should extend the new
 *             {@link com.vaadin.ui.AbstractField} instead.
 */
AbstractLegacyComponent (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractLegacyComponent.java)/**
 * An abstract base class for compatibility components.
 * <p>
 * Used since immediate and read-only properties has been removed in Vaadin 8
 * from {@link AbstractComponent}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 * @deprecated only used for Vaadin 7 compatiblity components
 */
Filtering (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * Interface for option filtering, used to filter options based on user
     * entered value. The value is matched to the item caption.
     * <code>FilteringMode.OFF</code> (0) turns the filtering off.
     * <code>FilteringMode.STARTSWITH</code> (1) matches from the start of the
     * caption. <code>FilteringMode.CONTAINS</code> (1) matches anywhere in the
     * caption.
     */
DefaultNewItemHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * TODO refine doc
     *
     * This is a default class that handles adding new items that are typed by
     * user to selects container.
     *
     * By extending this class one may implement some logic on new item addition
     * like database inserts.
     *
     */
ItemSetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * Implementation of item set change event.
     */
PropertySetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * Implementation of property set change event.
     */
CaptionChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * This is a listener helper for Item and Property changes that should cause
     * a repaint. It should be attached to all items that are displayed, and the
     * default implementation does this in paintContent(). Especially
     * "lazyloading" components should take care to add and remove listeners as
     * appropriate. Call addNotifierForItem() for each painted item (and
     * remember to clear).
     *
     * NOTE: singleton, use getCaptionChangeListener().
     *
     */
TargetItemIs (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * Criterion which accepts a drop only if the drop target is (one of) the
     * given Item identifier(s). Criterion can be used only on a drop targets
     * that extends AbstractSelect like {@link Table} and {@link Tree}. The
     * target and identifiers of valid Items are given in constructor.
     *
     * @since 6.3
     */
AbstractItemSetCriterion (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * Abstract helper class to implement item id based criterion.
     *
     * Note, inner class used not to open itemIdMapper for public access.
     *
     * @since 6.3
     *
     */
AcceptItem (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * This criterion accepts a only a {@link Transferable} that contains given
     * Item (practically its identifier) from a specific AbstractSelect.
     *
     * @since 6.3
     */
AbstractSelectTargetDetails (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * TargetDetails implementation for subclasses of {@link AbstractSelect}
     * that implement {@link DropTarget}.
     *
     * @since 6.3
     */
VerticalLocationIs (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * An accept criterion to accept drops only on a specific vertical location
     * of an item.
     * <p>
     * This accept criterion is currently usable in Tree and Table
     * implementations.
     */
ItemDescriptionGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
     * Implement this interface and pass it to Tree.setItemDescriptionGenerator
     * or Table.setItemDescriptionGenerator to generate mouse over descriptions
     * ("tooltips") for the rows and cells in Table or for the items in Tree.
     */
AbstractSelect (/compatibility-server/src/main/java/com/vaadin/v7/ui/AbstractSelect.java)/**
 * <p>
 * A class representing a selection of items the user has selected in a UI. The
 * set of choices is presented as a set of {@link Item}s in a {@link Container}.
 * </p>
 *
 * <p>
 * A <code>Select</code> component may be in single- or multiselect mode.
 * Multiselect mode means that more than one item can be selected
 * simultaneously.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 5.0
 * @deprecated As of 8.0, replaced by {@link AbstractListing}
 */
Calendar (/compatibility-server/src/main/java/com/vaadin/v7/ui/Calendar.java)/**
 * <p>
 * Vaadin Calendar is for visualizing events in a calendar. Calendar events can
 * be visualized in the variable length view depending on the start and end
 * dates.
 * </p>
 *
 * <li>You can set the viewable date range with the {@link #setStartDate(Date)}
 * and {@link #setEndDate(Date)} methods. Calendar has a default date range of
 * one week</li>
 *
 * <li>Calendar has two kind of views: monthly and weekly view</li>
 *
 * <li>If date range is seven days or shorter, the weekly view is used.</li>
 *
 * <li>Calendar queries its events by using a {@link CalendarEventProvider}. By
 * default, a {@link BasicEventProvider} is used.</li>
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 * @deprecated As of 8.0, no replacement available.
 */
CheckBox (/compatibility-server/src/main/java/com/vaadin/v7/ui/CheckBox.java)/**
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.CheckBox} based on the
 *             new data binding API
 */
ColorPicker (/compatibility-server/src/main/java/com/vaadin/v7/ui/ColorPicker.java)/**
 * A class that defines default (button-like) implementation for a color picker
 * component.
 *
 * @since 7.0.0
 * @see ColorPickerArea
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.ColorPicker} based on
 *             new data binding API
 */
ColorPickerArea (/compatibility-server/src/main/java/com/vaadin/v7/ui/ColorPickerArea.java)/**
 * A class that defines area-like implementation for a color picker component.
 *
 * @since 7.0.0
 * @see ColorPicker
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.ColorPickerArea} based
 *             on new data binding API
 */
ItemStyleGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/ComboBox.java)/**
     * ItemStyleGenerator can be used to add custom styles to combo box items
     * shown in the popup. The CSS class name that will be added to the item
     * style names is <tt>v-filterselect-item-[style name]</tt>.
     *
     * @since 7.5.6
     * @see ComboBox#setItemStyleGenerator(ItemStyleGenerator)
     */
ComboBox (/compatibility-server/src/main/java/com/vaadin/v7/ui/ComboBox.java)/**
 * A filtering dropdown single-select. Suitable for newItemsAllowed, but it's
 * turned of by default to avoid mistakes. Items are filtered based on user
 * input, and loaded dynamically ("lazy-loading") from the server. You can turn
 * on newItemsAllowed and change filtering mode (and also turn it off), but you
 * can not turn on multi-select mode.
 *
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.ComboBox} based on the
 *             new data binding API
 */
CalendarComponentEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvent.java)/**
 * All Calendar events extends this class.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 * @deprecated As of 8.0, no replacement available.
 */
CalendarEventNotifier (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * Notifier interface for notifying listener of calendar events.
     */
EventMoveNotifier (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * Notifier interface for event drag & drops.
     */
MoveEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * MoveEvent is sent when existing event is dragged to a new position.
     */
EventMoveHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * Handler interface for when events are being dragged on the calendar.
     *
     */
RangeSelectNotifier (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * Handler interface for day or time cell drag-marking with mouse.
     */
RangeSelectEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * RangeSelectEvent is sent when day or time cells are drag-marked with
     * mouse.
     */
RangeSelectHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/** RangeSelectHandler handles RangeSelectEvent. */
NavigationNotifier (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/** Notifier interface for navigation listening. */
ForwardEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * ForwardEvent is sent when forward navigation button is clicked.
     */
ForwardHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/** ForwardHandler handles ForwardEvent. */
BackwardEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * BackwardEvent is sent when backward navigation button is clicked.
     */
BackwardHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/** BackwardHandler handles BackwardEvent. */
DateClickEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * DateClickEvent is sent when a date is clicked.
     */
DateClickHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/** DateClickHandler handles DateClickEvent. */
EventClick (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * EventClick is sent when an event is clicked.
     */
EventClickHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/** EventClickHandler handles EventClick. */
WeekClick (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * WeekClick is sent when week is clicked.
     */
WeekClickHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/** WeekClickHandler handles WeekClicks. */
EventResize (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * EventResize is sent when an event is resized.
     */
EventResizeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * Notifier interface for event resizing.
     */
EventResizeHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
     * Handler for EventResize event.
     */
CalendarComponentEvents (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarComponentEvents.java)/**
 * Interface for all Vaadin Calendar events.
 *
 * @since 7.1.0
 * @author Vaadin Ltd.
 *
 * @deprecated As of 8.0, no replacement available.
 */
CalendarDateRange (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarDateRange.java)/**
 * Class for representing a date range.
 *
 * @since 7.1.0
 * @author Vaadin Ltd.
 *
 *
 * @deprecated As of 8.0, no replacement available.
 */
CalendarTargetDetails (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/CalendarTargetDetails.java)/**
 * Drop details for {@link Calendar}. When something is dropped on the Calendar,
 * this class contains the specific details of the drop point. Specifically,
 * this class gives access to the date where the drop happened. If the Calendar
 * was in weekly mode, the date also includes the start time of the slot.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 * @deprecated As of 8.0, no replacement available.
 */
ContainerCalendarEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/ContainerEventProvider.java)/**
     * Internal class to keep the container index which item this event
     * represents
     *
     */
ContainerEventProvider (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/ContainerEventProvider.java)/**
 * A event provider which uses a {@link Container} as a datasource. Container
 * used as data source.
 *
 * NOTE: The data source must be sorted by date!
 *
 * @since 7.1.0
 * @author Vaadin Ltd.
 *
 * @deprecated As of 8.0, no replacement available.
 */
BasicEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/BasicEvent.java)/**
 * Simple implementation of {@link com.vaadin.addon.calendar.event.CalendarEvent
 * CalendarEvent}. Has setters for all required fields and fires events when
 * this event is changed.
 *
 * @since 7.1.0
 * @author Vaadin Ltd.
 */
BasicEventProvider (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/BasicEventProvider.java)/**
 * <p>
 * Simple implementation of
 * {@link com.vaadin.addon.calendar.event.CalendarEventProvider
 * CalendarEventProvider}. Use {@link #addEvent(CalendarEvent)} and
 * {@link #removeEvent(CalendarEvent)} to add / remove events.
 * </p>
 *
 * <p>
 * {@link com.vaadin.addon.calendar.event.CalendarEventProvider.EventSetChangeNotifier
 * EventSetChangeNotifier} and
 * {@link com.vaadin.addon.calendar.event.CalendarEvent.EventChangeListener
 * EventChangeListener} are also implemented, so the Calendar is notified when
 * an event is added, changed or removed.
 * </p>
 *
 * @since 7.1.0
 * @author Vaadin Ltd.
 */
CalendarEditableEventProvider (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/CalendarEditableEventProvider.java)/**
 * An event provider which allows adding and removing events.
 *
 * @since 7.1.0
 * @author Vaadin Ltd.
 */
EventChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/CalendarEvent.java)/**
     * Event to signal that an event has changed.
     */
EventChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/CalendarEvent.java)/**
     * Listener for EventSetChange events.
     */
EventChangeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/CalendarEvent.java)/**
     * Notifier interface for EventChange events.
     */
CalendarEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/CalendarEvent.java)/**
 * <p>
 * Event in the calendar. Customize your own event by implementing this
 * interface.
 * </p>
 *
 * <li>Start and end fields are mandatory.</li>
 *
 * <li>In "allDay" events longer than one day, starting and ending clock times
 * are omitted in UI and only dates are shown.</li>
 *
 * @since 7.1.0
 * @author Vaadin Ltd.
 *
 */
EventSetChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/CalendarEventProvider.java)/**
     * Event to signal that the set of events has changed and the calendar
     * should refresh its view from the
     * {@link com.vaadin.addon.calendar.event.CalendarEventProvider
     * CalendarEventProvider} .
     *
     */
EventSetChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/CalendarEventProvider.java)/**
     * Listener for EventSetChange events.
     */
EventSetChangeNotifier (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/CalendarEventProvider.java)/**
     * Notifier interface for EventSetChange events.
     */
CalendarEventProvider (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/CalendarEventProvider.java)/**
 * Interface for querying events. The Vaadin Calendar always has a
 * CalendarEventProvider set.
 *
 * @since 7.1.0
 * @author Vaadin Ltd.
 */
EditableCalendarEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/event/EditableCalendarEvent.java)/**
 * <p>
 * Extension to the basic {@link com.vaadin.addon.calendar.event.CalendarEvent
 * CalendarEvent}. This interface provides setters (and thus editing
 * capabilities) for all {@link com.vaadin.addon.calendar.event.CalendarEvent
 * CalendarEvent} fields. For descriptions on the fields, refer to the extended
 * interface.
 * </p>
 *
 * <p>
 * This interface is used by some of the basic Calendar event handlers in the
 * <code>com.vaadin.addon.calendar.ui.handler</code> package to determine
 * whether an event can be edited.
 * </p>
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
BasicBackwardHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/handler/BasicBackwardHandler.java)/**
 * Implements basic functionality needed to enable backwards navigation.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
BasicDateClickHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/handler/BasicDateClickHandler.java)/**
 * Implements basic functionality needed to switch to day view when a single day
 * is clicked.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
BasicEventMoveHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/handler/BasicEventMoveHandler.java)/**
 * Implements basic functionality needed to enable moving events.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
BasicEventResizeHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/handler/BasicEventResizeHandler.java)/**
 * Implements basic functionality needed to enable event resizing.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
BasicForwardHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/handler/BasicForwardHandler.java)/**
 * Implements basic functionality needed to enable forward navigation.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
BasicWeekClickHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/calendar/handler/BasicWeekClickHandler.java)/**
 * Implements basic functionality needed to change to week view when a week
 * number is clicked.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
ColorChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/colorpicker/ColorChangeEvent.java)/**
 * The color changed event which is passed to the listeners when a color change
 * occurs.
 *
 * @since 7.0.0
 */
ColorChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/colorpicker/ColorChangeListener.java)/**
 * The listener interface for receiving colorChange events. The class that is
 * interested in processing a {@link ColorChangeEvent} implements this
 * interface, and the object created with that class is registered with a
 * component using the component's <code>addColorChangeListener</code> method.
 * When the colorChange event occurs, that object's appropriate method is
 * invoked.
 *
 * @since 7.0.0
 *
 * @see ColorChangeEvent
 */
ColorPickerGradient (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/colorpicker/ColorPickerGradient.java)/**
 * A component that represents a color gradient within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerGrid (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/colorpicker/ColorPickerGrid.java)/**
 * A component that represents a color selection grid within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerHistory (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/colorpicker/ColorPickerHistory.java)/**
 * A component that represents color selection history within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerPopup (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/colorpicker/ColorPickerPopup.java)/**
 * A component that represents color selection popup within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerPreview (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/colorpicker/ColorPickerPreview.java)/**
 * A component that represents color selection preview within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerSelect (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/colorpicker/ColorPickerSelect.java)/**
 * A component that represents color selection swatches within a color picker.
 *
 * @since 7.0.0
 */
ColorSelector (/compatibility-server/src/main/java/com/vaadin/v7/ui/components/colorpicker/ColorSelector.java)/**
 * An interface for a color selector.
 *
 * @since 7.0.0
 */
CustomField (/compatibility-server/src/main/java/com/vaadin/v7/ui/CustomField.java)/**
 * A {@link Field} whose UI content can be constructed by the user, enabling the
 * creation of e.g. form fields by composing Vaadin components. Customization of
 * both the visual presentation and the logic of the field is possible.
 *
 * Subclasses must implement {@link #getType()} and {@link #initContent()}.
 *
 * Most custom fields can simply compose a user interface that calls the methods
 * {@link #setInternalValue(Object)} and {@link #getInternalValue()} when
 * necessary.
 *
 * It is also possible to override {@link #validate()},
 * {@link #setInternalValue(Object)}, {@link #commit()},
 * {@link #setPropertyDataSource(Property)}, {@link #isEmpty()} and other logic
 * of the field. Methods overriding {@link #setInternalValue(Object)} should
 * also call the corresponding superclass method.
 *
 * @param <T>
 *            field value type
 *
 * @since 7.0
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0 replaced by a {@link com.vaadin.ui.CustomField} based
 *             on new data binding API
 */
DateField (/compatibility-server/src/main/java/com/vaadin/v7/ui/DateField.java)/**
 * <p>
 * A date editor component that can be bound to any {@link Property} that is
 * compatible with <code>java.util.Date</code>.
 * </p>
 * <p>
 * Since <code>DateField</code> extends <code>AbstractField</code> it implements
 * the {@link Buffered}interface.
 * </p>
 * <p>
 * A <code>DateField</code> is in write-through mode by default, so
 * {@link AbstractField#setWriteThrough(boolean)}must be called to enable
 * buffering.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, use {@link com.vaadin.ui.DateField} or
 *             {@link DateTimeField} instead.
 */
DefaultFieldFactory (/compatibility-server/src/main/java/com/vaadin/v7/ui/DefaultFieldFactory.java)/**
 * This class contains a basic implementation for both {@link FormFieldFactory}
 * and {@link TableFieldFactory}. The class is singleton, use {@link #get()}
 * method to get reference to the instance.
 *
 * <p>
 * There are also some static helper methods available for custom built field
 * factories.
 *
 * @deprecated Removed feature in 8.0
 */
ValueChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Field.java)/**
     * An <code>Event</code> object specifying the Field whose value has been
     * changed.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     *
     * @deprecated As of 8.0, replaced by {@link ValueChangeEvent}.
     */
Field (/compatibility-server/src/main/java/com/vaadin/v7/ui/Field.java)/**
 * Field interface is implemented by all classes (field components) that have a
 * value that the user can change through the user interface.
 *
 * Field components are built upon the framework defined in the Field interface
 * and the {@link AbstractField} base class.
 *
 * The Field interface inherits the {@link Component} superinterface and also
 * the {@link Property} interface to have a value for the field.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the type of values in the field, which might not be the same type
 *            as that of the data source if converters are used
 *
 * @deprecated This interface is, apart from the rename, identical to the Vaadin
 *             7 {@code com.vaadin.ui.Field}. It is provided for compatibility
 *             and migration purposes. As of 8.0, new field components should
 *             extend {@link AbstractField} instead.
 */
ComponentIterator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Form.java)/**
     * Modifiable and Serializable Iterator for the components, used by
     * {@link Form#getComponentIterator()}.
     */
Form (/compatibility-server/src/main/java/com/vaadin/v7/ui/Form.java)/**
 * Form component provides easy way of creating and managing sets fields.
 *
 * <p>
 * <code>Form</code> is a container for fields implementing {@link Field}
 * interface. It provides support for any layouts and provides buffering
 * interface for easy connection of commit and discard buttons. All the form
 * fields can be customized by adding validators, setting captions and icons,
 * setting immediateness, etc. Also direct mechanism for replacing existing
 * fields with selections is given.
 * </p>
 *
 * <p>
 * <code>Form</code> provides customizable editor for classes implementing
 * {@link Item} interface. Also the form itself implements this interface for
 * easier connectivity to other items. To use the form as editor for an item,
 * just connect the item to form with {@link Form#setItemDataSource(Item)}. If
 * only a part of the item needs to be edited,
 * {@link Form#setItemDataSource(Item,Collection)} can be used instead. After
 * the item has been connected to the form, the automatically created fields can
 * be customized and new fields can be added. If you need to connect a class
 * that does not implement {@link Item} interface, most properties of any class
 * following bean pattern, can be accessed trough {@link BeanItem}.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 * @deprecated As of 7.0, use {@link FieldGroup} instead of {@link Form} for
 *             more flexibility.
 */
FormFieldFactory (/compatibility-server/src/main/java/com/vaadin/v7/ui/FormFieldFactory.java)/**
 * Factory interface for creating new Field-instances based on {@link Item},
 * property id and uiContext (the component responsible for displaying fields).
 * Currently this interface is used by {@link Form}, but might later be used by
 * some other components for {@link Field} generation.
 *
 * <p>
 *
 * @author Vaadin Ltd.
 * @since 6.0
 * @see TableFieldFactory
 * @deprecated As of 7.0, use {@link FieldGroup} instead of {@link Form} for
 *             more flexibility.
 */
ColumnVisibilityChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * An event listener for column visibility change events in the Grid.
     *
     * @since 7.5.0
     */
ColumnVisibilityChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * An event that is fired when a column's visibility changes.
     *
     * @since 7.5.0
     */
DetailsGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A callback interface for generating details for a particular row in Grid.
     *
     * @since 7.5.0
     * @author Vaadin Ltd
     * @see DetailsGenerator#NULL
     */
DetailComponentManager (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A class that manages details components by calling
     * {@link DetailsGenerator} as needed. Details components are attached by
     * this class when the {@link RpcDataProviderExtension} is sending data to
     * the client. Details components are detached and forgotten when client
     * informs that it has dropped the corresponding item.
     *
     * @since 7.6.1
     */
CustomFieldGroup (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Custom field group that allows finding property types before an item has
     * been bound.
     */
EditorFieldFactory (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Field factory used by default in the editor.
     *
     * Aims to fields of suitable type and with suitable size for use in the
     * editor row.
     */
EditorErrorHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Error handler for the editor.
     */
GridContextClickEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * ContextClickEvent for the Grid Component.
     *
     * @since 7.6
     */
CommitErrorEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * An event which is fired when saving the editor fails.
     */
ColumnReorderListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * An event listener for column reorder events in the Grid.
     *
     * @since 7.5.0
     */
ColumnReorderEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * An event that is fired when the columns are reordered.
     *
     * @since 7.5.0
     */
ColumnResizeListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * An event listener for column resize events in the Grid.
     *
     * @since 7.6
     */
ColumnResizeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * An event that is fired when a column is resized, either programmatically
     * or by the user.
     *
     * @since 7.6
     */
EditorListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Interface for an editor event listener.
     */
EditorEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Base class for editor related events.
     */
EditorOpenEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * This event gets fired when an editor is opened.
     */
EditorMoveEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * This event gets fired when an editor is opened while another row is being
     * edited (i.e. editor focus moves elsewhere)
     */
EditorCloseEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * This event gets fired when an editor is dismissed or closed by other
     * means.
     */
DefaultEditorErrorHandler (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Default error handler for the editor.
     *
     */
HasUserSelectionAllowed (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
         * Interface implemented by selection models which support disabling
         * client side selection while still allowing programmatic selection on
         * the server.
         *
         * @since 7.7.7
         */
Multi (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
         * A SelectionModel that supports multiple selections to be made.
         * <p>
         * This interface has a contract of having the same behavior, no matter
         * how the selection model is interacted with. In other words, if
         * something is forbidden to do in e.g. the user interface, it must also
         * be forbidden to do in the server-side and client-side APIs.
         */
Single (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
         * A SelectionModel that supports for only single rows to be selected at
         * a time.
         * <p>
         * This interface has a contract of having the same behavior, no matter
         * how the selection model is interacted with. In other words, if
         * something is forbidden to do in e.g. the user interface, it must also
         * be forbidden to do in the server-side and client-side APIs.
         */
None (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
         * A SelectionModel that does not allow for rows to be selected.
         * <p>
         * This interface has a contract of having the same behavior, no matter
         * how the selection model is interacted with. In other words, if the
         * developer is unable to select something programmatically, it is not
         * allowed for the end-user to select anything, either.
         */
SelectionModel (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * The server-side interface that controls Grid's selection state.
     * SelectionModel should extend {@link AbstractGridExtension}.
     */
AbstractSelectionModel (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A base class for SelectionModels that contains some of the logic that is
     * reusable.
     */
SingleSelectionModel (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A default implementation of a
     * {@link com.vaadin.v7.ui.Grid.SelectionModel.Single
     * SelectionModel.Single}.
     */
NoSelectionModel (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A default implementation for a
     * {@link com.vaadin.v7.ui.Grid.SelectionModel.None SelectionModel.None}.
     */
MultiSelectionModel (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A default implementation of a
     * {@link com.vaadin.v7.ui.Grid.SelectionModel.Multi SelectionModel.Multi}.
     */
RowReference (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A data class which contains information which identifies a row in a
     * {@link Grid}.
     * <p>
     * Since this class follows the <code>Flyweight</code>-pattern any instance
     * of this object is subject to change without the user knowing it and so
     * should not be stored anywhere outside of the method providing these
     * instances.
     */
CellReference (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A data class which contains information which identifies a cell in a
     * {@link Grid}.
     * <p>
     * Since this class follows the <code>Flyweight</code>-pattern any instance
     * of this object is subject to change without the user knowing it and so
     * should not be stored anywhere outside of the method providing these
     * instances.
     */
RowStyleGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A callback interface for generating custom style names for Grid rows.
     *
     * @see Grid#setRowStyleGenerator(RowStyleGenerator)
     */
CellStyleGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A callback interface for generating custom style names for Grid cells.
     *
     * @see Grid#setCellStyleGenerator(CellStyleGenerator)
     */
RowDescriptionGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A callback interface for generating optional descriptions (tooltips) for
     * Grid rows. If a description is generated for a row, it is used for all
     * the cells in the row for which a {@link CellDescriptionGenerator cell
     * description} is not generated.
     *
     * @see Grid#setRowDescriptionGenerator
     *
     * @since 7.6
     */
CellDescriptionGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A callback interface for generating optional descriptions (tooltips) for
     * Grid cells. If a cell has both a {@link RowDescriptionGenerator row
     * description} and a cell description, the latter has precedence.
     *
     * @see Grid#setCellDescriptionGenerator(CellDescriptionGenerator)
     *
     * @since 7.6
     */
RowDataGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Class for generating all row and cell related data for the essential
     * parts of Grid.
     */
StaticRow (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
         * Abstract base class for Grid header and footer rows.
         *
         * @param <CELLTYPE>
         *            the type of the cells in the row
         */
StaticCell (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
         * A header or footer cell. Has a simple textual caption.
         */
StaticSection (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Abstract base class for Grid header and footer sections.
     *
     * @since 7.6
     * @param <ROWTYPE>
     *            the type of the rows in the section
     */
Header (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Represents the header section of a Grid.
     */
HeaderRow (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Represents a header row in Grid.
     */
HeaderCell (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Represents a header cell in Grid. Can be a merged cell for multiple
     * columns.
     */
Footer (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Represents the footer section of a Grid. By default Footer is not
     * visible.
     */
FooterRow (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Represents a footer row in Grid.
     */
FooterCell (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * Represents a footer cell in Grid.
     */
Column (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * A column in the grid. Can be obtained by calling
     * {@link Grid#getColumn(Object propertyId)}.
     */
AbstractRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * An abstract base class for server-side {@link Renderer Grid renderers}.
     * This class currently extends the AbstractExtension superclass, but this
     * fact should be regarded as an implementation detail and subject to change
     * in a future major or minor Vaadin revision.
     *
     * @param <T>
     *            the type this renderer knows how to present
     */
AbstractGridExtension (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
     * An abstract base class for server-side Grid extensions.
     * <p>
     * Note: If the extension is an instance of {@link DataGenerator} it will
     * automatically register itself to {@link RpcDataProviderExtension} of
     * extended Grid. On remove this registration is automatically removed.
     *
     * @since 7.5
     */
Grid (/compatibility-server/src/main/java/com/vaadin/v7/ui/Grid.java)/**
 * A grid component for displaying tabular data.
 * <p>
 * Grid is always bound to a {@link Container.Indexed}, but is not a
 * {@code Container} of any kind in of itself. The contents of the given
 * Container is displayed with the help of {@link Renderer Renderers}.
 *
 * <h3 id="grid-headers-and-footers">Headers and Footers</h3>
 * <p>
 *
 *
 * <h3 id="grid-converters-and-renderers">Converters and Renderers</h3>
 * <p>
 * Each column has its own {@link Renderer} that displays data into something
 * that can be displayed in the browser. That data is first converted with a
 * {@link Converter} into something that the Renderer can process. This can also
 * be an implicit step - if a column has a simple data type, like a String, no
 * explicit assignment is needed.
 * <p>
 * Usually a renderer takes some kind of object, and converts it into a
 * HTML-formatted string.
 * <p>
 * <code><pre>
 * Grid grid = new Grid(myContainer);
 * Column column = grid.getColumn(STRING_DATE_PROPERTY);
 * column.setConverter(new StringToDateConverter());
 * column.setRenderer(new MyColorfulDateRenderer());
 * </pre></code>
 *
 * <h3 id="grid-lazyloading">Lazy Loading</h3>
 * <p>
 * The data is accessed as it is needed by Grid and not any sooner. In other
 * words, if the given Container is huge, but only the first few rows are
 * displayed to the user, only those (and a few more, for caching purposes) are
 * accessed.
 *
 * <h3 id="grid-selection-modes-and-models">Selection Modes and Models</h3>
 * <p>
 * Grid supports three selection <em>{@link SelectionMode modes}</em> (single,
 * multi, none), and comes bundled with one <em>{@link SelectionModel
 * model}</em> for each of the modes. The distinction between a selection mode
 * and selection model is as follows: a <em>mode</em> essentially says whether
 * you can have one, many or no rows selected. The model, however, has the
 * behavioral details of each. A single selection model may require that the
 * user deselects one row before selecting another one. A variant of a
 * multiselect might have a configurable maximum of rows that may be selected.
 * And so on.
 * <p>
 * <code><pre>
 * Grid grid = new Grid(myContainer);
 *
 * // uses the bundled SingleSelectionModel class
 * grid.setSelectionMode(SelectionMode.SINGLE);
 *
 * // changes the behavior to a custom selection model
 * grid.setSelectionModel(new MyTwoSelectionModel());
 * </pre></code>
 *
 * @since 7.4
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.Grid} based on the new
 *             data binding API
 */
HorizontalLayout (/compatibility-server/src/main/java/com/vaadin/v7/ui/HorizontalLayout.java)/**
 * Horizontal layout
 *
 * <code>HorizontalLayout</code> is a component container, which shows the
 * subcomponents in the order of their addition (horizontally).
 * <p>
 * This class is a compatibility version that uses the old defaults (no
 * spacing), whereas the defaults of {@link com.vaadin.ui.HorizontalLayout} have
 * changed.
 *
 * @author Vaadin Ltd.
 * @since 5.3
 *
 * @deprecated Replaced in 8.0 with {@link com.vaadin.ui.HorizontalLayout} with
 *             spacing on by default
 */
InlineDateField (/compatibility-server/src/main/java/com/vaadin/v7/ui/InlineDateField.java)/**
 * <p>
 * A date entry component, which displays the actual date selector inline.
 *
 * </p>
 *
 * @see DateField
 * @see PopupDateField
 * @author Vaadin Ltd.
 * @since 5.0
 *
 * @deprecated As of 8.0, replaced by {@link com.vaadin.ui.InlineDateField} and
 *             {@link InlineDateTimeField} based on LocalDate
 */
ValueChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Label.java)/**
     * Value change event.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
Label (/compatibility-server/src/main/java/com/vaadin/v7/ui/Label.java)/**
 * Label component for showing non-editable short texts.
 *
 * The label content can be set to the modes specified by {@link ContentMode}
 *
 * <p>
 * The contents of the label may contain simple formatting:
 * <ul>
 * <li><b>&lt;b></b> Bold
 * <li><b>&lt;i></b> Italic
 * <li><b>&lt;u></b> Underlined
 * <li><b>&lt;br/></b> Linebreak
 * <li><b>&lt;ul>&lt;li>item 1&lt;/li>&lt;li>item 2&lt;/li>&lt;/ul></b> List of
 * items
 * </ul>
 * The <b>b</b>,<b>i</b>,<b>u</b> and <b>li</b> tags can contain all the tags in
 * the list recursively.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, replaced by {@link com.vaadin.ui.Label} that removes
 *             data binding support
 */
ListSelect (/compatibility-server/src/main/java/com/vaadin/v7/ui/ListSelect.java)/**
 * This is a simple list select without, for instance, support for new items,
 * lazyloading, and other advanced features.
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.ListSelect} based on
 *             the new data binding API
 */
NativeSelect (/compatibility-server/src/main/java/com/vaadin/v7/ui/NativeSelect.java)/**
 * This is a simple drop-down select without, for instance, support for
 * multiselect, new items, lazyloading, and other advanced features. Sometimes
 * "native" select without all the bells-and-whistles of the ComboBox is a
 * better choice.
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.NativeSelect} based on
 *             the new data binding API
 */
OptionGroup (/compatibility-server/src/main/java/com/vaadin/v7/ui/OptionGroup.java)/**
 * Configures select to be used as an option group.
 *
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0, use {@link RadioButtonGroup} for single select or
 *             {@link CheckBoxGroup} for multiselect instead
 */
PasswordField (/compatibility-server/src/main/java/com/vaadin/v7/ui/PasswordField.java)/**
 * A field that is used to enter secret text information like passwords. The
 * entered text is not displayed on the screen.
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.PasswordField} based
 *             on the new data binding API
 */
PopupDateField (/compatibility-server/src/main/java/com/vaadin/v7/ui/PopupDateField.java)/**
 * <p>
 * A date entry component, which displays the actual date selector as a popup.
 *
 * </p>
 *
 * @see DateField
 * @see InlineDateField
 * @author Vaadin Ltd.
 * @since 5.0
 *
 * @deprecated As of 8.0, use {@link com.vaadin.ui.DateField} or
 *             {@link DateTimeField} instead.
 */
ProgressBar (/compatibility-server/src/main/java/com/vaadin/v7/ui/ProgressBar.java)/**
 * Shows the current progress of a long running task.
 * <p>
 * The default mode is to show the current progress internally represented by a
 * floating point value between 0 and 1 (inclusive). The progress bar can also
 * be in an indeterminate mode showing an animation indicating that the task is
 * running but without providing any information about the current progress.
 *
 * @since 7.1
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.ProgressBar} based on
 *             the new data binding API
 */
ProgressIndicator (/compatibility-server/src/main/java/com/vaadin/v7/ui/ProgressIndicator.java)/**
 * A {@link ProgressBar} which polls the server for updates.
 * <p>
 * Polling in this way is generally not recommended since there is no
 * centralized management of when messages are sent to the server. Furthermore,
 * polling might not be needed at all if {@link PushConfiguration#setPushMode(PushMode)} or
 * {@link UI#setPollInterval(int)} is used.
 *
 * @author Vaadin Ltd.
 * @since 4
 * @deprecated as of 7.1, use {@link com.vaadin.ui.ProgressBar} combined with
 *             {@link PushConfiguration#setPushMode(PushMode)} or
 *             {@link UI#setPollInterval(int)} instead.
 */
AbstractJavaScriptRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/AbstractJavaScriptRenderer.java)/**
 * Base class for Renderers with all client-side logic implemented using
 * JavaScript.
 * <p>
 * When a new JavaScript renderer is initialized in the browser, the framework
 * will look for a globally defined JavaScript function that will initialize the
 * renderer. The name of the initialization function is formed by replacing .
 * with _ in the name of the server-side class. If no such function is defined,
 * each super class is used in turn until a match is found. The framework will
 * thus first attempt with <code>com_example_MyRenderer</code> for the
 * server-side
 * <code>com.example.MyRenderer extends AbstractJavaScriptRenderer</code> class.
 * If MyRenderer instead extends <code>com.example.SuperRenderer</code> , then
 * <code>com_example_SuperRenderer</code> will also be attempted if
 * <code>com_example_MyRenderer</code> has not been defined.
 * <p>
 *
 * In addition to the general JavaScript extension functionality explained in
 * {@link AbstractJavaScriptExtension}, this class also provides some
 * functionality specific for renderers.
 * <p>
 * The initialization function will be called with <code>this</code> pointing to
 * a connector wrapper object providing integration to Vaadin. Please note that
 * in JavaScript, <code>this</code> is not necessarily defined inside callback
 * functions and it might therefore be necessary to assign the reference to a
 * separate variable, e.g. <code>var self = this;</code>. In addition to the
 * extension functions described for {@link AbstractJavaScriptExtension}, the
 * connector wrapper object also provides this function:
 * <ul>
 * <li><code>getRowKey(rowIndex)</code> - Gets a unique identifier for the row
 * at the given index. This identifier can be used on the server to retrieve the
 * corresponding ItemId using {@link #getItemId(String)}.</li>
 * </ul>
 * The connector wrapper also supports these special functions that can be
 * implemented by the connector:
 * <ul>
 * <li><code>render(cell, data)</code> - Callback for rendering the given data
 * into the given cell. The structure of cell and data are described in separate
 * sections below. The renderer is required to implement this function.
 * Corresponds to
 * {@link com.vaadin.client.renderers.Renderer#render(com.vaadin.client.widget.grid.RendererCellReference, Object)}
 * .</li>
 * <li><code>init(cell)</code> - Prepares a cell for rendering. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#init(com.vaadin.client.widget.grid.RendererCellReference)}
 * .</li>
 * <li><code>destroy(cell)</code> - Allows the renderer to release resources
 * allocate for a cell that will no longer be used. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#destroy(com.vaadin.client.widget.grid.RendererCellReference)}
 * .</li>
 * <li><code>onActivate(cell)</code> - Called when the cell is activated by the
 * user e.g. by double clicking on the cell or pressing enter with the cell
 * focused. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#onActivate(com.vaadin.client.widget.grid.CellReference)}
 * .</li>
 * <li><code>getConsumedEvents()</code> - Returns a JavaScript array of event
 * names that should cause onBrowserEvent to be invoked whenever an event is
 * fired for a cell managed by this renderer. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#getConsumedEvents()}.</li>
 * <li><code>onBrowserEvent(cell, event)</code> - Called by Grid when an event
 * of a type returned by getConsumedEvents is fired for a cell managed by this
 * renderer. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#onBrowserEvent(com.vaadin.client.widget.grid.CellReference, com.google.gwt.dom.client.NativeEvent)}
 * .</li>
 * </ul>
 *
 * <p>
 * The cell object passed to functions defined by the renderer has these
 * properties:
 * <ul>
 * <li><code>element</code> - The DOM element corresponding to this cell.
 * Readonly.</li>
 * <li><code>rowIndex</code> - The current index of the row of this cell.
 * Readonly.</li>
 * <li><code>columnIndex</code> - The current index of the column of this cell.
 * Readonly.</li>
 * <li><code>colSpan</code> - The number of columns spanned by this cell. Only
 * supported in the object passed to the <code>render</code> function - other
 * functions should not use the property. Readable and writable.
 * </ul>
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
ButtonRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/ButtonRenderer.java)/**
 * A Renderer that displays a button with a textual caption. The value of the
 * corresponding property is used as the caption. Click listeners can be added
 * to the renderer, invoked when any of the rendered buttons is clicked.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RendererClickListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/ClickableRenderer.java)/**
     * An interface for listening to {@link RendererClickEvent renderer click
     * events}.
     *
     * @see ButtonRenderer#addClickListener(RendererClickListener)
     */
RendererClickEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/ClickableRenderer.java)/**
     * An event fired when a button rendered by a ButtonRenderer is clicked.
     */
ClickableRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/ClickableRenderer.java)/**
 * An abstract superclass for Renderers that render clickable items. Click
 * listeners can be added to a renderer to be notified when any of the rendered
 * items is clicked.
 *
 * @param <T>
 *            the type presented by the renderer
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DateRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/DateRenderer.java)/**
 * A renderer for presenting date values.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HtmlRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/HtmlRenderer.java)/**
 * A renderer for presenting HTML content.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
ImageRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/ImageRenderer.java)/**
 * A renderer for presenting images.
 * <p>
 * The image for each rendered cell is read from a Resource-typed property in
 * the data source. Only {@link ExternalResource}s and {@link ThemeResource}s
 * are currently supported.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
NumberRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/NumberRenderer.java)/**
 * A renderer for presenting number values.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ProgressBarRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/ProgressBarRenderer.java)/**
 * A renderer that represents a double values as a graphical progress bar.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
Renderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/Renderer.java)/**
 * A ClientConnector for controlling client-side
 * {@link com.vaadin.client.widget.grid.Renderer Grid renderers}. Renderers
 * currently extend the Extension interface, but this fact should be regarded as
 * an implementation detail and subject to change in a future major or minor
 * Vaadin revision.
 *
 * @param <T>
 *            the type this renderer knows how to present
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TextRenderer (/compatibility-server/src/main/java/com/vaadin/v7/ui/renderers/TextRenderer.java)/**
 * A renderer for presenting simple plain-text string values.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RichTextArea (/compatibility-server/src/main/java/com/vaadin/v7/ui/RichTextArea.java)/**
 * A simple RichTextArea to edit HTML format text.
 *
 * Note, that using {@link TextField#setMaxLength(int)} method in
 * {@link RichTextArea} may produce unexpected results as formatting is counted
 * into length of field.
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.RichTextArea} based on
 *             the new data binding API
 */
Select (/compatibility-server/src/main/java/com/vaadin/v7/ui/Select.java)/**
 * <p>
 * A class representing a selection of items the user has selected in a UI. The
 * set of choices is presented as a set of {@link Item}s in a {@link Container}.
 * </p>
 *
 * <p>
 * A <code>Select</code> component may be in single- or multiselect mode.
 * Multiselect mode means that more than one item can be selected
 * simultaneously.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 * @deprecated As of 7.0. Use {@link ComboBox} instead.
 */
ValueOutOfBoundsException (/compatibility-server/src/main/java/com/vaadin/v7/ui/Slider.java)/**
     * Thrown when the value of the slider is about to be set to a value that is
     * outside the valid range of the slider.
     *
     * @author Vaadin Ltd.
     *
     */
Slider (/compatibility-server/src/main/java/com/vaadin/v7/ui/Slider.java)/**
 * A component for selecting a numerical value within a range.
 *
 * @author Vaadin Ltd.
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.Slider} based on the
 *             new data binding API
 */
CacheUpdateException (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Exception thrown when one or more exceptions occurred during updating of
     * the Table cache.
     * <p>
     * Contains all exceptions which occurred during the cache update. The first
     * occurred exception is set as the cause of this exception. All occurred
     * exceptions can be accessed using {@link #getCauses()}.
     * </p>
     *
     */
ColumnGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Used to create "generated columns"; columns that exist only in the Table,
     * not in the underlying Container. Implement this interface and pass it to
     * Table.addGeneratedColumn along with an id for the column to be generated.
     *
     */
CellStyleGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Allow to define specific style on cells (and rows) contents. Implements
     * this interface and pass it to Table.setCellStyleGenerator. Row styles are
     * generated when porpertyId is null. The CSS class name that will be added
     * to the cell content is <tt>v-table-cell-content-[style name]</tt>, and
     * the row style will be <tt>v-table-row-[style name]</tt>.
     */
TableTransferable (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Concrete implementation of {@link DataBoundTransferable} for data
     * transferred from a table.
     *
     * @see DataBoundTransferable
     *
     * @since 6.3
     */
TableDropCriterion (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Lazy loading accept criterion for Table. Accepted target rows are loaded
     * from server once per drag and drop operation. Developer must override one
     * method that decides on which rows the currently dragged data can be
     * dropped.
     *
     * <p>
     * Initially pretty much no data is sent to client. On first required
     * criterion check (per drag request) the client side data structure is
     * initialized from server and no subsequent requests requests are needed
     * during that drag and drop operation.
     */
HeaderClickEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Click event fired when clicking on the Table headers. The event includes
     * a reference the the Table the event originated from, the property id of
     * the column which header was pressed and details about the mouse event
     * itself.
     */
FooterClickEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Click event fired when clicking on the Table footers. The event includes
     * a reference the the Table the event originated from, the property id of
     * the column which header was pressed and details about the mouse event
     * itself.
     */
HeaderClickListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Interface for the listener for column header mouse click events. The
     * headerClick method is called when the user presses a header column cell.
     */
FooterClickListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Interface for the listener for column footer mouse click events. The
     * footerClick method is called when the user presses a footer column cell.
     */
ColumnResizeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * This event is fired when a column is resized. The event contains the
     * columns property id which was fired, the previous width of the column and
     * the width of the column after the resize.
     */
ColumnResizeListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Interface for listening to column resize events.
     */
ColumnReorderEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * This event is fired when a columns are reordered by the end user user.
     */
ColumnReorderListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Interface for listening to column reorder events.
     */
ColumnCollapseEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * This event is fired when the collapse state of a column changes.
     *
     * @since 7.6
     */
ColumnCollapseListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Interface for listening to column collapse events.
     *
     * @since 7.6
     */
RowGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * Row generators can be used to replace certain items in a table with a
     * generated string. The generator is called each time the table is
     * rendered, which means that new strings can be generated each time.
     *
     * Row generators can be used for e.g. summary rows or grouping of items.
     */
TableContextClickEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
     * ContextClickEvent for the Table Component.
     *
     * @since 7.6
     */
Table (/compatibility-server/src/main/java/com/vaadin/v7/ui/Table.java)/**
 * <p>
 * <code>Table</code> is used for representing data or components in a pageable
 * and selectable table.
 * </p>
 *
 * <p>
 * Scalability of the Table is largely dictated by the container. A table does
 * not have a limit for the number of items and is just as fast with hundreds of
 * thousands of items as with just a few. The current GWT implementation with
 * scrolling however limits the number of rows to around 500000, depending on
 * the browser and the pixel height of rows.
 * </p>
 *
 * <p>
 * Components in a Table will not have their caption nor icon rendered.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0, use {@link Grid} instead
 */
TableFieldFactory (/compatibility-server/src/main/java/com/vaadin/v7/ui/TableFieldFactory.java)/**
 * Factory interface for creating new Field-instances based on Container
 * (datasource), item id, property id and uiContext (the component responsible
 * for displaying fields). Currently this interface is used by {@link Table},
 * but might later be used by some other components for {@link Field}
 * generation.
 *
 * <p>
 *
 * @author Vaadin Ltd.
 * @since 6.0
 * @see FormFieldFactory
 *
 * @deprecated As of 8.0, Table is replaced by {@link com.vaadin.ui.Grid}
 */
TextArea (/compatibility-server/src/main/java/com/vaadin/v7/ui/TextArea.java)/**
 * A text field that supports multi line editing.
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.TextArea} based on the
 *             new data binding API
 */
TextField (/compatibility-server/src/main/java/com/vaadin/v7/ui/TextField.java)/**
 * <p>
 * A text editor component that can be bound to any bindable Property. The text
 * editor supports both multiline and single line modes, default is one-line
 * mode.
 * </p>
 *
 * <p>
 * Since <code>TextField</code> extends <code>AbstractField</code> it implements
 * the {@link Buffered} interface. A <code>TextField</code> is in write-through
 * mode by default, so {@link AbstractField#setWriteThrough(boolean)} must be
 * called to enable buffering.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.TextField} based on
 *             the new data binding API
 */
BaseTheme (/compatibility-server/src/main/java/com/vaadin/v7/ui/themes/BaseTheme.java)/**
 * <p>
 * The Base theme is the foundation for all Vaadin themes. Although it is not
 * necessary to use it as the starting point for all other themes, it is heavily
 * encouraged, since it abstracts and hides away many necessary style properties
 * that the Vaadin terminal expects and needs.
 * </p>
 * <p>
 * When creating your own theme, either extend this class and specify the styles
 * implemented in your theme here, or extend some other theme that has a class
 * file specified (e.g. Reindeer or Runo).
 * </p>
 * <p>
 * All theme class files should follow the convention of specifying the theme
 * name as a string constant <code>THEME_NAME</code>.
 *
 * @since 6.3.0
 * @deprecated As of 8.0, no replacement available, only {@link ValoTheme} is supported.
 */
ChameleonTheme (/compatibility-server/src/main/java/com/vaadin/v7/ui/themes/ChameleonTheme.java)/**
 * @deprecated As of 8.0, no replacement available, only {@link ValoTheme} is
 *             supported.
 */
Reindeer (/compatibility-server/src/main/java/com/vaadin/v7/ui/themes/Reindeer.java)/**
 * @deprecated As of 8.0, no replacement available, only {@link ValoTheme} is
 *             supported.
 */
Runo (/compatibility-server/src/main/java/com/vaadin/v7/ui/themes/Runo.java)/**
 * @deprecated As of 8.0, no replacement available, only {@link ValoTheme} is
 *             supported.
 */
TreeContextClickEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * ContextClickEvent for the Tree Component.
     *
     * @since 7.6
     */
ExpandEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * Event to fired when a node is expanded. ExapandEvent is fired when a node
     * is to be expanded. it can me used to dynamically fill the sub-nodes of
     * the node.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ExpandListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * Expand event listener.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
CollapseEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * Collapse event.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
CollapseListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * Collapse event listener.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ItemStyleGenerator (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * ItemStyleGenerator can be used to add custom styles to tree items. The
     * CSS class name that will be added to the item content is
     * <tt>v-tree-node-[style name]</tt>.
     */
TreeTargetDetails (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * A {@link TargetDetails} implementation with Tree specific api.
     *
     * @since 6.3
     */
TreeTransferable (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * Concrete implementation of {@link DataBoundTransferable} for data
     * transferred from a tree.
     *
     * @see DataBoundTransferable
     *
     * @since 6.3
     */
TreeDropCriterion (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * Lazy loading accept criterion for Tree. Accepted target nodes are loaded
     * from server once per drag and drop operation. Developer must override one
     * method that decides accepted tree nodes for the whole Tree.
     *
     * <p>
     * Initially pretty much no data is sent to client. On first required
     * criterion check (per drag request) the client side data structure is
     * initialized from server and no subsequent requests requests are needed
     * during that drag and drop operation.
     */
TargetItemAllowsChildren (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * A criterion that accepts {@link Transferable} only directly on a tree
     * node that can have children.
     * <p>
     * Class is singleton, use {@link TargetItemAllowsChildren#get()} to get the
     * instance.
     *
     * @see Tree#setChildrenAllowed(Object, boolean)
     *
     * @since 6.3
     */
TargetInSubtree (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
     * An accept criterion that checks the parent node (or parent hierarchy) for
     * the item identifier given in constructor. If the parent is found, content
     * is accepted. Criterion can be used to accepts drags on a specific sub
     * tree only.
     * <p>
     * The root items is also consider to be valid target.
     */
Tree (/compatibility-server/src/main/java/com/vaadin/v7/ui/Tree.java)/**
 * Tree component. A Tree can be used to select an item (or multiple items) from
 * a hierarchical set of items.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated See {@code com.vaadin.ui.Tree}.
 */
CollapsibleStrategy (/compatibility-server/src/main/java/com/vaadin/v7/ui/TreeTable.java)/**
     * This strategy is used if current container implements {@link Collapsible}
     * .
     *
     * open-collapsed logic diverted to container, otherwise use default
     * implementations.
     */
HierarchicalStrategy (/compatibility-server/src/main/java/com/vaadin/v7/ui/TreeTable.java)/**
     * Strategy for Hierarchical but not Collapsible container like
     * {@link HierarchicalContainer}.
     *
     * Store collapsed/open states internally, fool Table to use preorder when
     * accessing items from container via Ordered/Indexed methods.
     */
TreeTable (/compatibility-server/src/main/java/com/vaadin/v7/ui/TreeTable.java)/**
 * TreeTable extends the {@link Table} component so that it can also visualize a
 * hierarchy of its Items in a similar manner that {@link Tree} does. The tree
 * hierarchy is always displayed in the first actual column of the TreeTable.
 * <p>
 * The TreeTable supports the usual {@link Table} features like lazy loading, so
 * it should be no problem to display lots of items at once. Only required rows
 * and some cache rows are sent to the client.
 * <p>
 * TreeTable supports standard {@link Hierarchical} container interfaces, but
 * also a more fine tuned version - {@link Collapsible}. A container
 * implementing the {@link Collapsible} interface stores the collapsed/expanded
 * state internally and can this way scale better on the server side than with
 * standard Hierarchical implementations. Developer must however note that
 * {@link Collapsible} containers can not be shared among several users as they
 * share UI state in the container.
 *
 * @deprecated See {@code TreeGrid}.
 */
TwinColSelect (/compatibility-server/src/main/java/com/vaadin/v7/ui/TwinColSelect.java)/**
 * Multiselect component with two lists: left side for available items and right
 * side for selected items.
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.TwinColSelect} based
 *             on the new data binding API
 */
Receiver (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Interface that must be implemented by the upload receivers to provide the
     * Upload component an output stream to write the uploaded data.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
FinishedEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Upload.FinishedEvent is sent when the upload receives a file, regardless
     * of whether the reception was successful or failed. If you wish to
     * distinguish between the two cases, use either SucceededEvent or
     * FailedEvent, which are both subclasses of the FinishedEvent.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
FailedEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Upload.FailedEvent event is sent when the upload is received, but the
     * reception is interrupted for some reason.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
NoOutputStreamEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * FailedEvent that indicates that an output stream could not be obtained.
     */
NoInputStreamEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * FailedEvent that indicates that an input stream could not be obtained.
     */
SucceededEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Upload.SucceededEvent event is sent when the upload is received
     * successfully.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
StartedEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Upload.StartedEvent event is sent when the upload is started to received.
     *
     * @author Vaadin Ltd.
     * @since 5.0
     */
ChangeEvent (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Upload.ChangeEvent event is sent when the value (filename) of the upload
     * changes.
     *
     * @since 7.2
     */
StartedListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Receives the events when the upload starts.
     *
     * @author Vaadin Ltd.
     * @since 5.0
     */
FinishedListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Receives the events when the uploads are ready.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
FailedListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Receives events when the uploads are finished, but unsuccessful.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
SucceededListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Receives events when the uploads are successfully finished.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ChangeListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * Listener for {@link ChangeEvent}.
     *
     * @since 7.2
     */
ProgressListener (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
     * ProgressListener receives events to track progress of upload.
     */
Upload (/compatibility-server/src/main/java/com/vaadin/v7/ui/Upload.java)/**
 * Component for uploading files from client to server.
 *
 * <p>
 * The visible component consists of a file name input box and a browse button
 * and an upload submit button to start uploading.
 *
 * <p>
 * The Upload component needs a java.io.OutputStream to write the uploaded data.
 * You need to implement the Upload.Receiver interface and return the output
 * stream in the receiveUpload() method.
 *
 * <p>
 * You can get an event regarding starting (StartedEvent), progress
 * (ProgressEvent), and finishing (FinishedEvent) of upload by implementing
 * StartedListener, ProgressListener, and FinishedListener, respectively. The
 * FinishedListener is called for both failed and succeeded uploads. If you wish
 * to separate between these two cases, you can use SucceededListener
 * (SucceededEvenet) and FailedListener (FailedEvent).
 *
 * <p>
 * The upload component does not itself show upload progress, but you can use
 * the ProgressIndicator for providing progress feedback by implementing
 * ProgressListener and updating the indicator in updateProgress().
 *
 * <p>
 * Setting upload component immediate initiates the upload as soon as a file is
 * selected, instead of the common pattern of file selection field and upload
 * button.
 *
 * <p>
 * Note! Because of browser dependent implementations of <input type="file">
 * element, setting size for Upload component is not supported. For some
 * browsers setting size may work to some extend.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 *
 * @deprecated As of 8.0 replaced by {@link com.vaadin.ui.Upload} that is by
 *             default in immediate mode.
 */
VerticalLayout (/compatibility-server/src/main/java/com/vaadin/v7/ui/VerticalLayout.java)/**
 * Vertical layout
 *
 * <code>VerticalLayout</code> is a component container, which shows the
 * subcomponents in the order of their addition (vertically). A vertical layout
 * is by default 100% wide.
 * <p>
 * This class is a compatibility version that uses the old defaults (no spacing
 * or margins), whereas the defaults of {@link com.vaadin.ui.VerticalLayout}
 * have changed.
 *
 * @author Vaadin Ltd.
 * @since 5.3
 *
 * @deprecated Replaced in 8.0 with {@link com.vaadin.ui.VerticalLayout} with
 *             margin and spacing on by default
 */
FileTypeResolver (/compatibility-server/src/main/java/com/vaadin/v7/util/FileTypeResolver.java)/**
 * Utility class that can figure out mime-types and icons related to files.
 * <p>
 * Note : The icons are associated purely to mime-types, so a file may not have
 * a custom icon accessible with this class.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 * @deprecated Only used for compatibility-server
 */
SerializerHelper (/compatibility-server/src/main/java/com/vaadin/v7/util/SerializerHelper.java)/**
 * Helper class for performing serialization. Most of the methods are here are
 * workarounds for problems in Google App Engine. Used internally by Vaadin and
 * should not be used by application developers. Subject to change at any time.
 *
 * @since 6.0
 * @deprecated Only used for compatibility-server
 */
SliderDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/tests/server/component/slider/SliderDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link Slider}.
 *
 * @since
 * @author Vaadin Ltd
 */
ComponentDesignWriterUtility (/compatibility-server/src/test/java/com/vaadin/tests/server/ComponentDesignWriterUtility.java)/**
 * Utility class for outputting the declarative syntax of Vaadin components.
 */
DeprecatedTest (/compatibility-server/src/test/java/com/vaadin/tests/server/DeprecatedTest.java)/**
 * @author Vaadin Ltd
 *
 */
AbstractBeanContainerTestBase (/compatibility-server/src/test/java/com/vaadin/v7/data/util/AbstractBeanContainerTestBase.java)/**
 * Automated test for {@link AbstractBeanContainer}.
 *
 * Only a limited subset of the functionality is tested here, the rest in tests
 * of subclasses including {@link BeanItemContainer} and {@link BeanContainer}.
 */
AbstractEventCounter (/compatibility-server/src/test/java/com/vaadin/v7/data/util/AbstractContainerTestBase.java)/**
     * Helper class for testing e.g. listeners expecting events to be fired.
     */
ItemSetChangeCounter (/compatibility-server/src/test/java/com/vaadin/v7/data/util/AbstractContainerTestBase.java)/**
     * Test class for counting item set change events and verifying they have
     * been received.
     */
BeanItemContainerTest (/compatibility-server/src/test/java/com/vaadin/v7/data/util/BeanItemContainerTest.java)/**
 * Test basic functionality of BeanItemContainer.
 *
 * Most sorting related tests are in {@link BeanItemContainerSortTest}.
 */
BeanItemTest (/compatibility-server/src/test/java/com/vaadin/v7/data/util/BeanItemTest.java)/**
 * Test BeanItem specific features.
 *
 * Only public API is tested, not the methods with package visibility.
 *
 * See also {@link PropertySetItemTest}, which tests the base class.
 */
MethodPropertyMemoryConsumptionTest (/compatibility-server/src/test/java/com/vaadin/v7/data/util/MethodPropertyMemoryConsumptionTest.java)/**
 * Test for MethodProperty: don't allocate unnecessary Object arrays.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
MockInitialContextFactory (/compatibility-server/src/test/java/com/vaadin/v7/data/util/sqlcontainer/connection/MockInitialContextFactory.java)/**
 * Provides a JNDI initial context factory for the MockContext.
 */
StatementHelperTest (/compatibility-server/src/test/java/com/vaadin/v7/data/util/sqlcontainer/generator/StatementHelperTest.java)/**
 *
 * @author Vaadin Ltd
 */
ValidatingSimpleJDBCConnectionPool (/compatibility-server/src/test/java/com/vaadin/v7/data/util/sqlcontainer/query/ValidatingSimpleJDBCConnectionPool.java)/**
 * Connection pool for testing SQLContainer. Ensures that only reserved
 * connections are released and that all connections are released before the
 * pool is destroyed.
 *
 * @author Vaadin Ltd
 */
TransactionalPropertyWrapperTest (/compatibility-server/src/test/java/com/vaadin/v7/data/util/TransactionalPropertyWrapperTest.java)/**
 * Test verifying that TransactionalPropertyWrapper removes it's listener from
 * wrapped Property
 *
 * @since 7.1.15
 * @author Vaadin Ltd
 */
StringToCollectionConverterTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/data/converter/StringToCollectionConverterTest.java)/**
 * Tests for {@link StringToCollectionConverter}.
 *
 * @author Vaadin Ltd
 */
ParseAllSupportedComponentsTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/design/ParseAllSupportedComponentsTest.java)/**
 * Just top level test case that contains all synchronizable components
 *
 * @author Vaadin Ltd
 */
ParseLegacyPrefixTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/design/ParseLegacyPrefixTest.java)/**
 * Test reading a design with all components using the legacy prefix.
 */
WriteLegacyDesignTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/design/WriteLegacyDesignTest.java)/**
 * Parse and write a legacy design (using the "v-" prefix).
 */
AbstractFieldDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/abstractfield/AbstractFieldDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link AbstractField}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
AbstractFieldValueChangeTestBase (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/abstractfield/AbstractFieldValueChangeTestBase.java)/**
 * Base class for tests for checking that value change listeners for fields are
 * not called exactly once when they should be, and not at other times.
 *
 * Does not check all cases (e.g. properties that do not implement
 * {@link ValueChangeNotifier}).
 *
 * Subclasses should implement {@link #setValue()} and call
 * <code>super.setValue(LegacyAbstractField)</code>. Also, subclasses should
 * typically override {@link #setValue(AbstractField)} to set the field value
 * via <code>changeVariables()</code>.
 */
AbstractSelectDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/abstractselect/AbstractSelectDeclarativeTest.java)/**
 * Test cases for reading the properties of selection components.
 *
 * @author Vaadin Ltd
 */
AbstractSelectStateTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/abstractselect/AbstractSelectStateTest.java)/**
 * Tests for AbstractSelect state
 *
 */
CalendarBasicsTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/calendar/CalendarBasicsTest.java)/**
 * Basic API tests for the calendar
 */
ContainerEventProviderTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/calendar/ContainerEventProviderTest.java)/**
 *
 * @author Vaadin Ltd
 */
ComboBoxStateTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/combobox/ComboBoxStateTest.java)/**
 * Tests for ComboBox state.
 *
 */
LegacyDateFieldDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/datefield/LegacyDateFieldDeclarativeTest.java)/**
 * Tests the declarative support for implementations of {@link DateField}.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
PopupDateFieldDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/datefield/PopupDateFieldDeclarativeTest.java)/**
 * Tests the declarative support for implementations of {@link PopupDateField}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FieldGroupTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/fieldgroup/FieldGroupTest.java)/**
 *
 * Tests for {@link FieldGroup}.
 *
 * @author Vaadin Ltd
 */
FormTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/form/FormTest.java)/**
 * Test for {@link Form}.
 *
 * @author Vaadin Ltd
 */
GridDeclarativeAttributeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/grid/declarative/GridDeclarativeAttributeTest.java)/**
 * Tests declarative support for Grid properties.
 *
 * @since
 * @author Vaadin Ltd
 */
GridStateTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/grid/GridStateTest.java)/**
 * Tests for Grid State.
 *
 */
TestGrid (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/grid/TestGrid.java)/**
 * A Grid attached to a mock UI with a mock ConnectorTracker.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ListSelectStateTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/listselect/ListSelectStateTest.java)/**
 * Tests for ListSelect State.
 *
 */
NativeSelectDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/nativeselect/NativeSelectDeclarativeTest.java)/**
 * Test cases for reading the properties of selection components.
 *
 * @author Vaadin Ltd
 */
OptionGroupStateTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/optiongroup/OptionGroupStateTest.java)/**
 * Tests for OptionGroup state.
 *
 */
ProgressBarDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/progressbar/ProgressBarDeclarativeTest.java)/**
 * Test cases for reading the properties of selection components.
 *
 * @author Vaadin Ltd
 */
RichTextAreaStateTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/richtextarea/RichTextAreaStateTest.java)/**
 * Tests for RichTextArea State.
 *
 */
FooterTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/table/FooterTest.java)/**
 * Test case for testing the footer API
 *
 */
TableDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/table/TableDeclarativeTest.java)/**
 * Test declarative support for {@link Table}.
 *
 * @since
 * @author Vaadin Ltd
 */
TableSelectableTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/table/TableSelectableTest.java)/**
 * Tests for 'selectable' property of {@link Table} class.
 *
 * @author Vaadin Ltd
 */
TableStateTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/table/TableStateTest.java)/**
 * Tests for Table State.
 *
 */
TextAreaDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/textarea/TextAreaDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link TextArea}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TextFieldValueChangeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/textfield/TextFieldValueChangeTest.java)/**
 * Check that the value change listener for a text field is triggered exactly
 * once when setting the value, at the correct time.
 *
 * See <a href="http://dev.vaadin.com/ticket/4394">Ticket 4394</a>.
 */
TreeDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/tree/TreeDeclarativeTest.java)/**
 * Tests the declarative support for implementations of {@link Tree}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TreeTableDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/treetable/TreeTableDeclarativeTest.java)/**
 * Test declarative support for {@link TreeTable}.
 *
 * @since
 * @author Vaadin Ltd
 */
TreeTableTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/treetable/TreeTableTest.java)/**
 * Tests for {@link TreeTable}
 *
 * @author Vaadin Ltd
 */
TwinColSelectDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/twincolselect/TwinColSelectDeclarativeTest.java)/**
 * Test cases for reading the properties of selection components.
 *
 * @author Vaadin Ltd
 */
TwinColSelectStateTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/component/twincolselect/TwinColSelectStateTest.java)/**
 * Tests for TwinColSelectState.
 *
 */
ComboBoxValueChangeTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/components/ComboBoxValueChangeTest.java)/**
 * Check that the value change listener for a combo box is triggered exactly
 * once when setting the value, at the correct time.
 *
 * See <a href="http://dev.vaadin.com/ticket/4394">Ticket 4394</a>.
 */
ContextClickListenerTest (/compatibility-server/src/test/java/com/vaadin/v7/tests/server/ContextClickListenerTest.java)/**
 * Server-side unit tests to see that context click events are sent to listeners
 * correctly.
 *
 * If a listener is listening to a super type of an event, it should get the
 * event. i.e. Listening to ContextClickEvent, it should get the specialized
 * GridContextClickEvent as well.
 *
 * If a listener is listening to a sub-type of an event, it should not get the
 * super version. i.e. Listening to GridContextClickEvent, it should not get a
 * plain ContextClickEvent.
 */
AbstractLegacyComponentDeclarativeTest (/compatibility-server/src/test/java/com/vaadin/v7/ui/AbstractLegacyComponentDeclarativeTest.java)/**
 * Test cases for reading and writing the properties of AbstractComponent.
 *
 * @author Vaadin Ltd
 */
GAEVaadinServlet (/compatibility-server-gae/src/main/java/com/vaadin/server/GAEVaadinServlet.java)/**
 * ApplicationServlet to be used when deploying to Google App Engine, in
 * web.xml:
 *
 * <pre>
 *      &lt;servlet&gt;
 *              &lt;servlet-name&gt;HelloWorld&lt;/servlet-name&gt;
 *              &lt;servlet-class&gt;com.vaadin.server.GAEApplicationServlet&lt;/servlet-class&gt;
 *              &lt;init-param&gt;
 *                      &lt;param-name&gt;UI&lt;/param-name&gt;
 *                      &lt;param-value&gt;com.vaadin.demo.HelloWorld&lt;/param-value&gt;
 *              &lt;/init-param&gt;
 *      &lt;/servlet&gt;
 * </pre>
 *
 * Session support must be enabled in appengine-web.xml:
 *
 * <pre>
 *      &lt;sessions-enabled&gt;true&lt;/sessions-enabled&gt;
 * </pre>
 *
 * Appengine datastore cleanup can be invoked by calling one of the applications
 * with an additional path "/CLEAN". This can be set up as a cron-job in
 * cron.xml (see appengine documentation for more information):
 *
 * <pre>
 * &lt;cronentries&gt;
 *   &lt;cron&gt;
 *     &lt;url&gt;/HelloWorld/CLEAN&lt;/url&gt;
 *     &lt;description&gt;Clean up sessions&lt;/description&gt;
 *     &lt;schedule&gt;every 2 hours&lt;/schedule&gt;
 *   &lt;/cron&gt;
 * &lt;/cronentries&gt;
 * </pre>
 *
 * It is recommended (but not mandatory) to extract themes and widgetsets and
 * have App Engine server these statically. Extract VAADIN folder (and it's
 * contents) 'next to' the WEB-INF folder, and add the following to
 * appengine-web.xml:
 *
 * <pre>
 *      &lt;static-files&gt;
 *           &lt;include path=&quot;/VAADIN/**&quot; /&gt;
 *      &lt;/static-files&gt;
 * </pre>
 *
 * Additional limitations:
 * <ul>
 * <li/>Do not change application state when serving an ApplicationResource.
 * <li/>Avoid changing application state in transaction handlers, unless you're
 * confident you fully understand the synchronization issues in App Engine.
 * <li/>The application remains locked while uploading - no progressbar is
 * possible.
 * </ul>
 *
 * @deprecated No longer supported with Vaadin 8.0
 */
AbstractFieldState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/AbstractFieldState.java)/**
 * Shared state for {@link com.vaadin.ui.AbstractField}.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 */
AbstractLegacyComponentState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/AbstractLegacyComponentState.java)/**
 * Shared state for AbstractLegacyComponent.
 *
 * @author Vaadin Ltd
 * @since 8.0
 * @deprecated only used for Vaadin 7 compatiblity components
 */
CalendarClientRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/calendar/CalendarClientRpc.java)/**
 *
 * @since 7.1
 * @author Vaadin Ltd.
 *
 */
CalendarEventId (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/calendar/CalendarEventId.java)/**
 * CalendarEventId contains static String identifiers for all Calendar events.
 * These are used both in the client and server side code.
 *
 * @since 7.1
 * @author Vaadin Ltd.
 */
CalendarServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/calendar/CalendarServerRpc.java)/**
 * @since 7.1
 * @author Vaadin Ltd.
 */
CalendarState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/calendar/CalendarState.java)/**
 * @since 7.1.0
 * @author Vaadin Ltd.
 */
DateConstants (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/calendar/DateConstants.java)/**
 *
 * @since 7.1
 *
 */
Color (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/colorpicker/Color.java)/**
 * Default implementation for color.
 *
 * @since 7.0.0
 */
ColorPickerGradientServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/colorpicker/ColorPickerGradientServerRpc.java)/**
 * RPC interface for ColorPickerGradient.
 *
 * @since 7.0.0
 *
 */
ColorPickerGradientState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/colorpicker/ColorPickerGradientState.java)/**
 * Default shared state implementation for ColorPickerGradient.
 *
 * @since 7.0.0
 */
ColorPickerGridServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/colorpicker/ColorPickerGridServerRpc.java)/**
 * RPC interface for ColorPickerGrid.
 *
 * @since 7.0.0
 *
 */
ColorPickerGridState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/colorpicker/ColorPickerGridState.java)/**
 * Default shared state implementation for ColorPickerGrid.
 *
 * @since 7.0.0
 */
ColorPickerServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/colorpicker/ColorPickerServerRpc.java)/**
 * RPC interface for AbstractColorPicker.
 *
 * @since 7.0.0
 *
 */
ColorPickerState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/colorpicker/ColorPickerState.java)/**
 * Default shared state implementation for AbstractColorPicker.
 *
 * @since 7.0.0
 */
ComboBoxState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/combobox/ComboBoxState.java)/**
 * Shared state for the ComboBox component.
 *
 * @since 7.0
 */
ColumnGroupState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/ColumnGroupState.java)/**
 * The column group data shared between the server and the client.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
EditorClientRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/EditorClientRpc.java)/**
 * An RPC interface for the grid editor server-to-client communications.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
EditorServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/EditorServerRpc.java)/**
 * An RPC interface for the grid editor client-to-server communications.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridClientRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/GridClientRpc.java)/**
 * Server-to-client RPC interface for the Grid component.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridColumnState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/GridColumnState.java)/**
 * Column state DTO for transferring column properties from the server to the
 * client.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridConstants (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/GridConstants.java)/**
 * Container class for common constants and default values used by the Grid
 * component.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/GridServerRpc.java)/**
 * Client-to-server RPC interface for the Grid component.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/GridState.java)/**
 * The shared state for the {@link com.vaadin.ui.components.grid.Grid}
 * component.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridStaticSectionState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/GridStaticSectionState.java)/**
 * Shared state for Grid headers and footers.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
MultiSelectionModelServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/selection/MultiSelectionModelServerRpc.java)/**
 * ServerRpc for MultiSelectionModel.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
MultiSelectionModelState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/selection/MultiSelectionModelState.java)/**
 * SharedState object for MultiSelectionModel.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
SingleSelectionModelServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/selection/SingleSelectionModelServerRpc.java)/**
 * ServerRpc for SingleSelectionModel.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
SingleSelectionModelState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/grid/selection/SingleSelectionModelState.java)/**
 * SharedState object for SingleSelectionModel.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
OptionGroupState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/optiongroup/OptionGroupState.java)/**
 * Shared state for the OptionGroup component.
 *
 * @since 7.0
 */
ProgressBarState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/progressindicator/ProgressBarState.java)/**
 * {@link SharedState} for {@link com.vaadin.ui.ProgressBar}.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
AbstractSelectState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/select/AbstractSelectState.java)/**
 * Shared state for the AbstractSelect component.
 *
 * @since 7.6
 */
TableServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/table/TableServerRpc.java)/**
 * Client-to-server RPC interface for the Table component.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
TableState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/table/TableState.java)/**
 * Shared state for the Table component.
 *
 * @since 7.0
 */
RichTextAreaState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/textarea/RichTextAreaState.java)/**
 *
 * Shared state for the RichTextArea component.
 *
 * @since 7.6
 */
TreeServerRpc (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/tree/TreeServerRpc.java)/**
 * Client-to-server RPC interface for the Tree component.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
TreeState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/tree/TreeState.java)/**
 * Shared state for the Table component.
 *
 * @since 7.0
 */
TwinColSelectState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/twincolselect/TwinColSelectState.java)/**
 * Shared state for the TwinColSelect component.
 *
 * @since 7.0
 */
UploadState (/compatibility-shared/src/main/java/com/vaadin/v7/shared/ui/upload/UploadState.java)/**
 * Shared state for the Upload component.
 *
 * @since 7.6
 */
OsgiUIProvider (/liferay-integration/src/main/java/com/vaadin/osgi/liferay/OsgiUIProvider.java)/**
 * Vaadin {@link com.vaadin.server.UIProvider} that provides a single {@link UI}
 * class provided through the registration of a {@link UI} as an OSGi service.
 * <p>
 * This only applies to Liferay Portal 7+ with OSGi support.
 *
 * @author Sampsa Sohlman
 *
 * @since 8.1
 */
OsgiVaadinPortlet (/liferay-integration/src/main/java/com/vaadin/osgi/liferay/OsgiVaadinPortlet.java)/**
 * {@link VaadinPortlet} that uses an {@link OsgiUIProvider} to configure its
 * {@link UI}.
 * <p>
 * This only applies to Liferay Portal 7+ with OSGi support.
 *
 * @author Sampsa Sohlman
 *
 * @since 8.1
 */
OsgiVaadinPortletService (/liferay-integration/src/main/java/com/vaadin/osgi/liferay/OsgiVaadinPortletService.java)/**
 * {@link VaadinPortletService} class that uses the {@link OsgiUIProvider} to
 * configure the {@link UI} class for a {@link VaadinPortlet}.
 * <p>
 * This only applies to Liferay Portal 7+ with OSGi support.
 *
 * @author Sampsa Sohlman
 *
 * @since 8.1
 */
PortletProperties (/liferay-integration/src/main/java/com/vaadin/osgi/liferay/PortletProperties.java)/**
 * Constants for Liferay {@link Portlet portlets}. This doesn't have to be used
 * by the application developer.
 * <p>
 * This only applies to Liferay Portal 7+ with OSGi support.
 *
 * @author Vaadin Ltd.
 * @since 8.1
 */
PortletUIServiceTrackerCustomizer (/liferay-integration/src/main/java/com/vaadin/osgi/liferay/PortletUIServiceTrackerCustomizer.java)/**
 * Tracks {@link UI UIs} registered as OSGi services.
 *
 * <p>
 * If the {@link UI} is annotated with
 * {@link VaadinLiferayPortletConfiguration}, a {@link Portlet} is created for
 * it.
 * <p>
 * This only applies to Liferay Portal 7+ with OSGi support.
 *
 * @author Sampsa Sohlman
 *
 * @since 8.1
 */
VaadinPortletProvider (/liferay-integration/src/main/java/com/vaadin/osgi/liferay/VaadinPortletProvider.java)/**
 * Initializes a service tracker with {@link PortletUIServiceTrackerCustomizer}
 * to track {@link UI} service registrations.
 * <p>
 * This only applies to Liferay Portal 7+ with OSGi support.
 *
 * @author Sampsa Sohlman
 *
 * @since 8.1
 */
VaadinServletRegistration (/osgi-integration/src/main/java/com/vaadin/osgi/servlet/VaadinServletRegistration.java)/**
 * This component tracks {@link VaadinServlet} registrations, configures them
 * with the appropriate path to the Vaadin static resources and registers a
 * {@link Servlet} using the HttpWhiteboard specification.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.1
 */
AbstractBeanPropertyDefinition (/server/src/main/java/com/vaadin/data/AbstractBeanPropertyDefinition.java)/**
 * Abstract base class for PropertyDefinition implementations for beans.
 *
 * @author Vaadin Ltd
 * @since 8.2
 *
 * @param <T>
 *            the type of the property set
 * @param <V>
 *            the property type
 */
SerializedPropertySet (/server/src/main/java/com/vaadin/data/BeanPropertySet.java)/**
     * Serialized form of a property set. When deserialized, the property set
     * for the corresponding bean type is requested, which either returns the
     * existing cached instance or creates a new one.
     *
     * @see #readResolve()
     * @see BeanPropertyDefinition#writeReplace()
     */
SerializedPropertyDefinition (/server/src/main/java/com/vaadin/data/BeanPropertySet.java)/**
     * Serialized form of a property definition. When deserialized, the property
     * set for the corresponding bean type is requested, which either returns
     * the existing cached instance or creates a new one. The right property
     * definition is then fetched from the property set.
     *
     * @see #readResolve()
     * @see BeanPropertySet#writeReplace()
     */
NestedBeanPropertyDefinition (/server/src/main/java/com/vaadin/data/BeanPropertySet.java)/**
     * Contains properties for a bean type which is nested in another
     * definition.
     *
     * @since 8.1
     * @param <T>
     *            the bean type
     * @param <V>
     *            the value type returned by the getter and set by the setter
     */
InstanceKey (/server/src/main/java/com/vaadin/data/BeanPropertySet.java)/**
     * Key for identifying cached BeanPropertySet instances.
     *
     * @since 8.2
     */
BeanPropertySet (/server/src/main/java/com/vaadin/data/BeanPropertySet.java)/**
 * A {@link PropertySet} that uses reflection to find bean properties.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @param <T>
 *            the type of the bean
 */
BeanValidationBinder (/server/src/main/java/com/vaadin/data/BeanValidationBinder.java)/**
 * @author Vaadin Ltd
 * @see Binder
 * @see HasValue
 *
 * @since 8.0
 */
Binding (/server/src/main/java/com/vaadin/data/Binder.java)/**
     * Represents the binding between a field and a data property.
     *
     * @param <BEAN>
     *            the bean type
     * @param <TARGET>
     *            the target data type of the binding, matches the field type
     *            unless a converter has been set
     *
     * @see Binder#forField(HasValue)
     */
BindingBuilder (/server/src/main/java/com/vaadin/data/Binder.java)/**
     * Creates a binding between a field and a data property.
     *
     * @param <BEAN>
     *            the bean type
     * @param <TARGET>
     *            the target data type of the binding, matches the field type
     *            until a converter has been set
     *
     * @see Binder#forField(HasValue)
     */
BindingBuilderImpl (/server/src/main/java/com/vaadin/data/Binder.java)/**
     * An internal implementation of {@code BindingBuilder}.
     *
     * @param <BEAN>
     *            the bean type, must match the Binder bean type
     * @param <FIELDVALUE>
     *            the value type of the field
     * @param <TARGET>
     *            the target data type of the binding, matches the field type
     *            until a converter has been set
     */
BindingImpl (/server/src/main/java/com/vaadin/data/Binder.java)/**
     * An internal implementation of {@code Binding}.
     *
     * @param <BEAN>
     *            the bean type, must match the Binder bean type
     * @param <FIELDVALUE>
     *            the value type of the field
     * @param <TARGET>
     *            the target data type of the binding, matches the field type
     *            unless a converter has been set
     */
ValidatorAsConverter (/server/src/main/java/com/vaadin/data/Binder.java)/**
     * Wraps a validator as a converter.
     * <p>
     * The type of the validator must be of the same type as this converter or a
     * super type of it.
     *
     * @param <T>
     *            the type of the converter
     */
ConverterDelegate (/server/src/main/java/com/vaadin/data/Binder.java)/**
     * Converter decorator-strategy pattern to use initially provided "delegate"
     * converter to execute its logic until the {@code setIdentity()} method is
     * called. Once the method is called the class changes its behavior to the
     * same as {@link Converter#identity()} behavior.
     */
Binder (/server/src/main/java/com/vaadin/data/Binder.java)/**
 * Connects one or more {@code Field} components to properties of a backing data
 * type such as a bean type. With a binder, input components can be grouped
 * together into forms to easily create and update business objects with little
 * explicit logic needed to move data between the UI and the data layers of the
 * application.
 * <p>
 * A binder is a collection of <i>bindings</i>, each representing the mapping of
 * a single field, through converters and validators, to a backing property.
 * <p>
 * A binder instance can be bound to a single bean instance at a time, but can
 * be rebound as needed. This allows usage patterns like a <i>master-details</i>
 * view, where a select component is used to pick the bean to edit.
 * <p>
 * Bean level validators can be added using the
 * {@link #withValidator(Validator)} method and will be run on the bound bean
 * once it has been updated from the values of the bound fields. Bean level
 * validators are also run as part of {@link #writeBean(Object)} and
 * {@link #writeBeanIfValid(Object)} if all field level validators pass.
 * <p>
 * Note: For bean level validators, the bean must be updated before the
 * validators are run. If a bean level validator fails in
 * {@link #writeBean(Object)} or {@link #writeBeanIfValid(Object)}, the bean
 * will be reverted to the previous state before returning from the method. You
 * should ensure that the getters/setters in the bean do not have side effects.
 * <p>
 * Unless otherwise specified, {@code Binder} method arguments cannot be null.
 *
 * @author Vaadin Ltd.
 *
 * @param <BEAN>
 *            the bean type
 *
 * @see BindingBuilder
 * @see Binding
 * @see HasValue
 *
 * @since 8.0
 */
BinderValidationStatus (/server/src/main/java/com/vaadin/data/BinderValidationStatus.java)/**
 * Binder validation status change. Represents the outcome of binder level
 * validation. Has information about the validation results for the
 * {@link BindingBuilder#withValidator(Validator) field level} and
 * {@link Binder#withValidator(Validator) binder level} validation.
 * <p>
 * Note: if there are any field level validation errors, the bean level
 * validation is not run.
 * <p>
 * Use {@link Binder#setValidationStatusHandler(BinderValidationStatusHandler)}
 * to handle form level validation status changes.
 *
 * @author Vaadin Ltd
 *
 * @param <BEAN>
 *            the bean type of the binder
 *
 * @see BinderValidationStatusHandler
 * @see Binder#setValidationStatusHandler(BinderValidationStatusHandler)
 * @see Binder#validate()
 * @see BindingValidationStatus
 *
 * @since 8.0
 */
BinderValidationStatusHandler (/server/src/main/java/com/vaadin/data/BinderValidationStatusHandler.java)/**
 * Handler for {@link BinderValidationStatus} changes.
 * <p>
 * {@link Binder#setValidationStatusHandler(BinderValidationStatusHandler)
 * Register} an instance of this class to be able to customize validation status
 * handling.
 * <p>
 * The default handler will show
 * {@link com.vaadin.ui.AbstractComponent#setComponentError(com.vaadin.server.ErrorMessage)
 * an error message} for failed field validations. For bean level validation
 * errors it will display the first error message in
 * {@link Binder#setStatusLabel(com.vaadin.ui.Label) status label}, if one has
 * been set.
 *
 * @author Vaadin Ltd
 *
 * @see BinderValidationStatus
 * @see Binder#validate()
 * @see BindingValidationStatus
 *
 * @param <BEAN>
 *            the bean type of binder
 *
 * @since 8.0
 */
BindingValidationStatus (/server/src/main/java/com/vaadin/data/BindingValidationStatus.java)/**
 * Represents the status of field validation. Status can be {@code Status.OK},
 * {@code Status.ERROR} or {@code Status.UNRESOLVED}. Status OK and ERROR are
 * always associated with a ValidationResult {@link #getResult}.
 * <p>
 * Use
 * {@link BindingBuilder#withValidationStatusHandler(BindingValidationStatusHandler)}
 * to register a handler for field level validation status changes.
 *
 * @author Vaadin Ltd
 *
 * @param <TARGET>
 *            the target data type of the binding for which the validation
 *            status changed, matches the field type unless a converter has been
 *            set
 *
 * @see BindingBuilder#withValidationStatusHandler(BindingValidationStatusHandler)
 * @see Binding#validate()
 * @see BindingValidationStatusHandler
 * @see BinderValidationStatus
 *
 * @since 8.0
 */
BindingValidationStatusHandler (/server/src/main/java/com/vaadin/data/BindingValidationStatusHandler.java)/**
 * Handler for {@link BindingValidationStatus} changes.
 * <p>
 * {@link BindingBuilder#withValidationStatusHandler(BindingValidationStatusHandler)}
 * Register} an instance of this class to be able to override the default
 * handling, which is to show
 * {@link com.vaadin.ui.AbstractComponent#setComponentError(com.vaadin.server.ErrorMessage)
 * an error message} for failed field validations.
 *
 * @author Vaadin Ltd
 *
 * @see BindingBuilder#withValidationStatusHandler(BindingValidationStatusHandler)
 * @see BindingValidationStatus
 *
 * @since 8.0
 *
 */
AbstractStringToNumberConverter (/server/src/main/java/com/vaadin/data/converter/AbstractStringToNumberConverter.java)/**
 * A converter that converts from the number type T to {@link String} and back.
 * Uses the given locale and {@link NumberFormat} for formatting and parsing.
 * Automatically trims the input string, removing any leading and trailing white
 * space.
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
DateToLongConverter (/server/src/main/java/com/vaadin/data/converter/DateToLongConverter.java)/**
 * A converter that converts from {@link Long} to {@link Date} and back.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
DateToSqlDateConverter (/server/src/main/java/com/vaadin/data/converter/DateToSqlDateConverter.java)/**
 * Converter for handling conversion between {@link java.util.Date} and
 * {@link java.sql.Date}. This is used when a PopupDateField or InlineDateField
 * is connected to a java.sql.Date property. Note that information (time
 * information) is lost when converting from {@link java.util.Date} to
 * {@link java.sql.Date}.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
LocalDateTimeToDateConverter (/server/src/main/java/com/vaadin/data/converter/LocalDateTimeToDateConverter.java)/**
 * A converter that converts between <code>LocalDateTime</code> and
 * <code>Date</code>. This is used when a {@link DateTimeField} or
 * {@link InlineDateTimeField} is bound to a {@link Date} property.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
LocalDateToDateConverter (/server/src/main/java/com/vaadin/data/converter/LocalDateToDateConverter.java)/**
 * A converter that converts between <code>LocalDate</code> and
 * <code>Date</code>. This is used when a {@link DateField} or
 * {@link InlineDateField} is bound to a {@link Date} property.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StringToBigDecimalConverter (/server/src/main/java/com/vaadin/data/converter/StringToBigDecimalConverter.java)/**
 * A converter that converts from {@link String} to {@link BigDecimal} and back.
 * Uses the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StringToBigIntegerConverter (/server/src/main/java/com/vaadin/data/converter/StringToBigIntegerConverter.java)/**
 * A converter that converts from {@link String} to {@link BigInteger} and back.
 * Uses the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StringToBooleanConverter (/server/src/main/java/com/vaadin/data/converter/StringToBooleanConverter.java)/**
 * A converter that converts from {@link String} to {@link Boolean} and back.
 * The String representation is given by {@link Boolean#toString()} or provided
 * in constructor
 * {@link StringToBooleanConverter#StringToBooleanConverter(String, String, String)}.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * For language-dependent representation, subclasses should overwrite
 * {@link #getFalseString(Locale)} and {@link #getTrueString(Locale)}
 * </p>
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StringToDateConverter (/server/src/main/java/com/vaadin/data/converter/StringToDateConverter.java)/**
 * A converter that converts from {@link Date} to {@link String} and back. Uses
 * the given locale and {@link DateFormat} for formatting and parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StringToDoubleConverter (/server/src/main/java/com/vaadin/data/converter/StringToDoubleConverter.java)/**
 * A converter that converts from {@link String} to {@link Double} and back.
 * Uses the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StringToFloatConverter (/server/src/main/java/com/vaadin/data/converter/StringToFloatConverter.java)/**
 * A converter that converts from {@link String} to {@link Float} and back. Uses
 * the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StringToIntegerConverter (/server/src/main/java/com/vaadin/data/converter/StringToIntegerConverter.java)/**
 * A converter that converts from {@link String} to {@link Integer} and back.
 * Uses the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StringToLongConverter (/server/src/main/java/com/vaadin/data/converter/StringToLongConverter.java)/**
 * A converter that converts from {@link String} to {@link Long} and back. Uses
 * the given locale and a {@link NumberFormat} instance for formatting and
 * parsing.
 * <p>
 * Override and overwrite {@link #getFormat(Locale)} to use a different format.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
StringToUuidConverter (/server/src/main/java/com/vaadin/data/converter/StringToUuidConverter.java)/**
 * A converter that converts from {@link String} to {@link UUID} and back.
 * <p>
 * Leading and trailing white spaces are ignored when converting from a String.
 * </p>
 * <p>
 * The String representation uses the canonical format of 32-characters with a
 * hyphen to separate each of five groups of hexadecimal digits as defined in:
 * RFC 4122: A Universally Unique IDentifier (UUID) URN Namespace
 * http://www.ietf.org/rfc/rfc4122.txt
 * </p>
 *
 * @author Vaadin Ltd
 * @since 8.8
 */
Converter (/server/src/main/java/com/vaadin/data/Converter.java)/**
 * Interface that implements conversion between a model and a presentation type.
 * <p>
 * Converters must not have any side effects (never update UI from inside a
 * converter).
 *
 * @param <PRESENTATION>
 *            The presentation type.
 * @param <MODEL>
 *            The model type.
 * @author Vaadin Ltd.
 * @since 8.0
 */
ErrorMessageProvider (/server/src/main/java/com/vaadin/data/ErrorMessageProvider.java)/**
 * Provider interface for generating localizable error messages using
 * {@link ValueContext}.
 *
 * @since 8.0
 * @author Vaadin Ltd.
 */
HasDataProvider (/server/src/main/java/com/vaadin/data/HasDataProvider.java)/**
 * A generic interface for listing components that use a data provider for
 * showing data.
 * <p>
 * A listing component should implement either this interface or
 * {@link HasFilterableDataProvider}, but not both.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the item data type
 * @since 8.0
 *
 * @see HasFilterableDataProvider
 */
HasFilterableDataProvider (/server/src/main/java/com/vaadin/data/HasFilterableDataProvider.java)/**
 * A generic interface for listing components that use a filterable data
 * provider for showing data.
 * <p>
 * A listing component should implement either this interface or
 * {@link HasDataProvider}, but not both.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the item data type
 * @param <F>
 *            the filter type
 * @since 8.0
 *
 * @see HasDataProvider
 */
HasHierarchicalDataProvider (/server/src/main/java/com/vaadin/data/HasHierarchicalDataProvider.java)/**
 * A generic interface for hierarchical listing components that use a data
 * provider for showing data.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            the item data type
 */
HasItems (/server/src/main/java/com/vaadin/data/HasItems.java)/**
 * A component that displays a collection of items.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @param <T>
 *            the type of the displayed item
 */
ValueChangeEvent (/server/src/main/java/com/vaadin/data/HasValue.java)/**
     * An event fired when the value of a {@code HasValue} changes.
     *
     * @param <V>
     *            the value type
     */
ValueChangeListener (/server/src/main/java/com/vaadin/data/HasValue.java)/**
     * A listener for value change events.
     *
     * @param <V>
     *            the value type
     *
     * @see ValueChangeEvent
     * @see Registration
     */
HasValue (/server/src/main/java/com/vaadin/data/HasValue.java)/**
 * A generic interface for field components and other user interface objects
 * that have a user-editable value. Emits change events whenever the value is
 * changed, either by the user or programmatically.
 *
 * @author Vaadin Ltd.
 *
 * @param <V>
 *            the value type
 *
 * @since 8.0
 */
PropertyDefinition (/server/src/main/java/com/vaadin/data/PropertyDefinition.java)/**
 * A property from a {@link PropertySet}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the type of the property set
 * @param <V>
 *            the property type
 */
PropertyFilterDefinition (/server/src/main/java/com/vaadin/data/PropertyFilterDefinition.java)/**
 * Class containing the constraints for filtering nested properties.
 *
 * @author Vaadin Ltd
 * @since 8.2
 */
PropertySet (/server/src/main/java/com/vaadin/data/PropertySet.java)/**
 * Describes a set of properties that can be used for configuration based on
 * property names instead of setter and getter callbacks.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @param <T>
 *            the type for which the properties are defined
 */
AbstractBackEndDataProvider (/server/src/main/java/com/vaadin/data/provider/AbstractBackEndDataProvider.java)/**
 * Abstract base class for implementing back end data providers.
 *
 * @param <T>
 *            data provider data type
 * @param <F>
 *            data provider filter type
 * @since 8.0
 */
AbstractBackEndHierarchicalDataProvider (/server/src/main/java/com/vaadin/data/provider/AbstractBackEndHierarchicalDataProvider.java)/**
 * Abstract base class for implementing
 * {@link BackEndHierarchicalDataProvider}s.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            data type
 * @param <F>
 *            filter type
 */
AbstractDataProvider (/server/src/main/java/com/vaadin/data/provider/AbstractDataProvider.java)/**
 * Abstract data provider implementation which takes care of refreshing data
 * from the underlying data provider.
 *
 * @param <T>
 *            data type
 * @param <F>
 *            filter type
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
AbstractHierarchicalDataProvider (/server/src/main/java/com/vaadin/data/provider/AbstractHierarchicalDataProvider.java)/**
 * Abstract hierarchical data provider implementation which takes care of item
 * refreshes and associated events.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            data type
 * @param <F>
 *            filter type
 */
BackEndDataProvider (/server/src/main/java/com/vaadin/data/provider/BackEndDataProvider.java)/**
 * A data provider that lazy loads items from a back end.
 *
 * @param <T>
 *            data provider data type
 * @param <F>
 *            data provider filter type
 * @since 8.0
 */
BackEndHierarchicalDataProvider (/server/src/main/java/com/vaadin/data/provider/BackEndHierarchicalDataProvider.java)/**
 * A data provider that lazy loads items from a back end containing hierarchical
 * data.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            data provider data type
 * @param <F>
 *            data provider filter type
 */
FetchCallback (/server/src/main/java/com/vaadin/data/provider/CallbackDataProvider.java)/**
     * Callback interface for fetching a stream of items from a backend based on
     * a query.
     *
     * @param <T>
     *            the type of the items to fetch
     * @param <F>
     *            the type of the optional filter in the query,
     *            <code>Void</code> if filtering is not supported
     */
CountCallback (/server/src/main/java/com/vaadin/data/provider/CallbackDataProvider.java)/**
     * Callback interface for counting the number of items in a backend based on
     * a query.
     *
     * @param <T>
     *            the type of the items to count
     * @param <F>
     *            the type of the optional filter in the query,
     *            <code>Void</code> if filtering is not supported
     */
CallbackDataProvider (/server/src/main/java/com/vaadin/data/provider/CallbackDataProvider.java)/**
 * Data provider that uses one callback for fetching items from a back end and
 * another callback for counting the number of available items.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            data provider data type
 * @param <F>
 *            data provider filter type
 */
ConfigurableFilterDataProvider (/server/src/main/java/com/vaadin/data/provider/ConfigurableFilterDataProvider.java)/**
 * A data provider that supports programmatically setting a filter that will be
 * applied to all queries.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the data provider item type
 * @param <Q>
 *            the query filter type
 * @param <C>
 *            the configurable filter type
 */
ConfigurableFilterDataProviderWrapper (/server/src/main/java/com/vaadin/data/provider/ConfigurableFilterDataProviderWrapper.java)/**
 * A configurable data provider that wraps another data provider by combining
 * any filter from the component with the configured filter and passing that to
 * the wrapped provider through the query.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the data provider item type
 * @param <Q>
 *            the query filter type
 * @param <C>
 *            the configurable filter type
 * @param <F>
 *            the filter type of the wrapped data provider
 */
DataRefreshEvent (/server/src/main/java/com/vaadin/data/provider/DataChangeEvent.java)/**
     * An event fired when a single item of a {@code DataProvider} has been
     * updated.
     *
     * @param <T>
     *            the data type
     */
DataChangeEvent (/server/src/main/java/com/vaadin/data/provider/DataChangeEvent.java)/**
 * An event fired when the data of a {@code DataProvider} changes.
 *
 * @see DataProviderListener
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 *
 * @param <T>
 *            the data type
 */
SimpleDataRequestRpc (/server/src/main/java/com/vaadin/data/provider/DataCommunicator.java)/**
     * Simple implementation of collection data provider communication. All data
     * is sent by server automatically and no data is requested by client.
     */
ActiveDataHandler (/server/src/main/java/com/vaadin/data/provider/DataCommunicator.java)/**
     * A class for handling currently active data and dropping data that is no
     * longer needed. Data tracking is based on key string provided by
     * {@link DataKeyMapper}.
     * <p>
     * When the {@link DataCommunicator} is pushing new data to the client-side
     * via {@link DataCommunicator#pushData(int, List)},
     * {@link #addActiveData(Stream)} and {@link #cleanUp(Stream)} are called
     * with the same parameter. In the clean up method any dropped data objects
     * that are not in the given collection will be cleaned up and
     * {@link DataGenerator#destroyData(Object)} will be called for them.
     */
DataCommunicator (/server/src/main/java/com/vaadin/data/provider/DataCommunicator.java)/**
 * DataProvider base class. This class is the base for all DataProvider
 * communication implementations. It uses {@link DataGenerator}s to write
 * {@link JsonObject}s representing each data object to be sent to the
 * client-side.
 *
 * @param <T>
 *            the bean type
 *
 * @since 8.0
 */
DataGenerator (/server/src/main/java/com/vaadin/data/provider/DataGenerator.java)/**
 * A data generator for {@link DataCommunicator}. Used to inject custom data to
 * data items sent to the client for extension purposes.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the data type
 *
 * @since 8.0
 */
DataKeyMapper (/server/src/main/java/com/vaadin/data/provider/DataKeyMapper.java)/**
 * DataKeyMapper to map data objects to key strings.
 *
 * @since 8.0
 * @param <T>
 *            data type
 */
DataProvider (/server/src/main/java/com/vaadin/data/provider/DataProvider.java)/**
 * A common interface for fetching data from a backend. The {@link DataProvider}
 * interface is used by listing components implementing {@link HasDataProvider}
 * or {@link HasFilterableDataProvider}. The listing component will provide a
 * {@link Query} object with request information, and the data provider uses
 * this information to return a stream containing requested beans.
 * <p>
 * Vaadin comes with a ready-made solution for in-memory data, known as
 * {@link ListDataProvider} which can be created using static {@code create}
 * methods in this interface. For custom backends such as SQL, EntityManager,
 * REST APIs or SpringData, use a {@link BackEndDataProvider} or its subclass.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            data type
 * @param <F>
 *            filter type
 *
 * @see #ofCollection(Collection)
 * @see #ofItems(Object...)
 * @see #fromStream(Stream)
 * @see #fromCallbacks(FetchCallback, CountCallback)
 * @see #fromFilteringCallbacks(FetchCallback, CountCallback)
 * @see ListDataProvider
 * @see BackEndDataProvider
 *
 * @since 8.0
 */
DataProviderListener (/server/src/main/java/com/vaadin/data/provider/DataProviderListener.java)/**
 * Interface for listening for a data change events fired by a
 * {@link DataProvider}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the data type
 */
DataProviderWrapper (/server/src/main/java/com/vaadin/data/provider/DataProviderWrapper.java)/**
 * Wrapper class for modifying, chaining and replacing filters and sorting in a
 * query. Used to create a suitable {@link Query} for the underlying data
 * provider with correct filters and sorting.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 *
 * @param <T>
 *            data provider data type
 * @param <F>
 *            wrapper query filter type
 * @param <M>
 *            underlying data provider filter type
 */
GridSortOrder (/server/src/main/java/com/vaadin/data/provider/GridSortOrder.java)/**
 * Sorting information for {@link com.vaadin.ui.Grid Grid}.
 *
 * @param <T>
 *            the grid type
 * @since 8.0
 */
GridSortOrderBuilder (/server/src/main/java/com/vaadin/data/provider/GridSortOrderBuilder.java)/**
 * Helper classes with fluent API for constructing {@link GridSortOrder} lists.
 * When the sort order is ready to be passed on, calling {@link #build()} will
 * create the list of sort orders.
 *
 * @see GridSortOrder
 * @see #thenAsc(Column)
 * @see #thenDesc(Column)
 * @see #build()
 *
 * @param <T>
 *            the type of the grid
 * @since 8.0
 */
HierarchicalDataCommunicator (/server/src/main/java/com/vaadin/data/provider/HierarchicalDataCommunicator.java)/**
 * Data communicator that handles requesting hierarchical data from
 * {@link HierarchicalDataProvider} and sending it to client side.
 *
 * @param <T>
 *            the bean type
 * @author Vaadin Ltd
 * @since 8.1
 */
HierarchicalDataProvider (/server/src/main/java/com/vaadin/data/provider/HierarchicalDataProvider.java)/**
 * A common interface for fetching hierarchical data from a data source, such as
 * an in-memory collection or a backend database.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            data type
 * @param <F>
 *            filter type
 */
HierarchicalQuery (/server/src/main/java/com/vaadin/data/provider/HierarchicalQuery.java)/**
 * Immutable hierarchical query object used to request data from a backend.
 * Contains the parent node, index limits, sorting and filtering information.
 *
 * @param <T>
 *            bean type
 * @param <F>
 *            filter type
 *
 * @since 8.1
 */
HierarchyMapper (/server/src/main/java/com/vaadin/data/provider/HierarchyMapper.java)/**
 * Mapper for hierarchical data.
 * <p>
 * Keeps track of the expanded nodes, and size of of the subtrees for each
 * expanded node.
 * <p>
 * This class is framework internal implementation details, and can be changed /
 * moved at any point. This means that you should not directly use this for
 * anything.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            the data type
 * @param <F>
 *            the filter type
 */
InMemoryDataProvider (/server/src/main/java/com/vaadin/data/provider/InMemoryDataProvider.java)/**
 * A mixin interface for in-memory data providers. Contains methods for
 * configuring sorting and filtering.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            data type
 */
InMemoryDataProviderHelpers (/server/src/main/java/com/vaadin/data/provider/InMemoryDataProviderHelpers.java)/**
 * A class containing a number of static helper methods for implementing
 * {@link InMemoryDataProvider}s.
 * <p>
 * This class is intended primarily for internal use.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
ListDataProvider (/server/src/main/java/com/vaadin/data/provider/ListDataProvider.java)/**
 * {@link DataProvider} wrapper for {@link Collection}s.
 *
 * @param <T>
 *            data type
 * @since 8.0
 */
Query (/server/src/main/java/com/vaadin/data/provider/Query.java)/**
 * Immutable query object used to request data from a backend. Contains index
 * limits, sorting and filtering information.
 *
 * @param <T>
 *            bean type
 * @param <F>
 *            filter type
 *
 * @since 8.0
 */
QuerySortOrder (/server/src/main/java/com/vaadin/data/provider/QuerySortOrder.java)/**
 * Sorting information for {@link Query}.
 *
 * @see Query
 * @since 8.0
 */
QuerySortOrderBuilder (/server/src/main/java/com/vaadin/data/provider/QuerySortOrderBuilder.java)/**
 * Helper classes with fluent API for constructing {@link QuerySortOrder} lists.
 * When the sort order is ready to be passed on, calling {@link #build()} will
 * create the list of sort orders.
 *
 * @see QuerySortOrder
 * @see #thenDesc(String)
 * @see #thenDesc(String)
 * @see #build()
 * @since 8.0
 */
SortBuilder (/server/src/main/java/com/vaadin/data/provider/Sort.java)/**
     * SortBuilder is a helper class with fluent API for constructing sort order
     * lists. When the sort order is ready to be passed on, calling
     * {@link #build()} will create the list of sort orders
     *
     *
     * @see Sort
     * @see Sort#asc(String)
     * @see Sort#desc(String)
     * @see #build()
     */
Sort (/server/src/main/java/com/vaadin/data/provider/Sort.java)/**
 * Helper class for constructing SortOrders.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
SortOrder (/server/src/main/java/com/vaadin/data/provider/SortOrder.java)/**
 * Sorting information for one field.
 *
 * @param <T>
 *            the type of the sorting information, usually a String (field id)
 *            or a {@link java.util.Comparator}.
 * @since 8.0
 */
SortOrderBuilder (/server/src/main/java/com/vaadin/data/provider/SortOrderBuilder.java)/**
 * Base class for helper classes with fluent API for constructing sort order
 * lists. When the sort order is ready to be passed on, calling {@link #build()}
 * will create the list of sort orders.
 *
 * @param <T>
 *            the sort order type
 * @param <V>
 *            the sorting type
 *
 * @see SortOrderBuilder#thenAsc(Object)
 * @see SortOrderBuilder#thenDesc(Object)
 * @see #build()
 * @since 8.0
 */
TreeDataProvider (/server/src/main/java/com/vaadin/data/provider/TreeDataProvider.java)/**
 * An in-memory data provider for listing components that display hierarchical
 * data. Uses an instance of {@link TreeData} as its source of data.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            data type
 */
ReadOnlyHasValue (/server/src/main/java/com/vaadin/data/ReadOnlyHasValue.java)/**
 * Generic {@link HasValue} to use any type of component with Vaadin data
 * binding.
 * <p>
 * Example:
 *
 * <pre>
 * Label label = new Label();
 * ReadOnlyHasValue&lt;String&gt; hasValue = new ReadOnlyHasValue&lt;&gt;(
 *         label::setCaption);
 * binder.forField(hasValue).bind(SomeBean::getName);
 * </pre>
 *
 * @param <V>
 *            the value type
 * @since 8.4
 */
RequiredFieldConfigurator (/server/src/main/java/com/vaadin/data/RequiredFieldConfigurator.java)/**
 * This interface represents a predicate which returns {@code true} if bound
 * field should be configured to have required indicator via
 * {@link HasValue#setRequiredIndicatorVisible(boolean)}.
 *
 * @see BeanValidationBinder
 * @see BeanValidationBinder#setRequiredConfigurator(RequiredFieldConfigurator)
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
Result (/server/src/main/java/com/vaadin/data/Result.java)/**
 * Represents the result of an operation that might fail, such as type
 * conversion. A result may contain either a value, signifying a successful
 * operation, or an error message in case of a failure.
 * <p>
 * Result instances are created using the factory methods {@link #ok(R)} and
 * {@link #error(String)}, denoting success and failure respectively.
 * <p>
 * Unless otherwise specified, {@code Result} method arguments cannot be null.
 *
 * @param <R>
 *            the result value type
 *
 * @since 8.0
 */
Single (/server/src/main/java/com/vaadin/data/SelectionModel.java)/**
     * A selection model in which at most one item can be selected at a time.
     * Selecting another item deselects the originally selected item.
     *
     * @param <T>
     *            the type of the items to select
     */
Multi (/server/src/main/java/com/vaadin/data/SelectionModel.java)/**
     * A selection model in which multiple items can be selected at the same
     * time. Selecting an item adds it to the selection.
     *
     * @param <T>
     *            the type of the items to select
     */
SelectionModel (/server/src/main/java/com/vaadin/data/SelectionModel.java)/**
 * Models the selection logic of a {@code Listing} component. Determines how
 * items can be selected and deselected.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the type of the items to select
 * @since 8.0
 */
SimpleResult (/server/src/main/java/com/vaadin/data/SimpleResult.java)/**
 * An internal implementation of {@code Result}.
 *
 * @param <R>
 *            the result value type
 *
 * @since 8.0
 */
StatusChangeEvent (/server/src/main/java/com/vaadin/data/StatusChangeEvent.java)/**
 * Binder status change event.
 * <p>
 * The {@link Binder} status is changed whenever any of the following happens:
 * <ul>
 * <li>if any of its bound fields or selects have been changed
 * <li>{@link Binder#writeBean(Object)} or
 * {@link Binder#writeBeanIfValid(Object)} is called
 * <li>{@link Binder#readBean(Object)} is called
 * <li>{@link Binder#setBean(Object)} is called
 * <li>{@link Binder#removeBean()} is called
 * <li>{@link BindingBuilder#bind(ValueProvider, Setter)} is called
 * <li>{@link Binder#validate()} or {@link Binding#validate()} is called
 * </ul>
 *
 * @see StatusChangeListener#statusChange(StatusChangeEvent)
 * @see Binder#addStatusChangeListener(StatusChangeListener)
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 */
StatusChangeListener (/server/src/main/java/com/vaadin/data/StatusChangeListener.java)/**
 * Listener interface for status change events from binder.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @see StatusChangeEvent
 * @see Binder#addStatusChangeListener(StatusChangeListener)
 */
TreeData (/server/src/main/java/com/vaadin/data/TreeData.java)/**
 * Class for representing hierarchical data.
 * <p>
 * Typically used as a backing data source for {@link TreeDataProvider}.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            data type
 */
BeanUtil (/server/src/main/java/com/vaadin/data/util/BeanUtil.java)/**
 * Utility class for Java Beans information access.
 *
 * @since 7.4
 *
 * @author Vaadin Ltd
 */
ValidationException (/server/src/main/java/com/vaadin/data/ValidationException.java)/**
 * Indicates validation errors in a {@link Binder} when a field value is
 * validated.
 *
 * @see Binder#writeBean(Object)
 * @see Binder#writeBeanIfValid(Object)
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
ValidationResult (/server/src/main/java/com/vaadin/data/ValidationResult.java)/**
 * Represents the result of a validation. A result may be either successful or
 * contain an error message in case of a failure.
 * <p>
 * ValidationResult instances are created using the factory methods
 * {@link #ok()} and {@link #error(String)}, denoting success and failure
 * respectively.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
ValidationResultWrap (/server/src/main/java/com/vaadin/data/ValidationResultWrap.java)/**
 * Internal implementation of a {@code Result} that collects all possible
 * ValidationResults into one list. This class intercepts the normal chaining of
 * Converters and Validators, catching and collecting results.
 *
 * @param <R>
 *            the result data type
 *
 * @since 8.2
 */
AbstractValidator (/server/src/main/java/com/vaadin/data/validator/AbstractValidator.java)/**
 * An abstract base class for typed validators.
 *
 * @param <T>
 *            The value type
 * @author Vaadin Ltd.
 * @since 8.0
 */
BeanValidator (/server/src/main/java/com/vaadin/data/validator/BeanValidator.java)/**
 * A {@code Validator} using the JSR-303 (javax.validation) annotation-based
 * bean validation mechanism. Values passed to this validator are compared
 * against the constraints, if any, specified by annotations on the
 * corresponding bean property.
 * <p>
 * Note that a JSR-303 implementation (for instance
 * <a href="http://hibernate.org/validator/">Hibernate Validator</a> or
 * <a href="http://bval.apache.org/">Apache BVal</a>) must be present on the
 * project classpath when using bean validation. Specification versions 1.0 and
 * 1.1 are supported.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
BigDecimalRangeValidator (/server/src/main/java/com/vaadin/data/validator/BigDecimalRangeValidator.java)/**
 * Validator for validating that an {@link BigDecimal} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
BigIntegerRangeValidator (/server/src/main/java/com/vaadin/data/validator/BigIntegerRangeValidator.java)/**
 * Validator for validating that an {@link BigInteger} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
ByteRangeValidator (/server/src/main/java/com/vaadin/data/validator/ByteRangeValidator.java)/**
 * Validator for validating that an {@link Byte} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
DateRangeValidator (/server/src/main/java/com/vaadin/data/validator/DateRangeValidator.java)/**
 * Validator for validating that a {@link LocalDate} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
DateTimeRangeValidator (/server/src/main/java/com/vaadin/data/validator/DateTimeRangeValidator.java)/**
 * Validator for validating that a {@link LocalDateTime} is inside a given
 * range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
DoubleRangeValidator (/server/src/main/java/com/vaadin/data/validator/DoubleRangeValidator.java)/**
 * Validator for validating that a {@link Double} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
EmailValidator (/server/src/main/java/com/vaadin/data/validator/EmailValidator.java)/**
 * A string validator for e-mail addresses. The e-mail address syntax is not
 * complete according to RFC 822 but handles the vast majority of valid e-mail
 * addresses correctly.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
FloatRangeValidator (/server/src/main/java/com/vaadin/data/validator/FloatRangeValidator.java)/**
 * Validator for validating that a {@link Float} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
IntegerRangeValidator (/server/src/main/java/com/vaadin/data/validator/IntegerRangeValidator.java)/**
 * Validator for validating that an {@link Integer} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
LongRangeValidator (/server/src/main/java/com/vaadin/data/validator/LongRangeValidator.java)/**
 * Validator for validating that an {@link Long} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
RangeValidator (/server/src/main/java/com/vaadin/data/validator/RangeValidator.java)/**
 * Verifies that a value is within the given range.
 *
 * @param <T>
 *            the type to validate
 * @author Vaadin Ltd.
 * @since 8.0
 */
RegexpValidator (/server/src/main/java/com/vaadin/data/validator/RegexpValidator.java)/**
 * A string validator comparing the string against a Java regular expression.
 * Both complete matches and substring matches are supported.
 * <p>
 * For the Java regular expression syntax, see {@link java.util.regex.Pattern}.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
ShortRangeValidator (/server/src/main/java/com/vaadin/data/validator/ShortRangeValidator.java)/**
 * Validator for validating that an {@link Short} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
StringLengthValidator (/server/src/main/java/com/vaadin/data/validator/StringLengthValidator.java)/**
 * Verifies that the length of a string is within the given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
Validator (/server/src/main/java/com/vaadin/data/Validator.java)/**
 * A functional interface for validating user input or other potentially invalid
 * data. When a validator instance is applied to a value of the corresponding
 * type, it returns a <i>result</i> signifying that the value either passed or
 * failed the validation.
 * <p>
 * For instance, the following validator checks if a number is positive:
 *
 * <pre>
 * Validator&lt;Integer&gt; v = num -&gt; {
 *     if (num &gt;= 0)
 *         return ValidationResult.ok();
 *     else
 *         return ValidationResult.error("number must be positive");
 * };
 * </pre>
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 *
 * @param <T>
 *            the type of the value to validate
 *
 * @see ValidationResult
 */
ValueContext (/server/src/main/java/com/vaadin/data/ValueContext.java)/**
 * Value context for {@code Converter}s. Contains relevant information for
 * converting values.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
ValueProvider (/server/src/main/java/com/vaadin/data/ValueProvider.java)/**
 * A callback interface for providing values from a given source.
 * <p>
 * For example this interface can be implemented to simply extract a value with
 * a getter, or to create a composite value based on the fields of the source
 * object.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 *
 * @param <SOURCE>
 *            the type of the object used to provide the value
 * @param <TARGET>
 *            the type of the provided value
 */
Listener (/server/src/main/java/com/vaadin/event/Action.java)/**
     * An Action that implements this interface can be added to an
     * Action.Notifier (or NotifierProxy) via the <code>addAction()</code>
     * -method, which in many cases is easier than implementing the
     * Action.Handler interface.<br/>
     *
     */
Notifier (/server/src/main/java/com/vaadin/event/Action.java)/**
     * Action.Containers implementing this support an easier way of adding
     * single Actions than the more involved Action.Handler. The added actions
     * must be Action.Listeners, thus handling the action themselves.
     *
     */
Handler (/server/src/main/java/com/vaadin/event/Action.java)/**
     * Interface implemented by classes who wish to handle actions.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
Container (/server/src/main/java/com/vaadin/event/Action.java)/**
     * Interface implemented by all components where actions can be registered.
     * This means that the components lets others to register as action handlers
     * to it. When the component receives an action targeting its contents it
     * should loop all action handlers registered to it and let them handle the
     * action.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
Action (/server/src/main/java/com/vaadin/event/Action.java)/**
 * Implements the action framework. This class contains subinterfaces for action
 * handling and listing, and for action handler registrations and
 * unregistration.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
ActionManager (/server/src/main/java/com/vaadin/event/ActionManager.java)/**
 * Javadoc TODO
 *
 * Notes:
 * <p>
 * Empties the keymapper for each repaint to avoid leaks; can cause problems in
 * the future if the client assumes key don't change. (if lazyloading, one must
 * not cache results)
 * </p>
 *
 *
 */
CollapseListener (/server/src/main/java/com/vaadin/event/CollapseEvent.java)/**
     * Item collapse event listener.
     *
     * @param <T>
     *            the collapsed item's type
     * @since 8.1
     */
CollapseEvent (/server/src/main/java/com/vaadin/event/CollapseEvent.java)/**
 * An event that is fired when an item is collapsed in a listing component that
 * displays hierarchical data. Note that expanded subtrees of the collapsed item
 * will not trigger collapse events.
 *
 * @author Vaadin Ltd
 * @since 8.1
 * @param <T>
 *            collapsed item type
 */
ConnectorActionManager (/server/src/main/java/com/vaadin/event/ConnectorActionManager.java)/**
 * An ActionManager connected to a connector. Takes care of verifying that the
 * connector can receive events before triggering an action.
 * <p>
 * This is mostly a workaround until shortcut actions are re-implemented in a
 * more sensible way.
 *
 * @since 7.1.8
 * @author Vaadin Ltd
 */
ConnectorEvent (/server/src/main/java/com/vaadin/event/ConnectorEvent.java)/**
 * A base class for user interface events fired by connectors.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 */
ConnectorEventListener (/server/src/main/java/com/vaadin/event/ConnectorEventListener.java)/**
 * Event listener interface for events originating from server side connectors.
 *
 * @since 6.0
 * @author Vaadin Ltd
 *
 * @see Connector
 * @see ClientConnector
 */
ContextClickListener (/server/src/main/java/com/vaadin/event/ContextClickEvent.java)/**
     * Listener for {@link ContextClickEvent ContextClickEvents}.
     */
ContextClickNotifier (/server/src/main/java/com/vaadin/event/ContextClickEvent.java)/**
     * The interface for adding and removing listeners for
     * {@link ContextClickEvent ContextClickEvents}.
     */
ContextClickEvent (/server/src/main/java/com/vaadin/event/ContextClickEvent.java)/**
 * Context click event fired by a {@link Component}. ContextClickEvent happens
 * when context click happens on the client-side inside the Component.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
AcceptAll (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/AcceptAll.java)/**
 * Criterion that accepts all drops anywhere on the component.
 * <p>
 * Note! Class is singleton, use {@link #get()} method to get the instance.
 *
 *
 * @since 6.3
 *
 */
AcceptCriterion (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/AcceptCriterion.java)/**
 * Criterion that can be used create policy to accept/discard dragged content
 * (presented by {@link Transferable}).
 *
 * The drag and drop mechanism will verify the criteria returned by
 * {@link DropHandler#getAcceptCriterion()} before calling
 * {@link DropHandler#drop(DragAndDropEvent)}.
 *
 * The criteria can be evaluated either on the client (browser - see
 * {@link ClientSideCriterion}) or on the server (see
 * {@link ServerSideCriterion}). If no constraints are needed, an
 * {@link AcceptAll} can be used.
 *
 * In addition to accepting or rejecting a possible drop, criteria can provide
 * additional hints for client side painting.
 *
 * @see DropHandler
 * @see ClientSideCriterion
 * @see ServerSideCriterion
 *
 * @since 6.3
 */
And (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/And.java)/**
 * A compound criterion that accepts the drag if all of its criteria accepts the
 * drag.
 *
 * @see Or
 *
 * @since 6.3
 *
 */
ClientSideCriterion (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/ClientSideCriterion.java)/**
 * Parent class for criteria that can be completely validated on client side.
 * All classes that provide criteria that can be completely validated on client
 * side should extend this class.
 *
 * It is recommended that subclasses of ClientSideCriterion re-validate the
 * condition on the server side in
 * {@link AcceptCriterion#accept(com.vaadin.event.dd.DragAndDropEvent)} after
 * the client side validation has accepted a transfer.
 *
 * @since 6.3
 */
ContainsDataFlavor (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/ContainsDataFlavor.java)/**
 * A Criterion that checks whether {@link Transferable} contains given data
 * flavor. The developer might for example accept the incoming data only if it
 * contains "Url" or "Text".
 *
 * @since 6.3
 */
Not (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/Not.java)/**
 * Criterion that wraps another criterion and inverts its return value.
 *
 * @since 6.3
 *
 */
Or (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/Or.java)/**
 * A compound criterion that accepts the drag if any of its criterion accepts
 * it.
 *
 * @see And
 *
 * @since 6.3
 *
 */
ServerSideCriterion (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/ServerSideCriterion.java)/**
 * Parent class for criteria which are verified on the server side during a drag
 * operation to accept/discard dragged content (presented by
 * {@link Transferable}).
 * <p>
 * Subclasses should implement the
 * {@link AcceptCriterion#accept(com.vaadin.event.dd.DragAndDropEvent)} method.
 * <p>
 * As all server side state can be used to make a decision, this is more
 * flexible than {@link ClientSideCriterion}. However, this does require
 * additional requests from the browser to the server during a drag operation.
 *
 * @see AcceptCriterion
 * @see ClientSideCriterion
 *
 * @since 6.3
 */
SourceIs (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/SourceIs.java)/**
 * Client side criteria that checks if the drag source is one of the given
 * components.
 *
 * @since 6.3
 */
SourceIsTarget (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/SourceIsTarget.java)/**
 *
 * A criterion that ensures the drag source is the same as drop target. E.g.
 * {code Tree} or {@code Table} could support only re-ordering of items, but no
 * {@link Transferable}s coming outside.
 * <p>
 * Note! Class is singleton, use {@link #get()} method to get the instance.
 *
 * @since 6.3
 *
 */
TargetDetailIs (/server/src/main/java/com/vaadin/event/dd/acceptcriteria/TargetDetailIs.java)/**
 * Criterion for checking if drop target details contains the specific property
 * with the specific value. Currently only String values are supported.
 *
 * @since 6.3
 *
 *        TODO add support for other basic data types that we support in UIDL.
 *
 */
DragAndDropEvent (/server/src/main/java/com/vaadin/event/dd/DragAndDropEvent.java)/**
 * DragAndDropEvent wraps information related to drag and drop operation. It is
 * passed by terminal implementation for
 * {@link DropHandler#drop(DragAndDropEvent)} and
 * {@link AcceptCriterion#accept(DragAndDropEvent)} methods.
 * <p>
 * DragAndDropEvent instances contains both the dragged data in
 * {@link Transferable} (generated by {@link DragSource} and details about the
 * current drop event in {@link TargetDetails} (generated by {@link DropTarget}.
 *
 * @since 6.3
 * @deprecated Replaced in 8.1 by {@link DropEvent}
 */
DragSource (/server/src/main/java/com/vaadin/event/dd/DragSource.java)/**
 * DragSource is a {@link Component} that builds a {@link Transferable} for a
 * drag and drop operation.
 * <p>
 * In Vaadin the drag and drop operation practically starts from client side
 * component. The client side component initially defines the data that will be
 * present in {@link Transferable} object on server side. If the server side
 * counterpart of the component implements this interface, terminal
 * implementation lets it create the {@link Transferable} instance from the raw
 * client side "seed data". This way server side implementation may translate or
 * extend the data that will be available for {@link DropHandler}.
 *
 * @since 6.3
 * @deprecated Replaced in 8.1 by {@link DragSourceExtension}
 */
DropHandler (/server/src/main/java/com/vaadin/event/dd/DropHandler.java)/**
 * DropHandlers contain the actual business logic for drag and drop operations.
 * <p>
 * The {@link #drop(DragAndDropEvent)} method is used to receive the transferred
 * data and the {@link #getAcceptCriterion()} method contains the (possibly
 * client side verifiable) criterion whether the dragged data will be handled at
 * all.
 *
 * @since 6.3
 * @deprecated Replaced in 8.1 by {@link DropListener}
 */
DropTarget (/server/src/main/java/com/vaadin/event/dd/DropTarget.java)/**
 * DropTarget is an interface for components supporting drop operations. A
 * component that wants to receive drop events should implement this interface
 * and provide a {@link DropHandler} which will handle the actual drop event.
 *
 * @since 6.3
 * @deprecated Replaced in 8.1 by {@link DropTargetExtension}.
 */
TargetDetails (/server/src/main/java/com/vaadin/event/dd/TargetDetails.java)/**
 * TargetDetails wraps drop target related information about
 * {@link DragAndDropEvent}.
 * <p>
 * When a TargetDetails object is used in {@link DropHandler} it is often
 * preferable to cast the TargetDetails to an implementation provided by
 * DropTarget like {@code TreeTargetDetails}. They often provide a better typed,
 * drop target specific API.
 *
 * @since 6.3
 * @deprecated Replaced in 8.1 by {@link DropEvent#getTransferData(String)}
 */
TargetDetailsImpl (/server/src/main/java/com/vaadin/event/dd/TargetDetailsImpl.java)/**
 * A HashMap backed implementation of {@link TargetDetails} for terminal
 * implementation and for extension.
 *
 * @since 6.3
 * @deprecated Replaced in 8.1 by {@link DropEvent#getTransferData(String)}
 */
EventRouter (/server/src/main/java/com/vaadin/event/EventRouter.java)/**
 * <code>EventRouter</code> class implementing the inheritable event listening
 * model. For more information on the event model see the
 * {@link com.vaadin.event package documentation}.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
ExpandListener (/server/src/main/java/com/vaadin/event/ExpandEvent.java)/**
     * Item expand event listener.
     *
     * @param <T>
     *            the expanded item's type
     * @since 8.1
     */
ExpandEvent (/server/src/main/java/com/vaadin/event/ExpandEvent.java)/**
 * An event that is fired when an item is expanded in a listing component that
 * displays hierarchical data.
 *
 * @author Vaadin Ltd
 * @since 8.1
 * @param <T>
 *            the expanded item's type
 */
FocusNotifier (/server/src/main/java/com/vaadin/event/FieldEvents.java)/**
     * The interface for adding and removing <code>FocusEvent</code> listeners.
     * By implementing this interface a class explicitly announces that it will
     * generate a <code>FocusEvent</code> when it receives keyboard focus.
     *
     * @since 6.2
     * @see FocusListener
     * @see FocusEvent
     */
BlurNotifier (/server/src/main/java/com/vaadin/event/FieldEvents.java)/**
     * The interface for adding and removing <code>BlurEvent</code> listeners.
     * By implementing this interface a class explicitly announces that it will
     * generate a <code>BlurEvent</code> when it loses keyboard focus.
     *
     * @since 6.2
     * @see BlurListener
     * @see BlurEvent
     */
FocusEvent (/server/src/main/java/com/vaadin/event/FieldEvents.java)/**
     * <code>FocusEvent</code> class for holding additional event information.
     * Fired when a <code>Field</code> receives keyboard focus.
     *
     * @since 6.2
     */
FocusListener (/server/src/main/java/com/vaadin/event/FieldEvents.java)/**
     * <code>FocusListener</code> interface for listening for
     * <code>FocusEvent</code> fired by a <code>Field</code>.
     *
     * @see FocusEvent
     * @since 6.2
     */
BlurEvent (/server/src/main/java/com/vaadin/event/FieldEvents.java)/**
     * <code>BlurEvent</code> class for holding additional event information.
     * Fired when a <code>Field</code> loses keyboard focus.
     *
     * @since 6.2
     */
BlurListener (/server/src/main/java/com/vaadin/event/FieldEvents.java)/**
     * <code>BlurListener</code> interface for listening for
     * <code>BlurEvent</code> fired by a <code>Field</code>.
     *
     * @see BlurEvent
     * @since 6.2
     */
FocusAndBlurServerRpcDecorator (/server/src/main/java/com/vaadin/event/FieldEvents.java)/**
     * Focus and blur server RPC implementation which fires focus or blur event
     * using a provided event handler.
     *
     * @author Vaadin Ltd
     * @since 8.0
     */
FieldEvents (/server/src/main/java/com/vaadin/event/FieldEvents.java)/**
 * Interface that serves as a wrapper for focus and blur events.
 */
FocusShortcut (/server/src/main/java/com/vaadin/event/FocusShortcut.java)/**
 * A ready-made {@link ShortcutListener} that focuses the given
 * {@link Focusable} (usually a {@link Field}) when the keyboard shortcut is
 * invoked.
 *
 * @author Vaadin Ltd
 * @since 8.7
 */
HasUserOriginated (/server/src/main/java/com/vaadin/event/HasUserOriginated.java)/**
 * Marker for events which provides information of the event origin.
 *
 * @since 8.1
 */
LayoutClickNotifier (/server/src/main/java/com/vaadin/event/LayoutEvents.java)/**
     * The interface for adding and removing <code>LayoutClickEvent</code>
     * listeners. By implementing this interface a class explicitly announces
     * that it will generate a <code>LayoutClickEvent</code> when a component
     * inside it is clicked and a <code>LayoutClickListener</code> is
     * registered.
     * <p>
     * Note: The general Java convention is not to explicitly declare that a
     * class generates events, but to directly define the
     * <code>addListener</code> and <code>removeListener</code> methods. That
     * way the caller of these methods has no real way of finding out if the
     * class really will send the events, or if it just defines the methods to
     * be able to implement an interface.
     * </p>
     *
     * @since 6.5.2
     * @see LayoutClickListener
     * @see LayoutClickEvent
     */
LayoutClickEvent (/server/src/main/java/com/vaadin/event/LayoutEvents.java)/**
     * An event fired when the layout has been clicked. The event contains
     * information about the target layout (component) and the child component
     * that was clicked. If no child component was found it is set to null.
     */
MethodException (/server/src/main/java/com/vaadin/event/ListenerMethod.java)/**
     * Exception that wraps an exception thrown by an invoked method. When
     * <code>ListenerMethod</code> invokes the target method, it may throw
     * arbitrary exception. The original exception is wrapped into
     * MethodException instance and rethrown by the <code>ListenerMethod</code>.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ListenerMethod (/server/src/main/java/com/vaadin/event/ListenerMethod.java)/**
 * <p>
 * One registered event listener. This class contains the listener object
 * reference, listened event type, the trigger method to call when the event
 * fires, and the optional argument list to pass to the method and the index of
 * the argument to replace with the event object.
 * </p>
 *
 * <p>
 * This Class provides several constructors that allow omission of the optional
 * arguments, and giving the listener method directly, or having the constructor
 * to reflect it using merely the name of the method.
 * </p>
 *
 * <p>
 * It should be pointed out that the method
 * {@link #receiveEvent(EventObject event)} is the one that filters out the
 * events that do not match with the given event type and thus do not result in
 * calling of the trigger method.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
MarkedAsDirtyConnectorEvent (/server/src/main/java/com/vaadin/event/MarkedAsDirtyConnectorEvent.java)/**
 * Event which is fired for all registered MarkDirtyListeners when a connector
 * is marked as dirty.
 *
 * @since 8.4
 */
MarkedAsDirtyListener (/server/src/main/java/com/vaadin/event/MarkedAsDirtyListener.java)/**
 * An interface used for listening to marked as dirty events.
 *
 * @since 8.4
 */
MethodEventSource (/server/src/main/java/com/vaadin/event/MethodEventSource.java)/**
 * <p>
 * Interface for classes supporting registration of methods as event receivers.
 * </p>
 *
 * <p>
 * For more information on the inheritable event mechanism see the
 * {@link com.vaadin.event com.vaadin.event package documentation}.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
ClickEvent (/server/src/main/java/com/vaadin/event/MouseEvents.java)/**
     * Class for holding information about a mouse click event. A
     * {@link ClickEvent} is fired when the user clicks on a
     * <code>Component</code>.
     *
     * The information available for click events are terminal dependent.
     * Correct values for all event details cannot be guaranteed.
     *
     * @author Vaadin Ltd.
     * @see ClickListener
     * @since 6.2
     */
ClickListener (/server/src/main/java/com/vaadin/event/MouseEvents.java)/**
     * Interface for listening for a {@link ClickEvent} fired by a
     * {@link Component}.
     *
     * @see ClickEvent
     * @author Vaadin Ltd.
     * @since 6.2
     */
DoubleClickEvent (/server/src/main/java/com/vaadin/event/MouseEvents.java)/**
     * Class for holding additional event information for DoubleClick events.
     * Fired when the user double-clicks on a <code>Component</code>.
     *
     * @see ClickEvent
     * @author Vaadin Ltd.
     * @since 6.2
     */
DoubleClickListener (/server/src/main/java/com/vaadin/event/MouseEvents.java)/**
     * Interface for listening for a {@link DoubleClickEvent} fired by a
     * {@link Component}.
     *
     * @see DoubleClickEvent
     * @author Vaadin Ltd.
     * @since 6.2
     */
MouseEvents (/server/src/main/java/com/vaadin/event/MouseEvents.java)/**
 * Interface that serves as a wrapper for mouse related events.
 *
 * @author Vaadin Ltd.
 * @see ClickListener
 * @since 6.2
 */
MultiSelectionEvent (/server/src/main/java/com/vaadin/event/selection/MultiSelectionEvent.java)/**
 * Event fired when the the selection changes in a
 * {@link com.vaadin.data.SelectionModel.Multi}.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @param <T>
 *            the data type of the selection model
 */
MultiSelectionListener (/server/src/main/java/com/vaadin/event/selection/MultiSelectionListener.java)/**
 * A listener for listening for selection changes from a multiselection
 * component.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @param <T>
 *            the type of the selected item
 *
 * @see com.vaadin.data.SelectionModel.Multi
 * @see MultiSelectionEvent
 */
SelectionEvent (/server/src/main/java/com/vaadin/event/selection/SelectionEvent.java)/**
 * A selection event that unifies the way to access to selection event for multi
 * selection and single selection components (in case when only one selected
 * item is required).
 *
 * @since 8.0
 * @author Vaadin Ltd
 * @param <T>
 *            the data type of the selection model
 */
SelectionListener (/server/src/main/java/com/vaadin/event/selection/SelectionListener.java)/**
 * A listener for {@code SelectionEvent}.
 * <p>
 * This is a generic listener for both type of selections, single and
 * multiselect.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the type of the selected item
 *
 * @see SelectionEvent
 *
 * @since 8.0
 */
SingleSelectionEvent (/server/src/main/java/com/vaadin/event/selection/SingleSelectionEvent.java)/**
 * Fired when the selection changes in a listing component.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the type of the selected item
 * @since 8.0
 */
SingleSelectionListener (/server/src/main/java/com/vaadin/event/selection/SingleSelectionListener.java)/**
 * A listener for listening to selection changes on a single selection
 * component.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 *
 * @param <T>
 *            the type of the selected item
 *
 * @see com.vaadin.data.SelectionModel.Single SelectionModel.Single
 * @see SingleSelectionEvent
 */
SerializableEventListener (/server/src/main/java/com/vaadin/event/SerializableEventListener.java)/**
 * Event listener interface that is serializable.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
KeyCode (/server/src/main/java/com/vaadin/event/ShortcutAction.java)/**
     * Key codes that can be used for shortcuts.
     *
     */
ModifierKey (/server/src/main/java/com/vaadin/event/ShortcutAction.java)/**
     * Modifier key constants.
     *
     */
ShortcutAction (/server/src/main/java/com/vaadin/event/ShortcutAction.java)/**
 * Shortcuts are a special type of {@link Action}s used to create keyboard
 * shortcuts.
 * <p>
 * The ShortcutAction is triggered when the user presses a given key in
 * combination with the (optional) given modifier keys.
 * </p>
 * <p>
 * ShortcutActions can be global (by attaching to the {@link Window}), or
 * attached to different parts of the UI so that a specific shortcut is only
 * valid in part of the UI. For instance, one can attach shortcuts to a specific
 * {@link Panel} - look for {@link ComponentContainer}s implementing
 * {@link Handler Action.Handler} or {@link Notifier Action.Notifier}.
 * </p>
 * <p>
 * ShortcutActions have a caption that may be used to display the shortcut
 * visually. This allows the ShortcutAction to be used as a plain Action while
 * still reacting to a keyboard shortcut. Note that this functionality is not
 * very well supported yet, but it might still be a good idea to give a caption
 * to the shortcut.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 4.0.1
 */
SortListener (/server/src/main/java/com/vaadin/event/SortEvent.java)/**
     * Listener for sort order change events.
     *
     * @param <T>
     *            the type of the sorting information
     */
SortNotifier (/server/src/main/java/com/vaadin/event/SortEvent.java)/**
     * The interface for adding and removing listeners for {@link SortEvent
     * SortEvents}.
     *
     * @param <T>
     *            the type of the sorting information
     */
SortEvent (/server/src/main/java/com/vaadin/event/SortEvent.java)/**
 * Event describing a change in sorting of a {@link DataProvider}. Fired by
 * {@link SortNotifier SortNotifiers}.
 *
 * @see SortListener
 * @see SortOrder
 * @param <T>
 *            the type of the sorting information
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
Transferable (/server/src/main/java/com/vaadin/event/Transferable.java)/**
 * Transferable wraps the data that is to be imported into another component.
 * Currently Transferable is only used for drag and drop.
 *
 * @since 6.3
 * @deprecated Since 8.1 replaced by
 *             {@link DragSourceExtension#setTransferData(String, String)},
 *             {@link DropEvent#getTransferData(String)}.
 */
TransferableImpl (/server/src/main/java/com/vaadin/event/TransferableImpl.java)/**
 * TODO Javadoc!
 *
 * @since 6.3
 */
PollListener (/server/src/main/java/com/vaadin/event/UIEvents.java)/**
     * A {@link PollListener} receives and handles {@link PollEvent PollEvents}
     * fired by {@link PollNotifier PollNotifiers}.
     *
     * @since 7.2
     * @author Vaadin Ltd
     */
PollEvent (/server/src/main/java/com/vaadin/event/UIEvents.java)/**
     * An event that is fired whenever a client polls the server for
     * asynchronous UI updates.
     *
     * @since 7.2
     * @author Vaadin Ltd
     */
PollNotifier (/server/src/main/java/com/vaadin/event/UIEvents.java)/**
     * The interface for adding and removing {@link PollEvent} listeners.
     * <p>
     * By implementing this interface, a class publicly announces that it is
     * able to send {@link PollEvent PollEvents} whenever the client sends a
     * periodic poll message to the client, to check for asynchronous
     * server-side modifications.
     *
     * @since 7.2
     * @see UI#setPollInterval(int)
     */
UIEvents (/server/src/main/java/com/vaadin/event/UIEvents.java)/**
 * A class that contains events, listeners and handlers specific to the
 * {@link UI} class.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
NavigationStateManager (/server/src/main/java/com/vaadin/navigator/NavigationStateManager.java)/**
 * An interface for handling interaction between {@link Navigator} and the
 * browser location URI or other similar view identification and bookmarking
 * system. The state is limited to a single string because in the usual cases it
 * forms a part of a URI.
 * <p>
 * Different implementations can be created for hashbang URIs, HTML5 pushState,
 * portlet URL navigation and other similar systems.
 * <p>
 * This interface is mostly for internal use by Navigator.
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
EmptyView (/server/src/main/java/com/vaadin/navigator/Navigator.java)/**
     * Empty view component.
     */
PushStateManager (/server/src/main/java/com/vaadin/navigator/Navigator.java)/**
     * A {@link NavigationStateManager} using path info, HTML5 push state and
     * {@link PopStateEvent}s to track views and enable listening to view
     * changes. This manager can be enabled with UI annotation
     * {@link PushStateNavigation}.
     * <p>
     * The part of path after UI's "root path" (UI's path without view
     * identifier) is used as {@link View}s identifier. The rest of the path
     * after the view name can be used by the developer for extra parameters for
     * the View.
     * <p>
     * This class is mostly for internal use by Navigator, and is only public
     * and static to enable testing.
     *
     * @since 8.2
     */
UriFragmentManager (/server/src/main/java/com/vaadin/navigator/Navigator.java)/**
     * A {@link NavigationStateManager} using hashbang fragments in the Page
     * location URI to track views and enable listening to view changes.
     * <p>
     * A hashbang URI is one where the optional fragment or "hash" part - the
     * part following a # sign - is used to encode navigation state in a web
     * application. The advantage of this is that the fragment can be
     * dynamically manipulated by javascript without causing page reloads.
     * <p>
     * This class is mostly for internal use by Navigator, and is only public
     * and static to enable testing.
     * <p>
     * <strong>Note:</strong> Since 8.2 you can use {@link PushStateManager},
     * which is based on HTML5 History API. To use it, add
     * {@link PushStateNavigation} annotation to the UI.
     */
ComponentContainerViewDisplay (/server/src/main/java/com/vaadin/navigator/Navigator.java)/**
     * A ViewDisplay that replaces the contents of a {@link ComponentContainer}
     * with the active {@link View}.
     * <p>
     * All components of the container are removed before adding the new view to
     * it.
     * <p>
     * This display only supports views that are {@link Component}s themselves.
     * Attempting to display a view that is not a component causes an exception
     * to be thrown.
     */
SingleComponentContainerViewDisplay (/server/src/main/java/com/vaadin/navigator/Navigator.java)/**
     * A ViewDisplay that replaces the contents of a
     * {@link SingleComponentContainer} with the active {@link View}.
     * <p>
     * This display only supports views that are {@link Component}s themselves.
     * Attempting to display a view that is not a component causes an exception
     * to be thrown.
     */
StaticViewProvider (/server/src/main/java/com/vaadin/navigator/Navigator.java)/**
     * A ViewProvider which supports mapping a single view name to a single
     * pre-initialized view instance.
     *
     * For most cases, ClassBasedViewProvider should be used instead of this.
     */
ClassBasedViewProvider (/server/src/main/java/com/vaadin/navigator/Navigator.java)/**
     * A ViewProvider which maps a single view name to a class to instantiate
     * for the view.
     * <p>
     * Note that the view class must be accessible by the class loader used by
     * the provider. This may require its visibility to be public.
     * <p>
     * This class is primarily for internal use by {@link Navigator}.
     */
Navigator (/server/src/main/java/com/vaadin/navigator/Navigator.java)/**
 * A navigator utility that allows switching of views in a part of an
 * application.
 * <p>
 * The view switching can be based e.g. on URI fragments containing the view
 * name and parameters to the view. There are two types of parameters for views:
 * an optional parameter string that is included in the fragment (may be
 * bookmarkable).
 * <p>
 * Views can be explicitly registered or dynamically generated and listening to
 * view changes is possible.
 * <p>
 * Note that {@link Navigator} is not a component itself but uses a
 * {@link ViewDisplay} to update contents based on the state.
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
View (/server/src/main/java/com/vaadin/navigator/View.java)/**
 * Interface for all views controlled by the navigator.
 *
 * Each view added to the navigator must implement this interface. Typically, a
 * view is a {@link Component}, if it is not then you should override
 * {@link #getViewComponent()} to define the component to show for the view.
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
ViewBeforeLeaveEvent (/server/src/main/java/com/vaadin/navigator/ViewBeforeLeaveEvent.java)/**
 * Event sent to the View instance before navigating away from it.
 * <p>
 * Provides a {@link #navigate()} method which must be called for the navigation
 * to take place.
 *
 * @since 8.1
 */
ViewChangeEvent (/server/src/main/java/com/vaadin/navigator/ViewChangeListener.java)/**
     * Event received by the listener for attempted and executed view changes.
     */
ViewChangeListener (/server/src/main/java/com/vaadin/navigator/ViewChangeListener.java)/**
 * Interface for listening to View changes before and after they occur.
 * <p>
 * Implementations of this interface can also block navigation between views
 * before it is performed (using {@link #beforeViewChange(ViewChangeEvent)}).
 * <p>
 * The interface contains two methods {@link #beforeViewChange(ViewChangeEvent)}
 * and {@link #afterViewChange(ViewChangeEvent)}. The latter one has default
 * empty implementation.
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
ViewDisplay (/server/src/main/java/com/vaadin/navigator/ViewDisplay.java)/**
 * Interface for displaying a view in an appropriate location.
 *
 * The view display can be a component/layout itself or can modify a separate
 * layout.
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
ViewLeaveAction (/server/src/main/java/com/vaadin/navigator/ViewLeaveAction.java)/**
 * An action to execute when navigating away from a view.
 *
 * @since 8.1
 */
ViewProvider (/server/src/main/java/com/vaadin/navigator/ViewProvider.java)/**
 * A provider for view instances that can return pre-registered views or
 * dynamically create new views.
 *
 * If multiple providers are used, {@link #getViewName(String)} of each is
 * called (in registration order) until one of them returns a non-null value.
 * The {@link #getView(String)} method of that provider is then used.
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
AbstractClientConnector (/server/src/main/java/com/vaadin/server/AbstractClientConnector.java)/**
 * An abstract base class for ClientConnector implementations. This class
 * provides all the basic functionality required for connectors.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
AbstractDeploymentConfiguration (/server/src/main/java/com/vaadin/server/AbstractDeploymentConfiguration.java)/**
 * An abstract base class for DeploymentConfiguration implementations. This
 * class provides default implementation for common config properties.
 *
 * @since 7.4
 *
 * @author Vaadin Ltd
 */
AbstractErrorMessage (/server/src/main/java/com/vaadin/server/AbstractErrorMessage.java)/**
 * Base class for component error messages.
 *
 * This class is used on the server side to construct the error messages to send
 * to the client.
 *
 * @since 7.0
 */
AbstractExtension (/server/src/main/java/com/vaadin/server/AbstractExtension.java)/**
 * An extension is an entity that is attached to a Component or another
 * Extension and independently communicates between client and server.
 * <p>
 * Extensions can use shared state and RPC in the same way as components.
 * <p>
 * AbstractExtension adds a mechanism for adding the extension to any Connector
 * (extend). To let the Extension determine what kind target it can be added to,
 * the extend method is declared as protected.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
AbstractJavaScriptExtension (/server/src/main/java/com/vaadin/server/AbstractJavaScriptExtension.java)/**
 * Base class for Extensions with all client-side logic implemented using
 * JavaScript.
 * <p>
 * When a new JavaScript extension is initialized in the browser, the framework
 * will look for a globally defined JavaScript function that will initialize the
 * extension. The name of the initialization function is formed by replacing .
 * with _ in the name of the server-side class. If no such function is defined,
 * each super class is used in turn until a match is found. The framework will
 * thus first attempt with <code>com_example_MyExtension</code> for the
 * server-side
 * <code>com.example.MyExtension extends AbstractJavaScriptExtension</code>
 * class. If MyExtension instead extends <code>com.example.SuperExtension</code>
 * , then <code>com_example_SuperExtension</code> will also be attempted if
 * <code>com_example_MyExtension</code> has not been defined.
 * <p>
 *
 * The initialization function will be called with <code>this</code> pointing to
 * a connector wrapper object providing integration to Vaadin. Please note that
 * in JavaScript, <code>this</code> is not necessarily defined inside callback
 * functions and it might therefore be necessary to assign the reference to a
 * separate variable, e.g. <code>var self = this;</code>. The following
 * functions are provided by the connector wrapper object:
 * <ul>
 * <li><code>getConnectorId()</code> - returns a string with the id of the
 * connector.</li>
 * <li><code>getParentId([connectorId])</code> - returns a string with the id of
 * the connector's parent. If <code>connectorId</code> is provided, the id of
 * the parent of the corresponding connector with the passed id is returned
 * instead.</li>
 * <li><code>getElement([connectorId])</code> - returns the DOM Element that is
 * the root of a connector's widget. <code>null</code> is returned if the
 * connector can not be found or if the connector doesn't have a widget. If
 * <code>connectorId</code> is not provided, the connector id of the current
 * connector will be used.</li>
 * <li><code>getState()</code> - returns an object corresponding to the shared
 * state defined on the server. The scheme for conversion between Java and
 * JavaScript types is described bellow.</li>
 * <li><code>registerRpc([name, ] rpcObject)</code> - registers the
 * <code>rpcObject</code> as a RPC handler. <code>rpcObject</code> should be an
 * object with field containing functions for all eligible RPC functions. If
 * <code>name</code> is provided, the RPC handler will only used for RPC calls
 * for the RPC interface with the same fully qualified Java name. If no
 * <code>name</code> is provided, the RPC handler will be used for all incoming
 * RPC invocations where the RPC method name is defined as a function field in
 * the handler. The scheme for conversion between Java types in the RPC
 * interface definition and the JavaScript values passed as arguments to the
 * handler functions is described bellow.</li>
 * <li><code>getRpcProxy([name])</code> - returns an RPC proxy object. If
 * <code>name</code> is provided, the proxy object will contain functions for
 * all methods in the RPC interface with the same fully qualified name, provided
 * a RPC handler has been registered by the server-side code. If no
 * <code>name</code> is provided, the returned RPC proxy object will contain
 * functions for all methods in all RPC interfaces registered for the connector
 * on the server. If the same method name is present in multiple registered RPC
 * interfaces, the corresponding function in the RPC proxy object will throw an
 * exception when called. The scheme for conversion between Java types in the
 * RPC interface and the JavaScript values that should be passed to the
 * functions is described bellow.</li>
 * <li><code>translateVaadinUri(uri)</code> - Translates a Vaadin URI to a URL
 * that can be used in the browser. This is just way of accessing
 * {@link com.vaadin.client.ApplicationConnection#translateVaadinUri(String)}</li>
 * </ul>
 * The connector wrapper also supports these special functions:
 * <ul>
 * <li><code>onStateChange</code> - If the JavaScript code assigns a function to
 * the field, that function is called whenever the contents of the shared state
 * is changed.</li>
 * <li><code>onUnregister</code> - If the JavaScript code assigns a function to
 * the field, that function is called when the connector has been
 * unregistered.</li>
 * <li>Any field name corresponding to a call to
 * {@link #addFunction(String, JavaScriptFunction)} on the server will
 * automatically be present as a function that triggers the registered function
 * on the server.</li>
 * <li>Any field name referred to using {@link #callFunction(String, Object...)}
 * on the server will be called if a function has been assigned to the
 * field.</li>
 * </ul>
 * <p>
 *
 * Values in the Shared State and in RPC calls are converted between Java and
 * JavaScript using the following conventions:
 * <ul>
 * <li>Primitive Java numbers (byte, char, int, long, float, double) and their
 * boxed types (Byte, Character, Integer, Long, Float, Double) are represented
 * by JavaScript numbers.</li>
 * <li>The primitive Java boolean and the boxed Boolean are represented by
 * JavaScript booleans.</li>
 * <li>Java Strings are represented by JavaScript strings.</li>
 * <li>Java Dates are represented by JavaScript numbers containing the timestamp
 * </li>
 * <li>List, Set and all arrays in Java are represented by JavaScript
 * arrays.</li>
 * <li>Map&lt;String, ?&gt; in Java is represented by JavaScript object with
 * fields corresponding to the map keys.</li>
 * <li>Any other Java Map is represented by a JavaScript array containing two
 * arrays, the first contains the keys and the second contains the values in the
 * same order.</li>
 * <li>A Java Bean is represented by a JavaScript object with fields
 * corresponding to the bean's properties.</li>
 * <li>A Java Connector is represented by a JavaScript string containing the
 * connector's id.</li>
 * <li>A pluggable serialization mechanism is provided for types not described
 * here. Please refer to the documentation for specific types for serialization
 * information.</li>
 * </ul>
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
BootstrapFragmentResponse (/server/src/main/java/com/vaadin/server/BootstrapFragmentResponse.java)/**
 * A representation of a bootstrap fragment being generated. The bootstrap
 * fragment is the HTML code that will make up the actual application. This also
 * includes the JavaScript that initializes the application.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
BootstrapContext (/server/src/main/java/com/vaadin/server/BootstrapHandler.java)/**
     * Provides context information for the bootstrap process.
     */
BootstrapUriResolver (/server/src/main/java/com/vaadin/server/BootstrapHandler.java)/**
     * The URI resolver used in the bootstrap process.
     *
     * @since 8.1
     */
BootstrapHandler (/server/src/main/java/com/vaadin/server/BootstrapHandler.java)/**
 * Handles the initial request to start the application.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 * @deprecated As of 7.0. Will likely change or be removed in a future version
 */
BootstrapListener (/server/src/main/java/com/vaadin/server/BootstrapListener.java)/**
 * Event listener notified when the bootstrap HTML is about to be generated and
 * send to the client. The bootstrap HTML is first constructed as an in-memory
 * DOM representation which registered listeners can modify before the final
 * HTML is generated.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
BootstrapPageResponse (/server/src/main/java/com/vaadin/server/BootstrapPageResponse.java)/**
 * A representation of a bootstrap page being generated. The bootstrap page
 * contains of the full DOM of the HTML document as well as the HTTP headers
 * that will be included in the corresponding HTTP response.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
BootstrapResponse (/server/src/main/java/com/vaadin/server/BootstrapResponse.java)/**
 * Base class providing common functionality used in different bootstrap
 * modification events.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
BrowserWindowOpener (/server/src/main/java/com/vaadin/server/BrowserWindowOpener.java)/**
 * Component extension that opens a browser popup window when the extended
 * component is clicked.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ClassResource (/server/src/main/java/com/vaadin/server/ClassResource.java)/**
 * <code>ClassResource</code> is a named resource accessed with the class
 * loader.
 *
 * This can be used to access resources such as icons, files, etc.
 *
 * @see java.lang.Class#getResource(java.lang.String)
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
AttachEvent (/server/src/main/java/com/vaadin/server/ClientConnector.java)/**
     * Event fired after a connector is attached to the application.
     */
AttachListener (/server/src/main/java/com/vaadin/server/ClientConnector.java)/**
     * Interface for listening {@link AttachEvent connector attach events}.
     *
     */
DetachEvent (/server/src/main/java/com/vaadin/server/ClientConnector.java)/**
     * Event fired before a connector is detached from the application.
     */
DetachListener (/server/src/main/java/com/vaadin/server/ClientConnector.java)/**
     * Interface for listening {@link DetachEvent connector detach events}.
     *
     */
ConnectorErrorEvent (/server/src/main/java/com/vaadin/server/ClientConnector.java)/**
     * An error event for connector related errors. Use {@link #getConnector()}
     * to find the connector where the error occurred.
     */
ClientConnector (/server/src/main/java/com/vaadin/server/ClientConnector.java)/**
 * Interface implemented by all connectors that are capable of communicating
 * with the client side.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 */
ClientMethodInvocation (/server/src/main/java/com/vaadin/server/ClientMethodInvocation.java)/**
 * Internal class for keeping track of pending server to client method
 * invocations for a Connector.
 *
 * @since 7.0
 */
AbstractStreamingEvent (/server/src/main/java/com/vaadin/server/communication/AbstractStreamingEvent.java)/**
 * Abstract base class for StreamingEvent implementations.
 */
FragmentedMessage (/server/src/main/java/com/vaadin/server/communication/AtmospherePushConnection.java)/**
     * Represents a message that can arrive as multiple fragments.
     */
AtmospherePushConnection (/server/src/main/java/com/vaadin/server/communication/AtmospherePushConnection.java)/**
 * A {@link PushConnection} implementation using the Atmosphere push support
 * that is by default included in Vaadin.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
ClientRpcWriter (/server/src/main/java/com/vaadin/server/communication/ClientRpcWriter.java)/**
 * Serializes {@link ClientRpc client RPC} invocations to JSON.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
ConnectorHierarchyWriter (/server/src/main/java/com/vaadin/server/communication/ConnectorHierarchyWriter.java)/**
 * Serializes a connector hierarchy to JSON.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
ConnectorTypeWriter (/server/src/main/java/com/vaadin/server/communication/ConnectorTypeWriter.java)/**
 * Serializes connector type mappings to JSON.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
DateSerializer (/server/src/main/java/com/vaadin/server/communication/DateSerializer.java)/**
 * Server side serializer/deserializer for java.util.Date.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
SimpleMultiPartInputStream (/server/src/main/java/com/vaadin/server/communication/FileUploadHandler.java)/**
     * Stream that extracts content from another stream until the boundary
     * string is encountered.
     *
     * Public only for unit tests, should be considered private for all other
     * purposes.
     */
UploadInterruptedException (/server/src/main/java/com/vaadin/server/communication/FileUploadHandler.java)/**
     * An UploadInterruptedException will be thrown by an ongoing upload if
     * {@link StreamVariable#isInterrupted()} returns <code>true</code>.
     *
     * By checking the exception of an {@link StreamingErrorEvent} or
     * {@link FailedEvent} against this class, it is possible to determine if an
     * upload was interrupted by code or aborted due to any other exception.
     */
FileUploadHandler (/server/src/main/java/com/vaadin/server/communication/FileUploadHandler.java)/**
 * Handles a file upload request submitted via an Upload component.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
HeartbeatHandler (/server/src/main/java/com/vaadin/server/communication/HeartbeatHandler.java)/**
 * Handles heartbeat requests. Heartbeat requests are periodically sent by the
 * client-side to inform the server that the UI sending the heartbeat is still
 * alive (the browser window is open, the connection is up) even when there are
 * no UIDL requests for a prolonged period of time. UIs that do not receive
 * either heartbeat or UIDL requests are eventually removed from the session and
 * garbage collected.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
JSONSerializer (/server/src/main/java/com/vaadin/server/communication/JSONSerializer.java)/**
 * Implementors of this interface knows how to serialize an Object of a given
 * type to JSON and how to deserialize the JSON back into an object.
 * <p>
 * The {@link #serialize(Object, ConnectorTracker)} and
 * {@link #deserialize(Type, JsonValue, ConnectorTracker)} methods must be
 * symmetric so they can be chained and produce the original result (or an equal
 * result).
 * <p>
 * Each {@link JSONSerializer} implementation can handle an object of a single
 * type.
 * <p>
 * This is the server side interface, see
 * com.vaadin.client.communication.JSONSerializer for the client side interface.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
FakeServletConfig (/server/src/main/java/com/vaadin/server/communication/JSR356WebsocketInitializer.java)/**
     * "ServletConfig" which only provides information from a
     * {@link ServletRegistration} and its {@link ServletContext}.
     */
JSR356WebsocketInitializer (/server/src/main/java/com/vaadin/server/communication/JSR356WebsocketInitializer.java)/**
 * Initializer class for JSR 356 websockets.
 * <p>
 * Websocket specification says that initialization of websocket end points
 * should be done in the servlet context initialization phase. Some servers
 * implement this strictly so that end points cannot be registered after the
 * context initialization phase.
 * <p>
 * Note that {@link WebListener} is Servlet 3.0 API so this will not be run for
 * older servers (unless added to web.xml), but these servers do not support JSR
 * 356 websockets either.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
LegacyUidlWriter (/server/src/main/java/com/vaadin/server/communication/LegacyUidlWriter.java)/**
 * Serializes legacy UIDL changes to JSON.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
MetadataWriter (/server/src/main/java/com/vaadin/server/communication/MetadataWriter.java)/**
 * Serializes miscellaneous metadata to JSON.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
PortletDummyRequestHandler (/server/src/main/java/com/vaadin/server/communication/PortletDummyRequestHandler.java)/**
 * Request handler which provides a dummy HTML response to any resource request
 * with the resource id DUMMY.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
PortletListenerNotifier (/server/src/main/java/com/vaadin/server/communication/PortletListenerNotifier.java)/**
 * Notifies {@link PortletListener}s of a received portlet request.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
PortletStateAwareRequestHandler (/server/src/main/java/com/vaadin/server/communication/PortletStateAwareRequestHandler.java)/**
 * Handler which ensures that Action and Event requests are marked as handled
 * and do not cause a 404 to be sent.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
PublishedFileHandler (/server/src/main/java/com/vaadin/server/communication/PublishedFileHandler.java)/**
 * Serves a connector resource from the classpath if the resource has previously
 * been registered by calling
 * {@link LegacyCommunicationManager#registerDependency(String, Class)}. Sending
 * arbitrary files from the classpath is prevented by only accepting resource
 * names that have explicitly been registered. Resources can currently only be
 * registered by including a {@link JavaScript} or {@link StyleSheet} annotation
 * on a Connector class.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
PushAtmosphereHandler (/server/src/main/java/com/vaadin/server/communication/PushAtmosphereHandler.java)/**
 * Handles Atmosphere requests and forwards them to logical methods in
 * {@link PushHandler}.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
PushConnection (/server/src/main/java/com/vaadin/server/communication/PushConnection.java)/**
 * Represents a bidirectional ("push") connection between a single UI and its
 * client-side. A single {@code PushConnection} instance is bound to a UI as
 * long as push is enabled in that UI, even if the actual connection is
 * momentarily dropped either due to a network failure or as a normal part of
 * the transport mechanism.
 * <p>
 * This interface is an internal API, only meant to be used by the framework.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
PushEventCallback (/server/src/main/java/com/vaadin/server/communication/PushHandler.java)/**
     * Callback interface used internally to process an event with the
     * corresponding UI properly locked.
     */
PushHandler (/server/src/main/java/com/vaadin/server/communication/PushHandler.java)/**
 * Handles incoming push connections and messages and dispatches them to the
 * correct {@link UI}/ {@link AtmospherePushConnection}.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
PushRequestHandler (/server/src/main/java/com/vaadin/server/communication/PushRequestHandler.java)/**
 * Handles requests to open a push (bidirectional) communication channel between
 * the client and the server. After the initial request, communication through
 * the push channel is managed by {@link PushAtmosphereHandler} and
 * {@link PushHandler}
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
ResourceWriter (/server/src/main/java/com/vaadin/server/communication/ResourceWriter.java)/**
 * Serializes resources to JSON. Currently only used for {@link CustomLayout}
 * templates.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
RpcRequest (/server/src/main/java/com/vaadin/server/communication/ServerRpcHandler.java)/**
     * A data transfer object representing an RPC request sent by the client
     * side.
     *
     * @since 7.2
     * @author Vaadin Ltd
     */
ServerRpcHandler (/server/src/main/java/com/vaadin/server/communication/ServerRpcHandler.java)/**
 * Handles a client-to-server message containing serialized {@link ServerRpc
 * server RPC} invocations.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
SessionRequestHandler (/server/src/main/java/com/vaadin/server/communication/SessionRequestHandler.java)/**
 * Handles a request by passing it to each registered {@link RequestHandler} in
 * the session in turn until one produces a response. This method is used for
 * requests that have not been handled by any specific functionality in the
 * servlet/portlet.
 * <p>
 * The request handlers are invoked in the reverse order in which they were
 * added to the session until a response has been produced. This means that the
 * most recently added handler is used first and the first request handler that
 * was added to the session is invoked towards the end unless any previous
 * handler has already produced a response.
 * </p>
 * <p>
 * The session is not locked during execution of the request handlers. The
 * request handler can itself decide if it needs to lock the session or not.
 * </p>
 *
 * @see VaadinSession#addRequestHandler(RequestHandler)
 * @see RequestHandler
 *
 * @since 7.1
 */
SharedStateWriter (/server/src/main/java/com/vaadin/server/communication/SharedStateWriter.java)/**
 * Serializes {@link SharedState shared state} changes to JSON.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
UidlRequestHandler (/server/src/main/java/com/vaadin/server/communication/UidlRequestHandler.java)/**
 * Processes a UIDL request from the client.
 *
 * Uses {@link ServerRpcHandler} to execute client-to-server RPC invocations and
 * {@link UidlWriter} to write state changes and client RPC calls back to the
 * client.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
UidlWriter (/server/src/main/java/com/vaadin/server/communication/UidlWriter.java)/**
 * Serializes pending server-side changes to UI state to JSON. This includes
 * shared state, client RPC invocations, connector hierarchy changes, connector
 * type information among others.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
UIInitHandler (/server/src/main/java/com/vaadin/server/communication/UIInitHandler.java)/**
 * Handles an initial request from the client to initialize a {@link UI}.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
CompositeErrorMessage (/server/src/main/java/com/vaadin/server/CompositeErrorMessage.java)/**
 * Class for combining multiple error messages together.
 *
 * @author Vaadin Ltd
 * @since 3.0
 */
ConnectorIdGenerationEvent (/server/src/main/java/com/vaadin/server/ConnectorIdGenerationEvent.java)/**
 * Event object containing information related to connector id generation.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
ConnectorIdGenerator (/server/src/main/java/com/vaadin/server/ConnectorIdGenerator.java)/**
 * Callback for generating the id for new connectors. A generator can be
 * registered to be used with an application by overriding
 * {@link VaadinService#initConnectorIdGenerator(java.util.List)} or by calling
 * {@link ServiceInitEvent#addConnectorIdGenerator(ConnectorIdGenerator)} from a
 * {@link VaadinServiceInitListener}.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
ConnectorResource (/server/src/main/java/com/vaadin/server/ConnectorResource.java)/**
 * A resource that is served through the Connector that is using the resource.
 *
 * @see AbstractClientConnector#setResource(String, Resource)
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
Constants (/server/src/main/java/com/vaadin/server/Constants.java)/**
 * Internal constants used by both the client and the server side framework.
 *
 * @since 6.2
 *
 */
DefaultDeploymentConfiguration (/server/src/main/java/com/vaadin/server/DefaultDeploymentConfiguration.java)/**
 * The default implementation of {@link DeploymentConfiguration} based on a base
 * class for resolving system properties and a set of init parameters.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
DefaultSystemMessagesProvider (/server/src/main/java/com/vaadin/server/DefaultSystemMessagesProvider.java)/**
 * System messages provider using the built-in default system messages. This
 * singleton is accessed using {@link #get()}.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
FilterContext (/server/src/main/java/com/vaadin/server/DependencyFilter.java)/**
     * Provides context information for the dependency filter operation.
     *
     * @since 8.1
     */
DependencyFilter (/server/src/main/java/com/vaadin/server/DependencyFilter.java)/**
 * Filter for dependencies loaded using {@link StyleSheet @StyleSheet},
 * {@link JavaScript @JavaScript} and {@link HtmlImport @HtmlImport}.
 *
 * @see ServiceInitEvent#addDependencyFilter(DependencyFilter)
 *
 * @since 8.1
 */
DeploymentConfiguration (/server/src/main/java/com/vaadin/server/DeploymentConfiguration.java)/**
 * A collection of properties configured at deploy time as well as a way of
 * accessing third party properties not explicitly supported by this class.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
DownloadStream (/server/src/main/java/com/vaadin/server/DownloadStream.java)/**
 * Downloadable stream.
 * <p>
 * Note that the methods in a DownloadStream are called without locking the
 * session to prevent locking the session during long file downloads. If your
 * DownloadStream uses anything from the session, you must handle the locking.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
DragAndDropService (/server/src/main/java/com/vaadin/server/DragAndDropService.java)/**
 *
 * @author Vaadin Ltd
 * @deprecated Since 8.1, no direct replacement, see {@link DragSourceExtension}
 *             and {@link DropTargetExtension}.
 */
ErrorEvent (/server/src/main/java/com/vaadin/server/ErrorEvent.java)/**
 * An error thrown by the framework and handled by an {@link ErrorHandler}.
 * Typically handled by {@link VaadinSession#getErrorHandler()} but can also be
 * handled by a {@link Connector} specific handler, set using
 * {@link ClientConnector#setErrorHandler(ErrorHandler)}.
 *
 */
ErrorHandler (/server/src/main/java/com/vaadin/server/ErrorHandler.java)/**
 * Interface for listening to errors in the application.
 */
ErrorHandlingRunnable (/server/src/main/java/com/vaadin/server/ErrorHandlingRunnable.java)/**
 * Defines the interface to handle exceptions thrown during the execution of a
 * FutureAccess.
 *
 * @since 7.1.8
 * @author Vaadin Ltd
 */
ErrorMessage (/server/src/main/java/com/vaadin/server/ErrorMessage.java)/**
 * Interface for rendering error messages to terminal. All the visible errors
 * shown to user must implement this interface.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
ErrorMessageProducer (/server/src/main/java/com/vaadin/server/ErrorMessageProducer.java)/**
 * Interface implemented by old Vaadin 7 exception types to produce the error
 * message to show in a component.
 *
 * @since 8.0
 */
EventTrigger (/server/src/main/java/com/vaadin/server/EventTrigger.java)/**
 * Provides support for triggering an event from a given parts of a component or
 * using various events.
 * <p>
 * Used by features such as {@link FileDownloader} and
 * {@link BrowserWindowOpener} to listen to a given event on a given element on
 * the client side. The component is the one responsible for deciding the
 * element and the event to listen to and can communicate this to the client
 * using {@link #getPartInformation()}.
 * <p>
 * This is the server side interface.
 * <p>
 * If a {@link Component} implements this interface, then the corresponding
 * connector on the client side must implement
 * {@code com.vaadin.client.extensions.EventTrigger}.
 *
 * @since 8.4
 */
Extension (/server/src/main/java/com/vaadin/server/Extension.java)/**
 * An extension is an entity that is attached to a Component or another
 * Extension and independently communicates between client and server.
 * <p>
 * An extension can only be attached once. It is not supported to move an
 * extension from one target to another.
 * <p>
 * Extensions can use shared state and RPC in the same way as components.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ExternalResource (/server/src/main/java/com/vaadin/server/ExternalResource.java)/**
 * <code>ExternalResource</code> implements source for resources fetched from
 * location specified by URL:s. The resources are fetched directly by the client
 * terminal and are not fetched through the terminal adapter.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
FileDownloader (/server/src/main/java/com/vaadin/server/FileDownloader.java)/**
 * Extension that starts a download when the extended component is clicked. This
 * is used to overcome two challenges:
 * <ul>
 * <li>Resource should be bound to a component to allow it to be garbage
 * collected when there are no longer any ways of reaching the resource.</li>
 * <li>Download should be started directly when the user clicks e.g. a Button
 * without going through a server-side click listener to avoid triggering
 * security warnings in some browsers.</li>
 * </ul>
 * <p>
 * Please note that the download will be started in an iframe, which means that
 * care should be taken to avoid serving content types that might make the
 * browser attempt to show the content using a plugin instead of downloading it.
 * Connector resources (e.g. {@link FileResource} and {@link ClassResource})
 * will automatically be served using a
 * <code>Content-Type: application/octet-stream</code> header unless
 * {@link #setOverrideContentType(boolean)} has been set to <code>false</code>
 * while files served in other ways, (e.g. {@link ExternalResource} or
 * {@link ThemeResource}) will not automatically get this treatment.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
FileResource (/server/src/main/java/com/vaadin/server/FileResource.java)/**
 * <code>FileResources</code> are files or directories on local filesystem. The
 * files and directories are served through URI:s to the client terminal and
 * thus must be registered to an URI context before they can be used. The
 * resource is automatically registered to the application when it is created.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
FontIcon (/server/src/main/java/com/vaadin/server/FontIcon.java)/**
 * A font icon is a type of icon that is made by displaying one character from a
 * specially constructed font containing icons ("icon font").
 * <p>
 * {@link FontIcon} is a custom resource type which uses the URI scheme
 * <code>fonticon://&lt;fontfamily&gt;/&lt;codepoint&gt;</code> to reference a
 * specific icon from a specific icon font. <br/>
 * </p>
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
GenericFontIcon (/server/src/main/java/com/vaadin/server/GenericFontIcon.java)/**
 * A generic implementation of {@link FontIcon} interface.
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
GlobalResourceHandler (/server/src/main/java/com/vaadin/server/GlobalResourceHandler.java)/**
 * A {@link RequestHandler} that takes care of {@link ConnectorResource}s that
 * should not be served by the connector.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
JavaScriptCallbackHelper (/server/src/main/java/com/vaadin/server/JavaScriptCallbackHelper.java)/**
 * Internal helper class used to implement functionality common to
 * {@link AbstractJavaScriptComponent} and {@link AbstractJavaScriptExtension}.
 * Corresponding support in client-side code is in
 * {@link com.vaadin.client.JavaScriptConnectorHelper}.
 * <p>
 * You should most likely no use this class directly.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
JsonCodec (/server/src/main/java/com/vaadin/server/JsonCodec.java)/**
 * Decoder for converting RPC parameters and other values from JSON in transfer
 * between the client and the server and vice versa.
 *
 * @since 7.0
 */
JsonTag (/server/src/main/java/com/vaadin/server/JsonPaintTarget.java)/**
     * This is basically a container for UI components variables, that will be
     * added at the end of JSON object.
     *
     * @author mattitahvonen
     *
     */
JsonPaintTarget (/server/src/main/java/com/vaadin/server/JsonPaintTarget.java)/**
 * User Interface Description Language Target.
 *
 * TODO document better: role of this class, UIDL format, attributes, variables,
 * etc.
 *
 * @author Vaadin Ltd.
 * @since 5.0
 */
KeyMapper (/server/src/main/java/com/vaadin/server/KeyMapper.java)/**
 * <code>KeyMapper</code> is the simple two-way map for generating textual keys
 * for objects and retrieving the objects later with the key.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
LegacyApplication (/server/src/main/java/com/vaadin/server/LegacyApplication.java)/**
 * A special application designed to help migrating applications from Vaadin 6
 * to Vaadin 7. The legacy application supports setting a main window, adding
 * additional browser level windows and defining the theme for the entire
 * application.
 *
 * @deprecated As of 7.0. This class is only intended to ease migration and
 *             should not be used for new projects.
 *
 * @since 7.0
 */
LegacyApplicationUIProvider (/server/src/main/java/com/vaadin/server/LegacyApplicationUIProvider.java)/**
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 * @deprecated As of 7.0. Used only to support LegacyApplication - will be
 *             removed when LegacyApplication support is removed.
 */
InvalidUIDLSecurityKeyException (/server/src/main/java/com/vaadin/server/LegacyCommunicationManager.java)/**
     * @deprecated As of 7.1. Will be removed in the future.
     */
ClientCache (/server/src/main/java/com/vaadin/server/LegacyCommunicationManager.java)/**
     * Helper class for terminal to keep track of data that client is expected
     * to know.
     *
     * TODO make customlayout templates (from theme) to be cached here.
     *
     * @deprecated As of 7.1. See #11410.
     */
LegacyCommunicationManager (/server/src/main/java/com/vaadin/server/LegacyCommunicationManager.java)/**
 * This is a common base class for the server-side implementations of the
 * communication system between the client code (compiled with GWT into
 * JavaScript) and the server side components. Its client side counterpart is
 * {@link com.vaadin.client.ApplicationConnection}.
 * <p>
 * TODO Document better!
 *
 * @deprecated As of 7.0. Will likely change or be removed in a future version
 */
LocaleService (/server/src/main/java/com/vaadin/server/LocaleService.java)/**
 * Server side service which handles locale and the transmission of locale date
 * to the client side LocaleService.1zaqqqqqqqqaaAa8aA8
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
BootstrapContribution (/server/src/main/java/com/vaadin/server/osgi/BootstrapContribution.java)/**
 * OSGi service component registering bootstrap JS as published resources in
 * OSGi environments.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
BrowserWindowResizeListener (/server/src/main/java/com/vaadin/server/Page.java)/**
     * Listener that gets notified when the size of the browser window
     * containing the uI has changed.
     *
     * @see #addBrowserWindowResizeListener(BrowserWindowResizeListener)
     */
BrowserWindowResizeEvent (/server/src/main/java/com/vaadin/server/Page.java)/**
     * Event that is fired when a browser window containing a uI is resized.
     */
OpenResource (/server/src/main/java/com/vaadin/server/Page.java)/**
     * Private class for storing properties related to opening resources.
     */
UriFragmentChangedListener (/server/src/main/java/com/vaadin/server/Page.java)/**
     * Listener that that gets notified when the URI fragment of the page
     * changes.
     *
     * @see Page#addUriFragmentChangedListener(UriFragmentChangedListener)
     * @deprecated Use {@link PopStateListener} instead
     */
PopStateListener (/server/src/main/java/com/vaadin/server/Page.java)/**
     * Listener that that gets notified when the URI of the page changes due to
     * back/forward functionality of the browser.
     *
     * @see Page#addPopStateListener(PopStateListener)
     * @since 8.0
     */
UriFragmentChangedEvent (/server/src/main/java/com/vaadin/server/Page.java)/**
     * Event fired when the URI fragment of a <code>Page</code> changes.
     *
     * @see Page#addUriFragmentChangedListener(UriFragmentChangedListener)
     */
PopStateEvent (/server/src/main/java/com/vaadin/server/Page.java)/**
     * Event fired when the URI of a <code>Page</code> changes (aka HTML 5
     * popstate event) on the client side due to browsers back/forward
     * functionality.
     *
     * @see Page#addPopStateListener(PopStateListener)
     * @since 8.0
     */
Styles (/server/src/main/java/com/vaadin/server/Page.java)/**
     * Contains dynamically injected styles injected in the HTML document at
     * runtime.
     *
     * @since 7.1
     */
PaintException (/server/src/main/java/com/vaadin/server/PaintException.java)/**
 * <code>PaintExcepection</code> is thrown if painting of a component fails.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
PaintTarget (/server/src/main/java/com/vaadin/server/PaintTarget.java)/**
 * This interface defines the methods for painting XML to the UIDL stream.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
RequestHandler (/server/src/main/java/com/vaadin/server/RequestHandler.java)/**
 * Handler for producing a response to HTTP requests. Handlers can be either
 * added on a {@link VaadinService service} level, common for all users, or on a
 * {@link VaadinSession session} level for only a single user.
 */
Resource (/server/src/main/java/com/vaadin/server/Resource.java)/**
 * <code>Resource</code> provided to the client terminal. Support for actually
 * displaying the resource type is left to the terminal.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
Responsive (/server/src/main/java/com/vaadin/server/Responsive.java)/**
 * An extension providing responsive layout capabilities to any Vaadin
 * component. The Responsive extension allows specifying different CSS rules for
 * different dimensions of extended components. This allows creating
 * applications that provide an optimal viewing experience – easy reading and
 * navigation with a minimum of resizing, panning, and scrolling – across a wide
 * range of devices (from mobile phones to desktop computer monitors).
 * <p>
 * NOTE! You should always specify a relative (%) size for the extended
 * component, doing otherwise will prevent the Responsive extension from
 * working, as the component will not dynamically resize.
 * </p>
 * <p>
 * All configuration of the visual breakpoints (ranges) for the component are
 * done with CSS. Pixels (px) are the only supported unit. Fractional pixels are
 * not supported.
 * </p>
 * <p>
 * <i>Dynamic style injections (e.g. through
 * <code>Page.getCurrent().getStyles().add(...)</code>) or any other style
 * updates after the initial page load are not supported at the moment.</i>
 * </p>
 *
 *
 * <p>
 * Example:
 *
 * <b>Java</b>
 *
 * <pre>
 * CssLayout layout = new CssLayout();
 * layout.setStyleName(&quot;responsive&quot;);
 * layout.setSizeFull();
 * Responsive.makeResponsive(layout);
 * </pre>
 *
 * <b>SCSS</b>
 *
 * <pre>
 * .v-csslayout.responsive {
 *   &[width-range~="0-300px"] {
 *     // Styles for the layout when its width is between 0 and 300 pixels
 *   }
 *   &[width-range~="301-500px"] {
 *     // Styles for the layout when its width is between 301 and 500 pixels
 *   }
 *   &[width-range~="501px-"] {
 *     // Styles for the layout when its width is over 500 pixels
 *   }
 *   &[height-range~="0-300px"] {
 *     // Styles for the layout when its height is between 0 and 300 pixels
 *   }
 *   &[height-range~="301-500px"] {
 *     // Styles for the layout when its height is between 301 and 500 pixels
 *   }
 *   &[height-range~="501-"] {
 *     // Styles for the layout when its height is over 500 pixels
 *   }
 * }
 * </pre>
 *
 * <b>CSS</b>
 *
 * <pre>
 * .v-csslayout.responsive[width-range~="0-300px"] {
 *    // Styles for the layout when its width is between 0 and 300 pixels
 * }
 * .v-csslayout.responsive[width-range~="301-500px"] {
 *    // Styles for the layout when its width is between 301 and 500 pixels
 * }
 * .v-csslayout.responsive[width-range~="501-"] {
 *    // Styles for the layout when its width is over 500 pixels
 * }
 *
 * .v-csslayout.responsive[height-range~="0-300px"] {
 *    // Styles for the layout when its height is between 0 and 300 pixels
 * }
 * .v-csslayout.responsive[height-range~="301-500px"] {
 *    // Styles for the layout when its height is between 301 and 500 pixels
 * }
 * .v-csslayout.responsive[height-range~="501px-"] {
 *    // Styles for the layout when its height is over 500 pixels
 * }
 * </pre>
 *
 * </p>
 * <p>
 * <b>Note:</b> <i>The defined ranges are applied on a global context, so even
 * if you would write your CSS to target only a given context, the ranges would
 * be applied to all other instances with the same style name.</i>
 * </p>
 * <p>
 * E.g. this would affect all CssLayout instances in the application, even
 * though the CSS implies it would only affect CssLayout instances inside a
 * parent with a style name "foobar":
 * </p>
 *
 * <pre>
 * .foobar .v-csslayout[width-range~="0px-100px"] {
 *    // These properties will affect all responsive CssLayout instances
 * }
 * </pre>
 *
 * <p>
 * To scope the ranges, use an additional style name for the target component,
 * and add that to your CSS selector:
 * </p>
 *
 * <pre>
 *  .v-csslayout.mystyle[width-range="0px-100px"] {
 *    // These properties will only affect responsive CssLayout instances with an additional style name of 'mystyle'
 * }
 * </pre>
 *
 * @author Vaadin Ltd
 * @since 7.2
 */
RestrictedRenderResponse (/server/src/main/java/com/vaadin/server/RestrictedRenderResponse.java)/**
 * Read-only wrapper for a {@link RenderResponse}.
 *
 * Only for use by {@link PortletApplicationContext} and
 * {@link VaadinPortletSession}.
 */
Scrollable (/server/src/main/java/com/vaadin/server/Scrollable.java)/**
 * <p>
 * This interface is implemented by all visual objects that can be scrolled
 * programmatically from the server-side. The unit of scrolling is pixel.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
SerializableBiFunction (/server/src/main/java/com/vaadin/server/SerializableBiFunction.java)/**
 * A {@link BiFunction} that is also {@link Serializable}.
 *
 * @see Function
 * @author Vaadin Ltd
 * @since 8.0
 * @param <T>
 *            the type of the the first function parameter
 * @param <U>
 *            the type of the the second function parameter
 * @param <R>
 *            the type of the result of the function
 */
SerializableBiPredicate (/server/src/main/java/com/vaadin/server/SerializableBiPredicate.java)/**
 * A {@link BiPredicate} that is also {@link Serializable}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 * @param <T>
 *            the type of the first input to the predicate
 * @param <U>
 *            the type of the second input to the predicate
 */
SerializableComparator (/server/src/main/java/com/vaadin/server/SerializableComparator.java)/**
 * A {@link Comparator} that is also {@link Serializable}.
 * <p>
 * You can create a serializable comparator from a regular comparator through a
 * method reference by appending <code>::compare</code>. For example
 * <code>SerializableComparator&lt;Employee&gt;
 * comparator = Comparator.comparing(Employee::getFirstName)::compare</code>.
 * The resulting comparator will in most cases cause exceptions if it is
 * actually being serialized, but this construct will enable using the
 * shorthands in {@link Comparator} in applications where session will not be
 * serialized.
 *
 * @author Vaadin Ltd
 * @param <T>
 *            the type of objects that may be compared by this comparator
 * @since 8.0
 *
 */
SerializableConsumer (/server/src/main/java/com/vaadin/server/SerializableConsumer.java)/**
 * A {@link Consumer} that is also {@link Serializable}.
 *
 * @see Consumer
 * @param <T>
 *            the type of the first argument to the operation
 *
 * @since 8.0
 * @author Vaadin Ltd
 *
 */
SerializableFunction (/server/src/main/java/com/vaadin/server/SerializableFunction.java)/**
 * A {@link Function} that is also {@link Serializable}.
 *
 * @see Function
 * @author Vaadin Ltd
 * @since 8.0
 * @param <T>
 *            the type of the input to the function
 * @param <R>
 *            the type of the result of the function
 */
SerializablePredicate (/server/src/main/java/com/vaadin/server/SerializablePredicate.java)/**
 * A {@link Predicate} that is also {@link Serializable}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 * @param <T>
 *            the type of the input to the predicate
 *
 */
SerializableSupplier (/server/src/main/java/com/vaadin/server/SerializableSupplier.java)/**
 * A {@link Supplier} that is also {@link Serializable}.
 *
 * @see Supplier
 * @author Vaadin Ltd
 * @since 8.0
 * @param <T>
 *            the type of the input to the function
 */
SerializableToIntFunction (/server/src/main/java/com/vaadin/server/SerializableToIntFunction.java)/**
 * A {@link ToIntFunction} that is also {@link Serializable}.
 *
 * @see ToIntFunction
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the type of the input for this function
 */
RpcInvocationException (/server/src/main/java/com/vaadin/server/ServerRpcManager.java)/**
     * Wrapper exception for exceptions which occur during invocation of an RPC
     * call.
     *
     * @author Vaadin Ltd
     * @since 7.0
     *
     */
ServerRpcManager (/server/src/main/java/com/vaadin/server/ServerRpcManager.java)/**
 * Server side RPC manager that handles RPC calls coming from the client.
 *
 * Each {@link RpcTarget} (typically a {@link ClientConnector}) should have its
 * own instance of {@link ServerRpcManager} if it wants to receive RPC calls
 * from the client.
 *
 * @since 7.0
 */
ServiceDestroyEvent (/server/src/main/java/com/vaadin/server/ServiceDestroyEvent.java)/**
 * Event fired to {@link ServiceDestroyListener} when a {@link VaadinService} is
 * being destroyed.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
ServiceDestroyListener (/server/src/main/java/com/vaadin/server/ServiceDestroyListener.java)/**
 * Listener that gets notified when the {@link VaadinService} to which it has
 * been registered is destroyed.
 *
 * @see VaadinService#addServiceDestroyListener(ServiceDestroyListener)
 * @see VaadinService#removeServiceDestroyListener(ServiceDestroyListener)
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
ServiceInitEvent (/server/src/main/java/com/vaadin/server/ServiceInitEvent.java)/**
 * Event fired to {@link VaadinServiceInitListener} when a {@link VaadinService}
 * is being initialized.
 * <p>
 * This event can also be used to add {@link RequestHandler}s that will be used
 * by the {@code VaadinService} for handling all requests.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
ServletPortletHelper (/server/src/main/java/com/vaadin/server/ServletPortletHelper.java)/**
 * Contains helper methods shared by {@link VaadinServlet} and
 * {@link VaadinPortlet}.
 *
 * @deprecated As of 7.1. Will be removed or refactored in the future.
 */
SessionDestroyEvent (/server/src/main/java/com/vaadin/server/SessionDestroyEvent.java)/**
 * Event fired when a Vaadin service session is no longer in use.
 *
 * @see SessionDestroyListener#sessionDestroy(SessionDestroyEvent)
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
SessionDestroyListener (/server/src/main/java/com/vaadin/server/SessionDestroyListener.java)/**
 * A listener that gets notified when a Vaadin service session is no longer
 * used.
 *
 * @see VaadinService#addSessionDestroyListener(SessionDestroyListener)
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
SessionExpiredHandler (/server/src/main/java/com/vaadin/server/SessionExpiredHandler.java)/**
 * A specialized RequestHandler which is capable of sending session expiration
 * messages to the user.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
SessionInitEvent (/server/src/main/java/com/vaadin/server/SessionInitEvent.java)/**
 * Event gets fired when a new Vaadin service session is initialized for a
 * Vaadin service.
 * <p>
 * Because of the way different service instances share the same session, the
 * event is not necessarily fired immediately when the session is created but
 * only when the first request for that session is handled by a specific
 * service.
 *
 * @see SessionInitListener#sessionInit(SessionInitEvent)
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
SessionInitListener (/server/src/main/java/com/vaadin/server/SessionInitListener.java)/**
 * Event listener that can be registered to a {@link VaadinService} to get an
 * event when a new Vaadin service session is initialized for that service.
 * <p>
 * Because of the way different service instances share the same session, the
 * listener is not necessarily notified immediately when the session is created
 * but only when the first request for that session is handled by a specific
 * service.
 *
 * @see VaadinService#addSessionInitListener(SessionInitListener)
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
Setter (/server/src/main/java/com/vaadin/server/Setter.java)/**
 * The function to write the field value to the bean property.
 *
 * @see BiConsumer
 * @see Binder#bind(com.vaadin.data.HasValue, SerializableFunction, Setter)
 *      Binder#bind(HasValue, SerializableFunction, Setter)
 * @param <BEAN>
 *            the type of the target bean
 * @param <FIELDVALUE>
 *            the field value type to be written to the bean
 *
 * @since 8.0
 * @author Vaadin Ltd
 *
 */
Sizeable (/server/src/main/java/com/vaadin/server/Sizeable.java)/**
 * Interface to be implemented by components wishing to display some object that
 * may be dynamically resized during runtime.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
SizeWithUnit (/server/src/main/java/com/vaadin/server/SizeWithUnit.java)/**
 * A class for representing a value-unit pair. Also contains utility methods for
 * parsing such pairs from a string.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
StreamSource (/server/src/main/java/com/vaadin/server/StreamResource.java)/**
     * Interface implemented by the source of a StreamResource.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
StreamResource (/server/src/main/java/com/vaadin/server/StreamResource.java)/**
 * <code>StreamResource</code> is a resource provided to the client directly by
 * the application.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
StreamingStartEvent (/server/src/main/java/com/vaadin/server/StreamVariable.java)/**
     * Event passed to {@link #streamingStarted(StreamingStartEvent)} method
     * before the streaming of the content to {@link StreamVariable} starts.
     */
StreamingProgressEvent (/server/src/main/java/com/vaadin/server/StreamVariable.java)/**
     * Event passed to {@link #onProgress(StreamingProgressEvent)} method during
     * the streaming progresses.
     */
StreamingEndEvent (/server/src/main/java/com/vaadin/server/StreamVariable.java)/**
     * Event passed to {@link #streamingFinished(StreamingEndEvent)} method the
     * contents have been streamed to StreamVariable successfully.
     */
StreamingErrorEvent (/server/src/main/java/com/vaadin/server/StreamVariable.java)/**
     * Event passed to {@link #streamingFailed(StreamingErrorEvent)} method when
     * the streaming ended before the end of the input. The streaming may fail
     * due an interruption by {@link } or due an other unknown exception in
     * communication. In the latter case the exception is also passed to
     * {@link VaadinSession#error(com.vaadin.server.Terminal.ErrorEvent)} .
     */
StreamVariable (/server/src/main/java/com/vaadin/server/StreamVariable.java)/**
 * StreamVariable is a special kind of variable whose value is streamed to an
 * {@link OutputStream} provided by the {@link #getOutputStream()} method. E.g.
 * in web terminals {@link StreamVariable} can be used to send large files from
 * browsers to the server without consuming large amounts of memory.
 * <p>
 * Note, writing to the {@link OutputStream} is not synchronized by the terminal
 * (to avoid stalls in other operations when e.g. streaming to a slow network
 * service or file system). If UI is changed as a side effect of writing to the
 * output stream, developer must handle synchronization manually.
 * <p>
 *
 * @author Vaadin Ltd.
 * @since 6.5
 * @see PaintTarget#addVariable(VariableOwner, String, StreamVariable)
 */
SynchronizedRequestHandler (/server/src/main/java/com/vaadin/server/SynchronizedRequestHandler.java)/**
 * RequestHandler which takes care of locking and unlocking of the VaadinSession
 * automatically. The session is locked before
 * {@link #synchronizedHandleRequest(VaadinSession, VaadinRequest, VaadinResponse)}
 * is called and unlocked after it has completed.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
SystemError (/server/src/main/java/com/vaadin/server/SystemError.java)/**
 * <code>SystemError</code> is an error message for a problem caused by error in
 * system, not the user application code. The system error can contain technical
 * information such as stack trace and exception.
 *
 * SystemError does not support HTML in error messages or stack traces. If HTML
 * messages are required, use {@link UserError} or a custom implementation of
 * {@link ErrorMessage}.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
SystemMessages (/server/src/main/java/com/vaadin/server/SystemMessages.java)/**
 * Contains the system messages used to notify the user about various critical
 * situations that can occur.
 * <p>
 * Use {@link VaadinService#setSystemMessagesProvider(SystemMessagesProvider)}
 * to customize.
 * </p>
 * <p>
 * The defaults defined in this class are:
 * <ul>
 * <li><b>sessionExpiredURL</b> = null</li>
 * <li><b>sessionExpiredNotificationEnabled</b> = true</li>
 * <li><b>sessionExpiredCaption</b> = ""</li>
 * <li><b>sessionExpiredMessage</b> = "Take note of any unsaved data, and
 * <u>click here</u> to continue."</li>
 * <li><b>communicationErrorURL</b> = null</li>
 * <li><b>communicationErrorNotificationEnabled</b> = true</li>
 * <li><b>communicationErrorCaption</b> = "Communication problem"</li>
 * <li><b>communicationErrorMessage</b> = "Take note of any unsaved data, and
 * <u>click here</u> to continue."</li>
 * <li><b>internalErrorURL</b> = null</li>
 * <li><b>internalErrorNotificationEnabled</b> = true</li>
 * <li><b>internalErrorCaption</b> = "Internal error"</li>
 * <li><b>internalErrorMessage</b> = "Please notify the administrator.<br/>
 * Take note of any unsaved data, and <u>click here</u> to continue."</li>
 * <li><b>cookiesDisabledURL</b> = null</li>
 * <li><b>cookiesDisabledNotificationEnabled</b> = true</li>
 * <li><b>cookiesDisabledCaption</b> = "Cookies disabled"</li>
 * <li><b>cookiesDisabledMessage</b> = "This application requires cookies to
 * function.<br/>
 * Please enable cookies in your browser and <u>click here</u> to try
 * again.</li>
 * </ul>
 * </p>
 *
 */
SystemMessagesProvider (/server/src/main/java/com/vaadin/server/SystemMessagesProvider.java)/**
 * Gives out system messages based on Locale. Registered using
 * {@link VaadinService#setSystemMessagesProvider(SystemMessagesProvider)}.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ThemeResource (/server/src/main/java/com/vaadin/server/ThemeResource.java)/**
 * <code>ThemeResource</code> is a named theme dependant resource provided and
 * managed by a theme. The actual resource contents are dynamically resolved to
 * comply with the used theme by the terminal adapter. This is commonly used to
 * provide static images, flash, java-applets, etc for the terminals.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
SASSAddonImportFileCreator (/server/src/main/java/com/vaadin/server/themeutils/SASSAddonImportFileCreator.java)/**
 * Helper class for managing the addon imports and creating an a SCSS file for
 * importing all your addon themes. The helper method searches the classpath for
 * Vaadin addons and uses the 'Vaadin-Themes' metadata to create the imports.
 *
 * <p>
 * The addons.scss is always overwritten when this tool is invoked.
 * </p>
 *
 * @since 7.1
 */
UIClassSelectionEvent (/server/src/main/java/com/vaadin/server/UIClassSelectionEvent.java)/**
 * Contains information used by
 * {@link UIProvider#getUIClass(UIClassSelectionEvent)} to choose a UI class to
 * use in a specific situation.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
UICreateEvent (/server/src/main/java/com/vaadin/server/UICreateEvent.java)/**
 * Contains data used by various methods in {@link UIProvider} for determining
 * information about a new UI that is about to be created.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
UIProviderEvent (/server/src/main/java/com/vaadin/server/UIProviderEvent.java)/**
 * Base class for the events that are sent to various methods in UIProvider.
 *
 * @see UIProvider
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
UnsupportedBrowserHandler (/server/src/main/java/com/vaadin/server/UnsupportedBrowserHandler.java)/**
 * A {@link RequestHandler} that presents an informative page if the browser in
 * use is unsupported. Recognizes Chrome Frame and allow it to be used.
 *
 * <p>
 * This handler is usually added to the application by
 * {@link LegacyCommunicationManager}.
 * </p>
 */
UserError (/server/src/main/java/com/vaadin/server/UserError.java)/**
 * <code>UserError</code> is a controlled error occurred in application. User
 * errors are occur in normal usage of the application and guide the user.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
VaadinHttpAndPortletRequest (/server/src/main/java/com/vaadin/server/VaadinPortlet.java)/**
     * Base class for portlet requests that need access to HTTP servlet
     * requests.
     */
VaadinLiferayRequest (/server/src/main/java/com/vaadin/server/VaadinPortlet.java)/**
     * Portlet request for Liferay.
     */
VaadinGateInRequest (/server/src/main/java/com/vaadin/server/VaadinPortlet.java)/**
     * Portlet request for GateIn.
     */
VaadinWebSpherePortalRequest (/server/src/main/java/com/vaadin/server/VaadinPortlet.java)/**
     * Portlet request for WebSphere Portal.
     */
VaadinWebLogicPortalRequest (/server/src/main/java/com/vaadin/server/VaadinPortlet.java)/**
     * Portlet request for WebSphere Portal.
     */
VaadinPortlet (/server/src/main/java/com/vaadin/server/VaadinPortlet.java)/**
 * Portlet 2.0 base class. This replaces the servlet in servlet/portlet 1.0
 * deployments and handles various portlet requests from the browser.
 *
 * @author Vaadin Ltd
 */
VaadinPortletRequest (/server/src/main/java/com/vaadin/server/VaadinPortletRequest.java)/**
 * Wrapper for {@link PortletRequest} and its subclasses.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 *
 * @see VaadinRequest
 * @see VaadinPortletResponse
 */
VaadinPortletResponse (/server/src/main/java/com/vaadin/server/VaadinPortletResponse.java)/**
 * Wrapper for {@link PortletResponse} and its subclasses.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 *
 * @see VaadinResponse
 * @see VaadinPortletRequest
 */
PortletListener (/server/src/main/java/com/vaadin/server/VaadinPortletSession.java)/**
     * Listener interface for the various types of JSR-286 portlet requests. The
     * listener methods are called by the request handler
     * {@link PortletListenerNotifier} after the session is locked and the
     * corresponding UI has been found (if already created) but before other
     * request processing takes place.
     *
     * Direct rendering of output is not possible in a portlet listener and the
     * JSR-286 limitations on allowed operations in each phase or portlet
     * request processing must be respected by the listeners.
     *
     * Note that internal action requests used by the framework to trigger
     * events or set shared parameters do not call the action request listener
     * but will result in a later event or render request that will trigger the
     * corresponding listener.
     */
VaadinPortletSession (/server/src/main/java/com/vaadin/server/VaadinPortletSession.java)/**
 * An implementation of {@link VaadinSession} for JSR-286 portlet environments.
 *
 * This is automatically registered as a {@link HttpSessionBindingListener} when
 * {@link PortletSession#setAttribute()} is called with the context as value.
 *
 * Only the documented parts of this class should be considered as stable public
 * API.
 *
 * Note also that some methods and/or nested interfaces might move to
 * {@link VaadinPortletService} in future minor or major versions of Vaadin. In
 * these cases, a deprecated redirection for backwards compatibility will be
 * used in VaadinPortletSession for a transition period.
 *
 * @since 7.0
 */
VaadinRequest (/server/src/main/java/com/vaadin/server/VaadinRequest.java)/**
 * A generic request to the server, wrapping a more specific request type, e.g.
 * HttpServletReqest or PortletRequest.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
VaadinResponse (/server/src/main/java/com/vaadin/server/VaadinResponse.java)/**
 * A generic response from the server, wrapping a more specific response type,
 * e.g. HttpServletResponse or PortletResponse.
 *
 * @since 7.0
 */
VaadinService (/server/src/main/java/com/vaadin/server/VaadinService.java)/**
 * Provide deployment specific settings that are required outside terminal
 * specific code.
 *
 * @author Vaadin Ltd.
 *
 * @since 7.0
 */
VaadinServiceClassLoaderUtil (/server/src/main/java/com/vaadin/server/VaadinServiceClassLoaderUtil.java)/**
 * Utility class used by {@link VaadinService#setDefaultClassLoader()}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
VaadinServiceInitListener (/server/src/main/java/com/vaadin/server/VaadinServiceInitListener.java)/**
 * Listener for {@link VaadinService} initialization events. The listener can
 * add listeners and request handlers the service.
 * <p>
 * Listener instances are by default discovered and instantiated using
 * {@link ServiceLoader}. This means that all implementations must have a
 * zero-argument constructor and the fully qualified name of the implementation
 * class must be listed on a separate line in a
 * META-INF/services/com.vaadin.server.VaadinServiceInitListener file present in
 * the jar file containing the implementation class.
 * <p>
 * Integrations for specific runtime environments, such as OSGi or Spring, might
 * also provide other ways of discovering listeners.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
VaadinServletRequest (/server/src/main/java/com/vaadin/server/VaadinServletRequest.java)/**
 * Wrapper for {@link HttpServletRequest}.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 *
 * @see VaadinRequest
 * @see VaadinServletResponse
 */
VaadinServletResponse (/server/src/main/java/com/vaadin/server/VaadinServletResponse.java)/**
 * Wrapper for {@link HttpServletResponse}.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 *
 * @see VaadinResponse
 * @see VaadinServletRequest
 */
FutureAccess (/server/src/main/java/com/vaadin/server/VaadinSession.java)/**
     * Encapsulates a {@link Runnable} submitted using
     * {@link VaadinSession#access(Runnable)}. This class is used internally by
     * the framework and is not intended to be directly used by application
     * developers.
     *
     * @since 7.1
     * @author Vaadin Ltd
     */
VaadinSession (/server/src/main/java/com/vaadin/server/VaadinSession.java)/**
 * Contains everything that Vaadin needs to store for a specific user. This is
 * typically stored in a javax.servlet.http.HttpSession or
 * javax.portlet.PortletSession, but others storage mechanisms might also be
 * used.
 * <p>
 * Everything inside a {@link VaadinSession} should be serializable to ensure
 * compatibility with schemes using serialization for persisting the session
 * data.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
VariableOwner (/server/src/main/java/com/vaadin/server/VariableOwner.java)/**
 * <p>
 * Listener interface for UI variable changes. The user communicates with the
 * application using the so-called <i>variables</i>. When the user makes a
 * change using the UI the terminal trasmits the changed variables to the
 * application, and the components owning those variables may then process those
 * changes.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 * @deprecated As of 7.0. Only provided to ease porting of Vaadin 6 components.
 *             Do not implement this directly, implement
 *             {@link LegacyComponent}.
 */
ViewportGenerator (/server/src/main/java/com/vaadin/server/ViewportGenerator.java)/**
 * Callback for generating a viewport tag content based on a request.
 *
 * @see ViewportGenerator
 *
 * @since 7.4
 *
 * @author Vaadin Ltd
 */
WebBrowser (/server/src/main/java/com/vaadin/server/WebBrowser.java)/**
 * Class that provides information about the web browser the user is using.
 * Provides information such as browser name and version, screen resolution and
 * IP address.
 *
 * @author Vaadin Ltd.
 */
WidgetsetInfo (/server/src/main/java/com/vaadin/server/WidgetsetInfo.java)/**
 * An interface describing the widgetset that the client should try to load.
 * <p>
 * In addition to explicit use within the framework, adding a class called
 * AppWidgetset implementing this interface in the default package will
 * configure the widgetset to use unless the user has explicitly selected a
 * different widgetset. See {@link BootstrapHandler} and {@link UIProvider} for
 * more information.
 *
 * @since 7.7
 */
WidgetsetInfoImpl (/server/src/main/java/com/vaadin/server/WidgetsetInfoImpl.java)/**
 * Default implementation of {@link WidgetsetInfo} that is used for internal
 * communication between the parts of the framework.
 * <p>
 * Class needs to be static so that it can be easily used in e.g.
 * BootstrapHandler.
 * <p>
 * This class is intended primarily for internal use. It is recommended to
 * implement WidgetsetInfo directly rather than extending or using this class
 * outside the framework, and this class is subject to changes.
 *
 * @since 7.7
 */
LocationInfo (/server/src/main/java/com/vaadin/server/widgetsetutils/ClassPathExplorer.java)/**
     * Contains information about widgetsets and themes found on the classpath.
     *
     * @since 7.1
     */
ClassPathExplorer (/server/src/main/java/com/vaadin/server/widgetsetutils/ClassPathExplorer.java)/**
 * Utility class to collect widgetset related information from classpath.
 * Utility will seek all directories from classpaths, and jar files having
 * "Vaadin-Widgetsets" key in their manifest file.
 * <p>
 * Used by WidgetMapGenerator and ide tools to implement some monkey coding for
 * you.
 * <p>
 * Developer notice: If you end up reading this comment, I guess you have faced
 * a sluggish performance of widget compilation or unreliable detection of
 * components in your classpaths. The thing you might be able to do is to use
 * annotation processing tool like apt to generate the needed information. Then
 * either use that information in {@link WidgetMapGenerator} or create the
 * appropriate monkey code for gwt directly in annotation processor and get rid
 * of {@link WidgetMapGenerator}. Using annotation processor might be a good
 * idea when dropping Java 1.5 support (integrated to javac in 6).
 *
 */
WidgetSetBuilder (/server/src/main/java/com/vaadin/server/widgetsetutils/WidgetSetBuilder.java)/**
 * Helper class to update widgetsets GWT module configuration file. Can be used
 * command line or via IDE tools.
 *
 * <p>
 * If module definition file contains text "WS Compiler: manually edited", tool
 * will skip editing file.
 *
 */
WrappedHttpSession (/server/src/main/java/com/vaadin/server/WrappedHttpSession.java)/**
 * Wrapper for {@link HttpSession}.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 * @see WrappedSession
 */
WrappedPortletSession (/server/src/main/java/com/vaadin/server/WrappedPortletSession.java)/**
 * Wrapper for {@link PortletSession}.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 * @see WrappedSession
 */
WrappedSession (/server/src/main/java/com/vaadin/server/WrappedSession.java)/**
 * A generic session, wrapping a more specific session implementation, e.g.
 * {@link HttpSession} or {@link PortletSession}.
 *
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ComponentPosition (/server/src/main/java/com/vaadin/ui/AbsoluteLayout.java)/**
     * The CompontPosition class represents a components position within the
     * absolute layout. It contains the attributes for left, right, top and
     * bottom and the units used to specify them.
     */
AbsoluteLayout (/server/src/main/java/com/vaadin/ui/AbsoluteLayout.java)/**
 * AbsoluteLayout is a layout implementation that mimics html absolute
 * positioning.
 *
 */
Coordinates2Color (/server/src/main/java/com/vaadin/ui/AbstractColorPicker.java)/**
     * Interface for converting 2d-coordinates to a Color.
     */
AbstractColorPicker (/server/src/main/java/com/vaadin/ui/AbstractColorPicker.java)/**
 * An abstract class that defines default implementation for a color picker
 * component.
 *
 * @since 7.0.0
 */
AbstractComponent (/server/src/main/java/com/vaadin/ui/AbstractComponent.java)/**
 * An abstract class that defines default implementation for the
 * {@link Component} interface. Basic UI components that are not derived from an
 * external component can inherit this class to easily qualify as Vaadin
 * components. Most components in Vaadin do just that.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
AbstractComponentContainer (/server/src/main/java/com/vaadin/ui/AbstractComponentContainer.java)/**
 * Extension to {@link AbstractComponent} that defines the default
 * implementation for the methods in {@link ComponentContainer}. Basic UI
 * components that need to contain other components inherit this class to easily
 * qualify as a component container.
 *
 * @author Vaadin Ltd
 * @since 3.0
 */
AbstractDateField (/server/src/main/java/com/vaadin/ui/AbstractDateField.java)/**
 * A date editor component with {@link LocalDate} as an input value.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @param <T>
 *            type of date ({@code LocalDate} or {@code LocalDateTime}).
 * @param <R>
 *            resolution enumeration type
 *
 */
AbstractEmbedded (/server/src/main/java/com/vaadin/ui/AbstractEmbedded.java)/**
 * Abstract base for embedding components.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 */
AbstractField (/server/src/main/java/com/vaadin/ui/AbstractField.java)/**
 * An abstract implementation of a field, or a {@code Component} allowing user
 * input. Implements {@link HasValue} to represent the input value. Examples of
 * typical field components include text fields, date pickers, and check boxes.
 * <p>
 * This class replaces the Vaadin 7 {@code com.vaadin.ui.AbstractField} class.
 * The old {@code AbstractField} is retained, under the new name
 * {@link com.vaadin.v7.ui.AbstractField}, for compatibility and migration
 * purposes.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 *
 * @param <T>
 *            the input value type
 */
AbstractFocusable (/server/src/main/java/com/vaadin/ui/AbstractFocusable.java)/**
 * An abstract base class for focusable components. Includes API for setting the
 * tab index, programmatic focusing, and adding focus and blur listeners.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
AbstractJavaScriptComponent (/server/src/main/java/com/vaadin/ui/AbstractJavaScriptComponent.java)/**
 * Base class for Components with all client-side logic implemented using
 * JavaScript.
 * <p>
 * When a new JavaScript component is initialized in the browser, the framework
 * will look for a globally defined JavaScript function that will initialize the
 * component. The name of the initialization function is formed by replacing .
 * with _ in the name of the server-side class. If no such function is defined,
 * each super class is used in turn until a match is found. The framework will
 * thus first attempt with <code>com_example_MyComponent</code> for the
 * server-side
 * <code>com.example.MyComponent extends AbstractJavaScriptComponent</code>
 * class. If MyComponent instead extends <code>com.example.SuperComponent</code>
 * , then <code>com_example_SuperComponent</code> will also be attempted if
 * <code>com_example_MyComponent</code> has not been defined.
 * <p>
 * JavaScript components have a very simple GWT widget (
 * {@link com.vaadin.client.ui.JavaScriptWidget} ) just consisting of a single
 * element (a <code>div</code> by default) to which the JavaScript code should
 * initialize its own user interface. The tag can be overridden by defining a
 * string named <code>com_example_MyComponent.tag</code>. If no tag has been
 * defined, a tag defined in a super class will be located in the same manner as
 * with the init function.
 * <p>
 * For example, to create a component ({@code my.package.Span}) with the DOM
 * {@code <span>some text</span>}, taking the {@code span} text from the state,
 * the JavaScript would be:
 *
 * <pre>
 * <code>
my_package_Span = function() {
  this.onStateChange = function() {
    this.getElement().innerText = this.getState().text;
  }
}
my_package_Span.tag = "span";
</code>
 * </pre>
 *
 * <p>
 * The initialization function will be called with <code>this</code> pointing to
 * a connector wrapper object providing integration to Vaadin. Please note that
 * in JavaScript, <code>this</code> is not necessarily defined inside callback
 * functions and it might therefore be necessary to assign the reference to a
 * separate variable, e.g. <code>var self = this;</code>. The following
 * functions are provided by the connector wrapper object:
 * <ul>
 * <li><code>getConnectorId()</code> - returns a string with the id of the
 * connector.</li>
 * <li><code>getParentId([connectorId])</code> - returns a string with the id of
 * the connector's parent. If <code>connectorId</code> is provided, the id of
 * the parent of the corresponding connector with the passed id is returned
 * instead.</li>
 * <li><code>getElement([connectorId])</code> - returns the DOM Element that is
 * the root of a connector's widget. <code>null</code> is returned if the
 * connector can not be found or if the connector doesn't have a widget. If
 * <code>connectorId</code> is not provided, the connector id of the current
 * connector will be used.</li>
 * <li><code>getState()</code> - returns an object corresponding to the shared
 * state defined on the server. The scheme for conversion between Java and
 * JavaScript types is described bellow.</li>
 * <li><code>registerRpc([name, ] rpcObject)</code> - registers the
 * <code>rpcObject</code> as a RPC handler. <code>rpcObject</code> should be an
 * object with field containing functions for all eligible RPC functions. If
 * <code>name</code> is provided, the RPC handler will only used for RPC calls
 * for the RPC interface with the same fully qualified Java name. If no
 * <code>name</code> is provided, the RPC handler will be used for all incoming
 * RPC invocations where the RPC method name is defined as a function field in
 * the handler. The scheme for conversion between Java types in the RPC
 * interface definition and the JavaScript values passed as arguments to the
 * handler functions is described bellow.</li>
 * <li><code>getRpcProxy([name])</code> - returns an RPC proxy object. If
 * <code>name</code> is provided, the proxy object will contain functions for
 * all methods in the RPC interface with the same fully qualified name, provided
 * a RPC handler has been registered by the server-side code. If no
 * <code>name</code> is provided, the returned RPC proxy object will contain
 * functions for all methods in all RPC interfaces registered for the connector
 * on the server. If the same method name is present in multiple registered RPC
 * interfaces, the corresponding function in the RPC proxy object will throw an
 * exception when called. The scheme for conversion between Java types in the
 * RPC interface and the JavaScript values that should be passed to the
 * functions is described bellow.</li>
 * <li><code>translateVaadinUri(uri)</code> - Translates a Vaadin URI to a URL
 * that can be used in the browser. This is just way of accessing
 * {@link com.vaadin.client.ApplicationConnection#translateVaadinUri(String)}</li>
 * <li><code>addResizeListener(element, callbackFunction)</code> - Registers a
 * listener that gets notified whenever the size of the provided element
 * changes. The listener is called with one parameter: an event object with the
 * <code>element</code> property pointing to the element that has been resized.
 * <li><code>removeResizeListener(element, callbackFunction)</code> -
 * Unregisters a combination of an element and a listener that has previously
 * been registered using <code>addResizeListener</code>. All registered
 * listeners are automatically unregistered when this connector is unregistered,
 * but this method can be use to to unregister a listener at an earlier point in
 * time.
 * </ul>
 * The connector wrapper also supports these special functions:
 * <ul>
 * <li><code>onStateChange</code> - If the JavaScript code assigns a function to
 * the field, that function is called whenever the contents of the shared state
 * is changed.</li>
 * <li><code>onUnregister</code> - If the JavaScript code assigns a function to
 * the field, that function is called when the connector has been
 * unregistered.</li>
 * <li>Any field name corresponding to a call to
 * {@link #addFunction(String, JavaScriptFunction)} on the server will
 * automatically be present as a function that triggers the registered function
 * on the server.</li>
 * <li>Any field name referred to using {@link #callFunction(String, Object...)}
 * on the server will be called if a function has been assigned to the
 * field.</li>
 * </ul>
 * <p>
 *
 * Values in the Shared State and in RPC calls are converted between Java and
 * JavaScript using the following conventions:
 * <ul>
 * <li>Primitive Java numbers (byte, char, int, long, float, double) and their
 * boxed types (Byte, Character, Integer, Long, Float, Double) are represented
 * by JavaScript numbers.</li>
 * <li>The primitive Java boolean and the boxed Boolean are represented by
 * JavaScript booleans.</li>
 * <li>Java Strings are represented by JavaScript strings.</li>
 * <li>Java Dates are represented by JavaScript numbers containing the timestamp
 * </li>
 * <li>List, Set and all arrays in Java are represented by JavaScript
 * arrays.</li>
 * <li>Map&lt;String, ?&gt; in Java is represented by JavaScript object with
 * fields corresponding to the map keys.</li>
 * <li>Any other Java Map is represented by a JavaScript array containing two
 * arrays, the first contains the keys and the second contains the values in the
 * same order.</li>
 * <li>A Java Bean is represented by a JavaScript object with fields
 * corresponding to the bean's properties.</li>
 * <li>A Java Connector is represented by a JavaScript string containing the
 * connector's id.</li>
 * <li>A pluggable serialization mechanism is provided for types not described
 * here. Please refer to the documentation for specific types for serialization
 * information.</li>
 * </ul>
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
AbstractLayout (/server/src/main/java/com/vaadin/ui/AbstractLayout.java)/**
 * An abstract class that defines default implementation for the {@link Layout}
 * interface.
 *
 * @author Vaadin Ltd.
 * @since 5.0
 */
AbstractListingExtension (/server/src/main/java/com/vaadin/ui/AbstractListing.java)/**
     * A helper base class for creating extensions for Listing components. This
     * class provides helpers for accessing the underlying parts of the
     * component and its communication mechanism.
     *
     * @param <T>
     *            the listing item type
     */
AbstractListing (/server/src/main/java/com/vaadin/ui/AbstractListing.java)/**
 * A base class for listing components. Provides common handling for fetching
 * backend data items, selection logic, and server-client communication.
 * <p>
 * <strong>Note: </strong> concrete component implementations should implement
 * the {@link HasDataProvider} or {@link HasFilterableDataProvider} interface.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 *
 * @param <T>
 *            the item data type
 *
 */
AbstractLocalDateField (/server/src/main/java/com/vaadin/ui/AbstractLocalDateField.java)/**
 * Abstract DateField class for {@link LocalDate} type.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
AbstractLocalDateTimeField (/server/src/main/java/com/vaadin/ui/AbstractLocalDateTimeField.java)/**
 * Abstract DateField class for {@link LocalDateTime} type.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 */
AbstractMedia (/server/src/main/java/com/vaadin/ui/AbstractMedia.java)/**
 * Abstract base class for the HTML5 media components.
 *
 * @author Vaadin Ltd
 */
AbstractMultiSelect (/server/src/main/java/com/vaadin/ui/AbstractMultiSelect.java)/**
 * Base class for listing components that allow selecting multiple items.
 * <p>
 * Sends selection information individually for each item.
 *
 * @param <T>
 *            item type
 * @author Vaadin Ltd
 * @since 8.0
 */
AbstractSingleComponentContainer (/server/src/main/java/com/vaadin/ui/AbstractSingleComponentContainer.java)/**
 * Abstract base class for component containers that have only one child
 * component.
 *
 * For component containers that support multiple children, inherit
 * {@link AbstractComponentContainer} instead of this class.
 *
 * @since 7.0
 */
AbstractSingleSelect (/server/src/main/java/com/vaadin/ui/AbstractSingleSelect.java)/**
 * An abstract base class for listing components that only support single
 * selection and no lazy loading of data items.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the item date type
 *
 * @see com.vaadin.data.SelectionModel.Single
 *
 * @since 8.0
 */
ComponentIterator (/server/src/main/java/com/vaadin/ui/AbstractSplitPanel.java)/**
     * Modifiable and Serializable Iterator for the components, used by
     * {@link AbstractSplitPanel#getComponentIterator()}.
     */
SplitterClickListener (/server/src/main/java/com/vaadin/ui/AbstractSplitPanel.java)/**
     * <code>SplitterClickListener</code> interface for listening for
     * <code>SplitterClickEvent</code> fired by a <code>SplitPanel</code>.
     *
     * @see SplitterClickEvent
     * @since 6.2
     */
SplitPositionChangeListener (/server/src/main/java/com/vaadin/ui/AbstractSplitPanel.java)/**
     * Interface for listening for {@link SplitPositionChangeEvent}s fired by a
     * SplitPanel.
     *
     * @since 7.5.0
     */
SplitPositionChangeEvent (/server/src/main/java/com/vaadin/ui/AbstractSplitPanel.java)/**
     * Event that indicates a change in SplitPanel's splitter position.
     *
     * @since 7.5.0
     */
AbstractSplitPanel (/server/src/main/java/com/vaadin/ui/AbstractSplitPanel.java)/**
 * AbstractSplitPanel.
 *
 * <code>AbstractSplitPanel</code> is base class for a component container that
 * can contain two components. The components are split by a divider element.
 *
 * @author Vaadin Ltd.
 * @since 6.5
 */
AbstractTextField (/server/src/main/java/com/vaadin/ui/AbstractTextField.java)/**
 * Abstract base class for text input components.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
Accordion (/server/src/main/java/com/vaadin/ui/Accordion.java)/**
 * An accordion is a component similar to a {@link TabSheet}, but with a
 * vertical orientation and the selected component presented between tabs.
 *
 * Closable tabs are not supported by the accordion.
 *
 * The {@link Accordion} can be styled with the .v-accordion, .v-accordion-item,
 * .v-accordion-item-first and .v-accordion-item-caption styles.
 *
 * @see TabSheet
 */
Alignment (/server/src/main/java/com/vaadin/ui/Alignment.java)/**
 * Class containing information about alignment of a component. Use the
 * pre-instantiated classes.
 */
Audio (/server/src/main/java/com/vaadin/ui/Audio.java)/**
 * The Audio component translates into an HTML5 &lt;audio&gt; element and as
 * such is only supported in browsers that support HTML5 media markup. Browsers
 * that do not support HTML5 display the text or HTML set by calling
 * {@link #setAltText(String)}.
 *
 * A flash-player fallback can be implemented by setting HTML content allowed (
 * {@link #setHtmlContentAllowed(boolean)} and calling
 * {@link #setAltText(String)} with the flash player markup. An example of flash
 * fallback can be found at the <a href=
 * "https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Using_Flash"
 * >Mozilla Developer Network</a>.
 *
 * Multiple sources can be specified. Which of the sources is used is selected
 * by the browser depending on which file formats it supports. See
 * <a href="http://en.wikipedia.org/wiki/HTML5_video#Table">wikipedia</a> for a
 * table of formats supported by different browsers.
 *
 * @author Vaadin Ltd
 * @since 6.7.0
 */
BrowserFrame (/server/src/main/java/com/vaadin/ui/BrowserFrame.java)/**
 * A component displaying an embedded web page. Implemented as a HTML
 * <code>iframe</code> element.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 */
ClickEvent (/server/src/main/java/com/vaadin/ui/Button.java)/**
     * Click event. This event is thrown, when the button is clicked.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ClickListener (/server/src/main/java/com/vaadin/ui/Button.java)/**
     * Interface for listening for a {@link ClickEvent} fired by a
     * {@link Component}.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ClickShortcut (/server/src/main/java/com/vaadin/ui/Button.java)/**
     * A {@link ShortcutListener} specifically made to define a keyboard
     * shortcut that invokes a click on the given button.
     */
Button (/server/src/main/java/com/vaadin/ui/Button.java)/**
 * A generic button component.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
CheckBoxInputElement (/server/src/main/java/com/vaadin/ui/CheckBox.java)/**
     * The inner input element of the CheckBox.
     */
CheckBoxLabelElement (/server/src/main/java/com/vaadin/ui/CheckBox.java)/**
     * The inner label element of the CheckBox.
     */
CheckBoxGroup (/server/src/main/java/com/vaadin/ui/CheckBoxGroup.java)/**
 * A group of Checkboxes. Individual checkboxes are made from items supplied by
 * a {@link DataProvider}. Checkboxes may have captions and icons.
 *
 * @param <T>
 *            item type
 * @author Vaadin Ltd
 * @since 8.0
 */
ColorPicker (/server/src/main/java/com/vaadin/ui/ColorPicker.java)/**
 * A class that defines default (button-like) implementation for a color picker
 * component.
 *
 * @since 7.0.0
 *
 * @see ColorPickerArea
 *
 */
ColorPickerArea (/server/src/main/java/com/vaadin/ui/ColorPickerArea.java)/**
 * A class that defines area-like implementation for a color picker component.
 *
 * @since 7.0.0
 *
 * @see ColorPicker
 *
 */
FetchItemsCallback (/server/src/main/java/com/vaadin/ui/ComboBox.java)/**
     * A callback method for fetching items. The callback is provided with a
     * non-null string filter, offset index and limit.
     *
     * @param <T>
     *            item (bean) type in ComboBox
     * @since 8.0
     */
NewItemHandler (/server/src/main/java/com/vaadin/ui/ComboBox.java)/**
     * Handler that adds a new item based on user input when the new items
     * allowed mode is active.
     * <p>
     * NOTE 1: If the new item is rejected the client must be notified of the
     * fact via ComboBoxClientRpc or selection handling won't complete.
     * </p>
     * <p>
     * NOTE 2: Selection handling must be completed separately if filtering the
     * data source with the same value won't include the new item in the initial
     * list of suggestions. Failing to do so will lead to selection handling
     * never completing and previous selection remaining on the server.
     * </p>
     *
     * @since 8.0
     * @deprecated Since 8.4 replaced by {@link NewItemProvider}.
     */
NewItemProvider (/server/src/main/java/com/vaadin/ui/ComboBox.java)/**
     * Provider function that adds a new item based on user input when the new
     * items allowed mode is active. After the new item handling is complete,
     * this function should return {@code Optional.of(text)} for the completion
     * of automatic selection handling. If automatic selection is not wished
     * for, always return {@code Optional.isEmpty()}.
     *
     * @since 8.4
     */
DeclarativeStyleGenerator (/server/src/main/java/com/vaadin/ui/ComboBox.java)/**
     * Item style generator class for declarative support.
     * <p>
     * Provides a straightforward mapping between an item and its style.
     *
     * @param <T>
     *            item type
     * @since 8.0
     */
CaptionFilter (/server/src/main/java/com/vaadin/ui/ComboBox.java)/**
     * Predicate to check {@link ComboBox} item captions against user typed
     * strings.
     *
     * @see ComboBox#setItems(CaptionFilter, Collection)
     * @see ComboBox#setItems(CaptionFilter, Object[])
     * @since 8.0
     */
ComboBox (/server/src/main/java/com/vaadin/ui/ComboBox.java)/**
 * A filtering dropdown single-select. Items are filtered based on user input.
 * Supports the creation of new items when a handler is set by the user.
 *
 * @param <T>
 *            item (bean) type in ComboBox
 * @author Vaadin Ltd
 */
Event (/server/src/main/java/com/vaadin/ui/Component.java)/**
     * Superclass of all component originated events.
     *
     * <p>
     * Events are the basis of all user interaction handling in Vaadin. To
     * handle events, you provide a listener object that receives the events of
     * the particular event type.
     * </p>
     *
     * <pre>
     * Button button = new Button(&quot;Click Me!&quot;);
     * button.addListener(new Button.ClickListener() {
     *     public void buttonClick(ClickEvent event) {
     *         getWindow().showNotification(&quot;Thank You!&quot;);
     *     }
     * });
     * layout.addComponent(button);
     * </pre>
     *
     * <p>
     * Notice that while each of the event types have their corresponding
     * listener types; the listener interfaces are not required to inherit the
     * {@code Component.Listener} interface.
     * </p>
     *
     * @see Component.Listener
     */
Listener (/server/src/main/java/com/vaadin/ui/Component.java)/**
     * Listener interface for receiving <code>Component.Event</code>s.
     *
     * <p>
     * Listener interfaces are the basis of all user interaction handling in
     * Vaadin. You have or create a listener object that receives the events.
     * All event types have their corresponding listener types; they are not,
     * however, required to inherit the {@code Component.Listener} interface,
     * and they rarely do so.
     * </p>
     *
     * <p>
     * This generic listener interface is useful typically when you wish to
     * handle events from different component types in a single listener method
     * ({@code componentEvent()}. If you handle component events in an anonymous
     * listener class, you normally use the component specific listener class,
     * such as {@link com.vaadin.ui.Button.ClickEvent}.
     * </p>
     *
     * <pre>
     * class Listening extends CustomComponent implements Listener {
     *     Button ok; // Stored for determining the source of an event
     *
     *     Label status; // For displaying info about the event
     *
     *     public Listening() {
     *         VerticalLayout layout = new VerticalLayout();
     *
     *         // Some miscellaneous component
     *         TextField name = new TextField(&quot;Say it all here&quot;);
     *         name.addListener(this);
     *         layout.addComponent(name);
     *
     *         // Handle button clicks as generic events instead
     *         // of Button.ClickEvent events
     *         ok = new Button(&quot;OK&quot;);
     *         ok.addListener(this);
     *         layout.addComponent(ok);
     *
     *         // For displaying information about an event
     *         status = new Label(&quot;&quot;);
     *         layout.addComponent(status);
     *
     *         setCompositionRoot(layout);
     *     }
     *
     *     public void componentEvent(Event event) {
     *         // Act according to the source of the event
     *         if (event.getSource() == ok
     *                 &amp;&amp; event.getClass() == Button.ClickEvent.class)
     *             getWindow().showNotification(&quot;Click!&quot;);
     *
     *         // Display source component and event class names
     *         status.setValue(
     *                 &quot;Event from &quot; + event.getSource().getClass().getName()
     *                         + &quot;: &quot; + event.getClass().getName());
     *     }
     * }
     *
     * Listening listening = new Listening();
     * layout.addComponent(listening);
     * </pre>
     *
     * @see Component#addListener(Listener)
     */
ErrorEvent (/server/src/main/java/com/vaadin/ui/Component.java)/**
     * Class of all component originated error events.
     *
     * <p>
     * The component error event is normally fired by
     * {@link AbstractComponent#setComponentError(ErrorMessage)}. The component
     * errors are set by the framework in some situations and can be set by user
     * code. They are indicated in a component with an error indicator.
     * </p>
     */
Focusable (/server/src/main/java/com/vaadin/ui/Component.java)/**
     * A sub-interface implemented by components that can obtain input focus.
     * This includes all {@code LegacyField} components as well as some other
     * components, such as {@code Upload}.
     *
     * <p>
     * Focus can be set with {@link #focus()}. This interface does not provide
     * an accessor that would allow finding out the currently focused component;
     * focus information can be acquired for some (but not all)
     * {@code LegacyField} components through the
     * {@link com.vaadin.event.FieldEvents.FocusListener} and
     * {@link com.vaadin.event.FieldEvents.BlurListener} interfaces.
     * </p>
     *
     * @see FieldEvents
     */
Component (/server/src/main/java/com/vaadin/ui/Component.java)/**
 * {@code Component} is the top-level interface that is and must be implemented
 * by all Vaadin components. {@code Component} is paired with
 * {@link AbstractComponent}, which provides a default implementation for all
 * the methods defined in this interface.
 *
 * <p>
 * Components are laid out in the user interface hierarchically. The layout is
 * managed by layout components, or more generally by components that implement
 * the {@link ComponentContainer} interface. Such a container is the
 * <i>parent</i> of the contained components.
 * </p>
 *
 * <p>
 * The {@link #getParent()} method allows retrieving the parent component of a
 * component. While there is a {@link #setParent(HasComponents)}, you rarely
 * need it as you normally add components with the
 * {@link ComponentContainer#addComponent(Component) addComponent()} method of
 * the layout or other {@code ComponentContainer}, which automatically sets the
 * parent.
 * </p>
 *
 * <p>
 * A component becomes <i>attached</i> to an application (and the
 * {@link #attach()} is called) when it or one of its parents is attached to the
 * main window of the application through its containment hierarchy.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
ComponentContainer (/server/src/main/java/com/vaadin/ui/ComponentContainer.java)/**
 * A special type of parent which allows the user to add and remove components
 * to it. Typically does not have any restrictions on the number of children it
 * can contain.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
ComponentRootSetter (/server/src/main/java/com/vaadin/ui/ComponentRootSetter.java)/**
 * Internal utility class.
 *
 * @since 8.1
 * @author Vaadin Ltd
 */
ColorPickerGradient (/server/src/main/java/com/vaadin/ui/components/colorpicker/ColorPickerGradient.java)/**
 * A component that represents a color gradient within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerGrid (/server/src/main/java/com/vaadin/ui/components/colorpicker/ColorPickerGrid.java)/**
 * A component that represents a color selection grid within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerHistory (/server/src/main/java/com/vaadin/ui/components/colorpicker/ColorPickerHistory.java)/**
 * A component that represents color selection history within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerPopup (/server/src/main/java/com/vaadin/ui/components/colorpicker/ColorPickerPopup.java)/**
 * A component that represents color selection popup within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerPreview (/server/src/main/java/com/vaadin/ui/components/colorpicker/ColorPickerPreview.java)/**
 * A component that represents color selection preview within a color picker.
 *
 * @since 7.0.0
 */
ColorPickerSelect (/server/src/main/java/com/vaadin/ui/components/colorpicker/ColorPickerSelect.java)/**
 * A component that represents color selection swatches within a color picker.
 *
 * @since 7.0.0
 */
ColorUtil (/server/src/main/java/com/vaadin/ui/components/colorpicker/ColorUtil.java)/**
 * Utility class for matching and parsing {@link Color} objects from
 * {@code String} input.
 *
 * Description of supported formats see
 * http://www.w3schools.com/cssref/css_colors_legal.asp
 *
 * @since 8.4
 */
AbstractSelectionModel (/server/src/main/java/com/vaadin/ui/components/grid/AbstractSelectionModel.java)/**
 * Abstract selection model for grid.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @param <T>
 *            the type of the items in grid.
 */
ColumnReorderListener (/server/src/main/java/com/vaadin/ui/components/grid/ColumnReorderListener.java)/**
 * An event listener for column reorder events in the Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
ColumnResizeListener (/server/src/main/java/com/vaadin/ui/components/grid/ColumnResizeListener.java)/**
 * An event listener for column resize events in the Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
ColumnVisibilityChangeListener (/server/src/main/java/com/vaadin/ui/components/grid/ColumnVisibilityChangeListener.java)/**
 * An event listener for column visibility change events in the Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
DescriptionGenerator (/server/src/main/java/com/vaadin/ui/components/grid/DescriptionGenerator.java)/**
 * A callback interface for generating description texts for an item.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the grid bean type
 * @deprecated as of 8.2, use the DescriptionGenerator found in package
 *             com.vaadin.ui instead.
 */
DetailsGenerator (/server/src/main/java/com/vaadin/ui/components/grid/DetailsGenerator.java)/**
 * A callback interface for generating details for a particular row in Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the grid bean type
 */
DropIndexCalculator (/server/src/main/java/com/vaadin/ui/components/grid/DropIndexCalculator.java)/**
 * A handler for calculating the index of the dropped items on the drop target
 * grid.
 *
 * @author Vaadin Ltd
 * @since 8.2
 * @see GridRowDragger
 * @param <T>
 *            the bean type
 */
Editor (/server/src/main/java/com/vaadin/ui/components/grid/Editor.java)/**
 * An editor in a Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 */
EditorCancelEvent (/server/src/main/java/com/vaadin/ui/components/grid/EditorCancelEvent.java)/**
 * An event that is fired when a Grid editor is cancelled.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @see EditorCancelListener
 * @see Editor#addCancelListener(EditorCancelListener)
 *
 * @param <T>
 *            the bean type
 */
EditorCancelListener (/server/src/main/java/com/vaadin/ui/components/grid/EditorCancelListener.java)/**
 * An event listener for a {@link Grid} editor cancel events.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @see EditorCancelEvent
 * @see Editor#addCancelListener(EditorCancelListener)
 *
 * @param <T>
 *            the bean type
 */
EditorErrorGenerator (/server/src/main/java/com/vaadin/ui/components/grid/EditorErrorGenerator.java)/**
 * Generator for creating editor validation and conversion error messages.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the bean type
 */
EditorImpl (/server/src/main/java/com/vaadin/ui/components/grid/EditorImpl.java)/**
 * Implementation of {@code Editor} interface.
 *
 * @param <T>
 *            the grid bean type
 * @since 8.0
 */
EditorOpenEvent (/server/src/main/java/com/vaadin/ui/components/grid/EditorOpenEvent.java)/**
 * An event that is fired when a Grid editor is opened.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @see EditorOpenListener
 * @see Editor#addOpenListener(EditorOpenListener)
 *
 * @param <T>
 *            the bean type
 */
EditorOpenListener (/server/src/main/java/com/vaadin/ui/components/grid/EditorOpenListener.java)/**
 * An event listener for a {@link Grid} editor save events.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            the bean type
 *
 * @see EditorOpenEvent
 * @see Editor#addOpenListener(EditorOpenListener)
 */
EditorSaveEvent (/server/src/main/java/com/vaadin/ui/components/grid/EditorSaveEvent.java)/**
 * An event that is fired when a Grid editor is saved.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @see EditorSaveListener
 * @see Editor#addSaveListener(EditorSaveListener)
 *
 * @param <T>
 *            the bean type
 */
EditorSaveListener (/server/src/main/java/com/vaadin/ui/components/grid/EditorSaveListener.java)/**
 * An event listener for a {@link Grid} editor save events.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @see EditorSaveEvent
 * @see Editor#addSaveListener(EditorSaveListener)
 */
Cell (/server/src/main/java/com/vaadin/ui/components/grid/Footer.java)/**
         * A cell in a Grid footer row.
         */
Row (/server/src/main/java/com/vaadin/ui/components/grid/Footer.java)/**
     * A row in a Grid Footer.
     */
Footer (/server/src/main/java/com/vaadin/ui/components/grid/Footer.java)/**
 * Represents the footer section of a Grid.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
FooterCell (/server/src/main/java/com/vaadin/ui/components/grid/FooterCell.java)/**
 * An individual cell on a Grid footer row.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
FooterRow (/server/src/main/java/com/vaadin/ui/components/grid/FooterRow.java)/**
 * A footer row in a Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
GridDragEndEvent (/server/src/main/java/com/vaadin/ui/components/grid/GridDragEndEvent.java)/**
 * Drop event on an HTML5 drop target {@link Grid} row.
 *
 * @param <T>
 *            The Grid bean type.
 * @author Vaadin Ltd.
 * @see GridDragSource#addGridDragStartListener(GridDragStartListener)
 * @since 8.1
 */
GridDragEndListener (/server/src/main/java/com/vaadin/ui/components/grid/GridDragEndListener.java)/**
 * Drop listener for HTML5 drop on a Grid row.
 *
 * @param <T>
 *            The Grid bean type.
 * @author Vaadin Ltd.
 * @see GridDragSource#addGridDragEndListener(GridDragEndListener)
 * @since 8.1
 */
GridDragSource (/server/src/main/java/com/vaadin/ui/components/grid/GridDragSource.java)/**
 * Makes a Grid's rows draggable for HTML5 drag and drop functionality.
 * <p>
 * When dragging a selected row, all the visible selected rows are dragged. Note
 * that ONLY visible rows are taken into account.
 *
 * @param <T>
 *            The Grid bean type.
 * @author Vaadin Ltd.
 * @since 8.1
 * @see GridRowDragger
 */
GridDragStartEvent (/server/src/main/java/com/vaadin/ui/components/grid/GridDragStartEvent.java)/**
 * Drag start event on an HTML5 drag source {@link Grid} row.
 *
 * @param <T>
 *            The Grid bean type.
 * @author Vaadin Ltd.
 * @see GridDragSource#addGridDragStartListener(GridDragStartListener)
 * @since 8.1
 */
GridDragStartListener (/server/src/main/java/com/vaadin/ui/components/grid/GridDragStartListener.java)/**
 * Drag start listener for HTML5 drag start on a Grid row.
 *
 * @param <T>
 *            The Grid bean type.
 * @author Vaadin Ltd.
 * @see GridDragSource#addGridDragStartListener(GridDragStartListener)
 * @since 8.1
 */
GridDropEvent (/server/src/main/java/com/vaadin/ui/components/grid/GridDropEvent.java)/**
 * Drop event on an HTML5 drop target {@link Grid} row.
 *
 * @param <T>
 *            The Grid bean type.
 * @author Vaadin Ltd.
 * @see GridDropTarget#addGridDropListener(GridDropListener)
 * @since 8.1
 */
GridDropListener (/server/src/main/java/com/vaadin/ui/components/grid/GridDropListener.java)/**
 * Drop listener for HTML5 drop on a Grid row.
 *
 * @param <T>
 *            The Grid bean type.
 * @author Vaadin Ltd.
 * @see GridDropTarget#addGridDropListener(GridDropListener)
 * @since 8.1
 */
GridDropTarget (/server/src/main/java/com/vaadin/ui/components/grid/GridDropTarget.java)/**
 * Makes the rows of a Grid HTML5 drop targets. This is the server side
 * counterpart of GridDropTargetExtensionConnector.
 *
 * @param <T>
 *            Type of the Grid bean.
 * @author Vaadin Ltd
 * @since 8.1
 * @see GridRowDragger
 */
GridMultiSelect (/server/src/main/java/com/vaadin/ui/components/grid/GridMultiSelect.java)/**
 * Wrapper class to wrap Grid into a MultiSelect. This class also provides
 * useful access to API of MultiSelectionModel.
 *
 * @param <T>
 *            the bean type of grid
 * @since 8.6.0
 */
GridRowDragger (/server/src/main/java/com/vaadin/ui/components/grid/GridRowDragger.java)/**
 * Allows dragging rows for reordering within a Grid and between two separate
 * Grids when the item type is the same.
 * <p>
 * When dragging a selected row, all the visible selected rows are dragged. Note
 * that ONLY currently visible rows are taken into account. The drop mode for
 * the target grid is by default {@link DropMode#BETWEEN}.
 * <p>
 * To customize the settings for either the source or the target grid, use
 * {@link #getGridDragSource()} and {@link #getGridDropTarget()}.The drop target
 * grid has been set to not allow drops for a target row when the grid has been
 * sorted, since the visual drop target location would not match where the item
 * would actually be dropped into. Additionally, a grid MUST NOT be the target
 * of more than one GridRowDragger.
 * <p>
 * <em>NOTE: this helper works only with {@link ListDataProvider} on both grids.
 * If you have another data provider, you should customize data provider
 * updating on drop with
 * {@link #setSourceDataProviderUpdater(SourceDataProviderUpdater)} &
 * {@link #setTargetDataProviderUpdater(TargetDataProviderUpdater)} and add a
 * custom drop index calculator with
 * {@link #setDropIndexCalculator(DropIndexCalculator)}.</em>
 * <p>
 * In case you are not using a {@link ListDataProvider} and don't have custom
 * handlers, {@link UnsupportedOperationException} is thrown on drop event.
 *
 * @param <T>
 *            The Grid bean type.
 * @author Vaadin Ltd
 * @since 8.2
 */
GridSelectionModel (/server/src/main/java/com/vaadin/ui/components/grid/GridSelectionModel.java)/**
 * The server-side interface that controls Grid's selection state.
 * SelectionModel should extend {@link AbstractGridExtension}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the grid bean type
 * @see AbstractSelectionModel
 * @see SingleSelectionModel
 * @see MultiSelectionModel
 */
GridSingleSelect (/server/src/main/java/com/vaadin/ui/components/grid/GridSingleSelect.java)/**
 * Wrapper class to wrap Grid into a SingleSelect. This class also provides
 * useful access to API of SingleSelectionModel.
 *
 * @param <T>
 *            the bean type of grid
 * @since 8.6.0
 */
Cell (/server/src/main/java/com/vaadin/ui/components/grid/Header.java)/**
         * A cell in a Grid header row.
         */
Row (/server/src/main/java/com/vaadin/ui/components/grid/Header.java)/**
     * A row in a Grid header.
     */
Header (/server/src/main/java/com/vaadin/ui/components/grid/Header.java)/**
 * Represents the header section of a Grid.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
HeaderCell (/server/src/main/java/com/vaadin/ui/components/grid/HeaderCell.java)/**
 * An individual cell on a Grid header row.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
HeaderRow (/server/src/main/java/com/vaadin/ui/components/grid/HeaderRow.java)/**
 * A header row in a Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
ItemClickListener (/server/src/main/java/com/vaadin/ui/components/grid/ItemClickListener.java)/**
 * A listener for item click events.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the grid bean type
 *
 * @see ItemClick
 * @see Registration
 */
MultiSelectionModel (/server/src/main/java/com/vaadin/ui/components/grid/MultiSelectionModel.java)/**
 * Multiselection model interface for Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the type of items in grid
 */
MultiSelectionModelImpl (/server/src/main/java/com/vaadin/ui/components/grid/MultiSelectionModelImpl.java)/**
 * Multiselection model for grid.
 * <p>
 * Shows a column of checkboxes as the first column of grid. Each checkbox
 * triggers the selection for that row.
 * <p>
 * Implementation detail: The Grid selection is updated immediately after user
 * selection on client side, without waiting for the server response.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 *
 * @param <T>
 *            the type of the selected item in grid.
 */
NoSelectionModel (/server/src/main/java/com/vaadin/ui/components/grid/NoSelectionModel.java)/**
 * Selection model that doesn't allow selecting anything from the grid.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 *
 * @param <T>
 *            the type of items in the grid
 */
SingleSelectionModel (/server/src/main/java/com/vaadin/ui/components/grid/SingleSelectionModel.java)/**
 * Single selection model interface for Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the type of items in grid
 */
SingleSelectionModelImpl (/server/src/main/java/com/vaadin/ui/components/grid/SingleSelectionModelImpl.java)/**
 * Single selection model for grid.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 *
 * @param <T>
 *            the type of the selected item in grid.
 */
SortOrderProvider (/server/src/main/java/com/vaadin/ui/components/grid/SortOrderProvider.java)/**
 * Generates the sort orders when rows are sorted by a column.
 *
 * @see Column#setSortOrderProvider
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
SourceDataProviderUpdater (/server/src/main/java/com/vaadin/ui/components/grid/SourceDataProviderUpdater.java)/**
 * A handler for source grid data provider updater for {@link GridRowDragger}.
 *
 * Used to handle updates to the source grid's {@link DataProvider} after a
 * drop.
 *
 * @author Vaadin Ltd
 * @since 8.2
 *
 * @param <T>
 *            the bean type
 */
StaticRow (/server/src/main/java/com/vaadin/ui/components/grid/StaticSection.java)/**
     * Abstract base class for Grid header and footer rows.
     *
     * @param <CELL>
     *            the type of the cells in the row
     */
StaticCell (/server/src/main/java/com/vaadin/ui/components/grid/StaticSection.java)/**
     * A header or footer cell. Has a simple textual caption.
     */
StaticSection (/server/src/main/java/com/vaadin/ui/components/grid/StaticSection.java)/**
 * Represents the header or footer section of a Grid.
 *
 * @author Vaadin Ltd.
 *
 * @param <ROW>
 *            the type of the rows in the section
 *
 * @since 8.0
 */
TargetDataProviderUpdater (/server/src/main/java/com/vaadin/ui/components/grid/TargetDataProviderUpdater.java)/**
 * A handler for target grid data provider updater for {@link GridRowDragger}.
 *
 * Used to handle updates to the target grid's {@link DataProvider} after a
 * drop.
 *
 * @author Vaadin Ltd
 * @since 8.2
 *
 * @param <T>
 *            the bean type
 */
TreeGridDragSource (/server/src/main/java/com/vaadin/ui/components/grid/TreeGridDragSource.java)/**
 * Makes a TreeGrid's rows draggable for HTML5 drag and drop functionality.
 * <p>
 * When dragging a selected row, all the visible selected rows are dragged. Note
 * that ONLY visible rows are taken into account and the subtree belonging to a
 * selected row is not dragged either.
 *
 * @param <T>
 *            The TreeGrid bean type.
 * @author Vaadin Ltd.
 * @since 8.1
 */
TreeGridDropEvent (/server/src/main/java/com/vaadin/ui/components/grid/TreeGridDropEvent.java)/**
 * Drop event on an HTML5 drop target {@link TreeGrid} row.
 *
 * @param <T>
 *            The TreeGrid bean type.
 * @author Vaadin Ltd.
 * @see TreeGridDropTarget#addTreeGridDropListener(TreeGridDropListener)
 * @since 8.1
 */
TreeGridDropListener (/server/src/main/java/com/vaadin/ui/components/grid/TreeGridDropListener.java)/**
 * Drop listener for HTML5 drop on a TreeGrid row.
 *
 * @param <T>
 *            The Grid bean type.
 * @author Vaadin Ltd.
 * @see TreeGridDropTarget#addTreeGridDropListener(TreeGridDropListener)
 * @since 8.1
 */
TreeGridDropTarget (/server/src/main/java/com/vaadin/ui/components/grid/TreeGridDropTarget.java)/**
 * Makes the rows of a TreeGrid HTML5 drop targets. This is the server side
 * counterpart of GridDropTargetExtensionConnector.
 *
 * @param <T>
 *            Type of the TreeGrid bean.
 * @author Vaadin Ltd
 * @since 8.1
 */
Composite (/server/src/main/java/com/vaadin/ui/Composite.java)/**
 * Composite allows creating new UI components by composition of existing
 * server-side components.
 * <p>
 * A composite is created by extending the Composite class and setting the
 * composition root component using {@link #setCompositionRoot(Component)}.
 * </p>
 * <p>
 * The composition root itself can contain more components. The advantage of
 * wrapping it in a composite is that the details of the composition root, such
 * as its public API, are hidden from the users of the composite.
 * </p>
 * <p>
 * A composite itself does not contribute to the DOM in any way (contrary to
 * {@link CustomComponent} which adds a {@code <div>} to the DOM.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 8.1
 */
ConnectorTracker (/server/src/main/java/com/vaadin/ui/ConnectorTracker.java)/**
 * A class which takes care of book keeping of {@link ClientConnector}s for a
 * UI.
 * <p>
 * Provides {@link #getConnector(String)} which can be used to lookup a
 * connector from its id. This is for framework use only and should not be
 * needed in applications.
 * </p>
 * <p>
 * Tracks which {@link ClientConnector}s are dirty so they can be updated to the
 * client when the following response is sent. A connector is dirty when an
 * operation has been performed on it on the server and as a result of this
 * operation new information needs to be sent to its
 * {@link com.vaadin.client.ServerConnector}.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 */
CssLayout (/server/src/main/java/com/vaadin/ui/CssLayout.java)/**
 * CssLayout is a layout component that can be used in browser environment only.
 * It simply renders components and their captions into a same div element.
 * Component layout can then be adjusted with css.
 * <p>
 * In comparison to {@link HorizontalLayout} and {@link VerticalLayout}
 * <ul>
 * <li>rather similar server side api
 * <li>no spacing, alignment or expand ratios
 * <li>much simpler DOM that can be styled by skilled web developer
 * <li>no abstraction of browser differences (developer must ensure that the
 * result works properly on each browser)
 * <li>different kind of handling for relative sizes (that are set from server
 * side) (*)
 * <li>noticeably faster rendering time in some situations as we rely more on
 * the browser's rendering engine.
 * </ul>
 * <p>
 * With {@link CustomLayout} one can often achieve similar results (good looking
 * layouts with web technologies), but with CustomLayout developer needs to work
 * with fixed templates.
 * <p>
 * By extending CssLayout one can also inject some css rules straight to child
 * components using {@link #getCss(Component)}.
 *
 * <p>
 * (*) Relative sizes (set from server side) are treated bit differently than in
 * other layouts in Vaadin. In cssLayout the size is calculated relatively to
 * CSS layouts content area which is pretty much as in html and css. In other
 * layouts the size of component is calculated relatively to the "slot" given by
 * layout.
 * <p>
 * Also note that client side framework in Vaadin modifies inline style
 * properties width and height. This happens on each update to component. If one
 * wants to set component sizes with CSS, component must have undefined size on
 * server side (which is not the default for all components) and the size must
 * be defined with class styles - not by directly injecting width and height.
 *
 * @since 6.1 brought in from "FastLayouts" incubator project
 *
 */
CustomComponent (/server/src/main/java/com/vaadin/ui/CustomComponent.java)/**
 * Custom component provides a simple implementation of the {@link Component}
 * interface to allow creating new UI components by composition of existing
 * server-side components.
 *
 * <p>
 * The component is used by inheriting the CustomComponent class and setting the
 * composition root component. The composition root must be set with
 * {@link #setCompositionRoot(Component)} before the CustomComponent is used,
 * such as by adding it to a layout, so it is preferable to set it in the
 * constructor.
 * </p>
 *
 * <p>
 * The composition root itself can contain more components. The advantage of
 * wrapping it in a CustomComponent is that its details, such as interfaces, are
 * hidden from the users of the component, thereby contributing to information
 * hiding.
 * </p>
 *
 * <p>
 * The CustomComponent does not display the caption of the composition root, so
 * if you want to have it shown in the layout where the custom component is
 * contained, you need to set it as caption of the CustomComponent.
 * </p>
 *
 * <p>
 * The component expands horizontally and has undefined height by default.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
CustomField (/server/src/main/java/com/vaadin/ui/CustomField.java)/**
 * A {@link HasValue} whose UI content can be constructed by the user, enabling
 * the creation of e.g. form fields by composing Vaadin components.
 * Customization of both the visual presentation and the logic of the field is
 * possible.
 * <p>
 * Subclasses must implement {@link #initContent()}.
 * <p>
 * Most custom fields can simply compose a user interface that calls the methods
 * {@link #doSetValue(Object)} and {@link #getValue()} when necessary.
 *
 * @param <T>
 *            field value type
 *
 * @since 8.0
 */
CustomLayout (/server/src/main/java/com/vaadin/ui/CustomLayout.java)/**
 * <p>
 * A container component with freely designed layout and style. The layout
 * consists of items with textually represented locations. Each item contains
 * one sub-component, which can be any Vaadin component, such as a layout. The
 * adapter and theme are responsible for rendering the layout with a given style
 * by placing the items in the defined locations.
 * </p>
 *
 * <p>
 * The placement of the locations is not fixed - different themes can define the
 * locations in a way that is suitable for them. One typical example would be to
 * create visual design for a web site as a custom layout: the visual design
 * would define locations for "menu", "body", and "title", for example. The
 * layout would then be implemented as an HTML template for each theme.
 * </p>
 *
 * <p>
 * A location is identified with the attribute "data-location" or "location"
 * which has the location name as its value.
 * </p>
 *
 * <p>
 * The default theme handles the styles that are not defined by drawing the
 * subcomponents just as in OrderedLayout.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
DateField (/server/src/main/java/com/vaadin/ui/DateField.java)/**
 * A date entry component, which displays the actual date selector as a popup.
 *
 * @see AbstractLocalDateField
 * @see InlineDateField
 * @author Vaadin Ltd.
 * @since 8.0
 */
DateTimeField (/server/src/main/java/com/vaadin/ui/DateTimeField.java)/**
 * A date time entry component, which displays the actual date selector as a
 * popup.
 *
 * @see AbstractLocalDateTimeField
 * @see InlineDateTimeField
 * @author Vaadin Ltd.
 * @since 8.0
 */
DesignDateConverter (/server/src/main/java/com/vaadin/ui/declarative/converters/DesignDateConverter.java)/**
 * A date converter to be used by {@link DesignAttributeHandler}. Provides
 * ISO-compliant way of storing date and time.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DesignEnumConverter (/server/src/main/java/com/vaadin/ui/declarative/converters/DesignEnumConverter.java)/**
 * An converter for Enum to/from String for {@link DesignAttributeHandler} to
 * use internally.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DesignLocalDateConverter (/server/src/main/java/com/vaadin/ui/declarative/converters/DesignLocalDateConverter.java)/**
 * A {@link LocalDate} converter to be used by {@link DesignAttributeHandler}.
 * Provides ISO-compliant way of storing date and time.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
DesignLocalDateTimeConverter (/server/src/main/java/com/vaadin/ui/declarative/converters/DesignLocalDateTimeConverter.java)/**
 * A {@link LocalDate} converter to be used by {@link DesignAttributeHandler}.
 * Provides ISO-compliant way of storing date and time.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
DesignObjectConverter (/server/src/main/java/com/vaadin/ui/declarative/converters/DesignObjectConverter.java)/**
 * An converter for Object to/from String for {@link DesignAttributeHandler} to
 * use internally.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DesignResourceConverter (/server/src/main/java/com/vaadin/ui/declarative/converters/DesignResourceConverter.java)/**
 * A converter for {@link Resource} implementations supported by
 * {@link DesignAttributeHandler}.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
DesignShortcutActionConverter (/server/src/main/java/com/vaadin/ui/declarative/converters/DesignShortcutActionConverter.java)/**
 * Converter for {@link ShortcutAction ShortcutActions}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DesignTimeZoneConverter (/server/src/main/java/com/vaadin/ui/declarative/converters/DesignTimeZoneConverter.java)/**
 * Utility class for {@link DesignAttributeHandler} that deals with converting
 * various TimeZones to string.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DesignToStringConverter (/server/src/main/java/com/vaadin/ui/declarative/converters/DesignToStringConverter.java)/**
 * Utility class for {@link DesignAttributeHandler} that deals with converting
 * various types to string.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @param <TYPE>
 *            Type of the data being converted.
 */
ShortcutKeyMapper (/server/src/main/java/com/vaadin/ui/declarative/converters/ShortcutKeyMapper.java)/**
 * Provides mappings between shortcut keycodes and their representation in
 * design attributes. Contains a default framework implementation as a field.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ComponentFactory (/server/src/main/java/com/vaadin/ui/declarative/Design.java)/**
     * Callback for creating instances of a given component class when reading
     * designs. The default implementation, {@link DefaultComponentFactory} will
     * use <code>Class.forName(className).newInstance()</code>, which might not
     * be suitable e.g. in an OSGi environment or if the Component instances
     * should be created as managed CDI beans.
     * <p>
     * Use {@link Design#setComponentFactory(ComponentFactory)} to configure
     * Vaadin to use a custom component factory.
     *
     * @since 7.4.1
     */
ComponentMapper (/server/src/main/java/com/vaadin/ui/declarative/Design.java)/**
     * Delegate for handling the mapping between tag names and component
     * instances.
     * <p>
     * Use {@link Design#setComponentMapper(ComponentMapper)} to configure
     * Vaadin to use a custom component mapper.
     *
     * @since 7.5.0
     * @author Vaadin Ltd
     */
DefaultComponentFactory (/server/src/main/java/com/vaadin/ui/declarative/Design.java)/**
     * Default implementation of {@link ComponentFactory}, using
     * <code>Class.forName(className).newInstance()</code> for finding the
     * component class and creating a component instance.
     *
     * @since 7.4.1
     */
DefaultComponentMapper (/server/src/main/java/com/vaadin/ui/declarative/Design.java)/**
     * Default implementation of {@link ComponentMapper}.
     *
     * @since 7.5.0
     */
Design (/server/src/main/java/com/vaadin/ui/declarative/Design.java)/**
 * Design is used for reading a component hierarchy from an html string or input
 * stream and, conversely, for writing an html representation corresponding to a
 * given component hierarchy.
 *
 * <p>
 * In html form a valid nonempty component hierarchy contains a single root
 * element located under the &lt;body&gt; tag. A hierarchy of components is
 * achieved by nesting other elements under the root element. An empty component
 * hierarchy is represented as no elements under the &lt;body&gt; tag.
 *
 * <p>
 * For writing a component hierarchy the root element is specified as a
 * Component parameter or as a DesignContext object containing the root
 * Component. An empty hierarchy can be written by giving a null root Component.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
AttributeCacheEntry (/server/src/main/java/com/vaadin/ui/declarative/DesignAttributeHandler.java)/**
     * Cache object for caching supported attributes and their getters and
     * setters
     *
     * @author Vaadin Ltd
     */
DesignAttributeHandler (/server/src/main/java/com/vaadin/ui/declarative/DesignAttributeHandler.java)/**
 * Default attribute handler implementation used when parsing designs to
 * component trees. Handles all the component attributes that do not require
 * custom handling.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ComponentCreationListener (/server/src/main/java/com/vaadin/ui/declarative/DesignContext.java)/**
     * Interface to be implemented by component creation listeners.
     *
     * @author Vaadin Ltd
     */
ComponentCreatedEvent (/server/src/main/java/com/vaadin/ui/declarative/DesignContext.java)/**
     * Component creation event that is fired when a component is created in
     * the. context
     *
     * @author Vaadin Ltd
     */
DesignContext (/server/src/main/java/com/vaadin/ui/declarative/DesignContext.java)/**
 * This class contains contextual information that is collected when a component
 * tree is constructed based on HTML design template. This information includes
 * mappings from local ids, global ids and captions to components , as well as a
 * mapping between prefixes and package names (such as "vaadin" ->
 * "com.vaadin.ui").
 *
 * Versions prior to 7.6 use "v" as the default prefix. Versions starting with
 * 7.6 support reading designs with either "v" or "vaadin" as the prefix, but
 * only write "vaadin" by default. Writing with the legacy prefix can be
 * activated with the property or context parameter
 * {@link Constants#SERVLET_PARAMETER_LEGACY_DESIGN_PREFIX}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DesignFormatter (/server/src/main/java/com/vaadin/ui/declarative/DesignFormatter.java)/**
 * Class focused on flexible and consistent formatting and parsing of different
 * values throughout reading and writing {@link Design}. An instance of this
 * class is used by {@link DesignAttributeHandler}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FieldBinder (/server/src/main/java/com/vaadin/ui/declarative/FieldBinder.java)/**
 * Binder utility that binds member fields of a design class instance to given
 * component instances. Only fields of type {@link Component} are bound
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FieldBindingException (/server/src/main/java/com/vaadin/ui/declarative/FieldBindingException.java)/**
 * Exception that is thrown when an error occurs during field binding when
 * reading a design template.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ShouldWriteDataDelegate (/server/src/main/java/com/vaadin/ui/declarative/ShouldWriteDataDelegate.java)/**
 * Delegate used by {@link DesignContext} to determine whether container data
 * should be written out for a component.
 *
 * @see DesignContext#shouldWriteData(Component)
 *
 * @since 7.5.0
 * @author Vaadin Ltd
 */
DeclarativeCaptionGenerator (/server/src/main/java/com/vaadin/ui/DeclarativeCaptionGenerator.java)/**
 * Item caption generator class for declarative support.
 * <p>
 * Provides a straightforward mapping between an item and its caption.
 *
 * @param <T>
 *            item type
 */
DeclarativeIconGenerator (/server/src/main/java/com/vaadin/ui/DeclarativeIconGenerator.java)/**
 * Icon generator class for declarative support.
 * <p>
 * Provides a straightforward mapping between an item and its icon.
 *
 * @param <T>
 *            item type
 */
DeclarativeItemEnabledProvider (/server/src/main/java/com/vaadin/ui/DeclarativeItemEnabledProvider.java)/**
 * Item enabled provider class for declarative support.
 * <p>
 * Provides a straightforward mapping between an item and its enable state.
 *
 * @param <T>
 *            item type
 */
DeclarativeValueProvider (/server/src/main/java/com/vaadin/ui/DeclarativeValueProvider.java)/**
 * Value provider class for declarative support.
 * <p>
 * Provides a straightforward mapping between an item and its value.
 *
 * @param <T>
 *            item type
 */
Dependency (/server/src/main/java/com/vaadin/ui/Dependency.java)/**
 * Represents a stylesheet or JavaScript to include on the page.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
DescriptionGenerator (/server/src/main/java/com/vaadin/ui/DescriptionGenerator.java)/**
 * A callback interface for generating description texts for an item.
 *
 * @author Vaadin Ltd
 * @since 8.2
 *
 * @param <T>
 *            the item type
 */
DragSourceExtension (/server/src/main/java/com/vaadin/ui/dnd/DragSourceExtension.java)/**
 * Extension to make a component drag source for HTML5 drag and drop
 * functionality.
 *
 * @param <T>
 *            Type of the component to be extended.
 * @author Vaadin Ltd
 * @since 8.1
 */
DropTargetExtension (/server/src/main/java/com/vaadin/ui/dnd/DropTargetExtension.java)/**
 * Extension to make a component a drop target for HTML5 drag and drop
 * functionality.
 *
 * @param <T>
 *            Type of the component to be extended.
 * @author Vaadin Ltd
 * @since 8.1
 */
DragEndEvent (/server/src/main/java/com/vaadin/ui/dnd/event/DragEndEvent.java)/**
 * HTML5 drag end event.
 *
 * @param <T>
 *            Type of the component that was dragged.
 * @author Vaadin Ltd
 * @see DragSourceExtension#addDragEndListener(DragEndListener)
 * @since 8.1
 */
DragEndListener (/server/src/main/java/com/vaadin/ui/dnd/event/DragEndListener.java)/**
 * Interface to be implemented when creating a dragend listener on a drag source
 * for HTML5 drag and drop.
 *
 * @param <T>
 *            Type of draggable component.
 * @author Vaadin Ltd
 * @see DragSourceExtension#addDragEndListener(DragEndListener)
 * @since 8.1
 */
DragStartEvent (/server/src/main/java/com/vaadin/ui/dnd/event/DragStartEvent.java)/**
 * HTML5 drag start event.
 *
 * @param <T>
 *            Type of the component that is dragged.
 * @author Vaadin Ltd
 * @see DragSourceExtension#addDragStartListener(DragStartListener)
 * @since 8.1
 */
DragStartListener (/server/src/main/java/com/vaadin/ui/dnd/event/DragStartListener.java)/**
 * Interface to be implemented when creating a dragstart listener on a drag
 * source for HTML5 drag and drop.
 *
 * @param <T>
 *            Type of draggable component.
 * @author Vaadin Ltd
 * @see DragSourceExtension#addDragStartListener(DragStartListener)
 * @since 8.1
 */
DropEvent (/server/src/main/java/com/vaadin/ui/dnd/event/DropEvent.java)/**
 * Server side drop event. Fired when an HTML5 drop happens.
 *
 * @param <T>
 *            Type of the drop target component.
 * @author Vaadin Ltd
 * @see DropTargetExtension#addDropListener(DropListener)
 * @since 8.1
 */
DropListener (/server/src/main/java/com/vaadin/ui/dnd/event/DropListener.java)/**
 * Interface to be implemented when creating a drop listener on a drop target
 * for HTML5 drag and drop.
 *
 * @param <T>
 *            Type of the drop target component.
 * @author Vaadin Ltd
 * @see DropTargetExtension#addDropListener(DropListener)
 * @since 8.1
 */
FileDropEvent (/server/src/main/java/com/vaadin/ui/dnd/event/FileDropEvent.java)/**
 * File drop event that contains the collection of files dropped on a file drop
 * target.
 *
 * @param <T>
 *            Type of the file drop target component.
 * @author Vaadin Ltd
 * @see FileDropHandler
 * @since 8.1
 */
FileDropHandler (/server/src/main/java/com/vaadin/ui/dnd/FileDropHandler.java)/**
 * Handles the drop event on a file drop target.
 *
 * @param <T>
 *            Type of the file drop target component.
 * @author Vaadin Ltd
 * @see FileDropEvent
 * @see com.vaadin.ui.dnd.FileDropTarget
 * @since 8.1
 */
FileDropTarget (/server/src/main/java/com/vaadin/ui/dnd/FileDropTarget.java)/**
 * Extension to add drop target functionality to a widget for accepting and
 * uploading files.
 * <p>
 * Dropped files are handled in the {@link FileDropHandler} given in the
 * constructor. The file details are first sent to the handler, which can then
 * decide which files to upload to server by setting a {@link StreamVariable}
 * with {@link Html5File#setStreamVariable(StreamVariable)}.
 *
 * @param <T>
 *            Type of the component to be extended.
 * @author Vaadin Ltd
 * @since 8.1
 */
WrapperTransferable (/server/src/main/java/com/vaadin/ui/DragAndDropWrapper.java)/**
     * @deprecated Since 8.1, will be replaced by FileDropTargetExtension and
     *             FileDropEvent,
     *             https://github.com/vaadin/framework/issues/8891
     */
DragAndDropWrapper (/server/src/main/java/com/vaadin/ui/DragAndDropWrapper.java)/**
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with {@link DragSourceExtension} and
 *             {@link DropTargetExtension}.
 */
Embedded (/server/src/main/java/com/vaadin/ui/Embedded.java)/**
 * A component for embedding external objects.
 * <p>
 * The {@code Embedded} component is used to display various types of multimedia
 * content using the HTML {@code <object>} element. This includes PDF documents,
 * Java applets, and QuickTime videos. Installing a browser plug-in is usually
 * required to actually view the embedded content.
 * <p>
 * Note that before Vaadin 7, {@code Embedded} was also used to display images,
 * Adobe Flash objects, and embedded web pages. This use of the component is
 * deprecated in Vaadin 7; the {@link Image}, {@link Flash}, and
 * {@link BrowserFrame} components should be used instead, respectively.
 *
 * @see Video
 * @see Audio
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
Flash (/server/src/main/java/com/vaadin/ui/Flash.java)/**
 * A component for displaying Adobe® Flash® content.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 */
FormLayout (/server/src/main/java/com/vaadin/ui/FormLayout.java)/**
 * FormLayout is used to layout fields.
 *
 * FormLayout is a close relative of {@link VerticalLayout}, but in FormLayout
 * captions are rendered to the left of their respective components. Required
 * and validation indicators are shown between the captions and the fields.
 *
 * FormLayout by default has component spacing on. Also margin top and margin
 * bottom are by default on.
 *
 */
FetchItemsCallback (/server/src/main/java/com/vaadin/ui/Grid.java)/**
     * A callback method for fetching items. The callback is provided with a
     * list of sort orders, offset index and limit.
     *
     * @param <T>
     *            the grid bean type
     */
ColumnReorderEvent (/server/src/main/java/com/vaadin/ui/Grid.java)/**
     * An event that is fired when the columns are reordered.
     */
ColumnResizeEvent (/server/src/main/java/com/vaadin/ui/Grid.java)/**
     * An event that is fired when a column is resized, either programmatically
     * or by the user.
     */
ItemClick (/server/src/main/java/com/vaadin/ui/Grid.java)/**
     * An event fired when an item in the Grid has been clicked.
     *
     * @param <T>
     *            the grid bean type
     */
GridContextClickEvent (/server/src/main/java/com/vaadin/ui/Grid.java)/**
     * ContextClickEvent for the Grid Component.
     *
     * <p>
     * Usage:
     *
     * <pre>
     * grid.addContextClickListener(event -&gt; Notification.show(
     *         ((GridContextClickEvent&lt;Person&gt;) event).getItem() + " Clicked"));
     * </pre>
     *
     * @param <T>
     *            the grid bean type
     */
ColumnVisibilityChangeEvent (/server/src/main/java/com/vaadin/ui/Grid.java)/**
     * An event that is fired when a column's visibility changes.
     *
     * @since 7.5.0
     */
AbstractGridExtension (/server/src/main/java/com/vaadin/ui/Grid.java)/**
     * A helper base class for creating extensions for the Grid component.
     *
     * @param <T>
     */
DetailsManager (/server/src/main/java/com/vaadin/ui/Grid.java)/**
     * Class for managing visible details rows.
     *
     * @param <T>
     *            the grid bean type
     */
Column (/server/src/main/java/com/vaadin/ui/Grid.java)/**
     * This extension manages the configuration and data communication for a
     * Column inside of a Grid component.
     *
     * @param <T>
     *            the grid bean type
     * @param <V>
     *            the column value type
     */
Grid (/server/src/main/java/com/vaadin/ui/Grid.java)/**
 * A grid component for displaying tabular data.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the grid bean type
 */
Area (/server/src/main/java/com/vaadin/ui/GridLayout.java)/**
     * Defines a rectangular area of cells in a GridLayout.
     *
     * <p>
     * Also maintains a reference to the component contained in the area.
     * </p>
     *
     * <p>
     * The area is specified by the cell coordinates of its upper left corner
     * (column1,row1) and lower right corner (column2,row2). As otherwise with
     * GridLayout, the column and row coordinates start from zero.
     * </p>
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
OverlapsException (/server/src/main/java/com/vaadin/ui/GridLayout.java)/**
     * Gridlayout does not support laying components on top of each other. An
     * <code>OverlapsException</code> is thrown when a component already exists
     * (even partly) at the same space on a grid with the new component.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
OutOfBoundsException (/server/src/main/java/com/vaadin/ui/GridLayout.java)/**
     * An <code>Exception</code> object which is thrown when an area exceeds the
     * bounds of the grid.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
GridLayout (/server/src/main/java/com/vaadin/ui/GridLayout.java)/**
 * A layout where the components are laid out on a grid using cell coordinates.
 *
 * <p>
 * The GridLayout also maintains a cursor for adding components in
 * left-to-right, top-to-bottom order.
 * </p>
 *
 * <p>
 * Each component in a <code>GridLayout</code> uses a defined
 * {@link GridLayout.Area area} (column1,row1,column2,row2) from the grid. The
 * components may not overlap with the existing components - if you try to do so
 * you will get an {@link OverlapsException}. Adding a component with cursor
 * automatically extends the grid by increasing the grid height.
 * </p>
 *
 * <p>
 * The grid coordinates, which are specified by a row and column index, always
 * start from 0 for the topmost row and the leftmost column.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
HasChildMeasurementHint (/server/src/main/java/com/vaadin/ui/HasChildMeasurementHint.java)/**
 * Component with layout measuring hint. Used to improve granularity of control
 * over child component measurements.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
ComponentAttachDetachNotifier (/server/src/main/java/com/vaadin/ui/HasComponents.java)/**
     * Interface for {@link HasComponents} implementations that support sending
     * attach and detach events for components.
     *
     * @since 7.0
     */
ComponentAttachListener (/server/src/main/java/com/vaadin/ui/HasComponents.java)/**
     * Component attach listener interface.
     */
ComponentDetachListener (/server/src/main/java/com/vaadin/ui/HasComponents.java)/**
     * Component detach listener interface.
     */
ComponentAttachEvent (/server/src/main/java/com/vaadin/ui/HasComponents.java)/**
     * Component attach event sent when a component is attached to container.
     */
ComponentDetachEvent (/server/src/main/java/com/vaadin/ui/HasComponents.java)/**
     * Component detach event sent when a component is detached from container.
     */
HasComponents (/server/src/main/java/com/vaadin/ui/HasComponents.java)/**
 * Interface that must be implemented by all {@link Component}s that contain
 * other {@link Component}s.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 */
HasStyleNames (/server/src/main/java/com/vaadin/ui/HasStyleNames.java)/**
 * Implemented by components which support style names.
 *
 * <p>
 * Each style name will occur only once as specified and it is not prefixed with
 * the style name of the component.
 * </p>
 *
 * @since 8.7
 */
HasValueChangeMode (/server/src/main/java/com/vaadin/ui/HasValueChangeMode.java)/**
 * Implemented by components which support value change modes.
 *
 * @since 8.0
 */
HorizontalLayout (/server/src/main/java/com/vaadin/ui/HorizontalLayout.java)/**
 * Horizontal layout
 *
 * <code>HorizontalLayout</code> is a component container, which shows the
 * subcomponents in the order of their addition (horizontally).
 *
 * @author Vaadin Ltd.
 * @since 5.3
 */
HorizontalSplitPanel (/server/src/main/java/com/vaadin/ui/HorizontalSplitPanel.java)/**
 * A horizontal split panel contains two components and lays them horizontally.
 * The first component is on the left side.
 *
 * <pre>
 *
 *      +---------------------++----------------------+
 *      |                     ||                      |
 *      | The first component || The second component |
 *      |                     ||                      |
 *      +---------------------++----------------------+
 *
 *                            ^
 *                            |
 *                      the splitter
 *
 * </pre>
 *
 * @author Vaadin Ltd.
 * @since 6.5
 */
Html5File (/server/src/main/java/com/vaadin/ui/Html5File.java)/**
 * {@link DragAndDropWrapper} can receive also files from client computer if
 * appropriate HTML 5 features are supported on client side. This class wraps
 * information about dragged file on server side.
 */
IconGenerator (/server/src/main/java/com/vaadin/ui/IconGenerator.java)/**
 * A callback interface for generating icons for an item.
 *
 * @param <T>
 *            item type for which the icon is generated
 * @since 8.0
 */
Image (/server/src/main/java/com/vaadin/ui/Image.java)/**
 * Component for embedding images.
 *
 * @author Vaadin Ltd.
 * @since 7.0
 */
InlineDateField (/server/src/main/java/com/vaadin/ui/InlineDateField.java)/**
 * A date entry component, which displays the actual date selector inline.
 *
 * @see AbstractLocalDateField
 * @see DateField
 * @author Vaadin Ltd.
 * @since 8.0
 */
InlineDateTimeField (/server/src/main/java/com/vaadin/ui/InlineDateTimeField.java)/**
 * A date time entry component, which displays the actual date selector inline.
 *
 * @see AbstractLocalDateTimeField
 * @see DateTimeField
 * @author Vaadin Ltd.
 * @since 8.0
 */
ItemCaptionGenerator (/server/src/main/java/com/vaadin/ui/ItemCaptionGenerator.java)/**
 * {@link ItemCaptionGenerator} can be used to customize the string shown to the
 * user for an item.
 *
 * @see ComboBox#setItemCaptionGenerator(ItemCaptionGenerator)
 * @param <T>
 *            item type
 * @since 8.0
 * @author Vaadin Ltd
 */
ItemCollapseAllowedProvider (/server/src/main/java/com/vaadin/ui/ItemCollapseAllowedProvider.java)/**
 * A callback interface for resolving whether client-side collapsing should be
 * allowed for an item in a listing component that displays hierarchical data,
 * such as {@link TreeGrid}.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @see TreeGrid#setItemCollapseAllowedProvider(ItemCollapseAllowedProvider)
 *
 * @param <T>
 *            item data type
 */
JavaScript (/server/src/main/java/com/vaadin/ui/JavaScript.java)/**
 * Provides access to JavaScript functionality in the web browser. To get an
 * instance of JavaScript, either use Page.getJavaScript() or
 * JavaScript.getCurrent() as a shorthand for getting the JavaScript object
 * corresponding to the current Page.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
JavaScriptFunction (/server/src/main/java/com/vaadin/ui/JavaScriptFunction.java)/**
 * Defines a method that is called by a client-side JavaScript function. When
 * the corresponding JavaScript function is called, the {@link #call(JsonArray)}
 * method is invoked.
 *
 * @see JavaScript#addFunction(String, JavaScriptFunction)
 * @see AbstractJavaScriptComponent#addFunction(String, JavaScriptFunction)
 * @see AbstractJavaScriptExtension#addFunction(String, JavaScriptFunction)
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
Label (/server/src/main/java/com/vaadin/ui/Label.java)/**
 * Label component for showing non-editable short texts.
 * <p>
 * The label content can be set to the modes specified by {@link ContentMode}.
 * If content mode is set to HTML, any HTML content is allowed.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
AlignmentHandler (/server/src/main/java/com/vaadin/ui/Layout.java)/**
     * AlignmentHandler is most commonly an advanced {@link Layout} that can
     * align its components.
     */
SpacingHandler (/server/src/main/java/com/vaadin/ui/Layout.java)/**
     * This type of layout supports automatic addition of space between its
     * components.
     *
     */
MarginHandler (/server/src/main/java/com/vaadin/ui/Layout.java)/**
     * This type of layout supports automatic addition of margins (space around
     * its components).
     */
Layout (/server/src/main/java/com/vaadin/ui/Layout.java)/**
 * Extension to the {@link ComponentContainer} interface which adds the
 * layouting control to the elements in the container. This is required by the
 * various layout components to enable them to place other components in
 * specific locations in the UI.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
LegacyComponent (/server/src/main/java/com/vaadin/ui/LegacyComponent.java)/**
 * Interface provided to ease porting of Vaadin 6 components to Vaadin 7. By
 * implementing this interface your Component will be able to use
 * {@link #paintContent(PaintTarget)} and
 * {@link #changeVariables(Object, java.util.Map)} just like in Vaadin 6.
 *
 * @deprecated As of 7.0. This class is only intended to ease migration and
 *             should not be used for new projects.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
LegacyWindow (/server/src/main/java/com/vaadin/ui/LegacyWindow.java)/**
 * Helper class to emulate the main window from Vaadin 6 using UIs. This class
 * should be used in the same way as Window used as a browser level window in
 * Vaadin 6 with {@link com.vaadin.server.LegacyApplication}
 */
Link (/server/src/main/java/com/vaadin/ui/Link.java)/**
 * Link is used to create external or internal URL links.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
ListSelect (/server/src/main/java/com/vaadin/ui/ListSelect.java)/**
 * This is a simple list select without, for instance, support for new items,
 * lazyloading, and other advanced features.
 *
 * @author Vaadin Ltd
 *
 * @param <T>
 *            item type
 */
LoadingIndicatorConfiguration (/server/src/main/java/com/vaadin/ui/LoadingIndicatorConfiguration.java)/**
 * Provides method for configuring the loading indicator.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
LoginEvent (/server/src/main/java/com/vaadin/ui/LoginForm.java)/**
     * Event sent when the login form is submitted.
     */
LoginListener (/server/src/main/java/com/vaadin/ui/LoginForm.java)/**
     * Listener triggered when a login occurs in a {@link LoginForm}.
     */
LoginStreamSource (/server/src/main/java/com/vaadin/ui/LoginForm.java)/**
     * Internal stream source for the login URL - always returns "Success" and
     * ignores the values received.
     */
LoginForm (/server/src/main/java/com/vaadin/ui/LoginForm.java)/**
 * Login form with auto-completion and auto-fill for all major browsers. You can
 * derive from this class and implement the
 * {@link #createContent(com.vaadin.ui.TextField, com.vaadin.ui.PasswordField, com.vaadin.ui.Button)}
 * method to build the layout using the text fields and login button that are
 * passed to that method. The supplied components are specially treated so that
 * they work with password managers.
 * <p>
 * To customize the fields or to replace them with your own implementations, you
 * can override {@link #createUsernameField()}, {@link #createPasswordField()}
 * and {@link #createLoginButton()}. These methods are called automatically and
 * cannot be called by your code. Captions can be reset by overriding
 * {@link #getUsernameCaption()}, {@link #getPasswordCaption()} and
 * {@link #getLoginButtonCaption()}.
 * <p>
 * Note that the API of LoginForm changed significantly in Vaadin 7.7.
 *
 * @since 5.3
 */
Command (/server/src/main/java/com/vaadin/ui/MenuBar.java)/**
     * This interface contains the layer for menu commands of the
     * {@link com.vaadin.ui.MenuBar} class. It's method will fire when the user
     * clicks on the containing {@link com.vaadin.ui.MenuBar.MenuItem}. The
     * selected item is given as an argument.
     */
MenuItem (/server/src/main/java/com/vaadin/ui/MenuBar.java)/**
     * A composite class for menu items and sub-menus. You can set commands to
     * be fired on user click by implementing the
     * {@link com.vaadin.ui.MenuBar.Command} interface. You can also add
     * multiple MenuItems to a MenuItem and create a sub-menu.
     *
     */
MenuBar (/server/src/main/java/com/vaadin/ui/MenuBar.java)/**
 * <p>
 * A class representing a horizontal menu bar. The menu can contain MenuItem
 * objects, which in turn can contain more MenuBars. These sub-level MenuBars
 * are represented as vertical menu.
 * </p>
 */
MultiSelect (/server/src/main/java/com/vaadin/ui/MultiSelect.java)/**
 * Multi selection component which allows to select and deselect multiple items.
 *
 * @author Vaadin Ltd
 *
 * @param <T>
 *            the type of the items to select
 *
 * @since 8.0
 *
 */
NativeSelect (/server/src/main/java/com/vaadin/ui/NativeSelect.java)/**
 * A simple drop-down select component. Represented on the client side by a
 * "native" HTML {@code <select>} element. Lacks advanced features such as lazy
 * loading, filtering, and adding new items.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the data item type
 *
 * @see com.vaadin.ui.ComboBox
 */
CloseEvent (/server/src/main/java/com/vaadin/ui/Notification.java)/**
     * Event fired when a notification is closed.
     *
     * @since 8.2
     */
CloseListener (/server/src/main/java/com/vaadin/ui/Notification.java)/**
     * An interface used for listening to Notification close events. Add the
     * CloseListener to a Notification and
     * {@link CloseListener#notificationClose(CloseEvent)} will be called
     * whenever the Notification is closed.
     *
     * @since 8.2
     */
Notification (/server/src/main/java/com/vaadin/ui/Notification.java)/**
 * A notification message, used to display temporary messages to the user - for
 * example "Document saved", or "Save failed".
 * <p>
 * The notification message can consist of several parts: caption, description
 * and icon. It is usually used with only caption - one should be wary of
 * filling the notification with too much information.
 * </p>
 * <p>
 * The notification message tries to be as unobtrusive as possible, while still
 * drawing needed attention. There are several basic types of messages that can
 * be used in different situations:
 * <ul>
 * <li>TYPE_HUMANIZED_MESSAGE fades away quickly as soon as the user uses the
 * mouse or types something. It can be used to show fairly unimportant messages,
 * such as feedback that an operation succeeded ("Document Saved") - the kind of
 * messages the user ignores once the application is familiar.</li>
 * <li>TYPE_WARNING_MESSAGE is shown for a short while after the user uses the
 * mouse or types something. It's default style is also more noticeable than the
 * humanized message. It can be used for messages that do not contain a lot of
 * important information, but should be noticed by the user. Despite the name,
 * it does not have to be a warning, but can be used instead of the humanized
 * message whenever you want to make the message a little more noticeable.</li>
 * <li>TYPE_ERROR_MESSAGE requires to user to click it before disappearing, and
 * can be used for critical messages.</li>
 * <li>TYPE_TRAY_NOTIFICATION is shown for a while in the lower right corner of
 * the window, and can be used for "convenience notifications" that do not have
 * to be noticed immediately, and should not interfere with the current task -
 * for instance to show "You have a new message in your inbox" while the user is
 * working in some other area of the application.</li>
 * </ul>
 * </p>
 * <p>
 * In addition to the basic pre-configured types, a Notification can also be
 * configured to show up in a custom position, for a specified time (or until
 * clicked), and with a custom stylename. An icon can also be added.
 * </p>
 *
 */
NotificationConfiguration (/server/src/main/java/com/vaadin/ui/NotificationConfiguration.java)/**
 * Provides methods for configuring the notification.
 *
 * @author Vaadin Ltd
 * @since 7.2
 */
Panel (/server/src/main/java/com/vaadin/ui/Panel.java)/**
 * Panel - a simple single component container.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
PasswordField (/server/src/main/java/com/vaadin/ui/PasswordField.java)/**
 * A field that is used to enter secret text information like passwords. The
 * entered text is not displayed on the screen.
 */
Content (/server/src/main/java/com/vaadin/ui/PopupView.java)/**
     * Used to deliver customized content-packages to the PopupView. These are
     * dynamically loaded when they are redrawn. The user must take care that
     * neither of these methods ever return null.
     */
PopupVisibilityEvent (/server/src/main/java/com/vaadin/ui/PopupView.java)/**
     * This event is received by the PopupVisibilityListeners when the
     * visibility of the popup changes. You can get the new visibility directly
     * with {@link #isPopupVisible()}, or get the PopupView that produced the
     * event with {@link #getPopupView()}.
     *
     */
PopupVisibilityListener (/server/src/main/java/com/vaadin/ui/PopupView.java)/**
     * Defines a listener that can receive a PopupVisibilityEvent when the
     * visibility of the popup changes.
     *
     */
PopupView (/server/src/main/java/com/vaadin/ui/PopupView.java)/**
 *
 * A component for displaying a two different views to data. The minimized view
 * is normally used to render the component, and when it is clicked the full
 * view is displayed on a popup. The inner class {@link PopupView.Content} is
 * used to deliver contents to this component.
 *
 * @author Vaadin Ltd.
 */
ProgressBar (/server/src/main/java/com/vaadin/ui/ProgressBar.java)/**
 * A component for displaying progress.
 * <p>
 * The default mode is to show the current progress internally represented by a
 * floating point value between 0 and 1 (inclusive). The progress bar can also
 * be in an indeterminate mode showing an animation indicating that the task is
 * running but without providing any information about the current progress.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
PushConfiguration (/server/src/main/java/com/vaadin/ui/PushConfiguration.java)/**
 * Provides method for configuring the push channel.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
RadioButtonGroup (/server/src/main/java/com/vaadin/ui/RadioButtonGroup.java)/**
 * A group of RadioButtons. Individual radiobuttons are made from items supplied
 * by a {@link DataProvider}. RadioButtons may have captions and icons.
 *
 * @param <T>
 *            item type
 * @author Vaadin Ltd
 * @since 8.0
 */
ReconnectDialogConfiguration (/server/src/main/java/com/vaadin/ui/ReconnectDialogConfiguration.java)/**
 * Provides method for configuring the reconnect dialog.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
AbstractJavaScriptRenderer (/server/src/main/java/com/vaadin/ui/renderers/AbstractJavaScriptRenderer.java)/**
 * Base class for Renderers with all client-side logic implemented using
 * JavaScript.
 * <p>
 * When a new JavaScript renderer is initialized in the browser, the framework
 * will look for a globally defined JavaScript function that will initialize the
 * renderer. The name of the initialization function is formed by replacing .
 * with _ in the name of the server-side class. If no such function is defined,
 * each super class is used in turn until a match is found. The framework will
 * thus first attempt with <code>com_example_MyRenderer</code> for the
 * server-side
 * <code>com.example.MyRenderer extends AbstractJavaScriptRenderer</code> class.
 * If MyRenderer instead extends <code>com.example.SuperRenderer</code> , then
 * <code>com_example_SuperRenderer</code> will also be attempted if
 * <code>com_example_MyRenderer</code> has not been defined.
 * <p>
 *
 * In addition to the general JavaScript extension functionality explained in
 * {@link AbstractJavaScriptExtension}, this class also provides some
 * functionality specific for renderers.
 * <p>
 * The initialization function will be called with <code>this</code> pointing to
 * a connector wrapper object providing integration to Vaadin. Please note that
 * in JavaScript, <code>this</code> is not necessarily defined inside callback
 * functions and it might therefore be necessary to assign the reference to a
 * separate variable, e.g. <code>var self = this;</code>. In addition to the
 * extension functions described for {@link AbstractJavaScriptExtension}, the
 * connector wrapper object also provides this function:
 * <ul>
 * <li><code>getRowKey(rowIndex)</code> - Gets a unique identifier for the row
 * at the given index. This identifier can be used on the server to retrieve the
 * corresponding ItemId using {@link #getItemId(String)}.</li>
 * </ul>
 * The connector wrapper also supports these special functions that can be
 * implemented by the connector:
 * <ul>
 * <li><code>render(cell, data)</code> - Callback for rendering the given data
 * into the given cell. The structure of cell and data are described in separate
 * sections below. The renderer is required to implement this function.
 * Corresponds to
 * {@link com.vaadin.client.renderers.Renderer#render(com.vaadin.client.widget.grid.RendererCellReference, Object)}
 * .</li>
 * <li><code>init(cell)</code> - Prepares a cell for rendering. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#init(com.vaadin.client.widget.grid.RendererCellReference)}
 * .</li>
 * <li><code>destroy(cell)</code> - Allows the renderer to release resources
 * allocate for a cell that will no longer be used. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#destroy(com.vaadin.client.widget.grid.RendererCellReference)}
 * .</li>
 * <li><code>onActivate(cell)</code> - Called when the cell is activated by the
 * user e.g. by double clicking on the cell or pressing enter with the cell
 * focused. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#onActivate(com.vaadin.client.widget.grid.CellReference)}
 * .</li>
 * <li><code>getConsumedEvents()</code> - Returns a JavaScript array of event
 * names that should cause onBrowserEvent to be invoked whenever an event is
 * fired for a cell managed by this renderer. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#getConsumedEvents()}.</li>
 * <li><code>onBrowserEvent(cell, event)</code> - Called by Grid when an event
 * of a type returned by getConsumedEvents is fired for a cell managed by this
 * renderer. Corresponds to
 * {@link com.vaadin.client.renderers.ComplexRenderer#onBrowserEvent(com.vaadin.client.widget.grid.CellReference, com.google.gwt.dom.client.NativeEvent)}
 * .</li>
 * </ul>
 *
 * <p>
 * The cell object passed to functions defined by the renderer has these
 * properties:
 * <ul>
 * <li><code>element</code> - The DOM element corresponding to this cell.
 * Readonly.</li>
 * <li><code>rowIndex</code> - The current index of the row of this cell.
 * Readonly.</li>
 * <li><code>columnIndex</code> - The current index of the column of this cell.
 * Readonly.</li>
 * <li><code>colSpan</code> - The number of columns spanned by this cell. Only
 * supported in the object passed to the <code>render</code> function - other
 * functions should not use the property. Readable and writable.
 * </ul>
 *
 * @param <T>
 *            the grid type this renderer can be attached to
 * @param <V>
 *            the type this renderer knows how to present
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
AbstractRenderer (/server/src/main/java/com/vaadin/ui/renderers/AbstractRenderer.java)/**
 * An abstract base class for server-side
 * {@link com.vaadin.ui.renderers.Renderer Grid renderers}.
 *
 * <p>
 * This class currently extends the AbstractExtension superclass, but this fact
 * should be regarded as an implementation detail and subject to change in a
 * future major or minor Vaadin version.
 *
 * @param <T>
 *            the grid type this renderer can be attached to
 * @param <V>
 *            the type this renderer knows how to present
 * @since 8.0
 */
ButtonRenderer (/server/src/main/java/com/vaadin/ui/renderers/ButtonRenderer.java)/**
 * A Renderer that displays a button with a textual caption. The value of the
 * corresponding property is used as the caption. Click listeners can be added
 * to the renderer, invoked when any of the rendered buttons is clicked.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RendererClickListener (/server/src/main/java/com/vaadin/ui/renderers/ClickableRenderer.java)/**
     * An interface for listening to {@link RendererClickEvent renderer click
     * events}.
     *
     * @see ButtonRenderer#addClickListener(RendererClickListener)
     */
RendererClickEvent (/server/src/main/java/com/vaadin/ui/renderers/ClickableRenderer.java)/**
     * An event fired when a clickable widget rendered by a ClickableRenderer is
     * clicked.
     *
     * @param <T>
     *            the item type associated with this click event
     */
ClickableRenderer (/server/src/main/java/com/vaadin/ui/renderers/ClickableRenderer.java)/**
 * An abstract superclass for {@link Renderer}s that render clickable items.
 * Click listeners can be added to a renderer to be notified when any of the
 * rendered items is clicked.
 *
 * @param <T>
 *            the type of the parent {@link Grid}
 * @param <V>
 *            the type presented by the renderer
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ComponentRenderer (/server/src/main/java/com/vaadin/ui/renderers/ComponentRenderer.java)/**
 * A renderer for presenting Components.
 * <p>
 * <strong>Note:</strong> The use of ComponentRenderer causes the Grid to
 * generate components for all items currently available in the client-side.
 * This means that a number of components is always generated and sent to the
 * client. Using complex structures of many nested components might be heavy to
 * generate and store, which will lead to performance problems.
 * <p>
 * <strong>Note:</strong> Components will occasionally be generated again during
 * runtime e.g. when selection changes. If your component has an internal state
 * that is not stored into the object, you should reuse the same component
 * instances.
 * <p>
 * Example of how to add a {@link Label} component to {@link Grid}:
 *
 * <pre>
 * Grid<Person> grid;
 * grid.addColumn(person -> new Label(person.getFullName()),
 *         new ComponentRenderer()).setCaption("Full Name");
 * </pre>
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
DateRenderer (/server/src/main/java/com/vaadin/ui/renderers/DateRenderer.java)/**
 * A renderer for presenting date values.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HtmlRenderer (/server/src/main/java/com/vaadin/ui/renderers/HtmlRenderer.java)/**
 * A renderer for presenting HTML content.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
ImageRenderer (/server/src/main/java/com/vaadin/ui/renderers/ImageRenderer.java)/**
 * A renderer for presenting images.
 * <p>
 * The image for each rendered cell is read from a Resource-typed property in
 * the data source. Only {@link ExternalResource}s and {@link ThemeResource}s
 * are currently supported.
 *
 * @param <T>
 *            the type of the grid this renderer can be attached to
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
LocalDateRenderer (/server/src/main/java/com/vaadin/ui/renderers/LocalDateRenderer.java)/**
 * A renderer for presenting date values.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
LocalDateTimeRenderer (/server/src/main/java/com/vaadin/ui/renderers/LocalDateTimeRenderer.java)/**
 * A renderer for presenting {@code LocalDateTime} objects.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
NumberRenderer (/server/src/main/java/com/vaadin/ui/renderers/NumberRenderer.java)/**
 * A renderer for presenting number values.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ProgressBarRenderer (/server/src/main/java/com/vaadin/ui/renderers/ProgressBarRenderer.java)/**
 * A renderer that represents double values between 0 and 1 as a graphical
 * progress bar.
 *
 * @author Vaadin Ltd
 * @since 7.4
 */
Renderer (/server/src/main/java/com/vaadin/ui/renderers/Renderer.java)/**
 * A ClientConnector for controlling client-side
 * {@link com.vaadin.client.renderers.Renderer Grid renderers}. Renderers
 * currently extend the Extension interface, but this fact should be regarded as
 * an implementation detail and subject to change in a future major or minor
 * Vaadin revision.
 *
 * @param <T>
 *            the type this renderer knows how to present
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TextRenderer (/server/src/main/java/com/vaadin/ui/renderers/TextRenderer.java)/**
 * A renderer for presenting a plain text representation of any value.
 * {@link Object#toString()} is used for determining the text to show.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
RichTextArea (/server/src/main/java/com/vaadin/ui/RichTextArea.java)/**
 * A simple RichTextArea to edit HTML format text.
 */
SelectiveRenderer (/server/src/main/java/com/vaadin/ui/SelectiveRenderer.java)/**
 * Interface implemented by {@link HasComponents} implementors that wish to
 * dynamically be able to prevent given child components from reaching the
 * client side.
 *
 * @author Vaadin Ltd
 * @since 7.0
 *
 */
SingleComponentContainer (/server/src/main/java/com/vaadin/ui/SingleComponentContainer.java)/**
 * Interface for component containers that have one child component and do not
 * support adding or removing components.
 *
 * For component containers that support multiple children, see
 * {@link ComponentContainer} instead.
 *
 * @since 7.0
 */
SingleSelect (/server/src/main/java/com/vaadin/ui/SingleSelect.java)/**
 * Single selection component whose selection is treated as a value.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <V>
 *            the selection value type
 *
 */
ValueOutOfBoundsException (/server/src/main/java/com/vaadin/ui/Slider.java)/**
     * Thrown when the value of the slider is about to be set to a value that is
     * outside the valid range of the slider.
     *
     * @author Vaadin Ltd.
     *
     */
Slider (/server/src/main/java/com/vaadin/ui/Slider.java)/**
 * A component for selecting a numerical value within a range.
 *
 * @author Vaadin Ltd.
 */
StyleGenerator (/server/src/main/java/com/vaadin/ui/StyleGenerator.java)/**
 * A callback interface for generating custom CSS class names for items.
 *
 * @param <T>
 *            the item type
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
TabsheetServerRpcImpl (/server/src/main/java/com/vaadin/ui/TabSheet.java)/**
     * Client to server RPC implementation for TabSheet.
     *
     * @since 7.2
     */
SelectedTabChangeEvent (/server/src/main/java/com/vaadin/ui/TabSheet.java)/**
     * Selected tab change event. This event is sent when the selected (shown)
     * tab in the tab sheet is changed.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
SelectedTabChangeListener (/server/src/main/java/com/vaadin/ui/TabSheet.java)/**
     * Selected tab change event listener. The listener is called whenever
     * another tab is selected, including when adding the first tab to a
     * tabsheet.
     *
     * @author Vaadin Ltd.
     *
     * @since 3.0
     */
Tab (/server/src/main/java/com/vaadin/ui/TabSheet.java)/**
     * Tab meta-data for a component in a {@link TabSheet}.
     *
     * The meta-data includes the tab caption, icon, visibility and enabledness,
     * closability, description (tooltip) and an optional component error shown
     * in the tab.
     *
     * Tabs are identified by the component contained on them in most cases, and
     * the meta-data can be obtained with {@link TabSheet#getTab(Component)}.
     */
TabSheetTabImpl (/server/src/main/java/com/vaadin/ui/TabSheet.java)/**
     * TabSheet's implementation of {@link Tab} - tab metadata.
     */
CloseHandler (/server/src/main/java/com/vaadin/ui/TabSheet.java)/**
     * CloseHandler is used to process tab closing events. Default behavior is
     * to remove the tab from the TabSheet.
     *
     * @author Jouni Koivuviita / Vaadin Ltd.
     * @since 6.2.0
     *
     */
TabSheet (/server/src/main/java/com/vaadin/ui/TabSheet.java)/**
 * TabSheet component.
 *
 * Tabs are typically identified by the component contained on the tab (see
 * {@link ComponentContainer}), and tab metadata (including caption, icon,
 * visibility, enabledness, closability etc.) is kept in separate {@link Tab}
 * instances.
 *
 * Tabs added with {@link #addComponent(Component)} get the caption and the icon
 * of the component at the time when the component is created, and these are not
 * automatically updated after tab creation.
 *
 * A tab sheet can have multiple tab selection listeners and one tab close
 * handler ({@link CloseHandler}), which by default removes the tab from the
 * TabSheet.
 *
 * The {@link TabSheet} can be styled with the .v-tabsheet, .v-tabsheet-tabs and
 * .v-tabsheet-content styles.
 *
 * The current implementation does not load the tabs to the UI before the first
 * time they are shown, but this may change in future releases.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
TextArea (/server/src/main/java/com/vaadin/ui/TextArea.java)/**
 * A text field that supports multi line editing.
 */
TextField (/server/src/main/java/com/vaadin/ui/TextField.java)/**
 * A component for editing textual data that fits on a single line. For a
 * multi-line textarea, see the {@link TextArea} component.
 *
 * @author Vaadin Ltd.
 */
ValoTheme (/server/src/main/java/com/vaadin/ui/themes/ValoTheme.java)/**
 * <p>
 * Additional style names which can be used with the Valo theme.
 * </p>
 *
 * <p>
 * These styles are only available if the
 * <code>$v-included-additional-styles</code> Sass list variable contains the
 * name of the component for that additional style name (e.g.
 * <code>button, textfield, table</code>).
 * </p>
 *
 * <p>
 * Most of these additional style names can be included individually into your
 * custom theme using the component specific Sass mixins, in which case you can
 * also define the style names yourself. See the Valo theme Sass API
 * documentation for additional information.
 * </p>
 *
 * TODO link to Sass API documentation
 *
 * @since 7.3
 * @author Vaadin Ltd
 */
TooltipConfiguration (/server/src/main/java/com/vaadin/ui/TooltipConfiguration.java)/**
 * Provides method for configuring the tooltip.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
ItemClickListener (/server/src/main/java/com/vaadin/ui/Tree.java)/**
     * A listener for item click events.
     *
     * @param <T>
     *            the tree item type
     *
     * @see ItemClick
     * @see Registration
     * @since 8.1
     */
ItemClick (/server/src/main/java/com/vaadin/ui/Tree.java)/**
     * Tree item click event.
     *
     * @param <T>
     *            the data type of tree
     * @since 8.1
     */
TreeRenderer (/server/src/main/java/com/vaadin/ui/Tree.java)/**
     * String renderer that handles icon resources and stores their identifiers
     * into data objects.
     *
     * @since 8.1
     */
TreeMultiSelectionModel (/server/src/main/java/com/vaadin/ui/Tree.java)/**
     * Custom MultiSelectionModel for Tree. TreeMultiSelectionModel does not
     * show selection column.
     *
     * @param <T>
     *            the tree item type
     *
     * @since 8.1
     */
TreeContextClickEvent (/server/src/main/java/com/vaadin/ui/Tree.java)/**
     * ContextClickEvent for the Tree Component.
     * <p>
     * Usage:
     *
     * <pre>
     * tree.addContextClickListener(event -&gt; Notification.show(
     *         ((TreeContextClickEvent&lt;Person&gt;) event).getItem() + " Clicked"));
     * </pre>
     *
     * @param <T>
     *            the tree bean type
     * @since 8.1
     */
Tree (/server/src/main/java/com/vaadin/ui/Tree.java)/**
 * Tree component. A Tree can be used to select an item from a hierarchical set
 * of items.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            the data type
 */
TreeGrid (/server/src/main/java/com/vaadin/ui/TreeGrid.java)/**
 * A grid component for displaying hierarchical tabular data.
 *
 * Visual hierarchy depth positioning of rows is done via styles, see
 * <code>_treegrid.scss</code> from Valo theme.
 *
 * @author Vaadin Ltd
 * @since 8.1
 *
 * @param <T>
 *            the grid bean type
 */
TwinColSelect (/server/src/main/java/com/vaadin/ui/TwinColSelect.java)/**
 * Multiselect component with two lists: left side for available items and right
 * side for selected items.
 *
 * @author Vaadin Ltd
 *
 * @param <T>
 *            item type
 */
WindowOrderUpdateEvent (/server/src/main/java/com/vaadin/ui/UI.java)/**
     * Event which is fired when the ordering of the windows is updated.
     * <p>
     * The other way to listen window position for specific window is
     * {@link Window#addWindowOrderChangeListener(WindowOrderChangeListener)}
     *
     * @see Window.WindowOrderChangeEvent
     *
     * @author Vaadin Ltd
     * @since 8.0
     *
     */
WindowOrderUpdateListener (/server/src/main/java/com/vaadin/ui/UI.java)/**
     * An interface used for listening to Windows order update events.
     *
     * @since 8.0
     *
     * @see Window.WindowOrderChangeEvent
     */
UI (/server/src/main/java/com/vaadin/ui/UI.java)/**
 * The topmost component in any component hierarchy. There is one UI for every
 * Vaadin instance in a browser window. A UI may either represent an entire
 * browser window (or tab) or some part of a html page where a Vaadin
 * application is embedded.
 * <p>
 * The UI is the server side entry point for various client side features that
 * are not represented as components added to a layout, e.g notifications, sub
 * windows, and executing javascript in the browser.
 * </p>
 * <p>
 * When a new UI instance is needed, typically because the user opens a URL in a
 * browser window which points to e.g. {@link VaadinServlet}, all
 * {@link UIProvider}s registered to the current {@link VaadinSession} are
 * queried for the UI class that should be used. The selection is by default
 * based on the <code>UI</code> init parameter from web.xml.
 * </p>
 * <p>
 * After a UI has been created by the application, it is initialized using
 * {@link #init(VaadinRequest)}. This method is intended to be overridden by the
 * developer to add components to the user interface and initialize
 * non-component functionality. The component hierarchy must be initialized by
 * passing a {@link Component} with the main layout or other content of the view
 * to {@link #setContent(Component)} or to the constructor of the UI.
 * </p>
 *
 * @see #init(VaadinRequest)
 * @see UIProvider
 *
 * @since 7.0
 */
UIDetachedException (/server/src/main/java/com/vaadin/ui/UIDetachedException.java)/**
 * Exception thrown if the UI has been detached when it should not be.
 *
 * @author Vaadin Ltd
 * @since 7.1
 */
UniqueSerializable (/server/src/main/java/com/vaadin/ui/UniqueSerializable.java)/**
 * A base class for generating an unique object that is serializable.
 * <p>
 * This class is abstract but has no abstract methods to force users to create
 * an anonymous inner class. Otherwise each instance will not be unique.
 *
 * @author Vaadin Ltd
 * @since 6.8.0
 *
 */
Receiver (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Interface that must be implemented by the upload receivers to provide the
     * Upload component an output stream to write the uploaded data.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
FinishedEvent (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Upload.FinishedEvent is sent when the upload receives a file, regardless
     * of whether the reception was successful or failed. If you wish to
     * distinguish between the two cases, use either SucceededEvent or
     * FailedEvent, which are both subclasses of the FinishedEvent.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
FailedEvent (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Upload.FailedEvent event is sent when the upload is received, but the
     * reception is interrupted for some reason.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
NoOutputStreamEvent (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * FailedEvent that indicates that an output stream could not be obtained.
     */
NoInputStreamEvent (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * FailedEvent that indicates that an input stream could not be obtained.
     */
SucceededEvent (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Upload.SucceededEvent event is sent when the upload is received
     * successfully.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
StartedEvent (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Upload.StartedEvent event is sent when the upload is started to received.
     *
     * @author Vaadin Ltd.
     * @since 5.0
     */
ChangeEvent (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Upload.ChangeEvent event is sent when the value (filename) of the upload
     * changes.
     *
     * @since 7.2
     */
StartedListener (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Receives the events when the upload starts.
     *
     * @author Vaadin Ltd.
     * @since 5.0
     */
FinishedListener (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Receives the events when the uploads are ready.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
FailedListener (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Receives events when the uploads are finished, but unsuccessful.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
SucceededListener (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Receives events when the uploads are successfully finished.
     *
     * @author Vaadin Ltd.
     * @since 3.0
     */
ChangeListener (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * Listener for {@link ChangeEvent}.
     *
     * @since 7.2
     */
ProgressListener (/server/src/main/java/com/vaadin/ui/Upload.java)/**
     * ProgressListener receives events to track progress of upload.
     */
Upload (/server/src/main/java/com/vaadin/ui/Upload.java)/**
 * Component for uploading files from client to server.
 *
 * <p>
 * The visible component consists of a file name input box and a browse button
 * and an upload submit button to start uploading.
 *
 * <p>
 * The Upload component needs a java.io.OutputStream to write the uploaded data.
 * You need to implement the Upload.Receiver interface and return the output
 * stream in the receiveUpload() method.
 *
 * <p>
 * You can get an event regarding starting (StartedEvent), progress
 * (ProgressEvent), and finishing (FinishedEvent) of upload by implementing
 * StartedListener, ProgressListener, and FinishedListener, respectively. The
 * FinishedListener is called for both failed and succeeded uploads. If you wish
 * to separate between these two cases, you can use SucceededListener
 * (SucceededEvenet) and FailedListener (FailedEvent).
 *
 * <p>
 * The upload component does not itself show upload progress, but you can use
 * the ProgressIndicator for providing progress feedback by implementing
 * ProgressListener and updating the indicator in updateProgress().
 *
 * <p>
 * Setting upload component immediate with {@link #setImmediateMode(boolean)}
 * initiates the upload as soon as a file is selected, instead of the common
 * pattern of file selection field and upload button.
 *
 * <p>
 * Note! Because of browser dependent implementations of <input type="file">
 * element, setting size for Upload component is not supported. For some
 * browsers setting size may work to some extend.
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
VerticalLayout (/server/src/main/java/com/vaadin/ui/VerticalLayout.java)/**
 * Vertical layout
 *
 * <code>VerticalLayout</code> is a component container, which shows the
 * subcomponents in the order of their addition (vertically). A vertical layout
 * is by default 100% wide.
 *
 * @author Vaadin Ltd.
 * @since 5.3
 */
VerticalSplitPanel (/server/src/main/java/com/vaadin/ui/VerticalSplitPanel.java)/**
 * A vertical split panel contains two components and lays them vertically. The
 * first component is above the second component.
 *
 * <pre>
 *      +--------------------------+
 *      |                          |
 *      |  The first component     |
 *      |                          |
 *      +==========================+  <-- splitter
 *      |                          |
 *      |  The second component    |
 *      |                          |
 *      +--------------------------+
 * </pre>
 *
 */
Video (/server/src/main/java/com/vaadin/ui/Video.java)/**
 * The Video component translates into an HTML5 &lt;video&gt; element and as
 * such is only supported in browsers that support HTML5 media markup. Browsers
 * that do not support HTML5 display the text or HTML set by calling
 * {@link #setAltText(String)}.
 *
 * A flash-player fallback can be implemented by setting HTML content allowed (
 * {@link #setHtmlContentAllowed(boolean)} and calling
 * {@link #setAltText(String)} with the flash player markup. An example of flash
 * fallback can be found at the <a href=
 * "https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Using_Flash"
 * >Mozilla Developer Network</a>.
 *
 * Multiple sources can be specified. Which of the sources is used is selected
 * by the browser depending on which file formats it supports. See
 * <a href="http://en.wikipedia.org/wiki/HTML5_video#Table">wikipedia</a> for a
 * table of formats supported by different browsers.
 *
 * @author Vaadin Ltd
 * @since 6.7.0
 */
WindowOrderChangeEvent (/server/src/main/java/com/vaadin/ui/Window.java)/**
     * Event which is fired when the window order position is changed.
     *
     * @see UI.WindowOrderUpdateEvent
     *
     * @author Vaadin Ltd
     *
     */
WindowOrderChangeListener (/server/src/main/java/com/vaadin/ui/Window.java)/**
     * An interface used for listening to Window order change events.
     *
     * @see UI.WindowOrderUpdateListener
     */
CloseListener (/server/src/main/java/com/vaadin/ui/Window.java)/**
     * An interface used for listening to Window close events. Add the
     * CloseListener to a window and
     * {@link CloseListener#windowClose(CloseEvent)} will be called whenever the
     * user closes the window.
     *
     * <p>
     * Since Vaadin 6.5, removing a window using {@link #removeWindow(Window)}
     * fires the CloseListener.
     * </p>
     */
WindowModeChangeEvent (/server/src/main/java/com/vaadin/ui/Window.java)/**
     * Event which is fired when the mode of the Window changes.
     *
     * @author Vaadin Ltd
     * @since 7.1
     *
     */
WindowModeChangeListener (/server/src/main/java/com/vaadin/ui/Window.java)/**
     * An interface used for listening to Window maximize / restore events. Add
     * the WindowModeChangeListener to a window and
     * {@link WindowModeChangeListener#windowModeChanged(WindowModeChangeEvent)}
     * will be called whenever the window is maximized (
     * {@link WindowMode#MAXIMIZED}) or restored ({@link WindowMode#NORMAL} ).
     */
ResizeEvent (/server/src/main/java/com/vaadin/ui/Window.java)/**
     * Resize events are fired whenever the client-side fires a resize-event
     * (e.g. the browser window is resized). The frequency may vary across
     * browsers.
     */
ResizeListener (/server/src/main/java/com/vaadin/ui/Window.java)/**
     * Listener for window resize events.
     *
     * @see com.vaadin.ui.Window.ResizeEvent
     */
CloseShortcut (/server/src/main/java/com/vaadin/ui/Window.java)/**
     * A {@link ShortcutListener} specifically made to define a keyboard
     * shortcut that closes the window.
     *
     * <pre>
     * <code>
     *  // within the window using helper
     *  window.setCloseShortcut(KeyCode.ESCAPE, null);
     *
     *  // or globally
     *  getUI().addAction(new Window.CloseShortcut(window, KeyCode.ESCAPE));
     * </code>
     * </pre>
     *
     */
Window (/server/src/main/java/com/vaadin/ui/Window.java)/**
 * A component that represents a floating popup window that can be added to a
 * {@link UI}. A window is added to a {@code UI} using
 * {@link UI#addWindow(Window)}.
 * <p>
 * The contents of a window is set using {@link #setContent(Component)} or by
 * using the {@link #Window(String, Component)} constructor.
 * </p>
 * <p>
 * A window can be positioned on the screen using absolute coordinates (pixels)
 * or set to be centered using {@link #center()}
 * </p>
 * <p>
 * The caption is displayed in the window header.
 * </p>
 * <p>
 * In Vaadin versions prior to 7.0.0, Window was also used as application level
 * windows. This function is now covered by the {@link UI} class.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
ConnectorHelper (/server/src/main/java/com/vaadin/util/ConnectorHelper.java)/**
 * Provides various helper methods for connectors. Meant for internal use.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
CurrentInstance (/server/src/main/java/com/vaadin/util/CurrentInstance.java)/**
 * Keeps track of various current instances for the current thread. All the
 * instances are automatically cleared after handling a request from the client
 * to avoid leaking memory.
 * <p>
 * Please note that the instances are stored using {@link WeakReference}. This
 * means that the a current instance value may suddenly disappear if there a no
 * other references to the object.
 * <p>
 * Currently the framework uses the following instances:
 * </p>
 * <p>
 * {@link UI}, {@link VaadinService}, {@link VaadinSession},
 * {@link VaadinRequest}, {@link VaadinResponse}.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
CurrentInstanceFallbackResolver (/server/src/main/java/com/vaadin/util/CurrentInstanceFallbackResolver.java)/**
 * Fallback that is used to revolve current instances when they are not
 * available by regular means.
 * <p>
 * This interface is used internally by the framework and it's not meant for
 * public usage.
 *
 * @author Vaadin Ltd.
 *
 * @param <T>
 *            the type of the instances returned by this resolver
 *
 * @see CurrentInstance#get(Class)
 * @see CurrentInstance#defineFallbackResolver(Class,
 *      CurrentInstanceFallbackResolver)
 *
 * @since 8.5.2
 *
 */
EncodeUtil (/server/src/main/java/com/vaadin/util/EncodeUtil.java)/**
 * Utilities related to various encoding schemes.
 *
 * @author Vaadin Ltd
 * @since 7.7.7
 */
FileTypeResolver (/server/src/main/java/com/vaadin/util/FileTypeResolver.java)/**
 * Utility class that can figure out mime-types and icons related to files.
 * <p>
 * Note : The icons are associated purely to mime-types, so a file may not have
 * a custom icon accessible with this class.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 */
ReflectTools (/server/src/main/java/com/vaadin/util/ReflectTools.java)/**
 * An util class with helpers for reflection operations. Used internally by
 * Vaadin and should not be used by application developers. Subject to change at
 * any time.
 *
 * @since 6.2
 */
TimeZoneUtil (/server/src/main/java/com/vaadin/util/TimeZoneUtil.java)/**
 * Utilities related to {@link com.google.gwt.i18n.client.TimeZone}.
 *
 * @author Vaadin Ltd
 * @since 8.2
 */
ClassInDefaultPackage (/server/src/test/java/ClassInDefaultPackage.java)/**
 *
 * This class is test data. Don't delete it.
 *
 * @author Vaadin Ltd
 * @since 7.2
 */
BinderBookOfVaadinTest (/server/src/test/java/com/vaadin/data/BinderBookOfVaadinTest.java)/**
 * Book of Vaadin tests.
 *
 * @author Vaadin Ltd
 *
 */
BinderStatusChangeTest (/server/src/test/java/com/vaadin/data/BinderStatusChangeTest.java)/**
 * @author Vaadin Ltd
 *
 */
BinderTestBase (/server/src/test/java/com/vaadin/data/BinderTestBase.java)/**
 * A base class for {@code Binder} unit tests.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
BinderValueChangeTest (/server/src/test/java/com/vaadin/data/BinderValueChangeTest.java)/**
 * @author Vaadin Ltd
 *
 */
HasValueTest (/server/src/test/java/com/vaadin/data/HasValueTest.java)/**
 * @author Vaadin Ltd
 *
 */
Jsr303Test (/server/src/test/java/com/vaadin/data/Jsr303Test.java)/**
 * @author Vaadin Ltd
 *
 */
NotEmptyTest (/server/src/test/java/com/vaadin/data/NotEmptyTest.java)/**
 * @author Vaadin Ltd
 *
 */
AbstractDataProviderTest (/server/src/test/java/com/vaadin/data/provider/AbstractDataProviderTest.java)/**
 * @author Vaadin Ltd
 *
 */
DataProviderBoVTest (/server/src/test/java/com/vaadin/data/provider/bov/DataProviderBoVTest.java)/**
 * Vaadin 8 Example from Book of Vaadin
 *
 * @author Vaadin Ltd
 */
PersonService (/server/src/test/java/com/vaadin/data/provider/bov/PersonService.java)/**
 * Data access service example.
 *
 * @author Vaadin Ltd
 * @see Person
 */
DataCommunicatorTest (/server/src/test/java/com/vaadin/data/provider/DataCommunicatorTest.java)/**
 * @author Vaadin Ltd
 *
 */
ReplaceListDataProvider (/server/src/test/java/com/vaadin/data/provider/ReplaceListDataProvider.java)/**
 * A dummy data provider for testing item replacement and stale elements.
 */
ReplaceListDataProviderTest (/server/src/test/java/com/vaadin/data/provider/ReplaceListDataProviderTest.java)/**
 * Test class that verifies that ReplaceListDataProvider functions the way it's
 * meant to.
 *
 */
ResultTest (/server/src/test/java/com/vaadin/data/ResultTest.java)/**
 * @author Vaadin Ltd
 *
 */
NotEmptyValidator (/server/src/test/java/com/vaadin/data/validator/NotEmptyValidator.java)/**
 * Simple validator to check against {@code null} value and empty {@link String}
 * value.
 * <p>
 * This validator can be suitable for fields that have been marked as required
 * with {@link HasValue#setRequiredIndicatorVisible(boolean)}.
 * <p>
 * Note that
 * {@link BindingBuilder#asRequired(com.vaadin.data.ErrorMessageProvider)} does
 * almost the same thing, but verifies against the value NOT being equal to what
 * {@link HasValue#getEmptyValue()} returns and sets the required indicator
 * visible with {@link HasValue#setRequiredIndicatorVisible(boolean)}.
 *
 * @see HasValue#setRequiredIndicatorVisible(boolean)
 * @see BindingBuilder#asRequired(com.vaadin.data.ErrorMessageProvider)
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
NotEmptyValidatorTest (/server/src/test/java/com/vaadin/data/validator/NotEmptyValidatorTest.java)/**
 * @author Vaadin Ltd
 *
 */
ValidatorTest (/server/src/test/java/com/vaadin/data/ValidatorTest.java)/**
 * @author Vaadin Ltd
 *
 */
SelectionEventTest (/server/src/test/java/com/vaadin/event/selection/SelectionEventTest.java)/**
 * @author Vaadin Ltd
 *
 */
AbstractClientConnectorProxyHandlingTest (/server/src/test/java/com/vaadin/server/AbstractClientConnectorProxyHandlingTest.java)/**
 * We test that AbstractClientConnector has a suitable isThis method which is
 * needed to correctly perform an equals check between a proxy and it's
 * underlying instance.
 *
 * @author Vaadin Ltd
 */
AbstractClientConnectorTest (/server/src/test/java/com/vaadin/server/AbstractClientConnectorTest.java)/**
 * We test that AbstractClientConnector has a suitable isThis method which is
 * needed to correctly perform an equals check between a proxy and it's
 * underlying instance.
 *
 * @author Vaadin Ltd
 */
AbstractDeploymentConfigurationTest (/server/src/test/java/com/vaadin/server/AbstractDeploymentConfigurationTest.java)/**
 * Test for {@link AbstractDeploymentConfiguration}
 *
 * @author Vaadin Ltd
 */
DedicatedStateTest (/server/src/test/java/com/vaadin/server/DedicatedStateTest.java)/**
 * @author Vaadin Ltd
 *
 */
DefaultDeploymentConfigurationTest (/server/src/test/java/com/vaadin/server/DefaultDeploymentConfigurationTest.java)/**
 * Tests for {@link DefaultDeploymentConfiguration}
 *
 * @author Vaadin Ltd
 * @since 7.2
 */
DragAndDropServiceTest (/server/src/test/java/com/vaadin/server/DragAndDropServiceTest.java)/**
 * Tests for {@link DragAndDropService}.
 *
 * @author Vaadin Ltd
 */
JSONSerializerTest (/server/src/test/java/com/vaadin/server/JSONSerializerTest.java)/**
 * Tests for {@link JsonCodec}
 *
 * @author Vaadin Ltd
 * @since 7.0
 *
 */
MockServletConfig (/server/src/test/java/com/vaadin/server/MockServletConfig.java)/**
 * Mock servlet configuration for tests.
 *
 * @author Vaadin Ltd
 */
MockServletContext (/server/src/test/java/com/vaadin/server/MockServletContext.java)/**
 * Mock servlet context for tests.
 *
 * @author Vaadin Ltd
 */
PageTest (/server/src/test/java/com/vaadin/server/PageTest.java)/**
 *
 * Tests for {@link Page}
 *
 * @author Vaadin Ltd
 */
UIProviderTest (/server/src/test/java/com/vaadin/server/UIProviderTest.java)/**
 * Tests for {@link UIProvider} class.
 *
 * @author Vaadin Ltd
 */
GridComponentRendererTest (/server/src/test/java/com/vaadin/tests/components/grid/GridComponentRendererTest.java)/**
 * Test to validate clean detaching in Grid with ComponentRenderer.
 */
MenuBarDeclarativeTest (/server/src/test/java/com/vaadin/tests/components/menubar/MenuBarDeclarativeTest.java)/**
 * Tests declarative support for menu bars.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DesignContextLocalIdTest (/server/src/test/java/com/vaadin/tests/design/DesignContextLocalIdTest.java)/**
 * Tests that setting local id via DesignContext works as intended.
 *
 * @author Vaadin Ltd
 */
DesignFormatterTest (/server/src/test/java/com/vaadin/tests/design/DesignFormatterTest.java)/**
 * Various tests related to formatter.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
EmbeddedsTest (/server/src/test/java/com/vaadin/tests/design/EmbeddedsTest.java)/**
 * Tests declarative support for implementations of {@link AbstractEmbedded} and
 * {@link Embedded}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
LayoutTemplate (/server/src/test/java/com/vaadin/tests/design/LayoutTemplate.java)/**
 * Template to be populated in the tests
 *
 * @author Vaadin Ltd
 */
LocaleTest (/server/src/test/java/com/vaadin/tests/design/LocaleTest.java)/**
 * Tests the handling of the locale property in parsing and html generation.
 *
 * @author Vaadin Ltd
 */
CustomAbsoluteLayout (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomAbsoluteLayout.java)/**
 * @author Vaadin Ltd
 */
CustomAccordion (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomAccordion.java)/**
 * @author Vaadin Ltd
 */
CustomCssLayout (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomCssLayout.java)/**
 * @author Vaadin Ltd
 */
CustomFormLayout (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomFormLayout.java)/**
 * @author Vaadin Ltd
 */
CustomGridLayout (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomGridLayout.java)/**
 * @author Vaadin Ltd
 */
CustomHorizontalLayout (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomHorizontalLayout.java)/**
 * @author Vaadin Ltd
 */
CustomHorizontalSplitPanel (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomHorizontalSplitPanel.java)/**
 * @author Vaadin Ltd
 */
CustomPanel (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomPanel.java)/**
 * @author Vaadin Ltd
 */
CustomTabSheet (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomTabSheet.java)/**
 * @author Vaadin Ltd
 */
CustomVerticalLayout (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomVerticalLayout.java)/**
 * @author Vaadin Ltd
 */
CustomVerticalSplitPanel (/server/src/test/java/com/vaadin/tests/design/nested/customlayouts/CustomVerticalSplitPanel.java)/**
 * @author Vaadin Ltd
 */
MyChildDesign (/server/src/test/java/com/vaadin/tests/design/nested/MyChildDesign.java)/**
 * Child design component
 *
 * @author Vaadin Ltd
 */
MyDesignRoot (/server/src/test/java/com/vaadin/tests/design/nested/MyDesignRoot.java)/**
 * Root design component
 *
 * @author Vaadin Ltd
 */
NestedCustomLayoutsTest (/server/src/test/java/com/vaadin/tests/design/nested/NestedCustomLayoutsTest.java)/**
 * Test case for nested custom layouts. The children of the custom layouts must
 * not be rendered.
 *
 * @author Vaadin Ltd
 */
ReadNestedTemplatesTest (/server/src/test/java/com/vaadin/tests/design/nested/ReadNestedTemplatesTest.java)/**
 * Test case for reading nested templates
 *
 * @author Vaadin Ltd
 */
WriteNestedTemplatesTest (/server/src/test/java/com/vaadin/tests/design/nested/WriteNestedTemplatesTest.java)/**
 *
 * Test case for writing nested templates
 *
 * @author Vaadin Ltd
 */
ParseLayoutTest (/server/src/test/java/com/vaadin/tests/design/ParseLayoutTest.java)/**
 * A test for checking that parsing a layout preserves the IDs and the mapping
 * from prefixes to package names (for example
 * <meta name=”package-mapping” content=”my:com.addon.mypackage” />)
 *
 * @author Vaadin Ltd
 */
ParseMixedLegacyAndNewPrefixTest (/server/src/test/java/com/vaadin/tests/design/ParseMixedLegacyAndNewPrefixTest.java)/**
 * Parse mixed content with legacy and new prefixes (not a required feature but
 * works).
 */
EventRouterTest (/server/src/test/java/com/vaadin/tests/event/EventRouterTest.java)/**
 * Test EventRouter and related error handling.
 */
MarkAsDirtyListenerTest (/server/src/test/java/com/vaadin/tests/event/MarkAsDirtyListenerTest.java)/**
 * Test for mark as dirty listener functionality.
 */
ShortcutActionTest (/server/src/test/java/com/vaadin/tests/event/ShortcutActionTest.java)/**
 * Tests various things about shortcut actions.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ClasspathHelper (/server/src/test/java/com/vaadin/tests/server/ClasspathHelper.java)/**
 * Allows to get classes from the current classpath using classes FQN filter.
 * <p>
 * The methods in the class return all real (not anonymous and not private)
 * classes from the filtered classpath.
 *
 * @author Vaadin Ltd
 *
 */
AbsoluteLayoutDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/absolutelayout/AbsoluteLayoutDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link AbsoluteLayout}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
AddComponentsTest (/server/src/test/java/com/vaadin/tests/server/component/absolutelayout/AddComponentsTest.java)/**
 * Tests adding of components to {@link AbsoluteLayout}
 *
 * @author Vaadin Ltd
 */
AbstractComponentDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstractcomponent/AbstractComponentDeclarativeTest.java)/**
 * Test cases for reading and writing the properties of AbstractComponent.
 *
 * @author Vaadin Ltd
 */
AbstractComponentDeclarativeTestBase (/server/src/test/java/com/vaadin/tests/server/component/abstractcomponent/AbstractComponentDeclarativeTestBase.java)/**
 * Abstract test class which contains tests for declarative format for
 * properties that are common for AbstractComponent.
 * <p>
 * It's an abstract so it's not supposed to be run as is. Instead each
 * declarative test for a real component should extend it and implement abstract
 * methods to be able to test the common properties. Components specific
 * properties should be tested additionally in the subclasses implementations.
 *
 * @author Vaadin Ltd
 *
 */
AddParentAsChildTest (/server/src/test/java/com/vaadin/tests/server/component/abstractcomponentcontainer/AddParentAsChildTest.java)/**
 * Tests for avoiding add parent as child for
 * {@link AbstractComponentContainer#addComponent(Component)}
 *
 * @author Vaadin Ltd
 */
AbstractLocalDateFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstractdatefield/AbstractLocalDateFieldDeclarativeTest.java)/**
 * Abstract test class which contains tests for declarative format for
 * properties that are common for AbstractDateField.
 * <p>
 * It's an abstract so it's not supposed to be run as is. Instead each
 * declarative test for a real component should extend it and implement abstract
 * methods to be able to test the common properties. Components specific
 * properties should be tested additionally in the subclasses implementations.
 *
 * @author Vaadin Ltd
 *
 */
AbstractLocalDateTimeFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstractdatefield/AbstractLocalDateTimeFieldDeclarativeTest.java)/**
 * Abstract test class which contains tests for declarative format for
 * properties that are common for AbstractDateField.
 * <p>
 * It's an abstract so it's not supposed to be run as is. Instead each
 * declarative test for a real component should extend it and implement abstract
 * methods to be able to test the common properties. Components specific
 * properties should be tested additionally in the subclasses implementations.
 *
 * @author Vaadin Ltd
 *
 */
AbstractFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstractfield/AbstractFieldDeclarativeTest.java)/**
 * Abstract test class which contains tests for declarative format for
 * properties that are common for AbstractField.
 * <p>
 * It's an abstract so it's not supposed to be run as is. Instead each
 * declarative test for a real component should extend it and implement abstract
 * methods to be able to test the common properties. Components specific
 * properties should be tested additionally in the subclasses implementations.
 *
 * @author Vaadin Ltd
 *
 */
AbstractListingDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstractlisting/AbstractListingDeclarativeTest.java)/**
 * {@link AbstractListing} component declarative test.
 * <p>
 * Test ignores comparison for {@link ItemCaptionGenerator},
 * {@link IconGenerator} and {@link SerializablePredicate} "properties" since
 * they are functions and it doesn't matter which implementation is chosen. But
 * test checks generated item captions, item icon generation and enabled items
 * generations if they are available in the component as public methods.
 * <p>
 * Common {@link AbstractComponent} properties are tested in
 * {@link AbstractComponentDeclarativeTestBase}
 *
 * @see AbstractComponentDeclarativeTestBase
 *
 * @author Vaadin Ltd
 *
 *
 * @param <T>
 *            a component type
 */
AbstractMultiSelectDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstractmultiselect/AbstractMultiSelectDeclarativeTest.java)/**
 * {@link AbstractMultiSelect} component declarative test.
 * <p>
 * Test inherits test methods from a {@link AbstractListingDeclarativeTest}
 * class providing here only common cases for {@link AbstractMultiSelect}s.
 *
 * @see AbstractListingDeclarativeTest
 *
 * @author Vaadin Ltd
 *
 *
 * @param <T>
 *            a component type
 */
AbstractOrderedLayoutDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstractorderedlayout/AbstractOrderedLayoutDeclarativeTest.java)/**
 * Tests declarative support for AbstractOrderedLayout.
 *
 * @author Vaadin Ltd
 */
LayoutSettingsOnReplaceTest (/server/src/test/java/com/vaadin/tests/server/component/abstractorderedlayout/LayoutSettingsOnReplaceTest.java)/**
 * Tests for abstract layout settings which should be preserved on replace
 * component
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
SetParentAsContentTest (/server/src/test/java/com/vaadin/tests/server/component/abstractsinglecomponentcontainer/SetParentAsContentTest.java)/**
 *
 * Tests for avoiding set parent as child for
 * {@link AbstractSingleComponentContainer#setContent(Component)}
 *
 * @author Vaadin Ltd
 */
AbstractSingleSelectDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstractsingleselect/AbstractSingleSelectDeclarativeTest.java)/**
 * {@link AbstractSingleSelect} component declarative test.
 * <p>
 * Test inherits test methods from a {@link AbstractListingDeclarativeTest}
 * class providing here only common cases for {@link AbstractSingleSelect}s.
 *
 * @author Vaadin Ltd
 *
 *
 * @param <T>
 *            a component type
 */
AbstractSplitPanelDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstractsplitpanel/AbstractSplitPanelDeclarativeTest.java)/**
 * Tests declarative support for AbstractSplitPanel.
 *
 * @author Vaadin Ltd
 */
AbstractTextFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/abstracttextfield/AbstractTextFieldDeclarativeTest.java)/**
 * Tests declarative support for AbstractTextField.
 *
 * @author Vaadin Ltd
 */
AbstractTextFieldTest (/server/src/test/java/com/vaadin/tests/server/component/abstracttextfield/AbstractTextFieldTest.java)/**
 * @author Vaadin Ltd
 *
 */
AudioDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/audio/AudioDeclarativeTest.java)/**
 * Tests specs of declarative support for abstract media and its
 * implementations.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
AudioStateTest (/server/src/test/java/com/vaadin/tests/server/component/audio/AudioStateTest.java)/**
 * Tests for Audio state.
 *
 */
BrowserFrameDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/browserframe/BrowserFrameDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link BrowserFrame}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
ButtonClickTest (/server/src/test/java/com/vaadin/tests/server/component/button/ButtonClickTest.java)/**
 * Tests the public click() method.
 */
ButtonDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/button/ButtonDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link Button} and
 * {@link NativeButton}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
CheckboxDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/checkbox/CheckboxDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link CheckBox}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
CheckBoxGroupDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/checkboxgroup/CheckBoxGroupDeclarativeTest.java)/**
 * Declarative support test for CheckBoxGroup.
 * <p>
 * Only {@link CheckBoxGroup#setHtmlContentAllowed(boolean)} is tested here
 * explicitly. All other tests are in the super class (
 * {@link AbstractMultiSelectDeclarativeTest}).
 *
 * @see AbstractMultiSelectDeclarativeTest
 *
 * @author Vaadin Ltd
 *
 */
AbstractColorPickerDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/colorpicker/AbstractColorPickerDeclarativeTest.java)/**
 * Abstract test class which contains tests for declarative format for
 * properties that are common for AbstractColorPicker.
 * <p>
 * It's an abstract so it's not supposed to be run as is. Instead each
 * declarative test for a real component should extend it and implement abstract
 * methods to be able to test the common properties. Components specific
 * properties should be tested additionally in the subclasses implementations.
 *
 * @author Vaadin Ltd
 *
 */
AbstractColorPickerTest (/server/src/test/java/com/vaadin/tests/server/component/colorpicker/AbstractColorPickerTest.java)/**
 * @author Vaadin Ltd
 *
 */
ColorPickerAreaDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/colorpicker/ColorPickerAreaDeclarativeTest.java)/**
 * Declarative test for ColorPickerArea. Provides only information about
 * ColorPickerArea class. All tests are in the superclass.
 *
 * @author Vaadin Ltd
 *
 */
ColorPickerComponentsTest (/server/src/test/java/com/vaadin/tests/server/component/colorpicker/ColorPickerComponentsTest.java)/**
 * @author Vaadin Ltd
 *
 */
ColorPickerDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/colorpicker/ColorPickerDeclarativeTest.java)/**
 * Declarative test for ColorPicker. Provides only information about
 * ColorPickerArea class. All tests are in the superclass.
 *
 * @author Vaadin Ltd
 *
 */
ComboBoxDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/combobox/ComboBoxDeclarativeTest.java)/**
 * Declarative support test for ComboBox.
 * <p>
 * There are only ComboBox specific properties explicit tests. All other tests
 * are in the super class ( {@link AbstractSingleSelectDeclarativeTest}).
 *
 * @see AbstractSingleSelectDeclarativeTest
 *
 * @author Vaadin Ltd
 *
 */
ComboBoxFilteringTest (/server/src/test/java/com/vaadin/tests/server/component/combobox/ComboBoxFilteringTest.java)/**
 * Test for ComboBox data providers and filtering.
 *
 * @author Vaadin Ltd
 */
CssLayoutDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/csslayout/CssLayoutDeclarativeTest.java)/**
 * Tests declarative support for CssLayout.
 *
 * @author Vaadin Ltd
 */
CustomLayoutDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/customlayout/CustomLayoutDeclarativeTest.java)/**
 * Tests declarative support for {@link CustomLayout}.
 *
 * @author Vaadin Ltd
 */
CustomLayoutTest (/server/src/test/java/com/vaadin/tests/server/component/customlayout/CustomLayoutTest.java)/**
 *
 * Tests for {@link CustomLayout}
 *
 * @author Vaadin Ltd
 */
DateFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/datefield/DateFieldDeclarativeTest.java)/**
 * Tests the declarative support for implementations of {@link DateField}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DateFieldErrorMessageTest (/server/src/test/java/com/vaadin/tests/server/component/datefield/DateFieldErrorMessageTest.java)/**
 * Tests the resetting of component error after setting empty date string in
 * {@link AbstractDateField}.
 */
DateTimeFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/datefield/DateTimeFieldDeclarativeTest.java)/**
 * Tests the declarative support for implementations of {@link DateTimeField}.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
InlineDateFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/datefield/InlineDateFieldDeclarativeTest.java)/**
 * Tests the declarative support for implementations of
 * {@link AbstractDateField}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
InlineDateTimeFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/datefield/InlineDateTimeFieldDeclarativeTest.java)/**
 * Tests the declarative support for implementations of
 * {@link AbstractDateField}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
FlashDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/flash/FlashDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link AbstractEmbedded} and
 * {@link Embedded}.
 *
 * @author Vaadin Ltd
 */
EditorImplTest (/server/src/test/java/com/vaadin/tests/server/component/grid/EditorImplTest.java)/**
 * @author Vaadin Ltd
 *
 */
GridDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/grid/GridDeclarativeTest.java)/**
 * @author Vaadin Ltd
 *
 */
TestGrid (/server/src/test/java/com/vaadin/tests/server/component/grid/TestGrid.java)/**
 * {@link Grid} class for testing purposes
 *
 * @param <T>
 *            the grid bean type
 */
ImageDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/image/ImageDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link Image}.
 *
 * @author Vaadin Ltd
 */
LabelDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/label/LabelDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link Label}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
LinkDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/link/LinkDeclarativeTest.java)/**
 * Test cases for reading the properties of selection components.
 *
 * @author Vaadin Ltd
 */
ListSelectDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/listselect/ListSelectDeclarativeTest.java)/**
 * List select declarative test.
 * <p>
 * There is only {@link ListSelect#setRows(int)}/{@link ListSelect#getRows()}
 * explicit test. All other tests are in the super class (
 * {@link AbstractMultiSelectDeclarativeTest}).
 *
 * @see AbstractMultiSelectDeclarativeTest
 *
 * @author Vaadin Ltd
 *
 */
NativeSelectDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/nativeselect/NativeSelectDeclarativeTest.java)/**
 * Declarative support tests for {@link NativeSelect}. All tests are in the
 * super class ({@link AbstractSingleSelectDeclarativeTest}). This class
 * declares only tag name and native select class (test parameters).
 *
 * @author Vaadin Ltd
 *
 */
PanelDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/panel/PanelDeclarativeTest.java)/**
 * Tests declarative support for Panel.
 *
 * @author Vaadin Ltd
 */
PasswordFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/passwordfield/PasswordFieldDeclarativeTest.java)/**
 * Declarative test for PasswordField. Provides only information about
 * ColorPickerArea class. All tests are in the superclass.
 *
 * @author Vaadin Ltd
 *
 */
RadioButtonGroupDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/radiobuttongroup/RadioButtonGroupDeclarativeTest.java)/**
 * Declarative support test for RadioButtonGroup.
 * <p>
 * Only {@link RadioButtonGroup#setHtmlContentAllowed(boolean)} is tested here
 * explicitly. All other tests are in the super class (
 * {@link AbstractSingleSelectDeclarativeTest}).
 *
 * @see AbstractSingleSelectDeclarativeTest
 *
 * @author Vaadin Ltd
 *
 */
ReadEmptyDesignTest (/server/src/test/java/com/vaadin/tests/server/component/ReadEmptyDesignTest.java)/**
 * Test cases for checking that reading a design with no elements in the html
 * body produces null as the root component.
 */
SliderDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/slider/SliderDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link Slider}.
 *
 * @author Vaadin Ltd
 */
TabSheetDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/tabsheet/TabSheetDeclarativeTest.java)/**
 * Tests declarative support for TabSheet.
 *
 * @author Vaadin Ltd
 */
TextAreaDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/textarea/TextAreaDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link TextArea}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TextFieldDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/textfield/TextFieldDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link TextField}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
TwinColSelectDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/twincolselect/TwinColSelectDeclarativeTest.java)/**
 * TwinColSelectt declarative test.
 * <p>
 * There are only TwinColSelect specific properties explicit tests. All other
 * tests are in the super class ( {@link AbstractMultiSelectDeclarativeTest}).
 *
 * @see AbstractMultiSelectDeclarativeTest
 *
 * @author Vaadin Ltd
 *
 */
MyUI (/server/src/test/java/com/vaadin/tests/server/component/ui/CustomUIClassLoaderTest.java)/**
     * Stub root
     */
LoggingClassLoader (/server/src/test/java/com/vaadin/tests/server/component/ui/CustomUIClassLoaderTest.java)/**
     * Dummy ClassLoader that just saves the name of the requested class before
     * delegating to the default implementation.
     */
UploadDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/upload/UploadDeclarativeTest.java)/**
 * Tests the declarative support for implementations of {@link Upload}.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
WindowDeclarativeTest (/server/src/test/java/com/vaadin/tests/server/component/window/WindowDeclarativeTest.java)/**
 * Tests declarative support for implementations of {@link Window}.
 *
 * @author Vaadin Ltd
 */
WriteEmptyDesignTest (/server/src/test/java/com/vaadin/tests/server/component/WriteEmptyDesignTest.java)/**
 * Test cases for checking that writing a component hierarchy with null root
 * produces an html document that has no elements in the html body.
 */
CsrfTokenMissingTest (/server/src/test/java/com/vaadin/tests/server/CsrfTokenMissingTest.java)/**
 * Test the actual csrf token validation by the server.
 *
 * @author Vaadin Ltd
 */
KeyMapperIdGetterTest (/server/src/test/java/com/vaadin/tests/server/KeyMapperIdGetterTest.java)/**
 * The test checks the same functionality as {@link KeyMapperTest} does, but
 * uses custom {@code identifierGetter} instead of default trivial one.
 * {@code BrokenBean} intentionally has broken {@code hashCode} and
 * {@code equals}, and the test should pass despite of that, because
 * {@code BrokenBean.getId()} is used for bean identification.
 */
AbstractSingleSelectTest (/server/src/test/java/com/vaadin/ui/AbstractSingleSelectTest.java)/**
 * Test for {@link AbstractSingleSelect} and {@link AbstractSingleSelection}
 *
 * @author Vaadin Ltd
 */
CheckBoxGroupBoVTest (/server/src/test/java/com/vaadin/ui/CheckBoxGroupBoVTest.java)/**
 * Option group test from Book of Vaadin
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
ComponentTest (/server/src/test/java/com/vaadin/ui/ComponentTest.java)/**
 * Base class for component unit tests, providing helper methods for e.g.
 * invoking RPC and updating diff state.
 */
DesignTest (/server/src/test/java/com/vaadin/ui/declarative/DesignTest.java)/**
 * Tests for {@link Design} declarative support class.
 *
 * @author Vaadin Ltd
 */
PushConfigurationTransportTest (/server/src/test/java/com/vaadin/ui/PushConfigurationTransportTest.java)/**
 * @author Vaadin Ltd
 */
RadioButtonGroupBoVTest (/server/src/test/java/com/vaadin/ui/RadioButtonGroupBoVTest.java)/**
 * Option group test from Book of Vaadin
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
SplitPositionChangeListenerTest (/server/src/test/java/com/vaadin/ui/SplitPositionChangeListenerTest.java)/**
 * Test for {@link SplitPositionChangeListener}
 *
 * @author Vaadin Ltd
 */
PathFormatHelper (/shared/src/main/java/com/vaadin/osgi/resources/impl/PathFormatHelper.java)/**
 * Helper for formatting the Alias, and Theme and Widgetset names.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.1
 */
VaadinResourceServiceImpl (/shared/src/main/java/com/vaadin/osgi/resources/impl/VaadinResourceServiceImpl.java)/**
 * Implementation of {@link VaadinResourceService}. Uses bundle version as a
 * prefix for the /VAADIN/ folder.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.1
 */
VaadinResourceTrackerComponent (/shared/src/main/java/com/vaadin/osgi/resources/impl/VaadinResourceTrackerComponent.java)/**
 * Tracks {@link OsgiVaadinWidgetset} and {@link OsgiVaadinTheme} registration
 * and uses {@link HttpService} to register them.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.1
 */
OsgiVaadinContributor (/shared/src/main/java/com/vaadin/osgi/resources/OsgiVaadinContributor.java)/**
 * Used to declare multiple OsgiVaadinResources with a single OSGi component.
 * Each vaadin resource will be checked for the type (theme, widgetset,
 * resource) and registered to the OSGi context with the appropriate type.
 *
 * @since 8.6.0
 */
OsgiVaadinResource (/shared/src/main/java/com/vaadin/osgi/resources/OsgiVaadinResource.java)/**
 * Used to declare a Vaadin Resource for use in OSGi. The resource is expected
 * to be in the same OSGi bundle as the class implementing this interface, under
 * the path "/VAADIN/{resourceName}" where {resourceName} is what is returned by
 * {@link OsgiVaadinResource#getName()}.
 * <p>
 * To publish a resource, an implementation of this interface needs to be
 * registered as an OSGi service, which makes
 * <code>VaadinResourceTrackerComponent</code> automatically publish the
 * resource with the given name.
 *
 * @since 8.6.0
 */
ResourceBundleInactiveException (/shared/src/main/java/com/vaadin/osgi/resources/OsgiVaadinResources.java)/**
     * Thrown if a method is called when the Resource bundle is not active.
     *
     * @author Vaadin Ltd.
     *
     * @since 8.1
     */
OsgiVaadinResources (/shared/src/main/java/com/vaadin/osgi/resources/OsgiVaadinResources.java)/**
 * {@link BundleActivator} used to provide access to the
 * {@link VaadinResourceService} singleton for publishing themes, widgetsets and
 * other necessary resources.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.1
 * @deprecated use OSGi DS services to bind a instance of
 *             {@link VaadinResourceService}
 */
OsgiVaadinTheme (/shared/src/main/java/com/vaadin/osgi/resources/OsgiVaadinTheme.java)/**
 * Used to declare a Vaadin Theme for use in OSGi. The theme is expected to be
 * in the same OSGi bundle as the class implementing this interface, under the
 * path "/VAADIN/themes/{themeName}" where {themeName} is what is returned by
 * {@link OsgiVaadinTheme#getName()}.
 * <p>
 * To publish a theme, an implementation of this interface needs to be
 * registered as an OSGi service, which makes
 * <code>VaadinResourceTrackerComponent</code> automatically publish the theme
 * with the given name.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.1
 */
OsgiVaadinWidgetset (/shared/src/main/java/com/vaadin/osgi/resources/OsgiVaadinWidgetset.java)/**
 * Used to declare a Vaadin Widgetset for use in OSGi. The widgetset is expected
 * to be in the same OSGi bundle as the class implementing this interface, under
 * the path "/VAADIN/widgetsets/{widgetsetName}" where {widgetsetName} is what
 * is returned by {@link OsgiVaadinWidgetset#getName()}.
 * <p>
 * To publish a widgetset, an implementation of this interface needs to be
 * registered as an OSGi service, which makes
 * <code>VaadinResourceTrackerComponent</code> automatically publish the
 * widgetset with the given name.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.1
 */
VaadinResourceService (/shared/src/main/java/com/vaadin/osgi/resources/VaadinResourceService.java)/**
 * Service used to publish themes, widgetsets and static resources at the root
 * of a versioned namespaced /VAADIN/ folder.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.1
 */
AbstractComponentState (/shared/src/main/java/com/vaadin/shared/AbstractComponentState.java)/**
 * Default shared state implementation for AbstractComponent.
 *
 * State classes of components should typically extend this class.
 *
 * @since 7.0
 */
AbstractFieldState (/shared/src/main/java/com/vaadin/shared/AbstractFieldState.java)/**
 * State for components that can show the required indicator.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
Helper (/shared/src/main/java/com/vaadin/shared/annotations/DelegateToWidget.java)/**
     * Internal helper for handling default values in a uniform way both at
     * runtime and during widgetset compilation.
     */
ClientRpc (/shared/src/main/java/com/vaadin/shared/communication/ClientRpc.java)/**
 * Interface to be extended by all server to client RPC interfaces.
 *
 * On the server side, proxies of the interface can be obtained from
 * AbstractComponent. On the client, RPC implementations can be registered with
 * AbstractConnector.registerRpc().
 *
 * Note: Currently, each RPC interface may not contain multiple methods with the
 * same name, even if their parameter lists would differ.
 *
 * @since 7.0
 */
MethodInvocation (/shared/src/main/java/com/vaadin/shared/communication/MethodInvocation.java)/**
 * Information needed by the framework to send an RPC method invocation from the
 * client to the server or vice versa.
 *
 * @since 7.0
 */
PushConstants (/shared/src/main/java/com/vaadin/shared/communication/PushConstants.java)/**
 * Shared constants used by push.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
ServerRpc (/shared/src/main/java/com/vaadin/shared/communication/ServerRpc.java)/**
 * Interface to be extended by all client to server RPC interfaces.
 *
 * @since 7.0
 */
SharedState (/shared/src/main/java/com/vaadin/shared/communication/SharedState.java)/**
 * Interface to be implemented by all shared state classes used to communicate
 * basic information about a {@link Connector} from server to client.
 *
 * Shared state classes have to be declared in shared package to be accessible
 * both for server and client code.
 *
 * Shared state objects are only sent from the server to the client, and any
 * modifications from the client should be performed via an RPC call that
 * modifies the authoritative state on the server.
 *
 * A shared state class should be a bean with getters and setters for each
 * field. Supported data types are simple Java types, other beans and maps and
 * arrays of these.
 *
 * On the client side the connector should override
 * {@link com.vaadin.client.ui.AbstractConnector#getState()} to return the
 * correct state type. This automatically causes a correct state object to be
 * created.
 *
 * Subclasses of a {@link Connector} using shared state should also provide a
 * subclass of the shared state class of the parent class to extend the state. A
 * single {@link Connector} can only have one shared state object.
 *
 * @since 7.0
 */
Connector (/shared/src/main/java/com/vaadin/shared/Connector.java)/**
 * Interface implemented by all classes that are capable of communicating with
 * the server or the client side.
 * <p>
 * A connector consists of a shared state (server sets the state and
 * automatically communicates changes to the client) and the possibility to do
 * RPC calls either from the server to the client or from the client to the
 * server.
 * </p>
 * <p>
 * No classes should implement this interface directly, client side classes
 * wanting to communicate with server side should implement
 * {@link com.vaadin.client.ServerConnector} and server side classes should
 * implement {@link com.vaadin.server.ClientConnector}.
 * </p>
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ContextClickRpc (/shared/src/main/java/com/vaadin/shared/ContextClickRpc.java)/**
 * Client-to-server RPC interface for context click events.
 *
 * @since 7.6
 * @author Vaadin Ltd
 */
CustomComponentState (/shared/src/main/java/com/vaadin/shared/customcomponent/CustomComponentState.java)/**
 * Shared state for CustomComponent.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
DataCommunicatorClientRpc (/shared/src/main/java/com/vaadin/shared/data/DataCommunicatorClientRpc.java)/**
 * RPC interface used by DataProvider to send data to the client-side.
 *
 * @since 8.0
 */
DataCommunicatorConstants (/shared/src/main/java/com/vaadin/shared/data/DataCommunicatorConstants.java)/**
 * Set of contants used by DataCommunicator. These are commonly used JsonObject
 * keys which are considered to be reserved for internal use.
 *
 * @since 8.0
 */
DataProviderRpc (/shared/src/main/java/com/vaadin/shared/data/DataProviderRpc.java)/**
 * RPC interface used for pushing container data to the client.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
DataRequestRpc (/shared/src/main/java/com/vaadin/shared/data/DataRequestRpc.java)/**
 * RPC interface used for requesting container data to the client.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
HierarchicalDataCommunicatorConstants (/shared/src/main/java/com/vaadin/shared/data/HierarchicalDataCommunicatorConstants.java)/**
 * Set of contants used in data communication of hierarchical data. These are
 * commonly used JsonObject keys which are considered to be reserved for
 * internal use.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
GridMultiSelectServerRpc (/shared/src/main/java/com/vaadin/shared/data/selection/GridMultiSelectServerRpc.java)/**
 * Transmits selection events for grid multiselection model to server side.
 *
 * @since 8.0
 * @author Vaadin Ltd.
 *
 */
MultiSelectServerRpc (/shared/src/main/java/com/vaadin/shared/data/selection/MultiSelectServerRpc.java)/**
 * Transmits SelectionModel selection changes from the client to the server.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 */
SelectionServerRpc (/shared/src/main/java/com/vaadin/shared/data/selection/SelectionServerRpc.java)/**
 * Transmits SelectionModel selection events from the client to the server.
 *
 * @since 8.0
 */
AbstractListingExtensionState (/shared/src/main/java/com/vaadin/shared/extension/abstractlisting/AbstractListingExtensionState.java)/**
 * Default shared state implementation for AbstractListingExtension.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
DataCommunicatorState (/shared/src/main/java/com/vaadin/shared/extension/datacommunicator/DataCommunicatorState.java)/**
 * Shared state for DataCommunicator.
 *
 * @since 8.0
 */
HierarchicalDataCommunicatorState (/shared/src/main/java/com/vaadin/shared/extension/datacommunicator/HierarchicalDataCommunicatorState.java)/**
 * Shared state for HierarchicalDataCommunicator.
 *
 * @since 8.1
 */
FileDownloaderState (/shared/src/main/java/com/vaadin/shared/extension/filedownloader/FileDownloaderState.java)/**
 * Shared state for FileDownloader.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
PartInformationState (/shared/src/main/java/com/vaadin/shared/extension/PartInformationState.java)/**
 * Shared state for {@code AbstractEventTriggerExtensionConnector} extension.
 *
 * @since 8.4
 */
ResponsiveState (/shared/src/main/java/com/vaadin/shared/extension/responsive/ResponsiveState.java)/**
 * Shared state for Responsive extension.
 *
 * @since 8.0
 */
MouseEventDetails (/shared/src/main/java/com/vaadin/shared/MouseEventDetails.java)/**
 * Helper class to store and transfer mouse event details.
 */
Range (/shared/src/main/java/com/vaadin/shared/Range.java)/**
 * An immutable representation of a range, marked by start and end points.
 * <p>
 * The range is treated as inclusive at the start, and exclusive at the end.
 * I.e. the range [0..1[ has the length 1, and represents one integer: 0.
 * <p>
 * The range is considered {@link #isEmpty() empty} if the start is the same as
 * the end.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
Registration (/shared/src/main/java/com/vaadin/shared/Registration.java)/**
 * A registration object for removing an event listener added to a source.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
AbstractComponentContainerState (/shared/src/main/java/com/vaadin/shared/ui/AbstractComponentContainerState.java)/**
 * Default shared state implementation for AbstractComponentContainer.
 *
 * @since 8.0
 */
AbstractLayoutState (/shared/src/main/java/com/vaadin/shared/ui/AbstractLayoutState.java)/**
 * Shared state for AbstractLayout.
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
AbstractListingState (/shared/src/main/java/com/vaadin/shared/ui/abstractlisting/AbstractListingState.java)/**
 * Shared state for {@code AbstractListing}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
AbstractMultiSelectState (/shared/src/main/java/com/vaadin/shared/ui/abstractmultiselect/AbstractMultiSelectState.java)/**
 * Shared state for {@code AbstractMultiSelect}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
AbstractSingleComponentContainerState (/shared/src/main/java/com/vaadin/shared/ui/AbstractSingleComponentContainerState.java)/**
 * Default shared state implementation for AbstractSingleComponentContainer.
 *
 * @since 8.0
 */
AbstractSingleSelectState (/shared/src/main/java/com/vaadin/shared/ui/AbstractSingleSelectState.java)/**
 * Shared state for {@code AbstractSingleSelect}.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
Bits (/shared/src/main/java/com/vaadin/shared/ui/AlignmentInfo.java)/** Bitmask values for client server communication. */
AudioState (/shared/src/main/java/com/vaadin/shared/ui/audio/AudioState.java)/**
 * Shared state for the Audio component.
 *
 * @since 7.6
 */
ButtonServerRpc (/shared/src/main/java/com/vaadin/shared/ui/button/ButtonServerRpc.java)/**
 * RPC interface for calls from client to server.
 *
 * @since 7.0
 */
ButtonState (/shared/src/main/java/com/vaadin/shared/ui/button/ButtonState.java)/**
 * Shared state for {@link com.vaadin.ui.Button} and
 * {@link com.vaadin.ui.NativeButton}.
 *
 * @see AbstractComponentState
 *
 * @since 7.0
 */
AbstractColorPickerState (/shared/src/main/java/com/vaadin/shared/ui/colorpicker/AbstractColorPickerState.java)/**
 * Default shared state implementation for AbstractColorPicker.
 *
 * @since 8.0
 */
Color (/shared/src/main/java/com/vaadin/shared/ui/colorpicker/Color.java)/**
 * Default implementation for color.
 *
 * @since 7.0.0
 */
ColorPickerAreaState (/shared/src/main/java/com/vaadin/shared/ui/colorpicker/ColorPickerAreaState.java)/**
 * Default shared state implementation for ColorPickerArea.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
ColorPickerGradientServerRpc (/shared/src/main/java/com/vaadin/shared/ui/colorpicker/ColorPickerGradientServerRpc.java)/**
 * RPC interface for ColorPickerGradient.
 *
 * @since 7.0.0
 *
 */
ColorPickerGradientState (/shared/src/main/java/com/vaadin/shared/ui/colorpicker/ColorPickerGradientState.java)/**
 * Default shared state implementation for ColorPickerGradient.
 *
 * @since 7.0.0
 */
ColorPickerGridServerRpc (/shared/src/main/java/com/vaadin/shared/ui/colorpicker/ColorPickerGridServerRpc.java)/**
 * RPC interface for ColorPickerGrid.
 *
 * @since 7.0.0
 *
 */
ColorPickerGridState (/shared/src/main/java/com/vaadin/shared/ui/colorpicker/ColorPickerGridState.java)/**
 * Default shared state implementation for ColorPickerGrid.
 *
 * @since 7.0.0
 */
ColorPickerServerRpc (/shared/src/main/java/com/vaadin/shared/ui/colorpicker/ColorPickerServerRpc.java)/**
 * RPC interface for AbstractColorPicker.
 *
 * @since 7.0.0
 *
 */
ColorPickerState (/shared/src/main/java/com/vaadin/shared/ui/colorpicker/ColorPickerState.java)/**
 * Default shared state implementation for ColorPicker.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
ComboBoxClientRpc (/shared/src/main/java/com/vaadin/shared/ui/combobox/ComboBoxClientRpc.java)/**
 * Server to client RPC interface for ComboBox.
 *
 * @since 8.3.1
 */
ComboBoxConstants (/shared/src/main/java/com/vaadin/shared/ui/combobox/ComboBoxConstants.java)/**
 * Constants related to the combo box component and its client-server
 * communication.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
ComboBoxServerRpc (/shared/src/main/java/com/vaadin/shared/ui/combobox/ComboBoxServerRpc.java)/**
 * Client to server RPC interface for ComboBox.
 *
 * @since 8.0
 */
ComboBoxState (/shared/src/main/java/com/vaadin/shared/ui/combobox/ComboBoxState.java)/**
 * Shared state for the ComboBox component.
 *
 * @since 7.0
 */
CompositeState (/shared/src/main/java/com/vaadin/shared/ui/composite/CompositeState.java)/**
 * Shared state for Composite.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
CustomFieldState (/shared/src/main/java/com/vaadin/shared/ui/customfield/CustomFieldState.java)/**
 * State class for CustomField.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
AbstractDateFieldServerRpc (/shared/src/main/java/com/vaadin/shared/ui/datefield/AbstractDateFieldServerRpc.java)/**
 * RPC interface for calls from client to server.
 *
 * @since 8.2
 */
AbstractDateFieldState (/shared/src/main/java/com/vaadin/shared/ui/datefield/AbstractDateFieldState.java)/**
 * Shared state for the AbstractDateField component.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
AbstractTextualDateFieldState (/shared/src/main/java/com/vaadin/shared/ui/datefield/AbstractTextualDateFieldState.java)/**
 * Shared state for the AbstractLocalDateField component.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
InlineDateTimeFieldState (/shared/src/main/java/com/vaadin/shared/ui/datefield/InlineDateTimeFieldState.java)/**
 * @author Vaadin Ltd
 * @since 8.0
 */
LocalDateFieldState (/shared/src/main/java/com/vaadin/shared/ui/datefield/LocalDateFieldState.java)/**
 * Shared state for the DateField component.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
LocalDateTimeFieldState (/shared/src/main/java/com/vaadin/shared/ui/datefield/LocalDateTimeFieldState.java)/**
 * Shared state for the DateTimeField component.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
Criterion (/shared/src/main/java/com/vaadin/shared/ui/dnd/criteria/Criterion.java)/**
 * Stores parameters for the drag and drop acceptance criterion defined using
 * the criteria API.
 * <p>
 * When data is dragged over a drop target, the value here is compared to the
 * payload added in DropTargetExtension with same key and value type.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
Payload (/shared/src/main/java/com/vaadin/shared/ui/dnd/criteria/Payload.java)/**
 * Stores key/value pairs and the value type. Payload is set in
 * DragSourceExtension and is transferred during drag operation. It is used for
 * comparing values to acceptance criteria.
 *
 * @since 8.1
 */
DragSourceRpc (/shared/src/main/java/com/vaadin/shared/ui/dnd/DragSourceRpc.java)/**
 * RPC for firing server side event when client side dragstart event happens on
 * drag source.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
DragSourceState (/shared/src/main/java/com/vaadin/shared/ui/dnd/DragSourceState.java)/**
 * State class containing parameters for DragSourceExtension.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
DropTargetRpc (/shared/src/main/java/com/vaadin/shared/ui/dnd/DropTargetRpc.java)/**
 * RPC for firing server side drop event when client side drop event happens on
 * drop target.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
DropTargetState (/shared/src/main/java/com/vaadin/shared/ui/dnd/DropTargetState.java)/**
 * State class containing parameters for DropTargetExtension.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
FileDropTargetClientRpc (/shared/src/main/java/com/vaadin/shared/ui/dnd/FileDropTargetClientRpc.java)/**
 * RPC for sending the upload URLs to the client for uploading files.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
FileDropTargetRpc (/shared/src/main/java/com/vaadin/shared/ui/dnd/FileDropTargetRpc.java)/**
 * RPC for requesting upload URLs for files dropped on the file drop target.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
FileDropTargetState (/shared/src/main/java/com/vaadin/shared/ui/dnd/FileDropTargetState.java)/**
 * State class containing parameters for FileDropTarget.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
FileParameters (/shared/src/main/java/com/vaadin/shared/ui/dnd/FileParameters.java)/**
 * Contains parameters of a file. Used for transferring information about
 * dropped files from the client to the server.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
DragAndDropWrapperServerRpc (/shared/src/main/java/com/vaadin/shared/ui/draganddropwrapper/DragAndDropWrapperServerRpc.java)/**
 * RPC interface for calls from client to server.
 *
 * @since 7.6.4
 * @author Vaadin Ltd
 */
DragAndDropWrapperState (/shared/src/main/java/com/vaadin/shared/ui/draganddropwrapper/DragAndDropWrapperState.java)/**
 * Shared state for DragAndDropWrapper.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
AbstractGridExtensionState (/shared/src/main/java/com/vaadin/shared/ui/grid/AbstractGridExtensionState.java)/**
 * State object for AbstractGridExtension.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
AbstractSelectionModelState (/shared/src/main/java/com/vaadin/shared/ui/grid/AbstractSelectionModelState.java)/**
 * Shared state for grid's abstract selection model.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 */
ColumnState (/shared/src/main/java/com/vaadin/shared/ui/grid/ColumnState.java)/**
 * Shared state for a Grid column.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
DetailsManagerState (/shared/src/main/java/com/vaadin/shared/ui/grid/DetailsManagerState.java)/**
 * Shared state for DetailsManager extension.
 *
 * @since 8.0
 */
EditorClientRpc (/shared/src/main/java/com/vaadin/shared/ui/grid/editor/EditorClientRpc.java)/**
 * An RPC interface for the grid editor server-to-client communications.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
EditorServerRpc (/shared/src/main/java/com/vaadin/shared/ui/grid/editor/EditorServerRpc.java)/**
 * An RPC interface for the grid editor client-to-server communications.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
EditorState (/shared/src/main/java/com/vaadin/shared/ui/grid/editor/EditorState.java)/**
 * State object for Editor in Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
GridClientRpc (/shared/src/main/java/com/vaadin/shared/ui/grid/GridClientRpc.java)/**
 * Server-to-client RPC interface for the Grid component.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridConstants (/shared/src/main/java/com/vaadin/shared/ui/grid/GridConstants.java)/**
 * Container class for common constants and default values used by the Grid
 * component.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridDragSourceRpc (/shared/src/main/java/com/vaadin/shared/ui/grid/GridDragSourceRpc.java)/**
 * RPC for firing server side drag start and drag end events when the
 * corresponding client side events happen on the drag source Grid.
 *
 * @author Vaadin Ltd.
 * @since 8.1
 */
GridDragSourceState (/shared/src/main/java/com/vaadin/shared/ui/grid/GridDragSourceState.java)/**
 * State class containing parameters for GridDragSource.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
GridDropTargetRpc (/shared/src/main/java/com/vaadin/shared/ui/grid/GridDropTargetRpc.java)/**
 * RPC for firing server side drop event when client side drop event happens on
 * drop target Grid.
 *
 * @author Vaadin Ltd.
 * @since 8.1
 */
GridDropTargetState (/shared/src/main/java/com/vaadin/shared/ui/grid/GridDropTargetState.java)/**
 * State class containing parameters for GridDropTarget.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
GridServerRpc (/shared/src/main/java/com/vaadin/shared/ui/grid/GridServerRpc.java)/**
 * Client-to-server RPC interface for the Grid component.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
GridState (/shared/src/main/java/com/vaadin/shared/ui/grid/GridState.java)/**
 * The shared state for the {@link com.vaadin.ui.Grid} component.
 *
 * @since 8.0
 * @author Vaadin Ltd
 */
MultiSelectionModelState (/shared/src/main/java/com/vaadin/shared/ui/grid/MultiSelectionModelState.java)/**
 * SharedState object for MultiSelectionModelImpl.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 */
AbstractRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/AbstractRendererState.java)/**
 * Default shared state implementation for AbstractRenderer.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
ButtonRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/ButtonRendererState.java)/**
 * Shared state for ButtonRenderer.
 *
 * @since 8.0
 */
ClickableRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/ClickableRendererState.java)/**
 * Shared state for ClickableRenderer.
 *
 * @since 8.0
 */
ComponentRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/ComponentRendererState.java)/**
 * Shared state for ComponentRenderer.
 *
 * @author Vaadin
 * @since 8.1
 */
DateRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/DateRendererState.java)/**
 * Shared state for DateRenderer.
 *
 * @since 8.0
 */
HtmlRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/HtmlRendererState.java)/**
 * Shared state for HtmlRenderer.
 *
 * @since 8.0
 */
ImageRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/ImageRendererState.java)/**
 * Shared state for ImageRenderer.
 *
 * @since 8.0
 */
LocalDateRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/LocalDateRendererState.java)/**
 * Shared state of LocalDateRenderer.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
LocalDateTimeRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/LocalDateTimeRendererState.java)/**
 * Shared state of LocalDateTimeRenderer.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
NumberRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/NumberRendererState.java)/**
 * Shared state for HtmlRenderer.
 *
 * @since 8.0
 */
ProgressBarRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/ProgressBarRendererState.java)/**
 * Shared state for HtmlRenderer.
 *
 * @since 8.0
 */
RendererClickRpc (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/RendererClickRpc.java)/**
 * RPC interface implemented by server side {@link ClickableRenderer}s to
 * receive click events from their client side counterparts.
 */
TextRendererState (/shared/src/main/java/com/vaadin/shared/ui/grid/renderers/TextRendererState.java)/**
 * Shared state for TextRenderer.
 *
 * @since 8.0
 */
RowState (/shared/src/main/java/com/vaadin/shared/ui/grid/SectionState.java)/** The state of a header or footer row. */
CellState (/shared/src/main/java/com/vaadin/shared/ui/grid/SectionState.java)/** The state of a header or footer cell. */
SectionState (/shared/src/main/java/com/vaadin/shared/ui/grid/SectionState.java)/**
 * Shared state for Grid headers and footers.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
SingleSelectionModelState (/shared/src/main/java/com/vaadin/shared/ui/grid/SingleSelectionModelState.java)/**
 * Shared state for grid's single selection model.
 *
 * @author Vaadin Ltd
 *
 * @since 8.0
 */
ListingJsonConstants (/shared/src/main/java/com/vaadin/shared/ui/ListingJsonConstants.java)/**
 * JSON key constants for common listing item attributes in server-client
 * communication.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
ListSelectState (/shared/src/main/java/com/vaadin/shared/ui/listselect/ListSelectState.java)/**
 * Shared state for ListSelect component.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
LoginFormConstants (/shared/src/main/java/com/vaadin/shared/ui/loginform/LoginFormConstants.java)/**
 * Constants for LoginForm.
 *
 * @since 7.7
 * @author Vaadin Ltd
 */
MarginInfo (/shared/src/main/java/com/vaadin/shared/ui/MarginInfo.java)/**
 * Describes the margin settings for each edge of a Component.
 *
 * @author Vaadin Ltd
 */
MediaControl (/shared/src/main/java/com/vaadin/shared/ui/MediaControl.java)/**
 * Server to client RPC interface for controlling playback of the media.
 *
 * @since 7.0
 */
NativeSelectState (/shared/src/main/java/com/vaadin/shared/ui/nativeselect/NativeSelectState.java)/**
 * Shared state for {@code NativeSelect}.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.0
 */
NotificationServerRpc (/shared/src/main/java/com/vaadin/shared/ui/notification/NotificationServerRpc.java)/**
 * Client to server RPC interface for Notification.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.2
 */
NotificationState (/shared/src/main/java/com/vaadin/shared/ui/notification/NotificationState.java)/**
 * Shared state for {@link com.vaadin.ui.Notification}.
 *
 * @author Vaadin Ltd.
 *
 * @since 8.2
 */
CheckBoxGroupState (/shared/src/main/java/com/vaadin/shared/ui/optiongroup/CheckBoxGroupState.java)/**
 * Shared state for the CheckBoxGroup component.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
RadioButtonGroupState (/shared/src/main/java/com/vaadin/shared/ui/optiongroup/RadioButtonGroupState.java)/**
 * Shared state for the RadioButtonGroup component.
 *
 * @author Vaadin Ltd.
 * @since 8.0
 */
FormLayoutState (/shared/src/main/java/com/vaadin/shared/ui/orderedlayout/FormLayoutState.java)/**
 * Shared state for the FormLayout component.
 *
 * @since 7.6
 */
PasswordFieldState (/shared/src/main/java/com/vaadin/shared/ui/passwordfield/PasswordFieldState.java)/**
 * State class for PasswordField.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
ProgressBarState (/shared/src/main/java/com/vaadin/shared/ui/progressindicator/ProgressBarState.java)/**
 * {@link SharedState} for {@link com.vaadin.ui.ProgressBar}.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
RichTextAreaClientRpc (/shared/src/main/java/com/vaadin/shared/ui/richtextarea/RichTextAreaClientRpc.java)/**
 * Server to client RPC interface for RichTextArea.
 *
 * @since 8.0
 */
RichTextAreaServerRpc (/shared/src/main/java/com/vaadin/shared/ui/richtextarea/RichTextAreaServerRpc.java)/**
 * Client to server RPC interface for RichTextArea.
 *
 * @since 8.0
 */
RichTextAreaState (/shared/src/main/java/com/vaadin/shared/ui/richtextarea/RichTextAreaState.java)/**
 * State for RichTextArea.
 *
 * @since 8.0
 */
TabIndexState (/shared/src/main/java/com/vaadin/shared/ui/TabIndexState.java)/**
 * State for components that support tab indexes.
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 *
 */
TabsheetClientRpc (/shared/src/main/java/com/vaadin/shared/ui/tabsheet/TabsheetClientRpc.java)/**
 * Server to client RPC methods for the TabSheet.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
TabsheetServerRpc (/shared/src/main/java/com/vaadin/shared/ui/tabsheet/TabsheetServerRpc.java)/**
 * Client to server RPC methods for the TabSheet.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
TabState (/shared/src/main/java/com/vaadin/shared/ui/tabsheet/TabState.java)/**
 * Shared state of a single tab in a Tabsheet or an Accordion.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
TextAreaServerRpc (/shared/src/main/java/com/vaadin/shared/ui/textarea/TextAreaServerRpc.java)/**
 * Client to server RPC interface for TextArea.
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
AbstractTextFieldClientRpc (/shared/src/main/java/com/vaadin/shared/ui/textfield/AbstractTextFieldClientRpc.java)/**
 * Server to client RPC interface for AbstractTextField.
 *
 * @since 8.0
 */
AbstractTextFieldServerRpc (/shared/src/main/java/com/vaadin/shared/ui/textfield/AbstractTextFieldServerRpc.java)/**
 * Client to server RPC interface for AbstractTextField.
 *
 * @since 8.0
 */
AbstractTextFieldState (/shared/src/main/java/com/vaadin/shared/ui/textfield/AbstractTextFieldState.java)/**
 * State class for AbstractTextField.
 */
TextFieldState (/shared/src/main/java/com/vaadin/shared/ui/textfield/TextFieldState.java)/**
 * State class for TextField.
 *
 * @since 8.0
 */
TreeMultiSelectionModelState (/shared/src/main/java/com/vaadin/shared/ui/tree/TreeMultiSelectionModelState.java)/**
 * State for TreeMultiSelectionModel.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
TreeRendererState (/shared/src/main/java/com/vaadin/shared/ui/tree/TreeRendererState.java)/**
 * Shared state for Tree renderer.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
FocusParentRpc (/shared/src/main/java/com/vaadin/shared/ui/treegrid/FocusParentRpc.java)/**
 * RPC to handle client originated parent focusing in TreeGrid.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
FocusRpc (/shared/src/main/java/com/vaadin/shared/ui/treegrid/FocusRpc.java)/**
 * RPC to handle focusing in TreeGrid.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
NodeCollapseRpc (/shared/src/main/java/com/vaadin/shared/ui/treegrid/NodeCollapseRpc.java)/**
 * RPC to handle client originated collapse and expand actions on hierarchical
 * rows in TreeGrid.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
TreeGridClientRpc (/shared/src/main/java/com/vaadin/shared/ui/treegrid/TreeGridClientRpc.java)/**
 * Server-to-client RPC interface for the TreeGrid component.
 *
 * @since 8.1
 * @author Vaadin Ltd
 */
TreeGridDragSourceState (/shared/src/main/java/com/vaadin/shared/ui/treegrid/TreeGridDragSourceState.java)/**
 * State class containing parameters for TreeGridDragSource.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
TreeGridDropTargetRpc (/shared/src/main/java/com/vaadin/shared/ui/treegrid/TreeGridDropTargetRpc.java)/**
 * RPC for firing server side drop event when client side drop event happens on
 * drop target TreeGrid.
 *
 * @author Vaadin Ltd.
 * @since 8.1
 */
TreeGridDropTargetState (/shared/src/main/java/com/vaadin/shared/ui/treegrid/TreeGridDropTargetState.java)/**
 * State class containing parameters for TreeGridDropTarget.
 *
 * @author Vaadin Ltd
 * @since 8.1
 */
TreeGridState (/shared/src/main/java/com/vaadin/shared/ui/treegrid/TreeGridState.java)/**
 * The shared state for the {@link com.vaadin.ui.TreeGrid} component.
 *
 * @since 8.1
 * @author Vaadin Ltd
 */
TwinColSelectState (/shared/src/main/java/com/vaadin/shared/ui/twincolselect/TwinColSelectState.java)/**
 * Shared state for the TwinColSelect component.
 *
 * @since 7.0
 */
DebugWindowClientRpc (/shared/src/main/java/com/vaadin/shared/ui/ui/DebugWindowClientRpc.java)/**
 * Client RPC methods for the Debug Window.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
DebugWindowServerRpc (/shared/src/main/java/com/vaadin/shared/ui/ui/DebugWindowServerRpc.java)/**
 * Server RPC methods for the Debug Window.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
PageClientRpc (/shared/src/main/java/com/vaadin/shared/ui/ui/PageClientRpc.java)/**
 * Client side rpc class for Page / UI.
 *
 * @author Vaadin Ltd
 * @since 7.0
 */
PageState (/shared/src/main/java/com/vaadin/shared/ui/ui/PageState.java)/**
 * The shared state of a {@link com.vaadin.server.Page Page}.
 *
 * Note that at the moment this is not a stand-alone state class but embedded in
 * {@link UIState}. This might change in the future.
 *
 * @since 7.1
 */
UIClientRpc (/shared/src/main/java/com/vaadin/shared/ui/ui/UIClientRpc.java)/**
 * Server to Client RPC methods for UI.
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
UploadState (/shared/src/main/java/com/vaadin/shared/ui/upload/UploadState.java)/**
 * Shared state for the Upload component.
 *
 * @since 7.6
 */
WindowOrderRpc (/shared/src/main/java/com/vaadin/shared/ui/WindowOrderRpc.java)/**
 * Window order RPC interface.
 * <p>
 * Notifies server when windows order is changed.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 */
SharedUtil (/shared/src/main/java/com/vaadin/shared/util/SharedUtil.java)/**
 * Misc internal utility methods used by both the server and the client package.
 *
 * @author Vaadin Ltd
 * @since 7.1
 *
 */
VaadinUriResolver (/shared/src/main/java/com/vaadin/shared/VaadinUriResolver.java)/**
 * Utility for translating special Vaadin URIs like theme:// and app:// into
 * URLs usable by the browser. This is an abstract class performing the main
 * logic in {@link #resolveVaadinUri(String)} and using abstract methods in the
 * class for accessing information specific to the current environment.
 *
 * @since 7.4
 * @author Vaadin Ltd
 */
VBrowserDetails (/shared/src/main/java/com/vaadin/shared/VBrowserDetails.java)/**
 * Class that parses the user agent string from the browser and provides
 * information about the browser. Used internally by
 * {@link com.vaadin.client.BrowserInfo} and
 * {@link com.vaadin.server.WebBrowser}. Should not be used directly.
 *
 * @author Vaadin Ltd.
 * @since 6.3
 */
BeanValidationTest (/test/bean-api-validation/src/test/java/com/vaadin/data/BeanValidationTest.java)/**
 * @author Vaadin Ltd
 *
 */
BeanValidationTest (/test/bean-impl-validation/src/test/java/com/vaadin/data/BeanValidationTest.java)/**
 * @author Vaadin Ltd
 *
 */
ServletIntegrationDefaultPushUI (/test/servlet-containers/generic-ui/src/main/java/com/vaadin/tests/integration/ServletIntegrationDefaultPushUI.java)/**
 * Server test which uses the default push mechanisms
 *
 * @since 7.1.12
 * @author Vaadin Ltd
 */
ServletIntegrationLongPollingUI (/test/servlet-containers/generic-ui/src/main/java/com/vaadin/tests/integration/ServletIntegrationLongPollingUI.java)/**
 * Server test which uses long polling
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
ServletIntegrationStreamingUI (/test/servlet-containers/generic-ui/src/main/java/com/vaadin/tests/integration/ServletIntegrationStreamingUI.java)/**
 * Server test which uses streaming
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
ServletIntegrationWebsocketUI (/test/servlet-containers/generic-ui/src/main/java/com/vaadin/tests/integration/ServletIntegrationWebsocketUI.java)/**
 * Server test which uses websockets
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
JSR356Servlet (/test/servlet-containers/generic-ui/src/main/java/com/vaadin/tests/JSR356Servlet.java)/**
 * Created by elmot on 06-02-2017.
 */
AbstractDateFieldElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/AbstractDateFieldElement.java)/**
 * Element class for testing AbstractDateField.
 */
AbstractSingleSelectElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/AbstractSingleSelectElement.java)/**
 * A common base element class for all single select components.
 *
 * @since 8.1.1
 */
DateFieldElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/DateFieldElement.java)/**
 * Element class for testing DateField.
 */
DateTimeFieldElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/DateTimeFieldElement.java)/**
 * Element class for testing DateTimeField.
 */
GridElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/GridElement.java)/**
 * TestBench Element API for Grid.
 *
 * @author Vaadin Ltd
 */
InlineDateFieldElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/InlineDateFieldElement.java)/**
 * Element class for testing InlineDateField.
 */
InlineDateTimeFieldElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/InlineDateTimeFieldElement.java)/**
 * @author Vaadin Ltd
 *
 */
LoginFormElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/LoginFormElement.java)/**
 * Element class for testing LoginForm.
 */
CollapseMenuElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/TableElement.java)/**
     * Element representing a collapse menu of a Table.
     */
TreeElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/TreeElement.java)/**
 * Testbench Element API for {@code Tree}.
 * <p>
 * <strong>Note:</strong> This TreeElement is for the Vaadin 8 version of Tree.
 * Use {@link com.vaadin.v7.testbench.elements.TreeElement} for the
 * compatibility version.
 *
 * @author Vaadin Ltd.
 * @since 8.1
 */
TreeGridElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/TreeGridElement.java)/**
 * TestBench Element API for TreeGrid.
 *
 * @author Vaadin Ltd
 */
WindowElement (/testbench-api/src/main/java/com/vaadin/testbench/elements/WindowElement.java)/**
 * Element API for the Window class.
 *
 * Note that parts of the Window element API has limitations on IE8 and Phantom.
 */
SlowFilter (/uitest/src/main/java/com/vaadin/launcher/DevelopmentServerLauncher.java)/**
     * Sleeps for 2-5 seconds when serving resources that matches given
     * pathSpec. --slowdown=/run/APP/PUBLISHED/*,/other/path/asd.jpg
     */
CacheFilter (/uitest/src/main/java/com/vaadin/launcher/DevelopmentServerLauncher.java)/**
     * Adds "Expires" and "Cache-control" headers when serving resources that
     * match given pathSpec, in order to cache resource for CACHE_MINUTES.
     * --cache=/run/APP/PUBLISHED/*,/other/path/asd.jpg
     */
DevelopmentServerLauncher (/uitest/src/main/java/com/vaadin/launcher/DevelopmentServerLauncher.java)/**
 * Class for running Jetty servlet container within Eclipse project.
 *
 */
BrowserLauncher (/uitest/src/main/java/com/vaadin/launcher/util/BrowserLauncher.java)/**
 * This class opens default browser for DemoLauncher class. Default browser is
 * detected by the operating system.
 *
 */
MeasurementTest (/uitest/src/main/java/com/vaadin/testcategory/MeasurementTest.java)/**
 * Test that is not supposed to be run on validation and run without other
 * verification tests.
 * <p>
 * The purpose of the test to make some measurement (memory, time, etc.).
 *
 *
 * @author Vaadin Ltd
 *
 */
WindowWaiAriaRoles (/uitest/src/main/java/com/vaadin/tests/accessibility/WindowWaiAriaRoles.java)/**
 * UI to test if subwindows get the correct assistive roles.
 *
 * @author Vaadin Ltd
 */
ActionsOnDetachedComponents (/uitest/src/main/java/com/vaadin/tests/actions/ActionsOnDetachedComponents.java)/**
 * @author Vaadin Ltd
 */
HelloWorld (/uitest/src/main/java/com/vaadin/tests/application/HelloWorld.java)/**
 * A simple application to simplify doing quick testing of features when a full
 * test case is not needed
 */
CleanupBrokenUI (/uitest/src/main/java/com/vaadin/tests/applicationcontext/CleanupBrokenUI.java)/**
 * Tests that UI is cleaned from session despite any errors that happen in
 * detach.
 *
 * @author Vaadin Ltd
 */
AbsoluteLayoutRelativeSizeContent (/uitest/src/main/java/com/vaadin/tests/components/absolutelayout/AbsoluteLayoutRelativeSizeContent.java)/**
 * Tests how AbsoluteLayout handles relative sized contents.
 *
 * @author Vaadin Ltd
 */
AbsoluteLayoutResizeComponents (/uitest/src/main/java/com/vaadin/tests/components/absolutelayout/AbsoluteLayoutResizeComponents.java)/**
 * Test UI with different cases for component size changes
 */
TooltipModes (/uitest/src/main/java/com/vaadin/tests/components/abstractcomponent/TooltipModes.java)/**
 * @author Vaadin Ltd
 *
 */
AbstractListingFocusBlurTest (/uitest/src/main/java/com/vaadin/tests/components/AbstractListingFocusBlurTest.java)/**
 * @author Vaadin Ltd
 *
 */
AbstractOrderedLayoutWithCaptions (/uitest/src/main/java/com/vaadin/tests/components/AbstractOrderedLayoutWithCaptions.java)/**
 * Test to see if AbstractOrderedLayout displays captions correctly with
 * expanding ratios.
 *
 * @author Vaadin Ltd
 */
AccordionAddTab (/uitest/src/main/java/com/vaadin/tests/components/accordion/AccordionAddTab.java)/**
 * Test UI for Accordion: old widget should be removed from the tab.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
AccordionRemoveComponent (/uitest/src/main/java/com/vaadin/tests/components/accordion/AccordionRemoveComponent.java)/**
 * Test for removing component from Accordion.
 *
 * @author Vaadin Ltd
 */
AccordionRemoveTab (/uitest/src/main/java/com/vaadin/tests/components/accordion/AccordionRemoveTab.java)/**
 * Test UI for Accordion: tabs should stay selectable after remove tab.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
ButtonKeyboardClick (/uitest/src/main/java/com/vaadin/tests/components/button/ButtonKeyboardClick.java)/**
 * Test UI for availability (x,y) coordinates for button activated via keyboard.
 *
 * @author Vaadin Ltd
 */
ButtonUndefinedWidth (/uitest/src/main/java/com/vaadin/tests/components/button/ButtonUndefinedWidth.java)/**
 * Test UI for buttons with undefined width.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
CheckBoxGroupTestUI (/uitest/src/main/java/com/vaadin/tests/components/checkbox/CheckBoxGroupTestUI.java)/**
 * Test UI for CheckBoxGroup component
 *
 * @author Vaadin Ltd
 */
CheckBoxGroupFocusBlur (/uitest/src/main/java/com/vaadin/tests/components/checkboxgroup/CheckBoxGroupFocusBlur.java)/**
 * This class only provides a component type. The initialization code is inside
 * the AbstractListingFocusBlurTest class.
 *
 * @see AbstractListingFocusBlurTest
 *
 * @author Vaadin Ltd
 *
 */
CheckBoxGroupRequiredIndicator (/uitest/src/main/java/com/vaadin/tests/components/checkboxgroup/CheckBoxGroupRequiredIndicator.java)/**
 * The whole logic is inside HasValueRequiredIndicator. The code here just set
 * value for the component.
 *
 * @author Vaadin Ltd
 *
 */
DisabledCheckBoxGroup (/uitest/src/main/java/com/vaadin/tests/components/checkboxgroup/DisabledCheckBoxGroup.java)/**
 * @author Vaadin Ltd
 *
 */
ColorPickerGridUI (/uitest/src/main/java/com/vaadin/tests/components/colorpicker/ColorPickerGridUI.java)/**
 * Tests index handling in ColorPickerGrid.
 */
ColorPickerHsvTest (/uitest/src/main/java/com/vaadin/tests/components/colorpicker/ColorPickerHsvTest.java)/**
 * Tests the HSV tab slider values when initially opening the tab.
 */
MyImageSource (/uitest/src/main/java/com/vaadin/tests/components/colorpicker/ColorPickerTestUI.java)/**
     * This class is used to represent the preview of the color selection.
     */
DefaultCaptionWidth (/uitest/src/main/java/com/vaadin/tests/components/colorpicker/DefaultCaptionWidth.java)/**
 * Test for color picker with default caption.
 *
 * @author Vaadin Ltd
 */
MyImageSource (/uitest/src/main/java/com/vaadin/tests/components/colorpicker/ValoColorPickerTestUI.java)/**
     * This class is used to represent the preview of the color selection.
     */
ComboBoxClickIcon (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboBoxClickIcon.java)/**
 * Test UI to check click on icon in the combobox.
 *
 * @author Vaadin Ltd
 */
ComboBoxEmptyCaption (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboBoxEmptyCaption.java)/**
 * @author Vaadin Ltd
 *
 */
ComboBoxItemAddingWithFocusListener (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboBoxItemAddingWithFocusListener.java)/**
 * Test UI to verify that focus event actually update the ComboBox suggestion
 * popup
 *
 * @author Vaadin Ltd
 */
ComboboxMenuBarAutoopen (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboboxMenuBarAutoopen.java)/**
 * Test UI for combobox popup which should be closed on any click outside it.
 *
 * @author Vaadin Ltd
 */
ComboBoxMousewheel (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboBoxMousewheel.java)/**
 * Tests mousewheel handling in ComboBox.
 *
 * @author Vaadin Ltd
 */
ComboBoxOnSmallScreen (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboBoxOnSmallScreen.java)/**
 * Test UI for issue #11929 where ComboBox suggestion popup hides the ComboBox
 * itself obscuring the text input field.
 *
 * @author Vaadin Ltd
 */
ComboBoxParentDisable (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboBoxParentDisable.java)/**
 * The Application's "main" class
 */
ComboBoxScrollingWithArrows (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboBoxScrollingWithArrows.java)/**
 * Test UI verifying navigating in combobox via arrow keys.
 */
ComboboxStyleChangeWidth (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboboxStyleChangeWidth.java)/**
 * Test UI for adding a stylename to a combobox with an undefined width.
 *
 * @author Vaadin Ltd
 */
ComboBoxTabWhenFilter (/uitest/src/main/java/com/vaadin/tests/components/combobox/ComboBoxTabWhenFilter.java)/**
 * A test case for typing in combo box input field fast plus then press TAB.
 * When type fast and then press tab didn't add new item. Uses SlowComboBox,
 * which has a delay in setVariables method
 */
SlowComboBox (/uitest/src/main/java/com/vaadin/tests/components/combobox/SlowComboBox.java)/**
 * A combo box component with delay. Can be useful to use while testing UI.
 */
BooleanField (/uitest/src/main/java/com/vaadin/tests/components/customfield/BooleanField.java)/**
 * An example of a custom field for editing a boolean value. The field is
 * composed of multiple components, and could also edit a more complex data
 * structures. Here, the commit etc. logic is not overridden.
 */
CustomDateTimeFormat (/uitest/src/main/java/com/vaadin/tests/components/datefield/CustomDateTimeFormat.java)/**
 * @author Vaadin Ltd
 *
 */
DateFieldPopupPosition (/uitest/src/main/java/com/vaadin/tests/components/datefield/DateFieldPopupPosition.java)/**
 * Test UI for date field Popup calendar.
 *
 * @author Vaadin Ltd
 */
DateTimeFieldPopup (/uitest/src/main/java/com/vaadin/tests/components/datefield/DateTimeFieldPopup.java)/**
 * Test UI for testing the functionality of the popup button.
 */
DateTimeFieldTest (/uitest/src/main/java/com/vaadin/tests/components/datefield/DateTimeFieldTest.java)/**
 * @author Vaadin Ltd
 *
 */
InlineDateTimeFieldTest (/uitest/src/main/java/com/vaadin/tests/components/datefield/InlineDateTimeFieldTest.java)/**
 * @author Vaadin Ltd
 *
 */
PopupDateTimeFieldStates (/uitest/src/main/java/com/vaadin/tests/components/datefield/PopupDateTimeFieldStates.java)/**
 * @author Vaadin Ltd
 *
 */
ReindeerDateFieldPopupPosition (/uitest/src/main/java/com/vaadin/tests/components/datefield/ReindeerDateFieldPopupPosition.java)/**
 * Test UI for date field Popup calendar in reindeer theme.
 *
 * All UI initialization is defined in super class.
 *
 * @author Vaadin Ltd
 */
TimePopupSelection (/uitest/src/main/java/com/vaadin/tests/components/datefield/TimePopupSelection.java)/**
 * @author Vaadin Ltd
 *
 */
ValoDateFieldPopupPosition (/uitest/src/main/java/com/vaadin/tests/components/datefield/ValoDateFieldPopupPosition.java)/**
 * Test UI for date field Popup calendar in Valo theme.
 *
 * All UI initialization is defined in super class.
 *
 * @author Vaadin Ltd
 */
DeclarativeTestUI (/uitest/src/main/java/com/vaadin/tests/components/DeclarativeTestUI.java)/**
 * Declarative test UI. Provides simple instantiation of HTML designs located
 * under {@code uitest/src}. Also provides {@link OnLoad} annotation that lets
 * you easily hook up methods to run after the UI has been created. Note: you
 * <i>must</i> add the {@link DeclarativeUI} annotation to your subclass; not
 * doing this will result in program failure.
 */
DragAndDropFocusObtain (/uitest/src/main/java/com/vaadin/tests/components/draganddropwrapper/DragAndDropFocusObtain.java)/**
 * Test UI for text area inside {@link DragAndDropWrapper}: text area should
 * obtain focus on click.
 *
 * @author Vaadin Ltd
 */
DragAndDropRelativeWidth (/uitest/src/main/java/com/vaadin/tests/components/draganddropwrapper/DragAndDropRelativeWidth.java)/**
 * Test UI for DnD image element size
 *
 * @author Vaadin Ltd
 */
DragAndDropTextArea (/uitest/src/main/java/com/vaadin/tests/components/draganddropwrapper/DragAndDropTextArea.java)/**
 * Test UI for text area: drag image should contain text-area text.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
EmbeddedThemeResource (/uitest/src/main/java/com/vaadin/tests/components/embedded/EmbeddedThemeResource.java)/**
 * Tests that {@link Embedded} uses correct theme when the theme is set with
 * {@link #setTheme(String)}, and also updates correctly if theme is changed
 * later. {@link Image} is used as the baseline for correct behavior.
 *
 * @author Vaadin Ltd
 */
FlashIsVisible (/uitest/src/main/java/com/vaadin/tests/components/embedded/FlashIsVisible.java)/**
 * Tests the legacy flash support in Embedded
 */
FormLayoutClickListener (/uitest/src/main/java/com/vaadin/tests/components/formlayout/FormLayoutClickListener.java)/**
 * Test UI for Form layout click listener.
 *
 * @author Vaadin Ltd
 */
FormLayoutInVerticalLayout (/uitest/src/main/java/com/vaadin/tests/components/formlayout/FormLayoutInVerticalLayout.java)/**
 * Test UI for H2 label inside FormLayout.
 *
 * @author Vaadin Ltd
 */
StylePrefix (/uitest/src/main/java/com/vaadin/tests/components/formlayout/StylePrefix.java)/**
 * Test UI for FormLayout: custom additional styles should be prefixed with
 * "v-formlayout-", not "v-layout-".
 *
 * @author Vaadin Ltd
 */
RefreshDataProvider (/uitest/src/main/java/com/vaadin/tests/components/grid/basics/RefreshDataProvider.java)/**
 * @author Vaadin Ltd
 *
 */
DisallowedDeselection (/uitest/src/main/java/com/vaadin/tests/components/grid/DisallowedDeselection.java)/**
 * @author Vaadin Ltd
 *
 */
GridAriaMultiselectable (/uitest/src/main/java/com/vaadin/tests/components/grid/GridAriaMultiselectable.java)/**
 * @author Vaadin Ltd
 *
 */
GridAriaRowcount (/uitest/src/main/java/com/vaadin/tests/components/grid/GridAriaRowcount.java)/**
 * @author Vaadin Ltd
 *
 */
AddressField (/uitest/src/main/java/com/vaadin/tests/components/grid/GridColumnPresentation.java)/**
     * Dummy HasValue for Address.
     */
GridColumnPresentation (/uitest/src/main/java/com/vaadin/tests/components/grid/GridColumnPresentation.java)/**
 * An example for using a different value and presentation types in a Grid
 * column.
 */
GridDataProviderRefresh (/uitest/src/main/java/com/vaadin/tests/components/grid/GridDataProviderRefresh.java)/**
 * Tests that Grid refresh doesn't get stuck when filtering doesn't match row
 * requests.
 *
 * @author Vaadin Ltd
 */
GridDetailsLayoutExpand (/uitest/src/main/java/com/vaadin/tests/components/grid/GridDetailsLayoutExpand.java)/**
 * Tests the layouting of Grid's details row when it contains a HorizontalLayout
 * with expand ratios.
 *
 * @author Vaadin Ltd
 */
GridDisallowUserSelection (/uitest/src/main/java/com/vaadin/tests/components/grid/GridDisallowUserSelection.java)/**
 * @author Vaadin Ltd
 *
 */
GridEditorEvents (/uitest/src/main/java/com/vaadin/tests/components/grid/GridEditorEvents.java)/**
 * @author Vaadin Ltd
 *
 */
GridEditorTabSkipsNonEditableCells (/uitest/src/main/java/com/vaadin/tests/components/grid/GridEditorTabSkipsNonEditableCells.java)/**
 * Shows a Grid with the only editable columns being the column 1 and 3. That
 * will allow us to test that Tab/Shift+Tab skips cells that are not editable.
 */
GridGeneratedProperties (/uitest/src/main/java/com/vaadin/tests/components/grid/GridGeneratedProperties.java)/**
 * Smoke tests for v7 generated properties in Grid
 */
GridHeight (/uitest/src/main/java/com/vaadin/tests/components/grid/GridHeight.java)/**
 * Tests that Grid gets correct height based on height mode, and resizes
 * properly with details row if height is undefined.
 *
 * @author Vaadin Ltd
 */
GridLayoutDetailsRow (/uitest/src/main/java/com/vaadin/tests/components/grid/GridLayoutDetailsRow.java)/**
 * Tests that details row displays GridLayout contents properly.
 *
 * @author Vaadin Ltd
 */
GridLayoutDetailsRowResize (/uitest/src/main/java/com/vaadin/tests/components/grid/GridLayoutDetailsRowResize.java)/**
 * Tests that details row resizes along with the contents properly.
 *
 * @author Vaadin Ltd
 */
GridManyColumns (/uitest/src/main/java/com/vaadin/tests/components/grid/GridManyColumns.java)/**
 * Test UI for Grid initial rendering performance profiling.
 */
GridManyColumnsV7 (/uitest/src/main/java/com/vaadin/tests/components/grid/GridManyColumnsV7.java)/**
 * Test UI for Grid initial rendering performance profiling.
 */
GridScrollWithoutRows (/uitest/src/main/java/com/vaadin/tests/components/grid/GridScrollWithoutRows.java)/**
 * There is no corresponding TB test as this problem can only be reproduced
 * using SuperDevMode.
 */
GridWithoutRowsOrHeaders (/uitest/src/main/java/com/vaadin/tests/components/grid/GridWithoutRowsOrHeaders.java)/**
 * There is no corresponding TB test as this problem can only be reproduced
 * using SuperDevMode.
 */
HorizontalScrollAfterResize (/uitest/src/main/java/com/vaadin/tests/components/grid/HorizontalScrollAfterResize.java)/**
 * @author Vaadin Ltd
 *
 */
RemoveGridWithComponent (/uitest/src/main/java/com/vaadin/tests/components/grid/RemoveGridWithComponent.java)/**
 * @author Vaadin Ltd
 *
 */
SimpleGridUI (/uitest/src/main/java/com/vaadin/tests/components/grid/SimpleGridUI.java)/**
 * @author Vaadin Ltd
 *
 */
ComponentAlignments (/uitest/src/main/java/com/vaadin/tests/components/gridlayout/ComponentAlignments.java)/**
 * Test UI for TOP_CENTER and TOP_RIGHT alignments in VerticalLayout.
 *
 * @author Vaadin Ltd
 */
GridLayoutRequiredIndicatorLocation (/uitest/src/main/java/com/vaadin/tests/components/gridlayout/GridLayoutRequiredIndicatorLocation.java)/**
 * Test for grid required indicator location within slots.
 */
GridLayoutWithNonIntegerWidth (/uitest/src/main/java/com/vaadin/tests/components/gridlayout/GridLayoutWithNonIntegerWidth.java)/**
 * Main UI class
 */
HasValueRequiredIndicator (/uitest/src/main/java/com/vaadin/tests/components/HasValueRequiredIndicator.java)/**
 * @author Vaadin Ltd
 *
 */
MenuBarClickOpenedMenu (/uitest/src/main/java/com/vaadin/tests/components/menubar/MenuBarClickOpenedMenu.java)/**
 * Test UI for top click on expanded top level menu and sub-menus.
 *
 * @author Vaadin Ltd
 */
MenuBarsWithNesting (/uitest/src/main/java/com/vaadin/tests/components/menubar/MenuBarsWithNesting.java)/**
 * A UI for testing VMenuBar.getSubPartElement(String). The UI contains two
 * MenuBars, one without icons and one containing items with and without icons.
 * Some of the icons are textual (using VaadinIcons) and should behave like
 * items with image icons: the icon should not be considered to be a part of the
 * item's caption.
 *
 * @author Vaadin
 */
MenuBarTooltipsNearEdge (/uitest/src/main/java/com/vaadin/tests/components/menubar/MenuBarTooltipsNearEdge.java)/**
 * Test to see if tooltips will render in the correct locations near the edges.
 *
 * @author Vaadin Ltd
 */
MenuTooltip (/uitest/src/main/java/com/vaadin/tests/components/menubar/MenuTooltip.java)/**
 * Test to see if tooltips on menu items obscure other items on the menu.
 *
 * @author Vaadin Ltd
 */
SpaceMenuBarNavigation (/uitest/src/main/java/com/vaadin/tests/components/menubar/SpaceMenuBarNavigation.java)/**
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
NativeButtonClick (/uitest/src/main/java/com/vaadin/tests/components/nativebutton/NativeButtonClick.java)/**
 * UI used to validate click coordinates reported from clicks on NativeButton
 * elements.
 *
 * @author Vaadin Ltd
 */
NativeSelectDisabled (/uitest/src/main/java/com/vaadin/tests/components/nativeselect/NativeSelectDisabled.java)/**
 * @author Vaadin Ltd
 *
 */
NativeSelectEmptySelection (/uitest/src/main/java/com/vaadin/tests/components/nativeselect/NativeSelectEmptySelection.java)/**
 * @author Vaadin Ltd
 *
 */
NativeSelectFocusBlur (/uitest/src/main/java/com/vaadin/tests/components/nativeselect/NativeSelectFocusBlur.java)/**
 * This class only provides a component type. The initialization code is inside
 * the AbstractListingFocusBlurTest class.
 *
 * @see AbstractListingFocusBlurTest
 *
 * @author Vaadin Ltd
 *
 */
NativeSelectInit (/uitest/src/main/java/com/vaadin/tests/components/nativeselect/NativeSelectInit.java)/**
 * @author Vaadin Ltd
 *
 */
MiddleNotificationPosition (/uitest/src/main/java/com/vaadin/tests/components/notification/MiddleNotificationPosition.java)/**
 * Test UI class for Notification with middle left and middle right positions.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
NotificationDelay (/uitest/src/main/java/com/vaadin/tests/components/notification/NotificationDelay.java)/**
 * UI for notification delay test.
 *
 * @author Vaadin Ltd
 */
NotificationsWaiAria (/uitest/src/main/java/com/vaadin/tests/components/notification/NotificationsWaiAria.java)/**
 * Test UI for different roles of Notifications.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
OptionGroupRetainFocusKeyboardValueChange (/uitest/src/main/java/com/vaadin/tests/components/optiongroup/OptionGroupRetainFocusKeyboardValueChange.java)/**
 * Testcase for #10451
 *
 * @author Vaadin Ltd
 */
ReadOnlyOptionGroup (/uitest/src/main/java/com/vaadin/tests/components/optiongroup/ReadOnlyOptionGroup.java)/**
 * Test UI for unset read-only flag of Option group with new items allowed.
 *
 * @author Vaadin Ltd
 */
CaptionLeak (/uitest/src/main/java/com/vaadin/tests/components/orderedlayout/CaptionLeak.java)/**
 * HorizontalLayout and VerticalLayout should not leak caption elements via
 * listeners when removing components from a layout.
 *
 * @since 7.1.13
 * @author Vaadin Ltd
 */
NestedLayoutCaptionHover (/uitest/src/main/java/com/vaadin/tests/components/orderedlayout/NestedLayoutCaptionHover.java)/**
 * Test hovering over nested layout caption
 *
 * @author Vaadin Ltd
 */
SpacingLeak (/uitest/src/main/java/com/vaadin/tests/components/orderedlayout/SpacingLeak.java)/**
 * HorizontalLayout and VerticalLayout should not leak .v-spacing elements via
 * listeners when removing components from a layout.
 *
 * @since 7.1.12
 * @author Vaadin Ltd
 */
VerticalRelativeSizeWithoutExpand (/uitest/src/main/java/com/vaadin/tests/components/orderedlayout/VerticalRelativeSizeWithoutExpand.java)/**
 * The Application's "main" class
 */
PanelRemoveShortcutListener (/uitest/src/main/java/com/vaadin/tests/components/panel/PanelRemoveShortcutListener.java)/**
 * Test for removing a shortcut listener from Panel.
 *
 * @author Vaadin Ltd
 */
PopupViewShortcutActionHandler (/uitest/src/main/java/com/vaadin/tests/components/popupview/PopupViewShortcutActionHandler.java)/**
 * Test UI to check availability of shortcut action listener in the popup view
 * oeverlay component.
 *
 * @author Vaadin Ltd
 */
PopupViewWithExtension (/uitest/src/main/java/com/vaadin/tests/components/popupview/PopupViewWithExtension.java)/**
 * Test UI for popup view with extension: extension is a part of getChildren()
 * collection but is not inside the getChildComponents() collection. Popup view
 * should use getChildComponents() to avoid exception when extension is returned
 * by getChildren().
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
RadioButtonGroupTestUI (/uitest/src/main/java/com/vaadin/tests/components/radiobutton/RadioButtonGroupTestUI.java)/**
 * Test UI for RadioButtonGroup component
 *
 * @author Vaadin Ltd
 */
DisabledRadioButtonGroup (/uitest/src/main/java/com/vaadin/tests/components/radiobuttongroup/DisabledRadioButtonGroup.java)/**
 * @author Vaadin Ltd
 *
 */
RadioButtonGroupFocus (/uitest/src/main/java/com/vaadin/tests/components/radiobuttongroup/RadioButtonGroupFocus.java)/**
 * @author Vaadin Ltd
 *
 */
RadioButtonGroupFocusBlur (/uitest/src/main/java/com/vaadin/tests/components/radiobuttongroup/RadioButtonGroupFocusBlur.java)/**
 * This class only provides a component type. The initialization code is inside
 * the AbstractListingFocusBlurTest class.
 *
 * @see AbstractListingFocusBlurTest
 *
 * @author Vaadin Ltd
 *
 */
RadioButtonGroupRequiredIndicator (/uitest/src/main/java/com/vaadin/tests/components/radiobuttongroup/RadioButtonGroupRequiredIndicator.java)/**
 * The whole logic is inside HasValueRequiredIndicator. The code here just set
 * value for the component.
 *
 * @author Vaadin Ltd
 *
 */
ComboBoxAddWhileFiltering (/uitest/src/main/java/com/vaadin/tests/components/select/ComboBoxAddWhileFiltering.java)/**
 * TODO can't reproduce the issue with this test case, possibly need some
 * enhancements.
 *
 */
SliderUpdateFromValueChange (/uitest/src/main/java/com/vaadin/tests/components/slider/SliderUpdateFromValueChange.java)/**
 * Testcase for #12133
 *
 * @author Vaadin Ltd
 */
HorizontalSplitPanelHeight (/uitest/src/main/java/com/vaadin/tests/components/splitpanel/HorizontalSplitPanelHeight.java)/**
 * Test UI for horizontal split panel height.
 *
 * @author Vaadin Ltd
 */
SplitPanelDuplicateStyleName (/uitest/src/main/java/com/vaadin/tests/components/splitpanel/SplitPanelDuplicateStyleName.java)/**
 * Test UI for duplicate primary style name in SplitPanel.
 *
 * @author Vaadin Ltd
 */
SplitPositionChange (/uitest/src/main/java/com/vaadin/tests/components/splitpanel/SplitPositionChange.java)/**
 * Test for {@link SplitPositionChangeListeners}.
 *
 * @author Vaadin Ltd
 */
AddSelectionToRemovedRange (/uitest/src/main/java/com/vaadin/tests/components/table/AddSelectionToRemovedRange.java)/**
 * Test to see if selecting and deselecting a table row after select range has
 * been removed.
 *
 * @since 7.1.13
 * @author Vaadin Ltd
 */
AsyncPushUpdates (/uitest/src/main/java/com/vaadin/tests/components/table/AsyncPushUpdates.java)/**
 * Test to see if VScrollTable handles Push updates correctly.
 *
 * @author Vaadin Ltd
 */
WobblyTable (/uitest/src/main/java/com/vaadin/tests/components/table/ContainerSizeChangeDuringTablePaint.java)/**
     * A test {@link Table} that simply acts a hook for when Vaadin starts
     * painting the Table.
     */
WobblyContainer (/uitest/src/main/java/com/vaadin/tests/components/table/ContainerSizeChangeDuringTablePaint.java)/**
     * A {@link Container} that can change its size while its
     * {@link WobblyTable} is being painted.
     */
ContextMenuSize (/uitest/src/main/java/com/vaadin/tests/components/table/ContextMenuSize.java)/**
 * Test UI for table context menu position and size.
 *
 * @author Vaadin Ltd
 */
DelayedColumnLayouting (/uitest/src/main/java/com/vaadin/tests/components/table/DelayedColumnLayouting.java)/**
 * For tables that are contained in a layout, a delayed column layouting should
 * not be visible (because it makes the column jump around).
 *
 * #15189
 *
 * @author Vaadin Ltd
 */
DndEmptyTable (/uitest/src/main/java/com/vaadin/tests/components/table/DndEmptyTable.java)/**
 * Test UI for empty table: empty table (without any data) throws client side
 * exception if it's a target for DnD.
 *
 * @author Vaadin Ltd
 */
DndTableTargetDetails (/uitest/src/main/java/com/vaadin/tests/components/table/DndTableTargetDetails.java)/**
 * Test UI for table as a drop target: AbstractSelectTargetDetails should
 * provide getMouseEvent() method.
 *
 * @author Vaadin Ltd
 */
EmptyRowsWhenScrolling (/uitest/src/main/java/com/vaadin/tests/components/table/EmptyRowsWhenScrolling.java)/**
 * This test cannot be automated. http://dev.vaadin.com/ticket/6160, base code
 * by user radosdesign.
 *
 * The test fails if even occasionally empty rows appear in the table. A
 * relatively good way to get them (before the fix) is to wait for the page to
 * load, move the scrollbar down, press 'R' before the rows have time to be
 * rendered, and then move the scrollbar up when no rows have been rendered yet.
 * After this, when you scroll down slowly there may be empty rows. This doesn't
 * happen always, and you may need to force the threads slower to get it to
 * happen at all. On a slow 32-bit Windows 7 with Chrome version 22.0.1229.94 m
 * (no GWT dev mode) this test has managed to reproduce the problem maybe nine
 * times out of ten.
 *
 * @author Anna Koskinen / Vaadin Oy
 *
 */
FocusOnSelectedItem (/uitest/src/main/java/com/vaadin/tests/components/table/FocusOnSelectedItem.java)/**
 * Test to see if the correct row gets the focus when the row is selected from
 * the serverside and forces the table to scroll down
 *
 * @author Vaadin Ltd
 */
LeftColumnAlignment (/uitest/src/main/java/com/vaadin/tests/components/table/LeftColumnAlignment.java)/**
 * Test UI for issue #13399 : Left alignment should not be set explicitly
 * instead of relying on default behavior
 *
 * @author Vaadin Ltd
 */
MemoryLeakTable (/uitest/src/main/java/com/vaadin/tests/components/table/MemoryLeakTable.java)/**
 * Test UI Class for testing memory leak in table (#14159).
 *
 * @author Vaadin Ltd
 */
OddEvenRowStyling (/uitest/src/main/java/com/vaadin/tests/components/table/OddEvenRowStyling.java)/**
 * @author jonatan
 *
 */
RefreshRenderedCellsOnlyIfAttached (/uitest/src/main/java/com/vaadin/tests/components/table/RefreshRenderedCellsOnlyIfAttached.java)/**
 * There shouldn't be any attempts to refresh table's cells if the table isn't
 * attached.
 *
 * @author Vaadin Ltd
 */
TableBlurFocus (/uitest/src/main/java/com/vaadin/tests/components/table/TableBlurFocus.java)/**
 * Tests that previously focused component's blur event happens before any
 * variable changes in the focused Table.
 *
 * @author Vaadin Ltd
 */
TableHeightWhenHidingHeaders (/uitest/src/main/java/com/vaadin/tests/components/table/TableHeightWhenHidingHeaders.java)/**
 * Setting table height and setting column header mode as hidden leaves the body
 * height of the table as it would be with the headers visible and leaves an
 * empty area below the body.
 *
 */
TableJumpUI (/uitest/src/main/java/com/vaadin/tests/components/table/TableJumpUI.java)/**
 * Test for ensuring page doesn't jump up to the Table selection on IE with
 * these steps:
 *
 * <p>
 * 1. refresh page <br>
 * 2. click within URL bar <br>
 * 3. click a table row to select it <br>
 * 4. click within one of the text fields <br>
 * 5. scroll down <br>
 * 6. click the button
 * </p>
 * The problem is that IE for some reason does not fire a blur event for the
 * table at step 4, leading to table thinking it is focused when it is updated
 * in step 6.
 *
 * @author Vaadin Ltd
 */
TableReduceContainerSize (/uitest/src/main/java/com/vaadin/tests/components/table/TableReduceContainerSize.java)/**
 * Test for #8291 and #7666: NegativeArraySizeException when Table scrolled to
 * the end and its size reduced.
 */
TableRepairsScrollPositionOnReAddingAllRows (/uitest/src/main/java/com/vaadin/tests/components/table/TableRepairsScrollPositionOnReAddingAllRows.java)/**
 * Scroll position should be restored when removing and re-adding all rows in
 * Table.
 *
 * @author Vaadin Ltd
 */
TableScrollUpOnSelect (/uitest/src/main/java/com/vaadin/tests/components/table/TableScrollUpOnSelect.java)/**
 * Test to see if Table appears to scroll up under an obscure set of conditions
 * (Scrolled down, set to expand, selecting updates a TextField that precedes
 * the Table in a VerticalLayout.) (#10106)
 *
 * @author Vaadin Ltd
 */
TableSortingIndicator (/uitest/src/main/java/com/vaadin/tests/components/table/TableSortingIndicator.java)/**
 * Test if the table sorting indicators update correctly when the table is
 * sorted serverside
 *
 * @author Vaadin Ltd
 */
TabletContextMenu (/uitest/src/main/java/com/vaadin/tests/components/table/TabletContextMenu.java)/**
 * A test UI for context menus on different parts of a VSCrollTable.
 *
 * This UI has no attached unit test due to the poor support of touch events on
 * Selenium.
 *
 * @author Vaadin Ltd
 */
TableToggleColumnVisibility (/uitest/src/main/java/com/vaadin/tests/components/table/TableToggleColumnVisibility.java)/**
 * Test that toggling column visibility does not change custom header, icon,
 * alignment
 */
TableToggleColumnVisibilityWidth (/uitest/src/main/java/com/vaadin/tests/components/table/TableToggleColumnVisibilityWidth.java)/**
 * Test that column width is restored after restoring column visibility
 */
TableWidthItemRemove (/uitest/src/main/java/com/vaadin/tests/components/table/TableWidthItemRemove.java)/**
 * Test whether adding the first item to a table calculates the table width
 * correctly
 *
 * @author Vaadin Ltd
 */
BrokenContainer (/uitest/src/main/java/com/vaadin/tests/components/table/TableWithBrokenGeneratorAndContainer.java)/**
     * Container which throws an exception on every fifth call to
     * {@link #getContainerProperty(Object, Object)}.
     *
     * @author Vaadin Ltd
     * @since 7.0
     *
     */
MoveComponentBetweenTabsheets (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/MoveComponentBetweenTabsheets.java)/**
 * Main UI class
 */
NewSelectionAfterTabRemove (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/NewSelectionAfterTabRemove.java)/**
 * In case a selected tab is removed the new selected one should be a neighbor.
 *
 * In case an unselected tab is removed and the selected one is not visible, the
 * scroll should not jump to the selected one.
 *
 * @author Vaadin Ltd
 */
ScrolledTabSheetResize (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/ScrolledTabSheetResize.java)/**
 * Test class for resizing a scrolled TabSheet.
 *
 * @author Vaadin Ltd
 */
TabBarWidth (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/TabBarWidth.java)/**
 * Tests the width of the tab bar, especially when using relative width for the
 * {@link TabSheet}.
 *
 * Created for ticket <a href="http://dev.vaadin.com/ticket/12805">#12805</a>.
 */
TabKeyboardNavigation (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/TabKeyboardNavigation.java)/**
 * Test if the click and key tab selection in a tabsheet generate the correct
 * focus/blur events.
 *
 * The solution was broken in ticket (#14304)
 *
 * @author Vaadin Ltd
 */
TabSelectionRevertedByServer (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/TabSelectionRevertedByServer.java)/**
 * TabSheet test in case user selects a tab and on the selection listener the
 * selected tab is changed to another one.
 *
 * This test used to cause nonfunctional TabSheet if the current tab was 1, user
 * selects 5, then the selection listener will revert the selected tab to 1.
 *
 * @author Vaadin Ltd
 */
TabSheetClose (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/TabSheetClose.java)/**
 * This test UI is used for checking that when a tab is closed, another one is
 * scrolled into view.
 *
 * @author Vaadin Ltd
 */
TabSheetInDisabledParent (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/TabSheetInDisabledParent.java)/**
 * Test UI to check that TabsheetBaseConnector reacts on disabling its parent.
 *
 * @author Vaadin Ltd
 */
TabsheetNotEnoughHorizontalSpace (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/TabsheetNotEnoughHorizontalSpace.java)/**
 * Test to see if tabsheet navigation buttons render correctly in Chameleon
 *
 * @author Vaadin Ltd
 */
TabSheetScrollOnTabClose (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/TabSheetScrollOnTabClose.java)/**
 * This testUI is used for testing that the scroll position of a tab sheet does
 * not change when tabs are removed. The exception is removing the leftmost
 * visible tab.
 *
 * @author Vaadin Ltd
 */
TabSpaceNotScroll (/uitest/src/main/java/com/vaadin/tests/components/tabsheet/TabSpaceNotScroll.java)/**
 * If the space is pressed on the tabs of a tabsheet the browser default scroll
 * behavior must be prevented.
 *
 * @author Vaadin Ltd
 */
TestBase (/uitest/src/main/java/com/vaadin/tests/components/TestBase.java)/**
 *
 * @deprecated Use {@link AbstractReindeerTestUI} or
 *             {@link AbstractTestUIWithLog} instead. TestBase is a
 *             LegacyApplication
 */
TestDateField (/uitest/src/main/java/com/vaadin/tests/components/TestDateField.java)/**
 * @author Vaadin Ltd
 *
 */
ScrollCursor (/uitest/src/main/java/com/vaadin/tests/components/textarea/ScrollCursor.java)/**
 * @author denis
 *
 */
TextAreaSizeResetted (/uitest/src/main/java/com/vaadin/tests/components/textarea/TextAreaSizeResetted.java)/**
 * Ticket #14080
 *
 * - The bug happen on push event.<br/>
 * - The changes in the DOM are css related.<br/>
 * - It seems like when the class attribute is set on push, the textarea revert
 * to the height defined by the rows attribute.<br/>
 * - The size is reseted on onStateChange where the size is set to the one from
 * the state. And it's because, when the user changes the text, at the next poll
 * the state will confirm the change of the text, but the width and height
 * didn't change in the state either client or server before the fix.
 *
 * @author Vaadin Ltd
 */
AutomaticImmediate (/uitest/src/main/java/com/vaadin/tests/components/textfield/AutomaticImmediate.java)/**
 * Test to verify fields become implicitly "immediate" when adding value change
 * listener to them.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
BigDecimalTextField (/uitest/src/main/java/com/vaadin/tests/components/textfield/BigDecimalTextField.java)/**
 * @since 7.2
 * @author Vaadin Ltd
 */
InputPromptGetText (/uitest/src/main/java/com/vaadin/tests/components/textfield/InputPromptGetText.java)/**
 * To verify bug fix: Reproducing of bug Textfield value not updated when
 * InputPromt and ShortcutListener are used
 *
 * #13492
 *
 * @author Vaadin Ltd
 */
RequiredTextField (/uitest/src/main/java/com/vaadin/tests/components/textfield/RequiredTextField.java)/**
 * Test for required text field.
 *
 * @author Vaadin Ltd
 */
VaadinDeveloperNameField (/uitest/src/main/java/com/vaadin/tests/components/textfield/TextChangeEvents.java)/**
     * "Autosuggest"
     *
     * Known issue is timing if suggestion comes while typing more content. IMO
     * we will not support this kind of features in default TextField, but
     * hopefully make it easily extendable to perfect suggest feature. MT
     * 2010-10
     *
     */
VaadinDeveloperNameField (/uitest/src/main/java/com/vaadin/tests/components/textfield/TextFieldsValueChangeMode.java)/**
     * "Autosuggest"
     *
     * Known issue is timing if suggestion comes while typing more content. IMO
     * we will not support this kind of features in default TextField, but
     * hopefully make it easily extendable to perfect suggest feature. MT
     * 2010-10
     *
     */
TooltipDelay (/uitest/src/main/java/com/vaadin/tests/components/TooltipDelay.java)/**
 * Test to see if tooltip delay is working properly.
 *
 * @author Vaadin Ltd
 */
TooltipPosition (/uitest/src/main/java/com/vaadin/tests/components/TooltipPosition.java)/**
 * This UI is used for testing that a tooltip is not positioned partially
 * outside the browser window when there is enough space to display it.
 *
 * @author Vaadin Ltd
 */
TreeGridAriaRowcount (/uitest/src/main/java/com/vaadin/tests/components/treegrid/TreeGridAriaRowcount.java)/**
 * @author Vaadin Ltd
 *
 */
TreeTableRowHeaderMode (/uitest/src/main/java/com/vaadin/tests/components/treetable/TreeTableRowHeaderMode.java)/**
 * Test UI for RowHeaderMode.ICON_ONLY in TreeTable.
 *
 * @author Vaadin Ltd
 */
TextAreaEventPropagation (/uitest/src/main/java/com/vaadin/tests/components/ui/TextAreaEventPropagation.java)/**
 * UI test for TextArea behavior when ENTER has been assigned as a keyboard
 * shortcut.
 *
 * @author Vaadin Ltd
 */
UIAutoGeneratedStyleName (/uitest/src/main/java/com/vaadin/tests/components/ui/UIAutoGeneratedStyleName.java)/**
 * Empty test ui to check auto-generated style name for UI.
 *
 * @author Vaadin Ltd
 */
TestSampler (/uitest/src/main/java/com/vaadin/tests/components/uitest/TestSampler.java)/**
 * Test sampler that creates a tabsheet of "all" the Vaadin UI components. This
 * can be used to test themes and components in general.
 */
UploadInTabsheet (/uitest/src/main/java/com/vaadin/tests/components/upload/UploadInTabsheet.java)/**
 * Test UI for case where Upload is in a TabSheet and Tab is changed directly
 * after Upload Succeed
 */
UploadInTabsheetV7 (/uitest/src/main/java/com/vaadin/tests/components/upload/UploadInTabsheetV7.java)/**
 * Test UI for case where Upload is in a TabSheet and Tab is changed directly
 * after Upload Succeed
 */
UploadTitleWithTooltip (/uitest/src/main/java/com/vaadin/tests/components/upload/UploadTitleWithTooltip.java)/**
 * Test UI for browser-dependent tootlip for Upload component.
 *
 * @author Vaadin Ltd
 */
BottomComponentScrollsUp (/uitest/src/main/java/com/vaadin/tests/components/window/BottomComponentScrollsUp.java)/**
 * Reproducing bug #12943 where an action on a Button or ComboBox placed at the
 * bottom of a window in a scroll panel, will scroll up the parent panel.
 *
 * This was due to the fact that with the state confirmation notification from
 * the server, the window.setVisible would be call again, and the hack that
 * solved the scrollbars in a window (#11994) would cause the our bug.
 *
 * @author Vaadin Ltd
 */
ConfirmWindow (/uitest/src/main/java/com/vaadin/tests/components/window/CloseModalSubWindow.java)/** Modal confirmation sub-window. */
ScrollingBodyElementWithModalOpened (/uitest/src/main/java/com/vaadin/tests/components/window/ScrollingBodyElementWithModalOpened.java)/**
 *
 * @since 7.1.9
 * @author Vaadin Ltd
 */
TestTooSmallSubwindowSize (/uitest/src/main/java/com/vaadin/tests/components/window/TestTooSmallSubwindowSize.java)/**
 * Tests that the styles work correctly in tiny subwindows that have more
 * content than can fit.
 *
 * @author Vaadin Ltd
 */
ToolTipInWindow (/uitest/src/main/java/com/vaadin/tests/components/window/ToolTipInWindow.java)/**
 * Test to demonstrate that tooltips are shown for both Window header and
 * content
 *
 * @author Vaadin Ltd
 */
WindowInUiWithNoContent (/uitest/src/main/java/com/vaadin/tests/components/window/WindowInUiWithNoContent.java)/**
 * Test UI for Window attached to the UI with not content.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
WindowOrder (/uitest/src/main/java/com/vaadin/tests/components/window/WindowOrder.java)/**
 * Test UI for accessing to window order position.
 *
 * @author Vaadin Ltd
 */
BrowserContextMenuExtension (/uitest/src/main/java/com/vaadin/tests/contextclick/BrowserContextMenuInSubComponent.java)/**
     * A simple extension for making extended component stop propagation of the
     * context click events, so the browser will handle the context click and
     * show its own context menu.
     */
CurrentTimeMillis (/uitest/src/main/java/com/vaadin/tests/CurrentTimeMillis.java)/**
 * Test UI (empty) to check high resolution time availability in browser.
 *
 * @author Vaadin Ltd
 */
CustomLayoutDemo (/uitest/src/main/java/com/vaadin/tests/CustomLayoutDemo.java)/**
 * This example demonstrates custom layout. All components created here are
 * placed using custom.html file. Custom layouts may be created with any web
 * designer tool such as Dreamweaver. To place Vaadin components into html page,
 * use divs with location tag as an identifier for Vaadin components, see html
 * page (themes/example/layout/custom.html) and source code below. Body panel
 * contents are changed when menu items are clicked. Contents are HTML pages
 * located at themes/example/layout directory.
 *
 * @author Vaadin Ltd.
 * @since 4.0.0
 *
 */
ReplaceListDataProvider (/uitest/src/main/java/com/vaadin/tests/data/DataProviderRefresh.java)/**
     * A dummy data provider for testing item replacement and stale elements.
     */
LoggingDataProvider (/uitest/src/main/java/com/vaadin/tests/data/DummyData.java)/**
     * DataProvider that keeps track on how often the data is requested.
     */
DummyComponent (/uitest/src/main/java/com/vaadin/tests/data/DummyData.java)/**
     * Simplified server only selection model. Selection state passed in data,
     * shown as bold text.
     */
MyDropTarget (/uitest/src/main/java/com/vaadin/tests/dd/CustomDDImplementation.java)/**
     * Server side component that accepts drags must implement HasDropHandler
     * that have one method to get reference of DropHandler.
     *
     * DropHandler may be implemented directly or probably most commonly using a
     * half baked implementation {@link AbstractDropHandler}.
     *
     * Check the @ClientWidget
     *
     */
MyDragSource (/uitest/src/main/java/com/vaadin/tests/dd/CustomDDImplementation.java)/**
     * Server side implementation of source does not necessary need to contain
     * anything.
     *
     * Check the @ClientWidget
     *
     * However component might have different modes to support starting drag
     * operations that are controlled via server side api.
     *
     */
CustomDDImplementation (/uitest/src/main/java/com/vaadin/tests/dd/CustomDDImplementation.java)/**
 * Test/Example/Draft code how to build custom DD implementation using the thing
 * framework provided by Vaadin.
 *
 */
DDInterrupt (/uitest/src/main/java/com/vaadin/tests/dd/DDInterrupt.java)/**
 * Test for interrupting drag-and-drop.
 *
 * @author Vaadin Ltd
 */
DDTest1 (/uitest/src/main/java/com/vaadin/tests/dd/DDTest1.java)/**
 * DD playground. Better quality example/prototype codes in {@link DDTest2}.
 */
DDTest8 (/uitest/src/main/java/com/vaadin/tests/dd/DDTest8.java)/**
 * DD playground. Better quality example/prototype codes in {@link DDTest2}.
 */
DragDropPane (/uitest/src/main/java/com/vaadin/tests/dd/DragDropPane.java)/**
 * replacement for a proto class to keep tests working
 */
HorizontalLayoutSortableWithWrappers (/uitest/src/main/java/com/vaadin/tests/dd/HorizontalLayoutSortableWithWrappers.java)/**
 * Same as with css layout but tests size change propagation on emphasis +
 * rules.
 *
 *
 */
VMyDragSource (/uitest/src/main/java/com/vaadin/tests/dd/VMyDragSource.java)/**
 * Example code to implement Component that has something to drag.
 */
PushVersionInfo (/uitest/src/main/java/com/vaadin/tests/debug/PushVersionInfo.java)/**
 * Test UI for PUSH version string in debug window.
 *
 * @author Vaadin Ltd
 */
SelectByText (/uitest/src/main/java/com/vaadin/tests/elements/combobox/SelectByText.java)/**
 * UI used to validate ComboBox.selectByText(String s) works properly if input
 * String s contains parentheses
 */
CompatibilityComponentElementGetValue (/uitest/src/main/java/com/vaadin/tests/elements/CompatibilityComponentElementGetValue.java)/**
 * UI test for getValue() method of components: TextField, TextArea,
 * PasswordField, ComboBox, ListSelect, NativeSelect, OptionGroup, CheckBox,
 * DateField, TwinColSelect
 *
 * @author Vaadin Ltd
 */
CompatibilityElementComponentGetCaptionBase (/uitest/src/main/java/com/vaadin/tests/elements/CompatibilityElementComponentGetCaptionBase.java)/**
 *
 * Base testUI class for testing getCaption method. Captions of elements
 * implemented differently in different layouts (FormLayout) This class adds all
 * elements to the layout. The exact layout is created in a child class.
 */
ComponentElementGetValue (/uitest/src/main/java/com/vaadin/tests/elements/ComponentElementGetValue.java)/**
 * UI test for getValue() method of components: TextField, TextArea,
 * PasswordField, ComboBox, ListSelect, NativeSelect, OptionGroup, CheckBox,
 * DateField, TwinColSelect, RichTextArea
 *
 * @author Vaadin Ltd
 */
ElementComponentGetCaptionBase (/uitest/src/main/java/com/vaadin/tests/elements/ElementComponentGetCaptionBase.java)/**
 *
 * Base testUI class for testing getCaption method. Captions of elements
 * implemented differently in different layouts (FormLayout) This class adds all
 * elements to the layout. The exact layout is created in a child class.
 */
SplitPanelComponents (/uitest/src/main/java/com/vaadin/tests/elements/splitpanel/SplitPanelComponents.java)/**
 * This UI is used for testing that TestBench gets the second component of a
 * split panel using getSecondComponent() even when there is no first component.
 */
NestedTabSheet (/uitest/src/main/java/com/vaadin/tests/elements/tabsheet/NestedTabSheet.java)/**
 * This UI contains a nested tab sheet, i.e., there is a tab sheet that contains
 * other tab sheets as its components.
 */
TabSheetElementException (/uitest/src/main/java/com/vaadin/tests/elements/tabsheet/TabSheetElementException.java)/**
 * this UI is used for testing that an exception occurs when TestBench attempts
 * to open a tab that does not exist.
 */
NotificationCloseListener (/uitest/src/main/java/com/vaadin/tests/extensions/NotificationCloseListener.java)/**
 * UI used to validate Notification closes works.
 */
FocusingComponents (/uitest/src/main/java/com/vaadin/tests/FocusingComponents.java)/**
 * Simple test helper to test Focusable.focus() method.
 *
 */
FontIcons (/uitest/src/main/java/com/vaadin/tests/fonticon/FontIcons.java)/**
 * This is a legacy test ui for using font icons (font awesome).
 * <p>
 * {@link VaadinIconSet} is the newer one for testing valo+vaadin icons.
 */
JSR286Portlet (/uitest/src/main/java/com/vaadin/tests/integration/JSR286Portlet.java)/**
 * Adapted from old PortletDemo to support integration testing.
 */
PortletSizeInLiferayFreeformLayoutApplication (/uitest/src/main/java/com/vaadin/tests/integration/PortletSizeInLiferayFreeformLayoutApplication.java)/**
 * On Liferay in a freeform layout, this application should get its height from
 * the height of the portlet container in the Liferay layout.
 *
 * See ticket #5521.
 */
ServletIntegrationDefaultPushUI (/uitest/src/main/java/com/vaadin/tests/integration/ServletIntegrationDefaultPushUI.java)/**
 * Server test which uses the default push mechanisms
 *
 * @since 7.1.12
 * @author Vaadin Ltd
 */
ServletIntegrationLongPollingUI (/uitest/src/main/java/com/vaadin/tests/integration/ServletIntegrationLongPollingUI.java)/**
 * Server test which uses long polling
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
ServletIntegrationStreamingUI (/uitest/src/main/java/com/vaadin/tests/integration/ServletIntegrationStreamingUI.java)/**
 * Server test which uses streaming
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
ServletIntegrationWebsocketUI (/uitest/src/main/java/com/vaadin/tests/integration/ServletIntegrationWebsocketUI.java)/**
 * Server test which uses websockets
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
LayoutDemo (/uitest/src/main/java/com/vaadin/tests/LayoutDemo.java)/**
 * This example demonstrates layouts. Layouts are populated with sample Vaadin
 * UI components.
 *
 * @author Vaadin Ltd.
 * @since 4.0.0
 *
 */
GridLayoutRemoveFinalRow (/uitest/src/main/java/com/vaadin/tests/layouts/GridLayoutRemoveFinalRow.java)/**
 * Tests removing rows from a GridLayout
 */
BaseLayoutTestUI (/uitest/src/main/java/com/vaadin/tests/layouts/layouttester/BaseLayoutTestUI.java)/**
 *
 * Base class for Layout tests.
 */
CookieMonsterUI (/uitest/src/main/java/com/vaadin/tests/minitutorials/v70/CookieMonsterUI.java)/**
 * Tutorial example for
 * https://vaadin.com/wiki/-/wiki/Main/Setting%20and%20reading%20Cookies
 */
AutoGeneratingForm (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/AutoGeneratingForm.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Auto%20generating%20
 * a%20form%20based%20on%20a%20bean%20-%20Vaadin%206%20style%20Form
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
BasicApplication (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/BasicApplication.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Creating%20a%20basic%20application
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
CreatingPreserveState (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/CreatingPreserveState.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Creating%20an%20application
 * %20that%20preserves%20state%20on%20refresh
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
DefineUITheme (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/DefineUITheme.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Defining%20the%20theme%20for%20a%20Root
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
DifferentFeaturesForDifferentClients (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/DifferentFeaturesForDifferentClients.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Creating%20an%20application
 * %20with%20different%20features%20for%20different%20clients
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
FindCurrentUI (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/FindCurrentUI.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Finding%20the%20current
 * %20Root%20and%20Application
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
MultiTabApplication (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/MultiTabApplication.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Creating%20multi%20tab%20applications
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
UsingBeanValidation (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/UsingBeanValidation.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Using%20Bean%20Validation
 * %20to%20validate%20input
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
UsingUriFragments (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/UsingUriFragments.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Using%20URI%20fragments
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
UsingXyzWhenInitializing (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a1/UsingXyzWhenInitializing.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Using%20URI%20or%20
 * parameters%20or%20screen%20size%20when%20initializing%20an%20application
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ComponentInStateUI (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a2/ComponentInStateUI.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Using%20Components%
 * 20in%20the%20shared%20state
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
MyComponentUI (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a2/MyComponentUI.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Creating%20a%20simple%20component,
 * https://vaadin.com/wiki/-/wiki/Main/Creating%20a%20simple%20component,
 * https://vaadin.com/wiki/-/wiki/Main/Sending%
 * 20events%20from%20the%20client%20to%20the%20server%20using%20RPC,
 * https://vaadin
 * .com/wiki/-/wiki/Main/Using%20RPC%20to%20send%20events%20to%20the%20client
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
MyPickerConnector (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a2/MyPickerConnector.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Widget%20styling%20using%20only%20CSS,
 * https
 * ://vaadin.com/wiki/-/wiki/Main/Lightweight%20calculations%20of%20widget%20l
 * ayout and https://vaadin.com/wiki/-/wiki/Main/Complex%20widget%20layouts
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ResourceInStateUI (/uitest/src/main/java/com/vaadin/tests/minitutorials/v7a2/ResourceInStateUI.java)/**
 * Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Using%20Resources%20
 * in%20the%20shared%20state
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ModalWindow (/uitest/src/main/java/com/vaadin/tests/ModalWindow.java)/**
 * Simple program that demonstrates "modal windows" that block all access other
 * windows.
 *
 * @author Vaadin Ltd.
 * @since 4.0.1
 * @see com.vaadin.server.VaadinSession
 * @see com.vaadin.ui.Window
 * @see com.vaadin.ui.Label
 */
OrderedLayoutSwapComponents (/uitest/src/main/java/com/vaadin/tests/OrderedLayoutSwapComponents.java)/**
 *
 * This Component contains some simple test to see that component updates its
 * contents properly.
 *
 * @author Vaadin Ltd.
 */
Parameters (/uitest/src/main/java/com/vaadin/tests/Parameters.java)/**
 * This is a demonstration of how URL parameters can be recieved and handled.
 * Parameters and URL:s can be received trough the windows by registering
 * URIHandler and ParameterHandler classes window.
 *
 * @since 3.1.1
 */
AbstractBeansMemoryTest (/uitest/src/main/java/com/vaadin/tests/performance/AbstractBeansMemoryTest.java)/**
 * @author Vaadin Ltd
 *
 */
Servlet (/uitest/src/main/java/com/vaadin/tests/performance/CompatibilityGridMemory.java)/**
     * The main servlet for the application.
     */
CompatibilityGridMemory (/uitest/src/main/java/com/vaadin/tests/performance/CompatibilityGridMemory.java)/**
 * @author Vaadin Ltd
 *
 */
Servlet (/uitest/src/main/java/com/vaadin/tests/performance/GridMemory.java)/**
     * The main servlet for the application.
     */
GridMemory (/uitest/src/main/java/com/vaadin/tests/performance/GridMemory.java)/**
 * @author Vaadin Ltd
 *
 */
PushConfigurator (/uitest/src/main/java/com/vaadin/tests/push/PushConfigurator.java)/**
 *
 * @since 7.1
 * @author Vaadin Ltd
 */
RandomLayoutStress (/uitest/src/main/java/com/vaadin/tests/RandomLayoutStress.java)/**
 * This example demonstrates layouts. Layouts are populated with sample Vaadin
 * UI components.
 *
 * @author Vaadin Ltd.
 *
 */
CommunicationError (/uitest/src/main/java/com/vaadin/tests/requesthandlers/CommunicationError.java)/**
 * Test UI provider to check communication error json object null values.
 *
 * @author Vaadin Ltd
 */
PublishedFileHandlerCaching (/uitest/src/main/java/com/vaadin/tests/resources/PublishedFileHandlerCaching.java)/**
 * This class tests the caching behavior of PublishedFileHandler.
 *
 * Previously PublishedFileHandler did not include cache headers in it's
 * responses. Unfortunately there isn't a good way to automate this test, so
 * manual testing is required at this time. To test the caching behavior run
 * this file as a java application on the development server debug
 * configuration, and access it through the url
 * http://localhost:8888/run/com.vaadin
 * .tests.resources.PublishedFileHandlerCaching?restartApplication
 *
 * On loading the page you'll need to examine the network traffic (e.g. with
 * FireBug), keeping an eye on the GET requests for cachingtest.js and it's
 * cache headers.
 *
 * @author Vaadin Ltd
 */
DateFieldSmoke (/uitest/src/main/java/com/vaadin/tests/smoke/DateFieldSmoke.java)/**
 * @author Vaadin Ltd
 *
 */
TestBench (/uitest/src/main/java/com/vaadin/tests/TestBench.java)/**
 * TestBench finds out testable classes within given java packages and adds them
 * to menu from where they can be executed. Class is considered testable if it
 * is of class Application or CustomComponent.
 *
 * Note: edit TestBench.testablePackages array
 *
 * @author Vaadin Ltd.
 *
 */
TestComponentAddAndRecursion (/uitest/src/main/java/com/vaadin/tests/TestComponentAddAndRecursion.java)/**
 * @author marc
 *
 */
TestContainerChanges (/uitest/src/main/java/com/vaadin/tests/TestContainerChanges.java)/**
 * @author marc
 *
 */
TestDateField (/uitest/src/main/java/com/vaadin/tests/TestDateField.java)/**
 *
 * @author Vaadin Ltd.
 */
TestForChildComponentRendering (/uitest/src/main/java/com/vaadin/tests/TestForChildComponentRendering.java)/**
 *
 * This Component contains some simple test to see that component updates its
 * contents propertly.
 *
 * @author Vaadin Ltd.
 */
TestForGridLayoutChildComponentRendering (/uitest/src/main/java/com/vaadin/tests/TestForGridLayoutChildComponentRendering.java)/**
 *
 * This Component contains some simple test to see that component updates its
 * contents propertly.
 *
 * @author Vaadin Ltd.
 */
TestForMultipleStyleNames (/uitest/src/main/java/com/vaadin/tests/TestForMultipleStyleNames.java)/**
 * TODO: Note you need to add Theme under WebContent/VAADIN/Themes/mytheme in
 * order to see actual visible results on the browser. Currently changes are
 * visible only by inspecting DOM.
 *
 * @author Vaadin Ltd.
 */
TestForPreconfiguredComponents (/uitest/src/main/java/com/vaadin/tests/TestForPreconfiguredComponents.java)/**
 * @author Vaadin Ltd.
 */
TestForTablesInitialColumnWidthLogicRendering (/uitest/src/main/java/com/vaadin/tests/TestForTablesInitialColumnWidthLogicRendering.java)/**
 *
 * This Component contains some simple test to see that component updates its
 * contents propertly.
 *
 * @author Vaadin Ltd.
 */
TestForTrees (/uitest/src/main/java/com/vaadin/tests/TestForTrees.java)/**
 * Some test cases for trees. Events panel logs events that happen server side.
 *
 * @author Vaadin Ltd.
 */
TestSelectAndDatefieldInDeepLayouts (/uitest/src/main/java/com/vaadin/tests/TestSelectAndDatefieldInDeepLayouts.java)/**
 * This test has a somewhat deep layout within one page. At the bottom, Select
 * and Datefield render their popups incorrectly. Popus tend to be "left behind"
 * from the actual components. When the page is even bigger or longer, the
 * popups are eventually rendered outside the visual parts of the page.
 *
 * @author Ville Ingman
 *
 */
AlignTopIconInButton (/uitest/src/main/java/com/vaadin/tests/themes/valo/AlignTopIconInButton.java)/**
 * Test UI for image icon in button with 'icon-align-top' style.
 *
 * @author Vaadin Ltd
 */
CalendarTest (/uitest/src/main/java/com/vaadin/tests/themes/valo/CalendarTest.java)/** Calendar component test application */
CalendarTestEvent (/uitest/src/main/java/com/vaadin/tests/themes/valo/CalendarTestEvent.java)/**
 * Test CalendarEvent implementation.
 *
 * @see com.vaadin.v7.ui.addon.calendar.test.ui.Calendar.Event
 */
CollapsibleTableColumn (/uitest/src/main/java/com/vaadin/tests/themes/valo/CollapsibleTableColumn.java)/**
 * Test UI for non-collapsible column distinction in the table.
 *
 * @author Vaadin Ltd
 */
ContrastFontColor (/uitest/src/main/java/com/vaadin/tests/themes/valo/ContrastFontColor.java)/**
 * Test UI for default contrast color value.
 *
 * @author Vaadin Ltd
 */
DisabledLabel (/uitest/src/main/java/com/vaadin/tests/themes/valo/DisabledLabel.java)/**
 * Test UI for disbaled label.
 *
 * @author Vaadin Ltd
 */
NotificationStyle (/uitest/src/main/java/com/vaadin/tests/themes/valo/NotificationStyle.java)/**
 * Test UI for H1 and P elements styles.
 *
 * @author Vaadin Ltd
 */
TextFieldBevel (/uitest/src/main/java/com/vaadin/tests/themes/valo/TextFieldBevel.java)/**
 * Test UI for $v-textfield-bevel value in TextField component.
 *
 * @author Vaadin Ltd
 */
ValoDefaultCaptionWidth (/uitest/src/main/java/com/vaadin/tests/themes/valo/ValoDefaultCaptionWidth.java)/**
 * Test for color picker with default caption.
 *
 * @author Vaadin Ltd
 */
AdjacentElementsWithTooltips (/uitest/src/main/java/com/vaadin/tests/tooltip/AdjacentElementsWithTooltips.java)/**
 * When moving between adjacent elements, the tooltip replace should obey
 * quickOpenDelay
 *
 * @author Vaadin Ltd
 */
TooltipWidthUpdating (/uitest/src/main/java/com/vaadin/tests/tooltip/TooltipWidthUpdating.java)/**
 * Test to see if the width of the tooltip element is updated if a narrower
 * tooltip is opened to replace a tooltip with wider content.
 *
 * @author Vaadin Ltd
 */
ValidatorCaptionTooltip (/uitest/src/main/java/com/vaadin/tests/tooltip/ValidatorCaptionTooltip.java)/**
 *
 * UI test class for Tooltip with integer range validator.
 */
TreeFilesystem (/uitest/src/main/java/com/vaadin/tests/TreeFilesystem.java)/**
 * Browsable file explorer using Vaadin Tree component. Demonstrates: how to add
 * items hierarchically into <code>com.vaadin.ui.Component.Tree</code>, how to
 * receive ExpandEvent and implement
 * <code>com.vaadin.ui.Tree.ExpandListener</code>.
 *
 * @since 4.0.0
 *
 */
TreeFilesystemContainer (/uitest/src/main/java/com/vaadin/tests/TreeFilesystemContainer.java)/**
 * Browsable file explorer using Vaadin Tree component. Demonstrates: how to use
 * <code>com.vaadin.ui.Component.Tree</code> datasource container, how to create
 * <code>com.vaadin.data.util.FilesystemContainer</code>, how to read
 * <code>com.vaadin.ui.Component.Event</code> objects, how to receive and handle
 * any event by implementing <code>com.vaadin.ui.Component.Listener</code>.
 *
 * @since 4.0.0
 *
 */
Task (/uitest/src/main/java/com/vaadin/tests/UsingObjectsInSelect.java)/**
     * Sample class which is bound to Vaadin components
     *
     */
ItemDataProvider (/uitest/src/main/java/com/vaadin/tests/util/ItemDataProvider.java)/**
 * A data provider for tests that creates "Item n" strings on the fly.
 *
 * @author Vaadin Ltd
 */
LoggingItemDataProvider (/uitest/src/main/java/com/vaadin/tests/util/LoggingItemDataProvider.java)/**
 * CallbackDataProvider that logs info in UI on Queries it receives.
 */
LogPrintWriter (/uitest/src/main/java/com/vaadin/tests/util/LogPrintWriter.java)/**
 * Use for collecting HTTP response.
 *
 */
SampleDirectory (/uitest/src/main/java/com/vaadin/tests/util/SampleDirectory.java)/**
 * Provides sample directory based on application directory. If this fails then
 * sampleDirectory property is read. If no sample directory is resolved, then a
 * panel displaying error message is added to main window.
 *
 * @author Vaadin Ltd.
 *
 */
AbstractSuperclassForBean (/uitest/src/main/java/com/vaadin/tests/widgetset/client/AbstractSuperclassForBean.java)/**
 * Dummy state bean used just to check that nothing breaks when generating code
 * to serialize beans with properties in abstract superclasses
 */
BeanWithAbstractSuperclass (/uitest/src/main/java/com/vaadin/tests/widgetset/client/BeanWithAbstractSuperclass.java)/**
 * Dummy state bean used just to check that nothing breaks when generating code
 * to serialize beans with properties in abstract superclasses
 */
CsrfButtonConnector (/uitest/src/main/java/com/vaadin/tests/widgetset/client/csrf/CsrfButtonConnector.java)/**
 * Dummy connector to test our CSRF bug. See #14111.
 *
 * @author Vaadin Ltd
 */
DummyLabelConnector (/uitest/src/main/java/com/vaadin/tests/widgetset/client/DummyLabelConnector.java)/**
 * Dummy connector just to cause {@link LabelState} to be used to test #8683
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
BrowserContextMenuExtensionConnector (/uitest/src/main/java/com/vaadin/tests/widgetset/client/extension/BrowserContextMenuExtensionConnector.java)/**
 * Client-side connector of the {@link BrowserContextMenuExtension}.
 */
Command (/uitest/src/main/java/com/vaadin/tests/widgetset/client/grid/PureGWTTestApplication.java)/**
     * Class describing a menu item with an associated action
     */
Menu (/uitest/src/main/java/com/vaadin/tests/widgetset/client/grid/PureGWTTestApplication.java)/**
     * A menu object, providing a complete system for building a hierarchical
     * menu bar system.
     */
PureGWTTestApplication (/uitest/src/main/java/com/vaadin/tests/widgetset/client/grid/PureGWTTestApplication.java)/**
 * Pure GWT Test Application base for testing features of a single widget;
 * provides a menu system and a convenience method for adding items to it.
 *
 * @author Vaadin Ltd
 */
GwtRpcButtonConnector (/uitest/src/main/java/com/vaadin/tests/widgetset/client/gwtrpc/GwtRpcButtonConnector.java)/**
 * Dummy connector to test our Vaadin/GWT RPC bug. In a Vaadin environment with
 * DevMode enabled, a pure GWT RPC call would throw an exception. See #11709.
 *
 * @author Vaadin Ltd
 */
GwtRpcServiceTest (/uitest/src/main/java/com/vaadin/tests/widgetset/client/gwtrpc/GwtRpcServiceTest.java)/**
 * Test GWT RPC in Vaadin DevMode.
 *
 * @author Vaadin Ltd
 */
GwtRpcServiceTestAsync (/uitest/src/main/java/com/vaadin/tests/widgetset/client/gwtrpc/GwtRpcServiceTestAsync.java)/**
 * Test GWT RPC in Vaadin DevMode.
 *
 * @author Vaadin Ltd
 */
IdTestLabelConnector (/uitest/src/main/java/com/vaadin/tests/widgetset/client/IdTestLabelConnector.java)/**
 * Connects server-side <code>IdTestLabel</code> component to client-side
 * {@link VIdTestLabel} component (#10179).
 *
 */
LabelState (/uitest/src/main/java/com/vaadin/tests/widgetset/client/LabelState.java)/**
 * State class with the same simple name as
 * {@link com.vaadin.v7.shared.ui.label.LabelState} to test #8683
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
MockApplicationConnection (/uitest/src/main/java/com/vaadin/tests/widgetset/client/MockApplicationConnection.java)/**
 * Mock ApplicationConnection for several issues where we need to hack it.
 *
 * @author Vaadin Ltd
 */
SuperTextAreaConnector (/uitest/src/main/java/com/vaadin/tests/widgetset/client/superText/SuperTextAreaConnector.java)/**
 * @author artamonov
 */
SuperTextAreaState (/uitest/src/main/java/com/vaadin/tests/widgetset/client/superText/SuperTextAreaState.java)/**
 * @author artamonov
 */
Data (/uitest/src/main/java/com/vaadin/tests/widgetset/client/v7/grid/GridBasicClientFeaturesWidget.java)/**
     * Our basic data object
     */
GridBasicClientFeaturesWidget (/uitest/src/main/java/com/vaadin/tests/widgetset/client/v7/grid/GridBasicClientFeaturesWidget.java)/**
 * Grid basic client features test application.
 *
 * @author Vaadin Ltd
 */
DelayedDataSource (/uitest/src/main/java/com/vaadin/tests/widgetset/client/v7/grid/GridClientColumnRendererConnector.java)/**
     * Datasource for simulating network latency
     */
Backend (/uitest/src/main/java/com/vaadin/tests/widgetset/client/v7/grid/GridClientDataSourcesWidget.java)/**
         * Pretend like this class doesn't exist. It just simulates a backend
         * somewhere.
         * <p>
         * It's scoped inside the RDS class only because it's tied to that.
         */
RestishDataSource (/uitest/src/main/java/com/vaadin/tests/widgetset/client/v7/grid/GridClientDataSourcesWidget.java)/**
     * This is an emulated datasource that has a back-end that changes size
     * constantly. The back-end is unable to actively push data to Grid.
     * Instead, with each row request, in addition to its row payload it tells
     * how many rows it contains in total.
     *
     * A plausible response from this REST-like api would be:
     *
     * <pre>
     * <code>
     * GET /foos/4..8
     *
     * {
     *     "resultsize": 4,
     *     "data": [
     *         [4, "foo IV"],
     *         [5, "foo V"],
     *         [6, "foo VI"]
     *         [7, "foo VII"]
     *     ],
     *     "totalrows": 100
     * }
     * </code>
     * </pre>
     *
     * In this case, the size of Grid needs to be updated to be able to show 100
     * rows in total (no more, no less).
     *
     * This class
     * <ol>
     * <li>gets initialized
     * <li>asks for its size
     * <li>updates Grid once the reply is received
     * <li>as the Grid fetches more data, the total row count is dynamically
     * updated.
     * </ol>
     */
Command (/uitest/src/main/java/com/vaadin/tests/widgetset/client/v7/grid/PureGWTTestApplication.java)/**
     * Class describing a menu item with an associated action
     */
Menu (/uitest/src/main/java/com/vaadin/tests/widgetset/client/v7/grid/PureGWTTestApplication.java)/**
     * A menu object, providing a complete system for building a hierarchical
     * menu bar system.
     */
PureGWTTestApplication (/uitest/src/main/java/com/vaadin/tests/widgetset/client/v7/grid/PureGWTTestApplication.java)/**
 * Pure GWT Test Application base for testing features of a single widget;
 * provides a menu system and convenience method for adding items to it.
 *
 * @author Vaadin Ltd
 */
VIdTestLabel (/uitest/src/main/java/com/vaadin/tests/widgetset/client/VIdTestLabel.java)/**
 * Client-side implementation for IdTestLabel (#10179).
 *
 */
CsrfButton (/uitest/src/main/java/com/vaadin/tests/widgetset/server/csrf/CsrfButton.java)/**
 * Dummy client connector to link with the client functionality if the
 * CsrfToken.
 *
 * @author Vaadin Ltd
 */
AbstractCsrfTokenUI (/uitest/src/main/java/com/vaadin/tests/widgetset/server/csrf/ui/AbstractCsrfTokenUI.java)/**
 * Abstract UI to test the CSRF token issue as reported in (#14111)
 *
 * @author Vaadin Ltd
 */
CsrfTokenDisabled (/uitest/src/main/java/com/vaadin/tests/widgetset/server/csrf/ui/CsrfTokenDisabled.java)/**
 * When the disable-xsrf-protection is true csrfToken is not present anymore
 * with the requests.<br/>
 * This is useful mostly when the client is not Vaadin and so it will not push
 * the parameter anyway. So now the server knows how to deal the issue if the
 * csrfToken is not present.
 *
 * @author Vaadin Ltd
 */
DummyLabel (/uitest/src/main/java/com/vaadin/tests/widgetset/server/DummyLabel.java)/**
 * Dummy component to cause {@link LabelState} to be used to test #8683
 *
 * @author Vaadin Ltd
 * @since 7.0.0
 */
ExtraSuperTextArea (/uitest/src/main/java/com/vaadin/tests/widgetset/server/ExtraSuperTextArea.java)/**
 * @author artamonov
 */
GwtRpc (/uitest/src/main/java/com/vaadin/tests/widgetset/server/gwtrpc/GwtRpc.java)/**
 * Test the GWT RPC with Vaadin DevMode. See #11709.
 *
 * @author Vaadin Ltd
 */
GwtRpcButton (/uitest/src/main/java/com/vaadin/tests/widgetset/server/gwtrpc/GwtRpcButton.java)/**
 * Dummy client connector to link with the client functionality where the GWT
 * RPC is triggered.
 *
 * @author Vaadin Ltd
 */
GwtRpcServletTest (/uitest/src/main/java/com/vaadin/tests/widgetset/server/gwtrpc/GwtRpcServletTest.java)/**
 * Test GWT RPC in Vaadin DevMode.
 *
 * @author Vaadin Ltd
 */
IdTestLabel (/uitest/src/main/java/com/vaadin/tests/widgetset/server/IdTestLabel.java)/**
 * Label that has a default id <code>default10179</code> for the use of
 * IdOverrideTest (#10179).
 *
 */
OverriddenDecendants (/uitest/src/main/java/com/vaadin/tests/widgetset/server/OverriddenDecendants.java)/**
 * UI for testing that @DelegateToWidget works on derived widget states.
 *
 * @author Vaadin Ltd
 */
SuperTextArea (/uitest/src/main/java/com/vaadin/tests/widgetset/server/SuperTextArea.java)/**
 * @author artamonov
 */
TestWidgetComponent (/uitest/src/main/java/com/vaadin/tests/widgetset/server/TestWidgetComponent.java)/**
 * Testing component that shows any widget class inside the
 * com.vaadin.tests.widgetset.client package.
 */
GridController (/uitest/src/main/java/com/vaadin/tests/widgetset/server/v7/grid/GridClientColumnRenderers.java)/**
     * Controls the grid on the client side
     */
GridBasicClientFeatures (/uitest/src/main/java/com/vaadin/v7/tests/components/grid/basicfeatures/GridBasicClientFeatures.java)/**
 * Initializer shell for GridClientBasicFeatures test application
 *
 * @author Vaadin Ltd
 */
GridBasicFeatures (/uitest/src/main/java/com/vaadin/v7/tests/components/grid/basicfeatures/GridBasicFeatures.java)/**
 * Tests the basic features like columns, footers and headers
 *
 * @author Vaadin Ltd
 */
GridClearContainer (/uitest/src/main/java/com/vaadin/v7/tests/components/grid/basicfeatures/server/GridClearContainer.java)/**
 * Tests that removing and adding rows doesn't cause an infinite loop in the
 * browser.
 *
 * @author Vaadin Ltd
 */
GridDetailsLocation (/uitest/src/main/java/com/vaadin/v7/tests/components/grid/GridDetailsLocation.java)/**
 * This test cannot be migrated to V8 since there is no Grid::scrollTo method.
 * Will it be there in the future ? (may be this test should be just removed).
 *
 * @author Vaadin Ltd
 *
 */
GridHeight (/uitest/src/main/java/com/vaadin/v7/tests/components/grid/GridHeight.java)/**
 * Tests that Grid gets correct height based on height mode, and resizes
 * properly with details row if height is undefined.
 *
 * @author Vaadin Ltd
 */
GridLayoutDetailsRowResize (/uitest/src/main/java/com/vaadin/v7/tests/components/grid/GridLayoutDetailsRowResize.java)/**
 * Tests that details row resizes along with the contents properly.
 *
 * @author Vaadin Ltd
 */
VaadinDeveloperNameField (/uitest/src/main/java/com/vaadin/v7/tests/components/textfield/TextChangeEvents.java)/**
     * "Autosuggest"
     *
     * Known issue is timing if suggestion comes while typing more content. IMO
     * we will not support this kind of features in default TextField, but
     * hopefully make it easily extendable to perfect suggest feature. MT
     * 2010-10
     *
     */
DndTreeTargetDetails (/uitest/src/main/java/com/vaadin/v7/tests/components/tree/DndTreeTargetDetails.java)/**
 * Test UI for tree as a drop target: AbstractSelectTargetDetails should provide
 * getMouseEvent() method.
 *
 * @author Vaadin Ltd
 */
TreeKeyboardNavigationToNone (/uitest/src/main/java/com/vaadin/v7/tests/components/tree/TreeKeyboardNavigationToNone.java)/**
 * Test UI for keyboard navigation for first and last tree item.
 *
 * @author Vaadin Ltd
 */
TreeScrollingOnRightClick (/uitest/src/main/java/com/vaadin/v7/tests/components/tree/TreeScrollingOnRightClick.java)/**
 * Test for #12618: Trying to select item with right click in Tree causes focus
 * issues.
 */
WindowWaiAriaRolesTest (/uitest/src/test/java/com/vaadin/tests/accessibility/WindowWaiAriaRolesTest.java)/**
 * Test to see if regular and alert windows get the correct wai-aria roles
 *
 * @author Vaadin Ltd
 */
ActionsOnDetachedComponentsTest (/uitest/src/test/java/com/vaadin/tests/actions/ActionsOnDetachedComponentsTest.java)/**
 * @author Vaadin Ltd
 */
AbsoluteLayoutRelativeSizeContentTest (/uitest/src/test/java/com/vaadin/tests/components/absolutelayout/AbsoluteLayoutRelativeSizeContentTest.java)/**
 * Tests how AbsoluteLayout handles relative sized contents.
 *
 * @author Vaadin Ltd
 */
AbsoluteLayoutResizeComponentsTest (/uitest/src/test/java/com/vaadin/tests/components/absolutelayout/AbsoluteLayoutResizeComponentsTest.java)/**
 * Tests for component positioning after width changes from defined to relative
 * and relative to defined
 */
TooltipModesTest (/uitest/src/test/java/com/vaadin/tests/components/abstractcomponent/TooltipModesTest.java)/**
 * @author Vaadin Ltd
 *
 */
AbstractOrderedLayoutWithCaptionsTest (/uitest/src/test/java/com/vaadin/tests/components/AbstractOrderedLayoutWithCaptionsTest.java)/**
 * Test to see if AbstractOrderedLayout displays captions correctly with
 * expanding ratios.
 *
 * @author Vaadin Ltd
 */
AccordionAddTabTest (/uitest/src/test/java/com/vaadin/tests/components/accordion/AccordionAddTabTest.java)/**
 * Test for Accordion : replace widget in tab should remove old widget.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
AccordionRemoveComponentTest (/uitest/src/test/java/com/vaadin/tests/components/accordion/AccordionRemoveComponentTest.java)/**
 * Test for removing component from Accordion
 *
 * @author Vaadin Ltd
 */
AccordionRemoveTabTest (/uitest/src/test/java/com/vaadin/tests/components/accordion/AccordionRemoveTabTest.java)/**
 * Test for Accordion: tabs should stay selectable after remove tab.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
AccordionTabIdsTest (/uitest/src/test/java/com/vaadin/tests/components/accordion/AccordionTabIdsTest.java)/**
 * Test for Accordion: Tab.setId should be propagated to client side tabs.
 *
 * @author Vaadin Ltd
 */
ButtonKeyboardClickTest (/uitest/src/test/java/com/vaadin/tests/components/button/ButtonKeyboardClickTest.java)/**
 * Test for availability (x,y) coordinates for button activated via keyboard.
 *
 * @author Vaadin Ltd
 */
ButtonUndefinedWidthTest (/uitest/src/test/java/com/vaadin/tests/components/button/ButtonUndefinedWidthTest.java)/**
 * Validates button Widths for Buttons or Native Buttons, inside or outside
 * tables.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
CheckBoxGroupFocusBlurTest (/uitest/src/test/java/com/vaadin/tests/components/checkboxgroup/CheckBoxGroupFocusBlurTest.java)/**
 * @author Vaadin Ltd
 *
 */
CheckBoxGroupRequiredIndicatorTest (/uitest/src/test/java/com/vaadin/tests/components/checkboxgroup/CheckBoxGroupRequiredIndicatorTest.java)/**
 * The test logic is in the superclass.
 *
 * @author Vaadin Ltd
 *
 */
CheckBoxGroupTest (/uitest/src/test/java/com/vaadin/tests/components/checkboxgroup/CheckBoxGroupTest.java)/**
 * Test for CheckBoxGroup
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
DisabledCheckBoxGroupTest (/uitest/src/test/java/com/vaadin/tests/components/checkboxgroup/DisabledCheckBoxGroupTest.java)/**
 * @author Vaadin Ltd
 *
 */
ColorPickerInputFormatsTest (/uitest/src/test/java/com/vaadin/tests/components/colorpicker/ColorPickerInputFormatsTest.java)/**
 * Test legal color values according to
 * http://www.w3schools.com/cssref/css_colors_legal.asp
 */
DefaultCaptionWidthTest (/uitest/src/test/java/com/vaadin/tests/components/colorpicker/DefaultCaptionWidthTest.java)/**
 * Test for default caption behavior in color picker.
 *
 * @author Vaadin Ltd
 */
ValoColorPickerInputFormatsTest (/uitest/src/test/java/com/vaadin/tests/components/colorpicker/ValoColorPickerInputFormatsTest.java)/**
 * Test legal color values according to
 * http://www.w3schools.com/cssref/css_colors_legal.asp
 */
ComboBoxClickIconTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxClickIconTest.java)/**
 * Test to check whether combobox is expanded when icon is clicked.
 *
 * @author Vaadin Ltd
 */
ComboBoxEmptyCaptionTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxEmptyCaptionTest.java)/**
 * @author Vaadin Ltd
 *
 */
ComboBoxIdenticalItemsTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxIdenticalItemsTest.java)/**
 * Test for identical item captions in ComboBox.
 *
 * @author Vaadin Ltd
 */
ComboboxMenuBarAutoopenTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboboxMenuBarAutoopenTest.java)/**
 * Test that checks whether Combobox popup is closed on click to autoopen
 * menubar and its item.
 *
 * @author Vaadin Ltd
 */
ComboBoxOnSmallScreenTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxOnSmallScreenTest.java)/**
 * ComboBox suggestion popup should not obscure the text input box.
 *
 * @author Vaadin Ltd
 */
ComboBoxScrollingToPageDisabledTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxScrollingToPageDisabledTest.java)/**
 * When pressed down key, while positioned on the last item - should show next
 * page and focus on the first item of the next page.
 */
ComboBoxScrollingWithArrowsTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxScrollingWithArrowsTest.java)/**
 * When pressed down key, while positioned on the last item - should show next
 * page and focus on the first item of the next page.
 */
ComboBoxSetNullWhenNewItemsAllowedTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxSetNullWhenNewItemsAllowedTest.java)/**
 * ComboBox should clear its value when setting to null with new items.
 */
ComboBoxSlowTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxSlowTest.java)/**
 * Verifies SlowComboBox filtering works when user inputs text. Also verifies
 * pagination works when the matching results number more than those that can be
 * displayed.
 *
 * @author Vaadin Ltd
 */
ComboBoxSuggestionPopupCloseTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxSuggestionPopupCloseTest.java)/**
 * @author Vaadin Ltd
 */
ComboBoxSuggestionPopupWidthLegacyTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxSuggestionPopupWidthLegacyTest.java)/**
 * @author Vaadin Ltd
 */
ComboBoxSuggestionPopupWidthPercentageTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxSuggestionPopupWidthPercentageTest.java)/**
 * @author Vaadin Ltd
 */
ComboBoxSuggestionPopupWidthPixelsTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxSuggestionPopupWidthPixelsTest.java)/**
 * @author Vaadin Ltd
 */
ComboBoxSuggestionPopupWidthTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxSuggestionPopupWidthTest.java)/**
 * @author Vaadin Ltd
 */
ComboBoxValueInputTest (/uitest/src/test/java/com/vaadin/tests/components/combobox/ComboBoxValueInputTest.java)/**
 * Tests ComboBox inputs and selections.
 *
 * @author Vaadin Ltd
 */
CustomDateFormatTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/CustomDateFormatTest.java)/**
 * @author Vaadin Ltd
 *
 */
CustomDateTimeFormatTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/CustomDateTimeFormatTest.java)/**
 * @author Vaadin Ltd
 *
 */
DateFieldIsValidTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/DateFieldIsValidTest.java)/**
 * @author Vaadin Ltd
 */
DateFieldPopupPositionTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/DateFieldPopupPositionTest.java)/**
 * Test for date field popup calendar position.
 *
 * @author Vaadin Ltd
 */
DateTimeFieldIsValidTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/DateTimeFieldIsValidTest.java)/**
 * @author Vaadin Ltd
 */
DateTimeFieldTestTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/DateTimeFieldTestTest.java)/**
 * @author Vaadin Ltd
 *
 */
InlineDateFieldTestTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/InlineDateFieldTestTest.java)/**
 * Reuse tests from super DateFieldTestTest class.
 *
 * @author Vaadin Ltd
 *
 */
InlineDateTimeFieldTestTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/InlineDateTimeFieldTestTest.java)/**
 * Reuse tests from super DateTimeFieldTestTest class.
 *
 * @author Vaadin Ltd
 *
 */
PopupDateFieldExtendedRangeTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/PopupDateFieldExtendedRangeTest.java)/**
 * Tests contents and functionality of PopupDateField's popup.
 *
 * @author Vaadin Ltd
 */
ReindeerDateFieldPopupPositionTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/ReindeerDateFieldPopupPositionTest.java)/**
 * Test for date field popup calendar position in reindeer theme.
 *
 * Test method is defined in super class.
 *
 * @author Vaadin Ltd
 */
TimePopupSelectionTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/TimePopupSelectionTest.java)/**
 * @author Vaadin Ltd
 *
 */
ValoDateFieldPopupPositionTest (/uitest/src/test/java/com/vaadin/tests/components/datefield/ValoDateFieldPopupPositionTest.java)/**
 * Test for date field popup calendar position in Valo theme.
 *
 * Test method is defined in super class.
 *
 * @author Vaadin Ltd
 */
DragAndDropFocusObtainTest (/uitest/src/test/java/com/vaadin/tests/components/draganddropwrapper/DragAndDropFocusObtainTest.java)/**
 * Test for text area inside {@link DragAndDropWrapper}: text area should obtain
 * focus on click.
 *
 * @author Vaadin Ltd
 */
DragAndDropRelativeWidthTest (/uitest/src/test/java/com/vaadin/tests/components/draganddropwrapper/DragAndDropRelativeWidthTest.java)/**
 * Test to check size of drag image element.
 *
 * @author Vaadin Ltd
 */
DragAndDropTextAreaTest (/uitest/src/test/java/com/vaadin/tests/components/draganddropwrapper/DragAndDropTextAreaTest.java)/**
 * Test for drag image of text area which should contain text-area text.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
EmbeddedThemeResourceTest (/uitest/src/test/java/com/vaadin/tests/components/embedded/EmbeddedThemeResourceTest.java)/**
 * Tests that {@link Embedded} uses correct theme when the theme is set with
 * {@link #setTheme(String)}, and also updates correctly if theme is changed
 * later. {@link Image} is used as the baseline for correct behavior.
 *
 * @author Vaadin Ltd
 */
FormLayoutClickListenerTest (/uitest/src/test/java/com/vaadin/tests/components/formlayout/FormLayoutClickListenerTest.java)/**
 * Test for form layout click listener.
 *
 * @author Vaadin Ltd
 */
FormLayoutInVerticalLayoutTest (/uitest/src/test/java/com/vaadin/tests/components/formlayout/FormLayoutInVerticalLayoutTest.java)/**
 * Test for H2 label inside FormLayout as first child of VerticalLayout.
 *
 * @author Vaadin Ltd
 */
StylePrefixTest (/uitest/src/test/java/com/vaadin/tests/components/formlayout/StylePrefixTest.java)/**
 * Test for FormLayout style prefix: custom additional styles should be prefixed
 * with "v-formlayout-", not "v-layout-".
 *
 * @author Vaadin Ltd
 */
EscalatorRemoveAndAddRowsTest (/uitest/src/test/java/com/vaadin/tests/components/grid/basicfeatures/escalator/EscalatorRemoveAndAddRowsTest.java)/**
 * Test class to test the escalator level issue for ticket #16832
 */
GridBasicsTest (/uitest/src/test/java/com/vaadin/tests/components/grid/basics/GridBasicsTest.java)/**
 * Base class for all {@link GridBasics} UI tests
 */
RefreshDataProviderTest (/uitest/src/test/java/com/vaadin/tests/components/grid/basics/RefreshDataProviderTest.java)/**
 * @author Vaadin Ltd
 *
 */
DisallowedDeselectionTest (/uitest/src/test/java/com/vaadin/tests/components/grid/DisallowedDeselectionTest.java)/**
 * @author Vaadin Ltd
 *
 */
GridAriaMultiselectableTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridAriaMultiselectableTest.java)/**
 * @author Vaadin Ltd
 */
GridAriaRowcountTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridAriaRowcountTest.java)/**
 * @author Vaadin Ltd
 */
GridDetailsLayoutExpandTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridDetailsLayoutExpandTest.java)/**
 * Tests the layouting of Grid's details row when it contains a HorizontalLayout
 * with expand ratios.
 *
 * @author Vaadin Ltd
 */
GridDisallowUserSelectionTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridDisallowUserSelectionTest.java)/**
 * @author Vaadin Ltd
 *
 */
GridEditorTabSkipsNonEditableCellsTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridEditorTabSkipsNonEditableCellsTest.java)/**
 * Makes sure that pressing Tab when the Grid is in edit mode will make focus
 * skip cells that are not editable.
 */
GridEditRowTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridEditRowTest.java)/**
 * Tests for ensuring that the furthest away visible rows don't get emptied when
 * editRow is called, and that the editor doesn't open beyond the lower border
 * of the Grid.
 *
 */
GridHeightTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridHeightTest.java)/**
 * Tests that Grid gets correct height based on height mode, and resizes
 * properly with details row if height is undefined.
 *
 * @author Vaadin Ltd
 */
GridLayoutDetailsRowResizeTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridLayoutDetailsRowResizeTest.java)/**
 * Tests that details row resizes along with the contents properly.
 *
 * @author Vaadin Ltd
 */
GridLayoutDetailsRowTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridLayoutDetailsRowTest.java)/**
 * Tests that details row displays GridLayout contents properly.
 *
 * @author Vaadin Ltd
 */
GridManyColumnsTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridManyColumnsTest.java)/**
 * Tests that Grid gets correct height based on height mode, and resizes
 * properly with details row if height is undefined.
 *
 * @author Vaadin Ltd
 */
GridManyColumnsV7Test (/uitest/src/test/java/com/vaadin/tests/components/grid/GridManyColumnsV7Test.java)/**
 * Tests that Grid gets correct height based on height mode, and resizes
 * properly with details row if height is undefined.
 *
 * @author Vaadin Ltd
 */
GridNullSafeNestedPropertyColumnTest (/uitest/src/test/java/com/vaadin/tests/components/grid/GridNullSafeNestedPropertyColumnTest.java)/**
 * Tests that using a nested property name with a null bean child property won't
 * cause an exception.
 */
HorizontalScrollAfterResizeTest (/uitest/src/test/java/com/vaadin/tests/components/grid/HorizontalScrollAfterResizeTest.java)/**
 * @author Vaadin Ltd
 *
 */
RemoveGridWithComponentTest (/uitest/src/test/java/com/vaadin/tests/components/grid/RemoveGridWithComponentTest.java)/**
 * @author Vaadin Ltd
 */
ComponentAlignmentsTest (/uitest/src/test/java/com/vaadin/tests/components/gridlayout/ComponentAlignmentsTest.java)/**
 * Test for TOP_CENTER and TOP_RIGHT alignments in VerticalLayout.
 *
 * @author Vaadin Ltd
 */
GridLayoutExpandRatioTest (/uitest/src/test/java/com/vaadin/tests/components/gridlayout/GridLayoutExpandRatioTest.java)/**
 * A test class for testing GridLayoutExpandRatio. The class is empty because
 * the name convention is UIClassName+Test. GridLayoutExpandRatioTest and
 * GridLayoutHideMiddleCellsTest behave the same way but on different UI
 * classes. Thats why they have different names and zero code.
 */
GridLayoutHideMiddleCellsTest (/uitest/src/test/java/com/vaadin/tests/components/gridlayout/GridLayoutHideMiddleCellsTest.java)/**
 * A test class for testing GridLayoutHideMiddleCellsTest. The class is empty
 * because the name convention is UIClassName+Test. GridLayoutExpandRatioTest
 * and GridLayoutHideMiddleCellsTest behave the same way but on different UI
 * classes. Thats why they have different names and zero code.
 */
HasValueRequiredIndicatorTest (/uitest/src/test/java/com/vaadin/tests/components/HasValueRequiredIndicatorTest.java)/**
 * @author Vaadin Ltd
 *
 */
JavaScriptResizeListenerTest (/uitest/src/test/java/com/vaadin/tests/components/javascriptcomponent/JavaScriptResizeListenerTest.java)/**
 * Re-implementation of Javascript Resize Listener TB2 Test in TB4.
 */
EmptySpaceOnPageAfterExpandedComponentTest (/uitest/src/test/java/com/vaadin/tests/components/layout/EmptySpaceOnPageAfterExpandedComponentTest.java)/**
 * Test to make sure that there is no any empty space (in Google Chrome) on page
 * after expanded component (#12672)
 *
 * Layout:
 *
 * [ Panel (auto x auto) [ Grid (auto x auto) ]
 *
 * AnyComponent (100% x 100%)
 *
 * <HERE SHOULD NOT BE ANY EMPTY SPACE> ]
 *
 * @author Vaadin Ltd
 */
MenuBarClickOpenedMenuTest (/uitest/src/test/java/com/vaadin/tests/components/menubar/MenuBarClickOpenedMenuTest.java)/**
 * Test for top level menu item which should close its sub-menus each time when
 * it's clicked. Also it checks sub-menu item which should not close its
 * sub-menus if they are opened on click.
 *
 * @author Vaadin Ltd
 */
MenuBarsWithNestingTest (/uitest/src/test/java/com/vaadin/tests/components/menubar/MenuBarsWithNestingTest.java)/**
 * This class tests the method VMenuBar.getSubPartElement(String) by using
 * Vaadin locators for finding the items of a MenuBar.
 *
 * @author Vaadin Ltd
 */
MenuBarsWithWaiAriaTest (/uitest/src/test/java/com/vaadin/tests/components/menubar/MenuBarsWithWaiAriaTest.java)/**
 * This class tests that MenuBar and its contents have all the required WAI-ARIA
 * attributes.
 *
 * @author Vaadin Ltd
 */
MenuBarTooltipsNearEdgeTest (/uitest/src/test/java/com/vaadin/tests/components/menubar/MenuBarTooltipsNearEdgeTest.java)/**
 * Test to see if tooltips will render in the correct locations near the edges.
 *
 * @author Vaadin Ltd
 */
MenuTooltipTest (/uitest/src/test/java/com/vaadin/tests/components/menubar/MenuTooltipTest.java)/**
 * Test to see if tooltips on menu items obscure other items on the menu.
 *
 * @author Vaadin Ltd
 */
SpaceMenuBarNavigationTest (/uitest/src/test/java/com/vaadin/tests/components/menubar/SpaceMenuBarNavigationTest.java)/**
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
NativeButtonClickTest (/uitest/src/test/java/com/vaadin/tests/components/nativebutton/NativeButtonClickTest.java)/**
 * Test to see if coordinates returned by click event on NativeButtons look
 * good. (see #14022)
 *
 * @author Vaadin Ltd
 */
NativeSelectEmptySelectionTest (/uitest/src/test/java/com/vaadin/tests/components/nativeselect/NativeSelectEmptySelectionTest.java)/**
 * @author Vaadin Ltd
 *
 */
NativeSelectFocusBlurTest (/uitest/src/test/java/com/vaadin/tests/components/nativeselect/NativeSelectFocusBlurTest.java)/**
 * @author Vaadin Ltd
 *
 */
NativeSelectInitTest (/uitest/src/test/java/com/vaadin/tests/components/nativeselect/NativeSelectInitTest.java)/**
 * @author Vaadin Ltd
 *
 */
MiddleNotificationPositionTest (/uitest/src/test/java/com/vaadin/tests/components/notification/MiddleNotificationPositionTest.java)/**
 * Unit test class for Notification with middle left and middle right positions.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
NotificationDelayTest (/uitest/src/test/java/com/vaadin/tests/components/notification/NotificationDelayTest.java)/**
 * Test to check notification delay.
 *
 * @author Vaadin Ltd
 */
NotificationsWaiAriaTest (/uitest/src/test/java/com/vaadin/tests/components/notification/NotificationsWaiAriaTest.java)/**
 * Unit test class for Notification ARIA (Accessible Rich Internet Applications)
 * roles.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
ReadOnlyOptionGroupTest (/uitest/src/test/java/com/vaadin/tests/components/optiongroup/ReadOnlyOptionGroupTest.java)/**
 * Test for Option group (with new items allowed): unset read only state.
 *
 * @author Vaadin Ltd
 */
NestedLayoutCaptionHoverTest (/uitest/src/test/java/com/vaadin/tests/components/orderedlayout/NestedLayoutCaptionHoverTest.java)/**
 * Tests hovering over caption in nested layout
 */
PanelRemoveShortcutListenerTest (/uitest/src/test/java/com/vaadin/tests/components/panel/PanelRemoveShortcutListenerTest.java)/**
 * Test for removing a shortcut listener from Panel.
 *
 * @author Vaadin Ltd
 */
PopupViewShortcutActionHandlerTest (/uitest/src/test/java/com/vaadin/tests/components/popupview/PopupViewShortcutActionHandlerTest.java)/**
 * Check availability of shortcut action listener in the popup view.
 *
 * @author Vaadin Ltd
 */
PopupViewWithExtensionTest (/uitest/src/test/java/com/vaadin/tests/components/popupview/PopupViewWithExtensionTest.java)/**
 * Popup view with extension should not throw an exception.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
DisabledRadioButtonGroupTest (/uitest/src/test/java/com/vaadin/tests/components/radiobuttongroup/DisabledRadioButtonGroupTest.java)/**
 * @author Vaadin Ltd
 *
 */
RadioButtonGroupFocusBlurTest (/uitest/src/test/java/com/vaadin/tests/components/radiobuttongroup/RadioButtonGroupFocusBlurTest.java)/**
 * @author Vaadin Ltd
 *
 */
RadioButtonGroupRequiredIndicatorTest (/uitest/src/test/java/com/vaadin/tests/components/radiobuttongroup/RadioButtonGroupRequiredIndicatorTest.java)/**
 * The tests are in the superclass.
 *
 * @author Vaadin Ltd
 *
 */
RadioButtonGroupTest (/uitest/src/test/java/com/vaadin/tests/components/radiobuttongroup/RadioButtonGroupTest.java)/**
 * Test for RadioButtonGroup
 *
 * @author Vaadin Ltd
 * @since 8.0
 */
HorizontalSplitPanelHeightTest (/uitest/src/test/java/com/vaadin/tests/components/splitpanel/HorizontalSplitPanelHeightTest.java)/**
 * Test for horizontal split panel height in case when only second component is
 * set.
 *
 * @author Vaadin Ltd
 */
SplitPanelDuplicateStyleNameTest (/uitest/src/test/java/com/vaadin/tests/components/splitpanel/SplitPanelDuplicateStyleNameTest.java)/**
 * Test for duplicate primary style name in SplitPanel.
 *
 * @author Vaadin Ltd
 */
SplitPanelWithMinimumAndMaximumTest (/uitest/src/test/java/com/vaadin/tests/components/splitpanel/SplitPanelWithMinimumAndMaximumTest.java)/**
 * Test for {@link SplitPositionChangeListeners}.
 *
 * @author Vaadin Ltd
 */
SplitPositionChangeTest (/uitest/src/test/java/com/vaadin/tests/components/splitpanel/SplitPositionChangeTest.java)/**
 * Test for {@link SplitPositionChangeListeners}.
 *
 * @author Vaadin Ltd
 */
AsyncPushUpdatesTest (/uitest/src/test/java/com/vaadin/tests/components/table/AsyncPushUpdatesTest.java)/**
 * Test to see if VScrollTable handles Push updates correctly.
 *
 * @author Vaadin Ltd
 */
ContextMenuSizeTest (/uitest/src/test/java/com/vaadin/tests/components/table/ContextMenuSizeTest.java)/**
 * Test for context menu position and size.
 *
 * @author Vaadin Ltd
 */
DndEmptyTableTest (/uitest/src/test/java/com/vaadin/tests/components/table/DndEmptyTableTest.java)/**
 * Test for empty table as a DnD target: it should not throws client side
 * exception.
 *
 * @author Vaadin Ltd
 */
DndTableTargetDetailsTest (/uitest/src/test/java/com/vaadin/tests/components/table/DndTableTargetDetailsTest.java)/**
 * Test for mouse details in AbstractSelectTargetDetails class when DnD target
 * is a table.
 *
 * @author Vaadin Ltd
 */
EditableModeChangeTest (/uitest/src/test/java/com/vaadin/tests/components/table/EditableModeChangeTest.java)/**
 * Tests that editing and selecting work correctly.
 *
 * @author Vaadin Ltd
 */
FocusOnSelectedItemTest (/uitest/src/test/java/com/vaadin/tests/components/table/FocusOnSelectedItemTest.java)/**
 * Test to see if the correct row gets the focus when the row is selected from
 * the serverside and forces the table to scroll down
 *
 * @author Vaadin Ltd
 */
FooterClickTest (/uitest/src/test/java/com/vaadin/tests/components/table/FooterClickTest.java)/**
 * Tests Table Footer ClickListener
 *
 * @author Vaadin Ltd
 */
FooterTest (/uitest/src/test/java/com/vaadin/tests/components/table/FooterTest.java)/**
 * Tests Table Footer
 *
 * @author Vaadin Ltd
 */
HeaderClickTest (/uitest/src/test/java/com/vaadin/tests/components/table/HeaderClickTest.java)/**
 * Tests Table Header ClickListener
 *
 * @author Vaadin Ltd
 */
HeaderFooterClickLeftRightMiddleTest (/uitest/src/test/java/com/vaadin/tests/components/table/HeaderFooterClickLeftRightMiddleTest.java)/**
 * Tests Table Footer ClickListener
 *
 * @author Vaadin Ltd
 */
HeaderPositionWhenSortingTest (/uitest/src/test/java/com/vaadin/tests/components/table/HeaderPositionWhenSortingTest.java)/**
 * Tests Table Footer ClickListener
 *
 * @author Vaadin Ltd
 */
HeaderRightClickAfterDragTest (/uitest/src/test/java/com/vaadin/tests/components/table/HeaderRightClickAfterDragTest.java)/**
 * Tests whether right-click on a column header works after the column is
 * dragged.
 *
 * @author Vaadin Ltd
 */
LabelEmbeddedClickThroughForTableTest (/uitest/src/test/java/com/vaadin/tests/components/table/LabelEmbeddedClickThroughForTableTest.java)/**
 * Tests clicks on different types of Table contents.
 *
 * @author Vaadin Ltd
 */
LeftColumnAlignmentTest (/uitest/src/test/java/com/vaadin/tests/components/table/LeftColumnAlignmentTest.java)/**
 * Test class for issue #13399 : Left alignment should not be set explicitly
 * instead of relying on default behavior
 *
 * @author Vaadin Ltd
 */
MemoryLeakTableTest (/uitest/src/test/java/com/vaadin/tests/components/table/MemoryLeakTableTest.java)/**
 * Test case creating and deleting table component in a loop, testing memory
 * lead in Table component. This test should not be used in auto testing.
 *
 * To test memory consuption. Run test in debug mode. Take memory snapshot in
 * Profiler in browser before and after the loop. Compare memory consuption.
 *
 * @author Vaadin Ltd
 */
SelectAllRowsShiftFirstTest (/uitest/src/test/java/com/vaadin/tests/components/table/SelectAllRowsShiftFirstTest.java)/**
 * Test to see if all items of the table can be selected by pressing shift and
 * selecting the first row, and then press shift then select last row (#13483)
 *
 * @author Vaadin Ltd
 */
SelectAllRowsTest (/uitest/src/test/java/com/vaadin/tests/components/table/SelectAllRowsTest.java)/**
 * Test to see if all items of the table can be selected by selecting first row,
 * press shift then select last (#13008)
 *
 * @author Vaadin Ltd
 */
SortLabelsInTableTest (/uitest/src/test/java/com/vaadin/tests/components/table/SortLabelsInTableTest.java)/**
 * Tests sorting labels in table.
 *
 * @author Vaadin Ltd
 */
TableAfterRemovingExpandRatiosTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableAfterRemovingExpandRatiosTest.java)/**
 * Tests checks that column width is restored after removing expand ratios.
 *
 * @author Vaadin Ltd
 */
TableClickAndDragOnIconAndComponentsTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableClickAndDragOnIconAndComponentsTest.java)/**
 * Tests that clicking on active fields doesn't change Table selection, nor does
 * dragging rows.
 *
 * @author Vaadin Ltd
 */
TableColumnResizeContentsWidthTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableColumnResizeContentsWidthTest.java)/**
 * Tests that components within table cells get resized when their column gets
 * resized.
 *
 * @author Vaadin Ltd
 */
TableInIframeRowClickScrollJumpTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableInIframeRowClickScrollJumpTest.java)/**
 * For testing that UI scroll does not jump back to up when: 1. UI is in iframe
 * 2. the window scrolled down 3. and table is clicked
 *
 * @author Vaadin Ltd
 */
TableItemDescriptionGeneratorUITest (/uitest/src/test/java/com/vaadin/tests/components/table/TableItemDescriptionGeneratorUITest.java)/**
 * Tests Table tooltips with various settings.
 *
 * @author Vaadin Ltd
 */
TableMatchesMouseDownMouseUpElementTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableMatchesMouseDownMouseUpElementTest.java)/**
 * Regular click cases already covered by @LabelEmbeddedClickThroughForTableTest
 * Testing cases when mouse down and mouse up positions are different
 *
 * @author Vaadin Ltd
 */
TableMoveFocusWithSelectionTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableMoveFocusWithSelectionTest.java)/**
 * Tests if table focus is moved correctly to the selected item
 *
 * @author Vaadin Ltd
 */
TableNavigationPageDownTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableNavigationPageDownTest.java)/**
 * Tests that navigation with PageDown/PageUp/Home/End in Table works
 *
 * @author Vaadin Ltd
 */
TableRepairsScrollPositionOnReAddingAllRowsTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableRepairsScrollPositionOnReAddingAllRowsTest.java)/**
 * Scroll position should be restored when removing and re-adding all rows in
 * Table.
 *
 * @author Vaadin Ltd
 */
TableRequiredIndicatorTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableRequiredIndicatorTest.java)/**
 * Checks that Table that has required flag set to true is also indicated as
 * such on the client side.
 *
 * @author Vaadin Ltd
 */
TableRowHeight2Test (/uitest/src/test/java/com/vaadin/tests/components/table/TableRowHeight2Test.java)/**
 * Tests that rows are completely visible and clicking buttons doesn't change
 * anything.
 *
 * @author Vaadin Ltd
 */
TableRowScrolledBottomTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableRowScrolledBottomTest.java)/**
 * Tests that adding long labels to a Table and scrolling to the bottom works as
 * intended.
 *
 * @author Vaadin Ltd
 */
TableScrollUpOnSelectTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableScrollUpOnSelectTest.java)/**
 * Test to see if Table appears to scroll up under an obscure set of conditions
 * (Scrolled down, set to expand, selecting updates a TextField that precedes
 * the Table in a VerticalLayout.) (#10106)
 *
 * @author Vaadin Ltd
 */
TableSortingIndicatorTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableSortingIndicatorTest.java)/**
 * Tests if the sort indicator is visible after the table has been sorted from
 * the serverside.
 *
 * @author Vaadin Ltd
 */
TableToggleColumnVisibilityTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableToggleColumnVisibilityTest.java)/**
 * Tests that column keeps its header, icon, alignment after toggling visibility
 * (#6245, #12303).
 *
 * @author Vaadin Ltd
 */
TableToggleColumnVisibilityWidthTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableToggleColumnVisibilityWidthTest.java)/**
 * Tests that column keeps its width after it is made invisible and visible
 * again (#12303).
 *
 * @author Vaadin Ltd
 */
TableWidthItemRemoveTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableWidthItemRemoveTest.java)/**
 * Test whether adding the first item to a table calculates the table width
 * correctly
 *
 * @author Vaadin Ltd
 */
TableWithContainerRequiringEqualsForItemIdTest (/uitest/src/test/java/com/vaadin/tests/components/table/TableWithContainerRequiringEqualsForItemIdTest.java)/**
 * Test for a Table with a customised BeanItemContainer.
 *
 * @author Vaadin Ltd
 */
TextFieldRelativeWidthTest (/uitest/src/test/java/com/vaadin/tests/components/table/TextFieldRelativeWidthTest.java)/**
 * Tests that a TextField with 100% width fills the expanded column.
 *
 * @author Vaadin Ltd
 */
TextFieldValueGoesMissingTest (/uitest/src/test/java/com/vaadin/tests/components/table/TextFieldValueGoesMissingTest.java)/**
 * Tests that a text field's value isn't cleared after a label in the same
 * layout is changed.
 *
 * @since 7.3
 * @author Vaadin Ltd
 */
NewSelectionAfterTabRemoveTest (/uitest/src/test/java/com/vaadin/tests/components/tabsheet/NewSelectionAfterTabRemoveTest.java)/**
 * Automatic test of the default TabSheet selection algorithm when removing a
 * selected tab.
 *
 * @author Vaadin Ltd
 */
TabKeyboardNavigationTest (/uitest/src/test/java/com/vaadin/tests/components/tabsheet/TabKeyboardNavigationTest.java)/**
 * Add TB3 test as the TB2 one failed on keyboard events.
 *
 * @author Vaadin Ltd
 */
TabSelectionRevertedByServerTest (/uitest/src/test/java/com/vaadin/tests/components/tabsheet/TabSelectionRevertedByServerTest.java)/**
 * If user selected the last tab the test will change it back to the first one
 * from a server side selection listener. This test makes sure that actually
 * happen.
 *
 * @author Vaadin Ltd
 */
TabsheetCloseSelectedTabsTest (/uitest/src/test/java/com/vaadin/tests/components/tabsheet/TabsheetCloseSelectedTabsTest.java)/**
 * Tests that tabsheet's scroll button are rendered correctly in Chameleon
 * theme.
 *
 * Ticket #12154
 *
 * @author Vaadin Ltd
 */
TabSheetCloseTest (/uitest/src/test/java/com/vaadin/tests/components/tabsheet/TabSheetCloseTest.java)/**
 * Tests that when closing the last tab on a TabSheet, another tab gets selected
 * with no error. Only the last tab should be visible, so the actual TabSheet
 * width should be small.
 *
 * @author Vaadin Ltd
 */
TabSheetInDisabledParentTest (/uitest/src/test/java/com/vaadin/tests/components/tabsheet/TabSheetInDisabledParentTest.java)/**
 * Test to check that TabsheetBaseConnector reacts on disabling its parent.
 *
 * @author Vaadin Ltd
 */
TabsheetNotEnoughHorizontalSpaceTest (/uitest/src/test/java/com/vaadin/tests/components/tabsheet/TabsheetNotEnoughHorizontalSpaceTest.java)/**
 * Tests that tabsheet's scroll button are rendered correctly in Chameleon
 * theme.
 *
 * Ticket #12154
 *
 * @author Vaadin Ltd
 */
TabSheetScrollOnTabCloseTest (/uitest/src/test/java/com/vaadin/tests/components/tabsheet/TabSheetScrollOnTabCloseTest.java)/**
 * Tests removing tabs that have been scrolled out of view. This should cause no
 * change to the scroll position.
 *
 * @author Vaadin Ltd
 */
TabSpaceNotScrollTest (/uitest/src/test/java/com/vaadin/tests/components/tabsheet/TabSpaceNotScrollTest.java)/**
 * Test if the page scroll when press space on a tabsheet's tab.
 *
 * @author Vaadin Ltd
 */
RequiredTextFieldTest (/uitest/src/test/java/com/vaadin/tests/components/textfield/RequiredTextFieldTest.java)/**
 * Test for .v-required style
 *
 * @author Vaadin Ltd
 */
TooltipPositionTest (/uitest/src/test/java/com/vaadin/tests/components/TooltipPositionTest.java)/**
 * Tests that the tooltip is positioned so that it fits in the displayed area.
 *
 * @author Vaadin Ltd
 */
TreeGridAriaRowcountTest (/uitest/src/test/java/com/vaadin/tests/components/treegrid/TreeGridAriaRowcountTest.java)/**
 * @author Vaadin Ltd
 */
DisappearingComponentsTest (/uitest/src/test/java/com/vaadin/tests/components/treetable/DisappearingComponentsTest.java)/**
 * Tests that expanded cells with component contents aren't empty.
 *
 * @author Vaadin Ltd
 */
TreeTableContainerHierarchicalWrapperTest (/uitest/src/test/java/com/vaadin/tests/components/treetable/TreeTableContainerHierarchicalWrapperTest.java)/**
 * Tests that TreeTable with ContainerHierarchicalWrapper is updated correctly
 * when the setParent() is called for the item just added
 *
 * @author Vaadin Ltd
 */
TreeTableItemDescriptionGeneratorUITest (/uitest/src/test/java/com/vaadin/tests/components/treetable/TreeTableItemDescriptionGeneratorUITest.java)/**
 * Tests TreeTable tooltips with various settings.
 *
 * @author Vaadin Ltd
 */
TreeTableOutOfSyncTest (/uitest/src/test/java/com/vaadin/tests/components/treetable/TreeTableOutOfSyncTest.java)/**
 * Tests that opening the root node and clicking a generated component doesn't
 * cause out of sync (or any other system notifications).
 *
 * @author Vaadin Ltd
 */
TreeTablePartialUpdatesPageLength0Test (/uitest/src/test/java/com/vaadin/tests/components/treetable/TreeTablePartialUpdatesPageLength0Test.java)/**
 * Tests expanding TreeTable rows when page length is zero.
 *
 * @author Vaadin Ltd
 */
TreeTablePartialUpdatesTest (/uitest/src/test/java/com/vaadin/tests/components/treetable/TreeTablePartialUpdatesTest.java)/**
 * Tests partial updates of a TreeTable.
 *
 * @author Vaadin Ltd
 */
TreeTableRowHeaderModeTest (/uitest/src/test/java/com/vaadin/tests/components/treetable/TreeTableRowHeaderModeTest.java)/**
 * Test for absence of empty row header for RowHeaderMode.ICON_ONLY
 *
 * @author Vaadin Ltd
 */
ComponentIncludedInCustomWidgetsetTest (/uitest/src/test/java/com/vaadin/tests/components/ui/ComponentIncludedInCustomWidgetsetTest.java)/**
 * Tests if a component is included in a custom widgetset
 * (com.vaadin.tests.widgetset.TestingWidgetSet)
 *
 * @author Vaadin Ltd
 */
ComponentMissingFromDefaultWidgetsetTest (/uitest/src/test/java/com/vaadin/tests/components/ui/ComponentMissingFromDefaultWidgetsetTest.java)/**
 * Test for testing if a component is missing from a widgetset.
 *
 * @author Vaadin Ltd
 */
TextAreaEventPropagationTest (/uitest/src/test/java/com/vaadin/tests/components/ui/TextAreaEventPropagationTest.java)/**
 * Tests that the TextArea widget correctly stops ENTER events from propagating.
 *
 * @author Vaadin Ltd
 */
UIAutoGeneratedStyleNameTest (/uitest/src/test/java/com/vaadin/tests/components/ui/UIAutoGeneratedStyleNameTest.java)/**
 * Test to check auto-generated style name for UI div and overlays div.
 *
 * @author Vaadin Ltd
 */
UIScrollingTest (/uitest/src/test/java/com/vaadin/tests/components/uitest/UIScrollingTest.java)/**
 * Tests UI scrolling.
 *
 * @author Vaadin Ltd
 */
UnknownComponentConnectorTest (/uitest/src/test/java/com/vaadin/tests/components/UnknownComponentConnectorTest.java)/**
 * Tests that a user is notified about a missing component from the widgetset
 */
UploadInTabsheetTest (/uitest/src/test/java/com/vaadin/tests/components/upload/UploadInTabsheetTest.java)/**
 * Verifies that there's no client side errors when changing a tab containing
 * Upload right after uploading is succeeded (#8728)
 */
UploadInTabsheetV7Test (/uitest/src/test/java/com/vaadin/tests/components/upload/UploadInTabsheetV7Test.java)/**
 * Verifies that there's no client side errors when changing a tab containing
 * Upload right after uploading is succeeded (#8728)
 */
UploadTitleWithTooltipTest (/uitest/src/test/java/com/vaadin/tests/components/upload/UploadTitleWithTooltipTest.java)/**
 * Test for check visibility of browser-dependent tootlip for Upload component.
 *
 * @author Vaadin Ltd
 */
BottomComponentScrollsUpTest (/uitest/src/test/java/com/vaadin/tests/components/window/BottomComponentScrollsUpTest.java)/**
 * Automatic test for fix for #12943.
 *
 * While testing without the fix, the test failed on both Chrome and PhantomJS.
 *
 * @author Vaadin Ltd
 */
ComboboxScrollableWindowTest (/uitest/src/test/java/com/vaadin/tests/components/window/ComboboxScrollableWindowTest.java)/**
 * Tests that a ComboBox at the bottom of a Window remains visible when clicked.
 *
 * @author Vaadin Ltd
 */
ExtraWindowShownWaiAriaTest (/uitest/src/test/java/com/vaadin/tests/components/window/ExtraWindowShownWaiAriaTest.java)/**
 * Tests dialogs with WAI-ARIA.
 *
 * @author Vaadin Ltd
 */
ModalWindowFocusTest (/uitest/src/test/java/com/vaadin/tests/components/window/ModalWindowFocusTest.java)/**
 * Tests that a modal window is focused on creation and that on closing a window
 * focus is given to underlying modal window
 *
 * @author Vaadin Ltd
 */
ModalWindowRefocusTest (/uitest/src/test/java/com/vaadin/tests/components/window/ModalWindowRefocusTest.java)/**
 * Tests that a modal window is focused on creation and that on closing a window
 * focus is given to underlying modal window
 *
 * @author Vaadin Ltd
 */
SubWindowsTextSelectionTest (/uitest/src/test/java/com/vaadin/tests/components/window/SubWindowsTextSelectionTest.java)/**
 * Test for issue #12726, IE's make text selection when sub windows are
 * dragged(moved).
 *
 * @author Vaadin Ltd
 */
TestTooSmallSubwindowSizeTest (/uitest/src/test/java/com/vaadin/tests/components/window/TestTooSmallSubwindowSizeTest.java)/**
 * Tests that the styles work correctly in tiny subwindows that have more
 * content than can fit.
 *
 * @author Vaadin Ltd
 */
WindowInUiWithNoContentTest (/uitest/src/test/java/com/vaadin/tests/components/window/WindowInUiWithNoContentTest.java)/**
 * Test for Window attached to the UI with not content.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
WindowOrderTest (/uitest/src/test/java/com/vaadin/tests/components/window/WindowOrderTest.java)/**
 * Test for window order position access.
 *
 * @author Vaadin Ltd
 */
CurrentTimeMillisTest (/uitest/src/test/java/com/vaadin/tests/CurrentTimeMillisTest.java)/**
 * Test to check high resolution time availability in browser (depending on
 * browser).
 *
 * @author Vaadin Ltd
 */
DDInterruptTest (/uitest/src/test/java/com/vaadin/tests/dd/DDInterruptTest.java)/**
 * Test for interrupting drag-and-drop.
 *
 * @author Vaadin Ltd
 */
HierarchyAfterAnalyzeLayoutsTest (/uitest/src/test/java/com/vaadin/tests/debug/HierarchyAfterAnalyzeLayoutsTest.java)/**
 * Check that analyze layouts does not find problems for a trivial application.
 *
 * @since 7.2
 * @author Vaadin Ltd
 */
PushVersionInfoTest (/uitest/src/test/java/com/vaadin/tests/debug/PushVersionInfoTest.java)/**
 * Test for PUSH version string in debug window.
 *
 * @author Vaadin Ltd
 */
ClickCheckBoxUITest (/uitest/src/test/java/com/vaadin/tests/elements/checkbox/ClickCheckBoxUITest.java)/**
 * Testcase used to validate {@link CheckBoxElement#click()} works as expected.
 * See #13763
 */
SelectByTextTest (/uitest/src/test/java/com/vaadin/tests/elements/combobox/SelectByTextTest.java)/**
 * Validates ComboBox.selectByText(String s) works properly if input String s
 * contains parentheses
 */
SplitPanelComponentsTest (/uitest/src/test/java/com/vaadin/tests/elements/splitpanel/SplitPanelComponentsTest.java)/**
 * This class contains tests for checking that the methods getFirstComponent()
 * and getSecondComponent() of AbstractSplitPanelElement return the correct
 * components also when the split panel only has a second component. See #14073
 * and #14075.
 *
 */
NestedTabSheetTest (/uitest/src/test/java/com/vaadin/tests/elements/tabsheet/NestedTabSheetTest.java)/**
 * Tests selecting tabs in a nested tab sheet. TabSheetElement.openTab should
 * not open tabs that are in a tab sheet that is itself contained in the current
 * tab sheet. Only the tabs in the current tab sheet should be candidates for
 * selection.
 */
TabSheetElementExceptionTest (/uitest/src/test/java/com/vaadin/tests/elements/tabsheet/TabSheetElementExceptionTest.java)/**
 * Tests that an exception is thrown when attempting to select a tab that does
 * not exist in the tab sheet.
 */
GridSpanEmptyColumnsTest (/uitest/src/test/java/com/vaadin/tests/layouts/gridlayout/GridSpanEmptyColumnsTest.java)/**
 * Tests that GridLayout handles elements spanning otherwise empty columns
 * correctly (#14335)
 *
 * @since 7.2.5
 * @author markus
 */
TestLayoutClickListenersTest (/uitest/src/test/java/com/vaadin/tests/layouts/TestLayoutClickListenersTest.java)/**
 * Tests LayoutClickListener on different layouts.
 *
 * @author Vaadin Ltd
 */
CommunicationErrorTest (/uitest/src/test/java/com/vaadin/tests/requesthandlers/CommunicationErrorTest.java)/**
 * Test for null values in communication error json object .
 *
 * @author Vaadin Ltd
 */
DateFieldSmokeTest (/uitest/src/test/java/com/vaadin/tests/smoke/DateFieldSmokeTest.java)/**
 * @author Vaadin Ltd
 *
 */
TableSqlContainerTest (/uitest/src/test/java/com/vaadin/tests/smoke/TableSqlContainerTest.java)/**
 * @author Vaadin Ltd
 *
 */
AbstractTB3Test (/uitest/src/test/java/com/vaadin/tests/tb3/AbstractTB3Test.java)/**
 * Base class for TestBench 3+ tests. All TB3+ tests in the project should
 * extend this class.
 *
 * Provides:
 * <ul>
 * <li>Helpers for browser selection</li>
 * <li>Hub connection setup and teardown</li>
 * <li>Automatic generation of URL for a given test on the development server
 * using {@link #getUIClass()} or by automatically finding an enclosing UI class
 * and based on requested features, e.g. {@link #isDebug()},
 * {@link #isPush()}</li>
 * <li>Generic helpers for creating TB3+ tests</li>
 * </ul>
 *
 * @author Vaadin Ltd
 */
AffectedTB3Tests (/uitest/src/test/java/com/vaadin/tests/tb3/AffectedTB3Tests.java)/**
 * Test suite that runs tests from test classes which have changes or have
 * similar package name compare the the changes files in the current workspace.
 * If there are no changes in the workspace, it will run the changes to test
 * classes introduced in the HEAD commit.
 *
 * @author Vaadin Ltd
 */
AllTB3Tests (/uitest/src/test/java/com/vaadin/tests/tb3/AllTB3Tests.java)/**
 * Test consisting of all TB3 tests except integration tests (classes extending
 * AbstractTB3Test, excludes package com.vaadin.test.integration).
 *
 * @author Vaadin Ltd
 */
BrowserStackBrowserFactory (/uitest/src/test/java/com/vaadin/tests/tb3/BrowserStackBrowserFactory.java)/**
 * Browser factory for the cloud test provider BrowserStack.
 */
ChangedTB3Tests (/uitest/src/test/java/com/vaadin/tests/tb3/ChangedTB3Tests.java)/**
 * Test suite that runs tests from test classes which have changes in the
 * current workspace. If there are no changes in the workspace, it will run the
 * changes to test classes introduced in the HEAD commit.
 *
 * @author Vaadin Ltd
 */
CustomTestBenchCommandExecutor (/uitest/src/test/java/com/vaadin/tests/tb3/CustomTestBenchCommandExecutor.java)/**
 * Internal hack to support capturing screenshots for elements.
 *
 * Most parts are from TestBenchCommandExecutor and the feature should be
 * integrated into TB4.
 *
 * @author Vaadin Ltd
 */
DndActionsTest (/uitest/src/test/java/com/vaadin/tests/tb3/DndActionsTest.java)/**
 * Base class for TestBench 3+ tests that use DnD. This class contains utility
 * methods for DnD operations.
 *
 * @author Vaadin Ltd
 */
MultiBrowserTest (/uitest/src/test/java/com/vaadin/tests/tb3/MultiBrowserTest.java)/**
 * Base class for tests which should be run on all supported browsers. The test
 * is automatically launched for multiple browsers in parallel by the test
 * runner.
 *
 * Sub classes can, but typically should not, restrict the browsers used by
 * implementing a
 *
 * <pre>
 * &#064;Parameters
 * public static Collection&lt;DesiredCapabilities&gt; getBrowsersForTest() {
 * }
 * </pre>
 *
 * @author Vaadin Ltd
 */
MultiBrowserThemeTest (/uitest/src/test/java/com/vaadin/tests/tb3/MultiBrowserThemeTest.java)/**
 * Test which uses theme returned by {@link #getTheme()} for running the test
 */
ParallelScheduler (/uitest/src/test/java/com/vaadin/tests/tb3/ParallelScheduler.java)/**
 * JUnit scheduler capable of running multiple tets in parallel. Each test is
 * run in its own thread. Uses an {@link ExecutorService} to manage the threads.
 *
 * @author Vaadin Ltd
 */
ParameterizedTB3Runner (/uitest/src/test/java/com/vaadin/tests/tb3/ParameterizedTB3Runner.java)/**
 * TestBench test runner which supports static @Parameters annotated methods
 * providing parameters for the corresponding setter.
 * <p>
 * {@code @Parameters public static Collection<String> getThemes() } creates one
 * permutation for each value returned by {@code getThemes()}. The value is
 * automatically assigned to the test instance using {@code setTheme(String)}
 * before invoking the test method
 *
 * @author Vaadin Ltd
 */
PrivateTB3Configuration (/uitest/src/test/java/com/vaadin/tests/tb3/PrivateTB3Configuration.java)/**
 * Provides values for parameters which depend on where the test is run.
 * Parameters should be configured in work/eclipse-run-selected-test.properties.
 * A template is available in uitest/.
 *
 * @author Vaadin Ltd
 */
ScreenshotTB3Test (/uitest/src/test/java/com/vaadin/tests/tb3/ScreenshotTB3Test.java)/**
 * Base class which provides functionality for tests which use the automatic
 * screenshot comparison function.
 *
 * @author Vaadin Ltd
 */
TB3Runner (/uitest/src/test/java/com/vaadin/tests/tb3/TB3Runner.java)/**
 * This runner is loosely based on FactoryTestRunner by Ted Young
 * (http://tedyoung.me/2011/01/23/junit-runtime-tests-custom-runners/). The
 * generated test names give information about the parameters used (unlike
 * {@link Parameterized}).
 *
 * @since 7.1
 */
TB3TestSuite (/uitest/src/test/java/com/vaadin/tests/tb3/TB3TestSuite.java)/**
 * Test suite which consists of all the TB3 tests passed in the constructor.
 * Runs the tests in parallel using a {@link ParallelScheduler}
 *
 * @author Vaadin Ltd
 */
TooltipTest (/uitest/src/test/java/com/vaadin/tests/tb3/TooltipTest.java)/**
 * Base class for TestBench 3+ tests that use tooltips. This class contains
 * utility methods for testing tooltip use.
 *
 * @author Vaadin Ltd
 */
WebsocketTest (/uitest/src/test/java/com/vaadin/tests/tb3/WebsocketTest.java)/**
 * A {@link MultiBrowserTest} which restricts the tests to the browsers which
 * support websocket
 *
 * @author Vaadin Ltd
 */
AlignTopIconInButtonTest (/uitest/src/test/java/com/vaadin/tests/themes/valo/AlignTopIconInButtonTest.java)/**
 * Test for centered image icon in button with 'icon-align-top' style.
 *
 * @author Vaadin Ltd
 */
CollapsibleTableColumnTest (/uitest/src/test/java/com/vaadin/tests/themes/valo/CollapsibleTableColumnTest.java)/**
 * Test for non-collapsible column opacity for item in column configuration
 * menu.
 *
 * @author Vaadin Ltd
 */
ContrastFontColorTest (/uitest/src/test/java/com/vaadin/tests/themes/valo/ContrastFontColorTest.java)/**
 * Test for default contrast color variable in valo-font-color function.
 *
 * @author Vaadin Ltd
 */
DisabledLabelTest (/uitest/src/test/java/com/vaadin/tests/themes/valo/DisabledLabelTest.java)/**
 * Test for disabled label opacity.
 *
 * @author Vaadin Ltd
 */
ImmediateUploadTest (/uitest/src/test/java/com/vaadin/tests/themes/valo/ImmediateUploadTest.java)/**
 * Test to see if upload immediate mode hides the native file input.
 *
 * @author Vaadin Ltd
 */
NotificationStyleTest (/uitest/src/test/java/com/vaadin/tests/themes/valo/NotificationStyleTest.java)/**
 * Test for H1 and P elements styles in Notifications.
 *
 * @author Vaadin Ltd
 */
ResponsiveStylesTest (/uitest/src/test/java/com/vaadin/tests/themes/valo/ResponsiveStylesTest.java)/**
 * Test for the built-in reponsive ("RWD") styles in Valo.
 */
TextFieldBevelTest (/uitest/src/test/java/com/vaadin/tests/themes/valo/TextFieldBevelTest.java)/**
 * Test for $v-textfield-bevel value when $v-bevel is unset.
 *
 * @author Vaadin Ltd
 */
ValoDefaultCaptionWidthTest (/uitest/src/test/java/com/vaadin/tests/themes/valo/ValoDefaultCaptionWidthTest.java)/**
 * Test for default caption behavior in color picker using Valo theme.
 *
 * @author Vaadin Ltd
 */
AdjacentElementsWithTooltipsTest (/uitest/src/test/java/com/vaadin/tests/tooltip/AdjacentElementsWithTooltipsTest.java)/**
 * Test to see if tooltips obey quickOpenDelay when moving between directly
 * adjacent elements.
 *
 * @author Vaadin Ltd
 */
ButtonTooltipsTest (/uitest/src/test/java/com/vaadin/tests/tooltip/ButtonTooltipsTest.java)/**
 * Tests that tooltip sizes do not change when moving between adjacent elements
 *
 * @author Vaadin Ltd
 */
DragAndDropWrapperTooltipsTest (/uitest/src/test/java/com/vaadin/tests/tooltip/DragAndDropWrapperTooltipsTest.java)/**
 *
 *
 * @author Vaadin Ltd
 */
LongTooltipTest (/uitest/src/test/java/com/vaadin/tests/tooltip/LongTooltipTest.java)/**
 * Test to see if long tooltips behave appropriately
 *
 * @author Vaadin Ltd
 */
SliderTooltipTest (/uitest/src/test/java/com/vaadin/tests/tooltip/SliderTooltipTest.java)/**
 * Test that sliders can have tooltips
 *
 * @author Vaadin Ltd
 */
TooltipInWindowTest (/uitest/src/test/java/com/vaadin/tests/tooltip/TooltipInWindowTest.java)/**
 * Test if tooltips in subwindows behave correctly
 *
 * @author Vaadin Ltd
 */
ValidatorCaptionTooltipTest (/uitest/src/test/java/com/vaadin/tests/tooltip/ValidatorCaptionTooltipTest.java)/**
 * Test to see if validators create error tooltips correctly.
 *
 * @author Vaadin Ltd
 */
FragmentHandlingAndAsynchUIUpdateTest (/uitest/src/test/java/com/vaadin/tests/urifragments/FragmentHandlingAndAsynchUIUpdateTest.java)/**
 * Back and Forward buttons in browser should work correctly during UI update
 *
 * @author Vaadin Ltd
 */
SettingNullFragmentTest (/uitest/src/test/java/com/vaadin/tests/urifragments/SettingNullFragmentTest.java)/**
 * UI test: setting null as URI fragment clear (remove) the fragment in the
 * browser
 *
 * @author Vaadin Ltd
 */
CsrfTokenDisabledTest (/uitest/src/test/java/com/vaadin/tests/widgetset/server/csrf/ui/CsrfTokenDisabledTest.java)/**
 * Test the CSRF Token issue.
 *
 * @author Vaadin Ltd
 */
CsrfTokenEnabledTest (/uitest/src/test/java/com/vaadin/tests/widgetset/server/csrf/ui/CsrfTokenEnabledTest.java)/**
 * Test the CSRF Token issue.
 *
 * @author Vaadin Ltd
 */
GwtRpcTest (/uitest/src/test/java/com/vaadin/tests/widgetset/server/gwtrpc/GwtRpcTest.java)/**
 * Test the GWT RPC with Vaadin DevMode. See #11709.
 *
 * @author Vaadin Ltd
 */
OverriddenDecendantsTest (/uitest/src/test/java/com/vaadin/tests/widgetset/server/OverriddenDecendantsTest.java)/**
 * Class for unit testing that @DelegateToWidget works on derived widget states.
 *
 * @author Vaadin Ltd
 */
GridStaticSectionTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/basicfeatures/client/GridStaticSectionTest.java)/**
 * Abstract base class for header and footer tests.
 *
 * @author Vaadin Ltd
 */
GridBasicClientFeaturesTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/basicfeatures/GridBasicClientFeaturesTest.java)/**
 * GridBasicClientFeatures.
 *
 * @author Vaadin Ltd
 */
GridColumnReorderTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/basicfeatures/GridColumnReorderTest.java)/**
 *
 * @author Vaadin Ltd
 */
GridClearContainerTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/basicfeatures/server/GridClearContainerTest.java)/**
 * Tests that removing and adding rows doesn't cause an infinite loop in the
 * browser.
 *
 * @author Vaadin Ltd
 */
GridColumnReorderTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/basicfeatures/server/GridColumnReorderTest.java)/**
 * Tests that Grid columns can be reordered by user with drag and drop #16643.
 *
 * @author Vaadin Ltd
 */
GridFocusTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/basicfeatures/server/GridFocusTest.java)/**
 * Test for server-side Grid focus features.
 *
 * @author Vaadin Ltd
 */
GridClientRenderers (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/GridClientRenderers.java)/**
 * Tests Grid client side renderers
 *
 * @author Vaadin Ltd
 */
GridHeightTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/GridHeightTest.java)/**
 * Tests that Grid gets correct height based on height mode, and resizes
 * properly with details row if height is undefined.
 *
 * @author Vaadin Ltd
 */
GridLayoutDetailsRowResizeTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/GridLayoutDetailsRowResizeTest.java)/**
 * Tests that details row resizes along with the contents properly.
 *
 * @author Vaadin Ltd
 */
GridSpacerDecoClipTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/GridSpacerDecoClipTest.java)/**
 * Test for "Grid detail row outline overflows" (#17826)
 *
 * @author Vaadin Ltd
 */
WidgetRenderersTest (/uitest/src/test/java/com/vaadin/v7/tests/components/grid/WidgetRenderersTest.java)/**
 * TB tests for the various builtin widget-based renderers.
 *
 * @author Vaadin Ltd
 */
DndTreeTargetDetailsTest (/uitest/src/test/java/com/vaadin/v7/tests/components/tree/DndTreeTargetDetailsTest.java)/**
 * Test for mouse details in AbstractSelectTargetDetails class when DnD target
 * is a tree.
 *
 * @author Vaadin Ltd
 */
TreeKeyboardNavigationToNoneTest (/uitest/src/test/java/com/vaadin/v7/tests/components/tree/TreeKeyboardNavigationToNoneTest.java)/**
 * Test for keyboard navigation in tree in case when there are no items to
 * navigate.
 *
 * @author Vaadin Ltd
 */
TreeScrollingOnRightClickTest (/uitest/src/test/java/com/vaadin/v7/tests/components/tree/TreeScrollingOnRightClickTest.java)/**
 *
 * @since 7.1.9
 * @author Vaadin Ltd
 */
