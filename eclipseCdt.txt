AutotoolsOptionConstants (/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/autotools/core/AutotoolsOptionConstants.java)/**
 * @since 1.2
 */
IAutotoolsOption (/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/autotools/core/IAutotoolsOption.java)/**
 * @since 1.2
 */
AutotoolsEnvironmentVariableSupplier (/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/AutotoolsEnvironmentVariableSupplier.java)/**
 * Supplies some default environment variables for the Autotools toolchain. For
 * example, V=1 to enable verbose output necessary for proper GCC output
 * parsing.
 *
 * @noreference This class is not intended to be referenced by clients.
 * @noextend This class is not intended to be subclassed by clients.
 */
AutotoolsProblemMarkerInfo (/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/AutotoolsProblemMarkerInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
VariableConfigureOption (/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/configure/VariableConfigureOption.java)/**
 * This class represents a a list of environment variables as NAME="VALUE"
 *
 * @since 2.0
 *
 */
ErrorParserManager (/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/ErrorParserManager.java)/**
 * The purpose of ErrorParserManager is to delegate the work of error parsing
 * build output to {@link IErrorParser}s, assist in finding {@link IResource}s, and
 * help create appropriate error/warning/info markers to be displayed
 * by the Problems view.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
NewAutotoolsProject (/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/wizards/NewAutotoolsProject.java)/**
 * Creates a new Project in the workspace.
 */
AutomatedIntegrationSuite (/build/org.eclipse.cdt.autotools.tests/src/org/eclipse/cdt/autotools/tests/AutomatedIntegrationSuite.java)/** On Windows requires either Cygwin or MinGW to be in PATH */
LibtoolGCCBuildCommandParserTest (/build/org.eclipse.cdt.autotools.tests/src/org/eclipse/cdt/autotools/tests/LibtoolGCCBuildCommandParserTest.java)/**
 * Test cases to test libtool build command parser.
 */
AutotoolsUIPlugin (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/AutotoolsUIPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
InformationProvider (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/AutoconfEditor.java)/**
	 * Information provider used to present focusable information shells.
	 *
	 * @since 3.1.1
	 */
InformationDispatchAction (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/AutoconfEditor.java)/**
	 * This action behaves in two different ways: If there is no current text
	 * hover, the tooltip is displayed using information presenter. If there is
	 * a current text hover, it is converted into a information presenter in
	 * order to make it sticky.
	 * @since 3.1.1
	 */
AutoconfEditorMacroValidator (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/AutoconfEditorMacroValidator.java)/**
 *	Validate a macro call by checking against the stored macro prototypes
 */
AutoconfEditorMessages (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/AutoconfEditorMessages.java)/**
 * AutoconfEditorMessages
 */
AutoconfMacroParameterListValidator (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/AutoconfMacroParameterListValidator.java)/**
 * This class provides the macro call parameter parsing for the Autoconf Editor hover
 * It is modified from the CDT class CParameterListValidator
 *
 * @author jjohnstn
 *
 */
AutoconfMacroProposalContextInformation (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/AutoconfMacroProposalContextInformation.java)/**
 * @author aniefer
 */
AutoconfMacroArgumentElement (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/parser/AutoconfMacroArgumentElement.java)/**
 * This is a macro argument node.  It may also hold
 * other AutoconfMacroElements.  The source range includes any quotes around an argument
 * but the #getName() has them stripped.
 * @author eswartz
 *
 */
AutoconfMacroElement (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/parser/AutoconfMacroElement.java)/**
 * A call to a macro.
 * <p>
 * Macro element now stores arguments as AutoconfMacroElement or AutoconfMacroArgument children
 *
 */
AutoconfParser (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/parser/AutoconfParser.java)/**
 * Tokenizing autoconf parser, based on original work by Jeff Johnston
 * @author eswartz
 */
AutoconfTokenizer (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/parser/AutoconfTokenizer.java)/**
 * This tokenizer traverses autotools-style text (m4 or configure.ac) to support the
 * autoconf parser.  It tracks the current context (m4 macro call or shell commands)
 * to detect appropriate tokens, and tracks the m4 current quote style as well.
 * <p>
 * In m4 mode, its primary purpose is to find word boundaries, detect comments and quoted
 * strings, and to find the macro punctuation tokens.  It will not interpret anything
 * (e.g. '$1' inside a macro) -- this is up to the parser.
 * <p>
 * In shell script mode, its primary purpose is to identify enough
 * tokens to get a general picture of the structure of source for use by the autoconf
 * parser.  This isn't intended to be used for full shell script parsing.  In fact,
 * aside from the known tokens and identifiers, only individual characters will be returned.
 * <p>
 * Both modes know about "words" or identifiers and use the same syntax to detect these.
 * It's expected that the parser will detect a word as a macro or possible macro and
 * switch the mode of the tokenizer to fit.  The parser should invoke "setM4Context(...)"
 * (and "unreadToken" if necessary) to switch modes.
 * @author eswartz
 *
 */
IAutoconfErrorHandler (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/parser/IAutoconfErrorHandler.java)/**
 * Clients implement this interface to handle errors encountered while parsing.
 * @author eswartz
 *
 */
IAutoconfMacroDetector (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/parser/IAutoconfMacroDetector.java)/**
 * Clients implement this interface to identify what identifiers represent
 * macros for the autoconf tree.
 * @author eswartz
 *
 */
IAutoconfMacroValidator (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/parser/IAutoconfMacroValidator.java)/**
 * Clients implement this interface to validate macro calls.
 * @author eswartz
 *
 */
IMacroDetector (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/parser/IMacroDetector.java)/**
 * Clients implement this interface to detect whether a given identifier
 * represents a known or potential macro in m4 or configure.ac text.
 * @author eswartz
 *
 */
Token (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/autotools/ui/editors/parser/Token.java)/**
 * A single token parsed from an autotools-style file.  This represents m4 and sh
 * tokens.  Punctuation characters shared by both are not in a namespace.
 *
 * @author eswartz
 *
 */
AclocalHandler (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/actions/AclocalHandler.java)/**
 * @author Jeff Johnston
 *
 */
AutoheaderHandler (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/actions/AutoheaderHandler.java)/**
 * @author Jeff Johnston
 *
 */
AutoreconfHandler (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/actions/AutoreconfHandler.java)/**
 * @author Jeff Johnston
 *
 */
LibtoolizeHandler (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/actions/LibtoolizeHandler.java)/**
 * @author Jeff Johnston
 *
 */
ReconfigureHandler (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/actions/ReconfigureHandler.java)/**
 * @author Jeff Johnston
 *
 */
AutotoolsUIPluginImages (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/AutotoolsUIPluginImages.java)/**
 * Bundle of all images used by the C plugin.
 */
CWordFinder (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/CWordFinder.java)/**
 * This is a helper class for the text editor to be able to determine, given a
 * particular offset in a document, various candidates segments for things like
 * context help, proposals and hovering.
 */
ProjectionFileUpdater (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/autoconf/ProjectionFileUpdater.java)/**
 * ProjectionMakefileUpdater
 */
AbstractElementListSelectionDialog (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/AbstractElementListSelectionDialog.java)/**
 * A class to select one or more elements out of an indexed property
 */
AbstractMakefileCodeScanner (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/AbstractMakefileCodeScanner.java)/**
 * AbstractMakefileEditorScanner
 */
ArchiveTarget (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ArchiveTarget.java)/**
 * IArchiveTarget
 */
Validator (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/AutomakeCompletionProcessor.java)/**
	 * Simple content assist tip closer. The tip is valid in a range
	 * of 5 characters around its popup location.
	 */
AutomakefileFileInfo (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/AutomakeDocumentProvider.java)/**
	 * Remembers a IMakefile for each element.
	 */
Command (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/Command.java)/**
 * Makefile : ( statement ) *
 * statement : command | ..
 * command : <tab> prefix_command string <nl>
 * prefix_command : '-' | '@' | '+'
 */
DefaultRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/DefaultRule.java)/**
 * .DEFAULT
 * If the makefile uses this special target, the application shall ensure that it is
 * specified with commands, but without prerequisites.
 */
DeleteOnErrorRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/DeleteOnErrorRule.java)/**
 * .DELETE_ON_ERROR
 *  If `.DELETE_ON_ERROR' is mentioned as a target anywhere in the
 *  makefile, then `make' will delete the target of a rule if it has
 *  changed and its commands exit with a nonzero exit status, just as
 *  it does when it receives a signal.
 */
ElementListSelectionDialog (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ElementListSelectionDialog.java)/**
 * A class to select one or more elements out of an indexed property
 */
ExportAllVariablesRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ExportAllVariablesRule.java)/**
 * .EXPORT_ALL_VARIABLES
 *  Simply by being mentioned as a target, this tells `make' to export
 *  all variables to child processes by default.
 */
ExternalEditorInput (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ExternalEditorInput.java)/**
 * An EditorInput for an external (non-workspace) file.
 */
ExternalEditorInputFactory (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ExternalEditorInputFactory.java)/**
 * The ExternalEditorInputFactory is used to save and recreate an ExternalEditorInput object.
 * As such, it implements the IPersistableElement interface for storage
 * and the IElementFactory interface for recreation.
 *
 * @see IMemento
 * @see IPersistableElement
 * @see IElementFactory
 *
 * @since 4.0
 */
GNUMakefileUtil (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/GNUMakefileUtil.java)/**
 * GNUMakefile
 */
GNUTargetRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/GNUTargetRule.java)/**
 */
GNUVariableDef (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/GNUVariableDef.java)/**
 */
IgnoreRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/IgnoreRule.java)/**
 * .IGNORE
 * Prerequisites of this special target are targets themselves; this shall cause errors
 * from commands associated with them to be ignored in the same manner as
 * specified by the -i option.
 */
IMakefileDocumentProvider (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/IMakefileDocumentProvider.java)/**
 */
IMakefileEditorActionDefinitionIds (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/IMakefileEditorActionDefinitionIds.java)/**
 */
IntermediateRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/IntermediateRule.java)/**
 * .INTERMEDIATE
 *   The targets which `.INTERMEDIATE' depends on are treated as intermediate files.
 *   `.INTERMEDIATE' with no prerequisites has no effect.
 */
IReconcilingParticipant (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/IReconcilingParticipant.java)/**
 * IReconcilingParticipant
 * Interface of an object participating in reconciling.
 */
ITranslationUnitEditorInput (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ITranslationUnitEditorInput.java)/**
 * ITranslationUnitEditorInput
 */
LowResolutionTimeRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/LowResolutionTimeRule.java)/**
 * .LOW_RESOLUTION_TIME'
 *  If you specify prerequisites for `.LOW_RESOLUTION_TIME', `make'
 *  assumes that these files are created by commands that generate low
 *  resolution time stamps.
 */
MacroDefinition (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MacroDefinition.java)/**
 */
MakefileAnnotationHover (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileAnnotationHover.java)/**
 * MakefileAnnotationHover
 *
 */
Validator (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileCompletionProcessor.java)/**
	 * Simple content assist tip closer. The tip is valid in a range
	 * of 5 characters around its popup location.
	 */
MakefileCompletionProcessor (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileCompletionProcessor.java)/**
 * MakefileCompletionProcessor
 */
MakefileContentOutlinePage (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileContentOutlinePage.java)/**
 * MakefileContentOutlinePage
 */
MakefileFileInfo (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileDocumentProvider.java)/**
	 * Remembers a IMakefile for each element.
	 */
MakefileDocumentSetupParticipant (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileDocumentSetupParticipant.java)/**
 * MakefileDocumentSetupParticipant
 * The document setup participant for Ant.
 */
MakefileEditorActionContributor (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileEditorActionContributor.java)/**
 */
MakefileEditorPreferenceConstants (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileEditorPreferenceConstants.java)/**
 * MakefileEditorPreferenceConstants
 */
MakefileEditorTogglePresentationAction (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileEditorTogglePresentationAction.java)/**
 */
MakefileReader (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileReader.java)/**
 */
SingleTokenScanner (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileSourceConfiguration.java)/**
	 * Single token scanner.
	 */
MakefileStorageDocumentProvider (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileStorageDocumentProvider.java)/**
 * MakefileStorageDocumentProvider
 */
MakefileTextHover (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MakefileTextHover.java)/**
 * MakefileTextHover
 *
 */
MessageLine (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/MessageLine.java)/**
 * A message line. It distinguishs between "normal" messages and errors.
 * Setting an error message hides a currently displayed message until
 * <code>clearErrorMessage</code> is called.
 */
NotParallelRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/NotParallelRule.java)/**
 * .NOTPARALLEL
 *  If `.NOTPARALLEL' is mentioned as a target, then this invocation of
 *  `make' will be run serially, even if the `-j' option is given.
 *  Any recursively invoked `make' command will still be run in
 *  parallel (unless its makefile contains this target).  Any
 *  prerequisites on this target are ignored.
 */
PhonyRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/PhonyRule.java)/**
 * .PHONY
 *     The prerequisites of the special target `.PHONY' are considered to be phony targets.
 *     When it is time to consider such a target, `make' will run its commands unconditionally, regardless of
 *     whether a file with that name exists or what its last-modification time is.
 */
PosixMakefileUtil (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/PosixMakefileUtil.java)/**
 */
PosixRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/PosixRule.java)/**
 * .POSIX
 * The appliation shall ensure that this special target is specified without
 * prerequisites or commands.
 */
PreciousRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/PreciousRule.java)/**
 * .PRECIOUS
 * Prerequisites of this special target shall not be removed if make recieves an
 * asynchronous events.
 */
ProjectionMakefileUpdater (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ProjectionMakefileUpdater.java)/**
 * ProjectionMakefileUpdater
 */
ResourceChangeListener (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ResourceMarkerAnnotationModel.java)/**
	 * Internal resource change listener.
	 */
ResourceMarkerAnnotationModel (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ResourceMarkerAnnotationModel.java)/**
 * A marker annotation model whose underlying source of markers is
 * a resource in the workspace.
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.</p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
SccsGetRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/SccsGetRule.java)/**
 * .SCCS_GET
 * The application shall ensure that this special target is specified without
 * prerequesites.
 * The commands specifeied with this target shall replace the default
 * commands associated with this special target.
 */
SecondaryRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/SecondaryRule.java)/**
 * .SECONDARY
 *  The targets which `.SECONDARY' depends on are treated as
 *  intermediate files, except that they are never automatically deleted.
 *
 *  `.SECONDARY' with no prerequisites causes all targets to be treated
 *  as secondary (i.e., no target is removed because it is considered intermediate).
 */
SelectionList (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/SelectionList.java)/**
 * A selection widget that consists of a list and a text entry field. The list
 * of elements presented are limited to the pattern entered into the text entry
 * field.
 */
SelectionStatusDialog (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/SelectionStatusDialog.java)/**
 * An abstract base class for dialogs with a status bar and ok/cancel buttons.
 * The status message must be passed over as StatusInfo object and can be
 * an error, warning or ok. The OK button is enabled / disabled depending
 * on the status.
 */
SilentRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/SilentRule.java)/**
 * .SILENT
 * Prerequisties of this special target are targets themselves; this shall cause
 * commands associated with them not to be written to the standard output before
 * they are executed.
 */
SpecialRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/SpecialRule.java)/**
 * Targets that have special meaning for Make.
 */
StaticTargetRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/StaticTargetRule.java)/**
 *   Here is the syntax of a static pattern rule:
 *
 *    TARGETS ...: TARGET-PATTERN: DEP-PATTERNS ...
 *            COMMANDS
 *            ...
 */
StatusInfo (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/StatusInfo.java)/**
 * A settable IStatus
 * Can be an error, warning, info or ok. For error, info and warning states,
 * a message describes the problem
 */
SuffixesRule (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/SuffixesRule.java)/**
 * .SUFFIXES
 * Prerequisites of .SUFFIXES shall be appended to the list of known suffixes and are
 * used in conjunction with the inference rules.
 *
 */
TargetVariable (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/TargetVariable.java)/**
 *   Here is the syntax of a static pattern rule:
 *
 *    TARGETS ...: VARIABLE-ASSIGNMENT
 *    TARGETS ...: override VARIABLE-ASSIGNMENT
 */
TwoArrayQuickSort (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/TwoArrayQuickSort.java)/**
 * Quick sort to sort two arrays in parallel.
 */
Util (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/Util.java)/**
 * Utility methods.
 */
VariableDefinition (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/VariableDefinition.java)/**
 */
WordPartDetector (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/WordPartDetector.java)/**
 * Used to scan and detect for SQL keywords
 */
WorkingCopyManager (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/WorkingCopyManager.java)/**
 * This working copy manager works together with a given compilation unit document provider and
 * additionally offers to "overwrite" the working copy provided by this document provider.
 */
ContainsFilter (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/ContainsFilter.java)/**
 * Simple filter that only check whether the label contains the given string to
 * look for.
 */
FileRelevance (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/FileRelevance.java)/**
 * This class computes a relevance for files in case we have to select
 * from multiple files for the same file-system location.
 */
HTML2TextReader (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/HTML2TextReader.java)/**
 * Reads the text contents from a reader of HTML contents and translates
 * the tags or cut them out.
 */
HTMLPrinter (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/HTMLPrinter.java)/**
 * Provides a set of convenience methods for creating HTML pages.
 */
LocationAdapter (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/LocationAdapter.java)/**
 * Provides common functionality for URI and IPath
 */
MessageLine (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/MessageLine.java)/**
 * A message line. It distinguishes between "normal" messages and errors.
 * Setting an error message hides a currently displayed message until
 * <code>clearErrorMessage</code> is called.
 */
OptionalMessageDialog (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/OptionalMessageDialog.java)/**
 * This is a <code>MessageDialog</code> which allows the user
 * to choose that the dialog isn't shown again the next time.
 */
AbstractEditorPreferencePage (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AbstractEditorPreferencePage.java)/**
 * AbstraceMakeEditorPreferencePage
 */
HighlightingColorListItem (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutoconfEditorPreferencePage.java)/**
	 * Item in the highlighting color list.
	 *
	 * @since 3.0
	 */
ColorListLabelProvider (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutoconfEditorPreferencePage.java)/**
	 * Color list label provider.
	 *
	 * @since 3.0
	 */
ColorListContentProvider (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutoconfEditorPreferencePage.java)/**
	 * Color list content provider.
	 *
	 * @since 3.0
	 */
AutoconfEditorPreferencePage (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutoconfEditorPreferencePage.java)/**
 * MakeEditorPreferencePage
 * The page for setting the editor options.
 */
HighlightingColorListItem (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutomakeEditorPreferencePage.java)/**
	 * Item in the highlighting color list.
	 *
	 * @since 3.0
	 */
ColorListLabelProvider (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutomakeEditorPreferencePage.java)/**
	 * Color list label provider.
	 *
	 * @since 3.0
	 */
ColorListContentProvider (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutomakeEditorPreferencePage.java)/**
	 * Color list content provider.
	 *
	 * @since 3.0
	 */
AutomakeEditorPreferencePage (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutomakeEditorPreferencePage.java)/**
 * MakeEditorPreferencePage
 * The page for setting the editor options.
 */
AutotoolsEditorPreferenceConstants (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutotoolsEditorPreferenceConstants.java)/**
 * MakefileEditorPreferenceConstants
 */
AutotoolsPreferencesMessages (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/AutotoolsPreferencesMessages.java)/**
 * MakefilePreferencesMessages
 */
ColorEditor (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/ColorEditor.java)/**
 * A "button" of a certain color determined by the color picker
 */
OverlayPreferenceStore (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/OverlayPreferenceStore.java)/**
 * An overlaying preference store.
 */
StatusInfo (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/preferences/StatusInfo.java)/**
 * A settable IStatus.
 * Can be an error, warning, info or ok. For error, info and warning states,
 * a message describes the problem.
 */
DialogNewVar (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/properties/AutotoolsCategoryPropertyOptionPage.java)/**
		 * Dialog user inputs variable's name and value.
		 */
AutotoolsConfigurePrefStore (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/properties/AutotoolsConfigurePrefStore.java)/**
 * @author jjohnstn
 *
 */
AutotoolsPropertyMessages (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/properties/AutotoolsPropertyMessages.java)/**
 * MakefilePreferencesMessages
 */
ResourceLookup (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/ResourceLookup.java)/**
 * Allows for looking up resources by location or name.
 */
ResourceLookupTree (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/ResourceLookupTree.java)/**
 * Allows for looking up resources by location or name. When using this class 100 bytes per resource
 * are needed. Therefore the support is limited to header-files int non-cdt projects and all files
 * except non-cdt-files in CDT projects.
 *
 * The information for a project is initialized when first requested and then it is kept up to date
 * using a resource change listener. No memory is used, as long as the class is not used.
 * When information is not used for more than 10 minutes, the data-structures will be held via a weak
 * reference, only and are subject to garbage collection.
 *
 * The node map stores a map from hash-code of file-names to nodes.
 * A node contains the name of a file plus a link to the parent resource. From that we can compute
 * the resource path and obtain further information via the resource.
 */
SubstitutionTextReader (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/SubstitutionTextReader.java)/**
 * Reads the text contents from a reader and computes for each character
 * a potential substitution. The substitution may eat more characters than
 * only the one passed into the computation routine.
 */
HoverMessages (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/text/hover/HoverMessages.java)/**
 * AutoconfEditorMessages
 */
AutotoolsBuildWizard (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/AutotoolsBuildWizard.java)/**
 *
 */
AutotoolsWizardMessages (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/AutotoolsWizardMessages.java)/**
 * @since 2.0
 */
ConvertToAutotoolsProjectWizard (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/ConvertToAutotoolsProjectWizard.java)/**
 * This wizard provides a method by which the user can
 * add a C nature to a project that previously had no nature associated with it.
 */
ConvertToAutotoolsProjectWizardPage (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/ConvertToAutotoolsProjectWizardPage.java)/**
 *
 * ConvertToAutotoolsProjectWizardPage
 * Standard main page for a wizard that adds a Managed Make C project Nature to a project with no nature associated with it.
 * This conversion is one way in that the project cannot be converted back (i.e have the nature removed).
 *
 * @author Jeff Johnston
 * @since Feb 8, 2006
 *<p>
 * Example useage:
 * <pre>
 * mainPage = new ConvertToAutotoolsProjectWizardPage("ConvertProjectPage");
 * mainPage.setTitle("Project Conversion");
 * mainPage.setDescription("Add C or C++ Managed Make Nature to a project.");
 * </pre>
 * </p>
 */
CProjectPlatformPage (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/CProjectPlatformPage.java)/**
 * Class that implements the project type and configuration selection page in the new
 * project wizard for managed builder projects.
 *
 * @since 1.2
 */
ReferenceBlock (/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/ReferenceBlock.java)/**
 * @deprecated as of CDT 4.0. This Block was used for New Project Wizard
 * for 3.X style projects.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
TestMacroParser (/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/autoconf/TestMacroParser.java)/**
 * Test parsing with macros
 * @author eswartz
 *
 */
TestShellParser (/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/autoconf/TestShellParser.java)/**
 * @author eswartz
 *
 */
TestTokenizer (/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/autoconf/TestTokenizer.java)/**
 * Test autoconf tokenizer.  The tokenizer mainly is used to detect boundaries and keywords
 * and is not a full shell tokenizer.
 * @author eswartz
 *
 */
ClangToolChain (/build/org.eclipse.cdt.build.gcc.core/src/org/eclipse/cdt/build/gcc/core/ClangToolChain.java)/**
 * The Clang toolchain. There's little different from the GCC toolchain other
 * than the toolchain type and name.
 *
 * @author dschaefer
 *
 */
GCCToolChain (/build/org.eclipse.cdt.build.gcc.core/src/org/eclipse/cdt/build/gcc/core/GCCToolChain.java)/**
 * The GCC toolchain. This is the base class for all GCC toolchains. It
 * represents GCC as found on the user's PATH. It can be overridden to change
 * environment variable settings.
 */
GCCPathToolChainProvider (/build/org.eclipse.cdt.build.gcc.core/src/org/eclipse/cdt/build/gcc/core/internal/GCCPathToolChainProvider.java)/**
 * Finds gcc and clang on the path.
 */
Activator (/build/org.eclipse.cdt.build.gcc.ui/src/org/eclipse/cdt/build/gcc/ui/internal/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
CMakeToolChainEvent (/build/org.eclipse.cdt.cmake.core/src/org/eclipse/cdt/cmake/core/CMakeToolChainEvent.java)/**
 * Event occured with CMake ToolChain Files, either added or removed.
 */
ICMakeToolChainFile (/build/org.eclipse.cdt.cmake.core/src/org/eclipse/cdt/cmake/core/ICMakeToolChainFile.java)/**
 * A toolchain file.
 *
 * @noimplement
 * @noextend
 */
ICMakeToolChainListener (/build/org.eclipse.cdt.cmake.core/src/org/eclipse/cdt/cmake/core/ICMakeToolChainListener.java)/**
 * Listener for toolchain events.
 */
ICMakeToolChainManager (/build/org.eclipse.cdt.cmake.core/src/org/eclipse/cdt/cmake/core/ICMakeToolChainManager.java)/**
 * Manages toolchain files for CMake.
 *
 * @noimplement
 * @noextend
 */
CMakePropertyPage (/build/org.eclipse.cdt.cmake.ui/src/org/eclipse/cdt/cmake/ui/properties/CMakePropertyPage.java)/**
 * Property page for CMake projects. The only thing we have here at the moment is a button
 * to launch the CMake GUI configurator (cmake-qt-gui).
 *
 * We assume that the build directory is in project/build/configname, which is where
 * the CMake project wizard puts it. We also assume that "cmake-gui" is in the user's
 * PATH.
 */
Activator (/build/org.eclipse.cdt.core.autotools.ui/src/org/eclipse/cdt/core/autotools/ui/internal/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
IMakeBuilderInfo (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/IMakeBuilderInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMakeCommonBuildInfo (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/IMakeCommonBuildInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMakeTarget (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/IMakeTarget.java)/**
 * {@code IMakeTarget} represents a make target item in Make Targets View.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMakeTargetManager (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/IMakeTargetManager.java)/**
 * Interface for {@link MakeTargetManager} handling make target items in Make Targets View.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
MakeBuilder (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeBuilder.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeBuilderUtil (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeBuilderUtil.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeCorePlugin (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeCorePlugin.java)/**
 * The main plugin class to be used in the desktop.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IConditional (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IConditional.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IDeleteOnErrorRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IDeleteOnErrorRule.java)/**
 * .DELETE_ON_ERROR'
 *  If `.DELETE_ON_ERROR' is mentioned as a target anywhere in the
 *  makefile, then `make' will delete the target of a rule if it has
 *  changed and its commands exit with a nonzero exit status, just as
 *  it does when it receives a signal.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IExportAllVariablesRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IExportAllVariablesRule.java)/**
 * .EXPORT_ALL_VARIABLES
 * Simply by being mentioned as a target, this tells `make' to export
 * all variables to child processes by default.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGNUMakefile (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IGNUMakefile.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IInclude (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IInclude.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIntermediateRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IIntermediateRule.java)/**
 * .INTERMEDIATE
 *   The targets which `.INTERMEDIATE' depends on are treated as intermediate files.
 *   `.INTERMEDIATE' with no prerequisites has no effect.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ILowResolutionTimeRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/ILowResolutionTimeRule.java)/**
 * .LOW_RESOLUTION_TIME
 *  If you specify prerequisites for `.LOW_RESOLUTION_TIME', `make'
 *  assumes that these files are created by commands that generate low
 *  resolution time stamps.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
INotParallelRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/INotParallelRule.java)/**
 * .NOTPARALLEL
 *  If `.NOTPARALLEL' is mentioned as a target, then this invocation of
 *  `make' will be run serially, even if the `-j' option is given.
 *  Any recursively invoked `make' command will still be run in
 *  parallel (unless its makefile contains this target).  Any
 *  prerequisites on this target are ignored.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPhonyRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IPhonyRule.java)/**
 * .PHONY
 *     The prerequisites of the special target `.PHONY' are considered to be phony targets.
 *     When it is time to consider such a target, `make' will run its commands unconditionally, regardless of
 *     whether a file with that name exists or what its last-modification time is.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISecondaryRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/ISecondaryRule.java)/**
 * .SECONDARY
 *  The targets which `.SECONDARY' depends on are treated as
 *  intermediate files, except that they are never automatically deleted.
 *
 *  `.SECONDARY' with no prerequisites causes all targets to be treated
 *  as secondary (i.e., no target is removed because it is considered intermediate).
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITerminal (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/ITerminal.java)/**
 * ITerminal finish a block.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IUnExport (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IUnExport.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IVariableDefinition (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IVariableDefinition.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IVPath (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/gnu/IVPath.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IArchiveTarget (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IArchiveTarget.java)/**
 * IArchiveTarget
 * Archive files, are files maintained by the program "ar".
 * They contain objects, the members of the Archive.
 * For example:
 *      foolib(hack.o) : hack.o
 *            ar cr foolib hack.o
 *  ArchiveTarget(member)  -- foolib(hack.o);
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IAutomaticVariable (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IAutomaticVariable.java)/**
 * Interface fore built-in automatic variables.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 7.3
 */
IBadDirective (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IBadDirective.java)/**
 * Represent an error in the makefile syntax
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuiltinFunction (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IBuiltinFunction.java)/**
 * Interface fore built-in internal functions.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 7.3
 */
ICommand (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/ICommand.java)/**
 * ICommand
 * Commands are associated with a rule and executed by
 * the make program when building a target.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IComment (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IComment.java)/**
 * Comments start with '#' and until the end of the line.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IDefaultRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IDefaultRule.java)/**
 * .DEFAULT
 * If the makefile uses this special target, the application shall ensure that it is
 * specified with commands, but without prerequisites.
 * The commands shall be used by make if there are no other rules available to build a target.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IDirective (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IDirective.java)/**
 * A Makefile can contain rules, macro definitons and comments.
 * They are call directives.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IEmptyLine (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IEmptyLine.java)/**
 * IEmptyLine
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIgnoreRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IIgnoreRule.java)/**
 * .IGNORE
 * Prerequisites of this special target are targets themselves; this shall cause errors
 * from commands associated with them to be ignored in the same manner as specified by the -i option.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IInferenceRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IInferenceRule.java)/**
 * IInferenceRules are formated as follows:
 * target:
 * <tab>command
 * [<tab>command]
 *
 * The target is of the form .s2 or .s1.s2
 * There are no prerequisites.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMacroDefinition (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IMacroDefinition.java)/**
 * IMacroDefinitions are in the form:
 * string1 = [string2]
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMakefile (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IMakefile.java)/**
 * IMakefile:
 *
 * Makefile : ( directive ) *
 * directive :   rule | macro_definition | comments | empty
 * rule :  inference_rule | target_rule | special_rule
 * inference_rule : target ':' [ ';' command ] <nl>
 *		 [ ( command ) * ]
 * target_rule : [ ( target ) + ] ':' [ ( prerequisite ) * ] [ ';' command ] <nl>
 *               [ ( command ) *  ]
 * macro_definition : string '=' ( string )*
 * comments : ('#' ( string ) <nl>) *
 * empty : <nl>
 * command : <tab> prefix_command string <nl>
 * target : string
 * prefix_command : '-' | '@' | '+'
 * internal_macro :  "$<" | "$*" | "$@" | "$?" | "$%"
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMakefileReaderProvider (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IMakefileReaderProvider.java)/**
 * Provide an abstraction to loading the contents of a makefile
 * @author eswartz
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMakefileValidator (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IMakefileValidator.java)/**
 * @author alain
 *
 * To change the template for this generated type comment go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IParent (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IParent.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPosixRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IPosixRule.java)/**
 * .POSIX
 * The application shall ensure that this special target is specified without
 * prerequisites or commands.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPreciousRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IPreciousRule.java)/**
 * .PRECIOUS
 * Prerequisites of this special target shall not be removed if make recieves an
 * asynchronous events.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/IRule.java)/**
 * There are several kinds of rules: Inference rules, target rules
 * Some make provides special rules for example:
 * .DEFAULT, .IGNORE etc ...
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISccsGetRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/ISccsGetRule.java)/**
 * .SCCS_GET
 * The application shall ensure that this special target is specified without prerequesites.
 * The commands specified with this target shall replace the default
 * commands associated with this special target.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISilentRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/ISilentRule.java)/**
 * .SILENT
 * Prerequisites of this special target are targets themselves; this shall case
 * commands associated with them not to be written to the standard output before
 * they are executed.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISpecialRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/ISpecialRule.java)/**
 * Target rule that have special meaning for Make.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISuffixesRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/ISuffixesRule.java)/**
 * .SUFFIXES
 * Prerequesites of .SUFFIXES shall be appended to the list of known suffixes and are
 * used in conjunction with the inference rules.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITarget (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/ITarget.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITargetRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/makefile/ITargetRule.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
MakefileBuildConfigurationProvider (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakefileBuildConfigurationProvider.java)/**
 * @since 7.4
 */
MakefileProjectGenerator (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakefileProjectGenerator.java)/**
 * Generator for Makefile projects.
 *
 * @since 7.4
 */
MakeProjectNature (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeProjectNature.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeScannerInfo (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeScannerInfo.java)/**
 * @deprecated
 * @author DInglis
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeScannerProvider (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeScannerProvider.java)/**
 * @deprecated @author DInglis
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeTargetEvent (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeTargetEvent.java)/**
 * This class represents an event sent when the set of Make Target items
 * in Make Targets View has changed.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Messages (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/messages/Messages.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DiscoveredScannerInfo (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/DiscoveredScannerInfo.java)/**
 * Discovered portion of scanner configuration
 * @deprecated as of CDT 4.0.
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DiscoveredScannerInfoProvider (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/DiscoveredScannerInfoProvider.java)/**
 * Provider of both user specified and discovered scanner info
 *
 * @deprecated as of CDT 4.0.
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IDiscoveredPathManager (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/IDiscoveredPathManager.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IExternalScannerInfoProvider (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/IExternalScannerInfoProvider.java)/**
 * Interface for providers of C/C++ scanner info
 *
 * @author vhirsl
 */
IScannerConfigBuilderInfo (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/IScannerConfigBuilderInfo.java)/**
 * Settings for ScannerConfigBuilder
 *
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IScannerConfigBuilderInfo2 (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/IScannerConfigBuilderInfo2.java)/**
 * New interface to replace IScannerConfigBuildInfo
 * Persisted in .cdtproject file
 *
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IScannerConfigBuilderInfo2Set (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/IScannerConfigBuilderInfo2Set.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IScannerInfoCollector (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/IScannerInfoCollector.java)/**
 * Interface for scanner info collector.
 * Used by scanner info console parsers.
 * Eclipse independent.
 *
 * @author vhirsl
 */
IScannerInfoCollector2 (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/IScannerInfoCollector2.java)/**
 * New scanner info collector interface - Eclipse dependent
 *
 * @author vhirsl
 */
IScannerInfoCollectorCleaner (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/IScannerInfoCollectorCleaner.java)/**
 * Utility functions some collectors may need
 *
 * @author vhirsl
 */
IScannerInfoConsoleParser (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/IScannerInfoConsoleParser.java)/**
 * Parses a line of command output looking for scanner info entries.
 *
 * @author vhirsl
 */
PathInfo (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/PathInfo.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ScannerConfigBuilder (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/ScannerConfigBuilder.java)/**
 * Runs after standard make builder.
 * Consolidates discovered scanner configuration and updates project's scanner configuration.
 *
 * @deprecated as of CDT 4.0. Used by legacy CDT 3.X projects.
 * Replaced by ScannerConfigBuilder in org.eclipse.cdt.managedbuilder.core.
 *
 * @see IncrementalProjectBuilder
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ScannerConfigNature (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/ScannerConfigNature.java)/**
 * @deprecated as of CDT 4.0. Used by legacy CDT 3.X projects.
 * Replaced by ScannerConfigNature in org.eclipse.cdt.managedbuilder.core.
 *
 * @see IProjectNature
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ScannerConfigScope (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/ScannerConfigScope.java)/**
 * Profile scope enum
 *
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ScannerInfoTypes (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/scannerconfig/ScannerInfoTypes.java)/**
 * Typesafe enum pattern
 *
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ListenerList (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/ListenerList.java)/**
 * This class is used to maintain a list of listeners, and
 * is used in the implementations of several classes within JFace
 * which allow you to register listeners of various kinds.
 * It is a fairly lightweight object, occupying minimal space when
 * no listeners are registered.
 * <p>
 * Note that the <code>add</code> method checks for and eliminates
 * duplicates based on identity (not equality).  Likewise, the
 * <code>remove</code> method compares based on identity.
 * </p>
 * <p>
 * Use the <code>getListeners</code> method when notifying listeners.
 * Note that no garbage is created if no listeners are registered.
 * The recommended code sequence for notifying all registered listeners
 * of say, <code>FooListener.eventHappened</code>, is:
 * <pre>
 * Object[] listeners = myListenerList.getListeners();
 * for (int i = 0; i < listeners.length; ++i) {
 *    ((FooListener) listeners[i]).eventHappened(event);
 * }
 * </pre>
 * </p>
 */
ArchiveTarget (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/ArchiveTarget.java)/**
 * IArchiveTarget
 */
Command (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/Command.java)/**
 * Makefile : ( statement ) *
 * statement : command | ..
 * command : <tab> prefix_command string <nl>
 * prefix_command : '-' | '@' | '+'
 */
DefaultRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/DefaultRule.java)/**
 * .DEFAULT
 * If the makefile uses this special target, the application shall ensure that it is
 * specified with commands, but without prerequisites.
 */
AutomaticVariable (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/AutomaticVariable.java)/**
 * Represents an automatic variable. Automatic variables are implicit and
 * computed for each rule that is applied.
 *
 * @author Sebastian Bauer <mail@sebastianbauer.info>
 * @see "http://www.gnu.org/software/make/manual/make.html#Automatic-Variables"
 */
BuiltinFunction (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/BuiltinFunction.java)/**
 * Represents GNUmakefile built-in internal functions.
 */
DeleteOnErrorRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/DeleteOnErrorRule.java)/**
 * .DELETE_ON_ERROR
 *  If `.DELETE_ON_ERROR' is mentioned as a target anywhere in the
 *  makefile, then `make' will delete the target of a rule if it has
 *  changed and its commands exit with a nonzero exit status, just as
 *  it does when it receives a signal.
 */
ExportAllVariablesRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/ExportAllVariablesRule.java)/**
 * .EXPORT_ALL_VARIABLES
 *  Simply by being mentioned as a target, this tells `make' to export
 *  all variables to child processes by default.
 */
GNUMakefileUtil (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/GNUMakefileUtil.java)/**
 * GNUMakefile
 */
GNUTargetRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/GNUTargetRule.java)/**
 */
IntermediateRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/IntermediateRule.java)/**
 * .INTERMEDIATE
 *   The targets which `.INTERMEDIATE' depends on are treated as intermediate files.
 *   `.INTERMEDIATE' with no prerequisites has no effect.
 */
LowResolutionTimeRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/LowResolutionTimeRule.java)/**
 * .LOW_RESOLUTION_TIME'
 *  If you specify prerequisites for `.LOW_RESOLUTION_TIME', `make'
 *  assumes that these files are created by commands that generate low
 *  resolution time stamps.
 */
NotParallelRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/NotParallelRule.java)/**
 * .NOTPARALLEL
 *  If `.NOTPARALLEL' is mentioned as a target, then this invocation of
 *  `make' will be run serially, even if the `-j' option is given.
 *  Any recursively invoked `make' command will still be run in
 *  parallel (unless its makefile contains this target).  Any
 *  prerequisites on this target are ignored.
 */
PhonyRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/PhonyRule.java)/**
 * .PHONY
 *     The prerequisites of the special target `.PHONY' are considered to be phony targets.
 *     When it is time to consider such a target, `make' will run its commands unconditionally, regardless of
 *     whether a file with that name exists or what its last-modification time is.
 */
SecondaryRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/SecondaryRule.java)/**
 * .SECONDARY
 *  The targets which `.SECONDARY' depends on are treated as
 *  intermediate files, except that they are never automatically deleted.
 *
 *  `.SECONDARY' with no prerequisites causes all targets to be treated
 *  as secondary (i.e., no target is removed because it is considered intermediate).
 */
StaticTargetRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/StaticTargetRule.java)/**
 *   Here is the syntax of a static pattern rule:
 *
 *    TARGETS ...: TARGET-PATTERN: DEP-PATTERNS ...
 *            COMMANDS
 *            ...
 */
TargetVariable (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/TargetVariable.java)/**
 *   Here is the syntax of a static pattern rule:
 *
 *    TARGETS ...: VARIABLE-ASSIGNMENT
 *    TARGETS ...: override VARIABLE-ASSIGNMENT
 */
VariableDefinition (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/gnu/VariableDefinition.java)/**
 */
IgnoreRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/IgnoreRule.java)/**
 * .IGNORE
 * Prerequistes of this special target are targets themselves; this shall cause errors
 * from commands associated with them to be ignored in the same manner as
 * specified by the -i option.
 */
MacroDefinition (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/MacroDefinition.java)/**
 */
MakefileReader (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/MakefileReader.java)/**
 */
PosixMakefileUtil (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/posix/PosixMakefileUtil.java)/**
 */
PosixRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/PosixRule.java)/**
 * .POSIX
 * The appliation shall ensure that this special target is specified without
 * prerequisites or commands.
 */
PreciousRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/PreciousRule.java)/**
 * .PRECIOUS
 * Prerequisites of this special target shall not be removed if make recieves an
 * asynchronous events.
 */
SccsGetRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/SccsGetRule.java)/**
 * .SCCS_GET
 * The application shall ensure that this special target is specified without
 * prerequesites.
 * The commands specifeied with this target shall replace the default
 * commands associated with this special target.
 */
SilentRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/SilentRule.java)/**
 * .SILENT
 * Prerequisties of this special target are targets themselves; this shall cause
 * commands associated with them not to be written to the standard output before
 * they are executed.
 */
SpecialRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/SpecialRule.java)/**
 * Targets that have special meaning for Make.
 */
SuffixesRule (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/SuffixesRule.java)/**
 * .SUFFIXES
 * Prerequesites of .SUFFIXES shall be appended tothe list of known suffixes and are
 * used inconjucntion with the inference rules.
 *
 */
Util (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/makefile/Util.java)/**
 * Utility methods.
 */
MakeProject (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/MakeProject.java)/**
 * @deprecated This class is obsolete but it is there just in case it might be used with old style projects.
 */
DiscoveredScannerInfoStore (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/DiscoveredScannerInfoStore.java)/**
 * Discovered scanner info persistance store
 *
 * @author vhirsl
 */
AbstractGCCBOPConsoleParser (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/AbstractGCCBOPConsoleParser.java)/**
 * Common stuff for all GNU build output parsers
 *
 * @author vhirsl
 */
AbstractGCCBOPConsoleParserUtility (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/AbstractGCCBOPConsoleParserUtility.java)/**
 * Common utilities for GCC build output console parsers
 *
 * @author vhirsl
 */
GCCPerFileBOPConsoleParser (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCPerFileBOPConsoleParser.java)/**
 * GCC per file build output parser
 *
 * @author vhirsl
 */
GCCPerFileBOPConsoleParserUtility (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCPerFileBOPConsoleParserUtility.java)/**
 * TODO Provide description
 *
 * @author vhirsl
 */
GCCPerFileSIPConsoleParser (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCPerFileSIPConsoleParser.java)/**
 * Console parser for generated makefile output
 *
 * @author vhirsl
 */
GCCScannerConfigUtil (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCScannerConfigUtil.java)/**
 * GCC related utility class
 *
 * @author vhirsl
 */
GCCScannerInfoConsoleParser (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCScannerInfoConsoleParser.java)/**
 * Parses gcc and g++ output for -I and -D parameters.
 *
 * @author vhirsl
 */
GCCSpecsConsoleParser (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCSpecsConsoleParser.java)/**
 * Parses output of gcc -c -v specs.c or
 *                  g++ -c -v specs.cpp
 * command
 *
 * @author vhirsl
 */
ScannerInfoConsoleParserUtility (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/ScannerInfoConsoleParserUtility.java)/**
 * Implements error reporting mechanism and file/path translation mechanism
 * Taken from ErrorParserManager and modified.
 *
 * @author vhirsl
 */
BuildOutputReaderJob (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/jobs/BuildOutputReaderJob.java)/**
 * Build output reader job
 *
 * @author vhirsl
 */
SCJobsUtil (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/jobs/SCJobsUtil.java)/**
 * Utility class for build and job related functionality
 *
 * @author vhirsl
 */
Store (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/ScannerConfigInfoFactory.java)/**
	 *
	 * @author vhirsl
	 */
ScannerConfigInfoFactory (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/ScannerConfigInfoFactory.java)/**
 * Creates a ScannerConfigBuilderInfo variant
 * @author vhirsl
 */
ScannerConfigUtil (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/ScannerConfigUtil.java)/**
 * Utility class that handles some Scanner Config specifig collection conversions
 *
 * @author vhirsl
 */
ScannerInfoConsoleParserFactory (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/ScannerInfoConsoleParserFactory.java)/**
 * A factory that creates a ConsoleOutputStreamSniffer,
 * ScannerInfoConsoleParser and optionally a ScannerInfoConsoleParserUtility.
 *
 * @author vhirsl
 */
CCommandDSC (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CCommandDSC.java)/**
 * Class that represents a compiler command and related scanner configuration
 *
 * @author vhirsl
 */
CygpathTranslator (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CygpathTranslator.java)/**
 * Use binary parser's 'cygpath' command to translate cygpaths to absolute paths.
 * Note that this class does not support build configurations.
 *
 * @author vhirsl
 */
KVStringPair (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/KVStringPair.java)/**
 * Key - Value String Pair
 *
 * @author vhirsl
 */
LogWriter (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/LogWriter.java)/**
 * Log writer utility
 *
 * @author vhirsl
 */
SCDOptionsEnum (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/SCDOptionsEnum.java)/**
 * Enumeration class for scanner configuration affecting command line options
 *
 * @author vhirsl
 */
SymbolEntry (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/SymbolEntry.java)/**
 * Represents a symbol definition with possible multiple values
 * example:
 * 		LOG_LEVEL
 * 		LOG_LEVEL = 2
 * 		LOG_LEVEL = LOG_BASE + 1
 * @author vhirsl
 */
TraceUtil (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/TraceUtil.java)/**
 * Tracebility related utility functions
 *
 * @author vhirsl
 */
DefaultRunSIProvider (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/DefaultRunSIProvider.java)/**
 * New default external scanner info provider of type 'run'
 *
 * @author vhirsl
 */
DefaultSIFileReader (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/DefaultSIFileReader.java)/**
 * New default external scanner info provider of type 'open'
 *
 * @author vhirsl
 */
GCCSpecsRunSIProvider (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/GCCSpecsRunSIProvider.java)/**
 * Runs a command to retrieve compiler intrinsic scanner info from 'specs' file.
 *
 * @author vhirsl
 */
PerFileDiscoveredPathInfo (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/PerFileSICollector.java)/**
	 * Per file DPI object
	 *
	 * @author vhirsl
	 */
PerFileSICollector (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/PerFileSICollector.java)/**
 * Per file scanner info collector
 *
 * @author vhirsl
 */
PerProjectSICollector (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/PerProjectSICollector.java)/**
 * New per project scanner info collector
 *
 * @since 3.0
 * @author vhirsl
 */
BuildProperty (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigInfoFactory2.java)/**
	 * Build properties stored in .cproject file
	 *
	 * Responsible for both load and store.  Doesn't store profile settings if they're identical to the default.
	 */
Preference (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigInfoFactory2.java)/**
	 * Preferences
	 *
	 * @author vhirsl
	 */
ScannerConfigInfoFactory2 (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigInfoFactory2.java)/**
 * New ScannerConfigInfoFactory
 *
 * @author vhirsl
 */
ScannerInfoCollector (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java)/**
	 * scannerInfoCollector element
	 *
	 * @author vhirsl
	 */
ScannerInfoConsoleParser (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java)/**
	 * scannerInfoConsoleParser element
	 *
	 * @author vhirsl
	 */
Action (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java)/**
	 * tag interface, a placeholder for either run or open element
	 *
	 * @author vhirsl
	 */
Run (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java)/**
	 * run element
	 *
	 * @author vhirsl
	 */
Open (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java)/**
	 * open element
	 *
	 * @author vhirsl
	 */
BuildOutputProvider (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java)/**
	 * buildOutputProvider element
	 *
	 * @author vhirsl
	 */
ScannerInfoProvider (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java)/**
	 * scannerInfoProvider element
	 *
	 * @author vhirsl
	 */
ScannerConfigProfile (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java)/**
 * SCD Profile extension point object model
 *
 * @author vhirsl
 */
ScannerConfigProfileManager (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfileManager.java)/**
 * Manages profiles per project
 *
 * @author vhirsl
 */
SCDMakefileGenerator (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/SCDMakefileGenerator.java)/**
 * A 'provider' that will generate a special makefile to generate scanner config
 *
 * @author vhirsl
 */
SCMarkerGenerator (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/SCMarkerGenerator.java)/**
 * Scanner config discovery related marker generator
 *
 * @author vhirsl
 */
SCProfileInstance (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/SCProfileInstance.java)/**
 * Instantiated scanner config profile
 *
 * @author vhirsl
 */
AddMakeTarget (/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/templateengine/AddMakeTarget.java)/**
 * A step that can be used by the New Project template.xml file to add make targets to
 * newly created C/C++ projects.  E.g.,
 * <pre>
 *  &lt;process type="org.eclipse.cdt.make.core.AddMakeTarget">
 *      &lt;simple name="projectName" value="$(projectName)"/>
 *      &lt;simple name="targetName" value="build-debug"/>
 *      &lt;simple name="makeTarget" value="debug"/>
 *  &lt;/process>
 * </pre>
 * The rule's parameters are used to populate fields in the "Create|Modify Make Target"
 * dialog box (which is opened from the Make Target view).  The two mandatory parameters
 * are projectName and targetName.  There are also three optional parameters:
 * <p>
 * <u>makeTarget</u>: The name of the make target to run, defaults to targetName<br>
 * <u>buildCommand</u>: The build command to execute, e.g., "make"<br>
 * <u>buildArguments</u>: The arguments that should be passed to the build command, e.g., "-s"<br>
 */
MakeTestsPlugin (/build/org.eclipse.cdt.make.core.tests/src/org/eclipse/cdt/make/core/tests/MakeTestsPlugin.java)/**
 * The main plugin class to be used in the desktop.
 */
BaseBOPConsoleParserTests (/build/org.eclipse.cdt.make.core.tests/src/org/eclipse/cdt/make/scannerdiscovery/BaseBOPConsoleParserTests.java)/**
 * Scanner configuration console parser tests
 *
 * @author vhirsl
 */
GCCScannerInfoConsoleParserTests (/build/org.eclipse.cdt.make.core.tests/src/org/eclipse/cdt/make/scannerdiscovery/GCCScannerInfoConsoleParserTests.java)/**
 * Scanner configuration console parser tests
 *
 * @author vhirsl
 */
ScannerConfigDiscoveryTests (/build/org.eclipse.cdt.make.core.tests/src/org/eclipse/cdt/make/scannerdiscovery/ScannerConfigDiscoveryTests.java)/**
 * Scanner configuration discovery tests
 *
 * @author vhirsl
 */
ScannerConfigProfileTests (/build/org.eclipse.cdt.make.core.tests/src/org/eclipse/cdt/make/scannerdiscovery/ScannerConfigProfileTests.java)/**
 * This class tests ScannerConfigProfileManager
 */
FoldingActionGroup (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/actions/FoldingActionGroup.java)/**
 * Groups the CDT folding actions.
 */
FoldingMessages (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/actions/FoldingMessages.java)/**
 * Class that gives access to the folding messages resource bundle.
 */
MakefileContentViewerCreator (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/compare/MakefileContentViewerCreator.java)/**
 * Required when creating a MakefileMergeViewer from the plugin.xml file.
 */
MakefileMergeViewer (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/compare/MakefileMergeViewer.java)/**
 * A merge viewer for Makefiles.
 */
DialogSettingsHelper (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/DialogSettingsHelper.java)/**
 * Helper class for dealing with setting and restoring dialog settings.
 *
 * @deprecated as of CDT 4.0. This tab used in preference pages
 * for 3.X style projects.
 */
AbstractContainerAreaDropAdapter (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/AbstractContainerAreaDropAdapter.java)/**
 * This abstract class provides a frame for {@link DropTargetListener} able to accept a
 * drop into a container area. A container area includes the container itself and
 * the items directly belonging to the container. A drop into the container area is
 * treated as a drop on the container itself. Also, some flexibility for adjusting
 * drop operation is provided.
 *
 * @see org.eclipse.swt.dnd.DropTargetListener
 *
 */
AbstractSelectionDragAdapter (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/AbstractSelectionDragAdapter.java)/**
 * This abstract class provides a convenience frame for DragSourceListener to support
 * dragging of selected items in a view.
 * <p>
 * There is similar implementation in plugin {@code org.eclipse.cdt.ui} -
 * {@code org.eclipse.cdt.internal.ui.dnd.BasicSelectionTransferDragAdapter}.
 *
 * @see org.eclipse.swt.dnd.DropTargetListener
 *
 */
FileTransferDropTargetListener (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/FileTransferDropTargetListener.java)/**
 * {@code FileTransferDropTargetListener} handles dropping of files to Make
 * Target View. {@link FileTransfer} is used as the transfer agent. The files
 * passed are treated as make targets.
 *
 * @see AbstractContainerAreaDropAdapter
 * @see org.eclipse.swt.dnd.DropTargetListener
 */
LocalTransferDragSourceListener (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/LocalTransferDragSourceListener.java)/**
 * {@code LocalTransferDragSourceListener} supports dragging of selected objects from
 * Make Target View. {@link LocalSelectionTransfer} is used as a transfer agent.
 *
 * @see AbstractSelectionDragAdapter
 * @see org.eclipse.swt.dnd.DragSourceListener
 */
LocalTransferDropTargetListener (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/LocalTransferDropTargetListener.java)/**
 * {@code LocalTransferDropTargetListener} supports dropping of dragged selection to
 * Make Target View. {@link LocalSelectionTransfer} is used as a transfer agent.
 *
 * @see AbstractContainerAreaDropAdapter
 * @see org.eclipse.swt.dnd.DropTargetListener
 */
MakeTargetDndUtil (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/MakeTargetDndUtil.java)/**
 * A collection of various functions for Make Target View drag and drop support.
 */
MakeTargetTransfer (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/MakeTargetTransfer.java)/**
 * This class can be used to transfer an instance of
 * {@link MakeTargetTransferData} between two parts in a workbench in a drag and
 * drop or clipboard copy/paste operation.
 *
 * @see ByteArrayTransfer
 * @see Transfer
 * @see org.eclipse.swt.dnd.DropTarget
 * @see org.eclipse.swt.dnd.DragSource
 */
MakeTargetTransferData (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/MakeTargetTransferData.java)/**
 * {@code MakeTargetTransferData} serves for transferring data during a drag and
 * drop operation between different plug-ins. This object contains an extension
 * identifier and a block of bytes. When the drop occurs, the data is
 * interpreted by an action defined in the specified extension.
 * <p>
 * Clients using MakeTargetTransfer should create an instance to contain the
 * drop data.
 * </p>
 *
 * @see IMakeTarget
 */
MakeTargetTransferDragSourceListener (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/MakeTargetTransferDragSourceListener.java)/**
 * {@code MakeTargetTransferDragSourceListener} supports dragging of selected
 * make targets from Make Target View. {@link TextTransfer} is used as the
 * transfer agent and provides for drag/drop and copy/paste between different
 * eclipse sessions.
 *
 * @see AbstractSelectionDragAdapter
 * @see org.eclipse.swt.dnd.DragSourceListener
 */
MakeTargetTransferDropTargetListener (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/MakeTargetTransferDropTargetListener.java)/**
 * {@code MakeTargetTransferDropTargetListener} handles drop of make targets
 * onto Make Target View. {@link MakeTargetTransfer} is used as the transfer agent and
 * provides for drag/drop and copy/paste between different eclipse sessions.
 *
 * @see AbstractContainerAreaDropAdapter
 * @see org.eclipse.swt.dnd.DropTargetListener
 */
TextTransferDragSourceListener (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/TextTransferDragSourceListener.java)/**
 * {@code TextTransferDragSourceListener} supports dragging of selected make
 * targets from Make Target View. The targets converted to make commands in
 * order to be presented as plain text. Each command will be one line of text.
 * {@link TextTransfer} is used as the transfer agent.
 *
 * @see AbstractSelectionDragAdapter
 * @see org.eclipse.swt.dnd.DragSourceListener
 */
TextTransferDropTargetListener (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/dnd/TextTransferDropTargetListener.java)/**
 * {@code TextTransferDropTargetListener} handles dropping of selected text to
 * Make Target View. Each line of miltiline text passed is treated as separate
 * make target command. {@link TextTransfer} is used as the transfer agent.
 *
 * @see AbstractContainerAreaDropAdapter
 * @see org.eclipse.swt.dnd.DropTargetListener
 */
AddBuildTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/AddBuildTargetAction.java)/**
 */
IMakefileDocumentProvider (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/IMakefileDocumentProvider.java)/**
 */
IMakefileEditorActionDefinitionIds (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/IMakefileEditorActionDefinitionIds.java)/**
 * Custom definitions IDs extending ITextEditorActionDefinitionIds
 */
IReconcilingParticipant (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/IReconcilingParticipant.java)/**
 * IReconcilingParticipant
 * Interface of an object participating in reconciling.
 */
MakefileContentOutlinePage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/MakefileContentOutlinePage.java)/**
 * MakefileContentOutlinePage
 */
MakefileFileInfo (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/MakefileDocumentProvider.java)/**
	 * Remembers a IMakefile for each element.
	 */
MakefileDocumentSetupParticipant (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/MakefileDocumentSetupParticipant.java)/**
 * MakefileDocumentSetupParticipant
 * The document setup participant for Makefile.
 */
MakefileEditorActionContributor (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/MakefileEditorActionContributor.java)/**
 */
MakefileEditorTogglePresentationAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/MakefileEditorTogglePresentationAction.java)/**
 */
SingleTokenScanner (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/MakefileSourceConfiguration.java)/**
	 * Single token scanner.
	 */
MakefileStorageDocumentProvider (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/MakefileStorageDocumentProvider.java)/**
 * MakefileStorageDocumentProvider
 */
MakefileToggleCommentAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/MakefileToggleCommentAction.java)/**
 * An action which toggles comment prefixes on the selected lines.
 */
NotifyingReconciler (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/NotifyingReconciler.java)/**
 * NotifyingReconciler
 */
OpenIncludeAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/OpenIncludeAction.java)/**
 * OpenIncludeAction
 */
ProjectionMakefileUpdater (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/ProjectionMakefileUpdater.java)/**
 * ProjectionMakefileUpdater
 */
WorkingCopyManager (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/editor/WorkingCopyManager.java)/**
 * This working copy manager works together with a given compilation unit document provider and
 * additionally offers to "overwrite" the working copy provided by this document provider.
 */
ErrorParserBlock (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/ErrorParserBlock.java)/**
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 */
IMakeUIPreferenceConstants (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/IMakeUIPreferenceConstants.java)/**
 * @deprecated as of CDT 4.0. This interface used in preference pages
 * for 3.X style projects.
 */
EnvironmentVariableContentProvider (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/MakeEnvironmentBlock.java)/**
	 * Content provider for the environment table
	 */
EnvironmentVariableLabelProvider (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/MakeEnvironmentBlock.java)/**
	 * Label provider for the environment table
	 */
MakeEnvironmentBlock (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/MakeEnvironmentBlock.java)/**
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeProjectOptionBlock (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/MakeProjectOptionBlock.java)/**
 * @deprecated as of CDT 4.0. This option block was used to set preferences/properties
 * for 3.X style projects.
 */
MakeUIImages (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/MakeUIImages.java)/**
 * A repository for common images used by org.eclipse.cdt.make.ui plugin.
 * <p>
 * This class provides {@link Image} and {@link ImageDescriptor}
 * for each named image in the interface.  All {@code Image} objects provided
 * by this class are managed by this class and must never be disposed
 * by other clients.
 * </p>
 * <p>
 * For common CDT images see {@link CDTSharedImages}.
 * <p>
 * For common platform images see {@link org.eclipse.ui.ISharedImages}
 * ({@code org.eclipse.ui.PlatformUI.getWorkbench().getSharedImages()})
 * <br>
 * and {@link org.eclipse.ui.ide.IDE.SharedImages}.
 * </p>
 * <p>
 * Note that org.eclipse.cdt.ui.tests.misc.MakeUIImagesTest will verify
 * existence of the images defined here.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeUIPlugin (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/MakeUIPlugin.java)/**
 * The main plugin class to be used in the desktop.
 */
MessageLine (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/MessageLine.java)/**
 * A message line. It distinguishs between "normal" messages and errors.
 * Setting an error message hides a currently displayed message until
 * <code>clearErrorMessage</code> is called.
 */
MultipleInputDialog (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/MultipleInputDialog.java)/**
 * @deprecated as of CDT 4.0. This class used in preference pages
 * for 3.X style projects.
 */
CheckboxTablePart (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/part/CheckboxTablePart.java)/**
 * @version 	1.0
 */
WizardCheckboxTablePart (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/part/WizardCheckboxTablePart.java)/**
 * @version 	1.0
 */
AbstractMakefileEditorPreferencePage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/AbstractMakefileEditorPreferencePage.java)/**
 * AbstraceMakeEditorPreferencePage
 */
BuildSettingsPreferencePage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/BuildSettingsPreferencePage.java)/**
 * Preference page for Build Settings.
 *
 */
ColorEditor (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/ColorEditor.java)/**
 * A "button" of a certain color determined by the color picker
 */
MakefileEditorPreferenceConstants (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/MakefileEditorPreferenceConstants.java)/**
 * MakefileEditorPreferenceConstants
 */
HighlightingColorListItem (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/MakefileEditorPreferencePage.java)/**
	 * Item in the highlighting color list.
	 *
	 * @since 3.0
	 */
ColorListLabelProvider (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/MakefileEditorPreferencePage.java)/**
	 * Color list label provider.
	 *
	 * @since 3.0
	 */
ColorListContentProvider (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/MakefileEditorPreferencePage.java)/**
	 * Color list content provider.
	 *
	 * @since 3.0
	 */
MakefileEditorPreferencePage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/MakefileEditorPreferencePage.java)/**
 * MakeEditorPreferencePage
 * The page for setting the editor options.
 */
MakefilePreferencesMessages (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/MakefilePreferencesMessages.java)/**
 * MakefilePreferencesMessages
 */
MakefileSettingsPreferencePage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/MakefileSettingsPreferencePage.java)/**
 * MakePreferencePage
 */
OverlayPreferenceStore (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/OverlayPreferenceStore.java)/**
 * An overlaying preference store.
 */
StatusInfo (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/preferences/StatusInfo.java)/**
 * A settable IStatus.
 * Can be an error, warning, info or ok. For error, info and warning states,
 * a message describes the problem.
 */
MakePropertyPage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/properties/MakePropertyPage.java)/**
 * @deprecated as of CDT 4.0. This property page was used to set properties
 * "C/C++ Make Project" for 3.X style projects.
 * This page lives dormant as of writing (CDT 7.0) but may get activated for
 * {@code org.eclipse.cdt.make.core.makeNature} project (3.X style).
 */
DiscoveredElement (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/scannerconfig/DiscoveredElement.java)/**
 * Similar to CPElement. Describes discovered paths and symbols available
 * through DiscoveredPathInfo instead of CPathEntry.
 *
 * @deprecated as of CDT 4.0. This class was used to set preferences/properties
 * for 3.X style projects.
 *
 * @author vhirsl
 */
DiscoveredElementImageDescriptor (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/scannerconfig/DiscoveredElementLabelProvider.java)/**
	 * ComositeImageDescriptor adds 'removed' image overlay to the DiscoveredElement
	 *
	 * @author vhirsl
	 */
DiscoveredElementLabelProvider (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/scannerconfig/DiscoveredElementLabelProvider.java)/**
 * Label provider for DiscoveredElement-s. DiscoveredElement can be active or removed.
 *
 * @deprecated as of CDT 4.0. This class was used to set preferences/properties
 * for 3.X style projects.
 *
 * @author vhirsl
 */
DiscoveredElementSorter (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/scannerconfig/DiscoveredElementSorter.java)/**
 * @deprecated as of CDT 4.0. This class was used to set preferences/properties
 * for 3.X style projects.
 *
 * @author vhirsl
 */
AbstractMakefileCodeScanner (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/text/makefile/AbstractMakefileCodeScanner.java)/**
 * AbstractMakefileEditorScanner
 */
AutomaticVariableReferenceRule (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/text/makefile/AutomaticVariableReferenceRule.java)/**
 * Rule used to highlight automatic variables in the editor.
 */
MakefileAnnotationHover (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/text/makefile/MakefileAnnotationHover.java)/**
 * MakefileAnnotationHover
 *
 */
Validator (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/text/makefile/MakefileCompletionProcessor.java)/**
	 * Simple content assist tip closer. The tip is valid in a range
	 * of 5 characters around its pop-up location.
	 */
MakefileCompletionProcessor (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/text/makefile/MakefileCompletionProcessor.java)/**
 * MakefileCompletionProcessor
 */
MakefileTextHover (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/internal/ui/text/makefile/MakefileTextHover.java)/**
 * MakefileTextHover
 *
 */
BuildLastTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/actions/BuildLastTargetAction.java)/**
 * Rebuild last target of selected resource or project.
 * Search is done non-recursively.
 * If no valid last target is found, show the build target dialog.
 *
 * @since 7.0
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuildLastTargetHandler (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/actions/BuildLastTargetHandler.java)/**
 * Handler for {@link org.eclipse.cdt.make.ui.actions.BuildLastTargetAction}
 *
 * @since 7.0
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuildTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/actions/BuildTargetAction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuildTargetHandler (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/actions/BuildTargetHandler.java)/**
 * Handler for {@link org.eclipse.cdt.make.ui.actions.BuildTargetAction}
 *
 * @since 7.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CreateTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/actions/CreateTargetAction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
UpdateMakeProjectAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/actions/UpdateMakeProjectAction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DiscoveryProfilePageConfiguration (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/AbstractDiscoveryOptionsBlock.java)/**
	 * Create a profile page only on request
	 *
	 * @author vhirsl
	 */
AbstractDiscoveryOptionsBlock (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/AbstractDiscoveryOptionsBlock.java)/**
 * Fremework for loading profile option pages
 *
 * @author vhirsl
 */
AbstractDiscoveryPage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/AbstractDiscoveryPage.java)/**
 * Abstract SCD profile page
 *
 * @author vhirsl
 */
BuildTargetDialog (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/BuildTargetDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DiscoveredContainerAdapter (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/DiscoveredPathContainerPage.java)/**
	 * @author vhirsl
	 */
CopyTextAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/DiscoveredPathContainerPage.java)/**
	 * Support for text copy/paste
	 *
	 * @author vhirsl
	 */
DiscoveredPathContainerPage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/DiscoveredPathContainerPage.java)/**
 * A dialog page to manage discovered scanner configuration
 *
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 *
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DiscoveryOptionsBlock (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/DiscoveryOptionsBlock.java)/**
 *  A dialog to set scanner config discovery options.
 *
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 *
 * @author vhirsl
 * @since 3.0
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
GCCPerFileSCDProfilePage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerFileSCDProfilePage.java)/**
 * SCD per project profile property/preference page
 *
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
GCCPerProjectSCDProfilePage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerProjectSCDProfilePage.java)/**
 * SCD per project profile property/preference page
 *
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
UpdateStatusLineListener (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/MakeTargetDialog.java)/**
	 * A Listener class to verify correctness of input and display an error message
	 */
MakeTargetDialog (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/MakeTargetDialog.java)/**
 * The class represents Create/Modify Make Target Dialog in Make Targets View.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MBSPerProjectSCDProfilePage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/MBSPerProjectSCDProfilePage.java)/**
 * SCD per project profile property/preference page
 *
 * @author vhirsl
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
SettingsBlock (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/SettingsBlock.java)/**
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IMakeHelpContextIds (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/IMakeHelpContextIds.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IWorkingCopyManager (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/IWorkingCopyManager.java)/**
 * Interface for accessing working copies of <code>IMakefile</code>
 * objects. The original  unit is only given indirectly by means
 * of an <code>IEditorInput</code>. The life cycle is as follows:
 * <ul>
 * <li> <code>connect</code> creates and remembers a working copy of the
 *    unit which is encoded in the given editor input</li>
 * <li> <code>getWorkingCopy</code> returns the working copy remembered on
 *   <code>connect</code></li>
 * <li> <code>disconnect</code> destroys the working copy remembered on
 *   <code>connect</code></li>
 * </ul>
 * <p>
 * This interface is not intended to be implemented by clients.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IWorkingCopyManagerExtension (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/IWorkingCopyManagerExtension.java)/**
 * Extension interface for <code>IWorkingCopyManager</code>.
 * @since 2.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
MakeContentProvider (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/MakeContentProvider.java)/**
 * Content provider for Make Targets view and for Make Targets dialog from
 * "Make Targets"->"Build..." in project context menu.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeLabelProvider (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/MakeLabelProvider.java)/**
 * Label provider for Make Targets view and for Make Targets dialog from
 * "Make Targets"->"Build..." in project context menu.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
TargetBuild (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/TargetBuild.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
TargetListViewerPart (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/TargetListViewerPart.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
TargetSourceContainer (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/TargetSourceContainer.java)/**
 * A class to represent source folders added to Make Targets View on top.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 *
 * @since 7.1
 */
AddTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/views/AddTargetAction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuildTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/views/BuildTargetAction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CopyTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/views/CopyTargetAction.java)/**
 * Action to copy make targets from Make Target View to clipboard.
 * {@link CopyTargetAction} can transfer targets as {@link IMakeTarget}s or
 * plain text.
 * <p>
 * {@link CopyTargetAction} and {@link PasteTargetAction} are able to transfer
 * targets inside Make Target View or between eclipse sessions.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DeleteTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/views/DeleteTargetAction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
EditTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/views/EditTargetAction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
FilterEmtpyFoldersAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/views/FilterEmtpyFoldersAction.java)/**
 * A filter to filter out empty folders (with no make targets or other folders)
 * in Make Targets view.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 *
 * @since 7.1
 */
MakeView (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/views/MakeView.java)/**
 * Implementation of Make Target View.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PasteTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/views/PasteTargetAction.java)/**
 * Action to paste make targets from clipboard to Make Target View.
 * {@link PasteTargetAction} can accept several kinds of clipboard transfers
 * including make targets, plain text or files .
 * <p>
 * {@link CopyTargetAction} and {@link PasteTargetAction} are able to transfer
 * targets inside Make Target View or between eclipse sessions.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
RebuildLastTargetAction (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/views/RebuildLastTargetAction.java)/**
 * Rebuild last target of selected resource or project.
 *
 * @since 7.0
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ConvertToMakeProjectWizard (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/wizards/ConvertToMakeProjectWizard.java)/**
 * This wizard provides a method by which the user can
 * add a C nature to a project that previously had no nature associated with it.
 *
 * This wizard was used for 3.X style projects. It is left here for compatibility
 * reasons only. The wizard is superseded by MBS Project Conversion Wizard,
 * class {@code org.eclipse.cdt.managedbuilder.ui.wizards.ConvertToMakeWizard}.
 *
 * @deprecated as of CDT 4.0.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ConvertToMakeProjectWizardPage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/wizards/ConvertToMakeProjectWizardPage.java)/**
 *
 * ConvertToStdMakeProjectWizardPage
 * Standard main page for a wizard that adds a C project Nature to a project with no nature associated with it.
 * This conversion is one way in that the project cannot be converted back (i.e have the nature removed).
 *
 * @author Judy N. Green
 * @since Aug 6, 2002
 *<p>
 * Example useage:
 * <pre>
 * mainPage = new ConvertToStdMakeProjectWizardPage("ConvertProjectPage");
 * mainPage.setTitle("Project Conversion");
 * mainPage.setDescription("Add C or C++ a Nature to a project.");
 * </pre>
 * </p>
 *
 * @deprecated as of CDT 4.0. This page was used for 3.X style projects.
 * It is left here for compatibility reasons only.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeProjectWizardOptionPage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/wizards/MakeProjectWizardOptionPage.java)/**
 * Standard main page for a wizard that is creates a project resource.
 * <p>
 * This page may be used by clients as-is; it may be also be subclassed to suit.
 * </p>
 * <p>
 * Example usage:
 * <pre>
 * mainPage = new CProjectWizardPage("basicCProjectPage");
 * mainPage.setTitle("Project");
 * mainPage.setDescription("Create a new project resource.");
 * </pre>
 * </p>
 *
 * @deprecated as of CDT 4.0. This option page was used for New Project Wizard
 * for 3.X style projects.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NewMakeCCProjectWizard (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/wizards/NewMakeCCProjectWizard.java)/**
 * This wizard was used for 3.X style projects. It is left here for compatibility
 * reasons only. The wizard is superseded by MBS C++ Project Wizard,
 * class {@link org.eclipse.cdt.ui.wizards.CCProjectWizard}.
 *
 * @deprecated as of CDT 4.0.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NewMakeCProjectWizard (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/wizards/NewMakeCProjectWizard.java)/**
 * This wizard was used for 3.X style projects. It is left here for compatibility
 * reasons only. The wizard is superseded by MBS C Project Wizard,
 * class {@link org.eclipse.cdt.ui.wizards.CProjectWizard}.
 *
 * @deprecated as of CDT 4.0.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NewMakeProjectWizard (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/wizards/NewMakeProjectWizard.java)/**
 * This abstract wizard was used for 3.X style projects. It is left here for compatibility
 * reasons only. The wizards are superseded by MBS C++ Project Wizards.
 *
 * @deprecated as of CDT 4.0.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
UpdateMakeProjectWizard (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/wizards/UpdateMakeProjectWizard.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
UpdateMakeProjectWizardPage (/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/wizards/UpdateMakeProjectWizardPage.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeUITestBase (/build/org.eclipse.cdt.make.ui.tests/src/org/eclipse/cdt/make/ui/tests/MakeUITestBase.java)/**
 * Base for unit testing of Make UI test suite.
 */
MakeUITestsPlugin (/build/org.eclipse.cdt.make.ui.tests/src/org/eclipse/cdt/make/ui/tests/MakeUITestsPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
ICfgScannerConfigBuilderInfo2Set (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/build/core/scannerconfig/ICfgScannerConfigBuilderInfo2Set.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ScannerConfigBuilder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/build/core/scannerconfig/ScannerConfigBuilder.java)/**
 * Runs after standard make builder.
 * Consolidates discovered scanner configuration and updates project's scanner configuration.
 *
 * @see IncrementalProjectBuilder
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ScannerConfigNature (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/build/core/scannerconfig/ScannerConfigNature.java)/**
 * @see IProjectNature
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CfgSCJobsUtil (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/build/internal/core/scannerconfig/jobs/CfgSCJobsUtil.java)/**
 * Utility class for build and job related functionality
 *
 * @author vhirsl
 */
BuildDescriptionManager (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildmodel/BuildDescriptionManager.java)/**
 *
 * This class represents the build description manager
 * The build description manager is the entry point
 * for all build description-related operations
 *
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IBuildCommand (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildmodel/IBuildCommand.java)/**
 *
 * This interface represents a command to be invoked for building the step
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildDescription (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildmodel/IBuildDescription.java)/**
 *
 * This Build representation holds the hierarchy of inter-related
 * build actions and resources
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildDescriptionFactory (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildmodel/IBuildDescriptionFactory.java)/**
 *
 * this interface represents the build description factory
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildIOType (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildmodel/IBuildIOType.java)/**
 *
 * This interface is used to combine a set of build resources
 * that are inputs or outputs for the given action
 * into one group
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildResource (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildmodel/IBuildResource.java)/**
 *
 * This interface represents the resource used in the build
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildStep (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildmodel/IBuildStep.java)/**
 *
 * This interface is used to represent the build action
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IStepVisitor (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildmodel/IStepVisitor.java)/**
 *
 * This interface is used for the build description visitor mechanism
 * to represent the visitor
 *
 * @see BuildDescriptionManager#accept(IStepVisitor, IBuildDescription, boolean)
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildProperties (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildproperties/IBuildProperties.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildProperty (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildproperties/IBuildProperty.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildPropertyManager (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildproperties/IBuildPropertyManager.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildPropertyType (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildproperties/IBuildPropertyType.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildPropertyValue (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildproperties/IBuildPropertyValue.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IOptionalBuildProperties (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildproperties/IOptionalBuildProperties.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 8.6
 */
IPropertyBase (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/buildproperties/IPropertyBase.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
AbstractBuildRunner (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/AbstractBuildRunner.java)/**
 * Interface implemented by toolchain integrators to perform the actual build.
 *
 * @author Doug Schaefer
 * @since 8.0
 */
BuildException (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/BuildException.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
BuildListComparator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/BuildListComparator.java)/**
 * This class is intended to compare MBS-specific classes
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
ExternalBuildRunner (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ExternalBuildRunner.java)/**
 * @author dschaefer
 * @since 8.0
 */
IAdditionalInput (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IAdditionalInput.java)/**
 * This interface represents an additionalInput instance in the managed build system.
 * This element is only present if the user or a tool integrator needs to define
 * additional inputs or dependencies to a tool.  An inputType element can have
 * multiple additionalInput children.
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuilder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IBuilder.java)/**
 * This class represents the utility that drives the build process
 * (typically, but not necessarily, a variant of "make").  It defines
 * the command needed to invoke the build utility in the command attribute.
 * Any special flags that need to be passed to the builder are defined
 * in the arguments attribute.  The builder can specify the error parser(s)
 * to be used to parse its output.  The builder also specifies a Java class
 * that generates the build file.
 *
 * @since 2.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildObject (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IBuildObject.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildObjectProperties (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IBuildObjectProperties.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildObjectPropertiesContainer (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IBuildObjectPropertiesContainer.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildPathResolver (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IBuildPathResolver.java)/**
 * This interface is to be implemented by the tool-integrator to provide some specific
 * logic for resolving the build path variable values to the build paths.
 * <br/><br/>
 * See extension point {@code org.eclipse.cdt.managedbuilder.core.buildDefinitions},
 * element {@code envVarBuildPath} attribute {@code buildPathResolver}.
 *
 * @since 3.0
 */
IBuildPropertiesRestriction (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IBuildPropertiesRestriction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IConfiguration (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IConfiguration.java)/**
 * A tool-integrator defines default configurations as children of the project type.
 * These provide a template for the configurations added to the user's project,
 * which are stored in the project's .cproject file.
 * <p>
 * The configuration contains one child of type tool-chain.  This describes how the
 * project's resources are transformed into the build artifact. The configuration can
 * contain one or more children of type resourceConfiguration.  These describe build
 * settings of individual resources that are different from the configuration as a whole.
 *
 * @since 2.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IConfigurationV2 (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IConfigurationV2.java)/**
 * This class represents a project configuration in the old (CDT 2.0)
 * managed build system model.
 * <p>
 * The configuration contains one or more children of type tool-reference.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @deprecated This class was deprecated in 2.1
 */
IEnvVarBuildPath (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IEnvVarBuildPath.java)/**
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFileInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IFileInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFolderInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IFolderInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IHoldsOptions (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IHoldsOptions.java)/**
 * Implements the functionality that is needed to hold options and option
 * categories. The functionality has been moved from ITool to here in CDT 3.0.
 * Backwards compatibility of interfaces has been maintained because ITool
 * extends IHoldOptions.
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IInputOrder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IInputOrder.java)/**
 * This interface represents an inputOrder instance in the managed build system.
 * This element is only present if the user or a tool integrator needs to define
 * the specific order of input files to a tool, or needs to exclude one or more
 * input files from being used by a tool.  An inputType element can have
 * multiple inputOrder children.
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IInputType (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IInputType.java)/**
 * This interface represents an inputType instance in the managed build system.
 * It describes one category of input files to a Tool.  A tool can have
 * multiple inputType children.
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IManagedBuildDefinitionsStartup (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IManagedBuildDefinitionsStartup.java)/**
 * Clients that need to augment configuration attributes may need to insure
 * that those modification are picked up when configruation elements are loaded.
 * Implementing this interface will insure that a client's plugin is loaded
 * before all available configurations are available to the first project that
 * is loaded in the workbench.
 *
 * An example of this use is when a client creates unique build configuration IDs,
 * derived from default configruations, and all existing projects need to know about
 * all possible build configurations at eclipse startup.
 */
IManagedBuildInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IManagedBuildInfo.java)/**
 *  There is a ManagedBuildInfo per CDT managed build project.  Here are
 *  some notes on their usage:
 *   o  You can look up the managed build info associated with a CDT
 *      project by using ManagedBuildManager.getBuildInfo(IProject).
 *   o  Given a ManagedBuildInfo, you can retrieve the associated CDT
 *      managed build system project by using getManagedProject.
 *   o  The usage model of a ManagedBuildInfo is:
 *      1. Call setDefaultConfiguration to set the context
 *      2. Call other methods (e.g. getBuildArtifactName) which get
 *         information from the default configuration, and the other managed
 *         build system model elements that can be reached from the
 *         configuration.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IManagedCommandLineInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IManagedCommandLineInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IManagedConfigElement (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IManagedConfigElement.java)/**
 * This class represents a configuration element for loading the managed build
 * model objects.  They can either be loaded from the ManagedBuildInfo extension
 * point, or from an instance of IManagedConfigProvider.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IManagedConfigElementProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IManagedConfigElementProvider.java)/**
 * Clients may implement this interface to dynamically provided the config
 * information that is otherwise specified in the ManagedBuidInfo extension
 * point.  It corresponds to the <code>configProvider</code> sub-element of
 * the ManagedBuildInfo extension point.
 */
IManagedIsToolChainSupported (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IManagedIsToolChainSupported.java)/**
 *
 * @since 3.0
 */
IManagedOptionValueHandler (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IManagedOptionValueHandler.java)/**
 * This interface represents an option value handler in the managed build
 * system. It is used to enable a tool integrator to use the MBS configuration
 * GUI, while linking to an alternative back-end.
 *
 * @since 3.0
 */
IManagedProject (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IManagedProject.java)/**
 * This class represents a project instance in the managed build system.
 * Project instances are stored in the .cdtbuild file.  Note that there
 * is no reason to define a project element in a manifest file - it
 * would never be used.
 * <p>
 * The following steps occur when a CDT user creates a new Managed Build
 * project:
 * 1. A new project element is created.  Its projectType attribute is set
 *    to the projectType that the user selected.  Its name attribute is
 *    set to the project name that the user entered.
 * 2. When the user adds a default configuration, a configuration
 *    element is created as a child of the project element created in
 *    step 1.
 * 3. Add a tool-chain element that specifies as its superClass the
 *    tool-chain that is the child of the selected configuration element.
 * 4. For each tool element child of the tool-chain that is the child of
 *    the selected configuration element, create a tool element child of
 *    the cloned configuration's tool-chain element that specifies the
 *    original tool element as its superClass.
 * This prepares the new project/configurations for modification by the user.
 *
 * @since 2.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IModificationStatus (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IModificationStatus.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMultiConfiguration (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IMultiConfiguration.java)/**
 * This class is to combine multiple configurations to one to support
 * selection of multiple configurations on property pages.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
InternalBuildRunner (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/InternalBuildRunner.java)/**
 * The build runner for the internal builder.
 *
 * @author dschaefer
 * @since 8.0
 */
ITreeRoot (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOption.java)/**
	 * Represents the root of the tree of values in options of
	 * type {@link IOption#TREE}
	 * @author mhussein
	 * @since 8.1
	 *
	 */
ITreeOption (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOption.java)/**
	 * Represents a one of the possible values for options of type
	 * {@link IOption#TREE}
	 * @author mhussein
	 * @since 8.1
	 *
	 */
IOption (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOption.java)/**
 * Basic Tool / Tool-chain Option type.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IOptionalBuildObjectPropertiesContainer (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOptionalBuildObjectPropertiesContainer.java)/**
 * @since 8.6
 */
IOptionApplicability (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOptionApplicability.java)/**
 * This interface determines whether or not the option is currently displayed,
 * enabled, and used in command-line generation.
 */
IOptionCategory (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOptionCategory.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IOptionCategoryApplicability (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOptionCategoryApplicability.java)/**
 * This interface determines whether or not the option category is currently displayed.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 8.0
 */
IOptionCommandGenerator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOptionCommandGenerator.java)/**
 * This interface can be implemented by clients to contribute custom command-generator
 * for a build-option.
 *
 * The custom command-generator class should be referenced in the <option>/commandGenerator
 * attribute of the org.eclipse.cdt.managedbuilder.core.buildDefinitions extension-point.
 *
 * @since 8.0
 */
IOptionDefaultValueGenerator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOptionDefaultValueGenerator.java)/**
 * This interface can be implemented by clients to contribute custom defaultValue-generator for a
 * build-option.
 *
 * The custom defaultValue-generator class should be referenced in the <option>/defaultValueGenerator
 * attribute of the org.eclipse.cdt.managedbuilder.core.buildDefinitions extension-point.
 *
 * @since 8.5
 */
IOptionPathConverter (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOptionPathConverter.java)/**
 * An IOptionPathConverter converts between tool-specific paths
 * and their platform locations
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IOutputType (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IOutputType.java)/**
 * This interface represents an outputType instance in the managed build system.
 * It describes one category of output files created by a Tool.  A tool can
 * have multiple outputType children.
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProjectType (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IProjectType.java)/**
 * This class represents project-types in the managed build system.
 * A project-type is a tool-integrator defined class of project which
 * acts as a template for the projects that a user will create.
 * The project-type contains one or more children of type configuration.
 * These are the default configurations that the user can choose from.
 * Note that there is no reason to define a project-type element in a
 * .cdtbuild file.  It would never be used since project-type elements
 * are used to primarily populate the "New Project" dialog boxes.
 * Project types can be arranged into hierarchies to promote the efficient
 * sharing of configurations. If you have defined a project type that
 * should not be selected by the user, but is a root for other project
 * types, it may be declared abstract by setting the isAbstract attribute
 * to 'true'. Abstract project types do not appear in the UI. You must
 * provide a unique identifier for the project type in the id attribute.
 * Children of the abstract project type will have the same configurations
 * that the abstract project type has, unless they are explicitly named
 * in the unusedChildren attribute of the child project. For these
 * children to function properly, their superClass attribute must contain
 * the unique identifier of the super class project type.
 * A concrete project type must have at least one configuration defined
 * for it. A project type must also define (or inherit) a set of tool-chain
 * definitions that work together to produce the build goal as an output.
 * You must also provide a meaningful name that will be displayed to the
 * user in the UI and New Project wizards.
 *
 * @since 2.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IResourceConfiguration (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IResourceConfiguration.java)/**
 * This class is a place to define build attributes of individual
 * resources that are different from the configuration as a whole.  The
 * resourceConfiguration element can have multiple tool children.  They
 * define the tool(s) to be used to build the specified resource.  The
 * tool(s) can execute before, after, or instead of the default tool for
 * the resources (see the toolOrder attribute in the tool element).
 *
 * @since 2.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IResourceInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IResourceInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IReverseOptionPathConverter (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IReverseOptionPathConverter.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITarget (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ITarget.java)/**
 * This class represents targets for the managed build process.  A target
 * is some type of resource built using a given collection of tools.
 *
 * @deprecated This class was deprecated in 2.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITargetPlatform (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ITargetPlatform.java)/**
 * This class defines the os/architecture combination upon which the
 * outputs of a tool-chain can be deployed.  The osList and archList
 * attributes contain the Eclipse names of the operating systems and
 * architectures described by this element.
 *
 * @since 2.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITool (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ITool.java)/**
 * This interface represents a utility of some sort that is used in the build process.
 * A tool will generally process one or more resources to produce output resources.
 * Most tools have a set of options that can be used to modify the behavior of the tool.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IToolChain (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IToolChain.java)/**
 * This interface represents a tool-integrator-defined, ordered set of tools
 * that transform the project's input into the project's outputs.  A
 * tool-chain can be defined as part of a configuration, or as an
 * independent specification that is referenced in a separate configuration
 * via the toolChain superclass attribute.
 * <p>
 * The toolChain contains one or more children of type tool.  These define
 * the tools used in the tool-chain.  The toolChain contains one child of
 * type targetPlatform.  This defines the architecture/os combination where
 * the outputs of the project can be deployed.  The toolChain contains one
 * child of type builder.  This defines the "build" or "make" utility that
 * is used to drive the transformation of the inputs into outputs.
 *
 * @since 2.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IToolReference (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/IToolReference.java)/**
 * @deprecated This class was deprecated in 2.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ManagedBuilderCorePlugin (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ManagedBuilderCorePlugin.java)/**
 * ManagedBuilderCorePlugin is the life-cycle owner of the managedbuilder core plug-in.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ManagedBuildManager (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ManagedBuildManager.java)/**
 * This is the main entry point for getting at the build information
 * for the managed build system.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ManagedCProjectNature (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ManagedCProjectNature.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ManagedOptionValueHandler (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ManagedOptionValueHandler.java)/**
 * This class implements the default managed option value handler for MBS.
 * It is also be intended to be used as a base class for other value handlers.
 */
IBuildEnvironmentVariable (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/envvar/IBuildEnvironmentVariable.java)/**
 * this interface represents the given environment variable
 * @since 3.0
 */
IConfigurationEnvironmentVariableSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/envvar/IConfigurationEnvironmentVariableSupplier.java)/**
 * This interface is to be implemented by the tool-integrator for supplying the configuration-specific
 * environment.
 *
 * @since 3.0
 */
IEnvironmentBuildPathsChangeListener (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/envvar/IEnvironmentBuildPathsChangeListener.java)/**
 *
 * listeners of the environment build path changes should implement this interface
 *
 * @since 3.0
 */
IEnvironmentVariableProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/envvar/IEnvironmentVariableProvider.java)/**
 * this interface represent the environment variable provider - the main entry-point
 * to be used for querying the build environment
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IEnvironmentVariableSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/envvar/IEnvironmentVariableSupplier.java)/**
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProjectEnvironmentVariableSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/envvar/IProjectEnvironmentVariableSupplier.java)/**
 *
 * this interface is to be implemented by the tool-integrator
 * for supplying the project-specific environment
 *
 * @since 3.0
 */
BuildCommand (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildCommand.java)/**
 *
 */
BuildMultiStatus (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildMultiStatus.java)/**
 *
 */
BuildProcessManager (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildProcessManager.java)/**
 * This class implements process pool management for internal builder
 */
CommandBuilder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/CommandBuilder.java)/**
 *
 * This class implements the IBuildCommand building
 * To build the given command, create an instance of this class
 * and invoke the build method
 *
 * NOTE: This class is subject to change and discuss,
 * and is currently available in experimental mode only
 *
 */
DescriptionBuilder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/DescriptionBuilder.java)/**
 *
 * This class implements the IBuildDescription building,
 * that is the build of the entire configuration/project
 * To perform a build, create an instance of this class
 * and invoke the build method
 *
 * NOTE: This class is subject to change and discuss,
 * and is currently available in experimental mode only
 *
 */
GenDirInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/GenDirInfo.java)/**
 * This class represents the generated directory information
 *
 * NOTE: This class is subject to change and discuss,
 * and is currently available in experimental mode only
 *
 */
IBuildModelBuilder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/IBuildModelBuilder.java)/**
 *
 * This is a generic interface representing the builder
 * It is implemented currently by the BuildDescription builder,
 * BuildStep builder and BuildCommand builder that are used for building
 * the different parts of the build model
 * and represent an MBS Internal Builder.
 * In the future we might also adopt the external builder invocation
 * to the same concept, e.g. the IBuildModelBuilder implementer
 * for the external builder invocation might invoke an external builder
 * from within its build method
 *
 * NOTE: This interface is subject to change and discuss,
 * and is currently available in experimental mode only
 *
 */
BuildQueueElement (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/ParallelBuilder.java)/**
	 * This class implements queue element
	 */
ActiveBuildStep (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/ParallelBuilder.java)/**
	 * This class stores information about step being built
	 */
ParallelBuilder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/ParallelBuilder.java)/**
 * This is the main class for parallel internal builder implementation
 *
 * NOTE: This class is subject to change and discuss,
 * and is currently available in experimental mode only
 */
ProcessLauncher (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/ProcessLauncher.java)/**
 * This class implements external process launching for internal builder.
 *
 * NOTE: This class is subject to change and discuss,
 * and is currently available in experimental mode only
 */
StepBuilder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/StepBuilder.java)/**
 *
 * This class implements the IBuildStep building
 * To build the step, create an instance of this class
 * and invoke the build method
 *
 * NOTE: This class is subject to change and discuss,
 * and is currently available in experimental mode only
 *
 */
ConfigurationV2 (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/ConfigurationV2.java)/**
 * @deprecated This class is deprecated in 2.1
 */
DefaultManagedConfigElement (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/DefaultManagedConfigElement.java)/**
 * Implements the ManagedConfigElement by delegate all calls to an
 * IConfigurationElement instance.  This is used to load configuration
 * information from the extension point.
 */
ResourceDeltaVisitor (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/GeneratedMakefileBuilder.java)/**
	 * @since 1.2
	 */
GeneratedMakefileBuilder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/GeneratedMakefileBuilder.java)/**
 * This is the incremental builder associated with a managed build project. It dynamically
 * decides the makefile generator it wants to use for a specific target.
 *
 * @since 1.2
 */
PrintingProgressMonitor (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/HeadlessBuilder.java)/**
	 * IProgressMonitor to provide printing of task
	 */
ToolOption (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/HeadlessBuilder.java)/**
	 * A class representing a new tool option value
	 */
SavedToolOption (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/HeadlessBuilder.java)/**
	 * A class representing a backed-up tool option to restored at the end of the build
	 */
HeadlessBuilder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/HeadlessBuilder.java)/**
 * A headless builder for CDT with additional features.
 *
 * IApplication ID: org.eclipse.cdt.managedbuilder.core.headlessbuild
 * Provides:
 *   - Import projects :                       -import     {[uri:/]/path/to/project}
 *   - Import all projects in the tree :       -importAll  {[uri:/]/path/to/projectTreeURI}
 *   - Build projects / the workspace :        -build      {project_name_reg_ex/config_name_reg_ex | all}
 *   - Clean build projects / the workspace :  -cleanBuild {project_name_reg_ex/config_name_reg_ex | all}
 *   - Add Include path to build :             -I          {include_path}
 *   - Add Include file to build :             -include    {include_file}
 *   - Add preprocessor define to build :      -D          {prepoc_define}
 *   - Replace environment variable in build : -E          {var=value}
 *   - Append environment variable to build :  -Ea         {var=value}
 *   - Prepend environment variable to build : -Ep         {var=value}
 *   - Remove environment variable in build :  -Er         {var}
 *   - Replace a tool option value:            -T          {toolid} {optionid=value}
 *   - Append to a tool option value:          -Ta         {toolid} {optionid=value}
 *   - Prepend to a tool option value:         -Tp         {toolid} {optionid=value}
 *   - Remove a tool option:                   -Tr         {toolid} {optionid=value}
 *   - Disable indexer:                        -no-indexer
 *   - Error marker types to consider:         -markerType {all | cdt | marker_id}
 *        where:
 *           all is all markers -- default
 *           cdt is C/C++ Problem markers
 *           marker_id, e.g. org.eclipse.cdt.core.problem
 *   - Display all error markers:              -printErrorMarkers
 *
 * Build output is automatically sent to stdout.
 * @since 6.0
 */
HeadlessBuilderExternalSettingsProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/HeadlessBuilderExternalSettingsProvider.java)/**
 * This class allows extending the set of -D's, -I's and -includes that
 * are passed to projects using the external settings provider mechanism.
 */
HoldsOptions (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/HoldsOptions.java)/**
 * Implements the functionality that is needed to hold options and option
 * categories. In CDT 3.0, the functionality has been moved from ITool and
 * Tool to this class.
 *
 * This class is intended to be used as base class for all MBS grammar
 * elements that can hold Options and Option Categories. These are currently
 * Tool and ToolChain.
 *
 * Note that the member <code>superClass</code> must be shared with the
 * derived class. This requires to wrap this member by access functions
 * in the derived class or frequent casts, because the type of <code>superClass</code>
 * in <code>HoldsOptions</code> must be <code>IHoldOptions</code>. Further
 * note that the member <code>resolved</code> must inherit the value of its
 * derived class. This achieved through the constructor.
 *
 * @since 3.0
 */
ManagedBuildInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/ManagedBuildInfo.java)/**
 * Concrete IManagedBuildInfo storing runtime ManagedProject metadata with utility settings for accessing
 * some attributes in the default configuration
 */
ManagedMakeMessages (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/ManagedMakeMessages.java)/**
 * @since 2.0
 */
ManagedMakeProject (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/ManagedMakeProject.java)/**
 * @deprecated This class is obsolete but it is there just in case it might be used with old style projects.
 *
 * @since 2.0
 */
MultiConfiguration (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/MultiConfiguration.java)/**
 * This class represents a set of configurations
 * to be edited simultaneously on property pages.
 */
MultiFileInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/MultiFileInfo.java)/**
 *
 */
MultiFolderInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/MultiFolderInfo.java)/**
 * This class holds a number of IFolderInfo objects
 * delonging to different configurations when they
 * are edited simultaneously.
 */
MultiResourceInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/MultiResourceInfo.java)/**
 * This class holds a number of IResourceInfo objects
 * belonging to different configurations while they are
 * edited simultaneously.
 */
OptionCategory (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/OptionCategory.java)/**
 *
 */
OptionReference (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/OptionReference.java)/**
 * An <code>OptionReference</code> plays two roles in the managed build model.
 * It is used to store overridden option values in a toolchain specification at
 * the level of a <code>Configuration</code> and it stores user option settings
 * between sessions.
 */
PropertyManager (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/PropertyManager.java)/**
 * This class allows specifying BuildObject-specific persisted properties
 *
 */
Tool (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/Tool.java)/**
 * Represents a tool that can be invoked during a build.
 * Note that this class implements IOptionCategory to represent the top
 * category.
 */
BuildEntryStorage (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/dataprovider/BuildEntryStorage.java)/**
 * BuildEntryStorage has a handle back to the BuildLanguageData
 * to allow checking on which language entries are actually defined.
 */
BuildLanguageData (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/dataprovider/BuildLanguageData.java)/**
 * This class holds the language data for managed build tool
 *
 * It current holds both the main kind => BuildEntryStorage
 * mapping as well as mappings on the currently undef'd kinds
 * (e.g. a language setting entry defined by scanner discovery
 *       but later re-defined by a build system setting )
 */
ConfigurationDataProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/dataprovider/ConfigurationDataProvider.java)/**
 * The main hook ManagedBuild uses to connect to cdt.core's project model.
 * Provides & Persists Build configuration data in the project model storage.
 */
ExternalExtensionMacroSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/dataprovider/ExternalExtensionMacroSupplier.java)/**
 * This supplier is used to suply macros provided by the tool-integrator
 *
 * @since 3.0
 */
HasNatureExpression (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/enablement/HasNatureExpression.java)/**
 * @author Doug Schaefer
 *
 */
BuildEnvVar (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/BuildEnvVar.java)/**
 * a trivial implementation of the IBuildEnvironmentVariable
 *
 * @since 3.0
 */
ToolChainEnvironmentContextInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/EnvironmentVariableManagerToolChain.java)/**
	 * Wrapper class to deliver appropriate set of environment variable suppliers.
	 */
ToolChainEnvironmentVariableSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/EnvironmentVariableManagerToolChain.java)/**
	 * Tool-chain variable supplier
	 */
ToolChainCoreVariableContextInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/EnvironmentVariableManagerToolChain.java)/**
	 * Wrapper class to deliver appropriate set of suppliers for variable substitution.
	 */
ToolChainCdtVariableSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/EnvironmentVariableManagerToolChain.java)/**
	 * Tool-chain supplier for variable substitution.
	 */
EnvironmentVariableManagerToolChain (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/EnvironmentVariableManagerToolChain.java)/**
 * Helper class to resolve environment variables directly from toolchain. The intention is
 * to use that in New Project Wizard and other scenarios when no configuration is available yet.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
DefaultBuildPathResolver (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/EnvironmentVariableProvider.java)/**
	 * This class is used by the EnvironmentVariableProvider to calculate the build paths
	 * in case a tool-integrator did not provide the special logic for obtaining the build
	 * paths from environment variable values
	 *
	 * @since 3.0
	 */
EnvironmentVariableProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/EnvironmentVariableProvider.java)/**
 * This class implements the IEnvironmentVariableProvider interface and provides all
 * build environment functionality to the MBS
 *
 * @since 3.0
 */
ExternalExtensionEnvironmentSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/ExternalExtensionEnvironmentSupplier.java)/**
 * This is the Environment Variable Supplier used to supply variables
 * defined by the tool-integrator
 *
 * @since 3.0
 */
MbsEnvironmentSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/MbsEnvironmentSupplier.java)/**
 * This is the Environment Variable Supplier used to supply variables
 * defined by the MBS
 *
 * @since 3.0
 */
StoredBuildPathEnvironmentContainer (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/StoredBuildPathEnvironmentContainer.java)/**
 * This class holds the build path variable values and allows
 * checking the stored variable values with the values of the current environment environment
 *
 * @since 3.0
 *
 */
CygwinEFSExtensionProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/language/settings/providers/GCCBuiltinSpecsDetectorCygwin.java)/**
	 * EFSExtensionProvider for Cygwin translations
	 */
GCCBuiltinSpecsDetectorCygwin (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/language/settings/providers/GCCBuiltinSpecsDetectorCygwin.java)/**
 * Class to detect built-in compiler settings for Cygwin toolchain.
 * The paths are converted to cygwin "file-system" representation.
 */
GCCBuiltinSpecsDetectorMinGW (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/language/settings/providers/GCCBuiltinSpecsDetectorMinGW.java)/**
 * Class to detect built-in compiler settings for MinGW toolchain.
 */
MBSLanguageSettingsProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/language/settings/providers/MBSLanguageSettingsProvider.java)/**
 * Implementation of language settings provider for CDT Managed Build System.
 */
BuildfileMacroSubstitutor (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/BuildfileMacroSubstitutor.java)/**
 * This substitutor resolves all macro references except for the environment macro references
 * If a user has chosen to keep those macros in the buildfile, the environment macro references
 * are converted to the buildfile variable references, otherwise those macros are also resolved
 *
 * @see org.eclipse.cdt.managedbuilder.internal.macros#IMacroSubstitutor
 * @since 3.0
 */
BuildMacro (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/BuildMacro.java)/**
 * This is the trivial implementation of the IBuildMacro used internaly by the MBS
 *
 * @since 3.0
 */
BuildMacroProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/BuildMacroProvider.java)/**
 * The default IBuildMacroProvider implementation
 * @since 3.0
 */
BuildMacroStatus (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/BuildMacroStatus.java)/**
 * This class implements the IBuildMacroStatus interface
 *
 * @since 3.0
 */
DefaultMacroContextInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/DefaultMacroContextInfo.java)/**
 * This is the default implementation of the IMacroContextInfo
 *
 * @since 3.0
 */
ExplicitFileMacroCollector (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/ExplicitFileMacroCollector.java)/**
 * This class is used by the MacroResolver to collect and present
 * the explicit file macros referenced in the given expression
 *
 * @since 3.0
 */
FileContextBuildMacroValues (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/FileContextBuildMacroValues.java)/**
 * The implementation of the IFileContextBuildMacroValues interface
 * @since 3.0
 */
FileContextData (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/FileContextData.java)/**
 * This is a trivial implementation of the IFileContextData used internaly by the MBS
 *
 * @since 3.0
 */
IMacroContextInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/IMacroContextInfo.java)/**
 * This interface represents the context information.
 *
 * @since 3.0
 */
MbsMacroSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/MbsMacroSupplier.java)/**
 * This supplier is used to suply MBS-predefined macros
 *
 * @since 3.0
 */
OptionContextData (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/OptionContextData.java)/**
 * This is a trivial implementation of the IOptionContextData used internally by the MBS
 *
 * @since 3.0
 */
DefaultGCCScannerInfoCollector (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/scannerconfig/DefaultGCCScannerInfoCollector.java)/**
 * Implementation class for gathering the built-in compiler settings for
 * GCC-based targets. The assumption is that the tools will answer path
 * information in POSIX format and that the Scanner will be able to search for
 * files using this format.
 *
 * @since 2.0
 */
DefaultGnuWinScannerInfoCollector (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/scannerconfig/DefaultGnuWinScannerInfoCollector.java)/**
 * Implementation class for gathering the built-in compiler settings for
 * Cygwin-based targets.
 *
 * @since 2.0
 */
ManagedBuildCPathEntryContainer (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/scannerconfig/ManagedBuildCPathEntryContainer.java)/**
 * Implements a specialized path container for managed build projects. It will
 * either start the dynamic path collector specified for a target in the tool
 * manifest, or it will attempt to discover the built-in values specified in
 * the manifest.
 *
 * @since 2.0
 */
ManagedBuildPathEntryContainerInitializer (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/scannerconfig/ManagedBuildPathEntryContainerInitializer.java)/**
 * @since 2.0
 */
ObjectTypeBasedStorage (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/tcmodification/ObjectTypeBasedStorage.java)/**
 * The class implements the storage organized by types extending
 * {@link IRealBuildObjectAssociation}.
 *
 * @param <T> - the type of object being stored.
 */
PerTypeMapStorage (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/tcmodification/PerTypeMapStorage.java)/**
 * The class implements the storage of maps (Map<K, V>) organized by types extending
 * {@link IRealBuildObjectAssociation}.
 *
 * @param <K> - the type of keys of the map
 * @param <V> - the type of values in the map
 */
AbstractBuildCommandPatternHighlighter (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractBuildCommandParser.java)/**
	 * Trivial Error Parser which allows highlighting of output lines matching the patterns
	 * of this parser. Intended for better troubleshooting experience.
	 * Implementers are supposed to add the error parser via extension point {@code org.eclipse.cdt.core.ErrorParser}.
	 */
AbstractBuildCommandParser (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractBuildCommandParser.java)/**
 * Abstract class for providers parsing compiler option from build command when present in build output.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class interface is not stable yet as
 * it is not currently (CDT 8.1, Juno) clear how it may need to be used in future.
 * There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @since 8.1
 */
ConsoleParserAdapter (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractBuiltinSpecsDetector.java)/**
	 * Internal ICConsoleParser to handle individual run for one language.
	 */
AbstractBuiltinSpecsDetector (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractBuiltinSpecsDetector.java)/**
 * Abstract parser capable to execute compiler command printing built-in compiler
 * specs and parse built-in language settings out of it.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class interface is not stable yet as
 * it is not currently (CDT 8.1, Juno) clear how it may need to be used in future.
 * There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @since 8.1
 */
AbstractOptionParser (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractLanguageSettingsOutputScanner.java)/**
	 * Abstract class defining common functionality for option parsers.
	 * The purpose of this parser is to parse a portion of string representing
	 * a single option and create a language settings entry out of it.
	 *
	 * See {@link GCCBuildCommandParser} for an example how to define the parsers.
	 */
IncludePathOptionParser (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractLanguageSettingsOutputScanner.java)/**
	 * Implementation of {@link AbstractOptionParser} for include path options parsing.
	 */
IncludeFileOptionParser (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractLanguageSettingsOutputScanner.java)/**
	 * Implementation of {@link AbstractOptionParser} for include file options parsing.
	 */
MacroOptionParser (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractLanguageSettingsOutputScanner.java)/**
	 * Implementation of {@link AbstractOptionParser} for macro options parsing.
	 */
MacroFileOptionParser (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractLanguageSettingsOutputScanner.java)/**
	 * Implementation of {@link AbstractOptionParser} for macro file options parsing.
	 */
LibraryPathOptionParser (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractLanguageSettingsOutputScanner.java)/**
	 * Implementation of {@link AbstractOptionParser} for library path options parsing.
	 */
LibraryFileOptionParser (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractLanguageSettingsOutputScanner.java)/**
	 * Implementation of {@link AbstractOptionParser} for library file options parsing.
	 */
AbstractLanguageSettingsOutputScanner (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractLanguageSettingsOutputScanner.java)/**
 * Abstract class for language settings providers capable to parse build output.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class interface is not stable yet as
 * it is not currently (CDT 8.1, Juno) clear how it may need to be used in future.
 * There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @since 8.1
 */
GCCBuildCommandPatternHighlighter (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/GCCBuildCommandParser.java)/**
	 * Error Parser which allows highlighting of output lines matching the patterns of this parser.
	 * Intended for better troubleshooting experience.
	 */
GCCBuildCommandParser (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/GCCBuildCommandParser.java)/**
 * Build command parser capable to parse gcc command in build output and generate
 * language settings per file being compiled.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class interface is not stable yet as
 * it is not currently (CDT 8.1, Juno) clear how it may need to be used in future.
 * There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @since 8.1
 */
GCCBuiltinSpecsDetector (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/GCCBuiltinSpecsDetector.java)/**
 * Language settings provider to detect built-in compiler settings for GCC compiler.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class interface is not stable yet as
 * it is not currently (CDT 8.1, Juno) clear how it may need to be used in future.
 * There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @since 8.1
 */
ToolchainBuiltinSpecsDetector (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/ToolchainBuiltinSpecsDetector.java)/**
 * Abstract parser capable to execute compiler command printing built-in compiler
 * specs and parse built-in language settings out of it. The compiler to be used
 * is taken from MBS tool-chain definition.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class interface is not stable yet as
 * it is not currently (CDT 8.1, Juno) clear how it may need to be used in future.
 * There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @since 8.1
 */
BuildMacroException (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/BuildMacroException.java)/**
 * This exception is thrown in the case of some build macros-related operation failure
 * The exception typically contains one or more IBuildMacroStatus statuses
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 */
IBuildMacro (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IBuildMacro.java)/**
 * This interface represents the given build macro
 * Clients may implement or extend this interface.
 *
 * @since 3.0
 */
IBuildMacroProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IBuildMacroProvider.java)/**
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildMacroStatus (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IBuildMacroStatus.java)/**
 * This interface represents the status of a build macro operation
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildMacroSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IBuildMacroSupplier.java)/**
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IConfigurationBuildMacroSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IConfigurationBuildMacroSupplier.java)/**
 *
 * this interface is to be implemented by the tool-integrator
 * for supplying the configuration-specific macros
 *
 * @since 3.0
 */
IFileContextBuildMacroValues (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IFileContextBuildMacroValues.java)/**
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFileContextData (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IFileContextData.java)/**
 * This interface is used to represent file context data
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IOptionContextData (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IOptionContextData.java)/**
 * This interface is used to represent an option context data
 *
 * @since 3.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProjectBuildMacroSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IProjectBuildMacroSupplier.java)/**
 *
 * this interface is to be implemented by the tool-integrator
 * for supplying the project-specific macros
 *
 * @since 3.0
 */
IReservedMacroNameSupplier (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/macros/IReservedMacroNameSupplier.java)/**
 * This interface is to be implemented by the tool-integrator to specify to the MBS
 * the reserved builder variable names
 *
 * @since 3.0
 */
DefaultGCCDependencyCalculator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/DefaultGCCDependencyCalculator.java)/**
 * @since 2.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DefaultGCCDependencyCalculator2 (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/DefaultGCCDependencyCalculator2.java)/**
 * This dependency calculator uses the GCC -MMD -MF -MP -MT options in order to
 * generate .d files as a side effect of compilation.
 * See bugzilla 108715 for the discussion of dependency management that led to
 * the creation of this dependency calculator.  Note also that this technique
 * exhibits the failure modes discussed in comment #5.
 *
 * This dependency calculator uses the class DefaultGCCDependencyCalculator2Commands
 * which implements the per-source command information
 *
 * @since 3.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DefaultGCCDependencyCalculator2Commands (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/DefaultGCCDependencyCalculator2Commands.java)/**
 * This dependency calculator uses the GCC -MMD -MF -MP -MT options in order to
 * generate .d files as a side effect of compilation.
 * See bugzilla 108715 for the discussion of dependency management that led to
 * the creation of this dependency calculator.  Note also that this technique
 * exhibits the failure modes discussed in comment #5.
 *
 * This class is used with DefaultGCCDependencyCalculator2.
 *
 * @since 3.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DefaultGCCDependencyCalculator3 (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/DefaultGCCDependencyCalculator3.java)/**
 * This dependency calculator uses the same dependency management technique as the
 * DefaultGCCDependencyCalculator.  That is:
 *
 *  1.  An echo command creates the dependency file (.d).
 *  2.  A second invocation of the compiler is made in order to append to the dependency file.
 *      The additional options -MM -MG -P -w are added to the command line.
 *  3.  The dependency files are post-processed to add the empty header rules.
 *
 * This dependency calculator uses the class DefaultGCCDependencyCalculator3Commands
 * which implements the per-source command information
 *
 * This is an example dependency calculator that is not used by the CDT GCC tool-chain.
 *
 * @since 3.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DefaultGCCDependencyCalculator3Commands (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/DefaultGCCDependencyCalculator3Commands.java)/**
 * This dependency calculator uses the same dependency management technique as the
 * DefaultGCCDependencyCalculator.  That is:
 *
 *  1.  An echo command creates the dependency file (.d).
 *  2.  A second invocation of the compiler is made in order to append to the dependency file.
 *      The additional options -MM -MG -P -w are added to the command line.
 *  3.  The dependency files are post-processed to add the empty header rules.
 *
 * This class is used with DefaultGCCDependencyCalculator3.
 *
 * This is an example dependency calculator that is not used by the CDT GCC tool-chain.
 *
 * @since 3.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DefaultGCCDependencyCalculatorPreBuild (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/DefaultGCCDependencyCalculatorPreBuild.java)/**
 * This dependency calculator uses the GCC -MM -MF -MP -MT options in order to
 * generate .d files as separate step prior to the source compilations.
 *
 * This dependency calculator uses the class DefaultGCCDependencyCalculatorPreBuildCommands
 * which implements the per-source command information
 *
 * @since 3.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DefaultGCCDependencyCalculatorPreBuildCommands (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/DefaultGCCDependencyCalculatorPreBuildCommands.java)/**
 * This dependency calculator uses the GCC -MM -MF -MP -MT options in order to
 * generate .d files as separate step prior to the source compilations.
 *
 * This dependency calculator uses the class DefaultGCCDependencyCalculatorPreBuildCommands
 * which implements the per-source command information
 *
 * This class is used with DefaultGCCDependencyCalculatorPreBuild.
 *
 * @since 3.1
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
GnuLinkOutputNameProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuLinkOutputNameProvider.java)/**
 * This class provides a name for the Gnu Linker tool when it is not used
 * as the target tool of a tool-chain
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ResourceDeltaVisitor (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java)/**
	 * This class walks the delta supplied by the build system to determine
	 * what resources have been changed. The logic is very simple. If a
	 * buildable resource (non-header) has been added or removed, the directories
	 * in which they are located are "dirty" so the makefile fragments for them
	 * have to be regenerated.
	 * <p>
	 * The actual dependencies are recalculated as a result of the build step
	 * itself. We are relying on make to do the right things when confronted
	 * with a dependency on a moved header file. That said, make will treat
	 * the missing header file in a dependency rule as a target it has to build
	 * unless told otherwise. These dummy targets are added to the makefile
	 * to avoid a missing target error.
	 */
ResourceProxyVisitor (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java)/**
	 * This class is used to recursively walk the project and determine which
	 * modules contribute buildable source files.
	 */
GnuMakefileGenerator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java)/**
 * This is a specialized makefile generator that takes advantage of the
 * extensions present in Gnu Make.
 *
 * @since 1.2
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IManagedBuildGnuToolInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/IManagedBuildGnuToolInfo.java)/**
 * This interface returns information about a Tool's inputs
 * and outputs while a Gnu makefile is being generated.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ManagedBuildGnuToolInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/ManagedBuildGnuToolInfo.java)/**
 * This class represents information about a Tool's inputs
 * and outputs while a Gnu makefile is being generated.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
IManagedBuilderMakefileGenerator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/IManagedBuilderMakefileGenerator.java)/**
 * @since 2.0
 *
 * TODO:  isGeneratedResource should take an IPath rather than an IResource,
 *        because an output file can be generated outside of the project directory.
 *        This will require a new interface.
 */
IManagedDependencyGenerator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/IManagedDependencyGenerator.java)/**
 * @since 2.0
 * @deprecated 3.1
 *
 * Use IManagedDependencyGenerator2 instead.
*/
IManagedDependencyInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/IManagedDependencyInfo.java)/**
 * @since 3.1
 *
 * This interface is the base interface for IManagedDependencyCalculator,
 * IManagedDependencyCommands and IManagedDependencyPreBuild.  See these
 * interfaces and IManagedDependencyGenerator2 for more information on
 * writing a dependency calculator.
 *
 * The methods below simply return the arguments passed to the
 * IManagedDependencyGenerator2.getDependency*Info call that created the
 * IManagedDependencyInfo instance.
 *
 */
DefaultIndexerDependencyCalculator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/internal/DefaultIndexerDependencyCalculator.java)/**
 * @since 2.0
 */
DefaultNoDependencyCalculator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/internal/DefaultNoDependencyCalculator.java)/**
 * This is the dependency calculator used by the makefile generation system when
 * nothing is defined for a tool.
 *
 * @since 2.0
 */
PDOMDependencyCalculator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/pdomdepgen/PDOMDependencyCalculator.java)/**
 * @author Doug Schaefer
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PDOMDependencyGenerator (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/pdomdepgen/PDOMDependencyGenerator.java)/**
 * @author Doug Schaefer
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ConverterMessages (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/projectconverter/ConverterMessages.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
UpdateManagedProject30 (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/projectconverter/UpdateManagedProject30.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
UpdateManagedProject31 (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/projectconverter/UpdateManagedProject31.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
UpdateManagedProjectManager (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/projectconverter/UpdateManagedProjectManager.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IManagedScannerInfoCollector (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/scannerconfig/IManagedScannerInfoCollector.java)/**
 * Interface that a collector of compiler information must implement.
 * @since 2.0
 */
IApplicableModification (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IApplicableModification.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IConfigurationModification (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IConfigurationModification.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IConflict (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IConflict.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFileInfoModification (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IFileInfoModification.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFolderInfoModification (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IFolderInfoModification.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IModification (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IModification.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IModificationOperation (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IModificationOperation.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IToolChainModificationManager (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IToolChainModificationManager.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IToolListModification (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IToolListModification.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IToolModification (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/tcmodification/IToolModification.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
CreateProjectProgressMonitor (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/CreateProjectProgressMonitor.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
AddLanguageSettingsProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/AddLanguageSettingsProvider.java)/**
 * A configurable stage of the New Project wizard that is able to add implementations of
 * {@link ILanguageSettingsProvider} to the new project's build configurations.
 * E.g.,
 * <pre>
    &lt;process type="org.eclipse.cdt.managedbuilder.core.AddLanguageSettingsProvider">
        &lt;simple name="projectName" value="$(projectName)"/>
        &lt;simple-array name="languageSettingsProviders">
            &lt;element value="org.eclipse.cdt.qt.core.QtPathsProvider"/>
        &lt;/simple-array>
    &lt;/process>
 * </pre>
 *
 * @since 8.3
 */
AppendToMBSStringListOptionValues (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/AppendToMBSStringListOptionValues.java)/**
 * This class Appends contents to Managed Build System StringList Option Values.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
AppendToMBSStringOptionValue (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/AppendToMBSStringOptionValue.java)/**
 * This class Appends contents to Managed Build System String Option Value.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CreateIncludeFolder (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/CreateIncludeFolder.java)/**
 * Creates a include Folder to the project.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ExcludeResources (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/ExcludeResources.java)/**
 * Exclude Resources from a CDT project. This takes three arguments
 * <ul>
 *   <li> <b>projectName</b> the name of the project to exclude resources for. Must be a CDT Managed project.
 *   <li> <b>configIdPattern</b> a regular expression in java.util.regex.Pattern syntax for matching against the project configuration ids. The resources that
 *   match any of the regular expressions given in the <i>filePatterns</i> argument will be excluded for all matching project configurations.
 *   <li> <b>filePatterns</b> an array of regular expressions in java.util.regex.Pattern syntax for matching against project resources. The paths that
 *   will be matched against are workspace relative (include the project folder) and use forward slash as the file separator. That this argument is an
 *   array is purely to allow logically separate patterns to be given separately )rather than as one big string). If any of the regular expressions matches
 *   then the resource in question will be excluded for the matching configuration(s).
 *   <li> <b>invertConfigMatching</b> if this is set to "true" then the set of configurations for which resources matching any of the specified file patterns will
 *   be inverted. This enables you to specify which resources the files should not be excluded for without having to know what other configurations may exist.
 * </ul>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
GenerateMakefileWithBuildDescription (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/GenerateMakefileWithBuildDescription.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NewManagedProject (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/NewManagedProject.java)/**
 * Creates a new Project in the workspace.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
SetMBSBooleanOptionValue (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/SetMBSBooleanOptionValue.java)/**
 * This class sets the Managed Build System Option boolean Values.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
SetMBSStringListOptionValues (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/SetMBSStringListOptionValues.java)/**
 * This class Sets (overwrites) contents of Managed Build System StringList Option Values.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
SetMBSStringOptionValue (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/SetMBSStringOptionValue.java)/**
 * This class sets the Managed Build System Option Values. Note that this class
 * handles both string options and enumerated options.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ProjectCreatedActions (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/ProjectCreatedActions.java)/**
 * This class is a helper for creating general CDT projects
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 *
 * Note that this class is used by ISVs, see bug 318063.
 */
IMakeBuilderInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/newmake/core/IMakeBuilderInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMakeCommonBuildInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/newmake/core/IMakeCommonBuildInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
MakeScannerInfo (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/newmake/core/MakeScannerInfo.java)/**
 * @deprecated as of CDT 4.0
 * @author DInglis
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MakeScannerProvider (/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/newmake/core/MakeScannerProvider.java)/**
 * @deprecated @author DInglis
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
AbstractBuilderTest (/build/org.eclipse.cdt.managedbuilder.core.tests/suite/org/eclipse/cdt/managedbuilder/testplugin/AbstractBuilderTest.java)/**
 * Abstract builder test which provides utility methods for:
 * <ul>
 * <li>Importing projects into the workspace</li>
 * <li>Adding expected resources to the delta verifier</li>
 * <li>Verifying the delta</li>
 * <li>Printing markers</li>
 * <li>Cleaning up the workspace at the end</li>
 * </ul>
 */
ResourceDeltaVerifier (/build/org.eclipse.cdt.managedbuilder.core.tests/suite/org/eclipse/cdt/managedbuilder/testplugin/ResourceDeltaVerifier.java)/**
 * Based on org.eclipse.core.tests.resources.ResourceDeltaVerifier with
 * additional support for ignoring changes in certain resources.
 *
 * Verifies the state of an <code>IResourceDelta</code> by comparing
 * it with a client's expectations.  The delta is considered valid
 * if it contains exactly the set of changes expected by the client,
 * and parents of those changes (having ignore filtered resources).
 *
 * <p>Example usage:
 * <code>
 * ResourceDeltaVerifier verifier = new ResourceDeltaVerifier();
 * IResourceChangeListener listener = (IResourceChangeListener)verifier;
 * IWorkspace workspace = ResourcesPlugin.getWorkspace();
 * IProject proj = workspace.getRoot().getProject("MyProject");
 * // Assume the project is accessible
 * workspace.addResourceChangeListener(listener);
 * verifier.addExpectedChange(proj, REMOVED, 0);
 * try {
 * 		proj.delete(true, true, null);
 * } catch(CoreException e){
 *     fail("1.0", e);
 * }
 * assert("2.0 "+verifier.getMessage(), verifier.isDeltaValid());
 * </code>
 */
AutomatedIntegrationSuite (/build/org.eclipse.cdt.managedbuilder.core.tests/suite/org/eclipse/cdt/managedbuilder/tests/suite/AutomatedIntegrationSuite.java)/**
 * Main TestSuite for all the managed build tests
 */
Bug_303953 (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/regressions/Bug_303953.java)/**
 * Tests that removing the last source file from a directory
 * causes the subdir.mk to be regenerated, and associated dervied
 * files should be deleted.
 */
Bug_335476 (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/regressions/Bug_335476.java)/**
 * This tests that an environment variable, which is part of the build
 * (in this case referenced by a -I), makes it through to makefile
 * correctly when it changes.
 */
RegressionTests (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/regressions/RegressionTests.java)/**
 * Regression tests for builder bugs
 */
AlwaysOffApplicabilityCalculator (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/AlwaysOffApplicabilityCalculator.java)/**
 *
 */
AlwaysOnApplicabilityCalculator (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/AlwaysOnApplicabilityCalculator.java)/**
 *
 */
BuildFileGenerator (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/BuildFileGenerator.java)/**
 *  Test build file generator
 */
CmdLineApplicabilityCalculator (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/CmdLineApplicabilityCalculator.java)/**
 *
 */
DefaultFortranDependencyCalculator (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/DefaultFortranDependencyCalculator.java)/**
 *  This class implements the Dependency Manager and Output Name Provider interfaces
 *  for a very "quick & dirty" ifort tool-chain on Win32
 */
ManagedBuildCommandLineGenerator (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/ManagedBuildCommandLineGenerator.java)/**
 *  Test command line generator
 */
ManagedBuildCommandLineInfo (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/ManagedBuildCommandLineInfo.java)/**
 *  Command line info for use with ManagedBuildCommandLineGenerator
 */
ManagedBuildEnvironmentTests (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/ManagedBuildEnvironmentTests.java)/**
 *
 * */
ManagedBuildTCSupportedTest (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/ManagedBuildTCSupportedTest.java)/**
 *
 * */
PathConverterTest (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/PathConverterTest.java)/**
 * This is a test for the pathConverter attribute
 * which may be specified for a tool or toolchain
 * The manifest has an extra buildDefinitions section
 * with a dedicated project type "pathconvertertest.projecttype"
 * to support these tests.
 * @author pn3484
 *
 */
Test30_2_CommandLineGenerator (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/Test30_2_CommandLineGenerator.java)/**
 *  Test command line generator
 */
TestMacro (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/TestMacro.java)/**
 *
 *
 */
TestPathConverter1 (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/TestPathConverter1.java)/**
 * This minimalistic testing implementation does not actually change the path
 * It just converts to an IPath object
 * TestPathConverter1 is the converter which can be inherited from the toolchain
 */
TestPathConverter2 (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/TestPathConverter2.java)/**
 * TestpathConverter2 can be inherited from the pathconvertertest.convertingtool
 */
TestPathConverter3 (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/TestPathConverter3.java)/**
 * TestPathConverter3 is set on toolchains in several configurations
 */
TestPathConverter4 (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/core/tests/TestPathConverter4.java)/**
 * This path converter will be used to test that a conversion actually takes place.
 * It is referenced from the tool pathconvertertest.config.tcyy.toyy.toolchain.tool
 * in the test projecttype.<br>
 * The tool pathconvertertest.config.tcyy.toyy.toolchain.tool inherits a path option
 * from the pathconvertertest.convertingtool tool. The include path option has the
 * intentionally strange value file:///usr/local/include.
 * The "file://" part gets stripped away to satisfy the test.
 */
AllLanguageSettingsProvidersMBSTests (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/AllLanguageSettingsProvidersMBSTests.java)/**
 * Test suite to test language settings providers defined in cdt.managedbuilder.core.
 */
DummyBuiltinSpecsDetector (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java)/**
	 * Dummy to keep boilerplate code.
	 */
MockBuiltinSpecsDetector (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java)/**
	 * Mock built-in specs detector to test basic functionality of {@link AbstractBuiltinSpecsDetector}.
	 */
MockBuiltinSpecsDetectorExecutedFlag (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java)/**
	 * Mock built-in specs detector to test execute() functionality.
	 */
MockBuiltinSpecsDetectorWithRunCount (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java)/**
	 * Mock built-in specs detector which track how many times it was run.
	 */
MockBuiltinSpecsDetectorEnvironmentChangeListener (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java)/**
	 * Mock built-in specs detector to test environment change functionality.
	 */
MockConsoleBuiltinSpecsDetector (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java)/**
	 * Mock built-in specs detector to test parsing functionality.
	 */
BuiltinSpecsDetectorTest (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java)/**
 * Test cases to test built-in specs detectors.
 */
MockBuildCommandParser (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/GCCBuildCommandParserTest.java)/**
	 * Mock build command parser.
	 */
GCCBuildCommandParserTest (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/GCCBuildCommandParserTest.java)/**
 * Test cases to test build command parsers.
 */
MockGCCBuiltinSpecsDetector (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/GCCBuiltinSpecsDetectorTest.java)/**
	 * Mock GCCBuiltinSpecsDetector to gain access to protected methods.
	 */
MockGCCBuiltinSpecsDetectorCygwin (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/GCCBuiltinSpecsDetectorTest.java)/**
	 * Mock GCCBuiltinSpecsDetectorCygwin to gain access to protected methods.
	 */
GCCBuiltinSpecsDetectorTest (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/GCCBuiltinSpecsDetectorTest.java)/**
 * Test cases to test GCC built-in specs detector.
 */
LanguageSettingsProvidersMBSTest (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/LanguageSettingsProvidersMBSTest.java)/**
 * Test creation of a new project in respect with language settings providers.
 */
AllTemplateEngineTests (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/templateengine/tests/AllTemplateEngineTests.java)/**
 * This is a TestSuite, the TestCases created to test Template engine are
 * added to test-suite. The test suite will execute all the test cases added
 * to the Suite.
 *
 * @since 4.0
 */
CProjectDescriptionSerializationTests (/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/projectmodel/tests/CProjectDescriptionSerializationTests.java)/**
 * Creates a project in a loop and checks that it is created with appropriate number
 * of build configurations
 *
 */
CygwinPathResolver (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/CygwinPathResolver.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
GnuCygwinConfigurationEnvironmentSupplier (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/GnuCygwinConfigurationEnvironmentSupplier.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
IsGnuCygwinToolChainSupported (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/IsGnuCygwinToolChainSupported.java)/**
 * This class implements the IManagedIsToolChainSupported for the Gnu Cygwin tool-chain
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
MingwEnvironmentVariableSupplier (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/mingw/MingwEnvironmentVariableSupplier.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
MingwIsToolChainSupported (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/mingw/MingwIsToolChainSupported.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
SimpleMakefileGenerator (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/templates/SimpleMakefileGenerator.java)/**
 * @author Doug Schaefer
 *
 * TODO - this is necessitated because the default macro format for
 * the template engine is $( and ) which is the same as make macros.
 * This replaces that with something more make friendly.
 *
 * But at the end of they day, we need a real macro replacement engine
 * like JET, or something...
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
GcovAppCalculator (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/ui/GcovAppCalculator.java)/**
 * @since 8.3
 */
GnuUIPlugin (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/ui/GnuUIPlugin.java)/**
 * The main plugin class to be used in the desktop.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
GprofAppCalculator (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/ui/GprofAppCalculator.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ProfAppCalculator (/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/ui/ProfAppCalculator.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuildAllConfigurationsHandler (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/commands/BuildAllConfigurationsHandler.java)/**
 *  Implementation of the command that builds all configurations of the selected projects.
 */
BuildConfigurationsJob (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/commands/BuildConfigurationsJob.java)/**
 * A job to build CDT build configurations.
 */
CleanAllConfigurationsHandler (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/commands/CleanAllConfigurationsHandler.java)/**
 * Implementation of the command that cleans all configurations of the selected projects.
 */
CleanFilesHandler (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/commands/CleanFilesHandler.java)/**
 * Action to clean build output for selected files
 */
RebuildConfigurationsDialog (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/commands/RebuildConfigurationsDialog.java)/**
 * Dialog to let the user to clean and rebuild configurations of the selected projects.
 */
RebuildConfigurationsHandler (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/commands/RebuildConfigurationsHandler.java)/**
 * Implementation of the command that cleans and rebuilds selected configurations.
 * User selects which configurations to rebuild via {@link RebuildConfigurationsDialog}.
 */
BuiltinSpecsDetectorOptionPage (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/BuiltinSpecsDetectorOptionPage.java)/**
 * Options page for {@link AbstractBuiltinSpecsDetector}.
 *
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
GCCBuildCommandParserOptionPage (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/GCCBuildCommandParserOptionPage.java)/**
 * Options page for {@link AbstractBuildCommandParser}.
 *
 */
ScannerDiscoveryConsole (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/ScannerDiscoveryConsole.java)/**
 * Console adapter for {@link AbstractBuiltinSpecsDetector}.
 */
ScannerDiscoveryGlobalConsole (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/ScannerDiscoveryGlobalConsole.java)/**
 * Console adapter for global {@link AbstractBuiltinSpecsDetector}.
 *
 * Note that this console is not colored.
 */
MBSProjectConfiguration (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/workingsets/MBSProjectConfiguration.java)/**
 * A managed-build implementation of the working set project configuration. It
 * knows how to build the selected configuration without activating it.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
MBSProjectConfigurationFactory (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/workingsets/MBSProjectConfigurationFactory.java)/**
 * Working set project configuration factory for MBS projects.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
MBSProjectState (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/workingsets/MBSProjectState.java)/**
 * A managed-build implementation of the workspace snapshot project state. It
 * knows how to build the selected configuration without activating it.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
PreferredToolchainsTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/PreferredToolchainsTab.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PrefPage_Env (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/PrefPage_Env.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PrefPage_MultiConfig (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/PrefPage_MultiConfig.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PrefPage_NewCDTProject (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/PrefPage_NewCDTProject.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PrefPage_NewCDTWizard (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/PrefPage_NewCDTWizard.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PrefPage_PropertyPage (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/PrefPage_PropertyPage.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PrefPage_Vars (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/PrefPage_Vars.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PropertyMultiCfgTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/PropertyMultiCfgTab.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PropertyPageDefsTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/PropertyPageDefsTab.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
WizardDefaultsTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/preferences/WizardDefaultsTab.java)/**
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
AbstractCBuildPropertyTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/AbstractCBuildPropertyTab.java)/**
 * Proposed parent for Build System property tabs.
 *
 * In addition to AbstractCPropertyTab functionality,
 * provides several utility methods for configurations
 * handling.
 */
AbstractSingleBuildPage (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/AbstractSingleBuildPage.java)/**
 * Bug #183341 : Single property page which does not
 * require separate cPropertyTab to display data.
 */
ArtifactTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/ArtifactTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuildBehaviourTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/BuildBehaviourTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuilderSettingsTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/BuilderSettingsTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuildOptionComboFieldEditor (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/BuildOptionComboFieldEditor.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CustomFieldEditorDescriptor (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/BuildOptionSettingsUI.java)/**
	 * Holds all the information necessary to instantiate a custom field-editor.
	 * Also acts as a factory - instantiates and returns a non-initialized field-editor.
	 */
TriStateBooleanFieldEditor (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/BuildOptionSettingsUI.java)/**
	 *
	 *
	 *
	 */
TreeSelectionDialog (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/BuildOptionSettingsUI.java)/**
	 * @since 8.2
	 */
BuildOptionSettingsUI (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/BuildOptionSettingsUI.java)/**
 * Option settings page in project properties Build Settings under Tool Settings tab.
 */
BuildStepsTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/BuildStepsTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuildToolSettingUI (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/BuildToolSettingUI.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CBuildLocationOutputTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/CBuildLocationOutputTab.java)/**
 * The same as CLocationOutputTab - but can be hidden
 * in case of managed project
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CNewOptionsPage (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/CNewOptionsPage.java)/**
 * @deprecated as of CDT 4.0. Does not seem to be used anywhere, looks like
 *    remnant of 3.X style new project wizard.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CPropertyVarsTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/CPropertyVarsTab.java)/**
 * displays the build macros for the given context
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DiscoveryPageWrapper (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/DiscoveryPageWrapper.java)/**
 * This class is created to support backward compatibility
 * with make.ui discovery pages.
 * It is subclassed from AbstractDiscoveryOptionsBlock
 * just to be passed to existing discovery pages.
 * All methods referenced by these pages are rewritten.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DiscoveryProfilePageConfiguration (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/DiscoveryTab.java)/**
	 * Create a profile page only on request
	 *
	 * @author vhirsl
	 */
DiscoveryTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/DiscoveryTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
FileListControlFieldEditor (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/FileListControlFieldEditor.java)/**
 * Field editor that uses FileListControl for user input.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IBuildInfoContainer (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/IBuildInfoContainer.java)/**
 * This interface is used by dynamic discovery pages
 * to refer to underlying tab (DiscoveryTab)
 * and get all object-specific data.
 *
 * In previous code, reference to specific
 * property page was used instead of interface.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICustomBuildOptionEditor (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/ICustomBuildOptionEditor.java)/**
 * This interface can be implemented by clients to contribute custom build-option
 * editors to the CDT Build Settings page in the project Properties dialog.
 *
 * In addition to implementing this interface, the custom build-option editor class
 * must also extend the {@link org.eclipse.jface.preference.FieldEditor} class. The
 * custom build-option editor class should be contributed through the <fieldEditor>
 * element of the org.eclipse.cdt.managedbuilder.ui.buildDefinitionsUI extension-point,
 * and then referenced, by its ID, from the <option>/fieldEditorId attribute of the
 * org.eclipse.cdt.managedbuilder.core.buildDefinitions extension-point.
 *
 * @since 8.0
 */
ManagedBuilderUIImages (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/ManagedBuilderUIImages.java)/**
 * Bundle of all images used by the C plugin.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NewBuildConfigurationDialog (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/NewBuildConfigurationDialog.java)/**
 * Build-system specific version
 * for "add new configuration" dialog
 * in "Manage configurations" feature
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NewCfgDialog (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/NewCfgDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NewVarDialog (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/NewVarDialog.java)/**
 * the dialog used to create or edit the build macro
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Page_BuildSettings (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/Page_BuildSettings.java)/**
 * The class have the same functionality as superclass.
 * The only need to create it is distinguishing tabs.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Page_Discovery (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/Page_Discovery.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Page_Environment (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/Page_Environment.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Page_ExpPathAndSymb (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/Page_ExpPathAndSymb.java)/**
 * The class have the same functionality as superclass.
 * The only need to create it is distinguishing tabs.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Page_head_build (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/Page_head_build.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Page_PathAndSymb (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/Page_PathAndSymb.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Page_ToolChain (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/Page_ToolChain.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Page_Variables (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/Page_Variables.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
RefreshPolicyExceptionDialog (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/RefreshPolicyExceptionDialog.java)/**
 * The RefreshPolicyExceptionDialog allows users to add or edit a refresh exclusion.
 *
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 *
 * @author vkong
 * @since 8.0
 *
 */
_Entry (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/RefreshPolicyTab.java)/**
	 * Wrapper for IResource/RefreshExclusion
	 */
_Exclusion_Instance (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/RefreshPolicyTab.java)/**
	 * Wrapper for ExclusionInstance
	 */
RefreshPolicyTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/RefreshPolicyTab.java)/**
 * The RefreshPolicyTab allows users to modify a project's refresh settings for each build.
 *
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 *
 * @author vkong
 * @since 8.0
 */
StringFieldEditorM (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/StringFieldEditorM.java)/**
 * This class behaves in the same way as its parent,
 * but gives public access to its Text widget, and
 * valueChanged() can be called outside.
 *
 * It allows to add extra listeners to Text widget.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ToolChainEditTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/ToolChainEditTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ToolListContentProvider (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/ToolListContentProvider.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ToolListElement (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/ToolListElement.java)/**
 * This class represent the elements in the TreeViewer that displays the tools
 * and categories in the tool options property pages.  The reason for these
 * elements is illustrated by bugzilla #123461.  We used to use the ToolChain,
 * Tool and OptionCategory objects themselves as the elements in the TreeViewer,
 * but the same OptionCategory can appear more than once in the list of Tree
 * Viewer items, and this caused problems.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ToolListLabelProvider (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/ToolListLabelProvider.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ToolSettingsPrefStore (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/ToolSettingsPrefStore.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ToolSettingsTab (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/properties/ToolSettingsTab.java)/**
 * Tool Settings Tab in project properties Build Settings
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CDTConfigWizardPage (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/CDTConfigWizardPage.java)/**
 * "Select Configurations" page of C/C++ New Project Wizard
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CfgHolder (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/CfgHolder.java)/**
 * This class is intended for data exchange between
 * Configuration page and Handlers.
 * It may hold configuration in case of managed project
 * or to be a placeholder in case of make project
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ConvertToMakeWizard (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/ConvertToMakeWizard.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ConvertToMakeWizardPage (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/ConvertToMakeWizardPage.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ManagedBuildWizard (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/ManagedBuildWizard.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MBSCustomPage (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/MBSCustomPage.java)/**
 * This abstract class provides a convenient, partial implementation of the IWizardPage interface.
 * This class consults with the MBSCustomPageManager to determine its actions.

 * If an ISV's custom pages do not subclass MBSCustomPage then their page implementation must be
 * carefully coded to function properly while still respecting the rules laid out by the page manager.
 */
ToolchainData (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/MBSCustomPageData.java)/**
	 *  Stores data on a particular toolchain that a custom wizard page supports.
	 */
MBSCustomPageData (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/MBSCustomPageData.java)/**
 *   This class is responsible for storing all of the data associated with a given custom wizard page.
 */
MBSCustomPageManager (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/MBSCustomPageManager.java)/**
 *  This class is responsible for managing the use of custom pages in the Managed Build System's
 *  New Project wizards.
 *
 *  This class is a singleton.
 *
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MBSWizardHandler (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/MBSWizardHandler.java)/**
 * This object is created per each Project type
 *
 * It is responsible for:
 * - corresponding line in left pane of 1st wizard page
 * - whole view of right pane, including
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NewMakeProjFromExisting (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/NewMakeProjFromExisting.java)/**
 * Wizard to create a new CDT project that wraps existing code.
 * @since 7.0
 */
NewMakeProjFromExistingPage (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/NewMakeProjFromExistingPage.java)/**
 * Page to select existing code location and toolchain.
 *
 * @since 7.0
 */
StdBuildWizard (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/StdBuildWizard.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
STDWizardHandler (/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/STDWizardHandler.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
AutomatedIntegrationSuite (/build/org.eclipse.cdt.managedbuilder.ui.tests/src/org/eclipse/cdt/managedbuilder/ui/tests/suite/AutomatedIntegrationSuite.java)/**
 *
 */
TestCProjectPlatformPage (/build/org.eclipse.cdt.managedbuilder.ui.tests/src/org/eclipse/cdt/managedbuilder/ui/tests/TestCProjectPlatformPage.java)/**
 * Tests for the get/setSelectedProjectType() of CProjectPlatformPage.
 * @author Elias Volanakis
 */
TestCustomPageManager (/build/org.eclipse.cdt.managedbuilder.ui.tests/src/org/eclipse/cdt/managedbuilder/ui/tests/TestCustomPageManager.java)/**
 *   This class is responsible for testing the functionality of the custom page manager (MBSCustomPageManager)
 *   that manages custom wizard pages that are provided by ISVs to supplement the pages in the New Project wizards
 *   for Managed Build.
 *
 *   The idea behind the test plan is pretty simple.
 *
 *   There are seven custom wizard pages specified by this plugin.  One page has no restrictions placed upon it and
 *   thus should always be present.  There are two pages which are constrained by different natures respectively,
 *   two constrained by different toolchains, and two constrained by different project types.  The goal is to
 *   change around what options (i.e. nature, project type, toolchain) a hypothetical user would set, and then
 *   check to see if the proper pages are displayed in the proper order.
 */
TestsPlugin (/build/org.eclipse.cdt.managedbuilder.ui.tests/src/org/eclipse/cdt/managedbuilder/ui/tests/testplugin/TestsPlugin.java)/**
 * The main plugin class to be used in the desktop.
 */
IMesonToolChainFile (/build/org.eclipse.cdt.meson.core/src/org/eclipse/cdt/meson/core/IMesonToolChainFile.java)/**
 * A toolchain file.
 *
 * @noimplement
 * @noextend
 */
IMesonToolChainListener (/build/org.eclipse.cdt.meson.core/src/org/eclipse/cdt/meson/core/IMesonToolChainListener.java)/**
 * Listener for toolchain events.
 */
IMesonToolChainManager (/build/org.eclipse.cdt.meson.core/src/org/eclipse/cdt/meson/core/IMesonToolChainManager.java)/**
 * Manages toolchain files for Meson.
 *
 * @noimplement
 * @noextend
 */
MesonToolChainEvent (/build/org.eclipse.cdt.meson.core/src/org/eclipse/cdt/meson/core/MesonToolChainEvent.java)/**
 * Event occured with Meson ToolChain Files, either added or removed.
 */
RunNinjaPage (/build/org.eclipse.cdt.meson.ui/src/org/eclipse/cdt/internal/meson/ui/wizards/RunNinjaPage.java)/**
 * A Wizard dialog page to allow a user to specify environment variables
 * and options for a ninja command to be run against the active
 * build configuration for the project.
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
MesonPropertyPage (/build/org.eclipse.cdt.meson.ui/src/org/eclipse/cdt/meson/ui/properties/MesonPropertyPage.java)/**
 * Property page for Meson projects.  For unconfigured projects, we use the meson command and parse
 * the output of the --help option.  Otherwise, we use the meson configure command to find current
 * options and what may be changed via a meson configure call.
 *
 * We assume that the build directory is in project/build/configname, which is where
 * the CMake project wizard puts it. We also assume that "cmake-gui" is in the user's
 * PATH.
 */
AbstractSWTBotAssertions (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/AbstractSWTBotAssertions.java)/**
 * Custom assertions on a given {@link AbstractSWTBot} widget
 * @param <SWTWidget>
 */
ButtonAssertions (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/ButtonAssertions.java)/**
 * Custom assertions on a given {@link SWTBotButton}.
 */
CheckBoxAssertions (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/CheckBoxAssertions.java)/**
 * Custom assertions on a given {@link SWTBotCheckBox}.
 */
CloseShellRule (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/CloseShellRule.java)/**
 * Closes the wizard(s) after each test, if the "Cancel" button is available
 */
CloseWelcomePageRule (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/CloseWelcomePageRule.java)/**
 * Closes the Welcome page and optionally opens a given perspective
 */
ComboAssertions (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/ComboAssertions.java)/**
 * Custom assertions on a given {@link SWTBotCheckBox}.
 */
ConsoleViewRule (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/ConsoleViewRule.java)/**
 * An {@link ExternalResource} to close the Console view.
 */
MenuAssertion (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/MenuAssertion.java)/**
 * Custom assertions on a given {@link SWTBotButton}.
 */
ProjectExplorerViewRule (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/ProjectExplorerViewRule.java)/**
 * A JUnit {@link Rule} to open the Project Explorer view.
 */
RadioAssertion (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/RadioAssertion.java)/**
 * Custom assertions on a given {@link SWTBotRadio}.
 */
SWTBotTreeItemAssertions (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/SWTBotTreeItemAssertions.java)/**
 *
 */
SWTBotViewRule (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/SWTBotViewRule.java)/**
 *
 */
SWTUtils (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/SWTUtils.java)/**
 * Utility class for SWT
 */
TabDescriptorAssertions (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/TabDescriptorAssertions.java)/**
 * Custom assertions on a given {@link ITabDescriptor}.
 */
TestLoggerRule (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/TestLoggerRule.java)/**
 *
 */
TextAssertions (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/TextAssertions.java)/**
 * Custom assertions on an {@link SWTBotText}.
 */
ToolbarButtonAssertions (/build/org.eclipse.cdt.meson.ui.tests/src/org/eclipse/cdt/internal/meson/ui/tests/utils/ToolbarButtonAssertions.java)/**
 * Custom assertions on a given {@link SWTBotButton}.
 */
CodanCheckersActivator (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/checkers/CodanCheckersActivator.java)/**
 * The activator class controls the plug-in life cycle
 */
AbstractClassInstantiationChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/AbstractClassInstantiationChecker.java)/**
 * Reports a problem if object of a class cannot be created because
 * class is abstract (it self or its bases have one or more pure virtual
 * functions).
 *
 * @author Anton Gorenkov
 */
AssignmentToItselfChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/AssignmentToItselfChecker.java)/**
 * Checker that finds assignment to itself cases, such a
 * a = a. It can produce some false positives such as
 * a[f()]=a[f()] - but who writes code like that?
 */
SwitchFindingVisitor (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/CaseBreakChecker.java)/**
	 * This visitor looks for "switch" statements and invokes "SwitchVisitor" on
	 * them.
	 */
CatchByReference (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/CatchByReference.java)/**
 * Catching by reference is recommended by C++ experts, for example Herb
 * Sutter/Andrei Alexandresscu "C++ Coding Standards", Rule 73
 * "Throw by value, catch by reference".
 * For one thing, this avoids copying and potentially slicing the exception.
 *
 */
CheckersMessages (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/CheckersMessages.java)/**
 * Messages
 */
ClassMembersInitializationChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/ClassMembersInitializationChecker.java)/**
 * Checks that class members of simple types (int, float, pointers,
 * enumeration types, ...) are properly initialized in constructor.
 * Not initialized members may cause to unstable or random behavior
 * of methods that are working with their value.
 *
 * @author Anton Gorenkov
 */
CommentChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/CommentChecker.java)/**
 * Checker for some specific code style violations in comments
 */
CopyrightChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/CopyrightChecker.java)/**
 * Checker for lack of copyright information
 */
CFormatStringParser (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/fs/CFormatStringParser.java)/**
 * This class parses the format string argument and extracts all %s tokens.
 *
 * @version 0.2, June 04, 2010
 * @author Meisam Fathi
 */
ScanfFormatStringSecurityChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/fs/ScanfFormatStringSecurityChecker.java)/**
 * This checker detects format string vulnerabilities in the source code of
 * C/C++ applications.
 * <p>
 * e.g:
 * <p>
 * <code>
 * int f() { <br>
 * char inputstr[5]; <br>
 * scanf("%s", inputstr); // detects vulnerability here <br>
 * return 0; <br>
 * }
 * </code>
 * <p>
 * e.g:
 * <p>
 * <code>
 * int f(void) { <br>
 * char inputstr[5]; <br>
 * int inputval; <br>
 * int i = 5; <br>
 * scanf("%d %9s", inputval, inputstr); // detects vulnerability here <br>
 * printf("%d" ,i); <br>
 * return 0; <br>
 * } <br>
 * </code> <br>
 * <p>
 * e.g:
 * <p>
 * <code>
 * int main(void) { <br>
 * char inputstr[5]; <br>
 * int inputval; <br>
 * int i = 5; <br>
 * scanf("%4s %i", inputstr, inputval); // no vulnerability here <br>
 * printf("%d" ,i); <br>
 * return 0; <br>
 * } <br>
 * </code>
 *
 * @version 0.3 July 29, 2010
 * @author Meisam Fathi
 *
 */
VulnerableFormatStringArgument (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/fs/VulnerableFormatStringArgument.java)/**
 * @version 0.2 February 16, 2010
 * @author Meisam Fathi
 */
NamingConventionFunctionChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/NamingConventionFunctionChecker.java)/**
 * This is style checker for function name code style. Pattern parameter is
 * regular expression defining the style.
 */
NonVirtualDestructorChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/NonVirtualDestructorChecker.java)/**
 * Checker to find that class has virtual method and non virtual destructor
 *
 * @author Alena Laskavaia
 */
ReturnChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/ReturnChecker.java)/**
 * The checker suppose to find issue related to mismatched return value/function
 * declaration<br>
 * <li>Function declared as returning non-void returns void
 * <li>Function declared as returning void has non-void return
 * <li>Function declared as returning non-void has no return (requires control flow graph)
 */
StatementHasNoEffectChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/StatementHasNoEffectChecker.java)/**
 * Checker that detects statements without effect such as
 *
 * a+b;
 * or
 * +b;
 *
 *
 */
SuggestedParenthesisChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/SuggestedParenthesisChecker.java)/**
 * This checker finds a problems which are caused by lack of understanding
 * operator
 * precedence in C. In any case it is better to surround expressions in
 * parenthesis to improve readability. Example: ! x>0 && x<10 (this would be
 * (!x)>0 && x<10 in C) We only look for &&, || and ! operators (and binary | &
 * ^ ~)
 *
 * @author Alena
 *
 */
UnusedSymbolInFileScopeChecker (/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/UnusedSymbolInFileScopeChecker.java)/**
 * Checker looking for unused function or variable declarations.
 */
CheckersUiActivator (/codan/org.eclipse.cdt.codan.checkers.ui/src/org/eclipse/cdt/codan/internal/checkers/ui/CheckersUiActivator.java)/**
 * The activator class controls the plug-in life cycle
 */
Messages (/codan/org.eclipse.cdt.codan.checkers.ui/src/org/eclipse/cdt/codan/internal/checkers/ui/Messages.java)/**
 * Localizable messages.
 */
CatchByConstReferenceQuickFix (/codan/org.eclipse.cdt.codan.checkers.ui/src/org/eclipse/cdt/codan/internal/checkers/ui/quickfix/CatchByConstReferenceQuickFix.java)/**
 * Quick fix for catch by value
 */
CatchByReferenceQuickFix (/codan/org.eclipse.cdt.codan.checkers.ui/src/org/eclipse/cdt/codan/internal/checkers/ui/quickfix/CatchByReferenceQuickFix.java)/**
 * Quick fix for catch by value
 */
QuickFixAssignmentInCondition (/codan/org.eclipse.cdt.codan.checkers.ui/src/org/eclipse/cdt/codan/internal/checkers/ui/quickfix/QuickFixAssignmentInCondition.java)/**
 * quick fix for assignment in condition
 */
CodanCorePlugin (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/CodanCorePlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
CodanRuntime (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/CodanRuntime.java)/**
 * Runtime singleton class to get access to Codan framework parts
 *
 * Clients may extend this class to override default framework parts.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 */
AbstractChecker (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/AbstractChecker.java)/**
 * Convenience implementation of IChecker interface. Has a default
 * implementation for common methods.
 */
AbstractCheckerWithProblemPreferences (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/AbstractCheckerWithProblemPreferences.java)/**
 * AbstractChecker that has extra methods to simplify adding problem preferences.
 * Checker can produce several problems, but preferences are per problem.
 * Sharing preferences between problems is not supported now.
 */
AbstractProblemLocation (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/AbstractProblemLocation.java)/**
 * Abstract Implementation of IProblemLocation
 *
 * Clients may extend this class.
 */
AbstractProblemReporter (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/AbstractProblemReporter.java)/**
 * Abstract implementation of a IProblemReporter
 *
 * @since 2.0
 */
IBasicBlock (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/IBasicBlock.java)/**
 * Control flow graph's basic block node - super interface of all nodes.
 * It has set on incoming nodes and outgoing nodes.
 * <p/>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBranchNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/IBranchNode.java)/**
 * Node that represent empty operator with label, such as case branch or label
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICfgData (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/ICfgData.java)/**
 * Interface to access data object that control flow graph block carries,
 * usually it is an ast node.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IConnectorNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/IConnectorNode.java)/**
 * Connector node has multiple incoming branches and single outgoing.
 * Incoming nodes are usually instance of {@link IJumpNode}
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IControlFlowGraph (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/IControlFlowGraph.java)/**
 * Represents control flow graph (CFG) object.
 * This is "normalized" control flow graph, with typed nodes:
 * <br>
 * <li> {@link IStartNode} - start node of the cfg (source)
 * <li> {@link IExitNode} - exit node of the cfg (sink)
 * <li> {@link IPlainNode} - has one incoming one outgoing
 * <li> {@link IDecisionNode} - has one incoming and the only node that can have
 * multiple outcoming
 * arcs
 * <li> {@link IConnectorNode} - the only node that can have multiple incoming
 * arcs, and one outgoing
 * <li> {@link IJumpNode} - has one incoming and one outgoing but represent
 * change of control direction
 * <li> {@link IBranchNode} - usually node where decision node connect to,
 * labels represent a way where controls goes to
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IDecisionNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/IDecisionNode.java)/**
 *
 * Interface for decision node. This node represent condition node in the graph,
 * it has one incoming arc and many outgoing, each of outgoing node should be
 * IBranchNode
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IExitNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/IExitNode.java)/**
 * Exit node of the graph. Usually return from the function, can also be throw
 * or abort, such at exit(0) call.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IJumpNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/IJumpNode.java)/**
 * Node that changes the control of the graph, i.e. passes control to non-next
 * statement. Can be used to implement gotos, break, continue, end of branches.
 * Outgoing node is always {@link IConnectorNode}
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
INodeFactory (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/INodeFactory.java)/**
 * Control Flow Graph Node factory
 *
 * @noextend This interface is not intended to be extended by clients.
 */
IPlainNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/IPlainNode.java)/**
 * Has one incoming, one outgoing connection. Usually expression statement or
 * declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISingleIncoming (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/ISingleIncoming.java)/**
 * Node with one incoming arc
 *
 * @noextend This interface is not intended to be extended by clients.
 */
ISingleOutgoing (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/ISingleOutgoing.java)/**
 * Node with one outgoing arc
 *
 * @noextend This interface is not intended to be extended by clients.
 */
IStartNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/cfg/IStartNode.java)/**
 * Start node of the control flow graph. Each graph has only one start node. It
 * has no incoming arcs and one outgoing arc. It also contains iterator for
 * function exit nodes.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
Checkers (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/Checkers.java)/**
 * Utility methods related to <code>{@link IChecker}</code>.
 *
 * @since 2.0
 */
IChecker (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IChecker.java)/**
 * Interface that checker must implement (through extending directly or
 * indirectly {@link AbstractChecker}.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *              Extend {@link AbstractChecker} class instead.
 */
ICheckerInvocationContext (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/ICheckerInvocationContext.java)/**
 * Context object that can be used to store data shared between different
 * checkers operating on the same resource. The context and all objects stored
 * in it are disposed of at the end of processing of a resource. May store
 * objects of arbitrary types but only a single instance per type.
 * <p>
 * Implementations of this interface are guaranteed to be thread-safe.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 2.0
 */
ICheckersRegistry (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/ICheckersRegistry.java)/**
 * This interface an API to add/remove checker and problems programmatically,
 * get problem profiles and change problem default settings
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICheckerWithPreferences (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/ICheckerWithPreferences.java)/**
 * Interface for checker with parameters, if checker implements this interface
 * method would be called on initialization so checker has a chance to set
 * default values for its parameters. It is recommended to use
 * {@link AbstractCheckerWithProblemPreferences} insted of implementing it
 * directly.<p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 *
 * @noextend This interface is not intended to be extended by clients.
 */
ICodanBuilder (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/ICodanBuilder.java)/**
 * Interface for "Codan Builder". Clients can call processResource method to
 * traverse the resource tree. It will be calling all the checkers (this
 * interface allows to call framework without using UI). You can obtain instance
 * of this class as CodanRuntime.getInstance().getBuilder()
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICodanDisposable (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/ICodanDisposable.java)/**
 * <p>
 * An interface for objects that own resources that have to be explicitly
 * released. A disposable object is guaranteed to receive a {@link #dispose()} call
 * when it is not longer needed. At this point, the object must release all resources
 * and detach all listeners. A disposable object can only be disposed once; it cannot
 * be reused.
 * </p>
 * <p>
 * This interface can be extended or implemented by clients.
 * </p>
 * @since 2.0
 */
ICodanProblemMarker (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/ICodanProblemMarker.java)/**
 * Instance of a problem. Intermediate representation before problem become a
 * marker.
 *
 * @since 2.0
 */
IProblem (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblem.java)/**
 * Interface representing code analysis problem type. For example
 * "Null Pointer Dereference" is a problem. It has user visible Name and Message
 * (translatable), as well as some other parameters, changeable by user such as
 * enablement, severity and so on. Same problem cannot have two severities
 * determined by runtime. If it is the case - two Problems should be created
 * (i.e. one for error and one for warning). All of problem attributes are
 * defined in a checker extension point.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemCategory (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemCategory.java)/**
 * Problem category. Allows to group problems.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemElement (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemElement.java)/**
 * Problem element represents problem category {@link IProblemCategory} or
 * problem {@link IProblem}
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemLocation (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemLocation.java)/**
 * Interface to describe problem location. Usually contains file and line number,
 * also supports character positions for sophisticated errors.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemLocationFactory (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemLocationFactory.java)/**
 * Factory interface that allows to create problem locations.
 *
 * Clients may implement and extend this interface.
 */
IProblemMultiple (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemMultiple.java)/**
 * Additional interface to the problem kind to quiry either it supports multiple
 * instances or not
 *
 * @since 2.0
 */
IProblemProfile (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemProfile.java)/**
 * Problem Profile contains tree of categories and problems. For the user
 * the profile is quick way to switch between problem sets depending on the
 * task he is doing (i.e. find real bugs, vs doing code style report)
 * User can set different profiles for different projects.
 * Profiles can have different categories and different problem sets,
 * problems with the same id can have different severities/enablement in
 * different profiles.
 * Category tree can have few reference to a same problem, but only instance of
 * Problem
 * with the same id can exist in the same profile (i.e. two category can have
 * same problem listed in both,
 * but they both should point to the same problem instance).
 *
 * To obtain read-only profile use method
 * {@link CheckersRegistry#getResourceProfile},
 * {@link CheckersRegistry#getDefaultProfile()} or
 * {@link CheckersRegistry#getWorkspaceProfile()}
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemReporter (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemReporter.java)/**
 * IProblemReporter - interface to report problems.
 *
 * It is recommended to extend {@link AbstractProblemReporter} instead
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will
 * work or that it will remain the same.
 * </p>
 */
IProblemReporterPersistent (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemReporterPersistent.java)/**
 * IProblemReporterPersistent - interface to report problems, which are
 * persistent, ex. markers
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 */
IProblemReporterSessionPersistent (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemReporterSessionPersistent.java)/**
 * IProblemReporterPersistent - interface to report problems, which are
 * persistent, e.g. markers. Also this object has context of checker and
 * current resource, which allows to manage markers better - i.e. instead of
 * deleting replace them when needed, and queue markers for insertion instead
 * of add right away.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 *
 * @since 2.0
 */
IProblemWorkingCopy (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IProblemWorkingCopy.java)/**
 * Modifiable problem.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IRunnableInEditorChecker (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/IRunnableInEditorChecker.java)/**
 * Interface for checkers that can be run when user is typing, checker has to be
 * very quick to run in this mode
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 *
 * @noextend This interface is not intended to be extended by clients.
 */
Messages (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/Messages.java)/**
 * Core Messages
 */
ProblemProfileChangeEvent (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/model/ProblemProfileChangeEvent.java)/**
 * An event object describing the details of a change to a preference
 * in the preference store.
 *
 * @since 2.0
 * @deprecated use {@link IEclipsePreferences} change listener event instead.
 */
AbstractProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/AbstractProblemPreference.java)/**
 * Default implementation of problem preference. It keeps preference metadata
 * together with preference value. Some implementations may separate them.
 *
 */
BasicProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/BasicProblemPreference.java)/**
 * Preference representing a problem preference of a basic type.
 *
 * @see IProblemPreferenceDescriptor.PreferenceType for types.
 *
 */
FileScopeProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/FileScopeProblemPreference.java)/**
 * Custom preference for resource scope
 *
 * @noextend This class is not intended to be extended by clients.
 * @since 1.0
 */
IProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/IProblemPreference.java)/**
 * Problem preference. If problem has more than one it can be composite, i.e.
 * map. Instead of implementing this interface clients must extend
 * {@link AbstractProblemPreference} class.
 *
 * Problem Preference constist of preference metadata
 * (IProblemPreferenceDescriptor)
 * and value of preference (IProblemPreferenceValue).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemPreferenceCompositeDescriptor (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/IProblemPreferenceCompositeDescriptor.java)/**
 * Composite descriptor. For descriptors like map and list.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemPreferenceCompositeValue (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/IProblemPreferenceCompositeValue.java)/**
 * Interface for container type preferences, such as map or list
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemPreferenceDescriptor (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/IProblemPreferenceDescriptor.java)/**
 * Problem parameter usually key=value settings that allows to alter checker
 * behaviour for given problem. For example if checker finds violation of naming
 * conventions for function, parameter would be the pattern of allowed names.
 *
 * IProblemPreferenceDescriptor represent preference's meta-info for the ui. If
 * more than one parameter is required it can be map or list of sub-preferences.
 * This is only needed for auto-generated ui for parameter
 * editing. For more complex cases custom ui control should be used. Extend
 * {@link AbstractProblemPreference} class
 * to implement this interface.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemPreferenceValue (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/IProblemPreferenceValue.java)/**
 * Value of the problem preference. If more than one it can be composite, i.e.
 * map.Extend {@link AbstractProblemPreference} class
 * to implement this interface.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
LaunchModeProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/LaunchModeProblemPreference.java)/**
 * Problem preference for launch type of the checker
 *
 * @since 2.0
 */
ListProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/ListProblemPreference.java)/**
 * List implementation of IProblemPreference.
 *
 * @noextend This class is not intended to be extended by clients.
 */
MapProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/MapProblemPreference.java)/**
 * MapProblemPreference - for checker that needs more than one preferences and
 * they all differently "named".
 * For example checker for parameter names shadowing would have two boolean
 * options:
 * "check constructors" and
 * "check setters". In this case you use this type.
 * {@link AbstractCheckerWithProblemPreferences} class has map as default top
 * level parameter preference.
 *
 * @noextend This class is not intended to be extended by clients.
 */
Messages (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/Messages.java)/**
 * Core Messages
 */
RootProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/RootProblemPreference.java)/**
 * Common problem preference root for most of the codan problems
 *
 * @noextend This class is not intended to be extended by clients.
 * @since 2.0
 */
SharedRootProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/SharedRootProblemPreference.java)/**
 * Preferences that can be shared among several problems.
 *
 * @since 2.1
 */
SuppressionCommentProblemPreference (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/param/SuppressionCommentProblemPreference.java)/**
 * Preference for suppressing a problem using code comments. Automatically added to all problems.
 * @since 4.0
 */
PreferenceConstants (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/core/PreferenceConstants.java)/**
 * Constant definitions for plug-in preferences
 */
AbstractBasicBlock (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/AbstractBasicBlock.java)/**
 * Abstract Basic Block for control flow graph.
 */
AbstractSingleIncomingNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/AbstractSingleIncomingNode.java)/**
 * Abstract node with one incoming arc (node)
 *
 */
AbstractSingleOutgoingNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/AbstractSingleOutgoingNode.java)/**
 * Abstract implementation of basic block with single outgoing arc (node)
 *
 */
BranchNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/BranchNode.java)/**
 * Branch node is a node with on incoming arc, one outgoing arc and a "string"
 * label. Can be used to represent branches of if, switch and labelled
 * statements.
 */
ConnectorNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/ConnectorNode.java)/**
 * TODO: add description
 */
ControlFlowGraph (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/ControlFlowGraph.java)/**
 * Implementation of control flow graph
 */
DecisionNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/DecisionNode.java)/**
 * @see IDecisionNode
 */
ExitNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/ExitNode.java)/**
 * Plain node has one prev one jump
 */
JumpNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/JumpNode.java)/**
 * Jump node is node that connects unusual control pass, such as goto, break and
 * continue
 *
 */
NodeFactory (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/NodeFactory.java)/**
 * Factory that creates cfg nodes
 */
PlainNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/PlainNode.java)/**
 * Plain node has one incoming arc and one outgoing arc
 *
 */
StartNode (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/cfg/StartNode.java)/**
 * Start node has no incoming, one outgoing and it is connect to function exits
 *
 */
CharOperation (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/CharOperation.java)/**
 * This class is a collection of helper methods to manipulate char arrays.
 *
 * @since 2.1
 */
CheckerInvocationContext (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/CheckerInvocationContext.java)/**
 * Implementation of ICheckerInvocationContext.
 * This class is thread-safe.
 */
CheckersRegistry (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/CheckersRegistry.java)/**
 * Implementation of checker registry interface
 */
CheckersTimeStats (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/CheckersTimeStats.java)/**
 * Class to collect time states for checkers runs
 */
CodanApplication (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/CodanApplication.java)/**
 * Application to support headless build
 *
 * @noextend This class is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CodanBuilder (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/CodanBuilder.java)/**
 * Implementation of {@link ICodanBuilder}
 */
CodanPreferencesLoader (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/CodanPreferencesLoader.java)/**
 * Helper class to load/save problem profile settings in persistent storage
 *
 */
CodanRunner (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/CodanRunner.java)/**
 * Collection of methods for running checkers.
 *
 * Clients: this should not be called directly, use ICodanBuilder interface instead
 *
 * CodanRuntime.getInstance().getBuilder()
 */
CodeAnalysisNature (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/CodeAnalysisNature.java)/**
 * Code Analysis Nature for builder
 */
ICheckerEnablementVerifier (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/ICheckerEnablementVerifier.java)/**
 * Verifies that an <code>{@link IChecker}</code> can be invoked.
 */
Messages (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/Messages.java)/**
 * Core Messages
 */
CodanMarkerProblemReporter (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/model/CodanMarkerProblemReporter.java)/**
 * Problem reported that created eclipse markers
 */
CodanProblem (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/model/CodanProblem.java)/**
 * A type of problems reported by Codan.
 */
CodanProblemCategory (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/model/CodanProblemCategory.java)/**
 * TODO: add description
 */
CodanProblemElement (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/model/CodanProblemElement.java)/**
 * base class for category and problem
 */
CodanProblemLocation (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/model/CodanProblemLocation.java)/**
 * Codan Problem Location, so far same as abstract class
 *
 */
CodanProblemMarker (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/model/CodanProblemMarker.java)/**
 * Instance of a problem. Intermediate representation before problem become a
 * marker
 *
 * @since 1.1
 */
ProblemLocationFactory (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/model/ProblemLocationFactory.java)/**
 * Factory class that allows to create problem locations
 */
ProblemProfile (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/model/ProblemProfile.java)/**
 * @author Alena
 */
PreferenceInitializer (/codan/org.eclipse.cdt.codan.core/src/org/eclipse/cdt/codan/internal/core/PreferenceInitializer.java)/**
 * Class used to initialize default preference values.
 */
Activator (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
CxxAstUtils (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/CxxAstUtils.java)/**
 * Useful functions for doing code analysis on C/C++ AST.
 */
AbstractExternalToolBasedChecker (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/AbstractExternalToolBasedChecker.java)/**
 * Base class for checkers that invoke external command-line tools to perform code checking.
 * <p>
 * A file, to be processed by this type of checker, must:
 * <ol>
 * <li>be in the current active editor</li>
 * <li>not have any unsaved changes</li>
 * </ol>
 * </p>
 * By default, implementations of this checker are not allowed to run while the user types, since
 * external tools cannot see unsaved changes.
 *
 * @since 2.1
 */
ArgsSeparator (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/ArgsSeparator.java)/**
 * Separates the arguments, stored as a single {@code String}, to pass to an external tool. It uses
 * an empty space as the delimiter and supports quoted arguments.
 *
 * @since 2.1
 */
ConfigurationSettings (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/ConfigurationSettings.java)/**
 * User-configurable external tool settings.
 *
 * @since 2.1
 */
IInvocationParametersProvider (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/IInvocationParametersProvider.java)/**
 * Provides the parameters to pass when invoking an external tool.
 *
 * @since 2.1
 */
InvocationFailure (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/InvocationFailure.java)/**
 * Indicates that invocation of an external tool failed.
 *
 * @since 2.1
 */
InvocationParameters (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/InvocationParameters.java)/**
 * Parameters to pass when invoking an external tool.
 *
 * @since 2.1
 */
InvocationParametersProvider (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/InvocationParametersProvider.java)/**
 * Default implementation of <code>{@link InvocationParameters}</code>
 *
 * @since 2.1
 */
SingleConfigurationSetting (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/SingleConfigurationSetting.java)/**
 * Single external tool configuration setting.
 * @param <T> the type of the value this setting stores.
 *
 * @noextend This class is not intended to be extended by clients.
 * @since 2.1
 */
ArgsSetting (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/externaltool/ArgsSetting.java)/**
 * User-configurable setting that specifies the arguments to pass when invoking the external tool.
 * The arguments are stored in a single {@code String}.
 */
Command (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/externaltool/Command.java)/**
 * The command to execute to invoke an external tool.
 */
CommandBuilder (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/externaltool/CommandBuilder.java)/**
 * Creates the command to use to invoke an external tool.
 */
ExternalToolInvoker (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/externaltool/ExternalToolInvoker.java)/**
 * Invokes an external tool to perform checks on a single file.
 */
PathSetting (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/externaltool/PathSetting.java)/**
 * User-configurable setting that specifies the path and name of an external tool's executable.
 */
ControlFlowGraphBuilder (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/cfg/ControlFlowGraphBuilder.java)/**
 * This class creates C control flow graph
 */
CxxBranchNode (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/cfg/CxxBranchNode.java)/**
 * TODO: add description
 */
CxxControlFlowGraph (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/cfg/CxxControlFlowGraph.java)/**
 * TODO: add description
 */
CxxDecisionNode (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/cfg/CxxDecisionNode.java)/**
 * TODO: add description
 */
CxxExitNode (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/cfg/CxxExitNode.java)/**
 * TODO: add description
 */
CxxNodeFactory (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/cfg/CxxNodeFactory.java)/**
 * TODO: add description
 */
CxxPlainNode (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/cfg/CxxPlainNode.java)/**
 * TODO: add description
 */
CxxStartNode (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/cfg/CxxStartNode.java)/**
 * TODO: add description
 */
CodanCommentMap (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/CodanCommentMap.java)/**
 * Implementation of ICodanCommentMap.
 */
CxxCodanReconciler (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/internal/model/CxxCodanReconciler.java)/**
 * @author Alena
 */
AbstractAstFunctionChecker (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/AbstractAstFunctionChecker.java)/**
 * Abstract class for checkers that do all the work on function definition level
 */
AbstractCElementChecker (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/AbstractCElementChecker.java)/**
 * Implementation of IChecker that works with translation unit without locking
 * the index
 *
 * Clients may extend this class.
 * @since 3.3
 */
AbstractCIndexChecker (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/AbstractCIndexChecker.java)/**
 * Implementation of IChecker that works with C-Index of a file (but not AST)
 *
 * Clients may extend this class.
 */
AbstractIndexAstChecker (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/AbstractIndexAstChecker.java)/**
 * Convenience implementation of checker that works on index-based AST of a
 * C/C++
 * program.
 *
 * Clients may extend this class.
 */
CodanMarkerGenerator (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/CodanMarkerGenerator.java)/**
 * Default implementation of IMarkerGenerator for API's that require such thing
 *
 * @since 3.3
 */
CxxModelsCache (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/CxxModelsCache.java)/**
 * Cache data models for resource so checkers can share it
 */
ICAstChecker (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/ICAstChecker.java)/**
 * Checker that can/want to process C/C++ AST (Abstract Syntax Tree) of a
 * program
 * Default implementation {@link AbstractIndexAstChecker}
 *
 * Clients may implement and extend this interface.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will
 * work or that it will remain the same.
 * </p>
 */
ICIndexChecker (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/ICIndexChecker.java)/**
 * Extension of IChecker that works with C-Index of a file (but not AST)
 * Default implementation {@link AbstractCIndexChecker}
 *
 * Client may implement this interface.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will
 * work or that it will remain the same.
 * </p>
 */
ICodanCommentMap (/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/ICodanCommentMap.java)/**
 * Comment map allows to get comments before of after the specific ast node
 */
ControlFlowGraphTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/cfg/ControlFlowGraphTest.java)/**
 * Tests for ControlFlowGraph
 */
CxxAstUtilsTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/cxx/CxxAstUtilsTest.java)/**
 * Test CxxAstUtils
 */
ArgsSeparatorTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/cxx/externaltool/ArgsSeparatorTest.java)/**
 * Tests for <code>{@link ArgsSeparator}</code>.
 */
AbstractClassInstantiationCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/AbstractClassInstantiationCheckerTest.java)/**
 * Test for {@see AbstractClassInstantiationChecker} class
 */
AssignmentInConditionCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/AssignmentInConditionCheckerTest.java)/**
 * Test for {@see AssignmentInConditionChecker} class
 */
AssignmentOperatorCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/AssignmentOperatorCheckerTest.java)/**
 * Test for {@link AssignmentOperatorChecker} class
 */
AssignmentToItselfCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/AssignmentToItselfCheckerTest.java)/**
 * Test for {@see AssignmentToItselfChecker} class
 */
BlacklistCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/BlacklistCheckerTest.java)/**
 * Test for {@link BlacklistChecker} class
 */
CaseBreakCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/CaseBreakCheckerTest.java)/**
 * Test for {@link CaseBreakChecker} class
 */
CatchByReferenceTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/CatchByReferenceTest.java)/**
 * Test for {@see CatchByReference} class
 */
ClassMembersInitializationCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/ClassMembersInitializationCheckerTest.java)/**
 * Test for {@see ClassMembersInitializationChecker} class
 */
CommentCheckerLineTests (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/CommentCheckerLineTests.java)/**
 * Tests for CommentChecker
 */
CommentCheckerNestedTests (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/CommentCheckerNestedTests.java)/**
 * Tests for CommentChecker
 */
CopyrightCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/CopyrightCheckerTest.java)/**
 * Test for {@link CopyrightChecker} class
 */
CStyleCastCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/CStyleCastCheckerTest.java)/**
 * Test for {@link UsingInHeaderChecker} class
 */
DecltypeAutoCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/DecltypeAutoCheckerTest.java)/**
 * Test for {@link DecltypeAutoChecker} class
 */
FloatCompareCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/FloatCompareCheckerTest.java)/**
 * Test for {@link FloatCompareChecker} class
 */
FormatStringCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/FormatStringCheckerTest.java)/**
 * Test for {@see FormatStringChecker} class
 */
GotoStatementCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/GotoStatementCheckerTest.java)/**
 * Test for {@link GotoStatementChecker} class
 */
NonVirtualDestructorCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/NonVirtualDestructorCheckerTest.java)/**
 * Test for {@link NonVirtualDestructorChecker} class.
 */
ReturnCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/ReturnCheckerTest.java)/**
 * Test for {@see ReturnCheckerTest} class
 */
StatementHasNoEffectCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/StatementHasNoEffectCheckerTest.java)/**
 * Test for {@see StatementHasNoEffectChecker} class
 */
SuggestedParenthesisCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/SuggestedParenthesisCheckerTest.java)/**
 * Test for {@see SuggestedParenthesisChecker} class
 */
SwitchCaseCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/SwitchCaseCheckerTest.java)/**
 * Test for {@link SwitchCaseChecker} class
 */
UnusedSymbolInFileScopeCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/UnusedSymbolInFileScopeCheckerTest.java)/**
 * Test for {@see UnusedSymbolInFileScopeChecker} class
 */
UsingInHeaderCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/UsingInHeaderCheckerTest.java)/**
 * Test for {@link UsingInHeaderChecker} class
 */
VariablesCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/VariablesCheckerTest.java)/**
 * Test for {@link VariableInitializationChecker} class
 */
VirtualMethodCallCheckerTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/internal/checkers/VirtualMethodCallCheckerTest.java)/**
 * Test for {@link VirtualMethodCallChecker} class
 */
BasicProblemPreferenceTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/param/BasicProblemPreferenceTest.java)/**
 * Test for BasicProblemPreference
 */
ListProblemPreferenceTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/param/ListProblemPreferenceTest.java)/**
 * Test for BasicProblemPreference
 */
MapProblemPreferenceTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/param/MapProblemPreferenceTest.java)/**
 * Test for BasicProblemPreference
 */
CheckerTestCase (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/tests/CheckerTestCase.java)/**
 * Base class for tests. If you want to use outside of this plugin, you need
 * to override {@link #getPlugin()} method and maybe {@link #getSourcePrefix()}
 * method to get source directory for the tests,
 * default is "src". To make it read comment from java class, you need to
 * include this source directory (with test java files) into the build bundle.
 *
 */
CodanCoreTestActivator (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/tests/CodanCoreTestActivator.java)/**
 * The activator class controls the plug-in life cycle
 */
CodanFastCxxAstTestCase (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/tests/CodanFastCxxAstTestCase.java)/**
 * TODO: add description
 */
CodanTestCase (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/tests/CodanTestCase.java)/**
 * TODO: add description
 */
TestUtils (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/core/tests/TestUtils.java)/**
 * TODO: add description
 */
CatchByReferenceQuickFixTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/internal/checkers/ui/quickfix/CatchByReferenceQuickFixTest.java)/**
 * @author Tomasz Wesolowski
 */
CreateLocalVariableQuickFixTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/internal/checkers/ui/quickfix/CreateLocalVariableQuickFixTest.java)/**
 * @author Tomasz Wesolowski
 */
QuickFixTestCase (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/internal/checkers/ui/quickfix/QuickFixTestCase.java)/**
 * Abstract base class for Quck Fix tests.
 */
SuggestedParenthesisQuickFixTest (/codan/org.eclipse.cdt.codan.core.tests/src/org/eclipse/cdt/codan/internal/checkers/ui/quickfix/SuggestedParenthesisQuickFixTest.java)/**
 * Test for quick fix for suggested parenthesis
 */
Activator (/codan/org.eclipse.cdt.codan.examples/src/org/eclipse/cdt/codan/examples/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
CppcheckChecker (/codan/org.eclipse.cdt.codan.examples/src/org/eclipse/cdt/codan/examples/checkers/cppcheck/CppcheckChecker.java)/**
 * Checker that invokes <a href="http://cppcheck.sourceforge.net/">Cppcheck</a> when a C/C++ file is
 * saved.
 */
CppcheckOutputParser (/codan/org.eclipse.cdt.codan.examples/src/org/eclipse/cdt/codan/examples/checkers/cppcheck/CppcheckOutputParser.java)/**
 * Parses the output of Cppcheck.
 */
CToolChecker (/codan/org.eclipse.cdt.codan.examples/src/org/eclipse/cdt/codan/examples/checkers/CToolChecker.java)/**
 * @author elaskavaia
 *
 */
GrepChecker (/codan/org.eclipse.cdt.codan.examples/src/org/eclipse/cdt/codan/examples/checkers/GrepChecker.java)/**
 * This is sample of non AST checker integration. This one is not
 * external checker because it does not actually call other process, but it
 * can easily made into one.
 *
 * This checker is parametrized by the search strings
 */
NamingConventionFunctionIIndexChecker (/codan/org.eclipse.cdt.codan.examples/src/org/eclipse/cdt/codan/examples/checkers/NamingConventionFunctionIIndexChecker.java)/**
 * Example demonstrate how to write checked using "C Model"
 *
 * @author Alena
 *
 */
FlexlintHelpLink (/codan/org.eclipse.cdt.codan.examples/src/org/eclipse/cdt/codan/examples/uicontrib/FlexlintHelpLink.java)/**
 * Example of codan problem details provider for flexlint integration
 */
GrepCheckerExamplePreferenceChangeListener (/codan/org.eclipse.cdt.codan.examples/src/org/eclipse/cdt/codan/examples/uicontrib/GrepCheckerExamplePreferenceChangeListener.java)/**
 * Example of property change listener for changing error profiles using eclipse preferences.
 * Too see debug prints uncomment printout line in {@link #trace(String) function }
 * In this examples plugin this listener is activated on startup by calling ProfileChangeListener.getInstance(), see
 * {@link Activator#start(org.osgi.framework.BundleContext)}
 * Note: this example will not properly listen on properties for new or deleted projects
 */
GrepCheckerHelpLink (/codan/org.eclipse.cdt.codan.examples/src/org/eclipse/cdt/codan/examples/uicontrib/GrepCheckerHelpLink.java)/**
 * Example of codan problem details provider for string search integration
 */
CheckerEnablementVerifier (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/CheckerEnablementVerifier.java)/**
 * Default implementation of <code>{@link ICheckerEnablementVerifier}</code>.
 */
CodanUIActivator (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/CodanUIActivator.java)/**
 * The activator class controls the plug-in life cycle
 */
CodanUIMessages (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/CodanUIMessages.java)/**
 * Externalized messages
 */
CustomizeProblemDialog (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/dialogs/CustomizeProblemDialog.java)/**
 * Dialog that allows to customise problems
 *
 */
CheckedTreeEditor (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/preferences/CheckedTreeEditor.java)/**
 * An abstract field editor that manages a checked tree. Values in the tree
 * should be set outside by setting getTreeViewer().setContentProvider() and
 * getTreeViewer().setInput() Control stores checked elements only in preference
 * storage.
 *
 * <p>
 * Subclasses may implement the <code>parseString</code>,
 * <code>createList</code>, <code>storeValue</code> and
 * <code>getListSeparator</code> framework methods.
 * </p>
 */
CodanPreferencePage (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/preferences/CodanPreferencePage.java)/**
 * This class represents a preference page that is contributed to the Preferences dialog.
 * By subclassing {@code FieldEditorPreferencePage}, we can use built-in field support in
 * JFace to create a page that is both small and knows how to save, restore and apply its
 * values.
 * <p>
 * This page is used to modify preferences only. They are stored in the preference store that
 * belongs to the main plug-in class. That way, preferences can be accessed directly via
 * the preference store.
 * </p>
 */
FieldEditorOverlayPage (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/preferences/FieldEditorOverlayPage.java)/**
 * @author Berthold Daum
 */
GenericCodanProblemDetailsProvider (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/views/GenericCodanProblemDetailsProvider.java)/**
 * This provides details for errors that do not have own details provider
 */
ProblemDetails (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/views/ProblemDetails.java)/**
 * Problems Details view show details for selected problem marker.
 * Other plugins can contribute to override default behaviour using
 * codanProblemDetails extension point.
 */
ProblemDetailsExtensions (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/views/ProblemDetailsExtensions.java)/**
 * Class that can load extension for problemDetails
 */
BasicElementLabels (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/widgets/BasicElementLabels.java)/**
 * A label provider for basic elements like paths. The label provider will make
 * sure that the labels are correctly
 * shown in RTL environments.
 *
 * @since 3.4
 */
CustomizeProblemComposite (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/widgets/CustomizeProblemComposite.java)/**
 * Composite for problem customisable parameters
 *
 */
FileScopeComposite (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/widgets/FileScopeComposite.java)/**
 * Composite to show problem scope
 *
 */
LaunchingTabComposite (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/widgets/LaunchingTabComposite.java)/**
 * Composite to show problem launchPref
 *
 */
ParametersComposite (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/widgets/ParametersComposite.java)/**
 * Composite to show problem preferences
 *
 */
AbstractCodanProblemDetailsProvider (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/ui/AbstractCodanProblemDetailsProvider.java)/**
 * Abstract class that provides stubs for problems details.
 * This class intended to be extended by the users of codanProblemDetails
 * extension point.
 * One instance of this class would exists at runtime. To query for results,
 * framework
 * would synchronize on this class object, set setMarker then call other
 * getStyled* methods
 * to obtain data.
 */
CodanEditorUtility (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/ui/CodanEditorUtility.java)/**
 * Utility tools to open editor and highlight the line
 */
RunCodanCommand (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/ui/handlers/RunCodanCommand.java)/**
 * Command to run code analysis on selected resources
 *
 * @see org.eclipse.core.commands.IHandler
 * @see org.eclipse.core.commands.AbstractHandler
 */
ICodanMarkerResolution (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/ui/ICodanMarkerResolution.java)/**
 * Interface for codan marker resolution
 *
 * @since 2.0
 */
ICodanMarkerResolutionExtension (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/ui/ICodanMarkerResolutionExtension.java)/**
 * @since 3.3
 */
LabelFieldEditor (/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/ui/LabelFieldEditor.java)/***
 * A field editor for displaying labels not associated with other widgets.
 *
 * @author fgiust
 * @version $Revision: 1.1 $ ($Author: elaskavaia $)
 * @since 2.0
 */
ControlFlowGraphPlugin (/codan/org.eclipse.cdt.codan.ui.cfgview/src/org/eclipse/cdt/codan/ui/cfgview/ControlFlowGraphPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
ControlFlowGraphView (/codan/org.eclipse.cdt.codan.ui.cfgview/src/org/eclipse/cdt/codan/ui/cfgview/views/ControlFlowGraphView.java)/**
 * This sample class demonstrates how to plug-in a new workbench view. The view
 * shows data obtained from the model. The sample creates a dummy model on the
 * fly, but a real implementation would connect to the model available either in
 * this or another plug-in (e.g. the workspace). The view is connected to the
 * model using a content provider.
 * <p>
 * The view uses a label provider to define how model objects should be
 * presented in the view. Each view can present the same model objects using
 * different labels and icons, if needed. Alternatively, a single label provider
 * can be shared between views in order to ensure that objects of the same type
 * are presented in the same way everywhere.
 * <p>
 */
AbstractCodanCQuickFixProcessor (/codan/org.eclipse.cdt.codan.ui.cxx/src/org/eclipse/cdt/codan/internal/ui/cxx/AbstractCodanCQuickFixProcessor.java)/**
 * Abstract class IQuickFixProcessor - not used right now because it does not work
 * properly for non hardcoded errors.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 * </p>
 */
Activator (/codan/org.eclipse.cdt.codan.ui.cxx/src/org/eclipse/cdt/codan/internal/ui/cxx/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
CodanCReconciler (/codan/org.eclipse.cdt.codan.ui.cxx/src/org/eclipse/cdt/codan/internal/ui/cxx/CodanCReconciler.java)/**
 * @author Alena
 */
CodanPartListener (/codan/org.eclipse.cdt.codan.ui.cxx/src/org/eclipse/cdt/codan/internal/ui/cxx/CodanPartListener.java)/**
 * Enables Codan's "run as you type", "run on file save" and "run on file open" launch modes.
 */
CodanWindowListener (/codan/org.eclipse.cdt.codan.ui.cxx/src/org/eclipse/cdt/codan/internal/ui/cxx/CodanWindowListener.java)/**
 * Used to install CodanPartListener on any additional windows that may be
 * opened in the workbench.
 */
Startup (/codan/org.eclipse.cdt.codan.ui.cxx/src/org/eclipse/cdt/codan/internal/ui/cxx/Startup.java)/**
 * @author Alena Laskavaia
 */
AbstractAstRewriteQuickFix (/codan/org.eclipse.cdt.codan.ui.cxx/src/org/eclipse/cdt/codan/ui/AbstractAstRewriteQuickFix.java)/**
 *
 * Abstract class to simply ast rewrite quick fixers
 * @since 2.0
 */
AbstractCodanCMarkerResolution (/codan/org.eclipse.cdt.codan.ui.cxx/src/org/eclipse/cdt/codan/ui/AbstractCodanCMarkerResolution.java)/**
 * Generic class for codan marker resolution (for quick fix). Use as a base
 * class for codanMarkerResolution extension. To add specific icon and
 * description client class should additionally implement
 * {@link IMarkerResolution2}
 *
 * @since 2.0
 */
AllTypesCache (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/AllTypesCache.java)/**
 * Manages a search cache for types in the workspace. Instead of returning
 * objects of type <code>ICElement</code> the methods of this class returns a
 * list of the lightweight objects <code>ITypeInfo</code>.
 * <P>
 * AllTypesCache runs asynchronously using a background job to rebuild the cache
 * as needed. If the cache becomes dirty again while the background job is
 * running, the job is restarted.
 * <P>
 * If <code>getTypes</code> is called in response to a user action, a progress
 * dialog is shown. If called before the background job has finished, getTypes
 * waits for the completion of the background job.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IFunctionInfo (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/IFunctionInfo.java)/**
 * Provide function related information.
 *
 * @since 4.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IndexTypeInfo (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/IndexTypeInfo.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IQualifiedTypeName (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/IQualifiedTypeName.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITypeInfo (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/ITypeInfo.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITypeInfoVisitor (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/ITypeInfoVisitor.java)/**
 * @deprecated not used anywhere
 * @noreference This interface is not intended to be referenced by clients.
 */
ITypeReference (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/ITypeReference.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITypeSearchScope (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/ITypeSearchScope.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IWorkingCopyProvider (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/IWorkingCopyProvider.java)/**
 * @deprecated use {@link org.eclipse.cdt.core.model.IWorkingCopyProvider}, instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
PathUtil (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/PathUtil.java)/**
 * @deprecated use {@link org.eclipse.cdt.utils.PathUtil}, instead.
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
QualifiedTypeName (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/QualifiedTypeName.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
TypeInfo (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/TypeInfo.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
TypeReference (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/TypeReference.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
TypeSearchScope (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/TypeSearchScope.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
TypeUtil (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/TypeUtil.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
UnknownTypeInfo (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/core/browser/UnknownTypeInfo.java)/**
 * @deprecated not used anywhere.
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ASTTypeInfo (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/internal/core/browser/ASTTypeInfo.java)/**
 * Type info object needed to support search for local variables.
 * @since 5.0
 */
ASTTypeReference (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/internal/core/browser/ASTTypeReference.java)/**
 * A {@link ITypeReference} tailored for ast bindings.
 * @since 5.0
 */
IndexModelUtil (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/internal/core/browser/IndexModelUtil.java)/**
 * Convenience class for bridging the model gap between binding types and CModel types
 *
 * This is internal in case some IBinding's do not have ICElement constants in future
 */
IndexTypeReference (/core/org.eclipse.cdt.core/browser/org/eclipse/cdt/internal/core/browser/IndexTypeReference.java)/**
 * A {@link IndexTypeReference} tailored for index bindings.
 *
 * @since 4.0
 */
ProjectLanguageConfiguration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/ProjectLanguageConfiguration.java)/**
 * Provides programmatic access to language mappings for a project.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ICBuildOutputParser (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/ICBuildOutputParser.java)/**
 * Console parser interface extended to support language settings providers.
 *
 * @since 5.4
 */
ICListenerAgent (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/ICListenerAgent.java)/**
 * Helper class to allow listeners of arbitrary events self-register/dispose.
 *
 * Called by CDT core when {@linkplain ICListenerAgent} added/removed to
 * the list of {@link ILanguageSettingsProvider}s  managed by the model.
 * {@linkplain ICListenerAgent} would commonly be implemented by a language
 * settings provider.
 * <br><br>
 * Implementers are to create a specific listener and register it to
 * appropriate event manager in {@link #registerListener(ICConfigurationDescription)}
 * then unregister and dispose in {@link #unregisterListener()}.
 *
 * @since 5.4
 */
ILanguageSettingsBroadcastingProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/ILanguageSettingsBroadcastingProvider.java)/**
 * This interface is to be implemented by providers which want to broadcast the changes in their setting entries
 * with {@link ILanguageSettingsChangeEvent}.
 *
 * @since 5.4
 */
ILanguageSettingsChangeEvent (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/ILanguageSettingsChangeEvent.java)/**
 * Contains the details of changes that occurred as a result of modifying
 * language settings entries {@link ICLanguageSettingEntry}. This event is
 * intended to be fired for changes in entries, not necessarily providers.
 * The event is associated with a project.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class interface is not stable yet as
 * it is not currently clear how it may need to be used in future. Only bare
 * minimum is provided here at this point (CDT 8.1, Juno).
 * There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 5.4
 */
ILanguageSettingsChangeListener (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/ILanguageSettingsChangeListener.java)/**
 * An interface for listeners to changes in language settings {@link ICLanguageSettingEntry}.
 *
 * @see LanguageSettingsManager#registerLanguageSettingsChangeListener(ILanguageSettingsChangeListener)
 * @see LanguageSettingsManager#unregisterLanguageSettingsChangeListener(ILanguageSettingsChangeListener)
 *
 * @since 5.4
 */
ILanguageSettingsEditableProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/ILanguageSettingsEditableProvider.java)/**
 * This interface is used in UI to identify classes allowing user to modify settings externally
 * contrary to some subclasses of {@link LanguageSettingsSerializableProvider} managing
 * their settings themselves and not providing such option to the user.
 *
 * @since 5.4
 */
ILanguageSettingsProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/ILanguageSettingsProvider.java)/**
 * Base interface to provide list of {@link ICLanguageSettingEntry}.
 * This interface is used to deliver additions to compiler options such as
 * include paths (-I) or preprocessor defines (-D) and others (see
 * {@link ICSettingEntry#INCLUDE_PATH} and other kinds).
 * <br><br>
 * To define a provider like that use extension point
 * {@code org.eclipse.cdt.core.LanguageSettingsProvider} and implement this
 * interface. The recommended way of implementing is to extend
 * {@link LanguageSettingsSerializableProvider} and implement {@link ILanguageSettingsEditableProvider}.
 * That will give the ability to persist and edit/clean entries by user in UI.
 * The clone methods defined by {@link ILanguageSettingsEditableProvider} should be
 * chained as done for example by {@link LanguageSettingsGenericProvider}.
 * <br><br>
 * CDT provides a few general use implementations in the core such as {@link LanguageSettingsBaseProvider}
 * or {@link LanguageSettingsSerializableProvider} or {@link LanguageSettingsGenericProvider}
 * which could be used out of the box or built upon. There are also abstract classes in build
 * plugins {@code AbstractBuildCommandParser} and {@code AbstractBuiltinSpecsDetector} which
 * serve as a base for output parsers and built-in compiler language settings detectors.
 * See also extension point schema description LanguageSettingsProvider.exsd.
 *
 * @since 5.4
 */
ILanguageSettingsProvidersKeeper (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/ILanguageSettingsProvidersKeeper.java)/**
 * Interface to express ability (of a configuration description) to handle Language Settings
 * Providers.
 * @see ILanguageSettingsProvider
 *
 * @since 5.4
 *
 */
IWorkingDirectoryTracker (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/IWorkingDirectoryTracker.java)/**
 * Interface for console parsers able to track current working directory for build.
 *
 * @since 5.4
 */
LanguageSettingsBaseProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsBaseProvider.java)/**
 * {@code LanguageSettingsBaseProvider} is a basic implementation of {@link ILanguageSettingsProvider}
 * for the extensions defined by {@code org.eclipse.cdt.core.LanguageSettingsProvider} extension point.
 *
 * This implementation supports "static" list of entries for languages specified in
 * the extension point.
 *
 * @since 5.4
 */
LanguageSettingsGenericProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsGenericProvider.java)/**
 * Generic implementation of language settings provider which can be edited in UI
 * with entries persisted between eclipse sessions.
 * The instances of this class can be used in plugin.xml to create a new provider
 * but this class is not intended to be extended. For more details how to create a
 * language settings provider see the description of {@link ILanguageSettingsProvider}.
 *
 * @since 5.4
 */
LanguageSettingsManager (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsManager.java)/**
 * A collection of utility methods to manage language settings providers.
 * See {@link ILanguageSettingsProvider}.
 *
 * @since 5.4
 */
LanguageSettingsSerializableProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsSerializableProvider.java)/**
 * This class is the base class for language settings providers able to serialize
 * into XML storage.
 * Although this class has setter methods, by design its instances are not editable in UI
 * nor instances can be assigned to a configuration (cannot be global or non-shared).
 * Implement {@link ILanguageSettingsEditableProvider} interface for that. There is a generic
 * implementation of this interface available to be used, see {@link LanguageSettingsGenericProvider}.
 *
 * For more on the suggested way of extending this class see the description of
 * {@link ILanguageSettingsProvider}.
 *
 * @since 5.4
 */
LanguageSettingsStorage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsStorage.java)/**
 * The class representing the (in-memory) storage for language settings entries {@link ICLanguageSettingEntry}.
 *
 * @since 5.4
 */
ScannerDiscoveryLegacySupport (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/settings/providers/ScannerDiscoveryLegacySupport.java)/**
 * Collection of utilities for legacy support of older Scanner Discovery functionality.
 * This class is temporary and not intended to be used by clients.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 *
 * @since 5.4
 */
WorkspaceLanguageConfiguration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/language/WorkspaceLanguageConfiguration.java)/**
 * Provides programmatic access to language mappings for the workspace.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
AbstractLanguage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/AbstractLanguage.java)/**
 * Models the differences between various languages.
 * @since 4.0
 */
AssemblyLanguage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/AssemblyLanguage.java)/**
 * Built-in language for assembly files.
 *
 * @since 4.0
 */
BinaryFilePresentation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/BinaryFilePresentation.java)/**
 * Allows to configure the presentation of binaries.
 *
 * <p> Clients may create subclasses. </p>
 * @since 4.0.1.
 */
CModelException (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/CModelException.java)/**
 * A checked exception representing a failure in the C model.
 * C model exceptions contain a C-specific status object describing the
 * cause of the exception.
 *
 * @see ICModelStatus
 * @see ICModelStatusConstants
 */
CoreModel (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/CoreModel.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CoreModelUtil (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/CoreModelUtil.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ElementChangedEvent (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ElementChangedEvent.java)/**
 * An element changed event describes a change to the structure or contents
 * of a tree of C elements. The changes to the elements are described by
 * the associated delta object carried by this event.
 *
 * @see IElementChangedListener
 * @see ICElementDelta
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Flags (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/Flags.java)/**
 * Utility class for decoding modifier flags in C elements.
 *
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IArchive (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IArchive.java)/**
 * An IArchive represents a group of files combined  into  a
 * single file(the Archive), for example 'libXX.a'.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IArchiveContainer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IArchiveContainer.java)/**
 * Represents a container of all the IArchive's found in the project
 * while inspecting the project.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IAsmLabel (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IAsmLabel.java)/**
 * Represents a label in assembly code.
 *
 * @since 5.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IAsmLanguage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IAsmLanguage.java)/**
 * This is an optional extension interface to {@link ILanguage} which allows
 * an assembly language variant to expose certain syntax characteristics.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 5.0
 */
IBinary (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinary.java)/**
 * Represents a Binary file, for example an ELF executable.
 * An ELF parser will inspect the binary.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBinaryContainer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinaryContainer.java)/**
 * Represents a container of all the IBinary's found in the project
 * while inspecting the project.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBinaryElement (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinaryElement.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBinaryFunction (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinaryFunction.java)/**
 * Represents a function.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBinaryModule (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinaryModule.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBinaryVariable (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinaryVariable.java)/**
 * Represents a global variable.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuffer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBuffer.java)/**
 * A buffer contains the text contents of a resource. It is not language-specific.
 * The contents may be in the process of being edited, differing from the actual contents of the
 * underlying resource. A buffer has an owner, which is an
 * {@code IOpenable}. If a buffer does not have an underlying resource,
 * saving the buffer has no effect. Buffers can be read-only.
 * <p>
 * This interface is similar to the JDT IBuffer interface.
 *
 * @noextend This interface is not intended to be extended by clients.
 */
IBufferChangedListener (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBufferChangedListener.java)/**
 * A listener, which gets notified when the contents of a specific buffer
 * have changed, or when the buffer is closed.
 * When a buffer is closed, the listener is notified <em>after</em> the buffer has been closed.
 * A listener is not notified when a buffer is saved.
 * <p>
 * This interface may be implemented by clients.
 * </p>
 *
 * This interface is similar to the JDT IBufferChangedListener interface
 */
ICContainer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICContainer.java)/**
 * A C folder resource.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICElement (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICElement.java)/**
 * Common protocol for all elements provided by the C model.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICElementDelta (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICElementDelta.java)/**
 * A C element delta describes changes in C element between two discrete
 * points in time.  Given a delta, clients can access the element that has
 * changed, and any children that have changed.
 * <p>
 * Deltas have a different status depending on the kind of change they represent.
 * The list below summarizes each status (as returned by <code>getKind</code>)
 * and its meaning:
 * <ul>
 *  <li><code>ADDED</code> - The element described by the delta
 *  has been added.
 *  <li><code>REMOVED</code> - The element described by the delta
 *  has been removed.
 *  <li><code>CHANGED</code> - The element described by the delta
 *  has been changed in some way.
 *  </li>
 * </ul>
 * <p>
 * Move operations are indicated by other change flags, layered on top
 * of the change flags described above. If element A is moved to become B,
 * the delta for the  change in A will have status <code>REMOVED</code>,
 * with change flag <code>F_MOVED_TO</code>. In this case,
 * <code>getMovedToElement</code> on delta A will return the handle for B.
 * The  delta for B will have status <code>ADDED</code>, with change flag
 * <code>F_MOVED_FROM</code>, and <code>getMovedFromElement</code> on delta
 * B will return the handle for A. (Note, the handle to A in this case represents
 * an element that no longer exists).
 * </p>
 * <p>
 * Note that the move change flags only describe the changes to a single element, they
 * do not imply anything about the parent or children of the element.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICElementVisitor (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICElementVisitor.java)/**
 * This interface is implemented by clients that walk the ICElement tree.
 */
ICLanguageKeywords (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICLanguageKeywords.java)/**
 * This is an optional extension interface to {@link ILanguage} which allows
 * a C/C++ language variant to expose the set of keywords it defines.
 *
 * @since 4.0
 */
ICModel (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICModel.java)/**
 * Represent the root C element corresponding to the workspace.
 * Since there is only one such root element, it is commonly referred to as
 * <em>the</em> C model element.
 * The C model element needs to be opened before it can be navigated or manipulated.
 * The C model element has no parent (it is the root of the C element
 * hierarchy). Its children are {@code ICProject}s.
 * <p>
 * This interface provides methods for performing copy, move, rename, and
 * delete operations on multiple C elements.
 *
 * @see CoreModel#create(org.eclipse.core.resources.IWorkspaceRoot)
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICModelMarker (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICModelMarker.java)/**
 * Markers used by the C model.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICModelStatus (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICModelStatus.java)/**
 * Represents the outcome of an C model operation. Status objects are
 * used inside <code>CModelException</code> objects to indicate what went
 * wrong.
 * <p>
 * C model status object are distinguished by their plug-in id:
 * <code>getPlugin</code> returns <code>"org.eclipse.cdt.core"</code>.
 * <code>getCode</code> returns one of the status codes declared in
 * <code>ICModelStatusConstants</code>.
 * </p>
 * <p>
 * A C model status may also carry additional information (that is, in
 * addition to the information defined in <code>IStatus</code>):
 * <ul>
 *   <li>elements - optional handles to C elements associated with the failure</li>
 *   <li>string - optional string associated with the failure</li>
 * </ul>
 * @see org.eclipse.core.runtime.IStatus
 * @see ICModelStatusConstants
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICModelStatusConstants (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICModelStatusConstants.java)/**
 * Status codes used with C model status objects.
 *
 * @see ICModelStatus
 * @see org.eclipse.core.runtime.IStatus#getCode
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IContainerEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IContainerEntry.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IContributedCElement (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IContributedCElement.java)/**
 * Additions to the <code>ICElement</code> hierarchy provided by
 * contributed languages.
 *
 * Contributed elements are required to be adaptable to an
 * <code>ImageDescriptor</code>.
 *
 * @author Jeff Overbey
 * @see ICElement
 * @see IAdaptable
 */
Factory (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IContributedModelBuilder.java)/**
	 * A factory to create a model builder for a translation unit.
	 *
	 * @since 5.0
	 */
IContributedModelBuilder (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IContributedModelBuilder.java)/**
 * Interface supported by model builders for contributed languages.
 *
 * Model builders parse a <code>TranslationUnit</code> (i.e., a file) and
 * return a hierarchy of <code>ICElement</code>s which represent the high-level
 * structure of that file (what modules, classes, functions, and similar
 * constructs are contained in it, and on what line(s) the definition occurs).
 *
 * The translation unit to parse and the initial element map are given to
 * {@link ILanguage#createModelBuilder}, which will presumably
 * pass that information on to the model builder constructor.
 *
 * @author Jeff Overbey
 */
ICProject (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java)/**
 * A C project represents a view of a project resource in terms of C
 * elements such as , ICContainer, ITranslationUnit ....
 * <code>CoreModel.create(project)</code>.
 * </p>
 *
 * @see CoreModel#create(org.eclipse.core.resources.IProject)
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IDeclaration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IDeclaration.java)/**
 * Base interface for any C Model element that could be considered a declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IElementChangedListener (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IElementChangedListener.java)/**
 * An element changed listener receives notification of changes to C elements
 * maintained by the C model.
 */
IEnumeration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IEnumeration.java)/**
 * An Enumeration type.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IEnumerator (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IEnumerator.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IField (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IField.java)/**
 * Represents a field(variable) declared in an IStructure(struct, class, union).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFunction (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IFunction.java)/**
 * Represents a function definition.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFunctionDeclaration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IFunctionDeclaration.java)/**
 * Represents a function
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFunctionTemplate (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IFunctionTemplate.java)/**
 * Function template definition.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFunctionTemplateDeclaration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IFunctionTemplateDeclaration.java)/**
 * Function template declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IInclude (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IInclude.java)/**
 * Represents an include declaration in a C translation unit.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIncludeEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeEntry.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIncludeFileEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeFileEntry.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIncludeReference (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReference.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IInheritance (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IInheritance.java)/**
 * Place holder of the inherited class from struct or class(IStructure).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ILanguage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILanguage.java)/**
 * Models differences between languages. The interface is not supposed to be implemented directly.
 * Rather than that clients may subclass {@link AbstractLanguage}.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ILanguageDescriptor (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILanguageDescriptor.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ILanguageMappingChangeEvent (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILanguageMappingChangeEvent.java)/**
 * Contains the details of changes that occurred as a result of modifying
 * language mappings.
 *
 * @since 4.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ILanguageMappingChangeListener (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILanguageMappingChangeListener.java)/**
 * Listens to changes in language mappings.
 *
 * @author crecoskie
 * @since 4.0
 */
ILibraryEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryEntry.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ILibraryReference (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReference.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMacro (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IMacro.java)/**
 * Represents a field declared in a type.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMacroEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IMacroEntry.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMacroFileEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IMacroFileEntry.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMember (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IMember.java)/**
 * Common protocol for C elements that can be members of types.
 * This set consists of <code>IType</code>, <code>IMethod</code>,
 * <code>IField</code>.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMethod (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IMethod.java)/**
 * Represents the definition method of a class.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMethodDeclaration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IMethodDeclaration.java)/**
 * Represents the declaration method of a class
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMethodTemplate (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IMethodTemplate.java)/**
 * Member template definition.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMethodTemplateDeclaration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IMethodTemplateDeclaration.java)/**
 * Member template declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
INamespace (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/INamespace.java)/**
 * Represents a package declaration in a C translation unit.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IOpenable (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IOpenable.java)/**
 * An openable is an element that can be opened, saved, and closed.
 * An openable might or might not have an associated buffer.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IOutputEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IOutputEntry.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IParent (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IParent.java)/**
 * Common protocol for C elements that contain other C elements.
 */
IPathEntryContainer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IPathEntryContainer.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPathEntryContainerExtension (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IPathEntryContainerExtension.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProjectEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IProjectEntry.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IRegion (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IRegion.java)/**
 * A C model region describes a hierarchical set of elements.
 * Regions are often used to describe a set of elements to be considered
 * when performing operations; for example, the set of elements to be
 * considered during a search. A region may include elements from different
 * projects.
 * <p>
 * When an element is included in a region, all of its children
 * are considered to be included. Children of an included element
 * <b>cannot</b> be selectively excluded.
 * </p>
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISourceEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ISourceEntry.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISourceManipulation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ISourceManipulation.java)/**
 * Common protocol for C elements that support source code manipulations such
 * as copy, move, rename, and delete.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISourceRange (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ISourceRange.java)/**
 * A source range defines an element's source coordinates
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISourceReference (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ISourceReference.java)/**
 * Common protocol for C elements that have associated source code.
 * <p>
 * Note: For {@code IBinary}, {@code IArchive} and other members
 * derived from a binary type, the implementation returns source iff the element
 * has attached source code and debugging information.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISourceRoot (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ISourceRoot.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IStructure (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IStructure.java)/**
 * Represent struct(ure), class or union.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IStructureDeclaration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IStructureDeclaration.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IStructureTemplate (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IStructureTemplate.java)/**
 * Class template definition.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IStructureTemplateDeclaration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IStructureTemplateDeclaration.java)/**
 * Class template declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITemplate (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ITemplate.java)/**
 * The interface is used to model, class or function templates and their partial or
 * explicit specializations.
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITranslationUnit (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ITranslationUnit.java)/**
 * Represents an entire C translation unit ({@code .c} source file).
 * The children are of type {@code IStructureElement},
 * {@code IInclude}, etc..
 * and appear in the order in which they are declared in the source.
 * If a {@code .c} file cannot be parsed, its structure remains unknown.
 * Use {@code ICElement.isStructureKnown} to determine whether this is
 * the case.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ITranslationUnitHolder (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ITranslationUnitHolder.java)/**
 * Represents a workbench object that is able to provide instances of ITranslationUnit.  For
 * example, the CEditor (in the CDT UI plugin) implements this interface in order to provide
 * the IWorkingCopy of the editor's active translation unit.
 *
 * @since 5.7
 */
ITypeDef (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ITypeDef.java)/**
 * Represents a field declared in a type.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IUsing (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IUsing.java)/**
 * Represents a "using" declaration in C  translation unit.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IVariable (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IVariable.java)/**
 * Represents a global variable.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IVariableDeclaration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IVariableDeclaration.java)/**
 * Represents the declaration of a variable.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IWorkingCopy (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IWorkingCopy.java)/**
 * <p> A working copy of a C element acts just like a regular element (handle),
 * except it is not attached to an underlying resource. A working copy is not
 * visible to the rest of the C model. Changes in a working copy's buffer are
 * not realized in a resource. To bring the C model up-to-date with a working
 * copy's contents, an explicit commit must be performed on the working copy.
 * Other operations performed on a working copy update the contents of the
 * working copy's buffer but do not commit the contents of the working copy.
 * </p>
 * <p>
 * Note: The contents of a working copy is determined when a working
 * copy is created, based on the current content of the element the working
 * copy is created from. If a working copy is an <code>ICFile</code> and is
 * explicitly closed, the working copy's buffer will be thrown away. However,
 * clients should not explicitly open and close working copies.
 * </p>
 * <p>
 * The client that creates a working copy is responsible for
 * destroying the working copy. The C model will never automatically destroy or
 * close a working copy. (Note that destroying a working copy does not commit it
 * to the model, it only frees up the memory occupied by the element). After a
 * working copy is destroyed, the working copy cannot be accessed again. Non-
 * handle methods will throw a <code>CModelException</code> indicating the
 * C element does not exist.
 * </p>
 * <p>
 * A working copy cannot be created from another working copy.
 * Calling <code>getWorkingCopy</code> on a working copy returns the receiver.
 * </p>
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IWorkingCopyProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IWorkingCopyProvider.java)/**
 * Defines a simple interface in order to provide
 * a level of abstraction between the Core and UI
 * code.
 */
LanguageManager (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/LanguageManager.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
LanguageMappingChangeEvent (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/LanguageMappingChangeEvent.java)/**
 * A minimal implementation of ILanguageMappingsChangeEvent.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PathEntryContainerChanged (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/PathEntryContainerChanged.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PathEntryContainerInitializer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/PathEntryContainerInitializer.java)/**
 */
CElementBaseLabels (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/util/CElementBaseLabels.java)/**
 * Creates labels for ICElement objects.
 *
 * @deprecated Use org.eclipse.cdt.ui.CElementLabelProvider instead.
 * Internally you can also use org.eclipse.cdt.internal.ui.viewsupport.CElementLabels.
 */
CIncludeFileEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/CIncludeFileEntry.java)/**
 * Representation in the project model of include file settings entries.
 * As an example, those are supplied by a gcc compiler with option "-include".
 */
CIncludePathEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/CIncludePathEntry.java)/**
 * Representation in the project model of include path settings entries.
 * As an example, those are supplied by a gcc compiler with option "-I".
 */
CLibraryFileEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/CLibraryFileEntry.java)/**
 * Representation in the project model of library file settings entries.
 * As an example, those are supplied by a gcc compiler with option "-l".
 */
CLibraryPathEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/CLibraryPathEntry.java)/**
 * Representation in the project model of library path settings entries.
 * As an example, those are supplied by a gcc compiler with option "-L".
 */
CMacroEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/CMacroEntry.java)/**
 * Representation in the project model of macro settings entries.
 * As an example, those are supplied by a gcc compiler with option "-D".
 */
CMacroFileEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/CMacroFileEntry.java)/**
 * Representation in the project model of include file settings entries.
 * As an example, those are supplied by a gcc compiler with option "-imacros".
 */
CConfigurationDataProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/extension/CConfigurationDataProvider.java)/**
 * The class is to be implemented by the Configuration data provider contributed via
 * a org.eclipse.cdt.core.CConfigurationDataProvider extension point
 *
 */
CExternalSettingProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/extension/CExternalSettingProvider.java)/**
 * Abstract base class for the External Settings Provider extension point.  Contributed
 * external settings are added to the Project's build configuration.
 */
ICConfigExtensionReference (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICConfigExtensionReference.java)/**
 * Holds executable extension information in the
 * project configuration.  Like ICExtensionReference
 * but has knowledge of its ICConfigurationDescription
 *
 * deprecated-@see ICExtensionReference
 */
ICConfigurationDescription (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICConfigurationDescription.java)/**
 * This is the class representing configuration and thus this is the root element
 * for configuration-specific settings.
 * <br><br>
 * A typical (simplified) life-cycle of configuration description in CDT is as following:
 * <br> 1. A project is created or opened. A new read-only configuration description is loaded.
 * <br> 2. If a description needs to be changed, a client gets a copy as a writable configuration
 *         description first. Then, that instance can be edited.
 * <br> 3. The changed writable configuration description gets applied to the model and becomes
 *         read-only.
 * <br> 4. The project gets closed or removed. The configuration description gets disposed.
 * <br><br>
 * Typically read-only configuration description would be represented by {@link CConfigurationDescriptionCache}
 * and writable one by {@link CConfigurationDescription}.
 *
 * @see CProjectDescriptionEvent
 * @see CConfigurationDescriptionCache
 */
ICDescriptionDelta (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICDescriptionDelta.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICIncludeFileEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICIncludeFileEntry.java)/**
 * Representation in the project model of language settings entries
 * such as include files ({@code -include file} gcc option). See {@link ICSettingEntry#INCLUDE_FILE}.
 */
ICIncludePathEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICIncludePathEntry.java)/**
 * Representation in the project model of language settings entries
 * include paths (-I). See {@link ICSettingEntry#INCLUDE_PATH}.
 */
ICLanguageSettingEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICLanguageSettingEntry.java)/**
 * Representation in the project model of language settings entries
 * such as include paths (-I) or preprocessor defines (-D) and others (see
 * {@link ICSettingEntry#INCLUDE_PATH} and other kinds).
 */
ICLanguageSettingPathEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICLanguageSettingPathEntry.java)/**
 * Representation in the project model of language settings entries of
 * path-kind such as include paths (-I) or include files and others.
 * See interface hierarchy for more specifics.
 */
ICLibraryFileEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICLibraryFileEntry.java)/**
 * Representation in the project model of language settings entries
 * such as library file (-l gcc option). See {@link ICSettingEntry#LIBRARY_FILE}.
 */
ICLibraryPathEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICLibraryPathEntry.java)/**
 * Representation in the project model of language settings entries
 * such as library path (-L gcc option). See {@link ICSettingEntry#LIBRARY_PATH}.
 */
ICMacroEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICMacroEntry.java)/**
 * Representation in the project model of language settings entries having
 * name-value attributes such as preprocessor defines (-D).
 * See {@link ICSettingEntry#MACRO}.
 */
ICMacroFileEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICMacroFileEntry.java)/**
 * Representation in the project model of language settings entries
 * such as macro file ({@code -imacros file} gcc option).
 * See {@link ICSettingEntry#MACRO_FILE}.
 */
ICMultiItemsHolder (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICMultiItemsHolder.java)/**
 * Implementors of this interface are intended
 * to hold 1 or more items and perform
 * some simultaneous operations on them.
 *
 * There are no any restrictions for items
 * types to be held.
 *
 * As common rule, items are set in constructor
 * and their list cannot be changed in life time.
 *
 */
ICPathEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICPathEntry.java)/**
 * Helper interface capturing 'path' characteristic for {@link ICSettingEntry}
 * and {@link ICLanguageSettingEntry} interfaces.
 */
ICProjectDescription (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICProjectDescription.java)/**
 * The ICProjectDescription is the root element for obtaining the CDT project settings
 * it can be obtained by the {@link CoreModel#getProjectDescription(IProject, boolean)} call
 * @see CoreModel#getProjectDescription(IProject)
 * @see CoreModel#getProjectDescription(IProject, boolean)
 *
 */
ICProjectDescriptionManager (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICProjectDescriptionManager.java)/**
 * This interface represents the manager of CDT Project descriptions.
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICSettingEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICSettingEntry.java)/**
 * An interface representing setting entries.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * Any class implementing this interface should be immutable so the setting
 * entries could be safely pooled by {@link CDataUtil#getPooledEntry(ICSettingEntry)}.
 */
ICSettingObject (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICSettingObject.java)/**
 * this is the common super-class for all ICProjectDescription model elements
 *
 */
ICSettingsStorage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICSettingsStorage.java)/**
 * This interface represents the settings storage that can be used as the root
 * of a settings tree of name-attribute-value holder elements ({@link ICStorageElement}s).
 * <br /><br />
 * In real terms this is a specialised node in the project description tree. It is specialised
 * in that it can only contain ICStorageElements as children and has no associated attributes or
 * value.  The Xml model implements this as an element called 'storageModule' which contains
 * other arbitrary Xml ICStorageElements.
 * <br /><br />
 * Both {@link ICProjectDescription} and {@link ICConfigurationDescription} implement this
 * interface thus providing the capabilities to store custom project-wide and configuration-specific
 * data in the storage file
 * <br /><br />
 * The format of the storage file is left up to the implementor.  It may be an XML file
 * (.cproject) a relational database (.cprojectdb) or any other format of the extenders choosing.
 * <br /><br />
 * These capabilities are used by the build system for persisting build configuration data
 * as well as by the CoreModel {@link ICConfigurationDescription} storage trees. See
 * {@link CConfigurationDataProvider#loadConfiguration(ICConfigurationDescription, IProgressMonitor)}
 * and {@link CConfigurationDataProvider#applyConfiguration(ICConfigurationDescription, ICConfigurationDescription, CConfigurationData, IProgressMonitor)}
 *
 * @see ICStorageElement
 * @see ICProjectDescription
 * @see ICConfigurationDescription
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICStorageElement (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/ICStorageElement.java)/**
 * This interface represents an generic element in a storage tree.  These trees are rooted at
 * {@link ICSettingsStorage} elements.
 *
 * This abstract storage mechanism is used, e.g. with the {@link ICProjectDescription} and
 * {@link ICConfigurationDescription} for storing custom data in the settings file (.cproject)
 * or in a database.
 *
 * @see ICSettingsStorage
 * @see ICProjectDescription
 * @see ICConfigurationDescription
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
MultiItemsHolder (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/MultiItemsHolder.java)/**
 *
 *
 */
MultiLanguageSetting (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/MultiLanguageSetting.java)/**
 * This class is intended to hold "similar" Language Setting objects.
 * Normally, they should have the same name.
 */
CSettingEntryFactory (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/util/CSettingEntryFactory.java)/**
 * Used to be factory/cache of setting entries. Superseded by {@link CDataUtil} pool of entries.
 * Not used in CDT anymore.
 *
 * @deprecated Since CDT 9.0. Use corresponding {@link CDataUtil} methods instead.
 */
IKindBasedInfo (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/util/IKindBasedInfo.java)/**
 * Type-Parameterised kind based item
 * @param <T>
 */
KindBasedStore (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/util/KindBasedStore.java)/**
 * A storage where stored data is organized by "kind".
 * In most cases kind is one of {@link ICLanguageSettingEntry}, i.e. include path, macro etc.
 *
 * @param <T> - stored type
 *
 * @see ICSettingEntry#INCLUDE_PATH
 * @see ICSettingEntry#INCLUDE_FILE
 * @see ICSettingEntry#MACRO
 * @see ICSettingEntry#MACRO_FILE
 * @see ICSettingEntry#LIBRARY_PATH
 * @see ICSettingEntry#LIBRARY_FILE
 * @see ICSettingEntry#OUTPUT_PATH
 * @see ICSettingEntry#SOURCE_PATH
 *
 */
XmlStorageElement (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/util/XmlStorageElement.java)/**
 * @deprecated
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
XmlStorageUtil (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/settings/model/XmlStorageUtil.java)/**
 * This class serves as a bridge from Xml Document trees to
 * ICStorageElement trees.
 *
 * This allows importing of old style Xml trees into ICStorageElement
 * based project descriptions
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 5.1
 */
LanguageMapping (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/LanguageMapping.java)/**
 * A language mapping.
 */
LanguageMappingResolver (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/LanguageMappingResolver.java)/**
 * Resolves the effective language for various resources such as
 * files and projects.
 */
LanguageMappingStore (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/LanguageMappingStore.java)/**
 * Serializes and deserializes language mappings to and from persistent storage.
 */
LanguageSettingsDelta (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsDelta.java)/**
 * Contains the delta of changes that occurred as a result of modifying
 * language settings entries {@link ICLanguageSettingEntry}. The delta is
 * associated with a configuration description.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class interface is not stable yet as
 * it is not currently clear how it may need to be used in future. Only bare
 * minimum is provided here at this point (CDT 8.1, Juno).
 * There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
LanguageSettingsExtensionManager (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsExtensionManager.java)/**
 * Class {@code LanguageSettingsExtensionManager} manages {@link ILanguageSettingsProvider} extensions
 */
NotAccessibleProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsProvidersSerializer.java)/**
	 * Dummy class to represent ill-defined provider.
	 */
ListenerAssociation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsProvidersSerializer.java)/**
	 * language settings provider listener-cfgDescription association
	 */
LanguageSettingsWorkspaceProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsProvidersSerializer.java)/**
	 * Wrapper for workspace providers to ensure level of indirection. That way workspace providers
	 * can be changed/replaced without notifying/changing the configurations which keep the providers
	 * in their lists.
	 */
LanguageSettingsChangeEvent (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsProvidersSerializer.java)/**
	 * Language Settings Change Event implementation.
	 */
LanguageSettingsProvidersSerializer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsProvidersSerializer.java)/**
 * Helper class handling serialization and notifications for language settings entries {@link ICLanguageSettingEntry}.
 */
LanguageSettingsScannerInfoProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsScannerInfoProvider.java)/**
 * Implementation of {@link IScannerInfoProvider} backed by the list of
 * language settings providers of "default settings configuration"
 * (see {@link ICProjectDescription#getDefaultSettingConfiguration()}).
 *
 * @see IScannerInfo#getIncludePaths()
 *
 */
LanguageSettingsSerializableStorage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsSerializableStorage.java)/**
 * The class representing persistent storage for language settings entries {@link ICLanguageSettingEntry}.
 */
PathEntryScannerInfoLanguageSettingsProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/PathEntryScannerInfoLanguageSettingsProvider.java)/**
 * Wrapper class intended to provide backward compatibility with ScannerInfo supplied by {@link PathEntryManager}.
 */
ReferencedProjectsLanguageSettingsProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/ReferencedProjectsLanguageSettingsProvider.java)/**
 * Language settings provider to provide entries exported from referenced projects.
 */
ScannerInfoExtensionLanguageSettingsProvider (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/ScannerInfoExtensionLanguageSettingsProvider.java)/**
 * Wrapper class intended to provide backward compatibility with ScannerInfoProvider defined by org.eclipse.cdt.core.ScannerInfoProvider extension point
 */
ArchiveContainerInfo (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ArchiveContainerInfo.java)/**
 */
AsmLabel (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/AsmLabel.java)/**
 * A label in assembly code.
 *
 * @since 5.0
 */
AsmModelBuilder (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/AsmModelBuilder.java)/**
 * A simple model builder for assembly translation units.
 * Recognizes preprocessor directives (#include and #define)
 * and labels.
 *
 * @see AssemblyLanguage
 * @since 5.0
 */
ASTRunnable (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ASTCache.java)/**
	 * Do something with an AST.
	 *
	 * @see #runOnAST(ILanguage, IASTTranslationUnit)
	 */
ASTCache (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ASTCache.java)/**
 * Provides a shared AST of a single translation unit at a time.
 *
 * @since 4.0
 */
ASTStringUtil (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ASTStringUtil.java)/**
 * This is a utility class to help convert AST elements to strings.
 *
 * @see org.eclipse.cdt.core.dom.ast.ASTTypeUtil
 */
BatchOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BatchOperation.java)/**
 * An operation created as a result of a call to JavaCore.run(IWorkspaceRunnable, IProgressMonitor)
 * that encapsulates a user defined IWorkspaceRunnable.
 */
BinaryContainerInfo (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BinaryContainerInfo.java)/**
 */
BinaryElement (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BinaryElement.java)/**
 */
BinaryFunction (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BinaryFunction.java)/**
 */
BinaryModule (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BinaryModule.java)/**
 */
BinaryVariable (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BinaryVariable.java)/**
 *
 */
Buffer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Buffer.java)/**
  * @see IBuffer
  * This class is similar to the JDT Buffer class.
  */
BufferCache (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BufferManager.java)/**
	 * An LRU cache of <code>IBuffers</code>.
	 */
BufferManager (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BufferManager.java)/**
 * The buffer manager manages the set of open buffers.
 * It implements an LRU cache of buffers.
 *
 * This class is similar to the JDT BufferManager class.
 */
CContainerInfo (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CContainerInfo.java)/**
 */
CElementDelta (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CElementDelta.java)/**
 * @see ICElementDelta
 */
ListItem (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CElementDeltaBuilder.java)/**
	 * Doubly linked list item
	 */
CElementInfo (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CElementInfo.java)/**
 * Holds cached structure and properties for a C element.
 * Subclassed to carry properties for specific kinds of elements.
 */
CModelBuilder2 (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CModelBuilder2.java)/**
 * Build TranslationUnit structure from an {@code IASTTranslationUnit}.
 *
 * @since 4.0
 */
CModelCache (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CModelCache.java)/**
 * The cache of C elements to their respective info.
 *
 * This class is similar to the JDT CModelCache class.
 */
CModelInfo (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CModelInfo.java)/**
 * @see ICModel
 */
CModelOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CModelOperation.java)/**
 * Defines behavior common to all C Model operations
 */
CModelStatus (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CModelStatus.java)/**
 * @see ICModelStatus
 */
ContentTypeProcessor (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ContentTypeProcessor.java)/**
 * ContentType processor
 */
CopyElementsOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CopyElementsOperation.java)/**
 * This operation copies/moves a collection of elements from their current
 * container to a new container, optionally renaming the
 * elements.
 * <p>Notes:<ul>
 *    <li>If there is already an element with the same name in
 *    the new container, the operation either overwrites or aborts,
 *    depending on the collision policy setting. The default setting is
 *	  abort.
 *
 *    <li>When constructors are copied to a type, the constructors
 *    are automatically renamed to the name of the destination
 *    type.
 *
 *	  <li>When main types are renamed (move within the same parent),
 *		the compilation unit and constructors are automatically renamed
 *
 *    <li>The collection of elements being copied must all share the
 *    same type of container (for example, must all be type members).
 *
 *    <li>The elements are inserted in the new container in the order given.
 *
 *    <li>The elements can be positioned in the new container - see #setInsertBefore.
 *    By default, the elements are inserted based on the default positions as specified in
 * 	the creation operation for that element type.
 *
 *    <li>This operation can be used to copy and rename elements within
 *    the same container.
 *
 *    <li>This operation only copies elements contained within compilation units.
 * </ul>
 *
 */
CopyResourceElementsOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CopyResourceElementsOperation.java)/**
 * This operation copies/moves/renames a collection of resources from their current
 * container to a new container, optionally renaming the
 * elements.
 * <p>Notes:<ul>
 *    <li>If there is already an resource with the same name in
 *    the new container, the operation either overwrites or aborts,
 *    depending on the collision policy setting. The default setting is
 *    abort.
 *
 *    <li>The collection of elements being copied must all share the
 *    same type of container.
 *
 *    <li>This operation can be used to copy and rename elements within
 *    the same container.
 *
 *    <li>This operation only copies translation units.
 * </ul>
 *
 */
CoreModelMessages (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CoreModelMessages.java)/**
 * @noreference This class is not intended to be referenced by clients.
 */
CreateElementInTUOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CreateElementInTUOperation.java)/**
 * <p>This abstract class implements behavior common to <code>CreateElementInTUOperations</code>.
 * To create a compilation unit, or an element contained in a compilation unit, the
 * source code for the entire compilation unit is updated and saved.
 *
 * <p>The element being created can be positioned relative to an existing
 * element in the compilation unit via the methods <code>#createAfter</code>
 * and <code>#createBefore</code>. By default, the new element is positioned
 * as the last child of its parent element.
 *
 */
CreateFieldOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CreateFieldOperation.java)/**
 * <p>This operation creates a field declaration in a type.
 *
 * <p>Required Attributes:<ul>
 *  <li>Containing Type
 *  <li>The source code for the declaration. No verification of the source is
 *      performed.
 * </ul>
 */
CreateIncludeOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CreateIncludeOperation.java)/**
 * <p>This operation adds an include declaration to an existing translation unit.
 * If the translation unit already includes the specified include declaration,
 * the include is not generated (it does not generate duplicates).
 *
 * <p>Required Attributes:<ul>
 *  <li>Translation unit
 *  <li>Include name - the name of the include to add to the
 *      translation unit. For example: <code>stdio.h</code>
 * </ul>
 */
CreateMemberOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CreateMemberOperation.java)/**
 * Implements functionality common to
 * operations that create type members.
 */
CreateMethodOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CreateMethodOperation.java)/**
 * <p>This operation creates an instance method.
 *
 * <p>Required Attributes:<ul>
 *  <li>Containing type
 *  <li>The source code for the method. No verification of the source is
 *      performed.
 * </ul>
 */
CreateNamespaceOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CreateNamespaceOperation.java)/**
 * @author User
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
CreateSourceReferenceOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CreateSourceReferenceOperation.java)/**
 * CreateSourceReferenceOperation
 */
CreateUsingOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CreateUsingOperation.java)/**
 * <p>This operation adds a using declaration/directive to an existing translation unit.
 *
 * <p>Required Attributes:<ul>
 *  <li>Translation unit
 *  <li>using name - the name of the using to add
 * </ul>
 */
CreateWorkingCopyOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CreateWorkingCopyOperation.java)/**
 * CreateWorkingCopyOperation
 */
CShiftData (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CShiftData.java)/**
 * In this case, no delta for specific element passed
 * Instead we'll notify Outline about offsets change.
 *
 * @author Oleg Krasilnikov
 */
DefaultPathEntryStore (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/DefaultPathEntryStore.java)/**
 * PathEntryStore
 */
DeleteElementsOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/DeleteElementsOperation.java)/**
 * DeleteElementsOperation
 */
DeleteResourceElementsOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/DeleteResourceElementsOperation.java)/**
 * This operation deletes a collection of resources and all of their children.
 * It does not delete resources which do not belong to the C Model
 * (eg GIF files).
 */
DeltaProcessor (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/DeltaProcessor.java)/**
 * This class is used by <code>CModelManager</code> to convert
 * <code>IResourceDelta</code>s into <code>ICElementDelta</code>s.
 * It also does some processing on the <code>CElement</code>s involved.
 * (e.g. closing them or updating binary containers).
 */
DestroyWorkingCopyOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/DestroyWorkingCopyOperation.java)/**
 * Destroys a working copy (remove it from its cache if it is shared)
 * and signal its removal through a delta.
 */
ElementCache (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ElementCache.java)/**
 * An LRU cache of <code>CElements</code>.
 *
 * This class is similar to the JDT ElementCache class.
 */
CElementHandleFactory (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ext/CElementHandleFactory.java)/**
 * Factory for creating CElement handles. These are a minimal implementation of
 * the ICElement interface and can be used for displaying information about the index.
 * @since 4.0
 */
ExternalTranslationUnit (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ExternalTranslationUnit.java)/**
 * ExternalTranslationUnit
 */
IBufferFactory (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IBufferFactory.java)/**
 * A factory that creates <code>IBuffer</code>s for CFiles.
 * <p>
 * This interface may be implemented by clients.
 * </p>
 *
 * This    interface is similar to the JDT IBufferFactory interface.
 */
IConstants (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IConstants.java)/**
 * This interface defines constants for use by the builder / compiler interface.
 */
IncludeReference (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReference.java)/**
 * IncludeReference
 */
InternalCoreModelUtil (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/InternalCoreModelUtil.java)/**
 * Non-API methods for manipulating C/C++ projects.
 */
LibraryReference (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReference.java)/**
 * @author alain
 */
LibraryReferenceArchive (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceArchive.java)/**
 * @author alain
 */
LibraryReferenceShared (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceShared.java)/**
 * @author alain
 */
MoveElementsOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/MoveElementsOperation.java)/**
 * MoveElementsOperation
 */
MoveResourceElementsOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/MoveResourceElementsOperation.java)/**
 * This operation moves resources (package fragments and compilation units) from their current
 * container to a specified destination container, optionally renaming the
 * elements.
 * A move resource operation is equivalent to a copy resource operation, where
 * the source resources are deleted after the copy.
 * <p>This operation can be used for reorganizing resources within the same container.
 *
 * @see CopyResourceElementsOperation
 */
MultiOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/MultiOperation.java)/**
 * This class is used to perform operations on multiple <code>ICElement</code>.
 * It is responible for running each operation in turn, collecting
 * the errors and merging the corresponding <code>CElementDelta</code>s.
 * <p>
 * If several errors occured, they are collected in a multi-status
 * <code>CModelStatus</code>. Otherwise, a simple <code>CModelStatus</code>
 * is thrown.
 */
NullBinaryParser (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/NullBinaryParser.java)/**
 */
OpenableInfo (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/OpenableInfo.java)/**
 */
OutputEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/OutputEntry.java)/**
 * OutputEntry
 */
PathEntryManager (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/PathEntryManager.java)/**
 * @author alain
 */
ProgressMonitorAndCanceler (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ProgressMonitorAndCanceler.java)/**
 * A progress monitor accepting a <code>ICancelable</code> object to receive the cancel request.
 *
 * @since 5.0
 */
ReconcileWorkingCopyOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/ReconcileWorkingCopyOperation.java)/**
 * Reconcile a working copy and signal the changes through a delta.
 */
RenameElementsOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/RenameElementsOperation.java)/**
 * RenameElementsOperation
 */
RenameResourceElementsOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/RenameResourceElementsOperation.java)/**
 * This operation renames resources (Package fragments and compilation units).
 *
 * <p>Notes:<ul>
 * <li>When a compilation unit is renamed, its main type and the constructors of the
 * 		main type are renamed.
 * </ul>
 */
SetPathEntriesOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/SetPathEntriesOperation.java)/**
 */
SourceManipulationInfo (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/SourceManipulationInfo.java)/**
 * Element info for ISourceReference elements.
 */
SourceMapper (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/SourceMapper.java)/**
 */
SourceRange (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/SourceRange.java)/**
 * @see ISourceRange
 */
SourceRoot (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/SourceRoot.java)/**
 * SourceRoot
 */
StructureDeclaration (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/StructureDeclaration.java)/**
 * StructureDeclaration
 */
TranslationUnit (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/TranslationUnit.java)/**
 * @see ITranslationUnit
 */
TranslationUnitInfo (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/TranslationUnitInfo.java)/**
 * The Element Info of a Translation Unit.
 */
WorkingCopy (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/WorkingCopy.java)/**
 * Implementation of a working copy translation unit. A working copy maintains
 * the timestamp of the resource it was created from.
 */
AbstractCProjectDescriptionStorage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/AbstractCProjectDescriptionStorage.java)/**
 * This abstract class provides an extension point for functionality for loading
 * a CDT Project Description from some kind of backing store. This allows
 * extenders to provide their own backing store for a CDT project description.
 *
 * This class provides the ICProjectDescription root of the project configuration tree in
 * which is contained storage modules and other members of the storage element tree.
 *
 * It is the responsibility of the storage that access to the project storage are threadsafe
 * i.e. return writable descriptions aren't shared between multiple threads (or if they
 * are, they are suitable synchronized) and setProjectDescription must be aware that
 * getProjectDescription may also be called concurrently
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 6.0
 */
CConfigurationDescription (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CConfigurationDescription.java)/**
 * The writable configuration description.
 *
 * @see ICConfigurationDescription
 * @see CConfigurationDescriptionCache
 * @see CProjectDescriptionEvent
 */
CConfigurationDescriptionCache (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CConfigurationDescriptionCache.java)/**
 * CConfigurationDescriptionCache is a proxy class for serialization of configuration description data.
 *
 * An inspection of the scenario where user changes project properties and saves it yields
 * following sequence of events:
 * <ol>
 * <li> Initialization:
 *   <ul>
 *   <li> After eclipse started a project is being opened. A new CConfigurationDescriptionCache is created
 *        with CConfigurationDescriptionCache(ICStorageElement storage, CProjectDescription parent) constructor.
 *   <li> Any clients needed ICConfigurationDescription get CConfigurationDescription using constructor
 *        CConfigurationDescription(CConfigurationData data, String buildSystemId, ICDataProxyContainer cr)
 *        where the CConfigurationDescriptionCache is passed as data. The reference to cache is kept in field fCfgCache.
 *   <li> fCfgCache is used to getSpecSettings() CConfigurationSpecSettings, after that fCfgCache is set to null.
 *   </ul>
 * <li> User enters project properties/settings:
 *   <ul>
 *   <li> another CConfigurationDescription (settings configuration) created using the same constructor setting fCfgCache
 *        to the CConfigurationDescriptionCache.
 *   </ul>
 * <li> User changes settings (in the settings configuration CConfigurationDescription) and saves it:
 *   <ul>
 *   <li> new CConfigurationDescriptionCache is created from the CConfigurationDescription via constructor
 *        CConfigurationDescriptionCache(ICConfigurationDescription baseDescription, ...) where
 *        baseDescription is saved as fBaseDescription.
 *   <li> CConfigurationDescriptionCache.applyData(...) is used to persist the data. at that point
 *        reference fBaseDescription gets set to null.
 *   </ul>
 * </ol>
 *
 * @see ICConfigurationDescription
 * @see CConfigurationDescription
 * @see CProjectDescriptionEvent
 */
CConfigurationSpecSettings (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CConfigurationSpecSettings.java)/**
 * CConfigurationSpecSettings impelements ICSettingsStorage
 * to provide storage for ICStorageElements related to project settings
 *
 * This corresponds to the <cconfiguration id="....> elements within
 * the org.eclipse.cdt.core.settings storageModule in the project xml file
 */
CExternalSettingChangeEvent (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CExternalSettingChangeEvent.java)/**
 * External setting change event
 */
CExternalSettingContainerFactory (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CExternalSettingContainerFactory.java)/**
 * Root of the External Settings Provider Factory hierarchy. These
 * are responsible for creating {@link CExternalSettingsContainer}s
 * for a given settings provider id.  The container
 * is a simple container for external settings accessible via:
 * {@link CExternalSettingsContainer#getExternalSettings()}
 *
 * There are two concrete implementation of this in CDT:
 * <ul>
 * <li>{@link CfgExportSettingContainerFactory} responsible for settings propagated
 * referenced configurations.</li>
 * <li>{@link ExtensionContainerFactory} responsible for settings contributed
 * using the external settings extension point.</li>
 * </ul>
 */
CExternalSettingsContainer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CExternalSettingsContainer.java)/**
 * Container class which returns the {@link CExternalSetting}s
 * for a given context.
 */
CExternalSettingsDeltaProcessor (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CExternalSettingsDeltaProcessor.java)/**
 * Responsible for applying external settings delta to a given ICConfigurationDescrptions
 */
CExternalSettingsHolder (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CExternalSettingsHolder.java)/**
 * The raw external settings as exported by a project configuration.
 */
CContainerRef (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CExternalSettingsManager.java)/**
	 * A simple class representing an external settings container.
	 * These are uniquely identifiable by the factoryId + factory
	 * specific container id
	 */
NullContainer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CExternalSettingsManager.java)/**
	 * A dummy SettingsContainer with 0 CExternalSettings
	 */
ProjDesCfgList (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CExternalSettingsManager.java)/**
	 * A simple container type that contains a Project Description & and associated list
	 * of configuration descriptions.
	 */
CfgRefContainer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CfgExportSettingContainerFactory.java)/**
	 * An ExternalSettingsContainer which returns the settings as
	 * exported by a referenced configuration in another project.
	 */
CfgExportSettingContainerFactory (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CfgExportSettingContainerFactory.java)/**
 * A class responsible for persisting CDT Projects and Configuration IDs as referenced
 * by other configurations in other projects.
 * The user controls this via RefsTab.  This External settings factory listens
 * for CProjectDescription model changes and notifies the {@link CExternalSettingsManager},
 * which is a listener, of changes to the set of external settings.
 * {@link ICConfigurationDescription#setReferenceInfo(Map)} and {@link ICConfigurationDescription#getReferenceInfo()}
 */
ListenerDescriptor (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CProjectDescriptionManager.java)/**
	 * Container class for ICProjectDescription change listeners
	 */
CProjectDescriptionManager (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CProjectDescriptionManager.java)/**
 * The CProjectDescriptionManager is to marshall the loading and storing
 * of CDT Project Descriptions.
 *
 * This class delegates loading and store of the project model to the appropriate
 * AbstractCProjectDescriptionStorage for the Project Description.  [ Discovered at Project load
 * time.]
 *
 * Users should not synchronize on the singleton instance of this class. It is the job of
 * the AbstractCProjectDescriptionStorage to ensure thread safe access to the backing store
 * as described in that interface.
 *
 * Previously this class created and persisted
 * @see ICProjectDescriptionManager
 */
CProjectDescriptionStorageManager (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CProjectDescriptionStorageManager.java)/**
 * Class that marshals creation of AbstractCProjectDescriptionStorages
 * for a given project.
 *
 * Persist Storage type ID in the .cproject file, and provides backwards compatibility
 * for existing project descriptions which don't encode the storage type in the project
 * description.
 */
CRefSettingsHolder (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/CRefSettingsHolder.java)/**
 * This class, derived from CExternalSettingsHolder, is used to cache the
 * external settings exported by some container.
 *
 * <p> External settings have two sides. The external settings exporter (represented
 * by a pure CExternalSettingsHolder) and the settings referencer referenced by this class.
 * The CRefSettingsHolder holds a cache of the settings exports by the settings holder
 *
 * <p>Concretely, in the .cproject you might have:
 *
 * <p> In the exporting config:
 * <code>
 * <br/>&lt;cconfiguration ...
 * <br/>&nbsp;&lt;storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="..." moduleId="org.eclipse.cdt.core.settings" name="Debug"&gt;
 * <br/>&nbsp;&lt;externalSettings&gt;
 * 		<br/>&nbsp;&nbsp;&lt;externalSetting&gt;
 *			<br/>&nbsp;&nbsp;&nbsp;&lt;entry flags="" kind="includePath" name="libProj"/&gt;
 *		<br/>&nbsp;&nbsp;&lt;/externalSetting&gt;
 * 	<br/>&nbsp;&lt;/externalSettings&gt;
 *
 * </code>
 *
 * <p>In the referencing project:
 *
 * <code>
 * <br/>&lt;configuration ... &gt;
 * <br/>&lt;storageModule moduleId="org.eclipse.cdt.core.externalSettings"&gt;
 * 	<br/>&nbsp;&lt;externalSettings containerId="libProj;" factoryId="org.eclipse.cdt.core.cfg.export.settings.sipplier"&gt;
 * 		<br/>&nbsp;&nbsp;&lt;externalSetting&gt;
 *			<br/>&nbsp;&nbsp;&nbsp;&lt;entry flags="" kind="includePath" name="libProj"/&gt;
 *		<br/>&nbsp;&nbsp;&lt;/externalSetting&gt;
 * 	<br/>&nbsp;&lt;/externalSettings&gt;
 * <br/>&lt;/storageModule&gt;
 * </code>
 */
ExtensionContainerFactory (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/ExtensionContainerFactory.java)/**
 * Responsible for managing external settings providers contributed through the extension point
 */
ICExternalSettingsListener (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/ICExternalSettingsListener.java)/**
 * Listener for external settings changes
 */
CProjectDescriptionStorageTypeProxy (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/ICProjectDescriptionStorageType.java)/**
	 * The type as defined in the CProjectDescriptionStorage extension point, wraps the
	 * implemented ICProjectDescriptionType to provide proxy object for use by CProjectDescriptionStorageManager
	 */
ICProjectDescriptionStorageType (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/ICProjectDescriptionStorageType.java)/**
 * Interface defining an ICProjectDescriptionStorageType
 * used as a factory for creating project description storages
 * for a give project
 */
MultiConfigDescription (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/MultiConfigDescription.java)/**
 * This class represents multi-configuration description holder
 */
MultiFileDescription (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/MultiFileDescription.java)/**
 *
 *
 */
MultiFolderDescription (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/MultiFolderDescription.java)/**
 *
 *
 */
MultiResourceDescription (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/MultiResourceDescription.java)/**
 * This class represents multi-resource holder
 */
RcMoveHandler (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/ResourceChangeHandler.java)/**
	 * A resource move handler which updates the model when C model resources are moved / removed.
	 * It's responsible for:
	 *   - Handling project description update after a project move
	 *   - Noticing the removal of directories that correspond to SourceEntrys
	 *   - Removing resource specific configuration from removed removed files and folders
	 *
	 * It records changes made during an IResourceChangeEvent for subsequent update to the model. This
	 * is performed in a WorkspaceJob to ensure we don't remove model entries while many changes are in
	 * progress as part of a team operation. See also Bug 311189
	 */
ResourceChangeHandler (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/ResourceChangeHandler.java)/**
 * This resource change handler notices external changes to the cdt projects
 * and associated project storage metadata files, as well as changes to
 * source folders
 *
 * Notifies CProjectDescriptionManager on some events, in particular project close and remove
 */
SetCProjectDescriptionOperation (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/SetCProjectDescriptionOperation.java)/**
 * The operation which actually causes the CProjectDescription to be serialized
 *
 * This organizes the firing the {@link CProjectDescriptionEvent}s to all listeners
 */
SynchronizedStorageElement (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/SynchronizedStorageElement.java)/**
 * Implementation of ICStorageElement which wraps another ICStorageElement
 * in synchronization.  This is similar to the Collections.synchronized
 * methods.
 *
 * If two threads structurally modify the same part of the tree,
 * then this may still fail.
 *
 * This is used by CConfigBaseDescriptor to allow multiple threads
 * to modify the same storage elements (mostly) safely.  See the associated
 * tests in the CDescriptor testsuite
 *
 * TODO best effort concurrent modification exception
 */
InternalXmlStorageElement (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/xml/InternalXmlStorageElement.java)/**
 *
 * Internal XmlStorageElement adds the following functionality
 *  - Dirty flag
 *  - Read-only flag
 *  - XmlStorage which corresponds to the Xml ICSettingsStorage
 *	    if this ICStorageElement is root of a storage tree
 */
DesSerializationRunnable (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/xml/XmlProjectDescriptionStorage.java)/**
	 * The workspace runnable that actually goes about serializing the project description
	 */
XmlProjectDescriptionStorage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/xml/XmlProjectDescriptionStorage.java)/**
 * This class acts as the (de)serialization of the Xml Project model
 *
 * The read-only project description is referenced through a volatile reference
 * which is updated atomically.
 * The serializationLock is used to prevent concurrent read & write of the project
 * description by Eclipse.  All Scheduling rules _must_ be acquired before attempting
 * to lock serializationLock (as it happens the setCProjectDescriptionOperation uses
 * the Workspace scheduling rule).
 *
 *   FIXME JBB we should use a more advanced overlay tree in the project
 *   description manager to allow safe concurrent access to the tree -- this will
 *   save both space (memory only needed for deltas) and provide easier access
 *   to the deltas.  Having done this we should return a different ICDescriptor for
 *   each thread that requests it.
 * @see AbstractCProjectDescriptionStorage
 */
XmlProjectDescriptionStorageFactory (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/xml/XmlProjectDescriptionStorageFactory.java)/**
 * Concrete implementation of ICProjectDescriptionStorageType
 * for instantiating XmlProjectDescriptionStorage
 */
XmlStorage (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/xml/XmlStorage.java)/**
 * Concrete implementation of ICSettingsStorage backed by an XML document
 *
 * ICStorageElements are stored in the tree under a storageModule element.
 * (This class was previously called CStorage)
 * TODO JBB Make this independent of the Xml Element
 */
XmlProjectDescriptionStorage2 (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/xml2/XmlProjectDescriptionStorage2.java)/**
 * This class extends XmlProjectDescriptionStroage to provide the following
 * functionality:
 *   - Configuration Description storage modules are persisted in separate XML
 *     files stored under .csettings in the project root directory.  They
 *     are linked into the main .cproject file via "externalCElementFile" element
 *
 * It is backwards compatible with XmlProjectDescriptionStorage.  If it finds a file
 * with Version less than 5.0, it will delegate to the previous XmlProjectDescriptionStorage
 *
 * This allows users to more easily version control their CDT project descriptions
 * @see <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=226457">Bug 226457</a>
 */
XmlProjectDescriptionStorage2Factory (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/xml2/XmlProjectDescriptionStorage2Factory.java)/**
 * Concrete implementation of ICProjectDescriptionStorageType
 * for instantiating XmlProjectDescriptionStorage2
 */
Canceler (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/Canceler.java)/**
 * A thread-safe implementation of {@link ICanceler} interface.
 */
CharArrayBuffer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/CharArrayBuffer.java)/**
 * The <code>CharArrayBuffer</code> is intended as a lightweight partial
 * implementation of the StringBuffer class, but using <code>char[]'s</code>
 * instead of Strings.
 *
 * <p>
 * The <code>CharArrayBuffer</code> maintains a list of <code>char[]'s</code>
 * which don't get appended until the user asks for them. The following code
 * illustrates how to use the class.
 *
 * <code>
 * CharArrayBuffer buffer = new CharArrayBuffer(myCharArray);
 * buffer.append(moreBytes, 0, someLength);
 * myCharArray = buffer.getContents();
 * </code>
 *
 * <p>
 * NOTE: This class is not Thread safe!
 */
ICancelable (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/ICancelable.java)/**
 * Interface for cancelable objects.
 *
 * @since 5.0
 */
ICanceler (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/ICanceler.java)/**
 * An interface for objects accepting an instance of {@link ICancelable}.
 *
 * @since 5.0
 */
ILRUCacheable (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/ILRUCacheable.java)/**
 * Types implementing this interface can occupy a variable amount of space
 * in an LRUCache.  Cached items that do not implement this interface are
 * considered to occupy one unit of space.
 *
 * @see LRUCache
 *
 * This interface is similar to the JDT ILRUCacheable interface.
 */
LRUCacheEntry (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/LRUCache.java)/**
	 * This type is used internally by the LRUCache to represent entries
	 * stored in the cache.
	 * It is static because it does not require a pointer to the cache
	 * which contains it.
	 *
	 * @see LRUCache
	 */
LRUCache (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/LRUCache.java)/**
 * The <code>LRUCache</code> is a hash table that stores a finite number of elements.
 * When an attempt is made to add values to a full cache, the least recently used values
 * in the cache are discarded to make room for the new values as necessary.
 *
 * <p>The data structure is based on the LRU virtual memory paging scheme.
 *
 * <p>Objects can take up a variable amount of cache space by implementing
 * the <code>ILRUCacheable</code> interface.
 *
 * <p>This implementation is NOT thread-safe.  Synchronization wrappers would
 * have to be added to ensure atomic insertions and deletions from the cache.
 *
 * @see ILRUCacheable
 *
 * This class is similar to the JDT LRUCache class.
 */
LRUCacheEnumerator (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/LRUCacheEnumerator.java)/**
 *	The <code>LRUCacheEnumerator</code> returns its elements in
 *	the order they are found in the <code>LRUCache</code>, with the
 *	most recent elements first.
 *
 *	Once the enumerator is created, elements which are later added
 *	to the cache are not returned by the enumerator.  However,
 *	elements returned from the enumerator could have been closed
 *	by the cache.
 *
 *  This class is similar to the JDT LRUCacheEnumerator class.
 */
MementoTokenizer (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/MementoTokenizer.java)/**
 * A tokenizer to decipher a C element memento string.
 *
 * @since 5.0
 */
OverflowingLRUCache (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/OverflowingLRUCache.java)/**
 *	The <code>OverflowingLRUCache</code> is an LRUCache which attempts
 *	to maintain a size equal or less than its <code>fSpaceLimit</code>
 *	by removing the least recently used elements.
 *
 *	<p>The cache will remove elements which successfully close and all
 *	elements which are explicitly removed.
 *
 *	<p>If the cache cannot remove enough old elements to add new elements
 *	it will grow beyond <code>fSpaceLimit</code>. Later, it will attempt to
 *	shink back to the maximum space limit.
 *
 *	The method <code>close</code> should attempt to close the element.  If
 *	the element is successfully closed it will return true and the element will
 *	be removed from the cache.  Otherwise the element will remain in the cache.
 *
 *	<p>The cache implicitly attempts shrinks on calls to <code>put</code>and
 *	<code>setSpaceLimit</code>.  Explicitly calling the <code>shrink</code> method
 *	will also cause the cache to attempt to shrink.
 *
 *	<p>The cache calculates the used space of all elements which implement
 *	<code>ILRUCacheable</code>.  All other elements are assumed to be of size one.
 *
 *	<p>Use the <code>#peek(Object)</code> and <code>#disableTimestamps()</code> method to
 *	circumvent the timestamp feature of the cache.  This feature is intended to be used
 *	only when the <code>#close(LRUCacheEntry)</code> method causes changes to the cache.
 *	For example, if a parent closes its children when </code>#close(LRUCacheEntry)</code> is called,
 *	it should be careful not to change the LRU linked list.  It can be sure it is not causing
 *	problems by calling <code>#peek(Object)</code> instead of <code>#get(Object)</code> method.
 *
 *	@see LRUCache
 *
 * This class is similar to the JDT OverflowingLRUCache class.
 */
TextUtil (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/TextUtil.java)/**
 * Collection of methods for working with text.
 */
ToStringSorter (/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/util/ToStringSorter.java)/**
 * The SortOperation takes a collection of objects and returns
 * a sorted collection of these objects. The sorting of these
 * objects is based on their toString(). They are sorted in
 * alphabetical order.
 *
 * This class is similar to the JDT toStringSorter class.
 */
ASTCompletionNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ASTCompletionNode.java)/**
 * @author Doug Schaefer
 */
ASTGenericVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ASTGenericVisitor.java)/**
 * Generic visitor for AST nodes.
 * <p> Clients may subclass. </p>
 * @since 5.1
 */
ASTNameCollector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ASTNameCollector.java)/**
 * A convenience visitor that collects names.
 * @since 5.1
 */
ASTNodeFactoryFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ASTNodeFactoryFactory.java)/**
 * Provides access to the node factories.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @since 5.2
 */
ASTNodeProperty (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ASTNodeProperty.java)/**
 * This interface represents a structural property in an IASTNode. This is used
 * to determine the relationship between a child node and it's parent. This is
 * especially important with rewrite since we need to understand how to properly
 * replace the child in the source.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ASTSignatureUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ASTSignatureUtil.java)/**
 * This is a utility class to help convert AST elements to Strings corresponding to the AST
 * element's signature.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @deprecated The class is provided for testing purposes, only. It should not be used by clients.
 * Within CDT it is recommended to use {@link ASTStringUtil}, instead.
 */
ASTTypeMatcher (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ASTTypeMatcher.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ASTTypeUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ASTTypeUtil.java)/**
 * Collection of static methods for converting AST elements to {@link String}s corresponding to
 * the AST element's type.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
ASTVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ASTVisitor.java)/**
 * Abstract base class for all visitors to traverse AST nodes. <br>
 * visit() methods implement a top-down traversal, and <br>
 * leave() methods implement a bottom-up traversal. <br>
 *
 * <p>Clients may subclass.</p>
 */
CASTVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/CASTVisitor.java)/**
 * @deprecated you can use {@link ASTVisitor}, instead.
 */
ICArrayType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICArrayType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTArrayDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTArrayDesignator.java)/**
 * C-style array designator. e.g. struct ABC { int def[10] }; struct ABC
 * instance = { def[0] = 9 };
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTArrayModifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTArrayModifier.java)/**
 * This interface represents the role of a C array modifier. C allows for
 * modifiers (const, restrict, etc.) as well as variable sized arrays.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTCompositeTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTCompositeTypeSpecifier.java)/**
 * Structs and Unions in C can be qualified w/restrict keyword.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTDeclSpecifier.java)/**
 * C extension to IASTDeclSpecifier. (restrict keyword)
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTDesignatedInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTDesignatedInitializer.java)/**
 * This interface represents a designated initializer,
 * e.g. struct x y = { .z = 4, .t[1] = 3 };
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTDesignator.java)/**
 * Base interface for all C-style designators.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTElaboratedTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTElaboratedTypeSpecifier.java)/**
 * C's elaborated type specifier. (same as IASTElaboratedTypeSpecifier, except
 * for the addition of the restrict keyword.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTEnumerationSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTEnumerationSpecifier.java)/**
 * C Enumeration decl specifier. Allows for "restrict enum X { a, b, c };
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTFieldDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTFieldDesignator.java)/**
 * Specific designator that represents a field reference.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTPointer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTPointer.java)/**
 * C-specific pointer. (includes restrict modifier).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTSimpleDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTSimpleDeclSpecifier.java)/**
 * This interface represents a built-in type in C.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTTypedefNameSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTTypedefNameSpecifier.java)/**
 * This interface is just as an IASTNamedTypeSpecifier, except that it also
 * includes the abiliy to use the restrict modifier.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTTypeIdInitializerExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTTypeIdInitializerExpression.java)/**
 * C Expression of the format type-id { initializer }
 *
 * GCC allows compound literals for c++, therefore the interface was moved to the common
 * ast interfaces ({@link IASTTypeIdInitializerExpression}). For compatibility this interface
 * is kept.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICASTVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICASTVisitor.java)/**
 * Interface for visitors to visit c-specific nodes.
 * @since 5.0
 */
ICBasicType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICBasicType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICCompositeTypeScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICCompositeTypeScope.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICExternalBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICExternalBinding.java)/**
 * This interface represents a binding for a function or variable that is
 * assumed to exist in another compilation unit and that would be found at link
 * time.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICFunctionPrototypeScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICFunctionPrototypeScope.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICFunctionScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICFunctionScope.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICNodeFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICNodeFactory.java)/**
 * Factory for AST nodes for the C programming language.
 *
 * @since 5.1
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPointerType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICPointerType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICQualifierType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICQualifierType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/c/ICScope.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
CPPASTVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/CPPASTVisitor.java)/**
 * @deprecated you can use {@link ASTVisitor}, instead.
 */
ICPPAliasTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPAliasTemplate.java)/**
 * Represents an alias template (14.5.7).
 * @since 5.5
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPAliasTemplateInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPAliasTemplateInstance.java)/**
 * Represents an instance of an alias template (14.5.7).
 * @since 5.5
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTAliasDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTAliasDeclaration.java)/**
 * Represents a C++ alias declaration.
 * e.g. struct Type {}; using Alias = Type;
 * @since 5.5
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTAlignmentSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTAlignmentSpecifier.java)/**
 * A C++ alignment-specifier.
 *
 * In the C++ grammar, an alignment-specifier is an attribute-specifier.
 *
 * @since 6.0
 */
ICPPASTAmbiguousTemplateArgument (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTAmbiguousTemplateArgument.java)/**
 * Place-holder in the AST for template arguments that are not yet understood.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTArrayDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTArrayDeclarator.java)/**
 * Array declarator for C++
 * @since 5.2
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTArrayDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTArrayDesignator.java)/**
 * Array designator, e.g. [4] in int a[6] = { [4] = 29, [2] = 15 };
 * @since 6.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTArraySubscriptExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTArraySubscriptExpression.java)/**
 * @since 5.1
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTAttribute (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTAttribute.java)/**
 * Represents a C++11 (ISO/IEC 14882:2011 7.6) attribute.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.7
 */
ICPPASTAttributeList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTAttributeList.java)/**
 * Represents a C++11 (ISO/IEC 14882:2011 7.6.1 [dcl.attr.grammar]) attribute specifier
 * of the form [[ attribute-list ]].
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 6.0
 */
ICPPASTBinaryExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTBinaryExpression.java)/**
 * C++ adds a few more binary expressions over C.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTCapture (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTCapture.java)/**
 * Capture for a lambda expression, introduced in C++0x.
 *
 * @since 5.3
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTCastExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTCastExpression.java)/**
 * C++ adds in additional cast-style expressions.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTCatchHandler (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTCatchHandler.java)/**
 * Catch handler used for try block statements or for functions with try block.
 * @see ICPPASTFunctionWithTryBlock
 * @see ICPPASTTryBlockStatement
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTClassVirtSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTClassVirtSpecifier.java)/**
 * A class-virt-specifier after a class name.
 * There is currently one specifier, 'final'.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.7
 */
ICPPASTBaseSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTCompositeTypeSpecifier.java)/**
	 * Base specifiers are where a class expresses from whom it inherits.
	 *
	 * @noimplement This interface is not intended to be implemented by clients.
	 */
ICPPASTCompositeTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTCompositeTypeSpecifier.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTCompoundStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTCompoundStatement.java)/**
 * Represents a block of statements in C++.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.10
 */
ICPPASTConstructorChainInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTConstructorChainInitializer.java)/**
 * Represents a member initializer:
 * <pre> class X {
 *     int a;
 *     X();
 * };
 * X::X : a(0) {}  // a(0) is a member initializer.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTConstructorInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTConstructorInitializer.java)/**
 * Represents a potentially empty list of initializers in parenthesis: ( initializer-list? )
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTConversionName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTConversionName.java)/**
 * This interface represents a C++ conversion member function.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTDeclarator.java)/**
 * Declarator for c++.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.2
 */
ICPPASTDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTDeclSpecifier.java)/**
 * C++ adds additional modifiers and types for decl specifier sequence.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTDecltypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTDecltypeSpecifier.java)/**
 * C++ AST node for decltype-specifiers.
 *
 * Currently, this class is only used to represent decltype-specifiers
 * in qualified names, not in decl-specifiers (in decl-specifiers,
 * a decltype-specifier is represented as an ICPPASTSimpleDeclSpecifier).
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.6
 */
ICPPASTDeleteExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTDeleteExpression.java)/**
 * This interface represents a delete expression. delete [] operand;
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTDesignatedInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTDesignatedInitializer.java)/**
 * This interface represents a designated initializer,
 * e.g. in struct A y = { .z = 4, .t[1] = 3 };
 * @since 6.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTDesignator.java)/**
 * Base interface for all C-style designators.
 * @since 6.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTElaboratedTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTElaboratedTypeSpecifier.java)/**
 * Elaborated types specifier in C++ [dcl.type.elab].
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTEnumerationSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTEnumerationSpecifier.java)/**
 * <code>enum struct : unsigned int {...}</code>
 *
 * @since 5.2
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTExplicitTemplateInstantiation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTExplicitTemplateInstantiation.java)/**
 * This interface represents an explicit template instantiation.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTExpression.java)/**
 * Interface for C++ expressions. Any full-expressions may contain {@link IASTImplicitDestructorName}s of
 * destructors called at the end of the expression to destroy temporaries created by the expression.
 * A full-expression is an expression that is not a subexpression of another expression.
 *
 * @since 5.10
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTExpressionList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTExpressionList.java)/**
 * @since 5.1
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTFieldDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTFieldDeclarator.java)/**
 * Field declarator for c++.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.2
 */
ICPPASTFieldDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTFieldDesignator.java)/**
 * Specific designator that represents a field reference.
 * @since 6.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTFieldReference (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTFieldReference.java)/**
 * Certain field references in C++ require the use the keyword template to
 * specify the parse.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTForStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTForStatement.java)/**
 * The C++ 'for' statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTFunctionCallExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTFunctionCallExpression.java)/**
 * @since 5.1
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTFunctionDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTFunctionDeclarator.java)/**
 * C++ adds a few things to function declarators.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICPPASTFunctionDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTFunctionDefinition.java)/**
 * In c++ the a function definition for a constructor may contain member initializers.
 * @since 5.1
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTFunctionTryBlockDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTFunctionTryBlockDeclarator.java)/**
 * @deprecated, use {@link ICPPASTFunctionWithTryBlock}, instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
ICPPASTFunctionWithTryBlock (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTFunctionWithTryBlock.java)/**
 * Models a function defined with a try block, which is a function definition:
 * <pre> void func() try {
 * } catch (...) {
 * }
 * @since 5.1
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTIfStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTIfStatement.java)/**
 * The 'if' statement including the optional else clause.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTInitCapture (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTInitCapture.java)/**
 * Init capture for a lambda expression, introduced in C++14.
 *
 * @since 6.5
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTInitializerClause (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTInitializerClause.java)/**
 * C++ specific initializer clause.
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.5
 */
ICPPASTInitializerList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTInitializerList.java)/**
 * Braced initializer list.
 *
 * @since 5.2
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTLambdaExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTLambdaExpression.java)/**
 * Lambda expression, introduced in C++11.
 *
 * @since 5.3
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTLinkageSpecification (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTLinkageSpecification.java)/**
 * This interface represents a linkage specification. e.g. extern "C" { ... }
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTLiteralExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTLiteralExpression.java)/**
 * C++ adds additional literal types to primary expression.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTName.java)/**
 * AST node for names in C++ translation units.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.6
 */
ICPPASTNamedTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTNamedTypeSpecifier.java)/**
 * C++ adds the capability of qualifying a named type specifier w/the keyword
 * typename.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTNamespaceAlias (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTNamespaceAlias.java)/**
 * This interface represents a namespace alias in C++,
 * e.g. namespace ABC { int* x; } namespace DEF = ABC;
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTNamespaceDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTNamespaceDefinition.java)/**
 * This interface represents a namespace definition in C++.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTNameSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTNameSpecifier.java)/**
 * AST node for elements of the qualifier in a qualified name.
 *
 * A name-specifier can either be a name, or a decltype-specifier.
 *
 * Note that a decltype-specifier can only appear as the first
 * element of a qualifier, but this constraint is not encoded
 * in the AST.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.6
 */
ICPPASTNaryTypeIdExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTNaryTypeIdExpression.java)/**
 * A type-id expression with any number of arguments.
 * Example: __is_trivially_constructible(MyClass, int, float)
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 6.0
 */
ICPPASTNewExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTNewExpression.java)/**
 * This interface represents a new expression.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTOperatorName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTOperatorName.java)/**
 * This interface represents a C++ overloaded operator member function name.
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTPackExpandable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTPackExpandable.java)/**
 * Interface for nodes that can potentially be pack-expansions.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.2
 */
ICPPASTPackExpansionExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTPackExpansionExpression.java)/**
 * Pack expansion as it can occur as an element in an expression-lists or as a
 * non-type template argument.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.2
 */
ICPPASTParameterDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTParameterDeclaration.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTPointerToMember (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTPointerToMember.java)/**
 * This is a pointer to member pointer operator for declarators.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTQualifiedName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTQualifiedName.java)/**
 * This interface is a qualified name in C++.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTRangeBasedForStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTRangeBasedForStatement.java)/**
 * Represents a range-based 'for' loop.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.3
 */
ICPPASTReferenceOperator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTReferenceOperator.java)/**
 * This is C++'s reference operator, i.e. &, used in a declarator.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTSimpleDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTSimpleDeclSpecifier.java)/**
 * This interface represents a built-in type in C++.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTSimpleTypeConstructorExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTSimpleTypeConstructorExpression.java)/**
 * Functional cast expressions:
 *   simple-type-specifier (expression-list?)
 *   simple-type-specifier braced-init-list
 *   typename-specifier (expression-list?)
 *   typename-specifier braced-init-list
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTSimpleTypeTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTSimpleTypeTemplateParameter.java)/**
 * This interface represents a simple type template parameter.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTStaticAssertDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTStaticAssertDeclaration.java)/**
 * Models static assertions: <code> static_assert(false, "message");</code>
 *
 * @since 5.2
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTStructuredBindingDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTStructuredBindingDeclaration.java)/**
 * This is a structured binding declaration which contains a sequence names,
 * in square brackets, that decompose an initializer.
 * <p>
 * Examples:
 * <ul>
 * <li><code>auto [x, y]{coordinate};</code></li>
 * <li><code>auto & [x, y](coordinate);</code></li>
 * <li><code>auto && [x, y] = createCoordinte();</code></li>
 * </ul>
 *
 * @since 6.9
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTSwitchStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTSwitchStatement.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTTemplateDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTemplateDeclaration.java)/**
 * Template declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTTemplatedTypeTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTemplatedTypeTemplateParameter.java)/**
 * This is a template template parameter as <code> V </code> in
 * <code>template&lttemplate&lttypename T&gt class V&gt class CT;</code>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTTemplateId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTemplateId.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTTemplateName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTemplateName.java)/**
 * This interface represents template names which use the template disambiguator
 * keyword.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 6.6
 */
ICPPASTTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTemplateParameter.java)/**
 * Base interface for all template parameters.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTemplateSpecialization.java)/**
 * This interface represents a template specialization.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTTranslationUnit (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTranslationUnit.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTTryBlockStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTryBlockStatement.java)/**
 * This interface represents the try block statement. try { //body } catch (Exc e)
 * { // handler } catch ( ... ) { }
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTTypeId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTypeId.java)/**
 * Type ids in C++.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.2
 */
ICPPASTTypeIdExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTypeIdExpression.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTTypenameExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTypenameExpression.java)/**
 * @deprecated Unified with {@link ICPPASTSimpleTypeConstructorExpression}.
 * @noreference This interface is not intended to be referenced by clients.
 */
ICPPASTTypeTransformationSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTTypeTransformationSpecifier.java)/**
 * A decl-specifier that represents the application of an intrinsic type
 * transformation operator like __underlying_type(T). Intrinsic operators
 * of this form take a type as input, and evaluate to a type.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.6
 */
ICPPASTUnaryExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTUnaryExpression.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTUsingDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTUsingDeclaration.java)/**
 * This interface represents a using declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTUsingDirective (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTUsingDirective.java)/**
 * This interface represents a C++ using directive.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTVirtSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTVirtSpecifier.java)/**
 * A virt-specifier at the end of a function declaration.
 * There are two virt-specifiers, 'final' and 'override'.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.7
 */
ICPPASTVisibilityLabel (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTVisibilityLabel.java)/**
 * C++ allows for visibility labels to be mixed with declarations in class specifiers.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTVisitor.java)/**
 * Interface for visitors to visit c-specific nodes.
 * @since 5.0
 */
ICPPASTWhileStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTWhileStatement.java)/**
 * This interface accommodates C++ allows for broader while loop syntax.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPBase (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPBase.java)/**
 * Represents the relationship between a class and one of its base classes.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPBasicType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPBasicType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPBinding.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPBlockScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPBlockScope.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPClassScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPClassScope.java)/**
 * Interface for class scopes.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICPPClassSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPClassSpecialization.java)/**
 * Specializations of all sorts of class types.
 * @since 5.1
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPClassTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPClassTemplate.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPClassTemplatePartialSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPClassTemplatePartialSpecialization.java)/**
 * This interface represents a class template partial specialization.  A partial specialization is
 * a class template in its own right.
 *
 * E.g.:
 * template <class T> class A {};     // the primary class template
 * template <class T> class A<T*> {}; // a partial specialization of the primary class template
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPClassTemplatePartialSpecializationSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPClassTemplatePartialSpecializationSpecialization.java)/**
 * Interface for specializations of partial specializations.
 *
 * @since 5.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPClassType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPClassType.java)/**
 * Represents a C++ class.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPConstructor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPConstructor.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPConstructorSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPConstructorSpecialization.java)/**
 * Binding for specializations of constructors.
 *
 * @since 6.2
 */
ICPPDeferredFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPDeferredFunction.java)/**
 * Represents a reference to a function which cannot be resolved
 * because  an argument depends on a template parameter.
 *
 * @since 5.6
 */
ICPPDeferredTemplateInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPDeferredTemplateInstance.java)/**
 * @deprecated use {@link ICPPDeferredClassInstance} instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
ICPPEnumeration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPEnumeration.java)/**
 * C++ specific version of enumerations.
 *
 * @since 5.2
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPEnumerationSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPEnumerationSpecialization.java)/**
 * @since 5.5
 */
ICPPEnumScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPEnumScope.java)/**
 * Interface for enumeration scopes.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.7
 */
ICPPField (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPField.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPFieldTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPFieldTemplate.java)/**
 * A field template.
 *
 * @since 6.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPFunction.java)/**
 * Binding for c++ functions.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICPPFunctionInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPFunctionInstance.java)/**
 * This interface represents an instantiation or an explicit specialization of a function template.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.8
 */
ICPPFunctionScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPFunctionScope.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPFunctionSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPFunctionSpecialization.java)/**
 * Binding for specializations of functions.
 *
 * @since 6.2
 */
ICPPFunctionTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPFunctionTemplate.java)/**
 * Interface for function templates
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICPPFunctionType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPFunctionType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPMember (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPMember.java)/**
 * Represents a member of a class. Adds in the visibility attribute.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPMethod (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPMethod.java)/**
 * Base interface for methods, also used for constructors.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPMethodSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPMethodSpecialization.java)/**
 * Specialization of a method.
 * @since 5.5
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPNamespace (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPNamespace.java)/**
 * This interface represents a C++ namespace
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPNamespaceAlias (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPNamespaceAlias.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPNamespaceScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPNamespaceScope.java)/**
 * A namespace scope is either a block-scope or a namespace-scope or global scope.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPNodeFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPNodeFactory.java)/**
 * Factory for AST nodes for the C++ programming language.
 *
 * @since 5.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPParameter.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPParameterPackType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPParameterPackType.java)/**
 * A parameter pack is not actually a type, however we model it as such in order
 * to be able to represent function-types that contain parameter packs.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.2
 */
ICPPPartiallySpecializable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPPartiallySpecializable.java)/**
 * Something that can be partially specialized. Hence, a class or a variable template
 * but not a function template.
 *
 * @since 6.0
 */
ICPPPartialSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPPartialSpecialization.java)/**
 * A partially specialized variable or class template.
 *
 * @since 6.0
 */
ICPPPointerToMemberType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPPointerToMemberType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPReferenceType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPReferenceType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPScope.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPSpecialization.java)/**
 * For an instantiation of a class template, the members of that instantiation will be
 * specializations of the members of the original class template.
 * For an instantiation of a function template, the parameters will be specializations
 * of the parameters of the original function template.
 * Specializations can also be explicitly defined.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPTemplateArgument (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTemplateArgument.java)/**
 * Models the value of a template parameter or for the argument of a template-id.
 * Such a value can either be a type-value, or an integral value.
 *
 * @since 5.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPTemplateDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTemplateDefinition.java)/**
 * Base interface for all template definitions including explicit (partial) specializations.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPTemplateInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTemplateInstance.java)/**
 * This interface represents an instantiation or an explicit specialization of a class or a function template.
 * The {@link #isExplicitSpecialization()} method is used to distinguish between the two cases.
 *
 * An instance of a class template will also implement ICPPClassType and similarly a function template
 * instance will also implement ICPPFunction (or even ICPPMethod or ICPPConstructor as appropriate).
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICPPTemplateNonTypeParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTemplateNonTypeParameter.java)/**
 * Interface for template non type parameters.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICPPTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTemplateParameter.java)/**
 * Base interface for all template parameters (non-type, type and template).
 *
 * All template parameters should implement ICPPUnknownBinding as well
 * (but ICPPTemplateParameter cannot extend ICPPUnknownBinding because
 * ICPPUnknownBinding is not API).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPTemplateParameterMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTemplateParameterMap.java)/**
 * Models the mapping of template parameters to values, or pack-expansions.
 *
 * @since 5.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPTemplateScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTemplateScope.java)/**
 * A separate template scope is used for each template declaration. This leads to a
 * non-hierarchical structure of scopes. E.g. for a method of a class-template the
 * declaration and definition will nests in different template-scopes. Therefore
 * {@link IScope#getParent()} will never return a template scope unless the method is
 * called for a template-scope that directly nests in another one.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPTemplateTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTemplateTemplateParameter.java)/**
 * Template parameters of type template.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPTemplateTypeParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTemplateTypeParameter.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPTypeSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPTypeSpecialization.java)/**
 * A common interface for ICPPClassSpecialization and ICPPEnumerationSpecialization.
 *
 * @since 5.9
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPUnaryTypeTransformation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPUnaryTypeTransformation.java)/**
 * A type used to represent the result of applying an unary
 * type transformation operator like __underlying_type(T).
 *
 * This representation is only used when T is dependent (and thus
 * we cannot evaluate the type transformation yet). If T is not
 * dependent, we simply use the result of evaluating the type
 * transformation.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.6
 */
ICPPUsingDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPUsingDeclaration.java)/**
 * A using declaration introduces a name into the declarative region in which
 * it appears, that name is a synonym of some entity declared elsewhere
 *
 * The using declaration is both a declaration of a new binding and a reference to a
 * previously declared binding
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPUsingDirective (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPUsingDirective.java)/**
 * Interface to model using directives. Needed to bridge between directives found in the
 * AST and the ones found in the index.
 * @since 5.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPVariable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPVariable.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPVariableInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPVariableInstance.java)/**
 * Represents an instantiation or an explicit specialization of a variable template.
 *
 * @since 6.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPVariableTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPVariableTemplate.java)/**
 * A variable template.
 *
 * @since 6.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPVariableTemplatePartialSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPVariableTemplatePartialSpecialization.java)/**
 * Partial specialization of a variable template.
 *
 * @since 6.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
SemanticQueries (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/SemanticQueries.java)/**
 * This class exposes semantic queries about C++ code to clients such
 * as code analysis.
 *
 * @since 5.5
 */
DOMException (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/DOMException.java)/**
 * This is the general purpose exception that is thrown for resolving semantic
 * aspects of an illegal binding.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ExpansionOverlapsBoundaryException (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ExpansionOverlapsBoundaryException.java)/**
 * See {@link IASTNode#getTrailingSyntax()} and {@link IASTNode#getLeadingSyntax()}.
 * @since 5.1
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
GCCLanguage (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/c/GCCLanguage.java)/**
 * Concrete ILanguage implementation for the DOM C parser.
 */
ICASTKnRFunctionDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/c/ICASTKnRFunctionDeclarator.java)/**
 * This is the declarator for a K&R C Function.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGCCASTArrayRangeDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/c/IGCCASTArrayRangeDesignator.java)/**
 * GCC-specific designator that allows for shorthand array range to be specified
 * in a designated initializer.
 *
 * struct ABC { int def[10]; } abc = { def[4...10] = 3 };
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGCCASTSimpleDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/c/IGCCASTSimpleDeclSpecifier.java)/**
 * @deprecated Everything can be expressed as {@link ICASTSimpleDeclSpecifier}.
 * @noreference This interface is not intended to be referenced by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
GPPLanguage (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/GPPLanguage.java)/**
 * Concrete ILanguage implementation for the DOM C++ parser.
 */
IGPPASTArrayRangeDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPASTArrayRangeDesignator.java)/**
 * GCC-specific designator that allows for shorthand array range to be specified
 * in a designated initializer, e.g. in int a[6] = { [2 ... 4] = 29 }; or
 * struct ABC { int def[10]; } abc = { .def[4 ... 6] = 3 };
 * @since 6.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGPPASTBinaryExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPASTBinaryExpression.java)/**
 * G++ introduces additional operators.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGPPASTDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPASTDeclSpecifier.java)/**
 * @deprecated Replaced by {@link IASTDeclSpecifier}.
 * @noreference This interface is not intended to be referenced by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGPPASTExplicitTemplateInstantiation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPASTExplicitTemplateInstantiation.java)/**
 * @deprecated Replaced by {@link ICPPASTExplicitTemplateInstantiation}
 * @noreference This interface is not intended to be referenced by clients.
 */
IGPPASTPointer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPASTPointer.java)/**
 * @deprecated Use {@link IASTPointer}, instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
IGPPASTPointerToMember (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPASTPointerToMember.java)/**
 * @deprecated Use {@link ICPPASTPointerToMember}, instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
IGPPASTSimpleDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPASTSimpleDeclSpecifier.java)/**
 * @deprecated Replaced by {@link ICPPASTSimpleDeclSpecifier}.
 * @noreference This interface is not intended to be referenced by clients.
 */
IGPPBasicType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPBasicType.java)/**
 * @deprecated use {@link ICPPBasicType}, instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
IGPPPointerToMemberType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPPointerToMemberType.java)/**
 * @deprecated Use {@link ICPPPointerToMemberType}, instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
IGPPPointerType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPPointerType.java)/**
 * @deprecated Use {@link IPointerType}, instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
IGPPQualifierType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/cpp/IGPPQualifierType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGCCASTAttributeList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/IGCCASTAttributeList.java)/**
 * Represents a GCC attribute specifier, introduced by __attribute__.
 *
 * @since 6.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGCCASTAttributeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/IGCCASTAttributeSpecifier.java)/**
 * @since 5.7
 * @deprecated Use IGCCASTAttributeList instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
IGNUASTCompoundStatementExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/IGNUASTCompoundStatementExpression.java)/**
 * There are GNU language extensions that apply to both GCC and G++. Compound
 * statement's as expressions.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGNUASTGotoStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/IGNUASTGotoStatement.java)/**
 * Represents a GNU goto expression.
 *
 * <code>
 * foo:
 *   void *labelPtr = &&foo;
 *   goto *labelPtr;
 * </code>
 *
 * @since 5.8
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGNUASTTypeIdExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/IGNUASTTypeIdExpression.java)/**
 * @deprecated Use {@link IASTTypeIdExpression}, instead.
 * @noreference This interface is not intended to be referenced by clients.
 */
IGNUASTUnaryExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/gnu/IGNUASTUnaryExpression.java)/**
 * @deprecated Replaced by {@link IASTUnaryExpression}.
 * @noreference This interface is not intended to be referenced by clients.
 */
IArrayType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IArrayType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTAlignmentSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTAlignmentSpecifier.java)/**
 * Represents an alignment specifier.
 *
 * Grammatically, this is a decl-specifier in C and an attribute-specifier in C++.
 *
 * Possible forms are:
 *   C++:
 *     alignas(<type-id>)
 *     alignas(<expression>)
 *   C:
 *     _Alignas(<type-id>)
 *     _Alignas(<expression>)
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.10
 */
IASTArrayDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTArrayDeclarator.java)/**
 * This is the declarator for an array.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTArrayModifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTArrayModifier.java)/**
 * This is the portion of the node that represents the portions when someone
 * declares a variable/type which is an array.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTArraySubscriptExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTArraySubscriptExpression.java)/**
 * This interface represents a postfix array subscript expression. x[10]
 * y.z()[t * t]
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTASMDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTASMDeclaration.java)/**
 * ASM Statement as a Declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTAttribute (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTAttribute.java)/**
 * Represents a C++11 (ISO/IEC 14882:2011 7.6)
 * or a GCC attribute (http://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.4
 */
IASTAttributeList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTAttributeList.java)/**
 * An attribute-specifier of the form [[ attribute-list ]] or __attribute__(( attribute-list )).

 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 6.0
 */
IASTAttributeOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTAttributeOwner.java)/**
 * An AST node that may have attributes.
 * @since 5.4
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTAttributeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTAttributeSpecifier.java)/**
 * Represents a C++11 (ISO/IEC 14882:2011 7.6.1)
 * or a GCC attribute specifier (http://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.7
 */
IASTBinaryExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTBinaryExpression.java)/**
 * This interface represents a binary expression.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTBinaryTypeIdExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTBinaryTypeIdExpression.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.3
 */
IASTBreakStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTBreakStatement.java)/**
 * This is the break clause in a loop.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTCaseStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTCaseStatement.java)/**
 * This is a case in a switch statement. Note that in the grammar, a statement
 * is part of the clause. For the AST, just go on to the next statement to find
 * it. It's really only there to ensure that there is at least one statement
 * following this clause.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTCastExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTCastExpression.java)/**
 * This interface represents a cast expression of the form (TypeId)operand.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTComment (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTComment.java)/**
 * This class represents a comment.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTCompletionContext (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTCompletionContext.java)/**
 * Interface for a code completion's context. Used for context-sensitive
 * finding of bindings with a certain name or prefix.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 4.0
 */
CompletionNameEntry (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTCompletionNode.java)/**
	 * Represents a name that fits in this context, and its parent.
	 * The parent is stored separately because two entries can have
	 * the same name but different parents. (This is due to the
	 * parser sometimes re-using nodes between alternatives in an
	 * ambiguous node.)
	 *
	 * @since 6.4
	 */
IASTCompletionNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTCompletionNode.java)/**
 * This represents the node that would occur at the point of a context
 * completion.
 *
 * This node may contain the prefix text of an identifier up to the point. If
 * there is no prefix, the completion occurred at the point where a new token
 * would have begun.
 *
 * The node points to the parent node where this node, if replaced by a proper
 * node, would reside in the tree.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTCompositeTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTCompositeTypeSpecifier.java)/**
 * A composite type specifier represents a composite structure (contains declarations).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTCompoundStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTCompoundStatement.java)/**
 * This represents a block of statements.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTConditionalExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTConditionalExpression.java)/**
 * Conditional Expression of the format X ? Y : Z
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTContinueStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTContinueStatement.java)/**
 * This is the continue clause in a loop.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTCopyLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTCopyLocation.java)/**
 * @author Emanuel Graf IFS
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.3
 */
IASTDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTDeclaration.java)/**
 * This is the root class of all declarations.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTDeclarationListOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTDeclarationListOwner.java)/**
 * Common interface for parents of declaration lists.
 * @since 5.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTDeclarationStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTDeclarationStatement.java)/**
 * A declaration statement that introduces a declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTDeclarator.java)/**
 * Base interface for a declarator.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTDeclSpecifier.java)/**
 * This is the base interface that represents a declaration specifier sequence.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTDefaultStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTDefaultStatement.java)/**
 * This is the default clause in the switch statement. Note that in the grammar,
 * a statement is part of the clause. For the AST, just go on to the next
 * statement to find it. It's really only there to ensure that there is at least
 * one statement following this clause.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTDoStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTDoStatement.java)/**
 * Ye ol' do statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTElaboratedTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTElaboratedTypeSpecifier.java)/**
 * This represents an elaborated type specifier in the C & C++ language grammar.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTEnumerationSpecifier.java)/**
	 * This interface represents an enumerator member of an enum specifier.
	 *
	 * @noimplement This interface is not intended to be implemented by clients.
	 */
IASTEnumerationSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTEnumerationSpecifier.java)/**
 * This interface represents enumerations in C and C++.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTEqualsInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTEqualsInitializer.java)/**
 * Initializer with equals sign (copy initialization) as in <code>int x= 0;</code>.
 * @since 5.2
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTExpression.java)/**
 * This is the root class of expressions.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTExpressionList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTExpressionList.java)/**
 * Expression list (comma separated list of expressions).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTExpressionStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTExpressionStatement.java)/**
 * Expression statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTFieldDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTFieldDeclarator.java)/**
 * This represents a field in a struct. This allows for the specification of
 * size for a bit field.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTFieldReference (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTFieldReference.java)/**
 * This interface represents expressions that access a field reference. e.g. a.b => a
 * is the expression, b is the field name. e.g. a()->def => a() is the
 * expression, def is the field name.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTFileLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTFileLocation.java)/**
 * Represents a node location that is directly in the source file.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTForStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTForStatement.java)/**
 * The 'for' statement. The initialization clause can be an expression
 * or a declaration but not both.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTFunctionCallExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTFunctionCallExpression.java)/**
 * Represents a function call expression, f(x), where f is the function name expression
 * and x is the parameter expression.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTFunctionDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTFunctionDeclarator.java)/**
 * This is a declarator for a function.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTFunctionDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTFunctionDefinition.java)/**
 * This is a function definition, i.e. it has a body.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTFunctionStyleMacroParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTFunctionStyleMacroParameter.java)/**
 * This interface represents the name of a function style macro parameter. This
 * is not an IASTName, as there are not any bindings for
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTGotoStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTGotoStatement.java)/**
 * Represents a goto statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTIdExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTIdExpression.java)/**
 * This is a name used in an expression.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTIfStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTIfStatement.java)/**
 * The 'if' statement including the optional else clause.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTImageLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTImageLocation.java)/**
 * An image location explains how a name made it into the translation unit.
 * @since 5.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTImplicitDestructorName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTImplicitDestructorName.java)/**
 * An implicit name corresponding to a destructor call for a temporary or a variable going out of scope.
 *
 * @since 5.10
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTImplicitDestructorNameOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTImplicitDestructorNameOwner.java)/**
 * An AST node that may have implicit destructor names.
 * @see IASTImplicitDestructorName
 *
 * @since 5.10
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTImplicitName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTImplicitName.java)/**
 * An implicit name is used to resolve uses of implicit bindings, such as overloaded operators.
 *
 * Implicit names are not generated unless they resolve to something.
 *
 * @see ASTVisitor#shouldVisitImplicitNames
 * @since 5.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTImplicitNameOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTImplicitNameOwner.java)/**
 * An AST node that may have implicit names.
 * @since 5.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTInitializer.java)/**
 * This represents an initializer for a declarator.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTInitializerClause (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTInitializerClause.java)/**
 * Interface for AST nodes that can nest in initializer lists.
 * @since 5.2
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTInitializerExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTInitializerExpression.java)/**
 * This is an initializer that is simply an expression.
 *
 * @deprecated Replaced by {@link IASTEqualsInitializer}.
 * @noreference This interface is not intended to be referenced by clients.
 */
IASTInitializerList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTInitializerList.java)/**
 * Braced initializer list, for example as in:
 * <pre> int a[]= {1,2,3}; </pre>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTLabelStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTLabelStatement.java)/**
 * Represents a label statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTLiteralExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTLiteralExpression.java)/**
 * This expression represents a literal in the program.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IASTMacroExpansion (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTMacroExpansion.java)/**
 * @deprecated, use IASTMacroExpansionLocation instead
 * @noreference This interface is not intended to be referenced by clients.
 */
IASTMacroExpansionLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTMacroExpansionLocation.java)/**
 * Node location inside of a macro expansion.
 * @since 5.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTName.java)/**
 * This class represents a name in the program that represents a semantic object
 * in the program.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTNamedTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTNamedTypeSpecifier.java)/**
 * Represents the use of a typedef name in an decl specifier in C. Also used for
 * class/struct/union names in C.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTNameOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTNameOwner.java)/**
 * This interface represents a mechanism for a name to discover more information about it's parent.
 * All interfaces that claim ownership/residence of a name should extend this interface.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTNode.java)/**
 * This is the root node in the physical AST. A physical node represents a chunk
 * of text in the source program.
 *
 * Classes implementing this interface are not thread safe.
 * Even 'get' methods may cause changes to the underlying object.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IASTNodeLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTNodeLocation.java)/**
 * A NodeLocation represents the source location of a given node. Most often
 * this is a file it may be other fancy things like macro expansions.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTNodeSelector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTNodeSelector.java)/**
 * Interface for searching nodes in a translation unit. An instance of this interface, responsible
 * for one file contained in a translation-unit, can be obtained using
 * {@link IASTTranslationUnit#getNodeSelector(String)}.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.0
 */
IASTNullStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTNullStatement.java)/**
 * This node represents a null statement, ';'
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTParameterDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTParameterDeclaration.java)/**
 * This class represents a parameter declaration
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPointer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPointer.java)/**
 * This represents the good ol' * pointer operator.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPointerOperator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPointerOperator.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorElifStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorElifStatement.java)/**
 * Represents a #elif preprocessor statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorElseStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorElseStatement.java)/**
 * This interface represent a preprocessor #else statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorEndifStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorEndifStatement.java)/**
 * This interface represent a preprocessor #endif statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorErrorStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorErrorStatement.java)/**
 * This interface represent a preprocessor #error statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorFunctionStyleMacroDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorFunctionStyleMacroDefinition.java)/**
 * This interface represent a preprocessor function-style macro definition. e.g.
 * <pre>
 * #define ABC(def) GHI
 * </pre>
 * Note: macros that are expanded as parameters to function style macros are not captured in this
 * abstraction.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorIfdefStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorIfdefStatement.java)/**
 * This interface represent a preprocessor #ifdef statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorIfndefStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorIfndefStatement.java)/**
 * This interface represent a preprocessor #ifndef statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorIfStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorIfStatement.java)/**
 * This interface represent a preprocessor #if statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorIncludeStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorIncludeStatement.java)/**
 * This interface represents a preprocessor #include statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorMacroDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorMacroDefinition.java)/**
 * This represents the definition of a macro.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorMacroExpansion (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorMacroExpansion.java)/**
 * Models macro expansion found in the source code that is not nested inside another expansion.
 * @since 5.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorObjectStyleMacroDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorObjectStyleMacroDefinition.java)/**
 * This interface represents an object-style macro definition. e.g.
 * <pre>
 * #define ONE_TWO_THREE 123
 * </pre>
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorPragmaStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorPragmaStatement.java)/**
 * Represents a #pragma directive or a pragma operator.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorStatement.java)/**
 * This is the base interface for all preprocessor directives.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTPreprocessorUndefStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTPreprocessorUndefStatement.java)/**
 * This interface represents a preprocessor #undef statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTProblem (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTProblem.java)/**
 * Interface for problems in the AST tree.
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTProblemDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTProblemDeclaration.java)/**
 * This interface represents a parse problem where we tried to match against a declaration.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTProblemExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTProblemExpression.java)/**
 * This interface represents a parse problem where we tried to match against
 * an expression.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTProblemHolder (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTProblemHolder.java)/**
 * This interface represents a base interface to represent a problem owner or holder.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTProblemStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTProblemStatement.java)/**
 * This interface represents a parse problem where we tried to match against a statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTProblemTypeId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTProblemTypeId.java)/**
 * This interface represents a parse problem where we tried to match against a type-id.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTReturnStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTReturnStatement.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTSimpleDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTSimpleDeclaration.java)/**
 * This is a simple declaration which contains a sequence of declSpecifiers
 * followed by a list of declarators.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTSimpleDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTSimpleDeclSpecifier.java)/**
 * This represents a declaration specifier for a built-in type.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTStandardFunctionDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTStandardFunctionDeclarator.java)/**
 * This is a declarator for a non K&R C function.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTStatement.java)/**
 * This is the root interface for statements.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTSwitchStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTSwitchStatement.java)/**
 * The switch statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTToken (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTToken.java)/**
 * Represents an arbitrary code token.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.4
 */
IASTTokenList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTTokenList.java)/**
 * Represents a sequence of code tokens.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.4
 */
IASTTranslationUnit (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTTranslationUnit.java)/**
 * The translation unit represents a compilable unit of source.
 *
 * All existing implementations of IASTTranslationUnit are not thread safe.
 * Even 'get' methods may cause changes to the underlying object.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTTypeId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTTypeId.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTTypeIdExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTTypeIdExpression.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTTypeIdInitializerExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTTypeIdInitializerExpression.java)/**
 * Compound literal: type-id { initializer }
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.1
 */
IASTUnaryExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTUnaryExpression.java)/**
 * This interface is used to represent a unary expression in the AST.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IASTWhileStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTWhileStatement.java)/**
 * Ye ol' while statement.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBasicType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IBasicType.java)/**
 * Interface for basic types.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IBinding.java)/**
 * Represents the semantics of a name found in the AST or the index.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICompositeType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ICompositeType.java)/**
 * Interface for all composite types: classes, structs and unions.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICPPASTCompletionContext (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ICPPASTCompletionContext.java)/**
 * Interface for a code completion's context. Used for context-sensitive finding of bindings with a certain
 * name or prefix, including additional lookup requested namespaces.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.3
 */
IEnumeration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IEnumeration.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IEnumerator.java)/**
 * Interface for enumerators.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IField (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IField.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFileNomination (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IFileNomination.java)/**
 * Interface for constructs that nominate a file for an AST:
 * {@link IASTTranslationUnit}, {@link IASTPreprocessorIncludeStatement}, {@link IIndexFile}.
 * @since 5.4
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IFunction.java)/**
 * This represents a function in the program. A function is also a scope
 * for other bindings.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IFunctionType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IFunctionType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ILabel (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ILabel.java)/**
 * Represents the mapping between goto statements and the label statements
 * the go to.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMacroBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IMacroBinding.java)/**
 * Models bindings for macro names.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
INodeFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/INodeFactory.java)/**
 * Factory for creating AST nodes. This interface contains factory methods
 * for nodes that are available for both C and C++.
 *
 * Extending interfaces should use covariant return types where appropriate to
 * allow the construction of language-specific versions of certain nodes.
 *
 * Most methods accept child nodes as parameters when constructing a new node.
 * For convenience it is always allowed to pass null for any of these parameters.
 * In this case the newly constructed node may be initialized using its
 * set() and add() methods instead.
 *
 * Nodes created by this factory are not frozen, i.e. for any node created by this
 * factory the following holds <code> node.isFrozen() == false </code>.
 *
 * None of the factory methods should return null.
 *
 * @since 5.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IParameter.java)/**
 * Represents a parameter to a function. The scope of the parameter is
 * the function that declared this parameter.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPointerType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IPointerType.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IProblemBinding.java)/**
 * Interface for problem bindings.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IProblemType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IProblemType.java)/**
 * Represents an type that cannot be determined or is illegal. Reasons include
 * <ul>
 * <li> A type depends on a name that cannot be resolved (resolves to a {@link IProblemBinding}).
 * <li> The construction of a type is illegal.
 * </ul>
 *
 * @since 5.3
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IQualifierType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IQualifierType.java)/**
 * Interface used to qualify types.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ScopeLookupData (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IScope.java)/**
	 * @since 5.5
	 * @noextend This class is not intended to be subclassed by clients.
	 */
IScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IScope.java)/**
 * Scopes can be used to look-up names. With the exception of template-scopes the scopes
 * can be arranged in a hierarchy.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ISemanticProblem (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ISemanticProblem.java)/**
 * Base interface for all semantic problems: {@link IProblemBinding}, {@link IProblemType}
 *
 * @since 5.3
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IType.java)/**
 * Interface for all c- and c++ types.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITypedef (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ITypedef.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IValue (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IValue.java)/**
 * Models a value of a variable, enumerator or expression.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.1
 */
IVariable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IVariable.java)/**
 * Interface for all sorts of variables: local, parameter, global, field.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMSASTDeclspecList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/ms/IMSASTDeclspecList.java)/**
 * Represents a Microsoft attribute specifier, introduced by __declspec.
 *
 * @since 6.6
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBindingTagger (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/tag/IBindingTagger.java)/**
 * Implementations are contributed with the org.eclipse.cdt.core.tagger extension-point.
 * The implementation is responsible for populating the tag's data using a given input binding.
 *
 * @see #process(ITagWriter, IBinding, IASTName)
 * @since 5.5
 */
ITag (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/tag/ITag.java)/**
 * Tags are used to annotate {@link ITagReader}'s with extra information. They are created by
 * implementations of {@link IBindingTagger} which are contributed using
 * the org.eclipse.cdt.core.tagger extension point. The base tag interface is read-only, it is
 * extended by the writable {@link IWritableTag}.
 *
 * @see IBindingTagger
 * @see ITagReader
 * @see IWritableTag
 * @since 5.5
 */
ITagReader (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/tag/ITagReader.java)/**
 * An interface that provides read-only access to the tags associated with a particular binding.
 *
 * @see ITag
 * @see ITagService
 * @since 5.5
 */
ITagService (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/tag/ITagService.java)/**
 * Provides ITagReaders for specific bindings. The kind of the reader will vary based on the kind
 * of the input binding.
 *
 * @see ITag
 * @see ITagReader
 * @since 5.5
 */
ITagWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/tag/ITagWriter.java)/**
 * An interface that allows tag creation and modification.
 *
 * @see ITag
 * @see ITagService
 * @since 5.5
 */
IWritableTag (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/tag/IWritableTag.java)/**
 * Tags are used to annotate {@link ITagWriter}'s with extra information. They are created by
 * implementations of {@link IBindingTagger} which are contributed using
 * the org.eclipse.cdt.core.tagger extension point.
 *
 * @see IBindingTagger
 * @see ITagReader
 * @see ITagWriter
 * @since 5.5
 */
ReturnStatementVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/util/ReturnStatementVisitor.java)/**
 * An ASTVisitor that visits every return statement in a function
 * body and calls onReturnStatement() on it.
 *
 * @since 6.3
 */
ICodeReaderFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ICodeReaderFactory.java)/**
 * This is the interface that an AST Service uses to delegate the construction
 * of a CodeReader.
 *
 * @author jcamelon
 * @deprecated replaced by {@link IncludeFileContentProvider}
 * @noreference This interface is not intended to be referenced by clients.
 */
ILinkage (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ILinkage.java)/**
 * Represents a linkage under which bindings are stored in the index.
 * @since 4.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/IName.java)/**
 * Common interface for names in the index and the AST.
 * @since 4.0
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IParserConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/IParserConfiguration.java)/**
 * @deprecated Used only by other deprecated interfaces
 * @noreference This interface is not intended to be referenced by clients.
 */
IPDOMIndexer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/IPDOMIndexer.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPDOMIndexerTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/IPDOMIndexerTask.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPDOMManager (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/IPDOMManager.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPDOMNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/IPDOMNode.java)/**
 * Interface for all nodes that can be visited by a {@link IPDOMVisitor}.
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPDOMVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/IPDOMVisitor.java)/**
 * @author Doug Schaefer
 */
AbstractCLikeLanguage (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/AbstractCLikeLanguage.java)/**
 * This class provides a skeletal implementation of the ILanguage interface
 * for the DOM parser framework.
 *
 * This class uses the template method pattern, derived classes need only implement
 * {@link AbstractCLikeLanguage#getScannerExtensionConfiguration(IScannerInfo info)},
 * {@link AbstractCLikeLanguage#getParserLanguage()} and
 * {@link AbstractCLikeLanguage#createParser(IScanner scanner, ParserMode parserMode,
 *                                           IParserLogService logService, IIndex index)}.
 *
 * @see AbstractScannerExtensionConfiguration
 *
 * @since 5.0
 */
AbstractScannerExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/AbstractScannerExtensionConfiguration.java)/**
 * Abstract scanner extension configuration to help model C/C++ dialects.
 * @since 4.0
 */
AbstractCParserExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/c/AbstractCParserExtensionConfiguration.java)/**
 * Abstract C parser extension configuration to help model C dialects.
 * @since 4.0
 */
ANSICParserExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/c/ANSICParserExtensionConfiguration.java)/**
 * @author jcamelon
 */
GCCParserExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/c/GCCParserExtensionConfiguration.java)/**
 * Configures the parser for c-source code as accepted by gcc.
 */
GCCScannerExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/c/GCCScannerExtensionConfiguration.java)/**
 * Configures the preprocessor for parsing c-sources as accepted by gcc.
 */
ICParserExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/c/ICParserExtensionConfiguration.java)/**
 * C parser extension configuration interface.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * Clients can subclass {@link AbstractCParserExtensionConfiguration} instead.
 * @noextend This interface is not intended to be extended by clients.
 *
 * @see "http://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html"
 * @since 4.0
 */
CLanguageKeywords (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/CLanguageKeywords.java)/**
 * This class allows provides a reusable implementation of ICLanguageKeywords
 * for use by ILanguage implementations.
 *
 * @author Mike Kucera
 * @since 5.1
 */
AbstractCPPParserExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/cpp/AbstractCPPParserExtensionConfiguration.java)/**
 * Abstract C++ parser extension configuration to help model C++ dialects.
 *
 * @since 4.0
 */
ANSICPPParserExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/cpp/ANSICPPParserExtensionConfiguration.java)/**
 * @author jcamelon
 */
GPPParserExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/cpp/GPPParserExtensionConfiguration.java)/**
 * Configures the parser for c++-sources as accepted by g++.
 */
GPPScannerExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/cpp/GPPScannerExtensionConfiguration.java)/**
 * Configures the preprocessor for c++-sources as accepted by g++.
 */
ICPPASTAttributeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/cpp/ICPPASTAttributeSpecifier.java)/**
 * Represents a C++11 (ISO/IEC 14882:2011 7.6.1 [dcl.attr.grammar]) attribute specifier.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.7
 */
ICPPParserExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/cpp/ICPPParserExtensionConfiguration.java)/**
 * C++ parser extension configuration interface.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * Clients can subclass {@link AbstractCPPParserExtensionConfiguration} instead.
 * @noextend This interface is not intended to be extended by clients.
 *
 * @see "http://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html"
 * @see "http://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Extensions.html"
 * @since 4.0
 */
POPCPPParserExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/cpp/POPCPPParserExtensionConfiguration.java)/**
 * Configures the parser to accept POP C++,
 * see <a href=http://gridgroup.tic.hefr.ch/popc/index.php/Documentation>Documentation</a>
 * @since 5.1
 */
POPCPPScannerExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/cpp/POPCPPScannerExtensionConfiguration.java)/**
 * Configures the preprocessor for parsing POP C++,
 * see <a href=http://gridgroup.tic.hefr.ch/popc/index.php/Documentation>Documentation</a>
 * @since 5.1
 */
GNUScannerExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/GNUScannerExtensionConfiguration.java)/**
 * Base class for all gnu scanner configurations. Provides gnu-specific macros and keywords.
 * @since 5.0
 */
IBuiltinBindingsProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/IBuiltinBindingsProvider.java)/**
 * Provides built-in symbols to the parser.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 */
IExtensionToken (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/IExtensionToken.java)/**
 * Token types for parser extensions.
 * <p>
 * This interface is not intended to be implemented.
 * </p>
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IScannerExtensionConfiguration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/IScannerExtensionConfiguration.java)/**
 * Scanner extension configuration interface.
 *
 * @noimplement This interface is not intended to be implemented by clients. Clients can subclass
 * {@link AbstractScannerExtensionConfiguration}, instead.
 * @noextend This interface is not intended to be extended by clients.
 */
ISourceCodeParser (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/parser/ISourceCodeParser.java)/**
 * Interface for an AST source code parser.
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ASTRewrite (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/rewrite/ASTRewrite.java)/**
 * Infrastructure for modifying code by describing changes to AST nodes. The AST rewriter collects
 * descriptions of modifications to nodes and translates these descriptions into text edits that can
 * then be applied to the original source. This is all done without actually modifying the original
 * AST. The rewrite infrastructure tries to generate minimal text changes, preserve existing
 * comments and indentation, and follow code formatter settings. A {@link IASTComment} can be
 * removed from or added to a node.
 * <p>
 * The initial implementation does not support nodes that implement
 * {@link IASTPreprocessorStatement} or {@link IASTProblem}.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part of a work in
 * progress. There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 *
 * @since 5.0
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DeclarationGenerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/rewrite/DeclarationGenerator.java)/**
 * This class handles the creation of {@link IASTDeclarator}s and {@link IASTDeclSpecifier}s
 * for a given type.
 *
 * @author Tomasz Wesolowski
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.3
 */
ITrackedNodePosition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/rewrite/ITrackedNodePosition.java)/**
 * A tracked node position is returned when a rewrite change is
 * requested to be tracked.
 *
 * @since 5.1
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IMacroExpansionStep (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/rewrite/MacroExpansionExplorer.java)/**
	 * Representation of a single expansion step or a complete expansion.
	 */
MacroExpansionExplorer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/rewrite/MacroExpansionExplorer.java)/**
 * Allows to understand macro expansions step by step.
 * @since 5.0
 */
TypeHelper (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/rewrite/TypeHelper.java)/**
 * A collection of static methods related to types.
 * @since 5.4
 */
AbstractExportProjectProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/export/AbstractExportProjectProvider.java)/**
 * An IExportProjectProvider implementation intended to be sub-classed by clients. It
 * provides convenience methods for obtaining options and their parameters from the
 * command-line.
 *
 * @see ExternalExportProjectProvider for usage scenarios
 */
ExportIndexFileInfoMatcher (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/export/ExportIndexFileInfoMatcher.java)/**
 * FileInfoMatcher that will match a given project relative path for a directory we want to exclude.
 *
 * @author dschaefer
 * @since 5.7
 */
ExternalExportProjectProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/export/ExternalExportProjectProvider.java)/**
 * An IExportProjectProvider suitable for indexing an external folder. The arguments understood by this provider
 * are
 * <ul>
 * <li>-source what will become the root of the indexed content
 * <li>-include any preinclude files to configure the parser with
 * <li>-id the id to write to the produce fragment
 * </ul>
 */
IExportProjectProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/export/IExportProjectProvider.java)/**
 * An IExportProjectProvider provides a configured ICProject suitable set up for
 * indexing. It is used via the org.eclipse.cdt.core.GeneratePDOM application.
 * <br><br>
 * In general, ISV's may have very specific configuration requirements, and it is
 * expected that they subclass {@link AbstractExportProjectProvider} or {@link ExternalExportProjectProvider}
 * in order to do so.
 * <br><br>
 * If your requirements are very simple, then {@link ExternalExportProjectProvider} may
 * be sufficient for direct usage.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
Messages (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/export/Messages.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IIndex (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndex.java)/**
 * Interface for accessing the index for one or more projects.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 4.0
 */
IIndexBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexBinding.java)/**
 * Represents the semantics of a name in the index.
 * @since 4.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIndexChangeEvent (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexChangeEvent.java)/**
 * IndexChangeEvents describe changes to the index.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 4.0
 */
IIndexChangeListener (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexChangeListener.java)/**
 * An index change listener is notified of changes to the index. These changes
 * arise from the indexer working in the background.
 * <p>
 * Clients may implement this interface.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 */
IIndexerStateEvent (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexerStateEvent.java)/**
 * IndexChangeEvents describe changes to the state of the indexer.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 4.0
 */
IIndexerStateListener (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexerStateListener.java)/**
 * An indexer state listener is notified of changes to the state of the indexer.
 * <p>
 * Clients may implement this interface.
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 * @since 4.0
 */
IIndexFile (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexFile.java)/**
 * Represents a file that has been indexed.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 4.0
 */
IIndexFileLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexFileLocation.java)/**
 * Files in the index are (conceptually) partitioned into workspace and non-workspace (external)
 * files. Clients can obtain instances of IIndexFileLocation implementations from
 * {@link IndexLocationFactory}. Two index file locations are considered equal if their URIs are
 * equal.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 4.0
 */
IIndexFileSet (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexFileSet.java)/**
 * File set for index files. Can be used to filter file-local bindings.
 * @since 5.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIndexInclude (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexInclude.java)/**
 * Interface for an include directive stored in the index.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 4.0
 */
IIndexLinkage (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexLinkage.java)/**
 * Represents the linkage of a name in the index.
 *
 * @since 4.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIndexLocationConverter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexLocationConverter.java)/**
 * Each IIndexFragment stores file location representations in an implementation specific manner.
 * External to IIndexFragment files are identified by an {@link IIndexFileLocation}
 *
 * Internal to IIndexFragment a mechanism for converting between the string location format used
 * and the URI world is needed. This interface represents that mechanism.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIndexMacro (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexMacro.java)/**
 * Represents a macro stored in the index.
 *
 * @since 4.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIndexMacroContainer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexMacroContainer.java)/**
 * Represents a binding for all macros with the same name. When you try to adapt a macro binding
 * in an index you'll get the container as a result.
 * @since 5.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIndexManager (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexManager.java)/**
 * Starting point for working with the index. The manager can be obtained via
 * {@link CCorePlugin#getIndexManager()}.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 4.0
 */
IIndexName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexName.java)/**
 * Interface for all the names in the index. These constitute either a declaration or a reference.
 *
 * @since 4.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IIndexSymbols (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IIndexSymbols.java)/**
 * A container for symbols that should be added to a linkage in the persisted index.  Contributors
 * of the org.eclipse.cdt.core.PDOMASTProcessor extension-point are provided the opportunity
 * to process the parsed AST translation units.  Elements of interest are added to an
 * implementation of this interface.
 *
 * @since 5.6
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IndexerSetupParticipant (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IndexerSetupParticipant.java)/**
 * Abstract base class for indexer setup participants. A participant can delay the
 * setup of the indexer when a project is added to the workspace.
 */
IndexFilter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IndexFilter.java)/**
 * Can be subclassed and used for queries in the index.
 * @since 4.0
 */
IndexLocationFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IndexLocationFactory.java)/**
 * Factory for obtaining instances of IIndexFileLocation for workspace and external files, and
 * some utility methods for going in the opposite direction.
 *
 * @since 4.0
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Abstract (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IPDOMASTProcessor.java)/**
	 * An abstract class that should be extended by contributors of the extension-point.  Extending
	 * this class means that contributors will get default implementations for future additions.
	 */
IPDOMASTProcessor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/IPDOMASTProcessor.java)/**
 * The PDOMASTProcessor extension point allows contributors to the org.eclipse.cdt.core.PDOMASTProcessor
 * extension-point to store their own information in the persisted index.  The intent is for
 * contributors to define their own ILinkage to avoid managing conflicts with the storage format
 * for existing linkages.
 * <p>
 * NOTE: The existing org.eclipse.cdt.core.language extension-point, allows new pdomLinkageFactories
 * to be added.  However, the {@link IPDOMLinkageFactory} interface which must be implemented is
 * in an internal package.
 *
 * @since 5.6
 * @noimplement Clients should extend {@link IPDOMASTProcessor.Abstract}.
 */
IIndexProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/provider/IIndexProvider.java)/**
 * An IIndexProvider implementation provides additional indexing information for CDT projects
 * This interface only exists to hold commonality from sub-interfaces.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 4.0
 */
IPDOMDescriptor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/provider/IPDOMDescriptor.java)/**
 * Describes a PDOM format file in the local file system.
 * @since 4.0
 */
IReadOnlyPDOMProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/provider/IReadOnlyPDOMProvider.java)/**
 * This interface is intended for ISVs to implement when plugging a mechanism
 * for read-only/off-line indexes into the CIndex.ReadOnlyPDOMProvider extension point element.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 4.0
 */
ResourceContainerRelativeLocationConverter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/index/ResourceContainerRelativeLocationConverter.java)/**
 * A location converter for converting project resource locations to be relative to a specified
 * container. Resources outside of the associated project will not be converted (ignored).
 * <br>
 * This location converter is internal-representation-compatible with URIRelativeLocationConverter
 */
AbstractPersistableProblem (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/AbstractPersistableProblem.java)/**
 * Abstract class for implementing {@link IPersistableProblem}.
 * @since 5.1
 */
CodeReader (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/CodeReader.java)/**
 * Reads the content of a file into a char[] buffer.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @deprecated replaced by {@link FileContent}
 */
DefaultLogService (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/DefaultLogService.java)/**
 * @author jcamelon
 */
Directives (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/Directives.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
EndOfFileException (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/EndOfFileException.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ExtendedScannerInfo (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ExtendedScannerInfo.java)/**
 * Implementation for the {@link IExtendedScannerInfo} interface. Allows to configure
 * the preprocessor.
 * @since 5.5
 */
FileContent (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/FileContent.java)/**
 * Abstract class for representing the content of a file.
 * It serves as the input to the preprocessor.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 5.2
 */
GCCKeywords (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/GCCKeywords.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ICodeReaderCache (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ICodeReaderCache.java)/**
 * This is the interface to a cache for CodeReaders.
 *
 * For thread safety the implementations of this interface must ensure that their methods are thread safe.
 *
 * @deprecated
 * @noreference This interface is not intended to be referenced by clients.
 */
IExtendedScannerInfo (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IExtendedScannerInfo.java)/**
 * Extension to {@link IScannerInfo}, allows for providing additional preprocessor options.
 */
IGCCToken (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IGCCToken.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IInactiveCodeToken (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IInactiveCodeToken.java)/**
 * Interface for tokens of kind {@link IToken#tINACTIVE_CODE_START}, {@link IToken#tINACTIVE_CODE_SEPARATOR} and
 * {@link IToken#tINACTIVE_CODE_END}.
 * @since 5.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IMacro (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IMacro.java)/**
 * Interface to provide macro definitions in an IScannerExtensionConfiguration.
 */
IncludeExportPatterns (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IncludeExportPatterns.java)/**
 * Container for include export patterns, for example "IWYU pragma: export",
 * "IWYU pragma: begin_exports" and "IWYU pragma: end_exports".
 * @see "https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/IWYUPragmas.md"
 *
 * @since 5.5
 */
IncludeFileContentProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IncludeFileContentProvider.java)/**
 * A file content provider is used to create file content objects for include
 * directives.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 5.2
 */
IParserLogService (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IParserLogService.java)/**
 * @author jcamelon
 */
IParserSettings (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IParserSettings.java)/**
 * Interface for providing settings for the parser.
 * @since 5.6
 */
Default (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IParserSettings2.java)/**
	 * An default implementation to be used as a base class by clients that want to
	 * contribute parser settings.  This base provides default values for all methods
	 * so that clients will still compile when methods are added to the interface.
	 *
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 */
IParserSettings2 (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IParserSettings2.java)/**
 * Interface for providing settings for the parser.
 * <p>
 * The first version of the interface was not marked with no-implement, so methods
 * cannot be added to it.  This version should be used going forward.  It is marked
 * no-implement and a Default implementation is provided.  Clients should base their
 * own implementations on Default in order to avoid being broken by futured additions
 * to this interface.
 *
 * @since 5.7
 * @noimplement Extend {@link IParserSettings2.Default} instead.
 */
IPersistableProblem (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IPersistableProblem.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPreprocessorDirective (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IPreprocessorDirective.java)/**
 * Constants for supported preprocessor directive types.
 *
 * @since 4.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblem (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IProblem.java)/**
 * Description of a C/C++ syntax problems and spelling errors as detected by the lexer, preprocessor,
 * parser or the spelling engine.
 *
 * A problem provides access to:
 * <ul>
 * <li> its location (originating source file name, source position, line number), </li>
 * <li> its message description and a predicate to check its severity (warning or error). </li>
 * <li> its ID : an number identifying the very nature of this problem. All possible IDs are listed
 * as constants on this interface. </li>
 * </ul>
 * <p> Note, that semantic problems are modeled via {@link org.eclipse.cdt.core.dom.ast.ISemanticProblem}.
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IScanner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IScanner.java)/**
 * Interface between the parser and the preprocessor.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IScannerInfo (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IScannerInfo.java)/**
 * Interface for providing a configuration for the preprocessor.
 * @see IExtendedScannerInfo
 */
ISignificantMacros (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ISignificantMacros.java)/**
 * Significant macros describe the conditions under which the preprocessor selects
 * the same active code branches in a file.
 * @since 5.4
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IToken (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/IToken.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITokenDuple (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ITokenDuple.java)/**
 * @deprecated Do not use.
 * @noreference This interface is not intended to be referenced by clients.
 */
Keywords (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/Keywords.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NullLogService (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/NullLogService.java)/**
 * @author jcamelon
 */
OffsetLimitReachedException (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/OffsetLimitReachedException.java)/**
 * The exception is thrown, when content-assist is requested within a context that is handled
 * by the lexer or the preprocessor.
 * <p>
 * {@link #ORIGIN_LEXER}: char-literal, string-literal, number-literal, header-name.
 * <p>
 * {@link #ORIGIN_PREPROCESSOR_DIRECTIVE}: preprocessor-directive.
 * <p>
 * {@link #ORIGIN_INACTIVE_CODE}: within an inactive branch of conditional compilation.
 * <p>
 * {@link #ORIGIN_MACRO_EXPANSION}: within a macro-expansion.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ParseError (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ParseError.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ParserFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ParserFactory.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ParserSettings (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ParserSettings.java)/**
 * Implementation for the {@link IParserSettings} interface. Allows to configure
 * the parser with additional settings.
 * @since 5.6
 */
ScannerInfo (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ScannerInfo.java)/**
 * Implementation of the {@link IScannerInfo} interface. Allows to configure the preprocessor.
 */
StandardAttributes (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/StandardAttributes.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @since 6.3
 */
ArrayUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/ArrayUtil.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ASTPrinter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/ASTPrinter.java)/**
 * A utility that prints an AST to the console or any print stream, useful for debugging purposes.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
AttributeUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/AttributeUtil.java)/**
 * Collection of static methods for dealing with attributes.
 * @see org.eclipse.cdt.core.dom.ast.IASTAttribute
 * @see org.eclipse.cdt.core.dom.ast.IASTAttributeOwner
 * @since 5.4
 */
CharArrayIntMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/CharArrayIntMap.java)/**
 * @author Doug Schaefer
 * @noextend This class is not intended to be subclassed by clients.
 */
Key (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/CharArrayMap.java)/**
	 * Wrapper class used as keys in the map. The purpose
	 * of this class is to provide implementations of
	 * equals() and hashCode() that operate on array slices.
	 *
	 * This class is private so it is assumed that the arguments
	 * passed to the constructor are legal.
	 */
CharArrayMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/CharArrayMap.java)/**
 * Provides functionality similar to a Map, with the feature that char arrays
 * and sections of char arrays (known as slices) may be used as keys.
 *
 * This class is useful because small pieces of an existing large char[] buffer
 * can be directly used as map keys. This avoids the need to create many String
 * objects as would normally be needed as keys in a standard java.util.Map.
 * Thus performance is improved in the CDT core.
 *
 * Most methods are overloaded with two versions, one that uses a
 * section of a char[] as the key (a slice), and one that uses
 * the entire char[] as the key.
 *
 * This class is intended as a replacement for CharArrayObjectMap.
 *
 * ex:
 * char[] key = "one two three".toCharArray();
 * map.put(key, 4, 3, Integer.valueOf(99));
 * map.get(key, 4, 3); // returns 99
 * map.get("two".toCharArray()); // returns 99
 *
 * @author Mike Kucera
 *
 * @param <V>
 */
CharArrayObjectMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/CharArrayObjectMap.java)/**
 * @author Doug Schaefer
 * @noextend This class is not intended to be subclassed by clients.
 */
CharArraySet (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/CharArraySet.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
CharArrayUtils (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/CharArrayUtils.java)/**
 * A static utility class for char arrays
 * @author dschaefe
 */
CharTable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/CharTable.java)/**
 * @author ddaoust
 * @noextend This class is not intended to be subclassed by clients.
 */
CollectionUtils (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/CollectionUtils.java)/**
 * Useful utility methods for dealing with Collections.
 *
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DebugUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/DebugUtil.java)/**
 * This class contains several convenience methods mainly for debugging purposes.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
HashTable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/HashTable.java)/**
 * @author ddaoust
 * @noextend This class is not intended to be subclassed by clients.
 */
IContentAssistMatcher (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/IContentAssistMatcher.java)/**
 * A matcher for content assist-like application to determine whether names
 * match the user provided text.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.3
 */
InstanceOfPredicate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/InstanceOfPredicate.java)/**
 * Unary predicate returning {@code true} if the object is an instance of the given class
 * or interface.
 * @since 5.7
 */
IntArray (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/IntArray.java)/**
 * Automatically growing integer array.
 *
 * @since 5.5
 */
IUnaryPredicate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/IUnaryPredicate.java)/**
 * A generic unary predicate interface.
 * Useful for operations that use unary predicates, like filtering an array.
 * @since 5.6
 */
ObjectMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/ObjectMap.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ObjectSet (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/ObjectSet.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ObjectTable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/ObjectTable.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
SegmentMatcher (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/SegmentMatcher.java)/**
 * A matcher for camel case matching supporting both the camel case as well as
 *  he underscore notation.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 5.3
 */
StringUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/util/StringUtil.java)/**
 * Static methods for working with strings.
 *
 * @since 5.6
 */
Tag (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/ast/tag/Tag.java)/**
 * A trivial implementation that stores all data in memory.
 *
 * @see NonCachedTaggable
 */
TaggerDescriptor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/ast/tag/TaggerDescriptor.java)/**
 * Internal container for extensions of org.eclipse.cdt.core.tagger. The implementation of
 * the tagger is instantiated only after checking the enablement expression (if present) for
 * the specified binding. This avoids activating the contributing plugin until it is actually
 * needed.
 */
BinaryOperator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/AbstractGNUSourceCodeParser.java)/**
	 * Models a cast expression followed by an operator. Can be linked into a chain.
	 * This is done right to left, such that a tree of variants can be built.
	 */
AbstractGNUSourceCodeParser (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/AbstractGNUSourceCodeParser.java)/**
 * Base class for the c- and c++ parser.
 */
ArithmeticConversion (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ArithmeticConversion.java)/**
 * Arithmetic conversions as required to compute the type of unary or binary expressions.
 */
ASTAmbiguousBinaryVsCastExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTAmbiguousBinaryVsCastExpression.java)/**
 * Handles the ambiguity between a binary- and a cast-expression. (type)+var versus (var)+var.
 * It also handles the impact on the grouping of the sub-expressions.
 */
ASTAmbiguousCastVsFunctionCallExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTAmbiguousCastVsFunctionCallExpression.java)/**
 * Handles the ambiguity between cast and function-call expressions: (type)(expr) versus (function)(expr);
 * It also handles the impact on the grouping of the sub-expressions.
 */
ASTAmbiguousNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTAmbiguousNode.java)/**
 * Base implementation for all ambiguous nodes.
 */
ASTAttribute (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTAttribute.java)/**
 * Base class for C and C++ attributes.
 */
ASTAttributeList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTAttributeList.java)/**
 * Represents an attribute list, containing attributes.
 */
ASTAttributeOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTAttributeOwner.java)/**
 * Classes that implement IASTAttributeOwner interface may extend this class.
 */
ASTCopyLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTCopyLocation.java)/**
 * @author Emanuel Graf IFS
 */
ASTEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTEnumerator.java)/**
 * Base class for C and C++ enumerators.
 */
ASTEqualsInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTEqualsInitializer.java)/**
 * Initializer with equals sign (copy initialization)
 */
ASTInternal (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTInternal.java)/**
 * Access to methods on scopes and bindings internal to the parser.
 */
ASTNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTNode.java)/**
 * Base class for all non-preprocessor nodes in the AST.
 */
ASTNodeSearch (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTNodeSearch.java)/**
 * Utility class to search for siblings of an ast node
 */
ASTNodeSelector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTNodeSelector.java)/**
 * Class to support searching for nodes by file offsets.
 * @since 5.0
 */
ASTNodeSpecification (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTNodeSpecification.java)/**
 * For searching ast-nodes by offset and length, instances of this class can be used to determine
 * whether a node matches or not.
 *
 * @since 5.0
 */
ASTPreprocessorSelectionResult (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTPreprocessorSelectionResult.java)/**
 * This class is used to wrap possible results from the ILocationResolver (when retrieving
 * nodes from the preprocessor tree.
 * @author dsteffle
 */
ASTProblem (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTProblem.java)/**
 * Models problems, all problems should derive from this class.
 */
ASTQueries (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTQueries.java)/**
 * Base class for {@link CVisitor} and {@link CPPVisitor}
 */
ASTToken (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTToken.java)/**
 * Represents a code token.
 */
ASTTokenList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTTokenList.java)/**
 * Represents a sequence of code tokens.
 */
ASTTranslationUnit (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ASTTranslationUnit.java)/**
 * Abstract base class for all translation units.
 *
 * This class and other ASTNode subclasses are not thread safe.
 * Even 'get' methods may cause changes to the underlying object.
 */
BacktrackException (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/BacktrackException.java)/**
 * @author jcamelon
 */
CASTAmbiguityResolver (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTAmbiguityResolver.java)/**
 * Visitor to resolve ast ambiguities in the right order, which is simply a depth
 * first traversal.
 */
CASTAmbiguousDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTAmbiguousDeclarator.java)/**
 * Handles ambiguities when parsing declarators.
 * <br>
 * Example: void f(int (D));  // is D a type?
 * @since 5.0.1
 */
CASTAmbiguousParameterDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTAmbiguousParameterDeclaration.java)/**
 * Handles ambiguities for parameter declarations.
 * <br>
 * void function(const D*); // is D a type?
 * @since 5.0.1
 */
CASTAmbiguousSimpleDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTAmbiguousSimpleDeclaration.java)/**
 * Handles ambiguities for parameter declarations.
 * <pre>
 * void function(const D*); // is D a type?
 * </pre>
 * @since 5.0.1
 */
CASTArrayDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTArrayDeclarator.java)/**
 * @author jcamelon
 */
CASTArrayDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTArrayDesignator.java)/**
 * Implementation of array designator.
 */
CASTArrayModifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTArrayModifier.java)/**
 * c-specific modifier for array specifiers.
 */
CASTArrayRangeDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTArrayRangeDesignator.java)/**
 * Implementation of array range designator.
 */
CASTArraySubscriptExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTArraySubscriptExpression.java)/**
 * Array subscript expression for C.
 */
CASTASMDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTASMDeclaration.java)/**
 * @author jcamelon
 */
CASTAttribute (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTAttribute.java)/**
 * C-specific attribute.
 */
CASTBaseDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTBaseDeclSpecifier.java)/**
 * @author jcamelon
 */
CASTBinaryExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTBinaryExpression.java)/**
 * Binary expression for c
 */
CASTBreakStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTBreakStatement.java)/**
 * @author jcamelon
 */
CASTCaseStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTCaseStatement.java)/**
 * @author jcamelon
 */
CASTCastExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTCastExpression.java)/**
 * Cast expressions for c
 */
CASTCompositeTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTCompositeTypeSpecifier.java)/**
 * Implementation for C composite specifiers.
 */
CASTCompoundStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTCompoundStatement.java)/**
 * @author jcamelon
 */
CASTCompoundStatementExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTCompoundStatementExpression.java)/**
 * Compound statement for c
 */
CASTConditionalExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTConditionalExpression.java)/**
 * Conditional expression in C
 */
CASTContinueStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTContinueStatement.java)/**
 * @author jcamelon
 */
CASTDeclarationStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTDeclarationStatement.java)/**
 * A declaration statement.
 */
CASTDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTDeclarator.java)/**
 * @author jcamelon
 */
CASTDefaultStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTDefaultStatement.java)/**
 * @author jcamelon
 */
CASTDesignatedInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTDesignatedInitializer.java)/**
 * Implementation for designated initializers.
 */
CASTDoStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTDoStatement.java)/**
 * @author jcamelon
 */
CASTElaboratedTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTElaboratedTypeSpecifier.java)/**
 * Node for elaborated type specifiers (examples: struct S; union U; enum E;)
 */
CASTEnumerationSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTEnumerationSpecifier.java)/**
 * AST node for enumeration specifiers.
 */
CASTEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTEnumerator.java)/**
 * C-specific enumerator
 */
CASTEqualsInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTEqualsInitializer.java)/**
 * Initializer with equals sign (copy initialization)
 */
CASTExpressionList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTExpressionList.java)/**
 * Expression list in C
 */
CASTExpressionStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTExpressionStatement.java)/**
 * @author jcamelon
 */
CASTFieldDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTFieldDeclarator.java)/**
 * @author jcamelon
 */
CASTFieldDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTFieldDesignator.java)/**
 * Implementation of field designator.
 */
CASTFieldReference (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTFieldReference.java)/**
 * Field reference in C.
 */
CASTForStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTForStatement.java)/**
 * @author jcamelon
 */
CASTFunctionCallExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTFunctionCallExpression.java)/**
 * Function call expression in C.
 */
CASTFunctionDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTFunctionDeclarator.java)/**
 * A function declarator for plain C.
 */
CASTFunctionDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTFunctionDefinition.java)/**
 * @author jcamelon
 */
CASTGotoStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTGotoStatement.java)/**
 * @author jcamelon
 */
CASTIdExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTIdExpression.java)/**
 * ID Expression in C.
 */
CASTIfStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTIfStatement.java)/**
 * If statements for C.
 */
CASTInitializerList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTInitializerList.java)/**
 * e.g.: int a[]= {1,2,3};
 */
CASTKnRFunctionDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTKnRFunctionDeclarator.java)/**
 * A K&R C function declarator.
 *
 * @author dsteffle
 */
CASTLabelStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTLabelStatement.java)/**
 * @author jcamelon
 */
CASTLiteralExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTLiteralExpression.java)/**
 * Represents a literal
 */
CASTName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTName.java)/**
 * Implementation for names in C translation units.
 */
CASTNullStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTNullStatement.java)/**
 * @author jcamelon
 */
CASTParameterDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTParameterDeclaration.java)/**
 * @author jcamelon
 */
CASTProblem (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTProblem.java)/**
 * C-specific implementation of ASTProblem, allows an action to visit a problem.
 */
CASTProblemDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTProblemDeclaration.java)/**
 * @author jcamelon
 */
CASTProblemOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTProblemOwner.java)/**
 * @author jcamelon
 */
CASTProblemStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTProblemStatement.java)/**
 * @author jcamelon
 */
CASTSimpleDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTSimpleDeclaration.java)/**
 * Models a simple declaration.
 */
CASTSwitchStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTSwitchStatement.java)/**
 * @author jcamelon
 */
CASTTranslationUnit (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTTranslationUnit.java)/**
 * C-specific implementation of a translation unit.
 */
CASTTypedefNameSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTTypedefNameSpecifier.java)/**
 * @author jcamelon
 */
CASTTypeId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTTypeId.java)/**
 * @author jcamelon
 */
CASTTypeIdExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTTypeIdExpression.java)/**
 * Type-id or unary operation on a type-id.
 */
CASTTypeIdInitializerExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTTypeIdInitializerExpression.java)/**
 * Type id initializer expression for C, type-id { initializer }
 */
CASTUnaryExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTUnaryExpression.java)/**
 * Unary expression in C.
 */
CASTWhileStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTWhileStatement.java)/**
 * @author jcamelon
 */
CBuiltinVariable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CBuiltinVariable.java)/**
 * Used to represent built-in variables that exist on the translation
 * unit but are not actually part of the physical AST created by CDT.
 *
 * An example is the built-in variable __func__.
 */
CCompositeTypeScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CCompositeTypeScope.java)/**
 * Implementation of scope for structs and unions.
 */
CEnumeration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CEnumeration.java)/**
 * Binding for enumerations in C.
 */
CEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CEnumerator.java)/**
 * C-specific binding for enumerators.
 */
CExternalFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CExternalFunction.java)/**
 * Models functions used without declarations.
 */
CFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CFunction.java)/**
 * Represents a function.
 */
CImplicitFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CImplicitFunction.java)/**
 * The CImplicitFunction is used to represent implicit functions that exist on the translation
 * unit but are not actually part of the physical AST created by CDT.
 *
 * An example is GCC built-in functions.
 *
 * @author dsteffle
 */
CImplicitTypedef (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CImplicitTypedef.java)/**
 * The CImplicitTypedef is used to represent implicit typedefs that exist on the translation
 * unit but are not actually part of the physical AST created by CDT.
 *
 * An example is the GCC built-in typedef:  typedef char * __builtin_va_list;
 *
 * @author dsteffle
 */
CKnRParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CKnRParameter.java)/**
 * A K&R C parameter.
 */
CLabel (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CLabel.java)/**
 * Represents a label.
 */
CNodeFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CNodeFactory.java)/**
 * Abstract factory implementation that creates AST nodes for C99.
 * These can be overridden in subclasses to change the
 * implementations of the nodes.
 */
Conversions (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/Conversions.java)/**
 * Routines related to conversions.
 */
CParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CParameter.java)/**
 * Represents the parameter of a function.
 */
CScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CScope.java)/**
 * Base implementation for c-scopes
 */
CStructMapper (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CStructMapper.java)/**
 * Utility to map index bindings to ast bindings.
 */
CStructure (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CStructure.java)/**
 * Represents structs and unions.
 */
CTypedef (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CTypedef.java)/**
 * Represents a typedef.
 */
CVariable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CVariable.java)/**
 * Binding for a global or a local variable, serves as base class for fields.
 */
CVariableReadWriteFlags (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CVariableReadWriteFlags.java)/**
 * Helper class to determine whether a variable is accessed for reading and/or writing.
 * The algorithm works starting from the variable and looking upwards what's being done
 * with the variable.
 */
CVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CVisitor.java)/**
 * Collection of methods to find information in an AST.
 */
GCCASTSimpleDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/GCCASTSimpleDeclSpecifier.java)/**
 * @deprecated Replaced by {@link CASTSimpleDeclSpecifier}.
 */
GNUCASTGotoStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/GNUCASTGotoStatement.java)/**
 * GNU C goto statement.
 *
 * <code>
 * foo:
 *   void *labelPtr = &&foo;
 *   goto *labelPtr; // this is the statement
 * </code>
 *
 * @since 5.8
 */
GNUCSourceParser (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/GNUCSourceParser.java)/**
 * Source parser for gnu-c syntax.
 */
ICInternalBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/ICInternalBinding.java)/**
 * Methods needed by CVisitor but not meant for public interface
 */
ICInternalFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/ICInternalFunction.java)/**
 * Interface for ast-internal implementations of function bindings.
 */
ChildCollector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ChildCollector.java)/**
 * Collector to find all children for an ast-node.
 */
AbstractCPPClassSpecializationScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/AbstractCPPClassSpecializationScope.java)/**
 * Base class for all specialization scopes
 * For safe usage in index bindings, all fields need to be final or volatile.
 */
ClassTypeHelper (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ClassTypeHelper.java)/**
 * Holds common implementation of methods for ICPPClassType implementations that have
 * a corresponding textual definition in the source code.
 *
 * @see CPPClassType
 * @see CPPClassTemplate
 */
CPPAliasTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPAliasTemplateSpecialization.java)/**
 * Specialization of an alias template.
 */
CPPASTAmbiguityResolver (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTAmbiguityResolver.java)/**
 * Visitor to resolve AST ambiguities in the right order
 */
CPPASTAmbiguousCondition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTAmbiguousCondition.java)/**
 * Handles ambiguity between expression and declaration in a condition.
 */
CPPASTAmbiguousDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTAmbiguousDeclarator.java)/**
 * Handles ambiguities when parsing declarators.
 * <br>
 * Example: void f(int (D));  // is D a type?
 */
CPPASTAmbiguousParameterDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTAmbiguousParameterDeclaration.java)/**
 * Handles ambiguities for ellipsis in parameter declaration.
 * <br>
 * template<typename... T> void function(T ...); // is T a parameter pack?
 */
CPPASTAmbiguousSimpleDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTAmbiguousSimpleDeclaration.java)/**
 * Handles ambiguities for simple declarations.
 * <pre>
 * class C {
 *    C(D);  // If D a type we have a constructor, otherwise this declares the field D.
 * };
 * </pre>
 */
CPPASTAmbiguousTemplateArgument (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTAmbiguousTemplateArgument.java)/**
 * Ambiguity node for deciding between type-id and expression in a template argument.
 */
CPPASTArrayDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTArrayDeclarator.java)/**
 * Array declarator for c++.
 */
CPPASTArrayDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTArrayDesignator.java)/**
 * Implementation of array designator.
 */
CPPASTArrayModifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTArrayModifier.java)/**
 * @author jcamelon
 */
CPPASTArrayRangeDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTArrayRangeDesignator.java)/**
 * Implementation of array range designator.
 */
CPPASTASMDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTASMDeclaration.java)/**
 * @author jcamelon
 */
CPPASTAttribute (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTAttribute.java)/**
 * C++-specific attribute.
 */
CPPASTAttributeList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTAttributeList.java)/**
 * Represents a C++ attribute list, containing attributes.
 */
CPPASTAttributeOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTAttributeOwner.java)/**
 * C++ attribute owners.
 *
 * These implement IASTAmbiguityParent because in C++ an attribute-specifier
 * can be an alignment-specifier, and an alignment-specifier can be an
 * ambiguous node.
 */
CPPASTBaseDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTBaseDeclSpecifier.java)/**
 * Base for all C++ declaration specifiers.
 */
CPPASTBaseSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTBaseSpecifier.java)/**
 * Base class specifier
 */
CPPASTBreakStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTBreakStatement.java)/**
 * @author jcamelon
 */
CPPASTCapture (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTCapture.java)/**
 * Implementation for captures.
 */
CPPASTCaptureBase (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTCaptureBase.java)/**
 * Base class for C++ Lambda Captures
 */
CPPASTCaseStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTCaseStatement.java)/**
 * @author jcamelon
 */
CPPASTCastExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTCastExpression.java)/**
 * Cast expression for C++
 */
CPPASTCatchHandler (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTCatchHandler.java)/**
 * @author jcamelon
 */
CPPASTCompositeTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTCompositeTypeSpecifier.java)/**
 * c++ specific composite type specifier
 */
CPPASTCompoundStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTCompoundStatement.java)/**
 * @author jcamelon
 */
CPPASTCompoundStatementExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTCompoundStatementExpression.java)/**
 * Gnu-extension: ({ ... })
 */
CPPASTConstructorChainInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTConstructorChainInitializer.java)/**
 * For example in the constructor definition <br>
 * <code>
 * Derived() : Base(), field() { <br>
 * }
 * </code><br>
 * {@code Base()} and {@code field()} are the constructor chain initializers.<br>
 */
CPPASTConstructorInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTConstructorInitializer.java)/**
 * Initializer list in parenthesis.
 */
CPPASTContinueStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTContinueStatement.java)/**
 * @author jcamelon
 */
CPPASTConversionName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTConversionName.java)/**
 * Implementation of conversion function ids.
 */
CPPASTDeclarationStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTDeclarationStatement.java)/**
 * @author jcamelon
 */
CPPASTDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTDeclarator.java)/**
 * C++ specific declarator.
 */
CPPASTDecltypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTDecltypeSpecifier.java)/**
 * Implementation of ICPPASTDecltypeSpecifier.
 */
CPPASTDefaultStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTDefaultStatement.java)/**
 * @author jcamelon
 */
CPPASTDesignatedInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTDesignatedInitializer.java)/**
 * Implementation for designated initializers.
 */
CPPASTDoStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTDoStatement.java)/**
 * @author jcamelon
 */
CPPASTElaboratedTypeSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTElaboratedTypeSpecifier.java)/**
 * @author jcamelon
 */
CPPASTEnumerationSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTEnumerationSpecifier.java)/**
 * AST node for C++ enumeration specifiers.
 */
CPPASTEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTEnumerator.java)/**
 * C++-specific enumerator.
 */
CPPASTEqualsInitializer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTEqualsInitializer.java)/**
 * Initializer with equals sign (copy initialization)
 */
CPPASTExplicitTemplateInstantiation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTExplicitTemplateInstantiation.java)/**
 * Models explicit instantiations.
 */
CPPASTExpressionStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTExpressionStatement.java)/**
 * @author jcamelon
 */
CPPASTFieldDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTFieldDeclarator.java)/**
 * Field declarator for c++.
 */
CPPASTFieldDesignator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTFieldDesignator.java)/**
 * Implementation of field designator.
 */
CPPASTForStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTForStatement.java)/**
 * For statement in C++
 */
CPPASTFunctionDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTFunctionDeclarator.java)/**
 * Represents a function declarator.
 */
CPPASTFunctionDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTFunctionDefinition.java)/**
 * Models a function definition without a try-block. If used for a constructor definition
 * it may contain member initializers.
 */
CPPASTFunctionWithTryBlock (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTFunctionWithTryBlock.java)/**
 * Represents a function definition contained in a try block.
 * @see ICPPASTFunctionWithTryBlock
 */
CPPASTGotoStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTGotoStatement.java)/**
 * @author jcamelon
 */
CPPASTIfStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTIfStatement.java)/**
 * If statement in C++
 */
CPPASTImplicitName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTImplicitName.java)/**
 * An implicit name is used to resolve uses of implicit bindings, such as overloaded operators.
 *
 * @see IASTImplicitName
 */
CPPASTInitCapture (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTInitCapture.java)/**
 * Implementation for init captures.
 */
CPPASTInitializerList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTInitializerList.java)/**
 * e.g.: int a[]= {1,2,3};
 */
CPPASTLabelStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTLabelStatement.java)/**
 * @author jcamelon
 */
CPPASTLambdaExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTLambdaExpression.java)/**
 * Implementation for lambda expressions.
 */
CPPASTLinkageSpecification (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTLinkageSpecification.java)/**
 * Extern "C" construct.
 */
CPPASTLiteralExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTLiteralExpression.java)/**
 * Represents a C++ literal.
 */
CPPASTName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTName.java)/**
 * Unqualified name, also base class for operator and conversion name.
 */
CPPASTNameBase (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTNameBase.java)/**
 * Common base class for all sorts of c++ names: unqualified, qualified, operator and conversion
 * names plus template-ids
 */
CPPASTNamespaceAlias (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTNamespaceAlias.java)/**
 * @author jcamelon
 */
CPPASTNamespaceDefinition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTNamespaceDefinition.java)/**
 * Definition of a namespace.
 */
CPPASTNewExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTNewExpression.java)/**
 * Represents a new expression [expr.new].
 */
CPPASTNullStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTNullStatement.java)/**
 * @author jcamelon
 */
CPPASTPackExpansionExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTPackExpansionExpression.java)/**
 * Implementation of pack expansion expression.
 */
CPPASTParameterDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTParameterDeclaration.java)/**
 * Function parameter or non-type template parameter declaration.
 */
CPPASTPointer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTPointer.java)/**
 * A pointer operator of a declarator
 */
CPPASTProblem (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTProblem.java)/**
 * C++-specific implementation allows actions to visit the problem.
 */
CPPASTProblemDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTProblemDeclaration.java)/**
 * @author jcamelon
 */
CPPASTProblemOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTProblemOwner.java)/**
 * @author jcamelon
 */
CPPASTProblemStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTProblemStatement.java)/**
 * @author jcamelon
 */
CPPASTProblemTypeId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTProblemTypeId.java)/**
 * @author jcamelon
 */
CPPASTQualifiedName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTQualifiedName.java)/**
 * Qualified name, which can contain any other name (unqualified, operator-name, conversion name,
 * template id).
 */
CPPASTRangeBasedForStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTRangeBasedForStatement.java)/**
 * Range based 'for' loop in C++.
 */
CPPASTReferenceOperator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTReferenceOperator.java)/**
 * Reference operator for declarators.
 */
CPPASTSimpleDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTSimpleDeclaration.java)/**
 * @author jcamelon
 */
CPPASTSimpleTypeTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTSimpleTypeTemplateParameter.java)/**
 * Template type parameter as in <code>template &lttypename T&gt class X;</code>
 */
CPPASTSwitchStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTSwitchStatement.java)/**
 * Switch statement in C++.
 */
CPPASTTemplateDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTemplateDeclaration.java)/**
 * Represents a template declaration.
 */
CPPASTTemplatedTypeTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTemplatedTypeTemplateParameter.java)/**
 * Template template parameter
 */
CPPASTTemplateId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTemplateId.java)/**
 * Template ID consist of an unqualified name (or operator or conversion name)
 * and an array of template arguments.
 */
CPPASTTemplateIDAmbiguity (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTemplateIDAmbiguity.java)/**
 * Models expression variants for the ambiguity of a template id.
 */
CPPASTTemplateName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTemplateName.java)/**
 * Represents a template name.
 */
CPPASTTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTemplateSpecialization.java)/**
 * Node for template specialization syntax.
 */
CPPASTTranslationUnit (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTranslationUnit.java)/**
 * C++-specific implementation of a translation-unit.
 */
CPPASTTryBlockStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTryBlockStatement.java)/**
 * @author jcamelon
 */
CPPASTTypeId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTypeId.java)/**
 * Type id for c++
 */
CPPASTTypeIdInitializerExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTypeIdInitializerExpression.java)/**
 * Type id initializer expression for C++, type-id { initializer }
 */
CPPASTTypeTransformationSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTTypeTransformationSpecifier.java)/**
 * Implementation of ICPPASTTypeTransformationSpecifier.
 */
CPPASTUnaryExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTUnaryExpression.java)/**
 * Unary expression in c++
 */
CPPASTVisibilityLabel (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTVisibilityLabel.java)/**
 * @author jcamelon
 */
CPPASTWhileStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTWhileStatement.java)/**
 * While statement in C++.
 */
CPPBasicType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPBasicType.java)/**
 * Built-in c++ type.
 */
CPPBuiltinVariable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPBuiltinVariable.java)/**
 * Used to represent built-in variables that exist on the translation
 * unit but are not actually part of the physical AST created by CDT.
 *
 * An example is the built-in variable __func__.
 */
CPPClassInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClassInstance.java)/**
 * The result of instantiating a class template or an explicit specialization of a class template.
 * The {@link #isExplicitSpecialization()} method is used to distinguish between the two cases.
 */
CPPClassScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClassScope.java)/**
 * Base implementation for C++ scopes.
 */
CPPClassSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClassSpecialization.java)/**
 * Specialization of a class.
 */
CPPClassSpecializationScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClassSpecializationScope.java)/**
 * Scope for class-specializations which specializes members in a lazy manner.
 */
CPPClassTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClassTemplate.java)/**
 * Represents a class template.
 */
CPPClassTemplatePartialSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClassTemplatePartialSpecialization.java)/**
 * A partial class template specialization.
 */
CPPClassTemplatePartialSpecializationSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClassTemplatePartialSpecializationSpecialization.java)/**
 * Represents a specialization of a partial class-template specialization
 */
CPPClassTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClassTemplateSpecialization.java)/**
 * Represents a specialization of a class-template.
 */
CPPClassType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClassType.java)/**
 * Binding for a class type.
 */
CPPClosureSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClosureSpecialization.java)/**
 * Specialization of a closure type.
 */
CPPClosureType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPClosureType.java)/**
 * Binding for a closure type.
 */
CPPConstructorInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPConstructorInstance.java)/**
 * Instantiation of a constructor template
 */
CPPConstructorSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPConstructorSpecialization.java)/**
 * Specialization of a constructor for a class-template or class-template specialization.
 */
CPPConstructorTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPConstructorTemplateSpecialization.java)/**
 * Specialization of a constructor template
 */
CPPDeferredClassInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPDeferredClassInstance.java)/**
 * Represents a instantiation that cannot be performed because of dependent arguments or an unknown template.
 */
CPPDeferredConstructor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPDeferredConstructor.java)/**
 * Represents a reference to a constructor (instance), which cannot be resolved because
 * it depends on a template parameter. A compiler would resolve it during instantiation.
 */
CPPDeferredFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPDeferredFunction.java)/**
 * Represents a reference to a (member) function (instance), which cannot be resolved because
 * an argument depends on a template parameter. A compiler would resolve it during instantiation.
 */
CPPDeferredVariableInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPDeferredVariableInstance.java)/**
 * AST implementation of ICPPDeferredVariableInstance.
 */
CPPEnumeration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPEnumeration.java)/**
 * Enumeration in C++
 */
CPPEnumerationSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPEnumerationSpecialization.java)/**
 * Binding for a specialization of an enumeration.
 */
CPPEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPEnumerator.java)/**
 * Binding for a C++ enumerator.
 */
CPPEnumeratorSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPEnumeratorSpecialization.java)/**
 * Binding for a specialization of an enumerator.
 */
CPPEnumScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPEnumScope.java)/**
 * Implementation of namespace scopes, including global scope.
 */
CPPField (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPField.java)/**
 * Binding for a field.
 */
CPPFieldInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFieldInstance.java)/**
 * An instance of a field template.
 */
CPPFieldSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFieldSpecialization.java)/**
 * Binding for a specialization of a field.
 */
CPPFieldTemplatePartialSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFieldTemplatePartialSpecialization.java)/**
 * A partial specialization of a field template.
 */
CPPFieldTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFieldTemplateSpecialization.java)/**
 * A field template of a specialized class template.
 */
CPPFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFunction.java)/**
 * Binding for C++ function
 */
CPPFunctionInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFunctionInstance.java)/**
 * An instantiation or an explicit specialization of a function template.
 */
CPPFunctionScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFunctionScope.java)/**
 * Scope of a function, containing labels.
 */
CPPFunctionSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFunctionSpecialization.java)/**
 * The specialization of a friend function in the context of a class specialization,
 * also used as base class for function instances.
 */
CPPFunctionTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFunctionTemplate.java)/**
 * Implementation of function templates.
 */
CPPFunctionTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFunctionTemplateSpecialization.java)/**
 * The specialization of a friend function template in the context of a class specialization.
 */
CPPFunctionType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPFunctionType.java)/**
 * Represents c++ function types. Note that we keep typedefs as part of the function type.
 * For safe usage in index bindings, all fields need to be final.
 */
CPPImplicitConstructor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPImplicitConstructor.java)/**
 * Binding for implicit constructors (default and copy constructor).
 */
CPPImplicitFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPImplicitFunction.java)/**
 * The CPPImplicitFunction is used to represent implicit functions that exist on the translation
 * unit but are not actually part of the physical AST created by CDT.
 *
 * An example is GCC built-in functions.
 */
CPPImplicitMethod (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPImplicitMethod.java)/**
 * Binding for implicit methods, base class for implicit constructors.
 */
CPPImplicitMethodTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPImplicitMethodTemplate.java)/**
 * Binding for implicit method templates.
 *
 * Used for the function call operator and pointer-to-function conversion operator
 * of a generic lambda.
 */
CPPImplicitTemplateTypeParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPImplicitTemplateTypeParameter.java)/**
 * Binding for implicit template type parameters.
 *
 * Used for the template type parameters of implicit method templates.
 */
CPPImplicitTypedef (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPImplicitTypedef.java)/**
 * The CPPImplicitTypedef is used to represent implicit typedefs that exist on the translation
 * unit but are not actually part of the physical AST created by CDT.
 *
 * An example is the GCC built-in typedef:  typedef char * __builtin_va_list;
 */
CPPImplicitVariable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPImplicitVariable.java)/**
 * Represents a variable implicitly created in C++ code.
 * For example the initializer of a structured binding decomposition [dcl.struct.bind]:
 * <code>auto [first, second] = decomposed;</code>
 *
 * The <code>initializerEvaluation</code> has to be supplied.
 *
 */
CPPMethod (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPMethod.java)/**
 * The binding for a method.
 */
CPPMethodInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPMethodInstance.java)/**
 * The result of instantiating a method template.
 */
CPPMethodSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPMethodSpecialization.java)/**
 * The specialization of a method in the context of a class-specialization.
 */
CPPMethodTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPMethodTemplate.java)/**
 * A template for a method.
 */
CPPMethodTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPMethodTemplateSpecialization.java)/**
 * The specialization of a method template in the context of a class specialization.
 */
CPPNamespaceScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPNamespaceScope.java)/**
 * Implementation of namespace scopes, including global scope.
 */
CPPNodeFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPNodeFactory.java)/**
 * Abstract factory implementation that creates C++ AST nodes.
 */
CPPParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPParameter.java)/**
 * Binding for a c++ function parameter.
 */
CPPParameterSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPParameterSpecialization.java)/**
 * Binding for a specialization of a parameter.
 */
CPPPlaceholderType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPPlaceholderType.java)/**
 * Represents an occurrence of 'auto' or 'decltype(auto)' that has
 * not been resolved (replaced with a real type) because the information
 * necessary to resolve it (the function's body) is not available yet.
 */
CPPPointerToMemberType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPPointerToMemberType.java)/**
 * Models pointer to a composite type member.
 */
CPPPointerType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPPointerType.java)/**
 * Pointers in c++
 */
CPPScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPScope.java)/**
 * Base class for c++-scopes of the AST.
 */
InlineNamespaceDirective (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPScopeMapper.java)/**
	 * Used for implicit inline directives for inline namespaces found in the index.
	 */
NamespaceScopeWrapper (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPScopeMapper.java)/**
	 * Wrapper for namespace-scopes from the index.
	 */
UsingDirectiveWrapper (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPScopeMapper.java)/**
	 * Wrapper for using directives from the index.
	 */
Visitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPScopeMapper.java)/**
	 * Collector for class definitions.
	 */
CPPScopeMapper (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPScopeMapper.java)/**
 * Utility to map index-scopes to scopes from the AST. This is important for
 * scopes that can be reopened, i.e. namespaces.
 */
CPPSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPSpecialization.java)/**
 * Base class for all specializations in the AST. Note the specialization may also be created on
 * behalf of the index. The index may be concurrently be accessed (read-only) from different
 * threads. So there is a need to synchronize non-final members.
 */
ArrayElement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPStructuredBindingComposite.java)/**
	 * Name evaluation strategy for the case in which the initializer has array type.
	 */
TupleElement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPStructuredBindingComposite.java)/**
	 * Name evaluation strategy for the case in which the initializer has class type for which std::tuple_size is specialized.
	 */
MemberElement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPStructuredBindingComposite.java)/**
	 * Name evaluation strategy for the case in which the initializer has class type with public members.
	 */
CPPStructuredBindingComposite (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPStructuredBindingComposite.java)/**
 * Represents the implicit object created for the initializer of a structured binding declaration.
 * It is used for caching the evaluation strategy used to determine the <code>ICPPEvaluation</code> of
 * the names introduced by the declaration.
 *
 */
CPPTemplateNonTypeArgument (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateNonTypeArgument.java)/**
 * Implementation of non-type template argument, used by AST and index.
 */
CPPTemplateNonTypeParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateNonTypeParameter.java)/**
 * Binding for a non-type template parameter.
 */
CPPTemplateNonTypeParameterSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateNonTypeParameterSpecialization.java)/**
 * A specialization of a non-type template parameter. This is needed when a nested template
 * has a non-type template parameter whose type or default value is dependent on a template
 * parameter of an enclosing template.
 *
 * This class can represent a specialization of either an AST or a PDOM template parameter.
 */
CPPTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateParameter.java)/**
 * Base implementation for template parameter bindings in the AST.
 */
CPPTemplateParameterMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateParameterMap.java)/**
 * Maps template parameters to values.
 */
CPPTemplateParameterSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateParameterSpecialization.java)/**
 * A specialization of a template parameter.
 *
 * This class provides common implementation for CPPTemplateNonTypeParameterSpecialization,
 * CPPTemplateTypeParameterSpecialization, and CPPTemplateTemplateParameterSpecialization.
 */
CPPTemplateTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateTemplateParameter.java)/**
 * A template template parameter.
 */
CPPTemplateTemplateParameterScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateTemplateParameterScope.java)/**
 * Represents the scope of a template-template parameter.
 */
CPPTemplateTemplateParameterSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateTemplateParameterSpecialization.java)/**
 * A specialization of a template template parameter. This is needed when a nested template
 * has a template template parameter whose default value is dependent on a template
 * parameter of an enclosing template.
 *
 * This class can represent a specialization of either an AST or a PDOM template parameter.
 */
CPPTemplateTypeArgument (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateTypeArgument.java)/**
 * Implementation of type template arguments, used by AST and index.
 */
CPPTemplateTypeParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateTypeParameter.java)/**
 * The standard template parameter (template<typename T> or template<class T>).
 */
CPPTemplateTypeParameterSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTemplateTypeParameterSpecialization.java)/**
 * A specialization of a type template parameter. This is needed when a nested template
 * has a type template parameter whose default value is dependent on a template
 * parameter of an enclosing template.
 *
 * This class can represent a specialization of either an AST or a PDOM template parameter.
 */
CPPTypedefSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPTypedefSpecialization.java)/**
 * Specialization of a typedef in the context of a class-specialization.
 */
CPPUnaryTypeTransformation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUnaryTypeTransformation.java)/**
 * Implementation of ICPPUnaryTypeTransformation.
 */
CPPUnknownBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUnknownBinding.java)/**
 * Represents a binding that is unknown because it depends on template arguments.
 */
CPPUnknownClassInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUnknownClassInstance.java)/**
 * Represents a partially instantiated C++ class template, declaration of which is not yet available.
 *
 * @author Sergey Prigogin
 */
CPPUnknownField (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUnknownField.java)/**
 * Represents a reference to a field, which cannot be resolved because the owner is
 * unknown. A compiler would resolve it during instantiation.
 */
CPPUnknownMember (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUnknownMember.java)/**
 * Represents a binding that is unknown because it depends on template arguments.
 */
CPPUnknownMemberClass (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUnknownMemberClass.java)/**
 * Represents a C++ class, declaration of which is not yet available.
 */
CPPUnknownMethod (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUnknownMethod.java)/**
 * Represents a reference to a method (instance), which cannot be resolved because the owner is
 * unknown. A compiler would resolve it during instantiation.
 */
CPPUnknownTypeScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUnknownTypeScope.java)/**
 * Models the scope represented by an unknown type (e.g.: typeof(template type parameter)).
 * Used within the context of templates, only. For safe usage in index bindings, all fields need
 * to be final or used in a thread-safe manner otherwise.
 */
CPPUsingDeclarationSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUsingDeclarationSpecialization.java)/**
 * Specialization of a typedef in the context of a class-specialization.
 */
CPPUsingDirective (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPUsingDirective.java)/**
 * Represents a using-directive found in the AST.
 */
CPPVariableInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPVariableInstance.java)/**
 * An instance of a variable template.
 */
CPPVariableTemplatePartialSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPVariableTemplatePartialSpecialization.java)/**
 * A partial specialization of a variable template.
 */
GNUCPPASTGotoStatement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/GNUCPPASTGotoStatement.java)/**
 * GNU C++ goto statement.
 *
 * <code>
 * foo:
 *   void *labelPtr = &&foo;
 *   goto *labelPtr; // this is the statement
 * </code>
 *
 * @since 5.8
 */
GNUCPPSourceParser (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/GNUCPPSourceParser.java)/**
 * This is our implementation of the IParser interface, serving as a parser for
 * GNU C and C++. From time to time we will make reference to the ANSI ISO
 * specifications.
 */
GPPASTExplicitTemplateInstantiation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/GPPASTExplicitTemplateInstantiation.java)/**
 * @deprecated Replaced by {@link CPPASTExplicitTemplateInstantiation}.
 */
GPPASTPointer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/GPPASTPointer.java)/**
 * @deprecated
 */
GPPASTPointerToMember (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/GPPASTPointerToMember.java)/**
 * @deprecated
 */
GPPASTSimpleDeclSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/GPPASTSimpleDeclSpecifier.java)/**
 * @deprecated Replaced by {@link CPPASTSimpleDeclSpecifier}
 */
IASTAmbiguousCondition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/IASTAmbiguousCondition.java)/**
 * Marks ambiguous condition nodes.
 */
ICPPASTInternalScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPASTInternalScope.java)/**
 * Interface for internal c++ scopes
 */
ICPPASTInternalTemplateDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPASTInternalTemplateDeclaration.java)/**
 * Adds method that assist in finding the relation-ship between a template declaration
 * and the names of the nested declaration.
 */
ICPPClassSpecializationScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPClassSpecializationScope.java)/**
 * Composite scope of a class specialization. Supports creating instances for bindings found
 * in the scope of the specialized class template.
 *
 * @since 5.0
 */
ICPPComputableFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPComputableFunction.java)/**
 * Represents a function whose executing may be simulated at parsing time.
 */
ICPPDeferredClassInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPDeferredClassInstance.java)/**
 * Interface for deferred class template instances.
 */
ICPPDeferredVariableInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPDeferredVariableInstance.java)/**
 * Represents an instantiation of a variable template that cannot be performed because of dependent arguments.
 */
ConstexprEvaluationContext (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPEvaluation.java)/**
	 * Keeps track of state during a constexpr evaluation.
	 */
ICPPEvaluation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPEvaluation.java)/**
 * Assists in evaluating expressions.
 */
ICPPExecution (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPExecution.java)/**
 * Assists in executing statements for constexpr evaluation
 */
ICPPInstanceCache (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInstanceCache.java)/**
 * Caches instances per template, the template definitions need to implement this interface
 */
ICPPInternalBase (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalBase.java)/**
 * @author Bryan Wilkinson
 */
ICPPInternalBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalBinding.java)/**
 * Non API methods for C++ bindings.
 */
ICPPInternalClassTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalClassTemplate.java)/**
 * Interface for class templates used in the AST.
 */
ICPPInternalClassTypeMixinHost (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalClassTypeMixinHost.java)/**
 * Internal interface for exposing internal methods to {@link ClassTypeHelper}
 */
ICPPInternalDeclaredVariable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalDeclaredVariable.java)/**
 * A common interface for CPPVariable and CPPVariableTemplate.
 */
ICPPInternalEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalEnumerator.java)/**
 * Non API methods for C++ enumerators.
 */
ICPPInternalFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalFunction.java)/**
 * Interface for ast-internal implementations of function bindings.
 */
ICPPInternalNamespaceScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalNamespaceScope.java)/**
 * For namespace scopes from the AST or mapped index namespace scopes.
 */
ICPPInternalTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalTemplate.java)/**
 * Interface for templates from the AST.
 */
ICPPInternalUnknownScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPInternalUnknownScope.java)/**
 * Scope corresponding to an unknown binding.
 */
ICPPTemplateParameterOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPTemplateParameterOwner.java)/**
 * Interface for templates from the AST.
 */
ICPPTwoPhaseBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPTwoPhaseBinding.java)/**
 * An interface for bindings that are resolvable in two steps. The binding computed
 * by the first step is an intermediate binding that can be replaced in a second
 * step before the binding is exposed via public API.
 * <p>
 * The bindings of the two phases may not be equal, but they must implement the
 * same public interfaces.
 * <p>
 * This allows for having multiple bindings for one final binding and deferring
 * the act of unifying them to a later point in time.
 */
ICPPUnknownBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPUnknownBinding.java)/**
 * Represents the binding for a dependent name within a template declaration.
 */
ICPPUnknownMember (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPUnknownMember.java)/**
 * Represents the binding for a dependent name within a template declaration.
 */
ICPPUnknownMemberClass (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPUnknownMemberClass.java)/**
 * Represents a binding for a type found in a template definition, that can be
 * determined only after the template is instantiated.
 *
 * This interface should be made public.
 * @since 5.0
 */
ICPPUnknownMemberClassInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPUnknownMemberClassInstance.java)/**
 * Represents a partially instantiated C++ class template, declaration of which is not yet available.
 *
 * This interface should be made public.
 * @since 5.0
 */
ICPPUnknownType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ICPPUnknownType.java)/**
 * Marks types that depend on a template parameter and are thus unknown.
 */
ImplicitsAnalysis (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/ImplicitsAnalysis.java)/**
 * Helps analysis of the class declaration for user declared members relevant for deciding
 * which implicit bindings to declare.
 *
 * @see chapter 12 of the ISO specification
 */
InstantiationContext (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/InstantiationContext.java)/**
 * Represents parameters and state of template instantiation.
 */
BranchPoint (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/NameOrTemplateIDVariants.java)/**
	 * A point where a '<' can be interpreted as less-than or as the angle-bracket of a template-id.
	 */
Variant (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/NameOrTemplateIDVariants.java)/**
	 * A variant for a branch-point is a cast-expression that can be used within a binary expression.
	 */
NameOrTemplateIDVariants (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/NameOrTemplateIDVariants.java)/**
 * Tracks variants of expressions due to the ambiguity between template-id and '<' operator.
 */
AccessContext (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/AccessContext.java)/**
 * The context that determines access to private and protected class members.
 */
ActivationRecord (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/ActivationRecord.java)/**
 * ActivationRecord keeps track of the values of parameters and local variables
 * during the evaluation of a function call.
 * */
AutoTypeResolver (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/AutoTypeResolver.java)/**
 * This class represents a template function used for deducing 'auto' types (C++0x: 7.1.6.4).
 */
BaseClassLookup (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/BaseClassLookup.java)/**
 * Helper class for performing the base class lookup. First a directed graph without loops is
 * computed to represent the base class hierarchy up to those bases for which the lookup finds
 * matches. Next, from these leaves we search for virtual bases that are hidden. With this
 * information the matches are extracted from the graph.
 */
BuiltinOperators (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/BuiltinOperators.java)/**
 * Generates built-in operators according to 13.6
 */
Conversions (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/Conversions.java)/**
 * Routines for calculating the cost of conversions.
 */
Cost (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/Cost.java)/**
 * The cost of an implicit conversion sequence.
 *
 * See [over.best.ics] 13.3.3.1.
 */
DeferredResolutionBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/CPPDependentEvaluation.java)/**
	 * Used to defer the resolution of a template definition until it is needed,
	 * to avoid recursion. The only valid operation on this binding is resolve().
	 */
CPPDependentEvaluation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/CPPDependentEvaluation.java)/**
 * Base class for evaluations that are dependent, or that have been instantiated
 * from a dependent evaluation. These evaluations keep track of the template
 * in which they are defined, so that certain name lookups can be performed
 * starting from their point of definition.
 */
CPPFunctionSet (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/CPPFunctionSet.java)/**
 * Used as intermediate binding for names nominating a function without calling it.
 * The actual function can be resolved in certain contexts.
 */
FinalOverriderMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/CPPInheritance.java)/**
	 * This class represents a mapping of virtual methods in a class hierarchy
	 * to their final overriders (see [class.virtual] p2). Since a class hierarchy
	 * can contain multiple subobjects of the same type (if multiple, non-virtual
	 * inheritance is used), and the pure virtual methods of each subobject must
	 * be implemented independently, we give each subobject of a given type a
	 * number, and for each method we keep track of the final overriders for each
	 * subobject number. Generally, there should be only one final overrider per
	 * subobject (in fact the program is ill-formed if there is more than one),
	 * but to accurately detect pure virtual methods that haven't been overridden,
	 * we need to be able to keep track of more than one at a time.
	 */
CPPInheritance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/CPPInheritance.java)/**
 * Semantic analysis related to inheritance.
 */
CPPSemantics (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/CPPSemantics.java)/**
 * Name resolution.
 */
CPPTemplates (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/CPPTemplates.java)/**
 * Collection of static methods to perform template instantiation, member specialization and
 * type instantiation.
 */
CPPVariableReadWriteFlags (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/CPPVariableReadWriteFlags.java)/**
 * Helper class to determine whether a variable is accessed for reading and/or writing.
 * The algorithm works starting from the variable and looking upwards what's being done
 * with the variable.
 */
CPPVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/CPPVisitor.java)/**
 * Collection of methods to extract information from a C++ translation unit.
 */
DestructorCallCollector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/DestructorCallCollector.java)/**
 * Finds destructor calls for temporaries and local variables.
 */
EvalBinary (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalBinary.java)/**
 * Performs evaluation of an expression.
 */
EvalBinaryTypeId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalBinaryTypeId.java)/**
 * Evaluation for a binary type-id expression.
 */
EvalCompositeAccess (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalCompositeAccess.java)/**
 * Represents an access to a sub-value of a composite value, identified by an index.
 * Composite values can include arrays, structures, and parameter packs (see {@code CompositeValue}).
 */
EvalCompoundStatementExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalCompoundStatementExpression.java)/**
 * Performs evaluation of a compound statement expression. Most but not all methods
 * delegate to the evaluation of the last expression in the compound one.
 */
EvalConditional (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalConditional.java)/**
 * Performs evaluation of an expression.
 */
EvalFixed (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalFixed.java)/**
 * Performs evaluation of an expression.
 */
EvalFunctionSet (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalFunctionSet.java)/**
 * Performs evaluation of an expression.
 */
EvalInitList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalInitList.java)/**
 * Performs evaluation of an expression.
 */
EvalNaryTypeId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalNaryTypeId.java)/**
 * Evaluation for a n-ary type-id expression.
 */
EvalPackExpansion (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalPackExpansion.java)/**
 * Evaluation for a pack expansion expression.
 */
EvalTypeId (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalTypeId.java)/**
 * Performs evaluation of an expression.
 */
ExpressionTypes (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/ExpressionTypes.java)/**
 * Methods for computing the type of an expression.
 */
FunctionCost (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/FunctionCost.java)/**
 * Cost for the entire function call.
 */
FunctionSetType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/FunctionSetType.java)/**
 * Used during overload resolution as a place-holder for function sets.
 */
CPPDependentClassInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/HeuristicResolver.java)/**
	 * An extension of CPPDeferredClassInstance that implements ICPPClassSpecialization,
	 * allowing its members to be specialized via specializeMember().
	 */
HeuristicLookup (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/HeuristicResolver.java)/**
	 * Represents a lookup of a name in a primary template scope.
	 * The set of such lookups during a heuristic resolution operation is
	 * tracked, to avoid infinite recursion.
	 */
HeuristicResolver (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/HeuristicResolver.java)/**
 * The purpose of this class is to perform heuristic binding resolution
 * in contexts where the results of ordinary binding resolution (whose
 * approach to templates is "defer actual resolution until template
 * arguments become available") are undesirable.
 *
 * Usually, this comes up in cases where the user is trying to invoke
 * certain editor functionality inside a template.
 *
 * For example, consider the following code:
 *
 *   struct Cat {
 *       void meow();
 *   };
 *
 *   template <typename T>
 *   struct B {
 *       Cat foo();
 *   };
 *
 *   template <typename T>
 *   void foo(B<T> a) {
 *       a.foo().
 *   }
 *
 * and suppose content assist is invoked after the "a.foo().".
 * To determine what completions to provide in that context, we try
 * to determine the type of 'a.foo()', and then look to see what
 * members are inside that type.
 *
 * However, because we're in a template, the type of 'a.foo()' is
 * a deferred / unknown type (in this case, a TypeOfDependentExpression),
 * so we don't know what members it has.
 *
 * HeuristicResolver maps that unknown type to a concrete type
 * (in this case, 'Cat') by applying the following heuristic:
 * whenever name lookup is deferred because the lookup scope is
 * the scope of a dependent template instantiation, assume the
 * instantiation uses the primary template (as opposed to a partial
 * or explicit specialization), and perform the lookup in the
 * primary template scope. This heuristic gives the right answer
 * in many cases, including this one.
 *
 * HeuristicResolver can handle some more complex situations as well,
 * such as metafunction calls, typedefs, and nested templates. See
 * CompletionTests.testDependentScopes_bug472818c for a test case
 * that pushes it to its limit.
 *
 * However, due to the nature of its heuristic, it cannot handle
 * cases where the correct answer requires selecting a specialization
 * rather than the primary template. Bug 487700 is on file for
 * implementing more advanced heuristics that could deal with this.
 */
InitializerListType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/InitializerListType.java)/**
 * Wrapper for initializer lists to allow for participation in the overload resolution.
 */
LookupData (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/LookupData.java)/**
 * Context data for IASTName lookup
 */
NamespaceTypeCollector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/NamespaceTypeCollector.java)/**
 * Utility class to populate scope with friend declarations hidden in nested classes
 */
SemanticUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/SemanticUtil.java)/**
 * Collection of static methods operating on C++ bindings.
 */
TemplateArgumentDeduction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/TemplateArgumentDeduction.java)/**
 * Algorithms for deducing template arguments in various contexts.
 */
TypeInstantiationRequest (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/TypeInstantiationRequest.java)/**
 * Used to track ongoing instantiations as a safeguard against infinite recursion.
 */
TypeOfDependentExpression (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/TypeOfDependentExpression.java)/**
 * Represents the type of a dependent expression.
 */
TypeOfUnknownMember (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/TypeOfUnknownMember.java)/**
 * Represents the type of an unknown member.
 */
TypeTraits (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/TypeTraits.java)/**
 * A collection of static methods for determining type traits.
 */
UniqueType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/UniqueType.java)/**
 * Used for computing the partial ordering of function templates.
 */
TemplateIdStrategy (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/TemplateIdStrategy.java)/**
 * This class is used to track alternatives for parsing segments of code that involve '<' tokens.
 *
 * The '<' token can be either a less-than operator or part of a template-id.
 * When parsing, we potentially need to consider both possibilities for each use of '<'.
 *
 * An instance of this class is used to track alternative parses in a segment of code that includes one or
 * more uses of '<' preceded by names. An alternative consists of a choice (template-id or not) for each
 * name. At a given point in time, the instance has a notion of a current alternative, and a current
 * position within that alternative.
 *
 * @see also NameOrTemplateIDVariants, which is used together with this class to deal with ambiguities
 * involving '<' when parsing in an expression context.
 */
VariableHelpers (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/VariableHelpers.java)/**
 * Collects functionality used by CPPVariable, CPPVariableTemplate and their subclasses.
 */
DeclarationOptions (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/DeclarationOptions.java)/**
 * Configures the parsing of a declaration in various contexts.
 */
DependentValue (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/DependentValue.java)/**
 * Represents the value of an expression, which is not simplified yet,
 * usually because it depends on the value of a template parameter.
 */
FindNodeForOffsetAction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/FindNodeForOffsetAction.java)/**
 * Visitor to search for nodes by file offsets.
 * @since 5.0
 */
GCCASTAttributeList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/GCCASTAttributeList.java)/**
 * Represents a GCC attribute list, containing attributes.
 */
GCCBuiltinSymbolProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/GCCBuiltinSymbolProvider.java)/**
 * This is the IBuiltinBindingsProvider used to implement the "Other" built-in GCC symbols defined:
 * http://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html#Other-Builtins
 */
IASTAmbiguousDeclarator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IASTAmbiguousDeclarator.java)/**
 * Needed to handle the ambiguous declarator.
 * @since 5.0
 */
IASTAmbiguousParameterDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IASTAmbiguousParameterDeclaration.java)/**
 * Needed to handle the ambiguity for parameter declarations in plain C
 * @since 5.0
 */
IASTAmbiguousSimpleDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IASTAmbiguousSimpleDeclaration.java)/**
 * Needed to handle the ambiguity for simple declarations in plain C
 */
IASTInactiveCompletionName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IASTInactiveCompletionName.java)/**
 * Interface for a name representing a prefix being completed inside inactive code.
 */
IASTInternalEnumerationSpecifier (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IASTInternalEnumerationSpecifier.java)/**
 * Internal interface for C or C++ enumeration specifiers.
 */
IASTInternalNameOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IASTInternalNameOwner.java)/**
 * Provides additional methods for internal use by the name resolution.
 */
IASTInternalScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IASTInternalScope.java)/**
 * Interface for methods on scopes that are internal to the AST.
 */
IntegralValue (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IntegralValue.java)/**
 * Represents values of variables, enumerators or expressions. The primary purpose of
 * the representation is to support instantiation of templates with non-type template parameters.
 */
IRecursionResolvingBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IRecursionResolvingBinding.java)/**
 * Interface for problem bindings created to avoid infinite recursion.
 */
ISerializableType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ISerializableType.java)/**
 * Interface for marshalling types for storage in the index.
 */
ITypeContainer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ITypeContainer.java)/**
 * Internal interface representing types that contain other types
 */
ITypeMarshalBuffer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ITypeMarshalBuffer.java)/**
 * Buffer for marshalling and unmarshalling types.
 */
MSASTDeclspecList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/MSASTDeclspecList.java)/**
 * Represents a __declspec list.
 */
NodeFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/NodeFactory.java)/**
 * Abstract base class for node factories.
 */
ProblemBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ProblemBinding.java)/**
 * Implementation of problem bindings
 */
ProblemFunctionType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ProblemFunctionType.java)/**
 * Implementation of problem types.
 */
ProblemType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ProblemType.java)/**
 * Implementation of problem types.
 */
SizeAndAlignment (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/SizeofCalculator.java)/** Size and alignment pair */
SizeofCalculator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/SizeofCalculator.java)/**
 * Calculator of in-memory size and alignment of types.
 */
VariableReadWriteFlags (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/VariableReadWriteFlags.java)/**
 * Helper class to determine whether a variable is accessed for reading and/or writing.
 * The algorithm works starting from the variable and looking upwards what's being done
 * with the variable. C- and C++ specific things are handled in sub-classes.
 */
ASTLiteralNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/ASTLiteralNode.java)/**
 * Used for inserting literal code by means of the rewrite facility. The node
 * will never appear in an AST tree.
 * @since 5.0
 */
ASTModificationMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/ASTModificationMap.java)/**
 * Represents a list of modifications to an AST node. If there are nested modifications
 * to nodes introduced by insertions or replacements, these modifications are collected
 * in separate modification maps. I.e. a modification map represents one level of modifications.
 * @see ASTModificationStore
 * @since 5.0
 */
ASTModificationStore (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/ASTModificationStore.java)/**
 * Collects modifications to an AST in a hierarchical manner. The store gives access to
 * the root modifications and for each modification you can obtain the nested modifications here.
 * @since 5.0
 */
ASTWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/ASTWriter.java)/**
 * ASTWriter main class. Generates source code from <code>IASTNode</code>.
 * Uses a {@link ChangeGeneratorWriterVisitor} to generate the code for the given nodes.
 *
 * @author Emanuel Graf
 */
ASTWriterVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/ASTWriterVisitor.java)/**
 * Visits all nodes, prints leading comments and handles macro expansions. The
 * source code generation is delegated to severals {@code NodeWriter}s.
 *
 * @see MacroExpansionHandler
 *
 * @author Emanuel Graf IFS
 */
AttributeWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/AttributeWriter.java)/**
 * Generates source code for attribute nodes. The actual string operations are delegated to the
 * <code>Scribe</code> class.
 *
 * @see Scribe
 * @see IASTAttribute
 */
ContainerNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/ContainerNode.java)/**
 * This class serves as a container to pass several nodes to the <code>ASTWriter</code>.
 * This container is used if source code for several sibling nodes but for their common parent
 * node should be generated.
 *
 * @author Emanuel Graf IFS
 */
DeclarationWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/DeclarationWriter.java)/**
 * Generates source code of declaration nodes. The actual string operations are delegated
 * to the <code>Scribe</code> class.
 *
 * @see Scribe
 * @see IASTDeclaration
 * @author Emanuel Graf IFS
 */
DeclaratorWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/DeclaratorWriter.java)/**
 * Generates source code of declarator nodes. The actual string operations are delegated
 * to the {@link Scribe} class.
 *
 * @see IASTDeclarator
 * @author Emanuel Graf IFS
 */
DeclSpecWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/DeclSpecWriter.java)/**
 * Generates source code of declaration specifier nodes. The actual string operations are delegated
 * to the <code>Scribe</code> class.
 *
 * @see Scribe
 * @see IASTDeclSpecifier
 * @author Emanuel Graf IFS
 */
ExpressionWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/ExpressionWriter.java)/**
 *
 * Generates source code of expression nodes. The actual string operations are delegated
 * to the <code>Scribe</code> class.
 *
 * @see Scribe
 * @see IASTExpression
 * @author Emanuel Graf IFS
 */
InitializerWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/InitializerWriter.java)/**
 * Generates source code of initializer nodes. The actual string operations are delegated
 * to the <code>Scribe</code> class.
 *
 * @see Scribe
 * @see IASTInitializer
 * @author Emanuel Graf IFS
 */
MacroExpansionHandler (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/MacroExpansionHandler.java)/**
 * Recognizes nodes that are the result of an macro expansion and replaces them
 * with a suitable macro call.
 *
 * @author Emanuel Graf IFS
 */
NameWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/NameWriter.java)/**
 * Generates source code of name nodes. The actual string operations are delegated
 * to the <code>Scribe</code> class.
 *
 * @see Scribe
 * @see IASTName
 * @author Emanuel Graf IFS
 */
NodeWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/NodeWriter.java)/**
 * Base class for node writers. This class contains methods and string constants
 * used by multiple node writers.
 *
 * @author Emanuel Graf IFS
 */
ProblemRuntimeException (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/ProblemRuntimeException.java)/**
 * This exception is thrown if a problem node is passed to the ASTWriter. The exception
 * contains the <code>IASTProblemHolder</code> that was passed to the writer.
 *
 * @see IASTProblem
 * @author Emanuel Graf IFS
 */
Scribe (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/Scribe.java)/**
 * This class is responsible for the string concatenation and the management of
 * the indentations.
 *
 * @since 5.0
 * @author Emanuel Graf IFS
 */
StatementWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/StatementWriter.java)/**
 * Generates source code of statement nodes. The actual string operations are delegated
 * to the <code>Scribe</code> class.
 *
 * @see Scribe
 * @see IASTStatement
 * @author Emanuel Graf IFS
 */
TemplateParameterWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/astwriter/TemplateParameterWriter.java)/**
 * Generates source code of template parameter nodes. The actual string operations are delegated
 * to the <code>Scribe</code> class.
 *
 * @see Scribe
 * @see ICPPASTTemplateParameter
 * @author Emanuel Graf IFS
 */
ChangeGeneratorMessages (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/changegenerator/ChangeGeneratorMessages.java)/**
 * External strings for the change generator.
 * @since 5.0
 */
ChangeGeneratorWriterVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/changegenerator/ChangeGeneratorWriterVisitor.java)/**
 * Visits the nodes in consideration of {@link ASTModification}s.
 *
 * @since 5.0
 * @author Emanuel Graf IFS
 */
ASTCommenter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/ASTCommenter.java)/**
 * This is the starting point of the entire comment handling  process. The creation of the
 * {@link NodeCommentMap} is based on the {@link IASTTranslationUnit}. From this translation unit
 * the comments are extracted and skipped if they belong not to the same workspace.
 * An {@link ASTCommenterVisitor} is initialized with this collection of comments. And the visit
 * process can start.
 *
 * @see NodeCommenter
 * @see NodeCommentMap
 *
 * @author Guido Zgraggen IFS
 */
ASTCommenterVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/ASTCommenterVisitor.java)/**
 * A visitor for the comments. Calls the NodeCommenter to assign the comments.
 *
 * @see org.eclipse.cdt.internal.core.dom.rewrite.commenthandler.NodeCommenter
 *
 * @author Guido Zgraggen IFS
 */
CommentHandler (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/CommentHandler.java)/**
 * The CommentHandler is initialized with all the comment which should be processed.
 * During the process of comment assignment this comment collection is work through one
 * after another until no more comments are left.
 *
 * @author Guido Zgraggen IFS
 */
NodeCommenter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/NodeCommenter.java)/**
 * The NodeCommenter contains all the logic that is needed for the ASTCommentVisitor to assign
 * the comments to the suitable node. Together with the ASTCommenterVisitor it fills all
 * the comments with the correspondent node into the NodeCommentMap.
 *
 * Following, a little explanation of the assignment logic. It is only a loose illustration
 * a detailed description would include a combined explanation of ASTCommenterVisitor and
 * NodeCommenter.<br>
 * To understand the logic we define the three types of comments:<br>
 * leading comments - Comments before a statement, declaration, or definition.<br>
 * trailing comments - Comments right after the AST node on the same line.<br>
 * freestanding comments - Comments before a closing brace such as they occur in
 * namespace-, class- and method-definitions or at the end of a file.<br>
 *
 * The first comment is fetched and the position of it is compared to the position of the actual
 * node. If the position of the comment is smaller than the comment is added to the node as leading.
 * If it is behind the node but on the same line it is added as trailing. If one of these
 * possibilities match the next comment is fetched for the same check. If it doesn't match the same
 * procedure is done for all the child nodes. After checking the sub nodes the actual node is
 * checked again if the comment is trailing. Then there is also the possibility that this comment is
 * freestanding. This is the case when the comment is not added to any child node but the position
 * is smaller than the end position of the node.
 *
 * @author Guido Zgraggen IFS
 */
NodeCommentMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/NodeCommentMap.java)/**
 * The NodeCommentMap is the map where all the comments are assigned to a node. For better
 * performance the comments are stored in three different maps which have the same name as
 * the relative position of the comment.
 *
 * @author Guido Zgraggen IFS
 */
DeclarationGeneratorImpl (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/DeclarationGeneratorImpl.java)/**
 * @author Tomasz Wesolowski
 */
ICTextFileChangeFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/ICTextFileChangeFactory.java)/**
 * Factory to create CTextFileChanges. Allows for creating ui-dependent objects in the core plugin.
 * @since 5.0
 */
TrackedNodePosition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/TrackedNodePosition.java)/**
 * @see org.eclipse.cdt.core.dom.rewrite.ITrackedNodePosition
 */
ASTNodes (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/util/ASTNodes.java)/**
 * Collection of helper methods for common operations on AST nodes.
 */
NameKey (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/CIndex.java)/**
	 * A key used to uniquely identify an IIndexFragmentName object. Uniqueness is guaranteed only
	 * for names corresponding to the same binding.
	 */
AbstractCompositeFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/composite/AbstractCompositeFactory.java)/**
 * Commonality between composite factories
 */
CompositeIndexBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/composite/CompositeIndexBinding.java)/**
 * Represents a binding which is split over several index fragments.
 * <p>
 * Like the component IIndexBinding objects that make up a CompositeIndexBinding, the
 * it is only valid to call methods and obtain information while a read-lock is held on the
 * associated IIndex
 */
CompositeMacroContainer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/composite/CompositeMacroContainer.java)/**
 * Composite binding for macro containers.
 *
 * @since 5.0
 */
CompositeType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/composite/CompositeType.java)/**
 * Represents an index-contexting carrying type
 */
CompositeCPPClassInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/composite/cpp/CompositeCPPClassInstance.java)/**
 * The result of instantiating a class template or an explicit specialization of a class template.
 */
CompositeCPPFunctionInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/composite/cpp/CompositeCPPFunctionInstance.java)/**
 * An instantiation or an explicit specialization of a function template.
 */
TemplateInstanceUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/composite/cpp/TemplateInstanceUtil.java)/**
 * For implementation re-use in the absence of multiple inheritance.
 */
CPPAliasTemplateInstanceClone (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/CPPAliasTemplateInstanceClone.java)/**
 * Delegating clone implementation for index classes implementing {@link ICPPAliasTemplateInstance} interface.
 */
CPPTypedefClone (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/CPPTypedefClone.java)/**
 * Delegating clone implementation for index classes implementing {@link ITypedef} interface.
 */
DefaultFragmentBindingComparator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/DefaultFragmentBindingComparator.java)/**
 * Binding comparator suitable for C/C++ across index implementations. This will not be used
 * unless we ever have non-PDOM implementations of IIndexFragment, and in that case we may find
 * this implementation is too slow.
 */
FileContentKey (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/FileContentKey.java)/**
 * A key that uniquely determines the preprocessed contents of a file.
 */
IIndexBindingConstants (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IIndexBindingConstants.java)/**
 * Constants used by IIndexFragment implementations for identifying persisted binding types
 */
IIndexCBindingConstants (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IIndexCBindingConstants.java)/**
 * Constants used by IIndexFragment implementations for identifying persisted binding types
 */
IIndexCPPBindingConstants (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IIndexCPPBindingConstants.java)/**
 * Constants used by IIndexFragment implementations for identifying persisted binding types.
 */
IIndexFragment (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IIndexFragment.java)/**
 * Interface for the implementation of the actual index storage mechanism.
 *
 * @since 4.0
 */
IIndexScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IIndexScope.java)/**
 * Interface for scopes returned via the index
 * @since 4.0
 */
IIndexType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IIndexType.java)/**
 * Interface for types stored in the index
 * @since 4.0
 */
IndexBasedFileContentProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IndexBasedFileContentProvider.java)/**
 * Code reader factory, that fakes code readers for header files already stored in the index.
 */
IndexCPPSignatureUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IndexCPPSignatureUtil.java)/**
 * Determines the signatures and signature hashes for bindings that can have
 * siblings with the same name.
 */
IndexFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IndexFactory.java)/**
 * Class that creates indexes based on PDOMs
 * @since 4.0
 */
IndexFileLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IndexFileLocation.java)/**
 * An implementation of IIndexFileLocation
 */
IWritableIndex (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IWritableIndex.java)/**
 * Interface used by the indexer to write to the index. A writable index is not thread-safe,
 * each instance must not be used within more than one thread.
 *
 * @since 4.0
 */
IWritableIndexFragment (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/IWritableIndexFragment.java)/**
 * The interface that an actual storage for an index has to implement.
 */
IIndexFragmentProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/provider/IIndexFragmentProvider.java)/**
 * The ICProject IIndex is a logical index composed of potentially many
 * IIndexFragments. An IIndexFragmentProvider is a source of IIndexFragments.
 * <p>
 *
 * <p>
 * IndexProviders are registered via the extension point
 * <code>org.eclipse.cdt.core.CIndex</code>
 * <p>
 */
IndexProviderManager (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/provider/IndexProviderManager.java)/**
 * The IndexProviderManager is responsible for maintaining the set of index
 * fragments contributed via the CIndex extension point.
 * <p>
 * For bug 196338, the role of this class was extended. It now has responsibility to look
 * at the pool of fragments available depending on their IDs, and select the most appropriate.
 * The following rules are applied:
 * <ul>
 * 	<li>If a fragment is not compatible, don't use it.</li>
 *  <li>If multiple fragments are compatible, pick the latest.</li>
 * </ul>
 *
 * A warning is logged if a fragment is contributed which is incompatible, and for which there is
 * no compatible equivalent.
 *
 * It is an internal class, and is public only for testing purposes.
 * @since 4.0
 */
PDOMCache (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/provider/PDOMCache.java)/**
 * Internal singleton map maintained for non-project PDOM objects
 */
ReadOnlyPDOMProviderBridge (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/provider/ReadOnlyPDOMProviderBridge.java)/**
 * Adapts a IReadOnlyPDOMProvider to an IIndexFragmentProvider.
 */
FileEncodingRegistry (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/FileEncodingRegistry.java)/**
 * this class is a registry which maps file name and file's encoding, the class
 * is used by standalone indexer
 *
 * @author johnliu
 *
 */
ILanguageMapper (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/ILanguageMapper.java)/**
 * This mapper can be used for determining the ILanguage for a particular file.
 *
 * A mapper is needed for standalone indexing when the ILanguage for a file is unknown.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 */
IStandaloneScannerInfoProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/IStandaloneScannerInfoProvider.java)/**
 * Similar to IScannerInfoProvider but computes the IScannerInfo
 * based on a String path instead of IResource.
 *
 * @see IScannerInfoProvider
 */
StandaloneFastIndexer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneFastIndexer.java)/**
 * A standalone tool for populating an index.  This indexer optimizes for
 * speed at the expense of accuracy.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 */
StandaloneFastIndexerTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneFastIndexerTask.java)/**
 * A task for index updates.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 */
StandaloneFullIndexer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneFullIndexer.java)/**
 * A standalone tool for populating an index.  This indexer optimizes for
 * accuracy so it may be slower than the StandaloneFastIndexer.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 */
StandaloneFullIndexerTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneFullIndexerTask.java)/**
 * A task for index updates.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 */
StandaloneIndexer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneIndexer.java)/**
 * The base class for stand-alone index population tools.
 *
 * <p>
 * This class is not thread safe.
 * </p>
 */
StandaloneIndexerFallbackReaderFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneIndexerFallbackReaderFactory.java)/**
 * A factory for CodeReaders construction.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 */
StandaloneIndexerInputAdapter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneIndexerInputAdapter.java)/**
 * Provides information about the file paths represented as strings.
 * @since 5.0
 */
StandaloneIndexerTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneIndexerTask.java)/**
 * A task for index updates.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 * </p>
 *
 * @since 4.0
 */
StdoutLogService (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StdoutLogService.java)/**
 * Implementation of parser log service logging to stdout.
 */
CodeReaderCacheEntry (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/CodeReaderCacheEntry.java)/**
 * This is a wrapper for entries to put into the OverflowingLRUCache (required to determine the
 * size of entries relative to the CodeReader's file size).
 *
 * Although the size of the CodeReaderCache is specified in terms of MB, the actual granularity of
 * the cache is KB.
 * @deprecated
 */
CodeReaderLRUCache (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/CodeReaderLRUCache.java)/**
 * This class is a wrapper/implementor class for OverflowingLRUCache.
 *
 * It uses CodeReaderCacheEntry (which implements ILRUCacheable) to specify that the size of
 * the cache should be relative to the size of the entries and not the number of entries.
 * @deprecated
 */
IMacroDictionary (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/IMacroDictionary.java)/**
 * Interface for accessing the macro dictionary of the preprocessor.
 */
InternalParserUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/InternalParserUtil.java)/**
 * Utility for creating code readers
 */
IProblemFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/problem/IProblemFactory.java)/**
 * @author jcamelon
 */
AbstractCharArray (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/AbstractCharArray.java)/**
 * Abstract class for providing input to the lexer.
 * @since 5.2
 */
ASTPreprocessorName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ASTPreprocessorName.java)/**
 * Models IASTNames as needed for the preprocessor statements and macro expansions.
 * @since 5.0
 */
ASTPreprocessorNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ASTPreprocessorNode.java)/**
 * Models various AST-constructs obtained from the preprocessor.
 * @since 5.0
 */
CharArray (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/CharArray.java)/**
 * Wrapper around char[] to implement {@link AbstractCharArray}.
 */
CompletionInMacroExpansionException (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/CompletionInMacroExpansionException.java)/**
 * Thrown when content assist is used within the parameter list of a macro expansion.
 * It transports the token list of the current parameter for further use in attempting
 * a completion.
 * @since 5.0
 */
CPreprocessor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/CPreprocessor.java)/**
 * C-Preprocessor providing tokens for the parsers. The class should not be used directly,
 * rather than that you should be using the {@link IScanner} interface.
 * @since 5.0
 */
ExpressionEvaluator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ExpressionEvaluator.java)/**
 * Used to evaluate expressions in preprocessor directives.
 */
FileCharArray (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/FileCharArray.java)/**
 * Implementation of char array for a file referencing content via soft references.
 */
FindNodeByImageLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/FindNodeByImageLocation.java)/**
 * Visitor to select nodes by image-location.
 * @since 5.0
 */
ILexerLog (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ILexerLog.java)/**
 * Interface between the lexer and the preprocessor for picking up warnings and comments.
 * @since 5.0
 */
ILocationCtx (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ILocationCtx.java)/**
 * Interface between location map and preprocessor for modeling contexts that can deal with offsets.
 * These are:
 * synthetic contexts used for pre-included files, file-contexts, macro-expansions.
 * @since 5.0
 */
ILocationResolver (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ILocationResolver.java)/**
 * Interface between the AST and the location-resolver for resolving offsets.
 * @since 5.0
 */
ImageLocationInfo (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ImageLocationInfo.java)/**
 * Information needed for computing image-locations. An image location exists for a name and
 * describes where the name came from. This can be: source code, macro-expansion, parameter to
 * macro-expansion or synthetic.
 *
 * @since 5.0
 */
InactiveCodeToken (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/InactiveCodeToken.java)/**
 * Special token to separate active from inactive code
 */
IncludeGuardDetection (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/IncludeGuardDetection.java)/**
 * Helper class for detecting include guards.
 */
IncludeSearchPath (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/IncludeSearchPath.java)/**
 * Represents the include search path
 */
IncludeSearchPathElement (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/IncludeSearchPathElement.java)/**
 * Represents an entry of the include search path
 */
InternalFileContent (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/InternalFileContent.java)/**
 * Instructs the preprocessor on how to handle a file-inclusion.
 */
InternalFileContentProvider (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/InternalFileContentProvider.java)/**
 * Internal implementation of the file content providers
 */
ISkippedIndexedFilesListener (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ISkippedIndexedFilesListener.java)/**
 * Interface to listen for information about files skipped by the preprocessor,
 * because they are found in the index
 */
ITokenSequence (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ITokenSequence.java)/**
 * A token sequence serves as input to the macro expansion.
 */
LazyCharArray (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/LazyCharArray.java)/**
 * Implementation of char array for a file referencing content via soft references.
 * Because of bug 320157 we need to deal with chunks of different length.
 */
Lexer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/Lexer.java)/**
 * In short this class converts line endings (to '\n') and trigraphs
 * (to their corresponding character),
 * removes line-splices, comments and whitespace other than newline.
 * Returns preprocessor tokens.
 * <p>
 * In addition to the preprocessor tokens the following tokens may also be returned:
 * {@link #tBEFORE_INPUT}, {@link IToken#tEND_OF_INPUT}, {@link IToken#tCOMPLETION}.
 * <p>
 * Number literals are split up into {@link IToken#tINTEGER} and {@link IToken#tFLOATINGPT}.
 * No checks are done on the number literals.
 * <p>
 * UNCs are accepted, however characters from outside of the basic source character set are
 * not converted to UNCs. Rather than that they are tested with
 * {@link Character#isUnicodeIdentifierPart(char)} and may be accepted as part of an
 * identifier.
 * <p>
 * The characters in string literals and char-literals are left as they are found, no conversion to
 * an execution character-set is performed.
 */
LocationCtx (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/LocationCtx.java)/**
 * Various location contexts which are suitable for interpreting local offsets. These offsets are
 * converted in a global sequence-number to make all AST nodes comparable with each other.
 * @since 5.0
 */
LocationCtxContainer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/LocationCtxContainer.java)/**
 * Base class for all location contexts that can contain children.
 *
 * @since 5.0
 */
LocationCtxFile (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/LocationCtxFile.java)/**
 * A location context representing a file.
 * @since 5.0
 */
LocationCtxMacroExpansion (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/LocationCtxMacroExpansion.java)/**
 * A location context representing macro expansions.
 * @since 5.0
 */
LocationMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/LocationMap.java)/**
 * Converts the offsets relative to various contexts to the global sequence number. Also creates
 * and stores objects that are needed to conform with the IAST... interfaces.
 * @since 5.0
 */
InvalidMacroDefinitionException (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/MacroDefinitionParser.java)/**
	 * Exception for reporting problems while parsing a macro definition.
	 */
TokenParameterReference (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/MacroDefinitionParser.java)/**
	 * Token used for macro parameters found in the replacement list.
	 */
MacroDefinitionParser (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/MacroDefinitionParser.java)/**
 * Utility to parse macro definitions and create the macro objects for the preprocessor.
 * @since 5.0
 */
ExpansionBoundary (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/MacroExpander.java)/**
	 * Marks the beginning and the end of the scope of a macro expansion. Necessary to properly
	 * handle recursive expansions and to figure out whether spaces are required during a stringify
	 * operation across such boundaries.
	 */
TokenSource (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/MacroExpander.java)/**
	 * Combines a list of tokens with the preprocessor to form the input for macro expansion.
	 */
MacroExpander (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/MacroExpander.java)/**
 * Utility class to perform macro expansion.
 * @since 5.0
 */
MacroExpansionStep (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/MacroExpansionStep.java)/**
 * Implementation for {@link IMacroExpansionStep}.
 */
MacroExpansionTracker (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/MacroExpansionTracker.java)/**
 * Collects information while macro expansion is performed.
 */
MultiMacroExpansionExplorer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/MultiMacroExpansionExplorer.java)/**
 * Delegates the task of exploring macro expansions to simpler explorers dealing with
 * a single macro, only.
 * @since 5.0
 */
PreprocessorMacro (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/PreprocessorMacro.java)/**
 * Models macros used by the preprocessor
 * @since 5.0
 */
ScannerContext (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ScannerContext.java)/**
 * Represents part of the input to the preprocessor. This may be a file or the result of a macro expansion.
 * @since 5.0
 */
ScannerUtility (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/ScannerUtility.java)/**
 * @author jcamelon
 */
SignificantMacros (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/SignificantMacros.java)/**
 * A set of static methods to encode Map<String, String> as an array of characters and to decode
 * it back.
 *
 * The map is encoded as:
 * {@code <number_of_entries>,<key1><value1>...<keyN><valueN>}.
 * <p>
 * Each string is encoded as: {@code <number_of_characters>,<characters>}.
 * A {@code null} string is encoded as a single comma.
 */
SingleMacroExpansionExplorer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/SingleMacroExpansionExplorer.java)/**
 * Performs step by step macro expansion for an exact macro expansion location.
 * @since 5.0
 */
StreamHasher (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/StreamHasher.java)/**
 * Computes a 64-bit hash value of a character stream that can be supplied one chunk at a time.
 * Usage:
 * <pre>
 *   StreamHasher hasher = new StreamHasher();
 *   for (long offset = 0; offset < streamLength; offset += chunkLength) {
 *     hasher.addChunk(offset, chunkOfCharacters);
 *   }
 *   int64 hashValue = hasher.computeHash();
 * </pre>
 *
 * Based on lookup3.c by Bob Jenkins from {@link "http://burtleburtle.net/bob/c/lookup3.c"}
 */
Counter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/Token.java)/**
	 * Bug 425711: Some source files cause the CPreprocessor to try to allocate an unmanageable number
	 * of Tokens.  For example, boost has a file, delay.c, that caused over 250 million instances to
	 * be created -- that is where the VM overflowed my 3Gb heap.  Both gcc and clang also ran
	 * out of memory and crashed while processing that file.
	 * <p>
	 * Giving up on a file is better than crashing the entire IDE, so a new user-preference provide
	 * a way to specify a limit.  The preference is implemented by counting the number of instances
	 * of Token that are created by a single instance of CPreprocessor.
	 * <p>
	 * This counter records the total and throws an exception if the limit is surpassed.
	 */
Token (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/Token.java)/**
 * Represents tokens found by the lexer. The preprocessor reuses the tokens and passes
 * them on to the parsers.
 * @since 5.0
 */
TokenForDigraph (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/scanner/TokenForDigraph.java)/**
 * Tokens for digraphs simply have a different image.
 * @since 5.0
 */
ContentAssistMatcherFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/util/ContentAssistMatcherFactory.java)/**
 * The facade to the pattern matching algorithms of content assist.
 *
 * @author Jens Elmenthaler
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 5.3
 */
LRUCache (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/util/LRUCache.java)/**
 * LRUCache based on {@link LinkedHashMap}.
 */
Profiler (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/util/Profiler.java)/**
 * Manual profiler for focused thread-specific profiling.
 * <p>
 * Usage example:
 * <pre>
 *   Profiler.activate();
 *   // Code to profile
 *   if (starsAlign) {
 *       Profiler.printStats();
 *   }
 *   Profiler.deactivate();
 *
 *   void someMethod() {
 *       try {
 *           Profiler.startTimer("MyClass.someMethod");
 *           // Code to get timing for.
 *       } finally {
 *           Profiler.stopTimer("MyClass.someMethod");
 *       }
 *   }
 *
 *   void someOtherMethod() {
 *       ...
 *       Profiler.incrementCounter("Interesting thing happened");
 *       ...
 *   }
 * </pre>
 */
TraceUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/util/TraceUtil.java)/**
 * @author ddaoust
 */
AbstractIndexerTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/AbstractIndexerTask.java)/**
 * Task for the actual indexing. Various indexers need to implement the abstract methods.
 * @since 5.0
 */
ASTFilePathResolver (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/ASTFilePathResolver.java)/**
 * Abstract class for resolving paths as computed by the parser.
 */
AtomicMultiSet (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/AtomicMultiSet.java)/**
 * Thread-safe reference counted set of objects.
 *
 * @param <T> Type of the objects contained in the set.
 */
CModelListener (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/CModelListener.java)/**
 * CModel listener used for the PDOMManager.
 * @since 4.0
 */
BTNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/BTree.java)/**
	 * Used in implementation of delete routines
	 */
InvariantsChecker (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/BTree.java)/**
	 * A B-tree visitor for checking some B-tree invariants.
	 * Note ordering invariants are not checked here.
	 */
BTree (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/BTree.java)/**
 * @author Doug Schaefer
 */
Chunk (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/Chunk.java)/**
 * Caches the content of a piece of the database.
 */
SoftStringRef (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/Database.java)/** Soft reference wrapper to keep track of the record for disposed strings. */
DBProperties (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/DBProperties.java)/**
 * DBProperties is a bare-bones implementation of a String->String mapping. It is neither
 * a Map or a Properties subclass, because of their more general applications.
 */
DBStatus (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/DBStatus.java)/**
 * @author Doug Schaefer
 */
IBTreeComparator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/IBTreeComparator.java)/**
 * @author Doug Schaefer
 */
IBTreeVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/IBTreeVisitor.java)/**
 * @author Doug Schaefer
 *
 * The visitor visits all records where compare returns 0.
 */
IString (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/IString.java)/**
 * Interface for strings stored in the database. There is more than one string
 * format. This interface hides that fact.
 *
 * @author Doug Schaefer
 */
ListItem (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/ListItem.java)/**
 * This is a list item. It contains a next and prev pointer
 * as well as a pointer to the item.
 *
 * @author Doug Schaefer
 */
LongString (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/LongString.java)/**
 * This is for strings that take up more than on chunk.
 * The string will need to be broken up into sections and then
 * reassembled when necessary.
 *
 * @author Doug Schaefer
 */
PDOMExternalReferencesList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/PDOMExternalReferencesList.java)/**
 * A utility class for storing a list of external references.  An external reference is
 * a PDOMName that references a PDOMBinding in a different linkage.  This list can be
 * examined using {@link #getIterator()}.
 */
PDOMNodeLinkedList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/PDOMNodeLinkedList.java)/**
 * Represents a linked list of PDOMNode records
 * @author Doug Schaefer
 */
PDOMStringSet (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/PDOMStringSet.java)/**
 * A container for storing a set of strings in the Database. The container allows only one instance of each
 * string to be stored.
 * <p>
 * This implementation should only be used when the set is expected to be small. It uses a singly linked list
 * for storing strings in Database. Which means that a linear lookup is needed to find strings in the list. An
 * in-memory, lazily-loaded, cache is provided so the list will only be fully retrieved once in the lifetime
 * of this instance. A BTree will be more efficient for larger sets.
 */
ShortString (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/ShortString.java)/**
 * This is for strings that fit inside a single chunk.
 *
 * @author Doug Schaefer
 */
ApplyVisitor (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/ApplyVisitor.java)/**
 * Applies the specified visitor to the node being visited, and recursively to
 * any nodes which act as containers
 */
BindingCollector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/BindingCollector.java)/**
 * Visitor to find bindings in a BTree or below a PDOMNode. Nested bindings are not visited.
 * @since 4.0
 */
PDOMCAnnotations (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCAnnotations.java)/**
 * A utility class for packing various annotations into bit fields.  This includes
 * storage class specifiers (auto, register, etc.), and CV qualifiers (const, volatile).
 */
PDOMCEnumeration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCEnumeration.java)/**
 * Enumerations in the database.
 */
PDOMCEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCEnumerator.java)/**
 * Binding for c enumerator in the index.
 */
PDOMCField (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCField.java)/**
 * @author Doug Schaefer
 *
 */
PDOMCFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCFunction.java)/**
 * @author Doug Schaefer
 */
PDOMCGlobalScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCGlobalScope.java)/**
 * Represents the global C index scope.
 */
PDOMCLinkage (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCLinkage.java)/**
 * Container for c bindings
 */
PDOMCLinkageFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCLinkageFactory.java)/**
 * @author Doug Schaefer
 */
PDOMCParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCParameter.java)/**
 * Binding for a function parameter in the index.
 */
PDOMCStructure (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCStructure.java)/**
 * @author Doug Schaefer
 */
PDOMCTypedef (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCTypedef.java)/**
 * Typedefs for c
 */
PDOMCVariable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/c/PDOMCVariable.java)/**
 * Database representation for c-variables
 */
CompoundRecordIterator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/CompoundRecordIterator.java)/**
 * A record iterator that is a concatenation of multiple record iterators.
 */
CPPFindBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/CPPFindBinding.java)/**
 * Look up bindings in BTree objects and IPDOMNode objects. This additionally
 * takes into account function/method parameters as well as template
 * specialization arguments for overloading.
 */
IPDOMCPPClassType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/IPDOMCPPClassType.java)/**
 * Interface that allows to implement a class-scope.
 */
IPDOMCPPEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/IPDOMCPPEnumerator.java)/**
 * Interface for a c++ enumerator stored in the index.
 */
IPDOMCPPEnumType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/IPDOMCPPEnumType.java)/**
 * Interface that allows to implement a class-scope.
 */
IPDOMCPPTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/IPDOMCPPTemplateParameter.java)/**
 * Interface for template parameters stored in the index.
 */
IPDOMCPPTemplateParameterOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/IPDOMCPPTemplateParameterOwner.java)/**
 * Common interface for PDOM template definitions.
 */
IPDOMPartialSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/IPDOMPartialSpecialization.java)/**
 * Interface for partial specializations in the PDOM.
 */
PDOMClassUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMClassUtil.java)/**
 * For implementation sharing between PDOMCPPClassType and PDOMCPPClassSpecialization
 */
PDOMCPPAliasTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPAliasTemplate.java)/**
 * PDOM binding for alias template.
 */
PDOMCPPAliasTemplateInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPAliasTemplateInstance.java)/**
 * PDOM binding for alias template instance.
 */
PDOMCPPAliasTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPAliasTemplateSpecialization.java)/**
 * PDOM binding for alias template specializations.
 */
PDOMCPPArgumentList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPArgumentList.java)/**
 * Collects methods to store an argument list in the database
 */
PDOMCPPBase (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPBase.java)/**
 * @author Doug Schaefer
 */
PDOMCPPBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPBinding.java)/**
 * Mirrors type-hierarchy from DOM interfaces
 */
PDOMCPPClassInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPClassInstance.java)/**
 * The result of instantiating a class template or an explicit specialization of a class template.
 * The {@link #isExplicitSpecialization()} method is used to distinguish between the two cases.
 */
PDOMCPPClassScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPClassScope.java)/**
 * Represents the class scope for a class stored in the index.
 * For safe use, all fields need to be final.
 */
PDOMCPPClassSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPClassSpecialization.java)/**
 * @author Bryan Wilkinson
 */
PDOMCPPClassSpecializationScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPClassSpecializationScope.java)/**
 * Reuses the specialization scope of the ast and marks it as an index scope.
 */
PDOMCPPClassTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPClassTemplate.java)/**
 * Implementation for class templates in the index, base class for partial specializations.
 */
PDOMCPPClassTemplatePartialSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPClassTemplatePartialSpecialization.java)/**
 * Partial specialization of a class template for the index.
 */
PDOMCPPClassTemplatePartialSpecializationSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPClassTemplatePartialSpecializationSpecialization.java)/**
 * A partial specialization further specialized in the context of a class specialization.
 */
PDOMCPPClassTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPClassTemplateSpecialization.java)/**
 * Specialization of a class template.
 */
PDOMCPPClassType (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPClassType.java)/**
 * @author Doug Schaefer
 */
PDOMCPPConstructorInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPConstructorInstance.java)/**
 * @author Bryan Wilkinson
 */
PDOMCPPConstructorSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPConstructorSpecialization.java)/**
 * @author Bryan Wilkinson
 */
PDOMCPPConstructorTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPConstructorTemplate.java)/**
 * @author Bryan Wilkinson
 */
PDOMCPPConstructorTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPConstructorTemplateSpecialization.java)/**
 * @author Bryan Wilkinson
 */
PDOMCPPDeferredVariableInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPDeferredVariableInstance.java)/**
 * PDOM implementation of ICPPDeferredVariableInstance.
 */
PDOMCPPEnumeration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPEnumeration.java)/**
 * Enumerations in the index.
 */
PDOMCPPEnumerationSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPEnumerationSpecialization.java)/**
 * Enumeration specialization in the index.
 */
PDOMCPPEnumerator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPEnumerator.java)/**
 * Binding for a c++ enumerator in the index.
 */
PDOMCPPEnumeratorSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPEnumeratorSpecialization.java)/**
 * Binding for a specialization of an enumerator in the index.
 */
PDOMCPPEnumScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPEnumScope.java)/**
 * Represents the enum scope for an enum stored in the index.
 * For safe use all fields need to be final.
 */
PDOMCPPField (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPField.java)/**
 * @author Doug Schaefer
 */
PDOMCPPFieldSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPFieldSpecialization.java)/**
 * Binding for a specialization of a field, used in the index.
 */
PDOMCPPFunction (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPFunction.java)/**
 * Binding for c++ functions in the index.
 */
PDOMCPPFunctionInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPFunctionInstance.java)/**
 * An instantiation or an explicit specialization of a function template.
 */
PDOMCPPFunctionSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPFunctionSpecialization.java)/**
 * Binding for function specialization in the index.
 */
PDOMCPPFunctionTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPFunctionTemplate.java)/**
 * Represents a function template, base class for method/constructor templates.
 */
PDOMCPPFunctionTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPFunctionTemplateSpecialization.java)/**
 * The specialization of a friend function template in the context of a class specialization.
 *
 * @author Bryan Wilkinson
 */
PDOMCPPGlobalScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPGlobalScope.java)/**
 * Represents the global C++ index scope.
 */
PDOMCPPLinkage (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPLinkage.java)/**
 * Container for c++-entities.
 */
PDOMCPPLinkageFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPLinkageFactory.java)/**
 * @author Doug Schaefer
 *
 */
PDOMCPPMemberBlock (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPMemberBlock.java)/**
 * PDOMCPPMemberBlock stores the members of a composite type and maps every member to
 * the corresponding visibility.
 */
PDOMCPPMethod (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPMethod.java)/**
 * Method.
 */
PDOMCPPMethodInstance (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPMethodInstance.java)/**
 * @author Bryan Wilkinson
 */
PDOMCPPMethodSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPMethodSpecialization.java)/**
 * Specialization of a method
 */
PDOMCPPMethodTemplate (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPMethodTemplate.java)/**
 * Template for a method.
 */
PDOMCPPMethodTemplateSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPMethodTemplateSpecialization.java)/**
 * @author Bryan Wilkinson
 */
PDOMCPPNamespace (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPNamespace.java)/**
 * Represents a namespace scope for a namespace stored in the index.
 */
PDOMCPPNamespaceAlias (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPNamespaceAlias.java)/**
 * Binding for namespace alias
 */
PDOMCPPParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPParameter.java)/**
 * Binding for a parameter of a c++ function in the index.
 */
PDOMCPPParameterSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPParameterSpecialization.java)/**
 * Binding for a specialization of a parameter in the index.
 */
PDOMCPPSpecialization (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPSpecialization.java)/**
 * Base class for specializations and instances of other bindings.
 */
PDOMCPPTemplateNonTypeParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPTemplateNonTypeParameter.java)/**
 * Binding for template non-type parameter in the index.
 */
PDOMCPPTemplateParameterMap (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPTemplateParameterMap.java)/**
 * Collects methods to store an argument list in the database
 */
PDOMCPPTemplateTemplateParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPTemplateTemplateParameter.java)/**
 * Implementation of template template parameters for the index.
 */
PDOMCPPTemplateTypeParameter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPTemplateTypeParameter.java)/**
 * Binding for template type parameters in the index.
 */
PDOMCPPTypedef (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPTypedef.java)/**
 * Typedefs for c++
 */
PDOMCPPTypeList (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPTypeList.java)/**
 * Stores a list of types
 */
PDOMCPPUsingDeclaration (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPUsingDeclaration.java)/**
 * Represents "using" declaration in PDOM. A single "using" declaration resolving to multiple
 * objects, e.g. functions with the same name but different signatures, is represented by multiple
 * chained PDOMCPPUsingDeclaration records.
 *
 * @see ICPPUsingDeclaration
 */
PDOMCPPUsingDirective (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPUsingDirective.java)/**
 * Stores using directives for global or namespace scope. Directives for block-scopes
 * are not persisted in the index.
 * For performance reasons the directives are not stored with their container. Rather
 * than that they are stored with the file, in which they are encountered.
 * When parsing a file the directives from headers that are skipped are collected.
 */
PDOMCPPVariable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMCPPVariable.java)/**
 * Binding for a C++ variable in the index, serves as a base class for fields.
 */
PDOMTemplateParameterArray (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/cpp/PDOMTemplateParameterArray.java)/**
 * Collects methods to store an argument list in the database.
 */
FindBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/FindBinding.java)/**
 * Look up bindings in BTree objects and IPDOMNode objects
 */
IInternalPDOMNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/IInternalPDOMNode.java)/**
 * Common, but internal methods for all pdom nodes.
 */
IPDOMAdaptedASTNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/IPDOMAdaptedASTNode.java)/**
 * Interface for AST nodes created by PDOMASTAdapter.
 */
IPDOMBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/IPDOMBinding.java)/**
 * Interface for bindings in the PDOM.
 */
IPDOMIterator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/IPDOMIterator.java)/**
 * A generic interface for iterating through lists that are stored in the PDOM.  The
 * difference between this interface and the standard one in java.util is that this
 * one can throw a CoreException from either method.  Also, this one does not provide
 * a way to remove elements.
 */
IPDOMLinkageFactory (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/IPDOMLinkageFactory.java)/**
 * @author Doug Schaefer
 *
 */
IPDOMMemberOwner (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/IPDOMMemberOwner.java)/**
 * Interface for PDOM entities that contain members. Note this is not a generic
 */
IPDOMOverloader (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/IPDOMOverloader.java)/**
 * Interface for any element in the PDOM that can have the same name as
 * a sibling, but differ in other ways (i.e. function parameters, template
 * arguments).
 *
 * @author Bryan Wilkinson
 */
IRecordIterator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/IRecordIterator.java)/**
 * An interface for iterating through lists that are stored in the PDOM without instantiating objects.
 */
MacroContainerCollector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/MacroContainerCollector.java)/**
 * Visitor to find macros in a BTree.
 * @since 4.0.2
 */
MacroContainerFinder (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/MacroContainerFinder.java)/**
 * Visitor to find a macro container in a BTree.
 */
MacroContainerPatternCollector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/MacroContainerPatternCollector.java)/**
 * Visitor to find macros in a BTree.
 * @since 4.0.2
 */
NamedNodeCollector (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/NamedNodeCollector.java)/**
 * Visitor to find named nodes in a BTree or below a PDOMNode. Nested nodes are not visited.
 * @since 4.0
 */
PDOMASTFileLocation (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMASTFileLocation.java)/**
 * Implementation of IASTFileLocation for use by PDOM types.
 * This implementation just stores the fields which need to be computed by the caller
 * at constructor time.
 */
PDOMBinding (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMBinding.java)/**
 * Base class for bindings in the PDOM.
 */
PDOMFile (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMFile.java)/**
 * Represents a file containing names.
 *
 * @author Doug Schaefer
 */
PDOMFragmentBindingComparator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMFragmentBindingComparator.java)/**
 * {@link IIndexFragmentBindingComparator} suitable for comparing two PDOMBindings
 *
 */
PDOMGlobalScope (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMGlobalScope.java)/**
 * Base class for C and C++ global index scopes.
 */
PDOMInclude (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMInclude.java)/**
 * @author Doug Schaefer
 */
PDOMLinkage (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMLinkage.java)/**
 * The top-level node in the PDOM storage format.  A linkage is a collection of nodes
 * that can be linked with references.  Several linkages can be created for an input AST.
 *
 * TODO Move this to a public interface and discuss the extension point (that already exists).
 */
PDOMMacro (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacro.java)/**
 * Represents macro definitions. They are stored with the file and with a PDOMMacroContainer.
 * The latter also contains the references to all macros with the same name.
 */
PDOMMacroContainer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacroContainer.java)/**
 * A container collecting definitions and references for macros.
 * @since 5.0
 */
PDOMMacroReferenceName (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacroReferenceName.java)/**
 * Represents declarations, definitions and references to bindings, except for macros.
 */
NameInBindingRecordIterator (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMName.java)/**
	 * Iterator over PDOMName records in a binding.
	 */
PDOMNamedNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMNamedNode.java)/**
 * @author Doug Schaefer
 */
PDOMNode (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMNode.java)/**
 * This is a basic node in the PDOM database.
 * PDOM nodes form a multi-root tree with linkages being the roots.
 * This class managed the parent pointer.
 */
PDOMProjectIndexLocationConverter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMProjectIndexLocationConverter.java)/**
 * The standard location converter used by the per-project PDOM
 */
TypeMarshalBuffer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/TypeMarshalBuffer.java)/**
 * For marshalling types to byte arrays.
 */
CLIUtil (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/export/CLIUtil.java)/**
 * Helper methods for command-line options
 * <br>
 * <b>Non-API</b> Should a more suitable way for manipulating command-line arguments become usable
 * in the future we will switch to that.
 */
GeneratePDOM (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/export/GeneratePDOM.java)/**
 * An ISafeRunnable which
 * <ul>
 * <li>Creates a project for export
 * <li>Exports the PDOM
 * <li>Writes new properties to the PDOM
 * <ul>
 */
GeneratePDOMApplication (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/export/GeneratePDOMApplication.java)/**
 * An eclipse application for generating PDOM's without starting the Workbench
 */
AbstractPDOMIndexer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/AbstractPDOMIndexer.java)/**
 * Abstract base class for all indexers.
 */
FileExistsCache (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/FileExistsCache.java)/**
 * A cache for checking whether a file exists. The cache shall be used for a limited amount of time,
 * only (e.g. one indexer task). It uses as much memory as it needs. To protect against OutOfMemory
 * situations, a soft reference is used.
 * @since 5.0
 */
Definition (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/IndexerASTVisitor.java)/**
	 * Represents a definition of a class or function.
	 * IndexerASTVisitor builds a tree of these definitions, used for tracking enclosing
	 * definitions of names.
	 */
IndexerPreferences (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/IndexerPreferences.java)/**
 * Access to indexer properties.
 * @since 4.0
 */
PDOMFastIndexer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMFastIndexer.java)/**
 * Configures the abstract indexer to return tasks suitable for fast indexing.
 */
PDOMFastIndexerTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMFastIndexerTask.java)/**
 * Configures the abstract indexer to return tasks suitable for fast indexing.
 */
PDOMIndexerTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMIndexerTask.java)/**
 * Configures the abstract indexer task suitable for indexing projects.
 */
PDOMNullIndexer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMNullIndexer.java)/**
 * Configures the abstract indexer to do nothing.
 */
PDOMRebuildTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMRebuildTask.java)/**
 * A task for rebuilding an index, works for all indexers.
 */
PDOMUpdateTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMUpdateTask.java)/**
 * A task for updating an index, suitable for all indexers.
 */
PotentialTranslationUnit (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PotentialTranslationUnit.java)/**
 * Used for modified files that are not below a source root. In case such a file
 * is part of the index it needs to be updated, otherwise it shall be ignored.
 */
ProjectIndexerIncludeResolutionHeuristics (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/ProjectIndexerIncludeResolutionHeuristics.java)/**
 * Heuristics for picking up includes from the project
 */
ProjectIndexerInputAdapter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/ProjectIndexerInputAdapter.java)/**
 * Provides information about translation-units.
 * @since 5.0
 */
TriggerNotificationTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TriggerNotificationTask.java)/**
 * Used to trigger a change notification when a pdom is loaded.
 * In this situation the pdom itself does not generate a notification.
 */
IndexerInputAdapter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/IndexerInputAdapter.java)/**
 * Abstract class to obtain information about the input to the indexer. For the
 * project based indexers the input are translation units, for the stand-alone
 * indexer they are file-paths represented as strings.
 * @since 5.0
 */
IPDOM (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/IPDOM.java)/**
 * Interface for the IndexView to bridge between PDOM and PDOMProxy
 */
JobChangeListener (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/JobChangeListener.java)/**
 * Notifies clients of the indexer state.
 */
LanguageMappingChangeListener (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/LanguageMappingChangeListener.java)/**
 * @author crecoskie
 *
 *	This class handles changes in language mappings for the PDOM by reindexing the appropriate projects.
 *  This class is a a work in progress and will be changed soon to be smarter about the resources it reindexes.
 */
LanguageSettingsChangeListener (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/LanguageSettingsChangeListener.java)/**
 *	This class handles changes in language settings for the PDOM.
 */
NotifyCModelManagerTask (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/NotifyCModelManagerTask.java)/**
 * Task to notify the CModel manager of changes to the content types.
 */
PDOM (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOM.java)/**
 * Database for storing semantic information for one project.
 */
PDOMASTProcessorDesc (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMASTProcessorDesc.java)/**
 * Internal container for extensions of org.eclipse.cdt.core.PDOMASTProcessor.  The implementation
 * of the processor is instantiated only after checking the enablement expression (if present) for
 * the given AST translation unit. This avoids activating the contributing plugin until it is
 * actually needed.
 */
PDOMASTProcessorManager (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMASTProcessorManager.java)/**
 * An internal manager for the org.eclipse.cdt.core.PDOMASTProcessor extension-point.
 *
 * @see #getProcessors(IASTTranslationUnit)
 */
ProgressUpdateJob (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMIndexerJob.java)/**
	 * Job updating the progress monitor of the indexer job.
	 */
PDOMIndexerJob (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMIndexerJob.java)/**
 * Job running multiple indexer tasks.
 */
PDOMManager (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMManager.java)/**
 * Manages PDOM updates and events associated with them. Provides methods for index access.
 */
PDOMProxy (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMProxy.java)/**
 * The PDOMProxy is returned by the PDOMManager before the indexer kicks in. Also and more
 * importantly it is returned when the indexer has been shut down (clients may not be aware
 * of this yet). Doing that prevents the creation of empty PDOMs for deleted projects.
 */
PDOMSetupJob (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMSetupJob.java)/**
 * Job without rule to setup the indexer.
 */
PDOMWriter (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java)/**
 * Abstract class to write information from AST.
 * @since 4.0
 */
PDOMTag (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/tag/PDOMTag.java)/**
 * A container for storing tags in the PDOM. The storage format is as follows:
 *
 * <pre>
 * PDOMTag
 * {
 *     u4 node_record; # pointer to the node that is being tagged
 *     u4 tagger_id;   # pointer to the string that identifies the tagger that
 *                     # created this tag
 *     u4 data_len;    # number of bytes stored in this tag's payload
 *     u1[];           # a buffer for storing the tag's payload
 * };
 * </pre>
 *
 * Each tag points to the contributing tagger id, the record that is being tagged. Finally, it stores a buffer
 * for the tag's payload. The buffer is read and written by the contributor of the tag.
 */
PDOMTaggable (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/tag/PDOMTaggable.java)/**
 * A container for things that can be tagged and then stored in the index database.
 */
PDOMTagIndex (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/tag/PDOMTagIndex.java)/**
 * Not thread-safe.
 */
PDOMTagSynchronizer (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/tag/PDOMTagSynchronizer.java)/**
 * An implementation utility for synchronizing the tags between source and destination nodes.
 */
WaitForRefreshJobs (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/WaitForRefreshJobs.java)/**
 * Postpones indexer setup until there are no running refresh jobs.
 */
YieldableIndexLock (/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/YieldableIndexLock.java)/**
 * Write lock on the index that can be yielded temporarily to unblock threads that need
 * read access to the index.
 * @since 5.2
 */
AbstractExecutableExtensionBase (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/AbstractExecutableExtensionBase.java)/**
 * Helper abstract class serving as a base for creating a frame of executable class
 * defined as an extension in plugin.xml.
 *
 * @since 5.4
 *
 */
CBuildConfiguration (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/CBuildConfiguration.java)/**
 * Root class for CDT build configurations. Provides access to the build
 * settings for subclasses.
 *
 * @since 6.0
 */
CBuilder (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/CBuilder.java)/**
 * @since 6.0
 */
ErrorBuildConfiguration (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ErrorBuildConfiguration.java)/**
 * A Build configuration that simply spits out an error message on the console at build and clean time.
 * Used to signify that we're not sure how to build this project in it's current state.
 *
 * TODO leaving most of the implementation as default. I don't think any of these methods get called when
 * we're in this error state but we'll keep an eye open for NPE's and bad behavior.
 *
 * @since 6.9
 */
ICBuildCommandLauncher (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ICBuildCommandLauncher.java)/**
 * @since 6.5
 */
ICBuildConfiguration (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ICBuildConfiguration.java)/**
 * This is the root interface for "new style" CDT build configurations. Adapting
 * IBuildConfiguration to this interface will get you one of these. From here,
 * adapt to the specific interface that you need and the configuration will
 * provide one.
 *
 * @since 6.0
 */
ICBuildConfiguration2 (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ICBuildConfiguration2.java)/**
 * @since 6.5
 */
ICBuildConfigurationManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ICBuildConfigurationManager.java)/**
 * The OSGi service that manages the mapping from platform build configuration
 * to CDT build configuration.
 *
 * @since 6.0
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICBuildConfigurationManager2 (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ICBuildConfigurationManager2.java)/**
 * @since 6.5
 */
ICBuildConfigurationProvider (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ICBuildConfigurationProvider.java)/**
 * A CBuildConfigurationProvider provides C build configurations.
 *
 * @since 6.0
 */
IToolChain (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/IToolChain.java)/**
 * Toolchains are a collection of tools that take the source code and converts
 * it into an executable system.
 *
 * @since 6.0
 */
IToolChain2 (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/IToolChain2.java)/**
 * @since 6.5
 * @author jjohnstn
 *
 */
IToolChainManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/IToolChainManager.java)/**
 * The global toolchain manager. Accessed as an OSGi service.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 6.0
 */
IToolChainProvider (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/IToolChainProvider.java)/**
 * A provider of toolchains. Registered with the toolChainProvider extension
 * point.
 *
 * @since 6.0
 */
IUserToolChainProvider (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/IUserToolChainProvider.java)/**
 * A toolchain provider that is managed by the user. The user can manually add
 * and remove toolchains.
 *
 * It is the responsibility of the provider to manage persistence and to
 * populate the toolchains with the toolchain manager.
 *
 * @since 6.4
 */
ScannerInfoCache (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ScannerInfoCache.java)/**
 * Scanner info for a given build configuration.
 *
 * @since 6.1
 */
StandardBuildConfiguration (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/StandardBuildConfiguration.java)/**
 * A Standard Build Configuration that simply calls a specified command for
 * build and clean. By default, it calls 'make all' and 'make clean'.
 *
 * @since 6.2
 */
CConventions (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CConventions.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CCorePlugin (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CCorePlugin.java)/**
 * CCorePlugin is the life-cycle owner of the core plug-in, and starting point
 * for access to many core APIs.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CCorePreferenceConstants (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CCorePreferenceConstants.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CCProjectNature (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CCProjectNature.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CDescriptorEvent (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CDescriptorEvent.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @deprecated register {@link ICProjectDescriptionListener} for {@link CProjectDescriptionEvent}
 */
CdtVariable (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/cdtvariables/CdtVariable.java)/**
 * This is the trivial implementation of the IBuildMacro used internaly by the MBS
 *
 * @since 3.0
 */
CdtVariableException (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/cdtvariables/CdtVariableException.java)/**
 * This exception is thrown in the case of some build macros-related operation failure
 * The exception typically contains one or more IBuildMacroStatus statuses
 *
 * @since 3.0
 */
CdtVariableStatus (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/cdtvariables/CdtVariableStatus.java)/**
 * This class implements the IBuildMacroStatus interface
 *
 * @since 3.0
 */
ICdtVariable (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/cdtvariables/ICdtVariable.java)/**
 * This interface represents the given build macro
 * Clients may implement or extend this interface.

 * @since 3.0
 */
ICdtVariableManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/cdtvariables/ICdtVariableManager.java)/**
 *
 * @since 3.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICdtVariableStatus (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/cdtvariables/ICdtVariableStatus.java)/**
 * This interface represents the status of a build macro operation
 *
 * @since 3.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IStorableCdtVariables (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/cdtvariables/IStorableCdtVariables.java)/**
 * Public interface to access StorableCdtVariables class methods
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IUserVarSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/cdtvariables/IUserVarSupplier.java)/**
 * Public interface to access to UserVarSupplier class methods
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
CommandLauncher (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CommandLauncher.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
CommandLauncherManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CommandLauncherManager.java)/**
 * @since 6.4
 */
ConsoleOutputStream (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ConsoleOutputStream.java)/**
 * Output stream which storing the console output
 *
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CProjectNature (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CProjectNature.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CDOM (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/dom/CDOM.java)/**
 * @author jcamelon
 *
 * @deprecated This class does not take into account language mappings.  Use
 * {@link org.eclipse.cdt.core.model.ILanguage} instead.
 * @noreference This class is not intended to be referenced by clients.
 */
UnsupportedDialectException (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/dom/IASTServiceProvider.java)/**
	 * This exception is thrown when there is not a service provider that can handle
	 * the request due to dialect mis-match.
	 */
IASTServiceProvider (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/dom/IASTServiceProvider.java)/**
 * @author jcamelon
 * @deprecated Use methods provided by {@link ITranslationUnit} or {@link ILanguage}.
 * @noreference This interface is not intended to be referenced by clients.
 */
EFSExtensionProvider (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/EFSExtensionProvider.java)/**
 * Abstract class providing the basis for supplementary support classes that can extract meaningful
 * information from and provide useful operations on EFS file-systems. This allows for operations that can
 * operate on virtual EFS file-systems (where IFileStores are just links to other IFileStores), or that operate
 * on the physical file backed by an IFileStore, without having to know the implementation details of a given
 * EFS file-system.
 *
 * Provides a default implementation that assumes that URIs for the given file-system map directly to resources
 * in the physical file-system, and that the path component of the URI is a direct representation of the
 * absolute path to the file in the physical file-system.
 *
 * Clients wishing to support a file-system with different behavior should extend this class and override its
 * methods where appropriate.
 *
 * Clients should not typically call methods on this class or its descendants directly. Instead, they should
 * call the appropriate method in FileSystemUtilityManager so that said manager can properly route calls to
 * the proper utility, depending on the file-system.
 *
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added to CDT 7.0 as part of a work in progress.
 * There is no guarantee that this API will work or that it will remain the same. Please do not use this API without
 * consulting with the CDT team.
 *
 * @author crecoskie
 * @since 5.2
 *
 */
EnvironmentVariable (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/envvar/EnvironmentVariable.java)/**
 * A trivial implementation of {@link IEnvironmentVariable}
 *
 * @since 3.0
 */
IContributedEnvironment (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/envvar/IContributedEnvironment.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IEnvironmentVariable (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/envvar/IEnvironmentVariable.java)/**
 * this interface represents the given environment variable
 * @since 3.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IEnvironmentVariableManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/envvar/IEnvironmentVariableManager.java)/**
 *
 * this interface represent the environment variable provider - the main entry-point
 * to be used for querying the build environment
 *
 * @since 3.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ErrorParserManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ErrorParserManager.java)/**
 * The purpose of ErrorParserManager is to delegate the work of error parsing
 * build output to {@link IErrorParser}s, assist in finding {@link IResource}s, and
 * help create appropriate error/warning/info markers to be displayed
 * by the Problems view.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
AbstractErrorParser (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/AbstractErrorParser.java)/**
 * Abstract Error Parser that implements simple line processing using patterns array
 * @since 5.1
 */
ErrorParserNamedWrapper (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/ErrorParserNamedWrapper.java)/**
 * Class to wrap any {@link IErrorParser} to {@link IErrorParserNamed}.
 * @since 5.2
 */
ErrorPattern (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/ErrorPattern.java)/**
 * Error Pattern - used by Error Parser to convert build output to problem markers
 * @since 5.1
 *
 * Clients may extend this class.
 */
FixitErrorParser (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/FixitErrorParser.java)/**
 * @since 6.3
 */
RegexErrorParser (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/RegexErrorParser.java)/**
 * {@code RegexerrorParser} is an error parser designed to use regular expressions in order
 * to parse build output to produce Errors, Warnings or Infos in Problems View.
 *
 * Clients may extend this class. As it implements {@link Cloneable} interface those clients
 * must implement {@link Object#clone} and {@link Object#equals} methods to avoid slicing.
 * Hint to implementers: if you want to extend it with customized {@link RegexErrorPattern}
 * it is possible to inject it in {@link #addPattern(RegexErrorPattern)}.
 *
 * @see IErrorParser
 * @since 5.2
 */
RegexErrorPattern (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/RegexErrorPattern.java)/**
 * <p>RegexErrorPattern specifies a regular expression and rules how to create markers for
 * Problems View. It is used by {@link RegexErrorParser} to process build output.
 *
 * <p>Regex pattern used by this class is Java regular expression and defines capturing groups.
 * Those capturing groups are used in file, line, description expressions to get the values.
 * <p>For example: pattern <b>"(../../..) (.*):(\d*): (Error:.*)"</b> could go along with
 * file-expression <b>"$2"</b>, line-expression <b>"$3"</b> and description-expression <b>"$1 $4"</b>.
 *
 * <p>Note: variable name is being stored in marker tag. However currently it is not being used.
 *
 * <p>Severity could be one of:
 *        <br> - {@link IMarkerGenerator#SEVERITY_INFO},
 *        <br> - {@link IMarkerGenerator#SEVERITY_WARNING},
 *        <br> - {@link IMarkerGenerator#SEVERITY_ERROR_RESOURCE},
 *        <br> - {@link IMarkerGenerator#SEVERITY_ERROR_BUILD}
 *        <br> - {@link RegexErrorPattern#SEVERITY_SKIP}
 * <br/>{@code SEVERITY_SKIP} means that output line is checked to match the pattern
 * but won't be parsed to create a marker. It is useful with conjunction with
 * {@code eatProcessedLine=true} to filter out certain lines.
 *
 * <p>{@code eatProcessedLine} specifies if the current output line is being passed
 * to the rest of patterns for further processing or consumed by the pattern.
 *
 * <p>Clients may extend this class. As it implements {@link Cloneable} interface those clients
 * must implement {@link Object#clone} and {@link Object#equals} methods to avoid slicing.
 * @since 5.2
 */
CodeFormatter (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/formatter/CodeFormatter.java)/**
 * Specification for a generic source code formatter.
 *
 * @since 3.0
 */
CodeFormatterApplication (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/formatter/CodeFormatterApplication.java)/**
 * Implements an Eclipse Application for org.eclipse.cdt.core.CodeFormatter.
 *
 * <p>On MacOS, when invoked using the Eclipse executable, the "user.dir" property is set to the folder
 * in which the eclipse.ini file is located. This makes it harder to use relative paths to point to the
 * files to be formatted or the configuration file to use to set the code formatter's options.</p>
 *
 * <p>There are a couple improvements that could be made: 1. Make a list of all the
 * files first so that a file does not get formatted twice. 2. Use a text based
 * progress monitor for output.</p>
 *
 * @author Ben Konrath <bkonrath@redhat.com>
 * @since 6.4
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @noextend This class is not intended to be subclassed by clients.
 */
DefaultCodeFormatterConstants (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/formatter/DefaultCodeFormatterConstants.java)/**
 * Constants used to set up the options of the code formatter.
 *
 * @since 4.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DefaultCodeFormatterOptions (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/formatter/DefaultCodeFormatterOptions.java)/**
 * Code formatter options.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 5.4
 */
IndentManipulation (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/formatter/IndentManipulation.java)/**
 * Helper class to provide String manipulation functions dealing with indentations.
 *
 * @since 5.0
 */
Messages (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/formatter/Messages.java)/**
 * @since 6.4
 */
IAddress (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IAddress.java)/**
 * Represents C/C++ address in CDT. All implementors of this interface should be
 * immutable, i.e. all methods should not modify objects, they should return
 * new object.
 *
 * Please see Addr32 and Addr64 classes to see how this interface should
 * be extended
 */
IAddressFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IAddressFactory.java)/**
 * This inteface serves as an address factory. If you need to
 * implement your own addresses, you should extend this.
 *
 * Please see Addr32Factory and Addr64Factory to see how it can be implemented.
 */
IAddressFactory2 (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IAddressFactory2.java)/**
 * An extension of IAddressFactory that supports throwing an exception rather
 * than truncating the initialization value if the value is outside the range
 * supported by the factory.
 */
IBinaryFile (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IBinaryParser.java)/**
	 * Represents a binary file for example an ELF executable.
	 */
IBinaryArchive (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IBinaryParser.java)/**
	 * Represents an archive.
	 */
IBinaryObject (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IBinaryParser.java)/**
	 * Represents a binary, for example an ELF excutable.
	 */
IBinaryExecutable (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IBinaryParser.java)/**
	 * An executable.
	 */
IBinaryShared (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IBinaryParser.java)/**
	 * A DLL.
	 */
IBinaryParser (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IBinaryParser.java)/**
 */
ICDescriptor (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICDescriptor.java)/**
 * @deprecated as this API is not configuration aware. Replaced by
 * {@link ICConfigurationDescription} which can be fetched with
 * {@link ICProjectDescription#getConfigurations()}
 * @noreference This interface is not intended to be referenced by clients.
 */
ICDescriptorListener (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICDescriptorListener.java)/**
 * @deprecated register {@link ICProjectDescriptionListener} for {@link CProjectDescriptionEvent}
 * @noreference This interface is not intended to be referenced by clients.
 */
ICDescriptorManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICDescriptorManager.java)/**
 * @deprecated replace with {@link ICProjectDescriptionManager} & {@link ICProjectDescription}
 * @noreference This interface is not intended to be referenced by clients.
 */
ICDescriptorOperation (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICDescriptorOperation.java)/**
 * @deprecated
 * @noreference This interface is not intended to be referenced by clients.
 */
ICExtension (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICExtension.java)/**
 * Represents an executable extension in the C model hierarchy.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICExtensionDescriptor (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICExtensionDescriptor.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICExtensionReference (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICExtensionReference.java)/**
 * This is reference to {@link ICExtension} elements as stored
 * in the Project Description.
 *
 * This has no notion of the ICConfigurationDescription,
 * for that see {@link ICConfigExtensionReference}
 *
 * @see ICConfigExtensionReference
 * @see ICExtension
 * @see ICDescriptor
 *
 * @deprecated replaced with {@link ICConfigExtensionReference} obtained from an {@link ICConfigurationDescription}
 * @noreference This interface is not intended to be referenced by clients.
 */
ICLogConstants (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICLogConstants.java)/**
 * @author bgheorgh
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICommandLauncher (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICommandLauncher.java)/**
 * An interface for launchers of external commands.
 *
 * @since 5.1
 */
ICommandLauncherFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICommandLauncherFactory.java)/**
 * @since 6.4
 */
ICommandLauncherFactory2 (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICommandLauncherFactory2.java)/**
 * @since 6.5
 */
ICompileOptionsFinder (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICompileOptionsFinder.java)/**
 * A class that can find compiler options for a given file name.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.7
 */
IConsoleParser (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IConsoleParser.java)/**
 * A basic interface for console parsers
 */
IConsoleParser2 (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IConsoleParser2.java)/**
 * @since 6.5
 *
 */
ICOwner (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICOwner.java)/**
 * @deprecated
 * @noreference This interface is not intended to be referenced by clients.
 */
ICOwnerInfo (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ICOwnerInfo.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IErrorParser (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IErrorParser.java)/**
 * Interface for error parser to parse build output to produce Errors, Warnings or Infos in Problems View.
 */
IErrorParser2 (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IErrorParser2.java)/**
 * Interface to provide flexibility for error parsers to parse unprocessed build output
 *
 * @since 5.1
 */
IErrorParser3 (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IErrorParser3.java)/**
 * @since 5.4
 */
IErrorParserNamed (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IErrorParserNamed.java)/**
 * Extension of IErrorParser interface to attach id and names to an error parser.
 * Clients must implement {@link Object#clone} and {@link Object#equals} methods to avoid slicing.
 * @since 5.2
 */
IMarkerGenerator (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IMarkerGenerator.java)/**
 * @author sam.robb
 * @noextend This interface is not intended to be extended by clients.
 */
IPositionTrackerManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IPositionTrackerManager.java)/**
 * An interface to manage the position tracking. It allows for mapping character
 * offsets from a file previously stored on disk to the offset in the current document
 * for the file.
 * @since 4.0
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProblemMarkerFilter (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/IProblemMarkerFilter.java)/**
 * The purpose of IProblemMarkerFilter is to provide filtering function for problem markers.
 * ProblemMarkerFilter extension point are required to implements this interface.
 *
 * @since 5.6
 */
ISourceFinder (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ISourceFinder.java)/**
 * This interface is available for a {@link Binary} via the adapter mechanism. It is used to translate the
 * file specification of a source file that was used to produce the executable to its local counterpart. In
 * other words, the debug information in the binary tells us what source files where involved in building it.
 * Such a file specification may be a simple file name, a relative path, or an absolute path that might be
 * invalid on the local machine (the executable may have been built on another machine). In all cases, the
 * file is found on the local machine by using source locators (see ISourceLocator). ISourceFinder is a front
 * end to that search capability.
 *
 * <p>
 * CDT has:
 * <ul>
 * <li>A global (common) source locator. Its containers are defined via Window > Preferences > C/C++ > Debug >
 * Source Lookup Path
 * <li>Launch configuration source locators. The containers of such a locator are defined via the 'Source' tab
 * in a CDT launch configuration. The common source containers are automatically added to this locator.
 * <li>Launch source locators. Typically, a launch's locator is the one defined in the launch configuration
 * that spawned the launch, but technically, they could be different. The ILaunch API allows any source
 * locator to be associated with a launch.
 * </ul>
 *
 * <p>
 * So, when trying to translate a source file specification in the debug information to a local file, there
 * are a variety of locators that need to be considered. An ISourceFinder shields client code from having to
 * worry about those details. A client simply wants to find a file locally.
 *
 * <p>
 * This interface provides two choices for searching. One caters to logic involved in actively debugging a
 * binary (e.g., a breakpoint is hit). The other is for use when there is no debug-session context (double
 * clicking on a child file element of a Binary object in the Projects view). The former will search using
 * only the locator associated with the ILaunch. The latter will use the locator of any relevant launch or
 * launch configuration. In all cases, the global locator is consulted if no other locator has converted the
 * file.
 *
 * <p>
 * A new instance is created every time a Binary object is queried for this interface. Clients must call
 * {@link #dispose()} when it is done with the object.
 *
 * @since 5.2
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ISymbolReader (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ISymbolReader.java)/**
 * A reader that's able to decipher debug symbol formats.
 *
 * This initial version only returns a list of source files.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
CodeReaderCache (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/parser/CodeReaderCache.java)/**
 * This is the CodeReaderBuffer used to cache CodeReaders for the ICodeReaderFactory
 * when working with saved copies (primarily SavedCodeReaderFactory).
 *
 * @author dsteffle
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ParserUtil (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/parser/ParserUtil.java)/**
 * @author jcamelon
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ProblemMarkerInfo (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ProblemMarkerInfo.java)/**
 * {@code ProblemMarkerInfo} is an object used to pass error properties to {@link ErrorParserManager}.
 * The information stored in this object will later be used to create an {@link IMarker} by {@link ACBuilder}
 * @see ErrorParserManager#addProblemMarker(ProblemMarkerInfo)
 * @see ErrorParserManager#generateMarker(IResource, int, String, int, String)
 * @see ErrorParserManager#generateExternalMarker(IResource, int, String, int, String, IPath)
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
EFSFileStorage (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/EFSFileStorage.java)/**
 * A storage object which is backed by an EFS resource.
 *
 * @author crecoskie
 * @since 5.0
 *
 */
ExclusionInstance (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ExclusionInstance.java)/**
 * Represents a particular instance of an exclusion. E.g., if an exclusion allowed for the exclusion of a list
 * individual resources, there would be one exclusion instance per resource. Each exclusion instance is
 * presented in the user interface as a child of the exclusion.
 *
 * Clients may extend this class to provide custom implementations for their exclusion type.
 *
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part of a work in progress. There
 * is no guarantee that this API will work or that it will remain the same. Please do not use this API without
 * consulting with the CDT team.
 *
 * @author crecoskie
 * @since 5.3
 *
 */
FileStorage (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/FileStorage.java)/**
 *
 * @see IStorage
 */
IConsole (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/IConsole.java)/**
 * CDT console adaptor interface providing output streams.
 * The adaptor provides the means of access to UI plugin console streams.
 */
IPathEntryStore (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/IPathEntryStore.java)/**
 * IPathEntryStore
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IPathEntryStoreListener (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/IPathEntryStoreListener.java)/**
 * IPathEntryStoreListener
 */
IPathEntryVariableChangeListener (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/IPathEntryVariableChangeListener.java)/**
 * An interface to be implemented by objects interested in path variable
 * creation, removal and value change events.
 *
 * <p>Clients may implement this interface.</p>
 *
 * @since 3.0
 */
IPathEntryVariableManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/IPathEntryVariableManager.java)/**
 * Manages a collection of variables
 * @since 3.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
PathEntryStoreChangedEvent (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/PathEntryStoreChangedEvent.java)/**
 * PathEntryChangedEvent
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PathEntryVariableChangeEvent (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/PathEntryVariableChangeEvent.java)/**
 * Describes a change in path variable.
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
RefreshExclusion (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/RefreshExclusion.java)/**
 * A RefreshExclusion represents a rule for excluding certain resources from being refreshed.
 *
 * Clients should extend this class to provide support for their own custom exclusions.
 *
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part of a work in progress. There
 * is no guarantee that this API will work or that it will remain the same. Please do not use this API without
 * consulting with the CDT team.
 *
 * @author crecoskie
 * @since 5.3
 *
 */
RefreshExclusionFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/RefreshExclusionFactory.java)/**
 * Responsible for manufacturing a given type of RefreshExclusion. Called by the RefreshScopeManager when
 * loading persisted settings to instantiate exclusion objects.
 *
 * @author crecoskie
 * @since 5.3
 *
 */
RefreshScopeManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/RefreshScopeManager.java)/**
 * The RefreshScopeManager provides access to settings pertaining to refreshes performed during a build. Each
 * project may have a set of resources associated with it that are the set of resources to be refreshed. An
 * exclusion mechanism exists that allows for one to specify arbitrarily complicated, nested logic that
 * determines whether or not a given resource is refreshed according to previously specified rules.
 *
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part of a work in progress. There
 * is no guarantee that this API will work or that it will remain the same. Please do not use this API without
 * consulting with the CDT team.
 *
 * @author crecoskie
 * @since 5.3
 *
 */
ResourcesUtil (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ResourcesUtil.java)/**
 * A collection of utility methods related to resources.
 *
 * @since 5.3
 */
ScannerInfo (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ScannerInfo.java)/**
 * #@noextend This class is not intended to be subclassed by clients.
 * #@noinstantiate This class is not intended to be instantiated by clients. Note
 *     that protected constructor won't allow to instantiate this class
 *     outside the package anyway, so it is not really API.
 *
 * @deprecated Since CDT 4.0 not used for the "new style" projects.
 */
ScannerProvider (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ScannerProvider.java)/**
 * Provides scanner information from {@link PathEntryManager}.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 *
 * @deprecated Since CDT 4.0 replaced by {@link ScannerInfoProviderProxy}. Still
 *     used as a default for projects created by earlier CDT versions.
 */
ToolFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/ToolFactory.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BuildRunnerHelper (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/BuildRunnerHelper.java)/**
 * Helper class attempting to unify interactions with build console,
 * such as style of console output and handling of console output parsers.
 *
 * As of CDT 8.1, this class is experimental, internal and work in progress.
 * <strong>API is unstable and subject to change.</strong>
 */
SerializingJob (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CConfigBasedDescriptor.java)/**
	 * The Job the actually does the data applying (by getting and setting the current project description)
	 * saveProjectData never does the saving itself, rather it schedules this job to run.
	 * During the setCProjectDescriptionOperation the changes in this ICDescriptor are synchronized into the
	 * project description being persisted.
	 */
CConfigBaseDescriptorExtensionReference (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CConfigBasedDescriptor.java)/**
	 * Concrete implementation of ICExtensionReference based on ICConfigExtensionReference elements.
	 * In the old world ICExtensions had no notion of which configuration they belong to.
	 * As a result all state that would have be persisted at the ICExtension level is saved to all
	 * the configurations in the project
	 *
	 * This is a lightweight proxy onto ICConfigExtensionReference and doesn't hold any state
	 * itself (though alters the isDirty state and descriptor event of the containing Descriptor).
	 */
CConfigBasedDescriptor (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CConfigBasedDescriptor.java)/**
 * Concrete ICDescriptor for a Project.
 *
 * There is only one of these per project.  Settings are serialized as storage elements
 * as children of the root of the project description. Methods which change or access data
 * on the descriptor use the Eclipse ILock 'fLock' on the given descriptor instance.
 *
 * Structural changes made to extension elements are persisted immediately to
 * the project description.
 *
 * Changes made to child storage elements are serialized to the project description
 * with saveProjectData(...) and the serializingJob.
 *
 * Users should consider using {@link ICDescriptorManager#runDescriptorOperation} for threadsafe
 * access to the project's configuration.  However failing this does provide some basic
 * concurrency on {@link #getProjectStorageElement(String)} by wrapping the returned
 * ICStorageElement in an {@link SynchronizedStorageElement}.  Note that this is best
 * effort, so concurrent structural changes to the tree (such as one thread removing
 * an element from a tree while another is writing to it) may result in inconsistent data
 * stored.
 *
 */
CConfigBasedDescriptorManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CConfigBasedDescriptorManager.java)/**
 * CConfigBasedDescriptorManager
 *
 * ICDescriptor settings are set directly within the project description.
 *
 * The ICDescriptorManager can be used to fetch the current ICDescriptor
 * for the project get and set settings in this module in a safe manner.
 *
 * This thread delegates operations to the particular CConfigBasedDescriptor
 * being operated upon. Locking is performed per descriptor.  This manager
 * provides additional concurrency above any beyond that provided by
 * {@link CoreModel#getProjectDescription(IProject)} as each project only
 * has one ICDescriptor live at any time. This prevents concurrent modifications
 * from overwriting changes made in other threads.
 *
 * Usage:
 * 	  Users should consider making changes to project ICDescriptors using an {@link ICDescriptorOperation}
 * with the {@link #runDescriptorOperation} method.
 *    The ICDescriptor's returned for {@link #getDescriptor} are shared between multiple threads,
 * but they are synchronized.  This is safe as long as structural changes aren't made to the same
 * project storage element from multiple threads.
 *
 * @see ICDescriptor for more
 */
CContentTypes (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CContentTypes.java)/**
 * Handles the access to the content types of the platform.
 * @author markus.schorn@windriver.com
 */
CdtMacroSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/CdtMacroSupplier.java)/**
 * This supplier is used to suply MBS-predefined macros
 *
 * @since 3.0
 */
CdtVariableManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/CdtVariableManager.java)/**
 * The default IBuildMacroProvider implementation
 * @since 3.0
 */
CoreVariableSubstitutor (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/CoreVariableSubstitutor.java)/**
 * This substituter resolves all macro references
 *
 * @see org.eclipse.cdt.utils.cdtvariables.IVariableSubstitutor
 * @since 3.0
 */
DefaultVariableContextInfo (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/DefaultVariableContextInfo.java)/**
 * This is the default implementation of the IMacroContextInfo
 *
 * @since 3.0
 */
EclipseVariablesVariableSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/EclipseVariablesVariableSupplier.java)/**
 * This supplier suplies the macros that represent the Eclipse variables
 *
 * @since 3.0
 */
EnvironmentVariableSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/EnvironmentVariableSupplier.java)/**
 * This supplier suplies the macros that represent the Managed Build environment variables
 *
 * @since 3.0
 */
ICdtVariableChangeListener (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/ICdtVariableChangeListener.java)/**
 * Listener to listen to Build Variables changes events.
 */
StorableCdtVariable (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/StorableCdtVariable.java)/**
 * This class represents the Build Macro that could be loaded
 * and stored in XML
 *
 * @since 3.0
 *
 */
StorableCdtVariables (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/StorableCdtVariables.java)/**
 * This class represents the set of Build Macros that could be loaded
 * and stored in XML
 *
 * @since 3.0
 *
 */
UserDefinedVariableSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/UserDefinedVariableSupplier.java)/**
 * This supplier is used to obtain the user-defined macros
 *
 * @since 3.0
 */
UserVarSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/UserVarSupplier.java)/**
 * Wrapper for UserDefinedMacroSupplier methods
 * Note that only config-level macros are supported.
 */
VariableChangeEvent (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/VariableChangeEvent.java)/**
 * Event describing Build Variables changes.
 */
CdtVarPathEntryVariableManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CdtVarPathEntryVariableManager.java)/**
 * the path entry variable manager is kept for the backward compatibility purposes
 * currently it presents workspace Cdt variables that hold either a file or folder value
 *
 */
ConsoleOutputStream (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/ConsoleOutputSniffer.java)/**
	 * Private class to sniff the output stream for this sniffer.
	 */
ConsoleOutputSniffer (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/ConsoleOutputSniffer.java)/**
 * Intercepts an output to console and forwards it to console parsers for processing
 */
AbstractCodeReaderFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/AbstractCodeReaderFactory.java)/**
 * Base implementation for all code reader factories.
 */
IIncludeFileResolutionHeuristics (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/IIncludeFileResolutionHeuristics.java)/**
 * Abstract base class for heuristic include file resolution.
 */
InternalASTServiceProvider (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/InternalASTServiceProvider.java)/**
 * @deprecated Do not use this class.
 */
NullCodeReaderFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/NullCodeReaderFactory.java)/**
 * A <code>ICodeReaderFactory</code> which creates dummy <code>CodeReader</code>s without content.
 *
 * @since 4.0
 */
PartialWorkingCopyCodeReaderFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/PartialWorkingCopyCodeReaderFactory.java)/**
 * @author jcamelon
 */
SavedCodeReaderFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/SavedCodeReaderFactory.java)/**
 * @author jcamelon
 */
WorkingCopyCodeReaderFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/WorkingCopyCodeReaderFactory.java)/**
 * @author jcamelon
 */
ExtensionEnvVarProvider (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/BuildSystemEnvironmentSupplier.java)/**
	 * EnvironmentVariableProvider passed to the tool-integrator provided
	 * suppliers.
	 * Accepts only contexts lower than the one passed to a suppler
	 *
	 * @since 3.0
	 */
BuildSystemEnvironmentSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/BuildSystemEnvironmentSupplier.java)/**
 * This is the Environment Variable Supplier used to supply variables
 * defined by the tool-integrator
 *
 * @since 3.0
 */
DefaultEnvironmentContextInfo (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/DefaultEnvironmentContextInfo.java)/**
 * The default implementation of the IContextInfo used by the Environment Variable Provider
 * Used to represent the Configuration, Project, Workspace and Eclipse environment contexts
 *
 * @since 3.0
 */
EclipseEnvironmentSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/EclipseEnvironmentSupplier.java)/**
 * This is the Environment Variable Supplier used to supply variables
 * defined in eclipse environment
 *
 * @since 3.0
 */
EnvironmentChangeEvent (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/EnvironmentChangeEvent.java)/**
 * Concrete implementation of event describing changes to environment variables defined by user
 * on CDT Environment page in Preferences.
 */
EnvironmentVariableManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/EnvironmentVariableManager.java)/**
 * This class implements the IEnvironmentVariableProvider interface and provides all
 * build environment functionality to the MBS
 *
 * @since 3.0
 */
EnvVarCollector (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/EnvVarCollector.java)/**
 * This class implements the "merging" functionality of environment variables
 * Used by the EnvironmentVariableProvider to "merge" the sets of macros returned
 * by different suppliers into one set returned to the user
 *
 * @since 3.0
 *
 */
ICoreEnvironmentVariableSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/ICoreEnvironmentVariableSupplier.java)/**
 *
 * @since 3.0
 */
IEnvironmentContextInfo (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/IEnvironmentContextInfo.java)/**
 * This interface is used by the Environment Variable Provider to
 * represent the given context(level) information
 *
 * @since 3.0
 */
UserDefinedEnvironmentSupplier (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/envvar/UserDefinedEnvironmentSupplier.java)/**
 * This is the Environment Variable Supplier used to supply and persist user
 * defined variables.  Variables are stored in the context of a CDT {@link ICConfigurationDescription},
 * or, globally at the {@link IWorkspace} level.
 *
 * <p>
 * This class is Singleton held by {@link EnvironmentVariableManager}.
 *
 * <p>
 * It also allows temporary 'overriding' of variables. These are not persisted, but override
 * the values of any existing user-defined variable. This functionality is used by HeadlessBuilder
 * to temporarily override environment variables on the command line.
 *
 * @since 3.0
 */
ICConsole (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/ICConsole.java)/**
 * Extension of CDT console adaptor interface to UI plugin console. This extension
 * provides control over context id, name and icon in the Console view.
 */
ICoreInfo (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/ICoreInfo.java)/**
 */
ICPUInfo (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/ICPUInfo.java)/**
 */
IErrorMarkeredOutputStream (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/IErrorMarkeredOutputStream.java)/**
 * Output stream for use in build console capable of processing markers info
 * attached to the output.
 * @since 5.2
 */
LoggingUtils (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/LoggingUtils.java)/**
 * Some general purpose functions that can be useful for logging/tracing activities.
 */
ParserLogService (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/parser/ParserLogService.java)/**
 * @author jcamelon
 */
Node (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/PositionTracker.java)/**
	 * Nodes implementing a red black binary tree.
	 *
	 * @author markus.schorn@windriver.com
	 */
PositionTracker (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/PositionTracker.java)/**
 * Tracks changes made to a text buffer, to afterwards recalculate positions.
 * @author markus.schorn@windriver.com
 */
ProblemMarkerFilterDesc (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/ProblemMarkerFilterDesc.java)/**
 * The purpose of ProblemMarkerFilterDesc is to manage information about
 * one instance ProblemMarkerFilter extension point.
 */
ProblemMarkerFilterManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/ProblemMarkerFilterManager.java)/**
 * The purpose of ProblemMarkerFilterManager is to manage ProblemMarkerFilter extension points.
 * {@link ErrorParserManager} use this manager to filter out unnecessary problem markers
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
ReaderThread (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/ProcessClosure.java)/**
	 * Thread which continuously reads from a input stream and pushes the read
	 * data to an output stream which is immediately flushed afterwards.
	 */
ProcessClosure (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/ProcessClosure.java)/**
 * Bundled state of a launched process including the threads linking the process
 * in/output to console documents.
 */
FileRelevance (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/resources/FileRelevance.java)/**
 * This class computes a relevance for files in case we have to select
 * from multiple files for the same file-system location.
 */
LocationAdapter (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/resources/LocationAdapter.java)/**
 * Provides common functionality for URI and IPath
 */
PathCanonicalizationStrategy (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/resources/PathCanonicalizationStrategy.java)/**
 * Configurable strategy for canonicalizing file paths. File paths can be canonicalized by calling
 * either File.getCanonicalPath or File.getAbsolutePath. File.getCanonicalPath resolves symbolic
 * links and guarantees path uniqueness. File.getAbsolutePath can be used when resolution of
 * symbolic links is undesirable. The default is to use File.getCanonicalPath.
 */
ResourceExclusion (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/resources/ResourceExclusion.java)/**
 * @author vkong
 */
ResourceExclusionFactory (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/resources/ResourceExclusionFactory.java)/**
 * @author crecoskie
 *
 */
ResourceLookup (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/resources/ResourceLookup.java)/**
 * Allows for looking up resources by location or name.
 */
ResourceLookupTree (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/resources/ResourceLookupTree.java)/**
 * Allows for looking up resources by location or name. When using this class 100 bytes per resource
 * are needed. Therefore the support is limited to header-files int non-cdt projects and all files
 * except non-cdt-files in CDT projects.
 *
 * The information for a project is initialized when first requested and then it is kept up to date
 * using a resource change listener. No memory is used, as long as the class is not used.
 * When information is not used for more than 10 minutes, the data-structures will be held via a weak
 * reference, only and are subject to garbage collection.
 *
 * The node map stores a map from hash-code of file-names to nodes.
 * A node contains the name of a file plus a link to the parent resource. From that we can compute
 * the resource path and obtain further information via the resource.
 */
StreamProgressMonitor (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/StreamProgressMonitor.java)/**
 * Helper class to report progress of the build via {@link IProgressMonitor}
 */
SystemBuildConsole (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/SystemBuildConsole.java)/**
 * CDT console which redirects output to system console ({@code System.out}, {@code System.err}).
 * Used by headless builder.
 *
 */
AbstractErrorParser (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/errorparsers/AbstractErrorParser.java)/**
 * @deprecated use org.eclipse.cdt.core.errorparsers.AbstractErrorParser
 * this class is moved to public package
 */
CWDLocator (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/errorparsers/CWDLocator.java)/**
 * Class {@code CWDLocator} is used to change working directory from where file name is searched by
 * {@link ErrorParserManager}. The intention is to handle make output of commands "pushd" and "popd".
 */
ErrorParserExtensionManager (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/errorparsers/ErrorParserExtensionManager.java)/**
 * ErrorParserExtensionManager manages error parser extensions, serialization and preferences.
 */
ErrorPattern (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/errorparsers/ErrorPattern.java)/**
 * @deprecated use org.eclipse.cdt.core.errorparsers.ErrorPattern
 * this class is moved to public package
 */
MakeErrorParser (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/errorparsers/MakeErrorParser.java)/**
 * @deprecated replaced with {@link CWDLocator} and {@code GmakeErrorParser}
 *
 */
AbortFormatting (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/AbortFormatting.java)/**
 * Unchecked exception wrapping invalid input checked exception which may occur
 * when scanning original formatted source.
 *
 * @since 4.0
 */
Alignment (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/align/Alignment.java)/**
 * Alignment management
 *
 * @since 4.0
 */
AlignmentException (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/align/AlignmentException.java)/**
 * Exception used to backtrack and break available alignments
 * When the exception is thrown, it is assumed that some alignment will be changed.
 *
 * @since 4.0
 */
ChangeFormatter (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/ChangeFormatter.java)/**
 * Applies the C++ code formatter to the code affected by refactoring.
 */
TrailingTokenFormatter (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/CodeFormatterVisitor.java)/**
	 * Formats a given token at a given position.
	 * @see #formatList(List, ListOptions, boolean, boolean, Runnable)
	 */
TrailingSemicolonFormatter (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/CodeFormatterVisitor.java)/**
	 * Formats a trailing semicolon.
	 * @see #formatList(List, ListOptions, boolean, boolean, Runnable)
	 */
FunctionDeclaratorTailFormatter (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/CodeFormatterVisitor.java)/**
	 * Formats the part of a function declaration following the parameter list.
	 * @see #formatList(List, ListOptions, boolean, boolean, Runnable)
	 */
ClosingParensesisTailFormatter (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/CodeFormatterVisitor.java)/**
	 * Formats a trailing semicolon.
	 * @see #formatList(List, ListOptions, boolean, boolean, Runnable)
	 */
CodeFormatterVisitor (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/CodeFormatterVisitor.java)/**
 * This class is responsible for formatting C/C++ source code.
 * Some heuristic is applied in case of syntax errors or other problems
 * to skip those areas, but because of incomplete location information
 * the formatting may fail. The reason of the failure is logged.
 *
 * @since 4.0
 */
Location (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/Location.java)/**
 * A location maintains positional information both in original source
 * and in the output source.
 * It remembers source offsets, line/column and indentation level.
 *
 * @since 4.0
 */
Scanner (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/scanner/Scanner.java)/**
 * A scanner operating on a character array and allowing to reposition the scanner.
 *
 * @since 4.0
 */
SimpleScanner (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/scanner/SimpleScanner.java)/**
 * A C/C++ lexical scanner, which does no preprocessing,
 * but tokenizes preprocessor directives, whitespace and comments.
 *
 * @since 4.0
 */
Scribe (/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/Scribe.java)/**
 * This class is responsible for dumping formatted source.
 *
 * @since 4.0
 */
Operator (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/ConditionalProcessGroup.java)/**
	 * @author   BalaT
	 */
ConditionalProcessGroup (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/ConditionalProcessGroup.java)/**
 * ConditionalProcess encloses an &lt;if condition="..."&gt;&lt;/if&gt; block of the template.
 * The currently supported conditions are equals and not equals operations performed on two
 * Strings. The respective operators are == and !=. Any spaces will be treated as part of the
 * operands. The two operands will be evaluated for simple String equals and not equals after
 * performing a single pass  replace of any replace markers with their values in the template's
 * value store.
 */
Process (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/Process.java)/**
 * This class contains methods to get first process block element, next process
 * block element and checks for next process block element.
 */
ProcessArgument (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/ProcessArgument.java)/**
 * ProcessArgument class responsible for constructing process Arguments  by taking info from Template.
 */
AddFile (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/AddFile.java)/**
 * Adds File to the project
 */
AddFiles (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/AddFiles.java)/**
 * Adds Files to the Project
 */
AddLink (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/AddLink.java)/**
 * Adds a Link to the Project.
 */
AddNature (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/AddNature.java)/**
 * @author dschaefer
 * @since 5.5
 *
 */
Append (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/Append.java)/**
 * Append the contents to the file.
 */
Copy (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/Copy.java)/**
 * Copies a File to the Project.
 */
CreateFolder (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/CreateFolder.java)/**
 * Creates regular folder in the project.
 * @since 5.1
 */
CreateResourceIdentifier (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/CreateResourceIdentifier.java)/**
 * Creates a template macro value that can be used as a pseudo-unique resource identifier.
 * It is based on the name of the application and is in the form of four capital letters.
 * e.g. Helloworld => HELL
 */
CreateSourceFolder (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/CreateSourceFolder.java)/**
 * Creates a include Folder to the project.
 */
SetEnvironmentVariable (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/processes/SetEnvironmentVariable.java)/**
 * A template process for setting an environment variable in all of the new project's
 * build configurations.  E.g.,
 * <pre>
 *  &lt;process type="org.eclipse.cdt.core.SetEnvironmentVariable">
 *      &lt;simple name="projectName" value="$(projectName)"/>
 *      &lt;complex-array name="variables">
 *          &lt;element>
 *              &lt;simple name="name" value="QMAKE"/>
 *              &lt;simple name="value" value="$(qmake)"/>
 *          &lt;/element>
 *      &lt;/complex-array>
 *  &lt;/process>
 * </pre>
 * This will create an environment variable called "QMAKE" and will set the value to
 * be the value entered in a field (called qmake) in the New Project wizard.
 *
 * @since 5.6
 */
ProcessHelper (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/ProcessHelper.java)/**
 * Acts as helper class for process the processes i.e., copy, replace and append files.
 */
ProcessParameter (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/ProcessParameter.java)/**
 * ProcessParameter is responsible for construting  the Process Parameter the given configuration element.
 */
ProcessRunner (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/ProcessRunner.java)/**
 * Abstract ProcessRunner class provides the methods to implement for processes.
 */
ProcessRunnerFactory (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/ProcessRunnerFactory.java)/**
 * Factory class for creating the Process Runners.
 */
TemplateProcessHandler (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/process/TemplateProcessHandler.java)/**
 * Class handles the Template processes
 */
SharedDefaults (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/SharedDefaults.java)/**
 * Processes the shared default values. Updates and Persists new key - value (default) pair
 */
TemplateCategory (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateCategory.java)/**
 * @author Doug Schaefer
 * @since 5.4
 */
TemplateCore (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateCore.java)/**
 * TemplateCore class is responsible providing the non-UI part of template and
 * initiating process part of Template Engine. This is created per TemplateDescriptor basis.
 * Once The Template is created it creates a TemplateDescriptor for the XML file name given.
 * Template class extends this class with additional UI elements that are part of the template.
 *
 * @since 4.0
 */
TemplateDescriptor (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateDescriptor.java)/**
 * This class contains methods to get first process block element, next process block
 * element and checks for next process block element.
 */
TemplateEngine (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateEngine.java)/**
 * TemplateEngine is implemented as a Singleton. TemplateEngine is responsible for
 * creating SharedDefaults and initialising the SharedDefaults. Template instances
 * are obtained from TemplateEngine.
 *
 * @since 4.0
 */
TemplateEngine2 (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateEngine2.java)/**
 * @author Doug Schaefer
 * @since 5.4
 */
TemplateEngineHelper (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateEngineHelper.java)/**
 * Acts as an Helper class for Template Engine
 *
 * @since 4.0
 */
TemplateEngineMessages (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateEngineMessages.java)/**
 * @noreference This class is not intended to be referenced by clients.
 * @deprecated Provide your own messages.
 */
TemplateInfo (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateInfo.java)/**
 * TemplateInfo class contains the template information like wizard ID, pattern, path and project type.
 */
TemplateInfo2 (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateInfo2.java)/**
 * Template info extended to include new stuff for new new project wizard UI.
 *
 * @author Doug Schaefer
 * @since 5.4
 */
TemplateInitializationException (/core/org.eclipse.cdt.core/templateengine/org/eclipse/cdt/core/templateengine/TemplateInitializationException.java)/**
 * Represents an exception in initializing a template. Typically this will be caused
 * by an I/O or XML parsing failure.
 */
AdapterUtil (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/AdapterUtil.java)/**
 * A collection of static adaptor-related methods.
 */
CharOperation (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/CharOperation.java)/**
 * This class is a collection of helper methods to manipulate char arrays.
 *
 * @since 2.1
 */
Cygwin (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/Cygwin.java)/**
 * A collection of cygwin-related utilities.
 */
LRUCache (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/LRUCache.java)/**
 * A simple cache with limited number of items in the cache. LRUCache discards the Least Recently Used items first.
 * Based on {@link LinkedHashMap}. Note that {@link LinkedHashMap} has built-in facility to support cache like that
 * which is described in its JavaDoc.
 */
MinGW (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/MinGW.java)/**
 * A collection of MinGW-related utility methods.
 */
SafeStringInterner (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/SafeStringInterner.java)/**
 * Interns Strings in a safe manner, checking for nulls first.
 * Does not guard against interning a String that has already been interned.
 *
 * @author crecoskie
 *
 */
UNCPathConverterImpl (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/UNCPathConverterImpl.java)/**
 * UNCPathConverter that combines all registered convertes.
 */
WeakHashSet (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/WeakHashSet.java)/**
 * A hashset whose values can be garbage collected.
 * This is a clone of org.eclipse.jdt.internal.core.util.WeakHashSet.
 */
WeakHashSetSynchronized (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/WeakHashSetSynchronized.java)/**
 * A synchronized hashset whose values can be garbage collected.
 */
XmlUtil (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/XmlUtil.java)/**
 * XML utilities.
 *
 */
ARHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/AR.java)/**
	 * The <code>ARHeader</code> class is used to store the per-object file
	 *  archive headers.  It can also create an Elf object for inspecting
	 *  the object file data.
	 */
AR (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/AR.java)/**
 *  The <code>AR</code> class is used for parsing standard ELF archive (ar) files.
 *
 *  Each object within the archive is represented by an ARHeader class.  Each of
 *  of these objects can then be turned into an Elf object for performing Elf
 *  class operations.
 *  @see ARHeader
 */
BinaryFile (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/BinaryFile.java)/**
 *
 */
BinaryObjectAdapter (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/BinaryObjectAdapter.java)/**
 */
CdtVariableResolver (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/cdtvariables/CdtVariableResolver.java)/**
 * Utility class to resolve macro and variable references. Provides fixture to parse ${macro}
 * expressions and replace macros with actual values using {@link IVariableSubstitutor}.
 *
 * @since 3.0
 */
ICdtVariableSupplier (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/cdtvariables/ICdtVariableSupplier.java)/**
 *
 * @since 3.0
 */
IVariableContextInfo (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/cdtvariables/IVariableContextInfo.java)/**
 * This interface represents the context information.
 *
 * @since 3.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IVariableSubstitutor (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/cdtvariables/IVariableSubstitutor.java)/**
 * This interface represents the logic of how macro references should be resolved
 * The implementer of this interface is passed to the MacroResolver and
 * when the the resolve* methods of this interface are called by the MacroResolver
 * each time the macro reference is encountered in the string being resolved
 * to resolve the macro encountered macro reference
 *
 * @since 3.0
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
Coff (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/Coff.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link Coff64}.
 * This class is planned for removal in next major release.
 */
Coff64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/Coff64.java)/**
 * @since 6.9
 */
CygwinPEBinaryArchive (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEBinaryArchive.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link CygwinPEBinaryArchive64}.
 * This class is planned for removal in next major release.
 */
CygwinPEBinaryArchive64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEBinaryArchive64.java)/**
 * @since 6.9
 */
CygwinPEBinaryExecutable (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEBinaryExecutable.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link CygwinPEBinaryExecutable64}.
 * This class is planned for removal in next major release.
 */
CygwinPEBinaryExecutable64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEBinaryExecutable64.java)/**
 * @since 6.9
 */
CygwinPEBinaryObject (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEBinaryObject.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link CygwinPEBinaryObject64}.
 * This class is planned for removal in next major release.
 */
CygwinPEBinaryObject64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEBinaryObject64.java)/**
 * @since 6.9
 */
CygwinPEBinaryShared (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEBinaryShared.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link CygwinPEBinaryShared64}.
 * This class is planned for removal in next major release.
 */
CygwinPEBinaryShared64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEBinaryShared64.java)/**
 * @since 6.9
 */
CygwinPEParser (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEParser.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link CygwinPEParser64}.
 * This class is planned for removal in next major release.
 */
CygwinPEParser64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinPEParser64.java)/**
 * @since 6.9
 */
CygwinSymbol (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinSymbol.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link CygwinSymbol64}.
 * This class is planned for removal in next major release.
 */
CygwinSymbol64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/CygwinSymbol64.java)/**
 * @author DInglis
 *
 * To change the template for this generated type comment go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
PEBinaryArchive (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryArchive.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link PEBinaryArchive64}.
 * This class is planned for removal in next major release.
 */
PEBinaryArchive64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryArchive64.java)/**
 * @since 6.9
 */
PEBinaryExecutable (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryExecutable.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link PEBinaryExecutable64}.
 * This class is planned for removal in next major release.
 */
PEBinaryExecutable64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryExecutable64.java)/**
 * @since 6.9
 */
PEBinaryObject (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryObject.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link PEBinaryObject64}.
 * This class is planned for removal in next major release.
 */
PEBinaryObject64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryObject64.java)/**
 * @since 6.9
 */
PEBinaryShared (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryShared.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link PEBinaryShared64}.
 * This class is planned for removal in next major release.
 */
PEBinaryShared64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryShared64.java)/**
 * @since 6.9
 */
PEParser (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link PEParser64}.
 * This class is planned for removal in next major release.
 */
PEParser64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java)/**
 * @since 6.9
 */
DOSHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/PE.java)/**
	 */
PE (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/PE.java)/**
 * @deprecated. Deprecated as of CDT 6.9. Use 64 bit version {@link PE64}.
 * This class is planned for removal in next major release.
 */
DOSHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/PE64.java)/**
	 */
PE64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/PE64.java)/**
 * The PE file header consists of an MS-DOS stub, the PE signature, the COFF file Header
 * and an Optional Header.
 * <pre>
 *  +-------------------+
 *  | DOS-stub          |
 *  +-------------------+
 *  | file-header       |
 *  +-------------------+
 *  | optional header   |
 *  |- - - - - - - - - -|
 *  |                   |
 *  | data directories  |
 *  |                   |
 *  +-------------------+
 *  |                   |
 *  | section headers   |
 *  |                   |
 *  +-------------------+
 *  |                   |
 *  | section 1         |
 *  |                   |
 *  +-------------------+
 *  |                   |
 *  | section 2         |
 *  |                   |
 *  +-------------------+
 *  |                   |
 *  | ...               |
 *  |                   |
 *  +-------------------+
 *  |                   |
 *  | section n         |
 *  |                   |
 *  +-------------------+
 * </pre>
 * @since 6.9
 */
ARHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/PEArchive.java)/**
	 * The <code>ARHeader</code> class is used to store the per-object file
	 *  archive headers.  It can also create an PE object for inspecting
	 *  the object file data.
	 */
PEArchive (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/PEArchive.java)/**
 *  The <code>AR</code> class is used for parsing standard ELF archive (ar) files.
 *
 *  Each object within the archive is represented by an ARHeader class.  Each of
 *  of these objects can then be turned into an PE object for performing PE
 *  class operations.
 *  @deprecated - use org.eclipse.cdt.ui.utils.AR
 *  @see ARHeader
 */
PEConstants (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/PEConstants.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CommandLineUtil (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/CommandLineUtil.java)/**
 * Utilities to work with command line, parse arguments, etc.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @since 5.1
 */
CPPFilt (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/CPPFilt.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
CygPath (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/CygPath.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
DebugArrayType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugArrayType.java)/**
 * DebugArrayType
 *
 */
DebugBaseType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugBaseType.java)/**
 * DebugType
 *
 */
DebugCrossRefType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugCrossRefType.java)/**
 * DebugCrossRefType
 *
 */
DebugDerivedType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugDerivedType.java)/**
 * DebugDerivedType
 *
 */
DebugEnumField (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugEnumField.java)/**
 * DebugEnumField
 *
 */
DebugEnumType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugEnumType.java)/**
 * DebugEnumType
 *
 */
DebugField (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugField.java)/**
 * DebugEnumField
 *
 */
DebugFunctionType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugFunctionType.java)/**
 * DebugFunctionType
 *
 */
DebugParameterKind (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugParameterKind.java)/**
 * DebugParameterKind
 *
 */
DebugPointerType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugPointerType.java)/**
 * DebugPointerType
 *
 */
DebugReferenceType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugReferenceType.java)/**
 * DebugReferenceType
 *
 */
DebugStructType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugStructType.java)/**
 * DebugStructType
 *
 */
DebugType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugType.java)/**
 * DebugType
 *
 */
DebugUnknownType (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugUnknownType.java)/**
 * DebugUnknownType
 *
 */
DebugVariableKind (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugVariableKind.java)/**
 * DebugVariableKind
 *
 */
DebugVisibility (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/DebugVisibility.java)/**
 * DebugVisibility
 *
 */
InitialLengthValue (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/Dwarf.java)/**
	 *
	 */
DwarfConstants (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfConstants.java)/**
 * DWARF constant.
 */
DwarfReader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java)/**
 * Light-weight parser of Dwarf2 data which is intended for getting only
 * source files that contribute to the given executable.
 */
StringField (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/stabs/StringField.java)/**
 * Format: string_field = name ':' symbol-descriptor type-information
 */
DebugAddr2line (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/tools/DebugAddr2line.java)/**
 * StabsAddr2ine
 *
 * @author alain
 */
DebugDump (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/tools/DebugDump.java)/**
 * DebugDump
 *
 */
DebugSymsRequestor (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/tools/DebugSymsRequestor.java)/**
 * DebugSymsRequestor
 *
 */
EFSExtensionManager (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/EFSExtensionManager.java)/**
 * Manager class that consults contributors to the EFSExtensionProvider extension point
 * to perform operations corresponding to those filesystems. The default behaviour if no provider is present
 * is to assumes that URIs for the given filesystem map directly to resources in the physical filesystem, and
 * that the path component of the URI is a direct representation of the absolute path to the file in the
 * physical filesystem. Also, operations will by default respect the syntax and semantics of the local EFS
 * filesystem, if operations are performed with respect to it.
 *
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part of a work in progress. There
 * is no guarantee that this API will work or that it will remain the same. Please do not use this API without
 * consulting with the CDT team.
 *
 * @author crecoskie
 * @noextend This class is not intended to be extended by clients.
 * @since 5.2
 */
ARHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/AR.java)/**
	 * The <code>ARHeader</code> class is used to store the per-object file
	 *  archive headers.  It can also create an Elf object for inspecting
	 *  the object file data.
	 */
AR (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/AR.java)/**
 *  The <code>AR</code> class is used for parsing standard ELF archive (ar) files.
 *
 *  Each object within the archive is represented by an ARHeader class.  Each of
 *  of these objects can then be turned into an Elf object for performing Elf
 *  class operations.
 *  @deprecated use org.eclipse.cdt.utils.AR
 *  @see ARHeader
 */
ElfHelper (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/ElfHelper.java)/**
 * <code>ElfHelper</code> is a wrapper class for the <code>Elf</code> class
 * to provide higher level API for sorting/searching the ELF data.
 *
 * @see Elf
 */
ElfBinaryArchive (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfBinaryArchive.java)/**
 */
ElfParser (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java)/**
 */
GNUElfParser (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/GNUElfParser.java)/**
 * GNUElfParser
 */
SymbolSortCompare (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/SymbolSortCompare.java)/**
 * @deprecated This class is slated for removal, it is not used by the CDT classes
 */
EnvVarOperationProcessor (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/envvar/EnvVarOperationProcessor.java)/**
 * This is an utility class that implements environment variable operations
 * functionality: append, prepend, replace and remove
 *
 * @since 3.0
 */
IEnvironmentChangeEvent (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/envvar/IEnvironmentChangeEvent.java)/**
 * A class to describe changes to environment variables defined by user
 * on CDT Environment page in Preferences.
 *
 * @since 5.5
 */
IEnvironmentChangeListener (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/envvar/IEnvironmentChangeListener.java)/**
 * Interface for listeners to changes in environment variables defined by user
 * on CDT Environment page in Preferences.
 *
 * @since 5.5
 */
PrefListener (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/envvar/PrefsStorableEnvironment.java)/** A listener for changes in the backing store */
PrefsStorableEnvironment (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/envvar/PrefsStorableEnvironment.java)/**
 * This class represents the set of environment variables that could be loaded
 * and stored from a IEclipsePreferences store.  It acts like an OverlayStore caching
 * outstanding changes while not yet serialized, as well as responding to change
 * in the Preference store itself.
 *
 * fCachedSerialEnv is a cache of the contents of the preference store
 * fVariables (in parent) contains runtime added / changed variables
 * fDeleteVaraibles contains delete variable names
 * When serialize is called, all changes in Variables / Delete are serialized to the
 * ISerializeInfo store, Cached is updated, and fVariables and fDeletedVariables cleared.
 *
 * StorableEnvironment stores the Preferences in a single XML encoded String in
 *    ISerializeInfo.getNode().get(ISerializeInfo.getName())
 * This class defaults to storing the environment as 'Raw' items in the Preferences
 * under:
 *    ISerializeInfo.getNode().node(ISerializeInfo.getName())
 *
 * @since 5.2
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
StorableEnvironment (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/envvar/StorableEnvironment.java)/**
 * This class represents the set of environment variables that could be loaded
 * and stored in XML
 *
 * @since 3.0
 */
ISerializeInfo (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/envvar/StorableEnvironmentLoader.java)/**
	 * this interface represents the preference node and the preference name
	 * that are used for holding the environment data
	 * @noextend This interface is not intended to be extended by clients.
	 * @noimplement This interface is not intended to be implemented by clients.
	 */
StorableEnvironmentLoader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/envvar/StorableEnvironmentLoader.java)/**
 * This class implements the common functionality that allows
 * storing and loading environment variable settings from eclipse properties
 *
 * @since 3.0
 */
StorableEnvVar (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/envvar/StorableEnvVar.java)/**
 * This class represents the Environment variable that could be loaded
 * and stored in XML
 *
 * @since 3.0
 */
ERandomAccessFile (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/ERandomAccessFile.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ICygwinToolsFactroy (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/ICygwinToolsFactroy.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IGnuToolFactory (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/IGnuToolFactory.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ARHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/AR.java)/**
	 * The <code>ARHeader</code> class is used to store the per-object file
	 *  archive headers.  It can also create an Mach-O object for inspecting
	 *  the object file data.
	 */
AR (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/AR.java)/**
 *  The <code>AR</code> class is used for parsing standard archive (ar) files.
 *
 *  Each object within the archive is represented by an ARHeader class.  Each of
 *  of these objects can then be turned into an Elf object for performing Elf
 *  class operations.
 *  @see ARHeader
 */
SymbolComparator (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/MachO.java)/**
	 * We have to implement a separate compararator since when we do the
	 * binary search down below we are using a Long and a Symbol object
	 * and the Long doesn't know how to compare against a Symbol so if
	 * we compare Symbol vs Long it is ok, but not if we do Long vs Symbol.
	 */
Line (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/MachO.java)/**
	 * Simple class to implement a line table
	 */
MachO (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/MachO.java)/**
 * @deprecated. Deprecated as of CDT 6.1. Use 64 bit version {@link MachO64}.
 * This class is planned for removal in next major release.
 */
SymbolComparator (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/MachO64.java)/**
	 * We have to implement a separate comparator since when we do the
	 * binary search down below we are using a Long and a Symbol object
	 * and the Long doesn't know how to compare against a Symbol so if
	 * we compare Symbol vs Long it is ok, but not if we do Long vs Symbol.
	 */
Line (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/MachO64.java)/**
	 * Simple class to implement a line table
	 */
MachO64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/MachO64.java)/**
 * @since 5.2
 */
MachOHelper (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/MachOHelper.java)/**
 * @deprecated. Deprecated as of CDT 6.1. Use 64 bit version {@link MachOHelper64}.
 * This class is planned for removal in next major release.
 * <br>
 *  <code>MachOHelper</code> is a wrapper class for the <code>MachO</code> class
 *  to provide higher level API for sorting/searching the MachO data.
 *
 *  @see MachO
 */
MachOHelper64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/MachOHelper64.java)/**
 *  <code>MachOHelper64</code> is a wrapper class for the <code>MachO64</code> class
 *  to provide higher level API for sorting/searching the MachO data.
 *
 *  @see MachO64
 *  @since 5.2
 */
MachOBinaryArchive (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryArchive.java)/**
 * @deprecated. Deprecated as of CDT 6.1. Use 64 bit version {@link MachOBinaryArchive64}.
 * This class is planned for removal in next major release.
 */
MachOBinaryArchive64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryArchive64.java)/**
 * @since 5.2
 */
MachOBinaryExecutable (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryExecutable.java)/**
 * @deprecated. Deprecated as of CDT 6.1. Use 64 bit version {@link MachOBinaryExecutable64}.
 * This class is planned for removal in next major release.
 */
MachOBinaryExecutable64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryExecutable64.java)/**
 * @since 5.2
 */
MachOBinaryObject (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryObject.java)/**
 * @deprecated. Deprecated as of CDT 6.1. Use 64 bit version {@link MachOBinaryObject64}.
 * This class is planned for removal in next major release.
 */
MachOBinaryObject64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryObject64.java)/**
 * MachOBinaryObject64
 * @since 5.2
 */
MachOBinaryShared (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryShared.java)/**
 * @deprecated. Deprecated as of CDT 6.1. Use 64 bit version {@link MachOBinaryShared64}.
 * This class is planned for removal in next major release.
 */
MachOBinaryShared64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryShared64.java)/**
 * @since 5.2
 */
MachOParser (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOParser.java)/**
 * @deprecated. Deprecated as of CDT 6.1. Use 64 bit version {@link MachOParser64}.
 * This class is planned for removal in next major release.
 */
MachOParser64 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOParser64.java)/**
 * @since 5.2
 */
NM (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/NM.java)/**
 */
PathUtil (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/PathUtil.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
Platform (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/Platform.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ARHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/AR.java)/**
	 * Archive and archive member header. Does not include 8-byte magic character.
	 *
	 * @author vhirsl
	 */
LSTHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/AR.java)/**
	 * Library Symbol Table header
	 *
	 * @author vhirsl
	 */
AR (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/AR.java)/**
 *  The <code>AR</code> class is used for parsing standard SOM archive (ar) files.
 *
 * @author vhirsl
 */
SOMBinaryArchive (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryArchive.java)/**
 * SOM binary archive
 *
 * @author vhirsl
 */
SOMBinaryObject (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryObject.java)/**
 * Binary file in HP-UX SOM format
 *
 * @author vhirsl
 */
SOMParser (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMParser.java)/**
 * HP-UX SOM binary parser
 *
 * @author vhirsl
 */
SomSymbol (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SomSymbol.java)/**
 * SOM symbol specialization
 *
 * @author vhirsl
 */
FileHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/SOM.java)/**
	 * SOM Header record
	 *
	 * @author vhirsl
	 */
SOM (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/SOM.java)/**
 * Representation of a HP-UX SOM binary format
 *
 * @author vhirsl
 */
UNCPathConverter (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/UNCPathConverter.java)/**
 * Base class for the UNC path conversion extension point. UNC paths are used to represent remote
 * include locations, and this class is used to translate between UNC, IPath and URI
 * representations. By default, paths are translated into the equivalent local file version to
 * preserve existing behavior, but by providing an appropriate extension, these paths can be mapped
 * into locations on a remote system.
 *
 * May be subclassed by clients.
 * @since 5.3
 */
ARHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/AR.java)/**
	 * Content of an archive in AIX XCOFF32 format
	 *
	 * @author vhirsl
	 */
MemberHeader (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/AR.java)/**
	 * The <code>ARHeader</code> class is used to store the per-object file
	 *  archive headers.  It can also create an XCOFF32 object for inspecting
	 *  the object file data.
	 */
AR (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/AR.java)/**
 *  The <code>AR</code> class is used for parsing standard XCOFF32 archive (ar) files.
 *
 *  Each object within the archive is represented by an ARHeader class.  Each of
 *  of these objects can then be turned into an XCOFF32 object for performing XCOFF32
 *  class operations.
 *  @see MemberHeader
 *
 * @author vhirsl
 */
XCOFF32Parser (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFF32Parser.java)/**
 * XCOFF 32bit binary parser for AIX
 *
 * @author vhirsl
 */
XCOFFBinaryArchive (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryArchive.java)/**
 * XCOFF32 binary archive
 *
 * @author vhirsl
 */
XCOFFBinaryObject (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryObject.java)/**
 * Binary file in AIX XCOFF32 format
 *
 * @author vhirsl
 */
XCoffSymbol (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCoffSymbol.java)/**
 * @author DInglis
 *
 * To change the template for this generated type comment go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
XCoff32 (/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/XCoff32.java)/**
 * Representation of AIX XCOFF32 binary format
 *
 * @author vhirsl
 */
ProcessInfo (/core/org.eclipse.cdt.core.linux/src/org/eclipse/cdt/internal/core/linux/ProcessInfo.java)/**
 * @author alain
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */
ProcessList (/core/org.eclipse.cdt.core.linux/src/org/eclipse/cdt/internal/core/linux/ProcessList.java)/**
 * Insert the type's description here.
 * @see IProcessList
 */
ProcessInfo (/core/org.eclipse.cdt.core.macosx/src/org/eclipse/cdt/internal/core/macosx/ProcessInfo.java)/**
 * @author alain
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */
ProcessList (/core/org.eclipse.cdt.core.macosx/src/org/eclipse/cdt/internal/core/macosx/ProcessList.java)/**
 * Insert the type's description here.
 * @see IProcessList
 */
IProcessInfo (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/core/IProcessInfo.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IProcessList (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/core/IProcessList.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
CNativePlugin (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/internal/core/natives/CNativePlugin.java)/**
 * CNativePlugin is the life-cycle owner of the plug-in, and also holds
 * utility methods for logging.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
PersistentPTY (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/pty/PersistentPTY.java)/**
 * A type of PTY that is persistent.  This means that closing
 * its streams (e.g., once the connection to the process is lost)
 * will not close the PTY or the streams; instead, they will
 * remain open to be used again by reconnecting to the streams.
 * {@link PersistentPTY#closeStreams()} must be called to properly
 * cleanup the streams once the PersistentPTY is known not be needed
 * anymore.
 *
 * @since 5.10
 */
MasterFD (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/pty/PTY.java)/**
	 * The master fd is used on two streams. We need to wrap the fd
	 * so that when stream.close() is called the other stream is disabled.
	 */
PTY (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/pty/PTY.java)/**
 * PTY - pseudo terminal support.
 */
EnvironmentReader (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/spawner/EnvironmentReader.java)/**
 * This class provides environment variables supplied as {@link Properties} class.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ProcessFactory (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/spawner/ProcessFactory.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
SpawnerOutputStream (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/spawner/SpawnerOutputStream.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
WindowsRegistry (/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/WindowsRegistry.java)/**
 * @author DSchaefer
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CDescriptorOldTests (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/cdescriptor/tests/CDescriptorOldTests.java)/**
 * This class exists because the tests in CDescriptorTests
 * are not fixed.
 * This class corresponds to the version of
 * CDescrptorTests before the changes made in cdt.core 5.1
 * (CVS version 1.12)
 */
MockEnvironmentListener (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/envvar/IEnvironmentVariableManagerTests.java)/**
	 * Mock listener to listen to environment variable change events.
	 */
EFSExtensionProviderTestsProvider (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/efsextension/tests/EFSExtensionProviderTestsProvider.java)/**
 * Test class that is used to make sure that extensions to the EFSExtensionProvider
 * extension point are picked up.  Overrrides the default behaviour for isVirtual()
 * to return true.
 *
 * @author crecoskie
 *
 */
EFSExtensionTests (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/efsextension/tests/EFSExtensionTests.java)/**
 * Tests the EFSExtensionManager and EFSExtensionProvider classes, as well as the EFSExtensionProvider extension point.
 *
 * @author crecoskie
 *
 */
MockErrorParser (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserEfsFileMatchingTest.java)/**
	 * Simple error parser parsing line like "file:line:description"
	 */
ErrorParserEfsFileMatchingTest (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserEfsFileMatchingTest.java)/**
 * The test case includes a few tests checking that {@link AbstractErrorParser}/{@link ErrorPattern}
 * properly locate and resolve filenames found in build output in case of EFS files/folders.
 */
MockErrorParser (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserFileMatchingTest.java)/**
	 * Simple error parser parsing line like "file:line:description"
	 */
ErrorParserFileMatchingTest (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserFileMatchingTest.java)/**
 * The test case includes a few tests checking that {@link AbstractErrorParser}/{@link ErrorPattern}
 * properly locate and resolve filenames found in build output.
 */
ErrorParserManagerTest (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserManagerTest.java)/**
 * @author Alena Laskavaia
 *
 * Tests for ErrorParser manager and different parsers
 */
GCCErrorParserTests (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/GCCErrorParserTests.java)/**
 * This test is designed to exercise the error parser capabilities.
 */
CountingMarkerGenerator (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/GenericErrorParserTests.java)/**
	 * Expand and grow this class to make it more useful.
	 */
ImaginaryFilesErrorParserManager (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/GenericErrorParserTests.java)/**
	 * This class allows us to run error parsers for files which don't really
	 * exist by just using the strings that come out as error codes.
	 */
GenericErrorParserTests (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/GenericErrorParserTests.java)/**
 * This test is designed to exercise the error parser capabilities.
 */
GLDErrorParserTests (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/GLDErrorParserTests.java)/**
 * This test is designed to exercise the error parser capabilities for GNU ld.
 */
MakeErrorParserTests (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/MakeErrorParserTests.java)/**
 * This test is designed to exercise the error parser capabilities for GNU make.
 */
DummyErrorParser (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/RegexErrorParserTests.java)/**
	 * Dummy error parser
	 */
RegexErrorParserTests (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/RegexErrorParserTests.java)/**
 * Test cases testing RegexErrorParser functionality
 */
AbstractDummyProvider (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/index/provider/test/AbstractDummyProvider.java)/**
 * Provides no pdom descriptors, used for testing the behaviour of IndexManager over
 * project lifecycles.
 */
MemoryEFSExtensionProvider (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/tests/filesystem/ram/MemoryEFSExtensionProvider.java)/**
 * Test stub to test EFSExtensionProvider mappings.
 *
 */
MemoryFileStore (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/tests/filesystem/ram/MemoryFileStore.java)/**
 * In memory file system implementation used for testing.
 */
MemoryFileSystem (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/tests/filesystem/ram/MemoryFileSystem.java)/**
 * A test file system that keeps everything in memory.
 */
MemoryTree (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/tests/filesystem/ram/MemoryTree.java)/**
 * An in-memory file system.
 */
Policy (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/tests/filesystem/ram/Policy.java)/**
 *
 */
TestScopeOfBuildConfigResourceChangesPreference (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/preferences/tests/TestScopeOfBuildConfigResourceChangesPreference.java)/**
 * Test case for Bug 529023: Cannot set build.proj.ref.configs.enabled via
 * plugin_customization.ini.
 *
 * @author Simeon Andreev
 */
RefreshScopeTests (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/resources/tests/RefreshScopeTests.java)/**
 * @author crecoskie
 *
 */
TestExclusionFactory (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/resources/tests/TestExclusionFactory.java)/**
 * @author crecoskie
 *
 */
MockClass (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/utils/WeakHashSetTest.java)/**
	 * Sample mock class with specialized hashCode()
	 */
WeakHashSetTest (/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/utils/WeakHashSetTest.java)/**
 * Test suite to test {@link WeakHashSet}.
 */
AllLanguageTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/AllLanguageTests.java)/**
 * @author crecoskie
 *
 */
LanguageInheritanceTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/LanguageInheritanceTests.java)/**
 * Tests for language inheritance computations.
 */
AllLanguageSettingsProvidersCoreTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/AllLanguageSettingsProvidersCoreTests.java)/**
 * Test suite to cover core Language Settings Providers functionality.
 */
LanguageSettingsExtensionsTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsExtensionsTests.java)/**
 * Test cases testing LanguageSettingsProvider extensions
 */
MockLanguageSettingsChangeListener (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsListenersTests.java)/**
	 * Mock {@link ILanguageSettingsChangeListener}.
	 */
LanguageSettingsListenersTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsListenersTests.java)/**
 * Test cases to cover {@link ILanguageSettingsChangeListener} capabilities.
 */
MockConfigurationDescription (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsManagerTests.java)/**
	 * Mock configuration description.
	 */
MockProvider (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsManagerTests.java)/**
	 * Mock language sttings provider.
	 */
LanguageSettingsManagerTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsManagerTests.java)/**
 * Test cases testing {@link LanguageSettingsManager} utility methods.
 */
MockConfigurationDescription (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsPersistenceProjectTests.java)/**
	 * Mock configuration description.
	 */
MockProjectDescription (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsPersistenceProjectTests.java)/**
	 * Mock project description.
	 */
LanguageSettingsPersistenceProjectTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsPersistenceProjectTests.java)/**
 * Test cases testing LanguageSettingsProvider functionality related to persistence.
 */
LanguageSettingsProviderReferencedProjectsTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsProviderReferencedProjectsTests.java)/**
 * Test cases testing ReferencedProjectsLanguageSettingsProvider functionality
 */
LanguageSettingsScannerInfoProviderTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsScannerInfoProviderTests.java)/**
 * Test cases testing LanguageSettingsProvider functionality
 */
LanguageSettingsSerializableProviderTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsSerializableProviderTests.java)/**
 * Test cases testing serialization of LanguageSettingsProviders.
 */
MockLanguageSettingsBaseProvider (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/MockLanguageSettingsBaseProvider.java)/**
 * Mock of {@link LanguageSettingsBaseProvider} for testing.
 */
MockLanguageSettingsEditableProvider (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/MockLanguageSettingsEditableProvider.java)/**
 * Mock of {@link ILanguageSettingsEditableProvider} for testing.
 */
MockLanguageSettingsProvider (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/MockLanguageSettingsProvider.java)/**
 * Mock of {@link ILanguageSettingsProvider} for testing.
 */
MockLanguageSettingsSerializableProvider (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/MockLanguageSettingsSerializableProvider.java)/**
 * Mock of {@link LanguageSettingsSerializableProvider} for testing.
 */
MockListenerRegisterer (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/MockListenerRegisterer.java)/**
 * Mock Language Settings Provider that keeps count how many times it has been registered.
 */
AllCoreTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/AllCoreTests.java)/**
 *
 * AllTests.java
 * This is the main entry point for running this suite of JUnit tests
 * for all tests within the package "org.eclipse.cdt.core.model"
 *
 * @author Judy N. Green
 * @since Jul 19, 2002
 */
AllLanguageInterfaceTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/AllLanguageInterfaceTests.java)/**
 * LanguageInterfaceTests
 * lists all parts of the C/C++ language interface objects
 * to be tested.
 * @author bnicolle
 *
 */
ArchiveTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/ArchiveTests.java)/**
 * @author Peter Graves
 *
 * This file contains a set of generic tests for the core C model's Archive
 * class. There is nothing exotic here, mostly just sanity type tests
 *
 */
AsmModelBuilderTest (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/AsmModelBuilderTest.java)/**
 * Tests for the default assembly model builder.
 *
 * @since 5.0
 */
ASTCacheTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/ASTCacheTests.java)/**
 * Tests for the {@link ASTCache}.
 */
BinaryTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/BinaryTests.java)/**
 * @author Peter Graves
 *
 * This file contains a set of generic tests for the core C model's Binary
 * class. There is nothing exotic here, mostly just sanity type tests
 *
 */
Bug311189 (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/Bug311189.java)/**
 * Regression test for Bug 311189.
 * When a Team Project Set is imported, replacing an existing CDT Project
 * we must ensure that we don't corrupt the set of includes in the incoming
 * project's metadata
 */
CModelBuilderBugsTest (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/CModelBuilderBugsTest.java)/**
 * Tests for C model builder bugs.
 */
CModelBuilderInactiveCodeTest (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/CModelBuilderInactiveCodeTest.java)/**
 * Tests for C model inactive code parsing.
 */
CModelExceptionTest (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/CModelExceptionTest.java)/**
 * CModelExceptionTest
 *
 * @author Judy N. Green
 * @since Jul 19, 2002
 */
CModelIdentifierTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/CModelIdentifierTests.java)/**
 * Tests for CModel identifier API.
 *
 * @see ICElement#getHandleIdentifier()
 * @see CoreModel#create(String)
 *
 * @since 5.0
 */
CModelTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/CModelTests.java)/**
 * This file contains a set of generic tests for the core C model. Nothing
 * exotic, but should be a small sanity set of tests.
 */
DeclaratorsTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/DeclaratorsTests.java)/**
 * @author bnicolle
 *
 */
ElementDeltaTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/ElementDeltaTests.java)/**
 * Class for testing the C Element Delta Builder.
 */
FlagTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/FlagTests.java)/**
 * @author Peter Graves
 *
 * This is a very simple set of sanity tests for the flags class to make sure
 * there are no very silly problems in the class. It also verifies that there
 * is no overlap in the IConstants.
 */
IIncludeTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/IIncludeTests.java)/**
 * @author bnicolle
 *
 */
IMacroTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/IMacroTests.java)/**
 * IMacroTest - Class for testing IMacro
 *
 * @author bnicolle
 *
 */
IntegratedCModelTest (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/IntegratedCModelTest.java)/**
 * @author bnicolle
 */
IStructureTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/IStructureTests.java)/**
 * @author bnicolle
 */
ITemplateTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/ITemplateTests.java)/**
 * Class for testing ITemplate interface
 * @author bnicolle
 *
 */
MacroTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/MacroTests.java)/**
 * @author bnicolle
 *
 */
StructuralStructureTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/StructuralStructureTests.java)/**
 * @author hamer
 *
 */
StructuralTemplateTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/StructuralTemplateTests.java)/**
 * @author hamer
 *
 */
TranslationUnitBaseTest (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/TranslationUnitBaseTest.java)/**
 * @author jcamelon
 *
 */
TranslationUnitTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/TranslationUnitTests.java)/**
 * @author Peter Graves
 *
 * This file contains a set of generic tests for the core C model's TranslationUnit class.
 * There is nothing exotic here, mostly just sanity type tests.
 */
WorkingCopyTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/model/tests/WorkingCopyTests.java)/**
 * Contains unit test cases for Working Copies. Run using JUnit Plugin Test
 * configuration launcher.
 */
CConfigurationDescriptionExportSettings (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/settings/model/CConfigurationDescriptionExportSettings.java)/**
 * Class for testing exported settings and project references.
 * This functionality is provided by the CfgExportSettingContainerFactory which plugins
 * into the CExternalSettingsManager
 */
CConfigurationDescriptionReferenceTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/settings/model/CConfigurationDescriptionReferenceTests.java)/**
 * Test ICConfigurationDescription reference behaviours
 */
OurResourceChangeListener (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/settings/model/CProjectDescriptionStorageTests.java)/**
	 * Our resource change listener which notified us when a file has been detected as changed
	 * Users add files to the files to watch. Reset the listener and block waiting for the change to
	 * be noticed.
	 */
CProjectDescriptionStorageTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/settings/model/CProjectDescriptionStorageTests.java)/**
 * Testsuite for the project description storage. This
 * currently tests some of the features of the built-in
 * XmlProjectDescriptionStorage(2)
 */
PathSettingsContainerTests (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/settings/model/PathSettingsContainerTests.java)/**
 */
TestCfgDataProvider (/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/settings/model/TestCfgDataProvider.java)/**
 * Basic CDefaultConfigurationDataProvider
 *
 * This is extended to allow persisting Library path + Library file language
 * settings which aren't supported by the base default configuration data provider
 * i.e. cdt.core without managedbuild...
 */
AST2CPPImplicitNameTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2CPPImplicitNameTests.java)/**
 * Tests for classes implementing {@link IASTImplicitNameOwner} and {@link IASTImplicitDestructorNameOwner}
 * interfaces.
 */
AST2CPPSpecTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2CPPSpecTest.java)/**
 * Examples taken from the c++-specification.
 */
AST2CSpecTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2CSpecTest.java)/**
 * @author dsteffle
 */
AST2FileBasePluginTestCase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2FileBasePluginTestCase.java)/**
 * @author dsteffle
 */
AST2KnRTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2KnRTests.java)/**
 * @author dsteffle
 */
AST2SelectionParseTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2SelectionParseTest.java)/**
 * @author dsteffle
 */
AST2SelectionParseTestBase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2SelectionParseTestBase.java)/**
 * @author dsteffle
 */
AST2SpecTestBase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2SpecTestBase.java)/**
 * @author dsteffle
 */
AST2TestBase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2TestBase.java)/**
 * @author aniefer
 */
AST2Tests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2Tests.java)/**
 * Test cases on the AST.
 */
AST2UtilTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2UtilTests.java)/**
 * @author dsteffle
 */
ASTInactiveCodeTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/ASTInactiveCodeTests.java)/**
 * Testcases for inactive code in ast.
 */
CharArrayMapTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/CharArrayMapTest.java)/**
 *
 * @author Mike Kucera
 */
CommentTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/CommentTests.java)/**
 * @author Guido Zgraggen
 *
 */
CommonCPPTypes (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/CommonCPPTypes.java)/**
 *
 * Helper class for common type wrapping operations for tests.
 *
 */
CompleteParser2Tests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/CompleteParser2Tests.java)/**
 * @author jcamelon
 */
GenericLambdaIndexTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/cxx14/GenericLambdaIndexTests.java)/**
 * Index tests for C++14 generic lambdas.
 */
GenericLambdaTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/cxx14/GenericLambdaTests.java)/**
 * AST tests for C++14 generic lambdas.
 */
InitCaptureTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/cxx14/InitCaptureTests.java)/**
 * AST tests for C++14 lambda init captures.
 */
LambdaExpressionTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/cxx17/LambdaExpressionTests.java)/**
 * AST tests for C++17 lambda changes.
 */
DOMFileBasePluginTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMFileBasePluginTest.java)/**
 * @author dsteffle
 */
DOMGCCParserExtensionTestSuite (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMGCCParserExtensionTestSuite.java)/**
 * @author jcamelon
 *
 */
DOMGCCSelectionParseExtensionsTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMGCCSelectionParseExtensionsTest.java)/**
 * @author jcamelon
 *
 */
DOMLocationTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMLocationTests.java)/**
 * @author jcamelon
 */
DOMParserTestSuite (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMParserTestSuite.java)/**
 * @author jcamelon
 */
DOMPreprocessorInformationTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMPreprocessorInformationTest.java)/**
 * @author Emanuel Graf
 *
 */
NameCollector (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMSearchUtil.java)/**
	 * The NameCollector used to get IASTNames from an IASTNode.
	 *
	 * @author dsteffle
	 */
DOMSearchUtil (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMSearchUtil.java)/**
 * Utility class to have commonly used algorithms in one place for searching with the DOM.
 *
 * @author dsteffle
 */
DOMSelectionParseTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMSelectionParseTest.java)/**
 * @author dsteffle
 */
DOMSelectionParseTestBase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/DOMSelectionParseTestBase.java)/**
 * @author johnc
 *
 */
FaultToleranceTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/FaultToleranceTests.java)/**
 * Testcases related to recovery from invalid syntax.
 */
GCCTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/GCCTests.java)/**
 * @author aniefer
 */
ImageLocationTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/ImageLocationTests.java)/**
 * @author jcamelon
 */
LanguageExtensionsTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/LanguageExtensionsTest.java)/**
 * Testcases for non-gnu language extensions.
 */
QuickParser2Tests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/QuickParser2Tests.java)/**
 * @author jcamelon
 */
SemanticsTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/SemanticsTests.java)/**
 * Directly tests parts of the semantics package
 */
SemanticTestBase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/SemanticTestBase.java)/**
 * Common base class for AST2 and index tests.
 */
TypeTraitsTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/TypeTraitsTests.java)/**
 * Tests for ClassTypeHelper class.
 */
VariableReadWriteFlagsTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/VariableReadWriteFlagsTest.java)/**
 * Unit tests for CPPVariableReadWriteFlags and CVariableReadWriteFlags classes.
 */
AutomatedFramework (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/AutomatedFramework.java)/**
 * @author aniefer
 *
 * To change the template for this generated type comment go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
CharArrayObjectMapTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/CharArrayObjectMapTest.java)/**
 * Tests for {@link CharArrayObjectMap}.
 */
CharArrayUtilsTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/CharArrayUtilsTest.java)/**
 * @author Doug Schaefer
 */
FileBasePluginTestCase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/FileBasePluginTestCase.java)/**
 * @author dsteffle
 */
ObjectMapTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ObjectMapTest.java)/**
 * Tests for {@link ObjectMap}.
 */
ParserTestSuite (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ParserTestSuite.java)/**
 * Combines all tests for the parsers.
 */
ASTWriterTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/astwriter/ASTWriterTest.java)/**
 * @author Guido Zgraggen
 */
ASTWriterTestSourceFile (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/astwriter/ASTWriterTestSourceFile.java)/**
 * @author Guido Zgraggen IFS
 */
AstWriterTestSuite (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/astwriter/AstWriterTestSuite.java)/**
 * @author Emanuel Graf
 */
ChangeGeneratorTestSuite (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/changegenerator/ChangeGeneratorTestSuite.java)/**
 * @author Thomas Corbat
 */
CommentHandlingTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/comenthandler/CommentHandlingTest.java)/**
 * This test tests the behavior of the class ASTCommenter. It checks if the ASTCommenter assigns
 * the comments contained in an AST to the right ASTNodes.<br>
 * The source for the CommentHandling tests is located at
 * /resources/rewrite/CommentHandlingTestSource.rts.<br>
 * This file contains the source code and the expected output for all the tests.
 * Following a little example how such a test looks like:<br><br>
 *
 * <code><pre>
 * //!NameOfTheTest - will be used as JUnit test name
 * //#org.eclipse.cdt.core.parser.tests.rewrite.comenthandler.CommentHandlingTest
 * //@NameOfASourceFile.h
 * class myTestClass
 * {
 *  //myLeadingComment
 *  void aMethod(); //myTrailingComment
 *  //myFreestandingComment
 *  //myFreestandingComment2
 * };
 *
 * //=
 * =>leading
 * void aMethod(); = //myLeadingComment
 *
 * =>trailing
 * void aMethod(); = //myTrailingComment
 *
 * =>freestanding
 * void aMethod(); = //myFreestandingComment , //myFreestandingComment2
 * </pre></code>
 *
 * The second line (//#org.eclipse.cdt...) indicates the test class (in this case this class).<br>
 * The "//=" indicates the beginning of the expected test result.<br>
 * The test result contains three sections (separated by "=>leading", "=>trailing" and
 * "=>freestanding").<br>
 * Each section contains the raw signature of the node to which a comment is assigned plus " = "
 * and the comment. If there are several comments assigned to the same node they are concatenated
 * with a " , ".
 *
 * @author Guido Zgraggen IFS, Lukas Felber IFS
 */
CommentHandlingTestSuite (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/comenthandler/CommentHandlingTestSuite.java)/**
 * @author Guido Zgraggen IFS
 */
NodeCommentMapTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/comenthandler/NodeCommentMapTest.java)/**
 * @author Guido Zgraggen IFS
 */
RewriteBaseTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/RewriteBaseTest.java)/**
 * @author Guido Zgraggen IFS
 */
RewriteTester (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/RewriteTester.java)/**
 * @author Emanuel Graf
 */
TestSourceFile (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/rewrite/TestSourceFile.java)/**
 * @author Emanuel Graf
 */
InactiveCodeTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InactiveCodeTests.java)/**
 * Tests for using the preprocessor on inactive code
 */
InclusionTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InclusionTests.java)/**
 * Scanner2Tests ported to use the CPreprocessor
 */
PortedScannerTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/PortedScannerTests.java)/**
 * Scanner2Tests ported to use the CPreprocessor.
 */
PreprocessorBugsTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/PreprocessorBugsTests.java)/**
 * Scanner2Tests ported to use the CPreprocessor plus additional bugs fixed in
 * the CPreprocessor, afterwards.
 */
PreprocessorTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/PreprocessorTests.java)/**
 * Scanner2Tests ported to use the CPreprocessor
 */
StreamHasherTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/StreamHasherTests.java)/**
 * Unit test for StreamHasher class.
 */
XMLDumper (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/XMLDumper.java)/**
 * This class implements a utility that will walk through an object
 * and it's children and create an XML file for it.
 */
EmptyIndexFragment (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/EmptyIndexFragment.java)/**
 * An empty index fragment implementation
 * @since 4.0.1
 */
SinglePDOMTestNamedFilesStrategy (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBindingResolutionTestBase.java)/**
	 * This strategy allows tests to create an arbitrary number of header and source files
	 * and to obtain ASTs of any subset of the created files.
	 *
	 * The first line of each comment section preceding the test contains the name of the file
	 * to put the contents of the section to. To request the AST of a file, put an asterisk after
	 * the file name.
	 *
	 * If the same file name is repeated more than once, the file will be created and then updated
	 * with the new contents. It is guaranteed that the indexer will run for the original and then
	 * for the updated file contents.
	 */
IndexBindingResolutionTestBase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBindingResolutionTestBase.java)/**
 * When the PDOM is used to avoid parsing work (i.e. an AST is obtained which
 * is backed by the PDOM), it must be possible to resolve which binding a name
 * in the AST is referring to. If the binding is not defined in the AST fragment
 * then it is assumed to have come from a file which is already indexed.
 *
 * This class is for testing the process by which bindings are looked up in
 * the PDOM purely from AST information (i.e. without a real binding from the DOM).
 */
IndexCBindingResolutionBugs (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexCBindingResolutionBugs.java)/**
 * For testing PDOM binding resolution
 */
IndexCompositeTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexCompositeTests.java)/**
 * Tests the behavior of the IIndex API when dealing with multiple projects
 */
IndexCPPBindingResolutionBugs (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexCPPBindingResolutionBugs.java)/**
 * For testing PDOM binding resolution
 */
IndexCPPTemplateResolutionTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexCPPTemplateResolutionTest.java)/**
 * Tests for exercising resolution of template bindings against IIndex
 */
IndexGPPBindingResolutionTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexGPPBindingResolutionTest.java)/**
 * For testing resolution of bindings in C++ code with GNU extensions.
 */
IndexMultiFileTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexMultiFileTest.java)/**
 * Index tests involving multiple header and source files.
 *
 * The first line of each comment section preceding a test contains the name of the file
 * to put the contents of the section to. To request the AST of a file, put an asterisk after
 * the file name.
 */
IndexMultiVariantHeaderTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexMultiVariantHeaderTest.java)/**
 * Tests for header files included in multiple variants.
 *
 * The first line of each comment section preceding a test contains the name of the file
 * to put the contents of the section to. To request the AST of a file, put an asterisk after
 * the file name.
 */
IndexProviderManagerTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexProviderManagerTest.java)/**
 * Example usage and test for IIndexProvider
 */
IndexTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexTests.java)/**
 * Test suite for the indexer tests
 */
IndexUpdateMultiFileTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexUpdateMultiFileTest.java)/**
 * Index tests involving multiple header and source files.
 *
 * The first line of each comment section preceding a test contains the name of the file
 * to put the contents of the section to. To request the AST of a file, put an asterisk after
 * the file name.
 */
TrilogyPerformanceTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/TrilogyPerformanceTest.java)/**
 * aftodo - it would be nice to have this as a real performance test
 *
 * n.b. this is intentionally not added to any test suite at the moment
 */
BTreeExpensiveTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/BTreeExpensiveTests.java)/**
 * Tests which are too expensive to run as part of normal testing, but
 * should be run after B-tree related development.
 * <p>
 * The 'Full Checking' tests perform a full validation of the B-tree
 * invariants after each B-tree operation, and so are especially
 * expensive and cpu hungry.
 */
BTreeTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/BTreeTests.java)/**
 * Test insertion/deletion of records of a mock record type in a B-tree.
 *
 * @author aferguso
 */
CCompositeTypeTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/CCompositeTypeTests.java)/**
 * Tests for verifying whether the PDOM correctly stores information about
 * C structs and unions.
 */
CFunctionTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/CFunctionTests.java)/**
 * Tests for verifying whether the PDOM correctly stores information about
 * C functions.
 */
ClassMemberVisibilityTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/ClassMemberVisibilityTests.java)/**
 * @author Thomas Corbat
 *
 * Tests for ensuring the PDOM contains the correct visibility information for class members.
 */
ClassTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/ClassTests.java)/**
 * @author Doug Schaefer
 */
CPPClassTemplateTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/CPPClassTemplateTests.java)/**
 * Tests PDOM class template related bindings
 */
CPPCompositeTypeTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/CPPCompositeTypeTests.java)/**
 * Tests for verifying whether the PDOM correctly stores information about
 * C++ structs and unions.
 */
CPPFieldTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/CPPFieldTests.java)/**
 * Tests for verifying whether the PDOM correctly stores information about
 * C++ class data members.
 */
CPPFunctionTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/CPPFunctionTests.java)/**
 * Tests for verifying whether the PDOM correctly stores information about
 * C++ non-member functions.
 */
CPPVariableTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/CPPVariableTests.java)/**
 * Tests for verifying whether the PDOM correctly stores information about
 * C++ variable declarations.
 */
CVariableTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/CVariableTests.java)/**
 * Tests for verifying whether the PDOM correctly stores information about
 * C variable declarations.
 */
DatabaseTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/DatabaseTest.java)/**
 * Tests for the {@link Database} class.
 */
DBPropertiesTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/DBPropertiesTests.java)/**
 * Tests for the {@link DBProperties} class.
 */
DefDeclTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/DefDeclTests.java)/**
 * Test that PDOM correctly track declarations, definitions and references of objects.
 *
 * @author ELaskavaia@qnx.com
 */
EnumerationTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/EnumerationTests.java)/**
 * @author Doug Schaefer
 */
FilesOnReindexTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/FilesOnReindexTests.java)/**
 * See bugzilla
 */
GeneratePDOMApplicationTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/GeneratePDOMApplicationTest.java)/**
 * Tests the GeneratePDOMApplication
 */
IncludesTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/IncludesTests.java)/**
 * @author Doug Schaefer
 */
MethodTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/MethodTests.java)/**
 * Tests for verifying whether the PDOM correctly stores information about
 * C++ class member functions.
 */
NamespaceTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/NamespaceTests.java)/**
 * Tests for verifying whether the PDOM correctly stores information about C++ namespaces.
 *
 * @author Vivian Kong
 */
OverloadsWithinCommonHeaderTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/OverloadsWithinCommonHeaderTests.java)/**
 * Test overloaded symbols are correctly resolved when in a common header. This
 * is of interested with the Fast Indexer, as binding resolution occurs purely on
 * AST information (as opposed to adapting a non-PDOM binding to a PDOM binding)
 */
OverloadsWithinSingleTUTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/OverloadsWithinSingleTUTests.java)/**
 * Test overloaded symbols are correctly resolved when within a single translation
 * unit. This covers the case of adapting non-PDOM bindings to PDOM bindings by
 * searching for the equivalent binding within the PDOM.
 */
PDOMCPPBugsTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/PDOMCPPBugsTest.java)/**
 * Tests bugs found in the PDOM.
 */
PDOMInlineCodeTestBase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/PDOMInlineCodeTestBase.java)/**
 * @author Thomas Corbat
 *
 * Base class for PDOM tests relying on code placed in comments in front
 * of the test.
 */
PDOMLocationTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/PDOMLocationTests.java)/**
 * Tests behavior related to location representation in the PDOM
 */
PDOMPrettyPrinter (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/PDOMPrettyPrinter.java)/**
 * Dump the contents of the PDOM index to stdout (for when you need
 * a low-fidelity debugging tool)
 */
PDOMProviderTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/PDOMProviderTests.java)/**
 * Tests addition of external pdom's into the logical index
 */
PDOMSearchTest (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/PDOMSearchTest.java)/**
 * Test the correctness of C/C++ searches.
 *
 * @author Vivian Kong
 */
PDOMTestBase (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/PDOMTestBase.java)/**
 * @author Doug Schaefer
 */
PDOMTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/PDOMTests.java)/**
 * @author Doug Schaefer
 */
RaceCondition157992Test (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/RaceCondition157992Test.java)/**
 * Test case for a race condition from Bugzilla#157992
 */
TypesTests (/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/pdom/tests/TypesTests.java)/**
 * @author Doug Schaefer
 *
 */
BaseTestFramework (/core/org.eclipse.cdt.core.tests/regression/org/eclipse/cdt/core/tests/BaseTestFramework.java)/**
 * @author aniefer
 */
FailingTest (/core/org.eclipse.cdt.core.tests/regression/org/eclipse/cdt/core/tests/FailingTest.java)/**
 * Wraps a test case to check for its failure.
 * @author aniefer
 */
AISResultPrinter (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/suite/AISResultPrinter.java)/**
 * @author vhirsl
 *
 * To change the template for this generated type comment go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
AutomatedIntegrationSuite (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/suite/AutomatedIntegrationSuite.java)/**
 * @author vhirsl
 */
ProjectCreator (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/suite/ProjectCreator.java)/**
 * This is a utility class that properly creates a project for testing
 * core features. Projects are created from a template stored in a zip file
 * These templates are created using the CDT and have the proper natures
 * and build settings set up.
 *
 * @author Doug Schaefer
 */
CElementDecorator (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/CElementDecorator.java)/**
 * Allows to test decorators for Java elements
 */
DummyCProjectDescription (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/CModelMock.java)/**
	 * Dummy implementation of ICProjectDescription for testing.
	 * Feel free to override the methods you are interested to mock.
	 */
DummyCConfigurationDescription (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/CModelMock.java)/**
	 * Dummy implementation of ICConfigurationDescription for testing.
	 * Feel free to override the methods you are interested to mock.
	 */
CModelMock (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/CModelMock.java)/**
 * Collection of mock classes for testing
 */
CProjectHelper (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/CProjectHelper.java)/**
 * Helper methods to set up a ICProject.
 */
FileManager (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/FileManager.java)/**
 * @author bgheorgh
 *
 * To change the template for this generated type comment go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
Main (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/Main.java)/**
 * Startup class for Eclipse. Creates a class loader using
 * supplied URL of platform installation, loads and calls
 * the Eclipse Boot Loader.  The startup arguments are as follows:
 * <dl>
 * <dd>
 *    -application &lt;id&gt;: the identifier of the application to run
 * </dd>
 * <dd>
 *    -boot &lt;location&gt;: the location, expressed as a URL, of the platform's boot.jar
 * </dd>
 * <dd>
 *    -consolelog : enables log to the console. Handy when combined with -debug
 * </dd>
 * <dd>
 *    -data &lt;location&gt;: sets the workspace location and the default location for projects
 * </dd>
 * <dd>
 *    -debug [options file]: turns on debug mode for the platform and optionally specifies a location
 * for the .options file. This file indicates what debug points are available for a
 * plug-in and whether or not they are enabled. If a location is not specified, the platform searches
 * for the .options file under the install directory
 * </dd>
 * <dd>
 *    -dev [entries]: turns on dev mode and optionally specifies comma-separated class path entries
 * which are added to the class path of each plug-in
 * </dd>
 * <dd>
 *    -keyring &lt;location&gt;: the location of the authorization database on disk. This argument
 * has to be used together with the -password argument
 * </dd>
 * <dd>
 *    -password &lt;passwd&gt;: the password for the authorization database
 * </dd>
 * <dd>
 *    -plugins &lt;location&gt;: The arg is a URL pointing to a file which specs the plugin
 * path for the platform.  The file is in property file format where the keys are user-defined
 * names and the values are comma separated lists of either explicit paths to plugin.xml
 * files or directories containing plugins. (e.g., .../eclipse/plugins).
 * </dd>
 * <dd>
 *    -ws &lt;window system&gt;: sets the window system value
 * </dd>
 * </dl>
 */
NewMain (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/NewMain.java)/**
 * Application is responsible for calling core launch api
 */
ResourceHelper (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/ResourceHelper.java)/**
 * This class contains utility methods for creating resources
 * such as projects, files, folders etc. which are being used
 * in test fixture of unit tests.
 *
 * Some classes with similar idea worth to look at:
 * org.eclipse.core.filebuffers.tests.ResourceHelper,
 * org.eclipse.cdt.ui.tests.text.ResourceHelper.
 *
 * @since 6.0
 */
TestPluginLauncher (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/TestPluginLauncher.java)/**
 * Helper class to launch a test
 */
ModelJoiner (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/util/BaseTestCase.java)/**
	 * Some test steps need synchronizing against a CModel event. This class
	 * is a very basic means of doing that.
	 */
ExpectedStrings (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/util/ExpectedStrings.java)/**
 * @author Peter Graves
 *
 * This utility class maintains a list of strings, and as a tests finds strings
 * in a structure/list, it will maintain a list of unfound/extra strings.
 */
ExpectedStringsTests (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/util/ExpectedStringsTests.java)/**
 * @author Peter Graves
 *
 *Some simple tests to make sure our ExtraStrings class seems to work.
 */
OneSourceMultipleHeadersTestCase (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/util/OneSourceMultipleHeadersTestCase.java)/**
 * Base class for tests that use AST. The files in the test project are created from the comments
 * preceding the test case. The test project will contain a single source file called source.cpp or
 * source.c, depending on whether the project is for C++ or C, and zero or more header files called
 * header1.h, header2.h, etc. The AST is created for the source file only and can be obtained
 * by calling getAst().
 */
TestSourceReader (/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/util/TestSourceReader.java)/**
 * Utilities for reading test source code from plug-in .java sources
 */
ProcessInfo (/core/org.eclipse.cdt.core.win32/src/org/eclipse/cdt/internal/core/win32/ProcessInfo.java)/**
 * @author alain
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */
UpdateElementsJob (/core/org.eclipse.cdt.ui/browser/org/eclipse/cdt/internal/ui/browser/opentype/ElementSelectionDialog.java)/**
	 * Job to update the element list in the background.
	 */
UpdateJobListener (/core/org.eclipse.cdt.ui/browser/org/eclipse/cdt/internal/ui/browser/opentype/ElementSelectionDialog.java)/**
	 * A job listener for simple job status reporting.
	 */
ElementSelectionDialog (/core/org.eclipse.cdt.ui/browser/org/eclipse/cdt/internal/ui/browser/opentype/ElementSelectionDialog.java)/**
 * A dialog to select an element from a filterable list of elements.
 *
 * @since 4.0
 * @noextend This class is not intended to be subclassed by clients.
 */
OpenTypeAction (/core/org.eclipse.cdt.ui/browser/org/eclipse/cdt/internal/ui/browser/opentype/OpenTypeAction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
OpenTypeMessages (/core/org.eclipse.cdt.ui/browser/org/eclipse/cdt/internal/ui/browser/opentype/OpenTypeMessages.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
TypeInfoLabelProvider (/core/org.eclipse.cdt.ui/browser/org/eclipse/cdt/ui/browser/typeinfo/TypeInfoLabelProvider.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
TypeInfoMessages (/core/org.eclipse.cdt.ui/browser/org/eclipse/cdt/ui/browser/typeinfo/TypeInfoMessages.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
TypeSelectionDialog (/core/org.eclipse.cdt.ui/browser/org/eclipse/cdt/ui/browser/typeinfo/TypeSelectionDialog.java)/**
 * A dialog to select a type from a list of types.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
StyledInclude (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/codemanipulation/StyledInclude.java)/**
 * Represents a new or an existing include statement together with the style associated with it.
 */
PositionInformation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/fix/LinkedProposalPositionGroup.java)/**
	 * {@link LinkedProposalPositionGroup.PositionInformation} describes a position
	 * inside a position group. The information provided must be accurate
	 * after the document change to the proposal has been performed, but doesn't
	 * need to reflect the changed done by the linking mode.
	 */
FlowAnalyzer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/refactoring/code/flow/FlowAnalyzer.java)/**
 * Special flow analyzer to determine the return value of the extracted method
 * and the variables which have to be passed to the method.
 *
 * Note: This analyzer doesn't do a full flow analysis. For example it doesn't
 * do dead code analysis or variable initialization analysis. It analyzes
 * the first access to a variable (read or write) and if all execution paths
 * return a value.
 */
LocalVariableIndex (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/refactoring/code/flow/LocalVariableIndex.java)/**
 * Index of local variables inside a function. Each variable is assigned an integer index in normal
 * code reading order. A variable with a smaller index is declared before a variable with a larger
 * one.
 */
ResourceModifications (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/refactoring/participants/ResourceModifications.java)/**
 * A data structure to collect resource modifications.
 */
CContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/CContext.java)/**
 * A context for C/C++.
 */
CContextType (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/CContextType.java)/**
 * A context type for C/C++ code.
 */
VariableTracker (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/CFormatter.java)/**
	 * Wraps a {@link TemplateBuffer} and tracks the variable offsets while changes to the buffer
	 * occur. Whitespace variables are also tracked.
	 */
CFormatter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/CFormatter.java)/**
 * A template editor using the C/C++ formatter to format a template buffer.
 */
CodeTemplateContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/CodeTemplateContext.java)/**
 * A template context for C/C++ code and comment.
 *
 * @since 5.0
 */
CodeTemplateVariableResolver (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/CodeTemplateContextType.java)/**
	 * Resolver that resolves to the variable defined in the context.
	 */
Todo (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/CodeTemplateContextType.java)/**
	 * Resolver for task tags.
	 */
CommentContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/CommentContext.java)/**
 * A context for (block) comments.
 *
 * @since 4.0
 */
CommentContextType (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/CommentContextType.java)/**
 * A context type for comments.
 *
 * @since 4.0
 */
DocCommentContextType (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/DocCommentContextType.java)/**
 * A context type for documentation comments.
 *
 * @since 5.1
 */
ExclusivePositionUpdater (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/ExclusivePositionUpdater.java)/**
 * Position updater that takes any changes at the borders of a position to not belong to the position.
 */
FileTemplateContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/FileTemplateContext.java)/**
 * A template context for plain file resources.
 *
 * @since 5.0
 */
FileTemplateVariableResolver (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/FileTemplateContextType.java)/**
	 * Resolver that resolves to the variable defined in the context.
	 */
DateVariableResolver (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/FileTemplateContextType.java)/**
	 * This date variable evaluates to the current date in a specific format.
	 */
CoreVariableResolver (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/FileTemplateContextType.java)/**
	 * Resolver that resolves to the value of a core variable.
	 */
FileTemplateContextType (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/FileTemplateContextType.java)/**
 * A generic template context type for file resources based on content-type.
 *
 * @since 5.0
 */
TranslationUnitContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/TranslationUnitContext.java)/**
 * A translation unit context.
 */
TranslationUnitContextType (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/TranslationUnitContextType.java)/**
 * A context type for translation units.
 */
Messages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/util/Messages.java)/**
 * Helper class to format message strings.
 *
 * @since 3.1
 */
SimplePositionTracker (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/util/SimplePositionTracker.java)/**
 * A simple general purpose position tracker.
 *
 * @since 4.0
 */
Strings (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/util/Strings.java)/**
 * Helper class to provide String manipulation functions not available in standard JDK.
 */
AbstractToggleLinkingAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/AbstractToggleLinkingAction.java)/**
 * This is an action template for actions that toggle whether
 * it links its selection to the active editor.
 *
 * @since 3.0
 */
AbstractUpdateIndexHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/AbstractUpdateIndexHandler.java)/**
 * Abstract handler for {@link org.eclipse.cdt.internal.ui.actions.AbstractUpdateIndexAction}
 */
ActionMessages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/ActionMessages.java)/**
 * Class that gives access to the action messages resource bundle.
 */
AddBlockCommentAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/AddBlockCommentAction.java)/**
 * Action that encloses the editor's current selection with C block comment terminators
 * (<code>&#47;&#42;</code> and <code>&#42;&#47;</code>).
 *
 * @since 3.0
 */
EditFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/BlockCommentAction.java)/**
		 * Factory for edits which manages the creation, installation and destruction of
		 * position categories, position updaters etc. on a certain document. Once a factory has
		 * been obtained, <code>Edit</code> objects can be obtained from it which will be linked to
		 * the document by positions of one position category.
		 * <p>Clients are required to call <code>release</code> once the <code>Edit</code>s are not
		 * used any more, so the positions can be discarded.</p>
		 */
Edit (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/BlockCommentAction.java)/**
	 * An edit is a kind of <code>DocumentEvent</code>, in this case an edit instruction, that is
	 * affiliated with a <code>Position</code> on a document. The offset of the document event is
	 * not stored statically, but taken from the affiliated <code>Position</code>, which gets
	 * updated when other edits occur.
	 */
BlockCommentAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/BlockCommentAction.java)/**
 * Common block comment code.
 *
 * @since 3.0
 */
CDTQuickMenuCreator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/CDTQuickMenuCreator.java)/**
 * C/C++ editor aware quick menu creator. In the given editor, the menu will be aligned with the word
 * at the current offset.
 *
 * @since 5.2
 */
CollapseAllAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/CollapseAllAction.java)/**
 * Collapse all nodes.
 */
CopyTreeAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/CopyTreeAction.java)/**
 * Copies contents of a TreeViewer to the clipboard.
 */
CreateParserLogHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/CreateParserLogHandler.java)/**
 * Handler for {@link org.eclipse.cdt.internal.ui.actions.CreateParserLogAction}
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DeleteResConfigsHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/DeleteResConfigsHandler.java)/**
 * Handler for command that deletes resource description. (If resource description is missing
 * one from parent is normally used)
 */
ExcludeFromBuildHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/ExcludeFromBuildHandler.java)/**
 * Handler for command that excludes resources from build.
 */
ExpandAllAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/ExpandAllAction.java)/**
 * Expand all nodes.
 */
FindWordAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/FindWordAction.java)/**
 * Select the word at current cursor location and find the next occurrence.
 */
FoldingActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/FoldingActionGroup.java)/**
 * Groups the CDT folding actions.
 *
 * @since 3.0
 */
FoldingMessages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/FoldingMessages.java)/**
 * Class that gives access to the folding messages resource bundle.
 */
FreshenAllFilesHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/FreshenAllFilesHandler.java)/**
 * Handler for {@link org.eclipse.cdt.internal.ui.actions.FreshenIndexAction}
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CompareMarker (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/GotoNextBookmarkAction.java)/**
	 * Private class to handle comparison of markers using their line numbers.
	 */
GotoNextBookmarkAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/GotoNextBookmarkAction.java)/**
 * Find and goto the next bookmark in the currently selected file.
 */
GoToNextPreviousMemberAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/GoToNextPreviousMemberAction.java)/**
 * Gives possibility to move fast between member elements of the c/c++ source.
 *
 * @author P.Tomaszewski
 */
IndentAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/IndentAction.java)/**
 * Indents a line or range of lines in a C document to its correct position. No complete
 * AST must be present, the indentation is computed using heuristics. The algorithm used is fast for
 * single lines, but does not store any information and therefore not so efficient for large line
 * ranges.
 *
 * @see org.eclipse.cdt.internal.ui.text.CHeuristicScanner
 * @see org.eclipse.cdt.internal.ui.text.CIndenter
 */
RebuildIndexHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/RebuildIndexHandler.java)/**
 * Handler for {@link org.eclipse.cdt.internal.ui.actions.RebuildIndexAction}
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
RemoveBlockCommentAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/RemoveBlockCommentAction.java)/**
 * Action that removes the enclosing comment marks from a C block comment.
 *
 * @since 3.0
 */
SelectAllAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/SelectAllAction.java)/**
 * This action selects all entries currently showing in view.
 */
UpdateIndexWithModifiedFilesHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/UpdateIndexWithModifiedFilesHandler.java)/**
 * Handler for {@link org.eclipse.cdt.internal.ui.actions.UpdateIndexWithModifiedFilesAction}
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
UpdateUnresolvedIncludesHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/UpdateUnresolvedIncludesHandler.java)/**
 * Handler for {@link org.eclipse.cdt.internal.ui.actions.UpdateIndexWithModifiedFilesAction}
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
WorkbenchRunnableAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/actions/WorkbenchRunnableAdapter.java)/**
 * An <code>IRunnableWithProgress</code> that adapts and  <code>IWorkspaceRunnable</code>
 * so that is can be executed inside <code>IRunnableContext</code>. <code>OperationCanceledException</code>
 * thrown by the adapted runnable are caught and re-thrown as a <code>InterruptedException</code>.
 */
BaseCElementContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java)/**
 * A base content provider for C elements. It provides access to the
 * C element hierarchy without listening to changes in the C model.
 * Use this class when you want to present the C elements
 * in a modal dialog or wizard.
 * <p>
 * The following C element hierarchy is surfaced by this content provider:
 * <p>
 * <pre>
C model (<code>ICModel</code>)<br>
   C project (<code>ICProject</code>)<br>
      Source root (<code>ISourceRoot</code>)<br>
      C Container(folders) (<code>ICContainer</code>)<br>
      Translation unit (<code>ITranslationUnit</code>)<br>
      Binary file (<code>IBinary</code>)<br>
      Archive file (<code>IArchive</code>)<br>
      Non C Resource file (<code>Object</code>)<br>

 * </pre>
 */
BuildPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/build/BuildPreferencePage.java)/**
 * The page for top-level build preferences
 */
BuildConsole (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsole.java)/**
 * CDT Build console.
 *
 */
BuildConsoleFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsoleFactory.java)/**
 * A console factory to allow the user to open the build console
 * before actually doing a build.
 */
BuildConsolePageParticipant (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsolePageParticipant.java)/**
 * Attached to extension point org.eclipse.ui.console.consolePageParticipants to notify
 * BuildConsole that a new page has become visible.
 */
LogFile (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsolePartitioner.java)/**
	 * Encapsulation of variables for log files that must be accessed
	 * synchronized on fLogFile. The key part we want to synchronize is the
	 * writes to fLogStream so that different sources (stderr/stdout) don't get
	 * unnecessarily intermixed.
	 */
UpdateUIData (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsolePartitionerEditData.java)/**
	 * Return data for an update.
	 */
InternalDocumentListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsoleViewer.java)/**
	 * Internal document listener.
	 */
BuildOutputStream (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildOutputStream.java)/**
 * Output stream which put all output to BuildConsolePartitioner
 * and informs it when stream is closed
 */
CBuildConsole (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/CBuildConsole.java)/**
 * CDT console adaptor providing output streams. The adaptor provides means of
 * access to UI plugin console.
 */
CopyBuildLogAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/CopyBuildLogAction.java)/**
 * Action to copy build log from working file to a user selected file.
 */
DocumentMarkerManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/DocumentMarkerManager.java)/**
 * Manages current position of highlighted error in BuildConsole
 */
GlobalBuildConsole (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/GlobalBuildConsole.java)/**
 * Customized BuildConsole for the global console that displays its title differently
 */
GlobalBuildConsoleManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/GlobalBuildConsoleManager.java)/**
 * Build console manager managing the global CDT build console.
 * Singleton.
 *
 */
MultiBuildConsoleAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/MultiBuildConsoleAdapter.java)/**
 * Adapter that wraps a project console and the global console to allow builders
 * to send their build output to a single IConsole object
 */
NextErrorAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/NextErrorAction.java)/**
 * Advance console document to the next error reported by compiler
 */
PreviousErrorAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/PreviousErrorAction.java)/**
 * Retard console document to the previous error reported by compiler
 */
ShowErrorAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/ShowErrorAction.java)/**
 * Set whether to show error in editor when moving to next/prev error in Build Console
 */
WrapLinesAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/WrapLinesAction.java)/**
 * Toggles word wrapping of the console
 */
JobRunnableWithProgressAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BusyCursorJobRunner.java)/**
	 * Adapts a {@link Job} to be an {@link IRunnableWithProgress}.
	 */
BusyCursorJobRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BusyCursorJobRunner.java)/**
 * Synchronously executes a {@link Job} while allowing user to cancel it if it takes too long.
 */
CActionFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/CActionFilter.java)/**
 * An implementation of the IWorkbenchAdapter for CElements.
 */
CHContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/CHContentProvider.java)/**
 * This is the content provider for the call hierarchy.
 */
CHEProviderSettings (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/CHEProviderSettings.java)/**
 * The Call Hierarchy Extension provider Settings
 * Responsible to load all available extensions for EXTENSION_POINT_ID
 * */
CHHistoryAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/CHHistoryAction.java)/**
 * Action used for the include browser forward / backward buttons
 */
CHMultiDefChildNode (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/CHMultiDefChildNode.java)/**
 * Represents a child of a node with multiple definitions.
 */
CHNode (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/CHNode.java)/**
 * Represents a node in the include browser
 */
CHProviderManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/CHProviderManager.java)/**
 * Maintains a list of extensions implementing the org.eclipse.cdt.ui.callHierarchyProviders
 * extension point.
 */
CHQueries (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/CHQueries.java)/**
 * Access to high level queries in the index.
 * @since 4.0
 */
CHRemoveFromView (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/CHRemoveFromView.java)/**
 * Action to remove items from the C++ Call Hierarchy View.
 */
CHViewPart (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/CHViewPart.java)/**
 * The view part for the include browser.
 */
ReferenceVisitor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/callhierarchy/ReferenceVisitor.java)/**
 * Visitor to find references in a given range of the source code.
 * @since 4.0
 */
CElementAdapterFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/CElementAdapterFactory.java)/**
 * Implements basic UI support for C elements.
 */
AbstractMergeViewer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/compare/AbstractMergeViewer.java)/**
 * Abstract implementation of a merge viewer.
 */
AsmContentViewerCreator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/compare/AsmContentViewerCreator.java)/**
 * Creates a merge viewer for assembly code.
 */
AsmMergeViewer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/compare/AsmMergeViewer.java)/**
 * A merge viewer for assembly code.
 */
CContentViewerCreator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/compare/CContentViewerCreator.java)/**
 * Required when creating a CMergeViewer from the plugin.xml file.
 */
CMergeViewer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/compare/CMergeViewer.java)/**
 * A merge viewer for C/C++ code.
 */
CNode (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/compare/CNode.java)/**
 *
 */
CStructureCreator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/compare/CStructureCreator.java)/**
 * A structure creator for C/C++ translation units.
 */
CStructureCreatorVisitor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/compare/CStructureCreatorVisitor.java)/**
 * AST visitor to create compare structure.
 *
 * @since 5.0
 */
CPluginImages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/CPluginImages.java)/**
 * This is internal class with some helper methods for handling images.
 * The use of this class for images managed by registry is deprecated,
 * use public API class {@link CDTSharedImages} for that.
 */
CProjectAdapterFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/CProjectAdapterFactory.java)/**
 * Adapter factory to adapt <code>ICProject</code> to <code>IProject</code>.
 *
 * @since 4.0
 */
CStatusConstants (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/CStatusConstants.java)/**
 * Defines status codes relevant to the C UI plug-in. When a
 * Core exception is thrown, it contain a status object describing
 * the cause of the exception. The status objects originating from the
 * C UI plug-in use the codes defined in this interface.
 */
CUIStatus (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/CUIStatus.java)/**
 * Convenience class for error exceptions thrown inside JavaUI plugin.
 */
CDTBuildAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/BuildGroup.java)/**
	 * An internal class which overrides the 'shouldPerformResourcePruning'
	 * method so that referenced projects aren't build twice . (The CDT
	 * managedbuild builds CDT reference project configuration as part of
	 * building the top-level project).
	 *
	 * Also ensure that files in referenced projects are saved automatically
	 * before build.
	 */
BuildGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/BuildGroup.java)/**
 * This is the action group for workspace actions such as Build
 */
CopyAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CopyAction.java)/**
 * Standard action for copying the currently selected resources to the clipboard.
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @since 2.0
 */
CView (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CView.java)/**
 *
 * CView
 *
 */
CViewAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewAction.java)/**
 * Superclass of all actions provided by the cview.
 */
CViewActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewActionGroup.java)/**
 * This is the action group for all the view actions.
 * It delegates to several subgroups for most of the actions.
 *
 * @see GotoActionGroup
 * @see OpenFileGroup
 * @see RefactorActionGroup
 *
 */
CViewContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java)/**
 * CViewContentProvider
 */
CViewLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewLabelProvider.java)/**
 * Label provider for "C/C++ Projects" view.
 */
CViewMoveAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewMoveAction.java)/**
 * The ResourceNavigatorMoveAction is a resource move that aso updates the navigator
 * to show the result of the move.
 * It also delegates to MoveProjectAction as needed.
 *
 * @since 2.0
 */
CViewRenameAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewRenameAction.java)/**
 * The ResourceNavigatorRenameAction is the rename action used by the
 * ResourceNavigator that also allows updating after rename.
 * @since 2.0
 */
GotoActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/GotoActionGroup.java)/**
 * This is the action group for the goto actions.
 */
IncludeRefContainer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeRefContainer.java)/**
 * IncludeRefContainer
 */
IncludeReferenceProxy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeReferenceProxy.java)/**
 * @author User
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
LibraryRefContainer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/LibraryRefContainer.java)/**
 * VirtualGrouping
 */
MainActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/MainActionGroup.java)/**
 * The main action group for the cview. This contains a few actions and several
 * subgroups.
 */
OpenFileGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/OpenFileGroup.java)/**
 * This is the action group for the open actions.
 */
OpenProjectGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/OpenProjectGroup.java)/**
 * This is the action group for actions such as Refresh Local, and Open/Close
 * Project.
 */
RefactorActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/RefactorActionGroup.java)/**
 * This is the action group for refactor actions,
 * including global action handlers for copy, paste and delete.
 *
 */
ToggleLinkingAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/ToggleLinkingAction.java)/**
 * This action toggles whether this navigator links its selection to the active
 * editor.
 *
 * @since 2.0
 */
CWorkbenchAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/CWorkbenchAdapter.java)/**
 * An implementation of the IWorkbenchAdapter for CElements.
 */
AbstractElementListSelectionDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/AbstractElementListSelectionDialog.java)/**
 * A class to select one or more elements out of an indexed property
 */
AbstractPathOptionBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/AbstractPathOptionBlock.java)/**
 * Abstract block for C/C++ Project Paths page for 3.X projects.
 */
ArchiveFileFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/ArchiveFileFilter.java)/**
 * Viewer filter for archive selection dialogs.
 * Archives are files with file extension "a",  "dll", "so.
 * The filter is not case sensitive.
 *
 * @deprecated as of CDT 4.0. This class was used for property pages
 * for 3.X style projects.
 */
CPathBasePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathBasePage.java)/**
 * Abstract Option Page for C/C++ Project Paths page for 3.X projects.
 */
PathEntryContainerPageAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathContainerDescriptor.java)/**
	 * Adapter class to adapter deprecated ICPathContainerPage to new IPathEntryContainerPage
	 * @author Dave
	 * @deprecated
	 */
CPathContainerEntryPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathContainerEntryPage.java)/**
 * Path Containers tab for C/C++ Project Paths page for 3.X projects.
 *
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 */
CPathFilterPathPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathFilterPathPage.java)/**
 * @deprecated as of CDT 4.0. This class does not seem to be used,
 * probably remnant of 3.X style projects or earlier.
 */
CPathIncludeSymbolEntryBasePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryBasePage.java)/**
 * Abstract DialogPage for C/C++ Project Paths page for 3.X projects.
 */
CPathIncludeSymbolEntryPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPage.java)/**
 * DialogPage for C/C++ Project Paths page for 3.X projects.
 */
CPElementPerFileFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPerFilePage.java)/**
	 * Per file specific CPElementFilter
	 *
	 * @author vhirsl
	 */
CPathIncludeSymbolEntryPerFilePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPerFilePage.java)/**
 * DialogPage for C/C++ Project Paths page for 3.X projects.
 */
CPathLibraryEntryPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathLibraryEntryPage.java)/**
 * Libraries tab for C/C++ Project Paths page for 3.X projects.
 *
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 */
CPathOrderExportPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathOrderExportPage.java)/**
 * Export tab for C/C++ Project Paths page for 3.X projects.
 *
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 */
CPathOutputEntryPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathOutputEntryPage.java)/**
 * Output tab for C/C++ Project Paths page for 3.X projects.
 *
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 */
CPathProjectsEntryPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathProjectsEntryPage.java)/**
 * Projects tab for C/C++ Project Paths page for 3.X projects.
 *
 * @deprecated as of CDT 4.0. This tab was used for property pages
 * for 3.X style projects.
 */
CPathPropertyPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathPropertyPage.java)/**
 * C/C++ Project Paths page for 3.X projects.
 *
 * @deprecated as of CDT 4.0. This property page was used to set properties
 * "C/C++ Make Project" for 3.X style projects.
 * This page lives dormant as of writing (CDT 7.0) but may get activated for
 * {@code org.eclipse.cdt.make.core.makeNature} project (3.X style).
 */
CPathSourceEntryPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathSourceEntryPage.java)/**
 * Source tab for C/C++ Project Paths page for 3.X projects.
 *
 * @deprecated as of CDT 4.0. This tab was used for property pages
 * for 3.X style projects.
 */
CPathTabBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathTabBlock.java)/**
 * Block for C/C++ Project Paths page for 3.X projects.
 *
 * @deprecated as of CDT 4.0. This option block was for property pages
 * for 3.X style projects.
 */
CPElementFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPElementFilter.java)/**
 * Viewer filter for archive selection dialogs. Archives are files with file extension '.so', '.dll' and '.a'. The filter is not
 * case sensitive.
 */
CPElementSorter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPElementSorter.java)/**
 * @deprecated as of CDT 4.0. This class was used for property pages
 * for 3.X style projects.
 */
FolderSelectionDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/FolderSelectionDialog.java)/**
 * @deprecated as of CDT 4.0. This class was used for property pages
 * for 3.X style projects.
 */
IncludesSymbolsPropertyPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/IncludesSymbolsPropertyPage.java)/**
 * @noreference This class is not intended to be referenced by clients.
 */
MultipleFolderSelectionDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/MultipleFolderSelectionDialog.java)/**
 * @deprecated as of CDT 4.0. This class was used for property pages
 * for 3.X style projects.
 */
NewIncludesSymbolsTabBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/NewIncludesSymbolsTabBlock.java)/**
 * Block for C/C++ Include Paths and Symbols page for 3.X projects.
 */
NewSourceFolderDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/NewSourceFolderDialog.java)/**
 * @deprecated as of CDT 4.0. This class was used for property pages
 * for 3.X style projects.
 */
SourceAttachmentBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/SourceAttachmentBlock.java)/**
 * UI to set the source attachment archive and root. Same implementation for both setting attachments for libraries from variable
 * entries and for normal (internal or external) jar.
 *
 * @deprecated as of CDT 4.0. This class was used for property pages
 * for 3.X style projects.
 */
SourceAttachmentDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/SourceAttachmentDialog.java)/**
 * A dialog to configure the source attachment of a library (library and zip archive).
 *
 * @deprecated as of CDT 4.0. This class was used for property pages
 * for 3.X style projects.
 */
ElementListSelectionDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/ElementListSelectionDialog.java)/**
 * A class to select one or more elements out of an indexed property
 */
FormattingScopeDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/FormattingScopeDialog.java)/**
 * Asks user how formatting of an empty selection should be interpreted.
 */
MessageLine (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/MessageLine.java)/**
 * A message line. It distinguishes between "normal" messages and errors.
 * Setting an error message hides a currently displayed message until
 * <code>clearErrorMessage</code> is called.
 */
OptionalMessageDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/OptionalMessageDialog.java)/**
 * This is a <code>MessageDialog</code> which allows the user
 * to choose that the dialog isn't shown again the next time.
 */
ResizableStatusDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/ResizableStatusDialog.java)/**
 * A resizable {@link StatusDialog} that preserves its dimensions between invocations.
 */
SelectionList (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/SelectionList.java)/**
 * A selection widget that consists of a list and a text entry field. The list
 * of elements presented are limited to the pattern entered into the text entry
 * field.
 */
SelectionStatusDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/SelectionStatusDialog.java)/**
 * An abstract base class for dialogs with a status bar and OK/Cancel buttons.
 * The status message must be passed over as StatusInfo object and can be
 * an error, warning or ok. The OK button is enabled / disabled depending
 * on the status.
 */
StatusInfo (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/StatusInfo.java)/**
 * A settable IStatus
 * Can be an error, warning, info or ok. For error, info and warning states,
 * a message describes the problem
 */
StatusUtil (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/StatusUtil.java)/**
 * A utility class to work with IStatus.
 */
TableTextCellEditor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/TableTextCellEditor.java)/**
 * <code>TableTextCellEditor</code> is a copy of TextCellEditor, with the
 * following changes:
 *
 * <ul>
 * <li> modify events are sent out as the text is changed, and not only after
 * editing is done </li>
 *
 * <li>a content assistant is supported</li>
 *
 * <li>the user can go to the next/previous row with up and down keys</li>
 * </ul>
 */
TextFieldNavigationHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/TextFieldNavigationHandler.java)/**
 * Support for camelCase-aware sub-word navigation in dialog fields.
 */
TypedElementSelectionValidator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/TypedElementSelectionValidator.java)/**
 * Implementation of a <code>ISelectionValidator</code> to validate the
 * type of an element.
 * Empty selections are not accepted.
 */
TypedViewerFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/TypedViewerFilter.java)/**
 * Viewer filter used in selection dialogs.
 */
CDTViewerDragAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/CDTViewerDragAdapter.java)/**
 * CDTViewerDragAdapter
 */
CDTViewerDropAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/CDTViewerDropAdapter.java)/**
 * A drag and drop adapter to be used together with structured viewers.
 * The adapater delegates the <code>dragEnter</code>, <code>dragOperationChanged
 * </code>, <code>dragOver</code> and <code>dropAccept</code> method to the
 * <code>validateDrop</code> method. Furthermore it adds location feedback.
 */
DelegatingDragAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/DelegatingDragAdapter.java)/**
 * A delegating drag adapter negotiates between a set of <code>TransferDragSourceListener</code>s
 * On <code>dragStart</code> the adapter determines the listener to be used for any further
 * <code>drag*</code> callbacks.
 */
DelegatingDropAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/DelegatingDropAdapter.java)/**
 * DelegatingDropAdapter
 */
FileTransferDropAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/FileTransferDropAdapter.java)/**
 * FileTransferDropAdapter
 */
ResourceTransferDragAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/ResourceTransferDragAdapter.java)/**
 * A drag adapter that transfers the current selection as </code>
 * IResource</code>. Only those elements in the selection are part
 * of the transfer which can be converted into an <code>IResource
 * </code>.
 */
ResourceTransferDropAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/ResourceTransferDropAdapter.java)/**
 * ResourceTransferDropAdapter
 */
TextViewerDragAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/TextViewerDragAdapter.java)/**
 * Drag source adapter for text selections in ITextViewers.
 *
 * @since 4.0
 */
TransferDragSourceListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/TransferDragSourceListener.java)/**
 * A special drag source listener which is typed with a <code>TransferData</code>.
 */
TransferDropTargetListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/TransferDropTargetListener.java)/**
 * TransferDropTargetListener
 */
DocumentInputStream (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/DocumentInputStream.java)/**
 * Input stream which reads from a document
 */
COutlineLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AbstractCModelOutlinePage.java)/**
	 * The default label provider for the outline.
	 */
OutlineTreeViewer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AbstractCModelOutlinePage.java)/**
	 * A specialized tree viewer for outline content.
	 *
	 * @since 5.0
	 */
MacroGroupingAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AbstractCModelOutlinePage.java)/**
	 * This action toggles macro grouping.
	 *
	 * @since 5.2
	 */
ToggleLinkingAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AbstractCModelOutlinePage.java)/**
	 * This action toggles whether this C Outline page links
	 * its selection to the active editor.
	 *
	 * @since 3.0
	 */
AbstractCModelOutlinePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AbstractCModelOutlinePage.java)/**
 * Abstract outline page based on CModel.
 *
 * @since 5.0
 */
AddIncludeAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AddIncludeAction.java)/**
 * Adds an '#include' statement and, optionally, a 'using' declaration necessary to resolve a name.
 */
AsmContentOutlinePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/asm/AsmContentOutlinePage.java)/**
 * Content outline page for assembly translation units.
 *
 * @since 5.0
 */
AsmDocumentSetupParticipant (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/asm/AsmDocumentSetupParticipant.java)/**
 * Document setup participant for asesembly content.
 */
AsmLabelRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/asm/AsmLabelRule.java)/**
 * A word rule matching assembly labels.
 *
 * @since 5.0
 */
AsmPreprocessorScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/asm/AsmPreprocessorScanner.java)/**
 * A preprocessor directive scanner for Asm source.
 *
 * @since 4.0
 */
AsmReconcilingStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/asm/AsmReconcilingStrategy.java)/**
 * Reconciling strategy for assembly translation units.
 *
 * @since 5.0
 */
EditorSelectionChangedListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/asm/AsmTextEditor.java)/**
	 * Updates the outline page selection and this editor's range indicator.
	 */
AsmTextEditor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/asm/AsmTextEditor.java)/**
 * Assembly text editor.
 */
AsmTextTools (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/asm/AsmTextTools.java)/**
 * This type shares all scanners and the color manager between
 * its clients.
 *
 * @deprecated No longer used within CDT.
 */
AsmWordDetector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/asm/AsmWordDetector.java)/**
 * A C aware word detector.
 */
WAIT_FLAG (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ASTProvider.java)/**
	 * Wait flag.
	 */
ActivationListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ASTProvider.java)/**
	 * Internal activation listener.
	 */
ASTProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ASTProvider.java)/**
 * Provides a shared AST for clients. The shared AST is
 * the AST of the active CEditor's input element.
 *
 * @since 4.0
 */
CAnnotationIterator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CAnnotationIterator.java)/**
 * Filters problems based on their types.
 */
NamespaceGroupingAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CContentOutlinePage.java)/**
	 * This action toggles namespace grouping
	 *
	 * @since 5.2
	 */
MemberGroupingAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CContentOutlinePage.java)/**
	 * This action toggles member definition grouping
	 *
	 * @since 5.2
	 */
CContentOutlinePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CContentOutlinePage.java)/**
 * Outline page for C/C++ translation units.
 */
ElementChangedListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CContentOutlinerProvider.java)/**
	 * The element change listener of the C outline viewer.
	 *
	 * @see IElementChangedListener
	 */
PropertyListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CContentOutlinerProvider.java)/**
	 *
	 * Property change listener.
	 *
	 * @author P.Tomaszewski
	 */
CContentOutlinerProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CContentOutlinerProvider.java)/**
 * Manages contents of the outliner.
 */
TranslationUnitInfo (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CDocumentProvider.java)/**
	 * Bundle of all required informations to allow working copy management.
	 */
ProblemAnnotation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CDocumentProvider.java)/**
	 * Annotation representing an {@code IProblem}.
	 */
ReverseMap (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CDocumentProvider.java)/**
	 * Internal structure for mapping positions to some value.
	 * The reason for this specific structure is that positions can
	 * change over time. Thus a lookup is based on value and not
	 * on hash value.
	 */
ProblemMarkerUpdater (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CDocumentProvider.java)/**
	 * A marker updater which removes problems markers with length 0.
	 */
TranslationUnitAnnotationModel (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CDocumentProvider.java)/**
	 * Annotation model dealing with c marker annotations and temporary problems.
	 * Also acts as a problem requester for its translation unit. Initially inactive.
	 * Must be explicitly activated.
	 */
CDocumentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CDocumentProvider.java)/**
 * A document provider for C/C++ content.
 */
CDocumentSetupParticipant (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CDocumentSetupParticipant.java)/**
 * CDocumentSetupParticipant
 */
GotoMarkerAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * A slightly modified implementation of IGotomarker compared to AbstractDecoratedTextEditor.
	 *
	 * @since 5.0
	 */
ExclusivePositionUpdater (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Position updater that takes any changes at the borders of a position to not belong to the position.
	 *
	 * @since 4.0
	 */
EditorSelectionChangedListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Updates the C outline page selection and this editor's range indicator.
	 *
	 * @since 3.0
	 */
NextSubWordAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Text navigation action to navigate to the next sub-word.
	 *
	 * @since 4.0
	 */
NavigateNextSubWordAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Text navigation action to navigate to the next sub-word.
	 *
	 * @since 4.0
	 */
DeleteNextSubWordAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Text operation action to delete the next sub-word.
	 *
	 * @since 4.0
	 */
SelectNextSubWordAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Text operation action to select the next sub-word.
	 *
	 * @since 4.0
	 */
PreviousSubWordAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Text navigation action to navigate to the previous sub-word.
	 *
	 * @since 4.0
	 */
NavigatePreviousSubWordAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Text navigation action to navigate to the previous sub-word.
	 *
	 * @since 4.0
	 */
DeletePreviousSubWordAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Text operation action to delete the previous sub-word.
	 *
	 * @since 4.0
	 */
SelectPreviousSubWordAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Text operation action to select the previous sub-word.
	 *
	 * @since 4.0
	 */
OccurrencesAnnotationUpdaterJob (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Updates occurrence annotations.
	 *
	 * @since 5.0
	 */
OccurrencesFinderJobCanceler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
	 * Cancels the occurrences finder job upon document changes.
	 *
	 * @since 5.0
	 */
CEditor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditor.java)/**
 * C/C++ source editor.
 */
CEditorImageProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditorErrorTickUpdater.java)/**
	 * Provider for the editor title image. Marks external files with a folder overlay.
	 *
	 * @since 5.0
	 */
CEditorErrorTickUpdater (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CEditorErrorTickUpdater.java)/**
 * The <code>JavaEditorErrorTickUpdater</code> will register as a AnnotationModelListener
 * on the annotation model of a Java Editor and update the title images when the annotation
 * model changed.
 */
CElementHyperlink (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CElementHyperlink.java)/**
 * C element hyperlink.
 *
 * @since 3.0
 */
CElementIncludeResolver (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CElementIncludeResolver.java)/**
 * Handles resolution of an include represented as a CElement (IInclude).
 */
CSelectMarkerRulerAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CSelectMarkerRulerAction.java)/**
 * A special select marker ruler action which activates quick fix if clicked on a quick fixable problem.
 * <p>
 * Originally copied from org.eclipse.jdt.internal.ui.javaeditor.JavaSelectMarkerRulerAction
 */
CSourceViewer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CSourceViewer.java)/**
 * Source viewer for C/C++ et al.
 */
CSourceViewerDecorationSupport (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CSourceViewerDecorationSupport.java)/**
 * <code>SourceViewerDecorationSupport</code> with extension(s):
 * <ul>
 *   <li>inactive code painter</li>
 * </ul>
 *
 * @author anton.leherbauer@windriver.com
 *
 * @since 4.0
 */
CStorageDocumentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CStorageDocumentProvider.java)/**
 * CStorageDocumentProvider
 */
CTemplatesPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CTemplatesPage.java)/**
 * The templates page for the C editor.
 *
 * @since 5.2
 */
CustomBufferFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CustomBufferFactory.java)/**
 * CustomBufferFactory
 */
BinaryFileEditorInput (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/DefaultBinaryFileEditor.java)/**
	 * A storage editor input for binary files.
	 */
BinaryFileDocumentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/DefaultBinaryFileEditor.java)/**
	 * A storage document provider for binary files.
	 */
DefaultBinaryFileEditor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/DefaultBinaryFileEditor.java)/**
 * A readonly editor to view binary files. This default implementation displays the GNU objdump output of the
 * binary as plain text. If no objdump output can be obtained, the binary content is displayed.
 */
NullBuffer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/DocumentAdapter.java)/**
	 * Internal implementation of a NULL instanceof IBuffer.
	 */
DocumentSetCommand (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/DocumentAdapter.java)/**
	 *  Executes a document set content call in the ui thread.
	 */
DocumentReplaceCommand (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/DocumentAdapter.java)/**
	 * Executes a document replace call in the ui thread.
	 */
DocumentAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/DocumentAdapter.java)/**
 * Adapts <code>IDocument</code> to <code>IBuffer</code>. Uses the
 * same algorithm as the text widget to determine the buffer's line delimiter.
 * All text inserted into the buffer is converted to this line delimiter.
 * This class is <code>public</code> for test purposes only.
 *
 * This class is similar to the JDT DocumentAdapter class.
 */
PreferenceChangeListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/EclipsePreferencesAdapter.java)/**
	 * Preference change listener. Listens for events preferences
	 * fires a {@link org.eclipse.jface.util.PropertyChangeEvent}
	 * on this adapter with arguments from the received event.
	 */
EclipsePreferencesAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/EclipsePreferencesAdapter.java)/**
 * Adapts an options {@link IEclipsePreferences} to {@link org.eclipse.jface.preference.IPreferenceStore}.
 * <p>
 * This preference store is read-only i.e. write access
 * throws an {@link java.lang.UnsupportedOperationException}.
 * </p>
 */
EditorHighlightingSynchronizer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/EditorHighlightingSynchronizer.java)/**
 * Turns off occurrences highlighting on a C editor until linked mode is left.
 *
 * @since 5.0
 */
ICAnnotation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ICAnnotation.java)/**
 * ICAnnotation
 *
 * Interface of annotations representing markers
 * and problems.
 *
 * @see org.eclipse.core.resources.IMarker
 * @see org.eclipse.cdt.core.parser.IProblem
 */
ICEditorActionDefinitionIds (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ICEditorActionDefinitionIds.java)/**
 * Defines the definition IDs for the C editor actions.
 *
 * @since 2.1
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
*/
HighlightPosition (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/InactiveCodeHighlighting.java)/**
	 * Implementation of <code>IRegion</code> that can be reused
	 * by setting the offset and the length.
	 */
InactiveCodeHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/InactiveCodeHighlighting.java)/**
 * Paints code lines disabled by preprocessor directives (#ifdef etc.)
 * with a configurable background color (default light gray).
 *
 * @see LineBackgroundPainter
 * @since 4.0
 */
IndentResult (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/IndentUtil.java)/**
	 * The result of an indentation operation. The result may be passed to
	 * subsequent calls to
	 * {@link IndentUtil#indentLines(IDocument, ILineRange, ICProject, IndentUtil.IndentResult) indentLines}
	 * to obtain consistent results with respect to the indentation of
	 * line-comments.
	 */
IndentUtil (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/IndentUtil.java)/**
 * Utility that indents a number of lines in a document.
 */
IndexUpdateRequestor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/IndexUpdateRequestor.java)/**
 * A controller for on-demand indexing of files opened in C/C++ editors.
 */
InteractiveHeaderChooser (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/InteractiveHeaderChooser.java)/**
 * Dialog-based header chooser.
 */
IPostSaveListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/IPostSaveListener.java)/**
 * Listener that is informed when a translation unit is saved.
 * <p>
 * The difference between this interface and JDT's {@code IPostSaveListener} is that CDT does not
 * allow post-save listeners to make changes to the saved file.
 * </p>
 *
 * @since 5.4
 */
IProblemAnnotation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/IProblemAnnotation.java)/**
 * Interface of annotations representing problems.
 */
ITranslationUnitEditorInput (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ITranslationUnitEditorInput.java)/**
 * ITranslationUnitEditorInput
 */
OrganizeIncludesAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/OrganizeIncludesAction.java)/**
 * Organizes the include directives and forward declarations of a source or header file.
 */
OverrideIndicatorImageProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/OverrideIndicatorImageProvider.java)/**
 * @author Tomasz Wesolowski
 */
ProblemAnnotationIterator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ProblemAnnotationIterator.java)/**
 * Filters problems based on their types.
 */
SelectionToDeclarationJob (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SelectionToDeclarationJob.java)/**
 * Based on class OpenDeclarationsJob
 * @author Alvaro Sanchez-Leon
 * @since 5.6
 */
SemanticHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlighting.java)/**
 * Semantic highlighting.
 * Cloned from JDT.
 *
 * @since 4.0
 */
HighlightingStyle (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightingManager.java)/**
	 * Highlighting style.
	 */
HighlightedPosition (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightingManager.java)/**
	 * Highlighted Positions.
	 */
HighlightedRange (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightingManager.java)/**
	 * Highlighted ranges.
	 */
SemanticHighlightingManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightingManager.java)/**
 * Semantic highlighting manager.
 * Cloned from JDT.
 *
 * @since 4.0
 */
HighlightingPositionUpdater (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightingPresenter.java)/**
	 * Semantic highlighting position updater.
	 */
SemanticHighlightingPresenter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightingPresenter.java)/**
 * Semantic highlighting presenter - UI thread implementation.
 * Cloned from JDT.
 *
 * @since 4.0
 */
AbstractPositionCollector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightingReconciler.java)/**
	 * Collects positions from the AST.
	 * This abstract version exists so it can be reused by the previewer widget.
	 * The concrete version used by the reconciler follows.
	 */
SemanticHighlightingReconciler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightingReconciler.java)/**
 * Semantic highlighting reconciler - Background thread implementation.
 * Cloned from JDT.
 *
 * @since 4.0
 */
StaticFieldHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for static fields.
	 */
FieldHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for fields.
	 */
MethodDeclarationHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for method declarations.
	 */
StaticMethodInvocationHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for static method invocations.
	 */
MethodHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for methods.
	 */
FunctionDeclarationHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for function declarations.
	 */
FunctionHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for functions.
	 */
LocalVariableDeclarationHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for local variable declarations.
	 */
LocalVariableHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for local variables.
	 */
GlobalVariableHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for global variables.
	 */
ParameterVariableHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for parameter variables.
	 */
TemplateParameterHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for template parameters.
	 */
ClassHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for classes.
	 */
EnumHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for enums.
	 */
EnumClassHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for enum classes.
	 */
MacroReferenceHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for macro references.
	 */
MacroDefinitionHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for macro definitions.
	 */
TypedefHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for typedefs.
	 */
NamespaceHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for namespaces.
	 */
LabelHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for labels.
	 */
EnumeratorHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for enumerators.
	 */
ProblemHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for problems.
	 */
ExternalSDKHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for external SDK references.
	 */
OverloadedOperatorHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for functions.
	 */
VariablePassedByNonconstRefHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for variables passed by non-const reference.
	 *
	 * The purpose of having a highlighting for this is that there's an important
	 * semantic difference between passing a variable by non-const reference
	 * (where the called function can modify the original variable) and passing
	 * a variable by const reference or value (where it cannot), but syntactically
	 * these two forms of passing look the same at the call site.
	 */
ContextSensitiveKeywordHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for context-sensitive keywords.
	 *
	 * This does not get its own color and style; rather, it uses
	 * the color and style of the 'Keyword' syntactic highlighting.
	 */
ContextSensitiveUDLHighlighting (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
	 * Semantic highlighting for context-sensitive UDL like operator""if(...).
	 */
SemanticHighlightings (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightings.java)/**
 * Semantic highlightings.
 * Derived from JDT.
 *
 * @since 4.0
 */
SemanticHighlightingWithOwnPreference (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticHighlightingWithOwnPreference.java)/**
 * A semantic highlighting which has its own preferences for specifying
 * its color and style.
 *
 * Semantic highlightings not deriving from this class are associated
 * with a syntactic highlighting, and use the color and style of that
 * syntactic highlighting.
 */
SemanticToken (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SemanticToken.java)/**
 * Semantic token.
 * Cloned from JDT.
 *
 * @since 4.0
 */
SortLinesAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SortLinesAction.java)/**
 * Sorts selected lines in alphabetical order. If both, comment and non-comment lines
 * are selected, the non-comment lines are sorted, and the comments are moved together
 * with the non-comment lines they precede.
 *
 * @since 5.2
 */
PartnerFileComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SourceHeaderPartnerFinder.java)/**
	 * Compute the partner file for a translation unit.
	 * The partner file is the corresponding source or header file
	 * based on heuristics.
	 *
	 * @since 4.0
	 */
SourceHeaderPartnerFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SourceHeaderPartnerFinder.java)/**
 * A collection of static methods for finding the source file corresponding to a header
 * and vice versa.
 */
SpecificContentAssistAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SpecificContentAssistAction.java)/**
 * Action to run content assist on a specific proposal category.
 *
 * @since 4.0
 */
SpecificContentAssistExecutor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/SpecificContentAssistExecutor.java)/**
 * A content assist executor can invoke content assist for a specific proposal category on an editor.
 *
 * @since 4.0
 */
ToggleCommentAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ToggleCommentAction.java)/**
 * An action which toggles comment prefixes on the selected lines.
 *
 * @since 4.0.0
 */
ToggleMarkOccurrencesAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ToggleMarkOccurrencesAction.java)/**
 * A toolbar action which toggles the
 * {@linkplain org.eclipse.cdt.ui.PreferenceConstants#EDITOR_MARK_OCCURRENCES mark occurrences preference}.
 *
 * @since 5.0
 */
TogglePresentationAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/TogglePresentationAction.java)/**
 * A toolbar action which toggles the presentation model of the
 * connected text editor. The editor shows either the highlight range
 * only or always the whole document.
 */
ToggleSourceAndHeaderAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/ToggleSourceAndHeaderAction.java)/**
 * Editor action to toggle between source and header files.
 *
 * @since 4.0
 */
TranslationUnitAnnotationModelEvent (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/TranslationUnitAnnotationModelEvent.java)/**
 *
 * TranslationUnitAnnotationModelEvent
 *
 * Event sent out by changes of the compilation unit annotation model.
 */
WorkingCopyManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/WorkingCopyManager.java)/**
 * This working copy manager works together with a given compilation unit document provider and
 * additionally offers to "overwrite" the working copy provided by this document provider.
 */
CPropertyTester (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/expressions/CPropertyTester.java)/**
 * Property tester to test expressions in plugin.xml. Tests following expressions:
 * 1. Checks whether given object is a source file. Usage:
 *   <test property="org.eclipse.cdt.ui.isSource"/>
 * 2. Checks value of a preference. Usage:
 *   <test property="org.eclipse.cdt.ui.checkPreference" value="org.eclipse.cdt.ui:properties.export.page.enable=true"/>
 */
AnonymousStructFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/AnonymousStructFilter.java)/**
 * Filters out anonymous structs and enums.
 */
ArchiveFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/ArchiveFilter.java)/**
 * The ArchiveFilter is a filter used to determine whether
 * a C Archive is shown
 */
ClosedProjectFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/ClosedProjectFilter.java)/**
 * Filters closed projects
 */
ExecutableFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/ExecutableFilter.java)/**
 * The ExecutableFilter is a filter used to determine whether
 * an executable is shown
 */
FilterDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/FilterDescriptor.java)/**
 * Represents a custom filter which is provided by the
 * "org.eclipse.jdt.ui.javaElementFilters" extension point.
 *
 * since 2.0
 */
ForwardDeclarationFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/ForwardDeclarationFilter.java)/**
 * Filter for forward declarations
 */
MacroDirectiveFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/MacroDirectiveFilter.java)/**
 * Filter
 */
NamePatternFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/NamePatternFilter.java)/**
 * The NamePatternFilter selects the elements which
 * match the given string patterns.
 * <p>
 * The following characters have special meaning:
 *   ? => any character
 *   * => any string
 * </p>
 *
 * @since 2.0
 */
NonCElementFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/NonCElementFilter.java)/**
 * Filters out all non-C elements.
 */
NonCProjectsFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/NonCProjectsFilter.java)/**
 * Filters (open) non-C projects.
 */
ObjectFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/ObjectFilter.java)/**
 * The ObjectFilter is a filter used to determine whether
 * a Object is shown
 */
SharedFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/SharedFilter.java)/**
 * The SharedFilter is a filter used to determine whether
 * a Shared object is shown
 */
UsingDirectiveFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/filters/UsingDirectiveFilter.java)/**
 * Filters package declarations
 */
RequiredInclude (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/help/CFunctionSummary.java)/**
	 * This class implements IRequiredInclude interface
	 */
ICHelpContextIds (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/ICHelpContextIds.java)/**
 * Help context ids for the c ui.
 * <p>
 * This interface contains constants only; it is not intended to be implemented or extended.
 * </p>
 */
IContextMenuConstants (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/IContextMenuConstants.java)/**
 * Constants for menu groups used in context menus for C views and editors.
 * <p>
 * This interface declares constants only; it is not intended to be implemented.
 * </p>
 */
ICStatusConstants (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/ICStatusConstants.java)/**
 * Defines status codes relevant to the CDT UI plug-in. When a
 * Core exception is thrown, it contain a status object describing
 * the cause of the exception. The status objects originating from the
 * CDT UI plug-in use the codes defined in this interface.
  */
ICThemeConstants (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/ICThemeConstants.java)/**
 * Defines the constants used in the <code>org.eclipse.ui.themes</code>
 * extension contributed by this plug-in.
 */
ImageCombo (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/ImageCombo.java)/**
 * The ImageCombo class represents a selectable user interface object
 * that combines a text field and a table and issues notification
 * when an item is selected from the table.
 * <p>
 * Note that although this class is a subclass of <code>Composite</code>,
 * it does not make sense to add children to it, or set a layout on it.
 * </p>
 * <dl>
 * <dt><b>Styles:</b>
 * <dd>BORDER, READ_ONLY, FLAT</dd>
 * <dt><b>Events:</b>
 * <dd>Selection</dd>
 * </dl>
 */
IBContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/includebrowser/IBContentProvider.java)/**
 * This is the content provider for the include browser.
 */
IBHistoryAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/includebrowser/IBHistoryAction.java)/**
 * Action used for the include browser forward / backward buttons
 */
IBNode (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/includebrowser/IBNode.java)/**
 * Represents a node in the include browser
 */
IBRemoveFromView (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/includebrowser/IBRemoveFromView.java)/**
 * Action to remove items from the C++ Include Browser View.
 */
IBViewPart (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/includebrowser/IBViewPart.java)/**
 * The view part for the include browser.
 */
CountNodeAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/CountNodeAction.java)/**
 * @author dschaefer
 *
 */
DiscardExternalDefsAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/DiscardExternalDefsAction.java)/**
 * @author David Daoust
 *
 */
FindDeclarationsAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/FindDeclarationsAction.java)/**
 * @author Doug Schaefer
 *
 */
FindReferencesAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/FindReferencesAction.java)/**
 * @author Doug Schaefer
 *
 */
IndexAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/IndexAction.java)/**
 * @author Doug Schaefer
 *
 * Root class for Index View Actions. Add an check to make sure the
 * action is valid with the current context.
 */
IndexLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/IndexLabelProvider.java)/**
 * Common label provider for index based viewers.
 *
 * @author Doug Schaefer
 */
IndexView (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/IndexView.java)/**
 * @author Doug Schaefer
 *
 */
IndexViewSearchQuery (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/IndexViewSearchQuery.java)/**
 * @author Doug Schaefer
 *
 * This is the search query to be used for searching the PDOM.
 */
OpenDefinitionAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/OpenDefinitionAction.java)/**
 * @author Doug Schaefer
 *
 */
ToggleLinkingAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/indexview/ToggleLinkingAction.java)/**
 * This action toggles whether this navigator links its selection to the active
 * editor.
 *
 */
LanguageVerifier (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/LanguageVerifier.java)/**
 * Analyzes and repairs language mapping configurations.
 */
LanguageSettingEntryDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingEntryDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
EntriesTreeLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingsEntriesTab.java)/**
	 * Label provider for language settings providers displayed by this tab.
	 */
EntriesTreeContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingsEntriesTab.java)/**
	 * Content provider for setting entries tree.
	 */
LanguageSettingsEntriesTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingsEntriesTab.java)/**
 * This tab presents language settings entries categorized by language
 * settings providers.
 *
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @noextend This class is not intended to be subclassed by clients.
 */
LanguageSettingsImages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingsImages.java)/**
 * Helper class to provide unified images for {@link ICLanguageSettingEntry}.
 */
LanguageSettingsProviderAssociationManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingsProviderAssociationManager.java)/**
 * This class manages extensions of extension point org.eclipse.cdt.core.LanguageSettingsProvider
 * which defines appearance and behavior of UI controls for Language Settings Providers.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
LanguageSettingsProvidersLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingsProvidersLabelProvider.java)/**
 * Label provider for language settings providers.
 *
 */
LanguageSettingsProvidersPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingsProvidersPage.java)/**
 * Property page for language settings providers tabs.
 * The handling of isLanguageSettingsProvidersEnabled is temporary, this control is to be removed.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ProvidersTableLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingsProviderTab.java)/**
	 * Label provider for language settings providers displayed by this tab.
	 */
LanguageSettingsProviderTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/language/settings/providers/LanguageSettingsProviderTab.java)/**
 * This tab presents language settings entries categorized by language
 * settings providers.
 *
 *@noinstantiate This class is not intended to be instantiated by clients.
 *@noextend This class is not intended to be subclassed by clients.
 */
LineBackgroundPainter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/LineBackgroundPainter.java)/**
 * A painter for configurable background painting a range of text lines.
 * Replicates also the functionality of the
 * {@link org.eclipse.jface.text.CursorLinePainter}
 * because only one {@link LineBackgroundListener} is allowed
 * per {@link StyledText} widget.
 *
 * @author anton.leherbauer@windriver.com
 *
 * @since 4.0
 */
MacrosGrouping (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/MacrosGrouping.java)/**
 * Grouping for macro definitions.
 *
 * @since 5.2
 */
MembersGrouping (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/MembersGrouping.java)/**
 * Grouping for members in the same namespace.
 */
AbstractCNavigatorActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/AbstractCNavigatorActionGroup.java)/**
 * A basic abstract action group implementation similar to
 * {@link org.eclipse.cdt.internal.ui.cview.CViewActionGroup}, avoiding
 * the explicit dependency on {@link org.eclipse.cdt.internal.ui.cview.CView} to
 * allow reuse in the Common Navigator.
 *
 * @see org.eclipse.cdt.internal.ui.cview.CViewActionGroup
 */
CNavigatorBuildActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorBuildActionGroup.java)/**
 * Common Navigator compatible clone of {@link org.eclipse.cdt.internal.ui.cview.BuildGroup}.
 * <p>
 * Adds action "Clean Project" and group marker "buildGroup" to the context menu.
 * </p>
 * @see org.eclipse.cdt.internal.ui.cview.BuildGroup
 * @see org.eclipse.ui.actions.BuildAction
 */
CNavigatorBuildActionProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorBuildActionProvider.java)/**
 * A Common Navigator action provider providing the contributions
 * from the build action group.
 *
 * @see CNavigatorBuildActionGroup
 */
CNavigatorContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorContentProvider.java)/**
 * A content provider populating a Common Navigator view with CDT model content.
 */
CNavigatorDragAdapterAssistant (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorDragAdapterAssistant.java)/**
 * A Common Navigator drag assistant supporting <code>LocalSelectionTransfer</code> of
 * <code>ICElement</code>s being also <code>ISourceReference</code>s and
 * <code>FileTransfer</code> for external translation units.
 *
 * @see org.eclipse.cdt.internal.ui.cview.SelectionTransferDragAdapter
 */
CNavigatorDropAdapterAssistant (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorDropAdapterAssistant.java)/**
 * A Common Navigator drop adapter assistant handling dropping of <code>ICElement</code>s.
 *
 * @see org.eclipse.cdt.internal.ui.cview.SelectionTransferDropAdapter
 */
CNavigatorEditActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorEditActionGroup.java)/**
 * Provides clipboard actions.
 *
 * A clone of org.eclipse.ui.internal.navigator.resources.actions.EditActionGroup.
 */
CNavigatorEditActionProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorEditActionProvider.java)/**
 * Common Navigator action provider for clipboard actions.
 */
CNavigatorLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorLabelProvider.java)/**
 * A label provider suitable for the Common Navigator providing also
 * status message text for the current selected item.
 *
 * @see org.eclipse.cdt.internal.ui.cview.CView#createLabelProvider
 * @see org.eclipse.cdt.internal.ui.cview.CView#getStatusLineMessage
 */
CNavigatorLinkHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorLinkHelper.java)/**
 * Provide support for linking view selection with active editor.
 *
 * @since 4.0
 */
CNavigatorOpenActionProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorOpenActionProvider.java)/**
 * A Common Navigator action provider providing the contributions
 * from the open editor action group.
 *
 * @see CNavigatorOpenEditorActionGroup
 */
CNavigatorOpenEditorActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorOpenEditorActionGroup.java)/**
 * This is basically a clone of {@link org.eclipse.cdt.internal.ui.cview.OpenFileGroup},
 * but without explicit dependency on CView. This opens it up for use in the
 * Common Navigator framework.
 * <p>
 * Contributes an "Open" action for the default editor, an "Open With" sub-menu
 * for all applicable editors if one or more files are selected.
 * For all container selections, an "Open In New Window" action is contributed.
 * </p>
 *
 * @see org.eclipse.cdt.internal.ui.cview.OpenFileGroup
 * @see org.eclipse.ui.actions.OpenFileAction
 * @see org.eclipse.ui.actions.OpenWithMenu
 * @see org.eclipse.ui.actions.OpenInNewWindowAction
 */
CNavigatorProblemsLabelDecorator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorProblemsLabelDecorator.java)/**
 * A {@link ProblemsLabelDecorator} optimized for use with the Common Navigator.
 *
 * @since 4.0
 */
CNavigatorRefactorActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorRefactorActionGroup.java)/**
 * This is the action group for refactor actions move and rename.
 *
 * A clone of org.eclipse.ui.internal.navigator.resources.actions.RefactorActionGroup.
 */
CNavigatorRefactorActionProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorRefactorActionProvider.java)/**
 * A clone of org.eclipse.ui.internal.navigator.resources.actions.RefactorActionProvider.
 */
CNavigatorSearchActionProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorSearchActionProvider.java)/**
 * Common Navigator action provider for the C-search sub menus.
 *
 * @see org.eclipse.cdt.internal.ui.search.actions.SelectionSearchGroup
 */
OpenCElementAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/OpenCElementAction.java)/**
 * Open an editor and navigate to the source location of
 * the currently selected <code>ICElement</code>.
 * In case of multiple selections, opening is delegated to
 * the base class {@link OpenFileAction}.
 */
StatusMessageLine (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/newui/StatusMessageLine.java)/**
 * A message line displaying a status.
 * See also org.eclipse.jface.dialogs.StatusDialog.MessageLine.
 */
PersistableCElementFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/PersistableCElementFactory.java)/**
 * The PersistableCElementFactory is used to save and recreate an ICElement object.
 * As such, it implements the IPersistableElement interface for storage
 * and the IElementFactory interface for recreation.
 *
 * @see IMemento
 * @see IPersistableElement
 * @see IElementFactory
 */
SectionManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/AbstractConfigurationBlock.java)/**
	 * Use as follows:
	 *
	 * <pre>
	 * SectionManager manager= new SectionManager();
	 * Composite composite= manager.createSectionComposite(parent);
	 *
	 * Composite xSection= manager.createSection("section X"));
	 * xSection.setLayout(new FillLayout());
	 * new Button(xSection, SWT.PUSH); // add controls to section..
	 *
	 * [...]
	 *
	 * return composite; // return main composite
	 * </pre>
	 */
AbstractConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/AbstractConfigurationBlock.java)/**
 * Abstract implementation of a generic {@link IPreferenceConfigurationBlock}.
 *
 * @since 4.0
 */
AbstractConfigurationBlockPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/AbstractConfigurationBlockPreferencePage.java)/**
 * Abstract preference page which is used to wrap a
 * {@link org.eclipse.cdt.internal.ui.preferences.IPreferenceConfigurationBlock}.
 *
 * @since 4.0
 */
AbstractMixedPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/AbstractMixedPreferencePage.java)/**
 * A preference that on preference from the UI plugin, as well the CDT core.
 *
 * Currently only supporting boolean preferences.
 */
AbstractPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/AbstractPreferencePage.java)/**
 * AbstractPreferencePage
 */
BooleanFieldEditor2 (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/BooleanFieldEditor2.java)/**
 * Provide access to the checkbox, this makes it equivalent to
 * org.eclipse.jface.preference.StringFieldEditor
 */
BuildLogPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/BuildLogPreferencePage.java)/**
 * Preference page defining build log properties.
 */
HighlightingColorListItem (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CEditorColoringConfigurationBlock.java)/**
	 * Item in the highlighting color list.
	 */
ColorListLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CEditorColoringConfigurationBlock.java)/**
	 * Color list label provider.
	 */
ColorListContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CEditorColoringConfigurationBlock.java)/**
	 * Color list content provider.
	 */
CEditorColoringConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CEditorColoringConfigurationBlock.java)/**
 * Configures C/C++ Editor code coloring preferences.
 *
 * @since 4.0
 */
CEditorColoringPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CEditorColoringPreferencePage.java)/**
 * Code coloring preference page.
 * <p>
 * Note: Must be public since it is referenced from plugin.xml
 * </p>
 *
 * @since 4.0
 */
CEditorHoverConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CEditorHoverConfigurationBlock.java)/**
 * Configures C/C++ Editor hover preferences.
 */
CEditorHoverPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CEditorHoverPreferencePage.java)/**
 * The page for setting the editor hover options.
 */
CEditorPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CEditorPreferencePage.java)/**
 * The preference page for setting the editor options.
 */
CodeAssistAdvancedConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CodeAssistAdvancedConfigurationBlock.java)/**
 *
 * @since 3.2
 */
CodeAssistPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CodeAssistPreferencePage.java)/**
 * Content Assist preference page.
 */
CodeStyleBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CodeStyleBlock.java)/**
 * Configures elements of C/C++ code style affecting refactoring.
 */
CodeStylePreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CodeStylePreferencePage.java)/**
 * The page for setting various code style preferences.
 */
CodeTemplateBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CodeTemplateBlock.java)/**
 */
CPluginPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CPluginPreferencePage.java)/**
 * The page for general C/C++ preferences.
 */
CEditTemplateDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CTemplatePreferencePage.java)/**
	 * A dialog to edit a template.
	 */
CTemplatePreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/CTemplatePreferencePage.java)/**
 * Template preference page for C/C++ editor templates.
 */
EditTemplateDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/EditTemplateDialog.java)/**
 * Dialog to edit a template.
 * @since 5.2
 */
FoldingConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/FoldingConfigurationBlock.java)/**
 * Configures C Editor folding preferences.
 *
 * @since 3.0
 */
FoldingPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/FoldingPreferencePage.java)/**
 * The page for setting the editor folding options.
 */
AlreadyExistsDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/AlreadyExistsDialog.java)/**
 * The dialog to rename an imported profile.
 */
CodeFormatterConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/CodeFormatterConfigurationBlock.java)/**
 * The code formatter preference page.
 */
CommentsTabPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/CommentsTabPage.java)/**
 * Tab page for the comment formatter settings.
 */
CPreview (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/CPreview.java)/**
 * Abstract previewer for C/C++ source code formatting.
 *
 * @since 4.0
 */
CreateProfileDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/CreateProfileDialog.java)/**
 * The dialog to create a new profile.
 */
CustomCodeFormatterBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/CustomCodeFormatterBlock.java)/**
 * Allows to choose the formatter in a combo box.
 * If no formatter is contributed, nothing is shown.
 */
FormatterMessages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/FormatterMessages.java)/**
 * Helper class to get NLSed messages.
 */
IModifyDialogTabPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/IModifyDialogTabPage.java)/**
 * @since 5.0
 */
Category (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/LineWrappingTabPage.java)/**
	 * Represents a line wrapping category.
	 */
LineWrappingTabPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/LineWrappingTabPage.java)/**
 * The line wrapping tab page.
 */
PreferenceValidator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ModifyDialogTabPage.java)/**
	 * Preference validator
	 */
Preference (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ModifyDialogTabPage.java)/**
	 * The base class of all Preference classes. A preference class provides a wrapper
	 * around one or more SWT widgets and handles the input of values for some key.
	 * On each change, the new value is written to the map and the listeners are notified.
	 */
ButtonPreference (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ModifyDialogTabPage.java)/**
	 * Wrapper around a checkbox and a label.
	 */
ComboPreference (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ModifyDialogTabPage.java)/**
	 * Wrapper around a Combo box.
	 */
StringPreference (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ModifyDialogTabPage.java)/**
	 * Wrapper around a textfied
	 */
NumberPreference (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ModifyDialogTabPage.java)/**
	 * Wrapper around a textfied which requests an integer input of a given range.
	 */
DefaultFocusManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ModifyDialogTabPage.java)/**
	 * This class provides the default way to preserve and re-establish the focus
	 * over multiple modify sessions. Each ModifyDialogTabPage has its own instance,
	 * and it should add all relevant controls upon creation, always in the same sequence.
	 * This established a mapping of controls to indexes, which allows to restore the focus
	 * in a later session.
	 * The index is saved in the dialog settings, and there is only one common preference for
	 * all tab pages. It is always the currently active tab page which stores its focus
	 * index.
	 */
PageLayout (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ModifyDialogTabPage.java)/**
	 * Layout used for the settings part. Makes sure to show scrollbars
	 * if necessary. The settings part needs to be layouted on resize.
	 */
Profile (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ProfileManager.java)/**
	 * Represents a profile with a unique ID, a name and a map
	 * containing the code formatter settings.
	 */
BuiltInProfile (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ProfileManager.java)/**
	 * Represents a built-in profile. The state of a built-in profile
	 * cannot be changed after instantiation.
	 */
CustomProfile (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ProfileManager.java)/**
	 * Represents a user-defined profile. A custom profile can be modified after instantiation.
	 */
ProfileManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ProfileManager.java)/**
 * The model for the set of profiles which are available in the workbench.
 */
ProfileDefaultHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/ProfileStore.java)/**
	 * A SAX event handler to parse the xml format for profiles.
	 */
Node (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/WhiteSpaceOptions.java)/**
	 * Represents a node in the options tree.
	 */
InnerNode (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/WhiteSpaceOptions.java)/**
	 * A node representing a group of options in the tree.
	 */
OptionNode (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/WhiteSpaceOptions.java)/**
	 * A node representing a concrete white space option in the tree.
	 */
WhiteSpaceOptions (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/WhiteSpaceOptions.java)/**
 * Manage code formatter white space options on a higher level.
 */
SwitchComponent (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/formatter/WhiteSpaceTabPage.java)/**
	 * This component switches between the two view and is responsible for delegating
	 * the appropriate update requests.
	 */
FilePathEditor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/GlobalBuildLogPreferencePage.java)/**
	 * A file path field with choose button that does not require the chosen file to exist.
	 */
GlobalBuildLogPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/GlobalBuildLogPreferencePage.java)/**
 * Preference page for build logging options, such as whether the
 * global build console should be logged and, if so, where.
 */
HeaderSubstitutionBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/HeaderSubstitutionBlock.java)/**
 * The preference block for configuring header file substitution rules.
 */
HeaderSubstitutionMapEditDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/HeaderSubstitutionMapEditDialog.java)/**
 * Dialog for editing a header file substitution map.
 */
HeaderSubstitutionRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/HeaderSubstitutionRule.java)/**
 * Substitution rule for a single header file.
 */
Category (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/IncludeCategoriesBlock.java)/**
	 * Represents a category of settings.
	 */
IncludeCategoriesBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/IncludeCategoriesBlock.java)/**
 * The preference block for configuring styles of different categories of include statements.
 */
IncludeGroupStyleBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/IncludeGroupStyleBlock.java)/**
 * The preference block for configuring styles of different categories of include statements.
 */
IncludeOrderBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/IncludeOrderBlock.java)/**
 * The preference block for configuring relative order of include statements.
 */
IncludePragmasBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/IncludePragmasBlock.java)/**
 * The preference block for configuring Organize Includes command.
 */
IncludeStyleBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/IncludeStyleBlock.java)/**
 * The preference block for configuring style of include statements.
 */
IndexerStrategyBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/IndexerStrategyBlock.java)/**
 * This OptionPage is used in the IndexerPreference page to allow for adjusting
 * various parsing related caches.
 */
IPreferenceConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/IPreferenceConfigurationBlock.java)/**
 * Interface for preference configuration blocks which can either be
 * wrapped by a {@link org.eclipse.cdt.internal.ui.preferences.AbstractConfigurationBlockPreferencePage}
 * or be included some preference page.
 * <p>
 * Clients may implement this interface.
 * </p>
 *
 * @since 3.0
 */
MarkOccurrencesConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/MarkOccurrencesConfigurationBlock.java)/**
 * Configures C/C++ Editor mark occurrences preferences.
 *
 * @since 5.0
 */
MarkOccurrencesPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/MarkOccurrencesPreferencePage.java)/**
 * The page for setting the editor options.
 */
Category (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/NameStyleBlock.java)/**
	 * Represents a category of settings.
	 */
NameStyleBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/NameStyleBlock.java)/**
 * The preference block for configuring styles of names.
 */
OptionsConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/OptionsConfigurationBlock.java)/**
 * Abstract options configuration block providing a general implementation for setting up
 * an options configuration page.
 */
OrganizeIncludesBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/OrganizeIncludesBlock.java)/**
 * The preference block for configuring Organize Includes command.
 */
OverlayPreferenceStore (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/OverlayPreferenceStore.java)/**
 * An overlaying preference store.
 */
PreferencesAccess (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/PreferencesAccess.java)/**
 *
 */
PropertyAndPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/PropertyAndPreferencePage.java)/**
 * Base for project property and preference pages
 */
ComboState (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/ProposalFilterPreferencesUtil.java)/**
	 * Convenience class wraps the data to initialize a Combo
	 */
ProposalFilterPreferencesUtil (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/ProposalFilterPreferencesUtil.java)/**
 * A class which encapsulates several utility functions
 * related to code completion preference settings.
 */
ScalabilityIntegerFieldEditor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/ScalabilityIntegerFieldEditor.java)/**
 * A field editor that combines an integer value preference with a boolean enablement
 * preference.
 *
 * @since 5.8
 */
SmartTypingConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/SmartTypingConfigurationBlock.java)/**
 * Configures C Editor typing preferences.
 */
SmartTypingPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/SmartTypingPreferencePage.java)/**
 * The page for setting the editor options.
 */
SpellingConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/SpellingConfigurationBlock.java)/**
 * Options configuration block for spell check related settings.
 */
SpellingPreferenceBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/SpellingPreferenceBlock.java)/**
 * Spelling preference block
 */
TabConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/TabConfigurationBlock.java)/**
 * The preference block for configuring styles of names.
 */
TodoTaskConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/TodoTaskConfigurationBlock.java)/**
 * UI for editing task tags.
 */
TodoTaskInputDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/TodoTaskInputDialog.java)/**
 * Dialog to enter a new task tag.
 */
WorkInProgressPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/WorkInProgressPreferencePage.java)/**
 * Preference page for work in progress.
 */
ChangeExceptionHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/ChangeExceptionHandler.java)/**
 * Copy of org.eclipse.ltk.internal.ui.refactoring.ChangeExceptionHandler
 */
ChangeParametersControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/ChangeParametersControl.java)/**
 * A special control to edit and reorder method parameters.
 */
CCompositeChange (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/CCompositeChange.java)/**
 * @author Emanuel Graf IFS
 */
CreateFileChange (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/CreateFileChange.java)/**
 * A {@link Change} for creating a new file with the given name, content and encoding at
 * the specified path.
 *
 * @author Emanuel Graf
 */
DeleteFileChange (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/DeleteFileChange.java)/**
 * The counterpart to the {@link CreateFileChange}, a change to delete a file.
 *
 * @author Emanuel Graf
 */
UndoCTextFileChange (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/UndoCTextFileChange.java)/**
 * UndoCTextFileChange that uses a working copy in order to generate CModel events.
 * @author janees
 */
ChangeTreeSet (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/ChangeTreeSet.java)/**
 * @author Emanuel Graf
 */
ClassMemberInserter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/ClassMemberInserter.java)/**
 * Adds a declaration to an existing class via the ModificationCollector. Automatically determines
 * an appropriate insertion point for the desired visibility.
 *
 * @author Mirko Stocker
 */
Container (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/Container.java)/**
 * Simple container for one Object, with getters and setters.
 *
 * @author Mirko Stocker
 *
 * @param <T> The type of the encapsulated node.
 */
CRefactoring (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/CRefactoring.java)/**
 * The base class for all AST based refactorings, provides some common implementations for
 * AST creation, condition checking, change generating, and selection handling.
 */
CRefactoringContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/CRefactoringContext.java)/**
 * A disposable context for C/C++ refactoring operations. Contains cache of ASTs of the translation
 * units participating in refactoring. The context object has to be disposed of after use. Failure
 * to do so may cause loss of index lock.
 * <p>
 * This class is not thread-safe.
 */
CRefactoringContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/CRefactoringContribution.java)/**
 * @author Emanuel Graf IFS
 */
CRefactoringDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/CRefactoringDescriptor.java)/**
 * @author Emanuel Graf IFS
 */
CTextFileChangeFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/CTextFileChangeFactory.java)/**
 * Factory provided to the core plugin to create appropriate text file changes.
 * @since 5.0
 */
CreateFileChangePreview (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/dialogs/CreateFileChangePreview.java)/**
 * @author Emanuel Graf
 */
CTextEditChangePreviewViewer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/dialogs/CTextEditChangePreviewViewer.java)/**
 * @author Emanuel Graf
 *
 */
LabeledTextField (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/dialogs/LabeledTextField.java)/**
 * A text field with an associated label, displayed side-by-side.
 *
 * @author Mirko Stocker
 */
NameAndVisibilityComposite (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/dialogs/NameAndVisibilityComposite.java)/**
  * Composite to query for a name and visibility.
  *
  * @author Thomas Corbat
  *
  */
Validator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/dialogs/ValidatingLabeledTextField.java)/**
	 * The Validator is used for feedback about the validation status of the inputs and to validate the input.
	 */
ValidatingLabeledTextField (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/dialogs/ValidatingLabeledTextField.java)/**
 * @author Mirko Stocker
 *
 * Text field with a description and error handling using the Validator-Callback. Can also be used for multiple inputs.
 *
 */
VisibilitySelectionPanel (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/dialogs/VisibilitySelectionPanel.java)/**
 * Three radio buttons in a group, labeled according to the corresponding visibility name
 * (public, private, protected).
 *
 * @author Thomas Corbat
 */
DocumentSetCommand (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/DocumentAdapter.java)/**
	 *  Executes a document set content call in the ui thread.
	 */
DocumentReplaceCommand (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/DocumentAdapter.java)/**
	 * Executes a document replace call in the ui thread.
	 */
DocumentAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/DocumentAdapter.java)/**
 * Adapts <code>IDocument</code> to <code>IBuffer</code>. Uses the
 * same algorithm as the text widget to determine the buffer's line delimiter.
 * All text inserted into the buffer is converted to this line delimiter.
 * This class is <code>public</code> for test purposes only.
 *
 * This class is similar to the JDT DocumentAdapter class.
 */
ExtractConstantInfo (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractconstant/ExtractConstantInfo.java)/**
 * @author Emanuel Graf IFS
 */
ExtractConstantRefactoring (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractconstant/ExtractConstantRefactoring.java)/**
 * The main class of the Extract Constant refactoring.
 *
 * @author Mirko Stocker
 */
ExtractConstantRefactoringContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractconstant/ExtractConstantRefactoringContribution.java)/**
 * @author Emanuel Graf IFS
 */
ExtractConstantRefactoringDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractconstant/ExtractConstantRefactoringDescriptor.java)/**
 * @author Emanuel Graf IFS
 */
ExtractConstantRefactoringRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractconstant/ExtractConstantRefactoringRunner.java)/**
 * @author Emanuel Graf
 */
ExtractConstantWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractconstant/ExtractConstantWizard.java)/**
 * The wizard page for Extract Constant refactoring, creates the UI page.
 */
ExpressionExtractor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractfunction/ExpressionExtractor.java)/**
 * Handles the extraction of expression nodes, for example, return type determination.
 *
 * @author Mirko Stocker
 */
ExtractFunctionRefactoringContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractfunction/ExtractFunctionRefactoringContribution.java)/**
 * @author Emanuel Graf IFS
 */
ExtractFunctionRefactoringDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractfunction/ExtractFunctionRefactoringDescriptor.java)/**
 * @author Emanuel Graf IFS
 */
ExtractFunctionRefactoringRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractfunction/ExtractFunctionRefactoringRunner.java)/**
 * @author Emanuel Graf
 */
FunctionExtractor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractfunction/FunctionExtractor.java)/**
 * @author Mirko Stocker
 */
NonExtractableStatementFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractfunction/NonExtractableStatementFinder.java)/**
 * @author Emanuel Graf IFS
 */
ReturnStatementFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractfunction/ReturnStatementFinder.java)/**
 * @author Emanuel Graf IFS
 */
StatementExtractor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractfunction/StatementExtractor.java)/**
 * @author Mirko Stocker
 */
ExtractLocalVariableRefactoring (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractlocalvariable/ExtractLocalVariableRefactoring.java)/**
 * The main class for the Extract Local Variable refactoring. This refactoring
 * differs from the Extract Constant refactoring in that any valid expression
 * which can be used to initialize a local variable can be extracted.
 *
 * @author Tom Ball
 */
ExtractLocalVariableRefactoringContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractlocalvariable/ExtractLocalVariableRefactoringContribution.java)/**
 * @author Emanuel Graf IFS
 */
ExtractLocalVariableRefactoringDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractlocalvariable/ExtractLocalVariableRefactoringDescriptor.java)/**
 * @author Emanuel Graf IFS
 */
ExtractLocalVariableRefactoringRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractlocalvariable/ExtractLocalVariableRefactoringRunner.java)/**
 * Extract Local Variable refactoring runner.
 *
 * @author Tom Ball
 */
ExtractLocalVariableWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractlocalvariable/ExtractLocalVariableWizard.java)/**
 * The wizard page for Extract Local Variable refactoring, creates the UI page.
 *
 * @author Tom Ball
 */
InputPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/extractlocalvariable/InputPage.java)/**
 * Input verification page for the ExtractLocalVariable refactoring, cloned
 * from org.eclipse.cdt.internal.ui.refactoring.extractconstant.InputPage.
 *
 * @author Tom Ball
 */
GenerateGettersAndSettersRefactoring (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/gettersandsetters/GenerateGettersAndSettersRefactoring.java)/**
 * @author Thomas Corbat
 */
GenerateGettersAndSettersRefactoringRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/gettersandsetters/GenerateGettersAndSettersRefactoringRunner.java)/**
 * @author Thomas Corbat
 */
GenerateGettersAndSettersWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/gettersandsetters/GenerateGettersAndSettersWizard.java)/**
 * @author Thomas Corbat
 */
GetterSetterLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/gettersandsetters/GetterSetterLabelProvider.java)/**
 * @author Emanuel Graf IFS
 */
HideMethodRefactoring (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/hidemethod/HideMethodRefactoring.java)/**
 * @author Guido Zgraggen IFS
 */
HideMethodRefactoringContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/hidemethod/HideMethodRefactoringContribution.java)/**
 * @author Emanuel Graf IFS
 */
HideMethodRefactoringDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/hidemethod/HideMethodRefactoringDescriptor.java)/**
 * @author Emanuel Graf IFS
 */
HideMethodRefactoringRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/hidemethod/HideMethodRefactoringRunner.java)/**
 * @author Guido Zgraggen IFS
 */
HideMethodWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/hidemethod/HideMethodWizard.java)/**
 * @author Guido Zgraggen IFS
 */
ImplementMethodData (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/ImplementMethodData.java)/**
 * @author Emanuel Graf IFS
 *
 */
ImplementMethodInputPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/ImplementMethodInputPage.java)/**
 * @author Emanuel Graf IFS
 */
ImplementMethodRefactoring (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/ImplementMethodRefactoring.java)/**
 * Main class of the ImplementMethodRefactoring (Source generator).
 * Checks conditions, finds insert location and generates the ImplementationNode.
 *
 * @author Mirko Stocker, Lukas Felber, Emanuel Graf
 */
ImplementMethodRefactoringRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/ImplementMethodRefactoringRunner.java)/**
 * @author Lukas Felber
 */
ImplementMethodWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/ImplementMethodWizard.java)/**
 * @author Mirko Stocker
 */
InsertLocation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/InsertLocation.java)/**
 * Is returned when using the find method of the MethodDefinitionInsertLocationFinder.
 * Contains all the information needed to insert at the correct position.
 *
 * @author Lukas Felber
 */
MethodDefinitionInsertLocationFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/MethodDefinitionInsertLocationFinder.java)/**
 * Finds the information that are needed to tell where a method definition of a certain
 * method declaration should be inserted.
 *
 * @author Mirko Stocker, Lukas Felber
 */
MethodToImplementConfig (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/MethodToImplementConfig.java)/**
 * @author Emanuel Graf IFS
 *
 */
ParameterHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/ParameterHandler.java)/**
 * Manages and creates Method Parameter Infos.
 *
 * @author Lukas Felber
 *
 */
ParameterInfo (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/ParameterInfo.java)/**
 * @author Lukas Felber
 */
ParameterNamesInputPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/implementmethod/ParameterNamesInputPage.java)/**
 * InputPage used by the ImplementMethod refactoring if its necessary to enter additional parameter names.
 *
 * @author Mirko Stocker
 */
BindingClassifier (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/BindingClassifier.java)/**
 * For a whole translation unit or a part of it determines a set of externally defined bindings that
 * must be defined and a set of bindings that must be declared.
 */
HeaderSubstitutionMap (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/HeaderSubstitutionMap.java)/**
 * A set of header file substitution rules.
 */
IElementSelector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IElementSelector.java)/**
 * Interface for selecting one of a set of elements.
 */
IHeaderChooser (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IHeaderChooser.java)/**
 * Interface for selecting one of alternative headers.
 */
IncludeCreationContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeCreationContext.java)/**
 * Context for managing include statements.
 */
IncludeCandidate (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeCreator.java)/**
	 * To be used by ElementListSelectionDialog for user to choose which declarations/
	 * definitions for "add include" when there are more than one to choose from.
	 */
IncludeCreator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeCreator.java)/**
 * Adds an include statement and, optionally, a 'using' declaration for the currently
 * selected name.
 */
IncludeGroupStyle (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeGroupStyle.java)/**
 * Style preferences for a category of include statements.
 */
IncludeMap (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeMap.java)/**
 * A set of header file substitution rules.
 */
IncludePrototype (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeOrganizer.java)/**
	 * Represents a new or an existing include statement.
	 */
IncludeOrganizer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeOrganizer.java)/**
 * Organizes the include directives and forward declarations of a source or header file.
 */
IncludePreferences (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludePreferences.java)/**
 * Preferences for managing of includes.
 */
SymbolExportMap (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/SymbolExportMap.java)/**
 * A set of header file substitution rules.
 */
IParameterListChangeListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/IParameterListChangeListener.java)/**
 * @see ChangeParametersControl
 */
MethodContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/MethodContext.java)/**
 * Represents a function or method and adds some useful helper methods to determine
 * if two methods are in the same class.
 */
ModificationCollector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/ModificationCollector.java)/**
 * A ModificationCollector can be passed through a refactoring and manages the rewriters
 * and additional changes a refactoring can create.
 *
 * @author Mirko Stocker
 */
NameInformation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/NameInformation.java)/**
 * Additional information about an IASTName in code being refactored.
 */
Method (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/overridemethods/Method.java)/**
 * Wrapper for ICPPMethod
 */
MethodCollector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/overridemethods/MethodCollector.java)/**
 * Virtual method collector invoked from {@link VirtualMethodsASTVisitor}.
 * @author Pavel Marek
 */
OverrideMethodsAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/overridemethods/OverrideMethodsAction.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
OverrideMethodsInputPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/overridemethods/OverrideMethodsInputPage.java)/**
 * This class represents the only InputPage of the wizard for this code generation
 * @author Pavel Marek
 */
OverrideMethodsRefactoring (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/overridemethods/OverrideMethodsRefactoring.java)/**
 * This adds "Override Methods" functionality to Source context menu
 * located both in main menu and as a pop-up menu in editor. User can select
 * which virtual methods overrides from which classes should be generated.
 * This code generation feature is supposed to be triggered mostly in header
 * files. Every method is added under corresponding visibility label, in case
 * when no labels are found, they are generated in order set in preferences.
 * <p>
 * Code of this contribution is inspired from "Generate getters and setters"
 * code generation and "Extract constant" refactoring.
 * </p>
 *
 * Steps of this refactoring are:
 * 1) Initial conditions checking.
 * The initial conditions are satisfied when
 * the selection (cursor) is located inside a class definition, this class has
 * some base classes, and there is at least one virtual method to override.
 *   During this step the {@link VirtualMethodASTVisitor} traverses the AST for
 * the current file and finds the class that is selected. The binding for this
 * class is resolved and from this binding all the informations about base
 * classes and their virtual methods are gathered inside {@link VirtualMethodContainer}.
 *
 * 2) Method selection (dialog with user).
 * {@link OverrideMethodsInputPage} represents the only <code>WizardInputPage</code>
 * that this code generation consists of. This wizard looks similar to the wizard
 * from "Generate getters and setters" - there is a <code>CheckBoxTreeView</code>
 * where parent nodes represent base classes and children nodes represent their
 * virtual methods.
 *   When one of items (virtual methods) is checked, the corresponding method
 * is saved to {@link VirtualMethodPrintData}.
 *
 * 3) Collection of all changes.
 * This step is handled just by {@link VirtualMethodPrintData} that adds
 * selected methods inside class (rewrites the corresponding AST with the help
 * of {@link org.eclipse.cdt.internal.ui.refactoring.ClassMemberInserter}).
 *
 * @author Pavel Marek
 */
VirtualMethodContainer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/overridemethods/VirtualMethodContainer.java)/**
 * Container for virtual methods collected by {@link VirtualMethodsASTVisitor}.
 * Also serves as content provider for <code>CheckBoxTree</code> in wizard.
 */
VirtualMethodPrintData (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/overridemethods/VirtualMethodPrintData.java)/**
 * Holds virtual member functions that should be printed (during
 * <code> VirtualMethodRefactoring.collectModifications() </code>).
 * @author mayfa
 *
 */
VirtualMethodsASTVisitor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/overridemethods/VirtualMethodsASTVisitor.java)/**
 * Visits the class definition inside which the selection (cursor) is located.
 * Gets binding for this class, and from this binding all other necessary
 * informations are gathered inside fMethodContainer.
 */
RefactoringAvailabilityTester (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/RefactoringAvailabilityTester.java)/**
 * Helper class to detect whether a certain refactoring can be enabled on
 * a selection.
 * <p>
 * This class has been introduced to decouple actions from the refactoring code,
 * in order not to eagerly load refactoring classes during action
 * initialization.
 * </p>
 *
 * @since 5.3
 */
RefactoringExecutionHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/RefactoringExecutionHelper.java)/**
 * A helper class to execute a refactoring. The class takes care of pushing the
 * undo change onto the undo stack and folding editor edits into one editor
 * undo object.
 */
RefactoringRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/RefactoringRunner.java)/**
 * Base class for all refactoring runners.
 */
RefactoringSaveHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/RefactoringSaveHelper.java)/**
 * Helper to save dirty editors prior to starting a refactoring.
 *
 * @see PreferenceConstants#REFACTOR_SAVE_ALL_EDITORS
 * @since 5.3
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
RefactoringStarter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/RefactoringStarter.java)/**
 * A helper class to activate the UI of a refactoring.
 */
ASTManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/ASTManager.java)/**
 * Used for refactoring to cache the IASTTranslationUnits.
 * Contains a collection of methods operating on ASTNodes.
 * The object has to be disposed of after use.
 */
ASTNameVisitor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/ASTNameVisitor.java)/**
 * Visitor to prefer simple ASTNames over the qualified ones. This is different
 * to the strategy used within the dom-package.
 */
CRefactoringArgument (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRefactoringArgument.java)/**
 * Represents the input to a refactoring. Important are file and offset, the rest
 * can be calculated from the AST.
 */
CRefactoringMatch (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRefactoringMatch.java)/**
 * A refactoring match initially is a plain text match. In the course of refactoring
 * it will be classified with a location (comment, code, ...) and with the information
 * whether it has been verified via AST or not.
 */
CRefactoringUtils (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRefactoringUtils.java)/**
 * Collects some basic functionality.
 */
CRefactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRefactory.java)/**
 * Serves to launch the various refactorings.
 */
CRenameClassProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameClassProcessor.java)/**
 * Processor adding constructor and destructor to the bindings to be renamed.
 */
CRenameGlobalProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameGlobalProcessor.java)/**
 * Rename processor that sets up the input page for renaming a global entity.
 */
CRenameIncludeProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameIncludeProcessor.java)/**
 * Rename processor setting up input page for renaming include directives.
 */
CRenameLocalProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameLocalProcessor.java)/**
 * Rename processor, setting up input page for a local rename.
 */
CRenameMacroProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameMacroProcessor.java)/**
 * Rename processor that sets up the input page for renaming a global entity.
 */
CRenameMethodProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameMethodProcessor.java)/**
 * Rename processor for methods.
 */
CRenameProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameProcessor.java)/**
 * This is the processor used for the rename. It decides which of the delegates to
 * use and forwards further calls to the delegate.
 */
CRenameProcessorDelegate (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameProcessorDelegate.java)/**
 * Abstract base for all different rename processors used by the top processor.
 */
CRenameRefactoring (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameRefactoring.java)/**
 * Refactoring implementation using a refactoring processor.
 */
CRenameRefactoringInputPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameRefactoringInputPage.java)/**
 * Input page added to the standard refactoring wizard.
 */
CRenameRefactoringWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameRefactoringWizard.java)/**
 * Refactoring Wizard adding the input page.
 */
CRenameTypeProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/CRenameTypeProcessor.java)/**
 * Handles conflicting bindings for types.
 */
HeaderFileMoveParticipant (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/HeaderFileMoveParticipant.java)/**
 * Updates include statements and include guards in response to a file or a folder move.
 */
HeaderFileReferenceAdjuster (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/HeaderFileReferenceAdjuster.java)/**
 * Updates include statements and include guards in response to file or folder move or rename.
 */
HeaderFileRenameParticipant (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/HeaderFileRenameParticipant.java)/**
 * Updates include statements and include guards in response to a file or a folder rename.
 */
RenameCSourceFolderChange (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/RenameCSourceFolderChange.java)/**
 * @author Emanuel Graf IFS
 */
RenameModifications (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/RenameModifications.java)/**
 * Stores objects renamed by the rename refactoring.
 */
RenameParticipantHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/RenameParticipantHelper.java)/**
 * Static methods used by rename and move participants.
 */
RenameSupport (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/RenameSupport.java)/**
 * Central access point to execute rename refactorings.
 */
SourceFolderRenameParticipant (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/SourceFolderRenameParticipant.java)/**
 * Updates source folders and associated filters of a C/C++ project in response to a folder rename.
 *
 * @author Emanuel Graf IFS
 */
TextSearchWrapper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/rename/TextSearchWrapper.java)/**
 * Wraps the platform text search and uses a scanner to categorize the text-matches
 * by location (comments, string-literals, etc.).
 */
DeclaratorFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/togglefunction/DeclaratorFinder.java)/**
 * Given a selection and a translation unit, this class finds a
 * ICPPASTFunctionDeclarator if possible. Special case: Nested local functions
 * are skipped during search.
 */
NotSupportedException (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/togglefunction/NotSupportedException.java)/**
 * Thrown when the developer had no time to implement a special case the user
 * tried to refactor.
 *
 */
ToggleRefactoring (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/togglefunction/ToggleRefactoring.java)/**
 * Determines whether a valid function was selected by the user to be able to
 * run the appropriate strategy for moving the function body to another
 * position.
 */
ToggleRefactoringRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/togglefunction/ToggleRefactoringRunner.java)/**
 * Responsible for scheduling a job which runs the ToggleRefactoring. Differs
 * from other subclasses of RefactoringRunner in the way that it does not use a
 * wizard but calls the refactoring directly.
 */
TogglingActionDelegate (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/togglefunction/TogglingActionDelegate.java)/**
 * Represents the interface between the user who invokes the action and the
 * actual refactoring mechanism. Starts the ToggleRefactoringRunner.
 *
 * Order of execution is: constructor, init, selectionChanged, run
 */
Checks (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/Checks.java)/**
 * This class defines a set of reusable static checks methods.
 */
DefinitionFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/DefinitionFinder.java)/**
 * Helper class for finding definitions and class member declarations
 */
EclipseObjects (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/EclipseObjects.java)/**
 * A collection of helper methods to interact with the workbench's IDocuments and IFiles
 */
ExpressionFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/ExpressionFinder.java)/**
 * @author Guido Zgraggen IFS
 */
FileContentHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/FileContentHelper.java)/**
 * Some helper methods to access part of the content of an iFile
 *
 * @author Emanuel Graf
 *
 */
FileHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/FileHelper.java)/**
 * Helper class concerning files.
 *
 * @author Lukas Felber
 */
IdentifierHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/IdentifierHelper.java)/**
 * Class to verify that an identifier meets the C++ rules for valid names.
 *
 * @author Thomas Corbat
 */
IdentifierResult (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/IdentifierResult.java)/**
 * Holds the result of a name validation, used by the IdentifierHelper.
 *
 * @author Thomas Corbat
 *
 */
NameHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/NameHelper.java)/**
 * Helps with IASTNames.
 *
 * @author Mirko Stocker
 */
NamespaceHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/NamespaceHelper.java)/**
 * Helper class to find Namespace informations.
 * @author Mirko Stocker
 */
NodeHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/NodeHelper.java)/**
 * General class for common Node operations.
 *
 * @author Lukas Felber & Guido Zgraggen
 */
PseudoNameGenerator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/PseudoNameGenerator.java)/**
 * Helps to generate new unused names.
 *
 * @author Mirko Stocker
 *
 */
SelectionHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/SelectionHelper.java)/**
 * Helper class to support operations concerning a selection.
 *
 * @author Mirko Stocker, Lukas Felber
 */
VariableNameInformation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/VariableNameInformation.java)/**
 * Contains the name for a new variable and holds a list of used names.
 */
ResourceExclusionContributor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/resources/ResourceExclusionContributor.java)/**
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part of a work in progress. There
 * is no guarantee that this API will work or that it will remain the same. Please do not use this API without
 * consulting with the CDT team.
 *
 * @author vkong
 * @since 5.3
 *
 */
ResourceToCElementAdapterFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/ResourceToCElementAdapterFactory.java)/**
 * An adapter factory that adapts resources to CElements. This was introduced in
 * the context of non-extensible content providers (Package Explorer) which
 * contain plain resources and not CElements. This allows some contributions to
 * work without explicitly depending the content provider in order to extend it.
 */
AlignConstSaveAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/saveactions/AlignConstSaveAction.java)/**
 * Save action to align all const specifiers in a given translation unit
 * according to the settings in the workspace preferences (left or right to
 * type).
 *
 */
FindUnresolvedIncludesHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/FindUnresolvedIncludesHandler.java)/**
 * Handler for {@link org.eclipse.cdt.internal.ui.search.actions.FindUnresolvedIncludesProjectAction}
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
FindUnresolvedIncludesProjectAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/FindUnresolvedIncludesProjectAction.java)/**
 * Searches projects for unresolved includes.
 * Could be extended to work on resource selections.
 */
ITargetDisambiguator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/OpenDeclarationsAction.java)/**
	 * Used to diambiguate between multiple candidate targets for this action.
	 */
DialogTargetDisambiguator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/OpenDeclarationsAction.java)/**
	 * Disambiguates by showing the user a dialog to choose.
	 */
OpenDeclarationsAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/OpenDeclarationsAction.java)/**
 * Navigates to the definition of a name, or to the declaration if invoked on the definition.
 */
SelectionParseAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/SelectionParseAction.java)/**
 * @author aniefer
 * Created on Jun 2, 2004
 */
CountLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CountLabelProvider.java)/**
 * @author bgheorgh
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
CSearchElement (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchElement.java)/**
 * Element class used to group matches.
 *
 * @author Doug Schaefer
 */
CSearchElementQuery (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchElementQuery.java)/**
 * @author Doug Schaefer
 */
CSearchLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchLabelProvider.java)/**
 * The content in the tree and list views may be either:
 * <p>
 * IStatus - warnings or errors from the search<br>
 * ICElement - for C/C++ elements, including TUs, folders, projects<br>
 * IPath - directory container, full path<br>
 * 		IIndexFileLocation - for file entries inside IPath directory containers<br>
 * {@link IPDOMSearchContentProvider#URI_CONTAINER} - container for URIs<br>
 * 		URI - for IIndexFileLocations not resolvable to the local filesystem, under URI_CONTAINER<br>
 * @author Doug Schaefer
 * @author Ed Swartz
 */
CSearchListContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchListContentProvider.java)/**
 * @author Doug Schaefer
 */
CSearchListLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchListLabelProvider.java)/**
 * @author Doug Schaefer
 */
CSearchMatch (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchMatch.java)/**
 * Base class for search matches found by various index searches.
 */
CSearchPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchPage.java)/**
 * @author Doug Schaefer
 */
CSearchPatternQuery (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchPatternQuery.java)/**
 * @author Doug Schaefer
 */
CSearchProviderManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchProviderManager.java)/**
 * Maintains a list of extensions implementing the org.eclipse.cdt.ui.externalSearchProviders
 * extension point.
 */
CSearchResult (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchResult.java)/**
 * @author Doug Schaefer
 */
CSearchTextSelectionQuery (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchTextSelectionQuery.java)/**
 * Query for searching the index based on a text selection.
 */
CSearchTreeContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchTreeContentProvider.java)/**
 * @author Doug Schaefer
 */
CSearchUnresolvedIncludesQuery (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchUnresolvedIncludesQuery.java)/**
 * Query for searching unresolved includes in projects.
 * Could be extended to search resources selections.
 */
SearchViewerComparator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchViewPage.java)/**
	 * Supply a sorter for the list and tree content providers to supply some order to the
	 * large numbers of matches that may result.
	 * <p>
	 * This sorter categorizes the different kinds of ICElement matches (as well as IStatus
	 * messages and External Files groups) to place them in groups.  The items within a
	 * category are sorted in the default way {@link ViewerComparator#compare(Viewer, Object, Object)} works,
	 * by comparing text labels.
	 * <p>
	 * A potential concern here is that, in sorting the elements by name, the user may
	 * find himself randomly jumping around a file when navigating search results in order.
	 * As this only happens when a search matches different identifiers or identifiers of
	 * different types, and since the user can use a textual search within a file to navigate
	 * the same results (ignoring extraneous hits in comments or disabled code), I argue it's not
	 * a big deal.  Furthermore, usually it would be a wildcard search that would result in
	 * this situation -- indicating the user doesn't know the identifier and wants to find it using
	 * search.  In such a case, a sorted list of results in much more friendly to navigate.
	 */
CSearchViewPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchViewPage.java)/**
 * Implementation of the search view page for index based searches.
 */
HideReadOnlyReferences (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/HideReadOnlyReferences.java)/**
 * A filter class that implements hiding the Read-only references.
 */
OccurrenceLocation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/IOccurrencesFinder.java)/**
	 * Element representing an occurrence
	 */
IPDOMSearchContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/IPDOMSearchContentProvider.java)/**
 * The content in the tree and list views may be either:
 * <p>
 * IStatus - warnings or errors from the search<br>
 * ICElement - for C/C++ elements, including TUs, folders, projects<br>
 * IPath - directory container, full path<br>
 * 		IIndexFileLocation - for file entries inside IPath directory containers<br>
 * {@link IPDOMSearchContentProvider#URI_CONTAINER} - container for URIs
 * 		URI - from IIndexFileLocations not resolvable to the local filesystem, under URI_CONTAINER<br>
 * @author Doug Schaefer
 * @author Ed Swartz
 *
 */
LineSearchElement (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/LineSearchElement.java)/**
 * Element representing a line with one ore more matches.
 */
SubclassFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/LinkedNamesFinder.java)/**
	 * Finds subclasses of the given class referenced by the AST.
	 */
LinkedNamesFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/LinkedNamesFinder.java)/**
 * Finds locations of linked names. Used by Rename in File and Rename in Workspace.
 */
LRUWorkingSets (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/LRUWorkingSets.java)/**
 * @author bgheorgh
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
OpenCSearchPageAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/OpenCSearchPageAction.java)/**
 * @author bgheorgh
 */
ProblemSearchElement (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/ProblemSearchElement.java)/**
 * Represents a problem in a search.
 */
TypeInfoSearchElement (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/TypeInfoSearchElement.java)/**
 * Represents a a c/c++-entity in a search.
 */
AbstractCompareViewerInformationControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/AbstractCompareViewerInformationControl.java)/**
 * Abstract class for "quick" compare views in light-weight controls.
 *
 * @since 5.0
 */
NamePatternFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/AbstractInformationControl.java)/**
	 * The NamePatternFilter selects the elements which
	 * match the given string patterns.
	 */
AbstractInformationControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/AbstractInformationControl.java)/**
 * Abstract class for "quick" views in light-weight controls.
 *
 * @since 4.0
 */
AbstractSourceViewerInformationControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/AbstractSourceViewerInformationControl.java)/**
 * Abstract class for "quick" source views in light-weight controls.
 *
 * @since 5.0
 */
AsmPartitionScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/asm/AsmPartitionScanner.java)/**
 * This scanner recognizes
 * <ul>
 * <li>C multi line comments</li>
 * <li>Assembly line comments</li>
 * <li>C++ line comments</li>
 * <li>C string literals</li>
 * <li>Assembly character literals</li>
 * <li>C preprocessor directives</li>
 * </ul>
 * Default supported line start comment characters are ';', '!', '|' and '@'.
 * <p>
 * A simple heuristic is used to detect valid line end comment characters: If a
 * character known to be a potential line end comment character is used as a
 * line start comment char, this character is considered a valid line end
 * comment character, too. If e.g. a '@' is used to introduce a line start
 * comment it is also recognized as a line end comment introducer afterwards.
 * </p>
 */
BufferedDocumentScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/BufferedDocumentScanner.java)/**
 * A buffered document scanner. The buffer always contains a section
 * of a fixed size of the document to be scanned.
 */
AnnotationInfo (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AbstractAnnotationHover.java)/**
	 * An annotation info contains information about an {@link Annotation}
	 *
	 * @since 5.0
	 */
AnnotationInformationControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AbstractAnnotationHover.java)/**
	 * The annotation information control shows informations about a given
	 * {@link AbstractAnnotationHover.AnnotationInfo}. It can also show a toolbar
	 * and a list of {@link ICompletionProposal}s.
	 *
	 * @since 5.0
	 */
PresenterControlCreator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AbstractAnnotationHover.java)/**
	 * Presenter control creator.
	 *
	 * @since 5.0
	 */
HoverControlCreator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AbstractAnnotationHover.java)/**
	 * Hover control creator.
	 *
	 * @since 5.0
	 */
ConfigureAnnotationsAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AbstractAnnotationHover.java)/**
	 * Action to configure the annotation preferences.
	 *
	 * @since 5.0
	 */
AbstractAnnotationHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AbstractAnnotationHover.java)/**
 * AbstractAnnotationHover
 * Abstract super class for annotation hovers.
 */
AbstractCEditorTextHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AbstractCEditorTextHover.java)/**
 * Abstract class for providing hover information for C elements.
 */
AnnotationExpandHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpandHover.java)/**
 * This class was copied from org.eclipse.jdt.internal.ui.text.java.hover.AnnotationExpansionControl
 *
 * @since 6.1
 */
AnnotationHoverInput (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpansionControl.java)/**
	 * Input used by the control to display the annotations.
	 * TODO move to top-level class
	 * TODO encapsulate fields
	 *
	 * @since 6.1
	 */
MyDisposeListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpansionControl.java)/**
	 * Disposes of an item
	 */
MyMenuDetectListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpansionControl.java)/**
	 * Listener on context menu invocation on the items
	 */
MyMouseListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpansionControl.java)/**
	 * Listener on mouse events on the items.
	 */
MyMouseTrackListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpansionControl.java)/**
	 * Listener on mouse track events on the items.
	 */
LinearLayouter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpansionControl.java)/**
	 * @since 6.1
	 */
MyPaintListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpansionControl.java)/**
	 * Listener on paint events on the items. Paints the annotation image on the given <code>GC</code>.
	 */
HoverManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpansionControl.java)/**
	 * Our own private hover manager used to shop per-item pop-ups.
	 */
AnnotationExpansionControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationExpansionControl.java)/**
 * A control that can display a number of annotations. The control can decide how it layouts the
 * annotations to present them to the user.
 * <p>
 * This class was copied from org.eclipse.jdt.internal.ui.text.java.hover.AnnotationExpansionControl
 * </p>
 * <p>Each annotation can have its custom context menu and hover.</p>
 *
 * @since 6.1
 */
AnnotationHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/AnnotationHover.java)/**
 * AnnotationHover
 * This annotation hover shows the description of the
 * selected annotation.
 */
BestMatchHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/BestMatchHover.java)/**
 * 'Fake' hover used to choose the best available hover.
 * This hover is always the first hover used and will delegate the hover
 * request to the best of the real hovers.  The 'best' hover is the first
 * hover that returns some text for the specified parameters.
 *
 * Note that hovers are ordered by plugin dependency, with the most specific
 * hovers being placed before less specific ones.
 */
CEditorTextHoverDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CEditorTextHoverDescriptor.java)/**
 * CEditorTexHoverDescriptor
 */
CEditorTextHoverProxy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CEditorTextHoverProxy.java)/**
 * CEditorTexHoverProxy
 */
CExpandHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CExpandHover.java)/**
 * Originally copied from org.eclipse.jdt.internal.ui.text.java.hover.JavaExpandHover
 * @since 6.1
 */
ControlCreator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CInformationProvider.java)/**
	 * Default control creator.
	 */
EditorWatcher (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CInformationProvider.java)/**
	 * Part listener handling editor close.
	 */
CInformationProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CInformationProvider.java)/**
 * Provides information for the current word under the cursor based on the documentation hover
 * and spelling correction hover.
 *
 * @see CTypeHover
 * @since 5.0
 */
NullTokenComparator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CMacroCompareViewer.java)/**
	 * A dummy {@link ITokenComparator}.
	 */
CMacroCompareViewer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CMacroCompareViewer.java)/**
 * A viewer for comparison of macro expansions.
 *
 * @since 5.0
 */
CMacroExpansionControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CMacroExpansionControl.java)/**
 * Information control for macro expansion.
 *
 * @since 5.0
 */
CMacroExpansionExplorationControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CMacroExpansionExplorationControl.java)/**
 * Information control for macro expansion exploration.
 *
 * @since 5.0
 */
CMacroExpansionHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CMacroExpansionHover.java)/**
 * A hover to explore macro expansion.
 *
 * @since 5.0
 */
CMacroExpansionInformationProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CMacroExpansionInformationProvider.java)/**
 * Information provider for macro exploration.
 *
 * @since 5.0
 */
ExpansionRegionComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CMacroExpansionInput.java)/**
	 * Computes the expansion region for a selection.
	 */
CMacroExpansionInput (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CMacroExpansionInput.java)/**
 * An input object to the {@link CMacroExpansionExplorationControl}.
 *
 * @since 5.0
 */
ComputeSourceRunnable (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CSourceHover.java)/**
	 * Computes the source location for a given identifier.
	 */
CSourceHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CSourceHover.java)/**
 * A text hover presenting the source of the element under the cursor.
 */
CTypeHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/CTypeHover.java)/**
 * Aggregator of problem and doc hovers.
 * @since 5.0
 */
ProblemHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/ProblemHover.java)/**
 * This annotation hover shows the description of the
 * selected java annotation.
 *
 * XXX: Currently this problem hover only works for spelling problems.
 *		see: https://bugs.eclipse.org/bugs/show_bug.cgi?id=62081
 *
 * @since 5.0
 */
SourceViewerInformationControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/c/hover/SourceViewerInformationControl.java)/**
 * Source viewer based implementation of <code>IInformationControl</code>.
 * Displays information in a source viewer.
 *
 */
CAutoIndentStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CAutoIndentStrategy.java)/**
 * Auto indent strategy sensitive to brackets.
 */
CBraceRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CBraceRule.java)/**
 * Braces rule.
 *
 * @author P.Tomaszewski
 */
Run (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CBreakIterator.java)/**
	 * A run of common characters.
	 */
CBreakIterator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CBreakIterator.java)/**
 * A C break iterator. It returns all breaks, including before and after
 * whitespace, and it returns all camel case breaks.
 * <p>
 * A line break may be any of "\n", "\r", "\r\n", "\n\r".
 * </p>
 *
 * @since 4.0
 */
CCodeReader (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CCodeReader.java)/**
 * Reads from a document either forwards or backwards. May be configured to
 * skip comments and strings.
 */
CCodeScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CCodeScanner.java)/**
 * A C/C++ code scanner.
 */
CCommentScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CCommentScanner.java)/**
 * Default token-scanner used for plain (non-documentation-comment) single and multi-line comments, with awareness of
 * task tags.
 */
CCompositeReconcilingStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CCompositeReconcilingStrategy.java)/**
 * Reconciling strategy for C/C++ code. This is a composite strategy containing
 * the regular C/C++ model reconciler and the comment spelling strategy.
 */
CDoubleClickSelector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CDoubleClickSelector.java)/**
 * Double click strategy aware of C identifier syntax rules.
 */
CFormattingStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CFormattingStrategy.java)/**
 * @author AChapiro
 */
CHeaderRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHeaderRule.java)/**
 * Recognizes headers specified using angle brackets (e.g. #include <stdio.h>).
 */
CHelpBookDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHelpBookDescriptor.java)/**
 * This class represents the CHelpBook settings
 *
 * @since 2.1
 */
CHelpProviderDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHelpProviderDescriptor.java)/**
 * This class represents the CHelpProvider settings
 *
 * @since 2.1
 */
CHelpSettings (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHelpSettings.java)/**
 * This class represents the Help settings for the current project
 *
 * @since 2.1
 */
StopCondition (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHeuristicScanner.java)/**
	 * Specifies the stop condition, upon which the <code>scanXXX</code> methods will decide whether
	 * to keep scanning or not. This interface may implemented by clients.
	 */
NonWhitespace (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHeuristicScanner.java)/**
	 * Stops upon a non-whitespace (as defined by {@link Character#isWhitespace(char)}) character.
	 */
NonWhitespaceDefaultPartition (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHeuristicScanner.java)/**
	 * Stops upon a non-whitespace character in the default partition.
	 *
	 * @see NonWhitespace
	 */
NonJavaIdentifierPart (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHeuristicScanner.java)/**
	 * Stops upon a non-java identifier (as defined by {@link Character#isJavaIdentifierPart(char)}) character.
	 */
NonJavaIdentifierPartDefaultPartition (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHeuristicScanner.java)/**
	 * Stops upon a non-java identifier character in the default partition.
	 *
	 * @see NonJavaIdentifierPart
	 */
CharacterMatch (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHeuristicScanner.java)/**
	 * Stops upon a character in the default partition that matches the given character list.
	 */
TokenStream (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHeuristicScanner.java)/**
	 *  A simplified interface to CHeuristicScanner's
	 *  nextToken() and previousToken() methods.
	 */
CHeuristicScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CHeuristicScanner.java)/**
 * Utility methods for heuristic based C manipulations in an incomplete C source file.
 *
 * <p>An instance holds some internal position in the document and is therefore not thread-safe.</p>
 */
CorePrefs (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CIndenter.java)/**
	 * The CDT Core preferences.
	 */
CIndenter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CIndenter.java)/**
 * Uses the {@link org.eclipse.cdt.internal.ui.text.CHeuristicScanner} to
 * get the indentation level for a certain position in a document.
 *
 * <p>
 * An instance holds some internal position in the document and is therefore
 * not thread-safe.
 * </p>
 */
WordMatcher (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CombinedWordRule.java)/**
	 * Word matcher, that associates matched words with tokens.
	 */
CharacterBuffer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CombinedWordRule.java)/**
	 * Character buffer, mutable <b>or</b> suitable for use as key in hash maps.
	 */
CombinedWordRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CombinedWordRule.java)/**
 * An implementation of <code>IRule</code> capable of detecting words.
 * <p>
 * Word rules also allow for the association of tokens with specific words.
 * That is, not only can the rule be used to provide tokens for exact matches,
 * but also for the generalized notion of a word in the context in which it is used.
 * A word rules uses a word detector to determine what a word is.</p>
 * <p>
 * This word rule allows a word detector to be shared among different word matchers.
 * Its up to the word matchers to decide if a word matches and, in this a case, which
 * token is associated with that word.
 * </p>
 *
 * @see IWordDetector
 * @since 5.1
 */
CompositeReconcilingStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CompositeReconcilingStrategy.java)/**
 * A reconciling strategy consisting of a sequence of internal reconciling strategies.
 * By default, all requests are passed on to the contained strategies.
 */
ReferenceTracker (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/CCompletionProposal.java)/**
	 * A class to simplify tracking a reference position in a document.
	 */
CContentAssistInvocationContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/CContentAssistInvocationContext.java)/**
 * Describes the context of a content assist invocation in a C/C++ editor.
 * <p>
 * Clients may instantiate. A client that created a context is responsible for its disposal.
 * </p>
 *
 * @since 4.0
 */
CCompletionProposalWrapper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/CContentAssistProcessor.java)/**
	 * A wrapper for {@link ICompetionProposal}s.
	 */
CContentAssistProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/CContentAssistProcessor.java)/**
 * C/C++ content assist processor.
 */
CompletionProposalCategory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/CompletionProposalCategory.java)/**
 * Describes a category extension to the "completionProposalComputer" extension point.
 *
 * @since 4.0
 */
CompletionProposalComputerDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/CompletionProposalComputerDescriptor.java)/**
 * The description of an extension to the
 * <code>org.eclipse.cdt.ui.completionProposalComputer</code> extension point. Instances are
 * immutable. Instances can be obtained from a {@link CompletionProposalComputerRegistry}.
 *
 * @see CompletionProposalComputerRegistry
 * @since 4.0
 */
CompletionProposalComputerRegistry (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/CompletionProposalComputerRegistry.java)/**
 * A registry for all extensions to the
 * <code>org.eclipse.cdt.ui.completionProposalComputer</code>
 * extension point.
 *
 * @since 4.0
 */
ContentAssistComputerParameter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/ContentAssistComputerParameter.java)/**
 * Map of parameters for the specific content assist command.
 *
 * @since 4.0
 */
ContentAssistHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/ContentAssistHandler.java)/**
 * A command handler to invoke a content assist for a specific proposal category.
 *
 * @since 4.0
 */
ContentAssistMessages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/ContentAssistMessages.java)/**
 * Helper class to get NLSed messages.
 */
ContentAssistProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/ContentAssistProcessor.java)/**
 * A content assist processor that aggregates the proposals of the
 * {@link org.eclipse.cdt.ui.text.contentassist.ICompletionProposalComputer}s contributed via
 * the {@code org.eclipse.cdt.ui.completionProposalComputer} extension point.
 * <p>
 * Subclasses may extend:
 * <ul>
 * <li>{@code createContext} to provide the context object passed to the computers</li>
 * <li>{@code createProgressMonitor} to change the way progress is reported</li>
 * <li>{@code filterAndSort} to add sorting and filtering</li>
 * <li>{@code getContextInformationValidator} to add context validation (needed if any
 * contexts are provided)</li>
 * <li>{@code getErrorMessage} to change error reporting</li>
 * </ul>
 *
 * @since 4.0
 */
CProposalContextInformation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/CProposalContextInformation.java)/**
 * @author aniefer
 */
DefaultProposalFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/DefaultProposalFilter.java)/**
 * The default code completion filter: Remove duplicate entries on the basis of
 * their id string. Use CCompletionProposalComparator for sorting.
 */
DOMCompletionProposalComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/DOMCompletionProposalComputer.java)/**
 * Searches the DOM (both the AST and the index) for completion proposals.
 *
 * @author Bryan Wilkinson
 */
FunctionCompletionProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/FunctionCompletionProposal.java)/**
 * This is a modified version of org.eclipse.jdt.internal.ui.text.java.JavaMethodCompletionProposal
 *
 * This class adds a linked mode function compilation proposal with exit policy.
 */
HippieProposalComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/HippieProposalComputer.java)/**
 * A computer wrapper for the hippie processor.
 *
 * @since 4.0
 */
InclusionProposalComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/InclusionProposalComputer.java)/**
 * A proposal computer for include directives.
 *
 * @since 5.0
 */
Lazy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/Lazy.java)/**
 * This class represents a field or variable which shall be initialized lazily when accessed
 * the first time. It's value is computed once by the {@code calculateValue()} method. The value is
 * accessed by {@code value()}.
 *
 * This implementation is NOT thread-safe!
 *
 * @param <E> The type of the lazy initialized variable.
 */
ParameterGuesser (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/ParameterGuesser.java)/**
 * This class is based on org.eclipse.jdt.internal.ui.text.java.ParameterGuesser
 *
 * This class produces a logically-ordered list of applicable variables for later use as parameter guessing
 * proposals for a function parameter.
 */
ParameterGuessingProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/ParameterGuessingProposal.java)/**
 * This class is based on org.eclipse.jdt.internal.ui.text.java.ParameterGuessingProposal
 *
 * Extents the basic Function Completion Proposal to add a linked mode for each of the function parameters
 * with a list of suggestions for each parameter.
 */
ParsingBasedProposalComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/ParsingBasedProposalComputer.java)/**
 * The base class for any proposal computers that require a completion node in
 * order to determine its completion proposals.
 *
 * @author Bryan Wilkinson
 */
PositionBasedCompletionProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/PositionBasedCompletionProposal.java)/**
 * An enhanced implementation of the <code>ICompletionProposal</code> interface implementing all the extension interfaces.
 * It uses a position to track its replacement offset and length. The position must be set up externally.
 */
TemplateCompletionProposalComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/contentassist/TemplateCompletionProposalComputer.java)/**
 * A completion proposal computer for templates.
 *
 * @since 4.0
 */
COperatorRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/COperatorRule.java)/**
 * Rule to recognize operators.
 *
 * @author P.Tomaszewski
 */
CorrectionCommandHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/CorrectionCommandHandler.java)/**
 * Handler to be used to run a quick fix or assist by keyboard shortcut
 */
CorrectionMessages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/CorrectionMessages.java)/**
 * Helper class to get NLSed messages.
 */
CSelectAnnotationRulerAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/CSelectAnnotationRulerAction.java)/**
 * Action which gets triggered when selecting (annotations) in the vertical ruler.
 * based upon org.eclipse.jdt.internal.ui.javaeditor.JavaSelectMarkerRulerAction
 */
ICommandAccess (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/ICommandAccess.java)/**
 * Correction proposals implement this interface to by invokable by a command.
 * (e.g. keyboard shortcut)
 */
IStatusLineProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/IStatusLineProposal.java)/**
 * A proposal which is able to show a message
 * on the status line of the content assistant
 * in which this proposal is shown.
 *
 * @see org.eclipse.jface.text.contentassist.IContentAssistantExtension2
 */
ASTRewriteCorrectionProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/proposals/ASTRewriteCorrectionProposal.java)/**
 * A proposal for quick fixes and quick assists that works on a AST rewriter.
 * Either a rewriter is directly passed in the constructor or method {@link #getRewrite()}
 * is overridden to provide the AST rewriter that is evaluated to the document when the
 * proposal is applied.
 *
 * @since 5.1
 */
ChangeCorrectionProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/proposals/ChangeCorrectionProposal.java)/**
 * Implementation of a C completion proposal to be used for quick fix and quick assist
 * proposals that invoke a {@link Change}. The proposal offers a proposal information but no context
 * information.
 *
 * @since 5.1
 */
LinkedCorrectionProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/proposals/LinkedCorrectionProposal.java)/**
 * A proposal for quick fixes and quick assists that works on a AST rewriter and enters the
 * linked mode when the proposal is set up.
 * Either a rewriter is directly passed in the constructor or method {@link #getRewrite()} is
 * overridden to provide the AST rewriter that is evaluated to the document when the proposal
 * is applied.
 * @since 5.1
 */
DeleteBlockingExitPolicy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/proposals/LinkedNamesAssistProposal.java)/**
	 * An exit policy that skips Backspace and Delete at the beginning and at the end
	 * of a linked position, respectively.
	 *
	 * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=183925 .
	 */
LinkedNamesAssistProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/proposals/LinkedNamesAssistProposal.java)/**
 * A proposal allowing user to edit in place all occurrences of a name.
 */
RenameRefactoringProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/proposals/RenameRefactoringProposal.java)/**
 * A quick assist proposal that starts the Rename refactoring.
 */
TUCorrectionProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/proposals/TUCorrectionProposal.java)/**
 * A proposal for quick fixes and quick assist that work on a single compilation unit.
 * Either a {@link TextChange text change} is directly passed in the constructor or method
 * {@link #addEdits(IDocument, TextEdit)} is overridden to provide the text edits that are
 * applied to the document when the proposal is evaluated.
 * <p>
 * The proposal takes care of the preview of the changes as proposal information.
 *
 * @since 5.1
 */
QuickAssistLightBulbUpdater (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/QuickAssistLightBulbUpdater.java)/**
 *
 */
QuickAssistProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/correction/QuickAssistProcessor.java)/**
 * see org.eclipse.cdt.ui.text.IQuickAssistProcessor
 */
COutlineInformationControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/COutlineInformationControl.java)/**
 * Control which shows outline information in C/C++ editor. Based on
 * AbstracInformationContol/JavaOutlineInformationControl from JDT.
 *
 * @author P.Tomaszewski
 */
CPairMatcher (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CPairMatcher.java)/**
 * Helper class to match pairs of characters.
 */
CParameterListValidator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CParameterListValidator.java)/**
 * This class provides the function parameter parsing for the C/C++ Editor hover.
 * It is based heavily on the Java class JavaParameterListValidator.
 *
 * @author thomasf
 */
CPreprocessorScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CPreprocessorScanner.java)/**
 * A scanner for preprocessor directives.
 *
 * @since 4.0
 */
CPresentationReconciler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CPresentationReconciler.java)/**
 * Presentation reconciler, adding functionality for operation without a viewer.
 * Cloned from JDT.
 *
 * @since 4.0
 */
PartListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CReconciler.java)/**
	 * Internal part listener for activating the reconciler.
	 */
ActivationListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CReconciler.java)/**
	 * Internal Shell activation listener for activating the reconciler.
	 */
ElementChangedListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CReconciler.java)/**
	 * Internal C element changed listener
	 */
CReconciler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CReconciler.java)/**
 * A single strategy C reconciler.
 *
 * @since 4.0
 */
CSourceViewerScalableConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CSourceViewerScalableConfiguration.java)/**
 * Configuration for an <code>SourceViewer</code> which shows C/C++ code.
 * It turns off some editor features when scalability mode options are enabled.
 */
CStringAutoIndentStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CStringAutoIndentStrategy.java)/**
 * Auto indent strategy for C strings
 */
CStringDoubleClickSelector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CStringDoubleClickSelector.java)/**
 * Double click strategy aware of string and character syntax rules.
 *
 * @since 4.0
 */
CTextTools (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CTextTools.java)/**
 * Tools required to configure a C/C++ source viewer.
 * Scanners must be configured using a {@link CSourceViewerConfiguration}.
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 */
CWhitespaceRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CWhitespaceRule.java)/**
 * A simple whitespace rule with configurable token.
 */
CWordFinder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CWordFinder.java)/**
 * This is a helper class for the text editor to be able to determine, given a
 * particular offset in a document, various candidates segments for things like
 * context help, proposals and hovering.
 */
CWordIterator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/CWordIterator.java)/**
 * Breaks C text into word starts, also stops at line start and end. No
 * direction dependency.
 *
 * @since 4.0
 */
DocCommentOwner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/doctools/DocCommentOwner.java)/**
 * Internal implementation of IDocCommentOwner
 */
DocCommentOwnerManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/doctools/DocCommentOwnerManager.java)/**
 * This class manages which IDocCommentOwner's are available in the run-time, and how they map to
 * resources in projects.
 * @since 5.0
 */
DocCommentSpellDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/doctools/DocCommentSpellDictionary.java)/**
 * Adapter from interim public {@link IDocCommentSimpleDictionary} to internal {@link ISpellDictionary}
 */
EditorReopener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/doctools/EditorReopener.java)/**
 * Listens to change in doc-comment ownership and reinitializes
 * the editors (or a safe superset of) that need reopening.
 */
ProjectMap (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/doctools/ProjectMap.java)/**
 * A ProjectMap is an internal abstraction which
 * <ul>
 * <li>Maintains mappings from project relative paths to comment-owner ID's
 * <li>Manages persistence of these mappings to the .cproject file.
 * </ul>
 * for a particular {@link IProject}
 *
 * @since 5.0
 */
DocumentCharacterIterator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/DocumentCharacterIterator.java)/**
 * An <code>IDocument</code> based implementation of
 * <code>CharacterIterator</code> and <code>CharSequence</code>. Note that
 * the supplied document is not copied; if the document is modified during the
 * lifetime of a <code>DocumentCharacterIterator</code>, the methods
 * returning document content may not always return the same values. Also, if
 * accessing the document fails with a {@link BadLocationException}, any of
 * <code>CharacterIterator</code> methods as well as <code>charAt</code>may
 * return {@link CharacterIterator#DONE}.
 *
 * @since 4.0
 */
FastCPartitioner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/FastCPartitioner.java)/**
 * A slightly adapted FastPartitioner.
 */
FastCPartitionScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/FastCPartitionScanner.java)/**
 * This scanner recognizes the C multi line comments, C single line comments,
 * C strings, C characters and C preprocessor directives.
 */
CFoldingStructureProviderDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/CFoldingStructureProviderDescriptor.java)/**
 * Describes a contribution to the folding provider extension point.
 *
 */
DefaultCFoldingPreferenceBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingPreferenceBlock.java)/**
 */
StatementVisitor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * A visitor to collect compound statement positions.
	 *
	 * @since 5.0
	 */
SelectionListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * Listen to cursor position changes.
	 */
FoldingStructureReconciler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * Update folding positions triggered by reconciler.
	 */
FoldingStructureComputationContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * A context that contains the information needed to compute the folding structure of an
	 * {@link ITranslationUnit}. Computed folding regions are collected via
	 * {@linkplain #addProjectionRange(DefaultCFoldingStructureProvider.CProjectionAnnotation, Position) addProjectionRange}.
	 */
CommentPosition (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * Projection position that will return two foldable regions: one folding away
	 * the region from after the '/*' to the beginning of the content, the other
	 * from after the first content line until after the comment.
	 */
CElementPosition (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * Projection position that will return two foldable regions: one folding away
	 * the lines before the one containing the simple name of the C element, one
	 * folding away any lines after the caption.
	 */
ProjectionListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * Internal projection listener.
	 */
ModifiableRegion (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * Implementation of <code>IRegion</code> that can be reused
	 * by setting the offset and the length.
	 */
Branch (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * Representation of a preprocessor code branch.
	 */
StatementRegion (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
	 * A modifiable region with extra information about the region it holds.
	 * It tells us whether or not to include the last line of the region
	 */
DefaultCFoldingStructureProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/DefaultCFoldingStructureProvider.java)/**
 * Default implementation of a {@link ICFoldingStructureProvider}.
 * <p>
 * Derived from JDT counterpart.
 * </p>
 */
EmptyCFoldingPreferenceBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/folding/EmptyCFoldingPreferenceBlock.java)/**
 * Empty preference block for extensions to the
 * <code>org.eclipse.cdt.ui.foldingStructureProviders</code> extension
 * point that do not specify their own.
 *
 * @since 3.0
 */
HTMLAnnotationHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/HTMLAnnotationHover.java)/**
 * Determines all annotations for the given line and collects, concatenates, and formats
 * their messages in HTML.
 *
 * @since 4.0
 */
HTMLPrinter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/HTMLPrinter.java)/**
 * Provides a set of convenience methods for creating HTML pages.
 */
ICReconcilingListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/ICReconcilingListener.java)/**
 * Interface of an object listening to (AST-) reconciling.
 * Inspired by JDT.
 *
 * @since 4.0
 */
IHtmlTagConstants (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/IHtmlTagConstants.java)/**
 * Html tag constants.
 */
IProblemRequestorExtension (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/IProblemRequestorExtension.java)/**
 * Extension to <code>IProblemRequestor</code>.
 * IProblemRequestorExtension
 */
LineComparator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/LineComparator.java)/**
 * This implementation of <code>IRangeComparator</code> compares lines of a document.
 * The lines are compared using a DJB hash function.
 *
 * @since 5.1
 */
NumberRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/NumberRule.java)/**
 * Recognizes integer and float numbers.
 *
 * @author P.Tomaszewski
 */
PartitionDamager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/PartitionDamager.java)/**
 * A simple presentation damager always damaging the whole partition.
 * This is necessary if the partition contains multiline highlight regions.
 *
 * @since 4.0
 */
PreprocessorRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/PreprocessorRule.java)/**
 * Implementation of <code>IRule</code> for C/C++ preprocessor scanning.
 * It is capable of detecting a pattern which begins with 0 or more whitespaces
 * at the beginning of the string, then '#' sign, then 0 or more whitespaces
 * again, and then directive itself.
 */
SequenceCharacterIterator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/SequenceCharacterIterator.java)/**
 * A <code>CharSequence</code> based implementation of <code>CharacterIterator</code>.
 *
 * @since 4.0
 */
SimpleCSourceViewerConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/SimpleCSourceViewerConfiguration.java)/**
 * A simple {@linkplain org.eclipse.cdt.ui.text.CSourceViewerConfiguration C source viewer configuration}.
 * <p>
 * This simple source viewer configuration basically provides syntax coloring
 * and disables all other features like code assist, quick outlines, hyperlinking, etc.
 * </p>
 */
SingleCharRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/SingleCharRule.java)/**
 * Checks for single char.
 *
 * @author P.Tomaszewski
 */
SingleTokenCScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/SingleTokenCScanner.java)/**
 *
 */
AddWordProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/AddWordProposal.java)/**
 * Proposal to add the unknown word to the dictionaries.
 */
ChangeCaseProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/ChangeCaseProposal.java)/**
 * Proposal to change the letter case of a word.
 */
CoreSpellingProblem (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/CoreSpellingProblem.java)/**
 * Spelling problem to be accepted by problem requesters.
 */
SimpleTokenStore (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/CSpellingEngine.java)/**
	 * A dummy token store for use with a token scanner.
	 */
CSpellingEngine (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/CSpellingEngine.java)/**
 * C/C++ spelling engine
 */
CSpellingProblem (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/CSpellingProblem.java)/**
 * A {@link SpellingProblem} that adapts a {@link ISpellEvent}.
 * <p>
 * TODO: remove {@link ISpellEvent} notification mechanism
 * </p>
 */
SpellingProblemCollector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/CSpellingReconcileStrategy.java)/**
	 * Spelling problem collector that forwards {@link SpellingProblem}s as
	 * {@link IProblem}s to the {@link IProblemRequestor}.
	 */
CSpellingReconcileStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/CSpellingReconcileStrategy.java)/**
 * Reconcile strategy for spell checking comments.
 */
CSpellingService (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/CSpellingService.java)/**
 * Platform's SpellingService uses a spelling engine that is independent
 * of the content type (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=185695).
 * We are providing our own SpellingService to be able to use the C/C++ specific
 * spelling engine even when it is not selected in
 * Preferences/General/Editors/Text Editors/Spelling.
 */
DisableSpellCheckingProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/DisableSpellCheckingProposal.java)/**
 * Proposal to disable spell checking.
 */
AbstractSpellDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/AbstractSpellDictionary.java)/**
 * Partial implementation of a spell dictionary.
 */
DefaultPhoneticDistanceAlgorithm (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/DefaultPhoneticDistanceAlgorithm.java)/**
 * Default phonetic distance algorithm for English words.
 * <p>
 * This algorithm implements the Levenshtein text edit distance.
 * </p>
 */
DefaultPhoneticHashProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/DefaultPhoneticHashProvider.java)/**
 * Default phonetic hash provider for english languages.
 * <p>
 * This algorithm uses an adapted version double metaphone algorithm by
 * Lawrence Philips.
 * <p>
 */
DefaultSpellChecker (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/DefaultSpellChecker.java)/**
 * Default spell checker for standard text.
 */
IPhoneticDistanceAlgorithm (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/IPhoneticDistanceAlgorithm.java)/**
 * Interface of algorithms to compute the phonetic distance between two words.
 */
IPhoneticHashProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/IPhoneticHashProvider.java)/**
 * Interface of hashers to compute the phonetic hash for a word.
 */
ISpellCheckEngine (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/ISpellCheckEngine.java)/**
 * Interface for a spell check engine.
 * <p>
 * This engine can be configured with multiple
 * dictionaries.
 * </p>
 */
ISpellChecker (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/ISpellChecker.java)/**
 * Interface for spell checkers.
 */
ISpellCheckIterator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/ISpellCheckIterator.java)/**
 * Interface for iterators used for spell checking.
 */
ISpellDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/ISpellDictionary.java)/**
 * Interface of dictionaries to use for spell checking.
 */
ISpellEvent (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/ISpellEvent.java)/**
 * Event fired by spell checkers.
 */
ISpellEventListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/ISpellEventListener.java)/**
 * Interface for spell event listeners.
 */
LocaleSensitiveSpellDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/LocaleSensitiveSpellDictionary.java)/**
 * Platform wide read-only locale sensitive dictionary for spell checking.
 */
PersistentSpellDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/PersistentSpellDictionary.java)/**
 * Persistent modifiable word-list based dictionary.
 */
RankedWordProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/RankedWordProposal.java)/**
 * Ranked word proposal for quick fix and content assist.
 */
SpellEvent (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/engine/SpellEvent.java)/**
 * Spell event fired for words detected by a spell check iterator.
 */
HtmlTagDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/HtmlTagDictionary.java)/**
 * Dictionary for html tags.
 */
SpellCheckEngine (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/SpellCheckEngine.java)/**
 * Spell check engine for C/C++ source spell checking.
 */
SpellCheckIterator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/SpellCheckIterator.java)/**
 * Iterator to spell check multiline comment regions.
 */
SpellEventListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/SpellingEngine.java)/**
	 * {@link ISpellEvent}listener that forwards events as
	 * {@link org.eclipse.ui.texteditor.spelling.SpellingProblem}.
	 */
SpellingEngine (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/SpellingEngine.java)/**
 * Internal abstract spelling engine, subclasses provide a content-type specific implementation.
 */
SpellingEngineDispatcher (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/SpellingEngineDispatcher.java)/**
 * A dispatcher that decides what spelling engine to use depending on content type.
 * When C/C++ spelling engine is selected in Preferences/General/Editors/Text Editors/Spelling
 * this class is called to perform spelling check for all text-based content types.
 * If the content type does not match one of C/C++ content types, the spelling check
 * is delegated to the default spelling engine, most likely the one provided by JDT.
 */
SpellingPreferences (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/SpellingPreferences.java)/**
 * This class encapsulates spelling preferences.
 * If the source of spelling preferences were to move from CDT to the platform,
 * this class would make refactoring easier.
 */
TaskTagDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/TaskTagDictionary.java)/**
 * Dictionary for task tags.
 */
TextSpellingEngine (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/TextSpellingEngine.java)/**
 * Text spelling engine
 */
WordCompletionProposalComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/WordCompletionProposalComputer.java)/**
 * Content assist processor to complete words.
 * <strong>Note:</strong> This is currently not supported because the spelling engine
 * cannot return word proposals but only correction proposals.
 */
WordCorrectionProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/WordCorrectionProposal.java)/**
 * Proposal to correct the incorrectly spelled word.
 */
WordIgnoreProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/WordIgnoreProposal.java)/**
 * Proposal to ignore the word during the current editing session.
 */
WordQuickFixProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/spelling/WordQuickFixProcessor.java)/**
 * Quick fix processor for incorrectly spelled words.
 */
SubstitutionTextReader (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/SubstitutionTextReader.java)/**
 * Reads the text contents from a reader and computes for each character
 * a potential substitution. The substitution may eat more characters than
 * only the one passed into the computation routine.
 */
Symbols (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/Symbols.java)/**
 * Symbols for the heuristic C/C++ scanner.
 */
TabsToSpacesConverter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/TabsToSpacesConverter.java)/**
 * Auto edit strategy that converts tabs into spaces.
 * <p>
 * This class is derived from the platform version adding a fix for bug 306333.
 * Can be removed when the bug is fixed.
 * </p>
 * @see org.eclipse.jface.text.TabsToSpacesConverter
 */
TaskTagRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/TaskTagRule.java)/**
 * Which words should be recognized as task tags is specified under {@link CCorePreferenceConstants#TODO_TASK_TAGS} as a
 * comma delimited list.
 *
 * @see CCorePreferenceConstants#TODO_TASK_TAGS
 * @since 5.0
 */
TemplateVariableProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/template/TemplateVariableProposal.java)/**
 * A proposal for insertion of template variables.
 */
CColorManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/util/CColorManager.java)/**
 * CDT color manager.
 */
CWhitespaceDetector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/util/CWhitespaceDetector.java)/**
 * A simple white space detector.
 */
CWordDetector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/text/util/CWordDetector.java)/**
 * A C aware word detector.
 */
THHistoryAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/typehierarchy/THHistoryAction.java)/**
 * Action used for the include browser forward / backward buttons
 */
THViewPart (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/typehierarchy/THViewPart.java)/**
 * The view part for the include browser.
 */
AbstractResourceActionHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/AbstractResourceActionHandler.java)/**
 * Base class for command handlers operating on resources.
 */
BusyIndicatorRunnableContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/BusyIndicatorRunnableContext.java)/**
 * A runnable context that shows the busy cursor instead of a progress
 * monitor. Note, that the UI thread is blocked even if the runnable
 * is executed in a separate thread by passing <code>fork= true</code>
 * to the context's run method. Furthermore this context doesn't provide
 * any UI to cancel the operation.
 */
CHelpDisplayContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/CHelpDisplayContext.java)/**
 *
 * @since 2.1
 */
CUIHelpContextProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/CUIHelp.java)/**
	 * A dynamic help context provider.
	 *
	 * @since 4.0
	 */
CUIHelp (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/CUIHelp.java)/**
 *
 * @since 2.1
 */
DeleteIProblemMarkerAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/DeleteIProblemMarkerAction.java)/**
 * @author Bogdan Gheorghe
 */
ExceptionHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ExceptionHandler.java)/**
 * The default exception handler shows an error dialog when one of its handle methods
 * is called. If the passed exception is a <code>CoreException</code> an error dialog
 * pops up showing the exception's status information. For a <code>InvocationTargetException</code>
 * a normal message dialog pops up showing the exception's message. Additionally the exception
 * is written to the platform log.
 */
ExternalEditorInput (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ExternalEditorInput.java)/**
 * An EditorInput for an external (non-workspace) file.
 */
ExternalEditorInputFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ExternalEditorInputFactory.java)/**
 * The ExternalEditorInputFactory is used to save and recreate an ExternalEditorInput object.
 * As such, it implements the IPersistableElement interface for storage
 * and the IElementFactory interface for recreation.
 *
 * @see IMemento
 * @see IPersistableElement
 * @see IElementFactory
 *
 * @since 4.0
 */
ImageDescriptorRegistry (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ImageDescriptorRegistry.java)/**
 * A registry that maps <code>ImageDescriptors</code> to <code>Image</code>.
 */
IProblemChangedListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/IProblemChangedListener.java)/**
 * Can be added to a ProblemMarkerManager to get notified about error
 * marker changes. Used to update error ticks.
 */
NameComposer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/NameComposer.java)/**
 * Composes names according to a particular style. A seed name is split into
 * words at non-alphanumeric characters and camel case boundaries. The resulting
 * words are capitalized according to the given capitalization style, joined
 * using the given delimiter and combined with the given prefix and suffix.
 */
PendingUpdateAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/PendingUpdateAdapter.java)/**
 * The PendingUpdateAdapter is a convenience object that can be used
 * by a BaseWorkbenchContentProvider that wants to show a pending update.
 */
ProjectErrorVisitor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ProblemMarkerManager.java)/**
	 * Visitors used to filter the element delta changes
	 */
ProblemMarkerManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ProblemMarkerManager.java)/**
 * Listens to resource deltas and filters for marker changes of type
 * IMarker.PROBLEM Viewers showing error ticks should register as listener to
 * this type.
 */
ProblemTableViewer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ProblemTableViewer.java)/**
 * Extends a  TableViewer to allow more performance when showing error ticks.
 * A <code>ProblemItemMapper</code> is contained that maps all items in
 * the tree to underlying resource
 */
ProblemTreeViewer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ProblemTreeViewer.java)/**
 * Extends a  TreeViewer to allow more performance when showing error ticks.
 * A <code>ProblemItemMapper</code> is contained that maps all items in
 * the tree to underlying resource
 */
FetchJob (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/RemoteTreeContentManager.java)/**
	 * Fetching children is done in a single background job.
	 * This makes fetching single threaded/serial per view.
	 */
Collector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/RemoteTreeContentManager.java)/**
	 * Element collector
	 */
RemoteTreeContentManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/RemoteTreeContentManager.java)/**
 * A remote content manager that merges content into a tree rather then replacing
 * its children with a "pending" node, and then the real children when they are available.
 * This avoids collapsing the viewer when a refresh is performed. This implementation is
 * currently tied to the <code>RemoteTreeViewer</code>.
 *
 * @since 3.1
 */
ResourceToItemsMapper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ResourceToItemsMapper.java)/**
 * Helper class for updating error markers and other decorators that work on resources.
 * Items are mapped to their element's underlying resource.
 * Method <code>resourceChanged</code> updates all items that are affected from the changed
 * elements.
 */
RowLayouter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/RowLayouter.java)/**
 * Helper class to layout a number of children if the composite uses a <code>GridLayout</code>.
 * If the numbers of widgets to be layouted into one row is smaller than the number of columns
 * defined for the grid layout the helper class assigns a corresponing value to the <code>
 * GridData.horizontalSpan</code> field.
 *
 * Additionally a row layouter manages a default <code>GridData</code> object for each column.
 * If set this grid data is used for the widget if it doesn't manage its own grid data object.
 *
 * Call one of the <code>perform</code> methods to assign the correct grid data objects to
 * a set of widgets according to the number of columns passed to the layouter's constructor.
 */
StatusLineHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/StatusLineHandler.java)/**
 * Utilities for clearing and setting status line.  Client should
 * invoke {@link #clearStatusLine(IWorkbenchSite)} before an operation
 * and invoke {@link #showStatusLineMessage(IWorkbenchSite, String)} on
 * error.
 * @author eswartz
 *
 */
SWTUtil (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/SWTUtil.java)/**
 * Utility class to simplify access to some SWT resources.
 */
TableLayoutComposite (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/TableLayoutComposite.java)/**
 * A special composite to layout columns inside a table. The composite is needed since we have
 * to layout the columns "before" the actual table gets layouted. Hence we can't use a normal
 * layout manager.
 */
TwoArrayQuickSort (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/TwoArrayQuickSort.java)/**
 * Quick sort to sort two arrays in parallel.
 */
ViewerPane (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ViewerPane.java)/**
 * A <code>ViewerPane</code> is a convenience class which installs a
 * <code>CLabel</code> and a <code>Toolbar</code> in a <code>ViewForm</code>.
 * <P>
 */
AdaptingSelectionProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/AdaptingSelectionProvider.java)/**
 * A selection provider that adapts the elements of structured selections
 * to a requested type.
 * @author markus.schorn@windriver.com
 */
AppearanceAwareLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/AppearanceAwareLabelProvider.java)/**
 * CUILabelProvider that respects settings from the Appearance preference page.
 * Triggers a viewer update when a preference changes (currently none).
 */
AsyncTreeContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/AsyncTreeContentProvider.java)/**
 * A TreeContentProvider that supports asyncronous computation of child nodes.
 * <p>
 * While a computation for children is in progress an object of type {@link AsyncTreeWorkInProgressNode}
 * is returned as a child. On completion of the computation the viewer will be refreshed with the actual
 * children.
 */
BasicElementLabels (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/BasicElementLabels.java)/**
 * A label provider for basic elements like paths. The label provider will make sure that the labels are correctly
 * shown in RTL environments.
 */
CDTContextActivator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CDTContextActivator.java)/**
 * Once registered as windows listener, observes all part activations. Whenever the
 * CDT outline view is brought to the front, the CDT context is set.
 */
CElementImageProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementImageProvider.java)/**
 * Default strategy of the C plugin for the construction of C element icons.
 */
FlexibleBuffer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java)/**
	 * An adapter for buffer supported by the label composer.
	 */
CElementLabelComposer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java)/**
 * Creates labels for ICElement objects.
 */
CElementLabels (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabels.java)/**
 * Computes labels for objects of type {@link CElement}.
 */
CustomBuildSettingsDecorator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CustomBuildSettingsDecorator.java)/**
 * Determines if a file or folder got customized build settings and if so decorates with the "wrench" overlay.
 */
EditorOpener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/EditorOpener.java)/**
 * An utility to open editors for references or elements.
 */
ExcludedFileDecorator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/ExcludedFileDecorator.java)/**
 * Determines if a file is excluded from a CDT build and if that is the case decorates the file's icon and
 * renders the label using the qualifier (gray) color.
 */
ImageImageDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/ImageImageDescriptor.java)/**
  */
IncludeFolderDecorator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/IncludeFolderDecorator.java)/**
 * Determines whether an include folder under "Includes" node does exist
 * and if not decorates the file's icon with warning overlay and
 * renders the label using the qualifier (gray) color.
 */
IndexedFilesLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/IndexedFilesLabelProvider.java)/**
 * A label provider that marks all translation units that are currently part of the index.
 */
ISelectionListenerWithAST (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/ISelectionListenerWithAST.java)/**
 * Listener to be informed on text selection changes in an editor (post selection), including the corresponding AST.
 * The AST is shared and must not be modified.
 * Listeners can be registered in a <code>SelectionListenerWithASTManager</code>.
 */
IViewPartInputProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/IViewPartInputProvider.java)/**
 * Interface common to all view parts that provide an input.
 */
LinkedProposalModelPresenter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/LinkedProposalModelPresenter.java)/**
 * Does the setup of the linked mode from a {@link LinkedProposalModel}
 */
ListContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/ListContentProvider.java)/**
 * A specialized content provider to show a list of editor parts.
 */
ProblemsLabelChangedEvent (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/ProblemsLabelDecorator.java)/**
	 * This is a special {@code LabelProviderChangedEvent} carrying additional
	 * information whether the event originates from a maker change.
	 * <p>
	 * {@code ProblemsLabelChangedEvent}s are only generated by {@code ProblemsLabelDecorator}s.
	 */
ProblemsLabelDecorator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/ProblemsLabelDecorator.java)/**
 * LabelDecorator that decorates an element's image with error and warning overlays that
 * represent the severity of markers attached to the element's underlying resource. To see
 * a problem decoration for a marker, the marker needs to be a subtype of {@code IMarker.PROBLEM}.
 * <p>
 * Note: Only images for elements in Java projects are currently updated on marker changes.
 * </p>
 *
 * @since 2.0
 */
ProjectTemplateStore (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/ProjectTemplateStore.java)/**
 * @since 5.0
 */
SelectionListenerWithASTManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/SelectionListenerWithASTManager.java)/**
 * Infrastructure to share an AST for editor post selection listeners.
 */
StandardCElementLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/StandardCElementLabelProvider.java)/**
 * CElementLabelProvider that respects settings from the Appearance preference page.
 * Triggers a viewer update when a preference changes.
 *
 * @deprecated Use {@link AppearanceAwareLabelProvider} instead.
 */
StatusBarUpdater (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/StatusBarUpdater.java)/**
 * Add the <code>StatusBarUpdater</code> to your ViewPart to have the statusbar
 * describing the selected elements.
 */
StorageLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/StorageLabelProvider.java)/**
 * Standard label provider for IStorage objects.
 * Use this class when you want to present IStorage objects in a viewer.
 */
TreeNavigator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/TreeNavigator.java)/**
 * Utility to perform next/previous navigation on a tree.
 * @author markus.schorn@windriver.com
 */
WorkingSetFilterUI (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/WorkingSetFilterUI.java)/**
 * Wraps {@link WorkingSetFilterActionGroup} and handles the property changed
 * events
 */
CWizardRegistry (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/CWizardRegistry.java)/**
 * Convenience class for drop-in C/C++ Wizard contributions.
 */
CheckedListDialogField (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/CheckedListDialogField.java)/**
 * A list with check boxes and a button bar. Typical buttons are 'Check All' and 'Uncheck All'.
 * List model is independent of widget creation.
 * DialogFields controls are: Label, List and Composite containing buttons.
 */
ComboDialogField (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/ComboDialogField.java)/**
 * Dialog field containing a label and a combo control.
 */
IListAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/IListAdapter.java)/**
 * Change listener used by <code>ListDialogField</code> and <code>CheckedListDialogField</code>
 */
ITreeListAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/ITreeListAdapter.java)/**
 * Change listener used by <code>TreeListDialogField</code>
 */
LinkToFileGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/LinkToFileGroup.java)/**
 * This class is part of the NewClassWizard.
 * It handles the Link to file part.
 */
ListDialogField (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/ListDialogField.java)/**
 * A list with a button bar.
 * Typical buttons are 'Add', 'Remove', 'Up' and 'Down'.
 * List model is independent of widget creation.
 * DialogFields controls are: Label, List and Composite containing buttons.
 */
SelectionButtonDialogField (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/SelectionButtonDialogField.java)/**
 * Dialog Field containing a single button such as a radio or checkbox button.
 */
SelectionButtonDialogFieldGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/SelectionButtonDialogFieldGroup.java)/**
 * Dialog field describing a group with buttons (Checkboxes, radio buttons..)
 */
Separator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/Separator.java)/**
 * Dialog field describing a separator.
 */
StringButtonDialogField (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/StringButtonDialogField.java)/**
 * Dialog field containing a label, text control and a button control.
 */
TreeListDialogField (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/TreeListDialogField.java)/**
 * A list with a button bar. Typical buttons are 'Add', 'Remove', 'Up' and
 * 'Down'. List model is independent of widget creation. DialogFields controls
 * are: Label, List and Composite containing buttons.
 */
NewFileFromTemplateWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/filewizard/NewFileFromTemplateWizard.java)/**
 * A generic new file wizard with support for file templates.
 * Based on {@link org.eclipse.ui.wizards.newresource.BasicNewFileResourceWizard BasicNewFileResourceWizard}.
 *
 * @since 5.0
 */
WizardNewFileFromTemplateCreationPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/filewizard/WizardNewFileFromTemplateCreationPage.java)/**
 * A new file creation wizard page with support for templates.
 *
 * @since 5.0
 */
ICDTCommonProjectWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/ICDTCommonProjectWizard.java)/**
 * @since 5.1
 */
StringVariableLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/indexwizards/StringVariableLabelProvider.java)/**
 * Copied from org.eclipse.debug.ui
 * @since 4.0
 */
StringVariableSelectionDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/indexwizards/StringVariableSelectionDialog.java)/**
 * Copied from org.eclipse.debug.ui
 * @since 4.0
 */
NewElementWizardPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/NewElementWizardPage.java)/**
 * Base class for wizard page responsible to create C elements. The class
 * provides API to update the wizard's status line and OK button according to
 * the value of a <code>IStatus</code> object.
 */
IncludePathsSettingsProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/IncludePathsSettingsProcessor.java)/**
 * A settings processor that imports and exports include paths.
 *
 * @author Mike Kucera
 * @since 5.1
 *
 */
IProjectSettingsWizardPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/IProjectSettingsWizardPage.java)/**
 * Defines the methods that the strategies can call on the
 * wizard page.
 *
 * This interface exists mainly so that it can be implemented by a
 * mock object, which makes testing the strategies easy.
 *
 * @author Mike Kucera
 * @since 5.1
 */
IProjectSettingsWizardPageStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/IProjectSettingsWizardPageStrategy.java)/**
 * The wizard page is very similar for importing and exporting,
 * the wizard page delegates to a strategy object which defines
 * the behavior that is specific to import and export.
 *
 * @author Mike Kucera
 * @since 5.1
 */
ISettingsProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/ISettingsProcessor.java)/**
 * The exported XML file is divided into 'section' elements, each
 * ISettingsProcessor is responsible for reading and writing
 * a particular section.
 *
 * A section can contain anything, for example include paths or macros.
 * No schema is defined for the XML file, that way additional settings
 * processors can be easily added. In the future there may be an extension
 * point for adding settings processors.
 *
 *
 * @author Mike Kucera
 * @since 5.1
 */
MacroSettingsProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/MacroSettingsProcessor.java)/**
 * A settings processor that imports and exports symbols.
 *
 * @author Mike Kucera
 * @since 5.1
 *
 */
ProjectSettingsExportStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/ProjectSettingsExportStrategy.java)/**
 * Custom behavior for the Export wizard.
 *
 * @author Mike Kucera
 * @since 5.1
 *
 */
ProjectSettingsExportWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/ProjectSettingsExportWizard.java)/**
 * @since 5.1
 */
ProjectSettingsImportStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/ProjectSettingsImportStrategy.java)/**
 * Custom behavior for the Import wizard.
 *
 * @author Mike Kucera
 * @since 5.1
 *
 */
ProjectSettingsImportWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/ProjectSettingsImportWizard.java)/**
 * @since 5.1
 */
ProjectSettingsWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/ProjectSettingsWizard.java)/**
 * @since 5.1
 */
ProjectSettingsWizardPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/ProjectSettingsWizardPage.java)/**
 * @since 5.1
 */
SettingsImportExportException (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/SettingsImportExportException.java)/**
 * An exception that represents a problem with importing or exporting
 * settings.
 *
 * @since 5.1
 */
SettingsProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/settingswizards/SettingsProcessor.java)/**
 * Base class implementing standard import and export functionality
 * for a section of the file.
 *
 * @author Mike Kucera
 * @since 5.1
 */
AbstractWorkingSetConfigsContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/AbstractWorkingSetConfigsContribution.java)/**
 * Common API of dynamic contribution of items to manipulate configurations of a working set.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
AbstractWorkingSetsContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/AbstractWorkingSetsContribution.java)/**
 * A dynamic contribution of sub-menus for working set configuration actions, with further sub-menus showing
 * the configurations to choose from.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
ActivateWorkingSetConfigsContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/ActivateWorkingSetConfigsContribution.java)/**
 * A dynamic contribution of items to activate configurations of a working set.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
ActivateWorkingSetsContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/ActivateWorkingSetsContribution.java)/**
 * A dynamic contribution of sub-menus to activate working sets, with further sub-menus showing the
 * configurations to choose from.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
BuildJob (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/BuildJob.java)/**
 * A job that builds a bunch of workspace projects or a working set configuration.
 */
BuildWorkingSetConfigsContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/BuildWorkingSetConfigsContribution.java)/**
 * A dynamic contribution of items to build configurations of a working set.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
BuildWorkingSetsContribution (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/BuildWorkingSetsContribution.java)/**
 * A dynamic contribution of sub-menus to build working sets, with further sub-menus showing the
 * configurations to choose from.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
CElementWorkingSetPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/CElementWorkingSetPage.java)/**
 * The C element working set page allows the user to create
 * and edit a C element working set.
 * <p>
 * Working set elements are presented as a C element tree.
 * </p>
 *
 */
ISnapshot (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetConfiguration.java)/**
	 * The snapshot ("working copy") view of a working set configuration. It defines additional API for the
	 * manipulation of working set configurations.
	 *
	 * @noimplement This interface is not intended to be implemented by clients.
	 * @noextend This interface is not intended to be extended by clients.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 */
IWorkingSetConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetConfiguration.java)/**
 * <p>
 * The protocol for working set configurations. A working set configuration specifies, at a minimum, a
 * {@linkplain ICConfigurationDescription build configuration} for each C/C++ project in the working set.
 * {@linkplain #activate() activating} the configuration applies these build configurations to the respective
 * projects as their active build configurations.
 * </p>
 * <p>
 * Implementations of this interface may choose to manage more configuration settings than are captured by the
 * active build configuration. They are, then, responsible for persistence, editing, and application of these
 * settings.
 * </p>
 * <p>
 * A working set configuration is considered to be {@linkplain #isActive() active} if all of the projects in
 * the working set are configured to build according to the configuration specified by the working set
 * configuration. It is an implementation detail (i.e., unspecified) what it means for a working set that has
 * recorded settings for projects that are not currently {@linkplain IResource#isAccessible() accessible} in
 * the workspace. However, for projects that are accessible and are included in the working set, but for which
 * the working set configuration has no settings, such projects are implicitly in the working set
 * configuration and it specifies their current configuration settings. Thus, in the extreme case, a
 * working-set configuration that includes none of the projects that currently are members of the working set,
 * is active.
 * </p>
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
ISnapshot (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetConfigurationElement.java)/**
	 * The protocol for mutable working-copies ("snapshots") of working set configuration model elements.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 *
	 * @see WorkspaceSnapshot
	 */
IWorkingSetConfigurationElement (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetConfigurationElement.java)/**
 * The protocol for elements of the working-set configuration model, which can be persisted via
 * {@linkplain IMemento mementos}.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
ISnapshot (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProjectConfiguration.java)/**
	 * The snapshot ("working copy") view of a working set project configuration.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 */
IWorkingSetProjectConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProjectConfiguration.java)/**
 * <p>
 * The protocol for project configurations in a working set configuration. At a minimum, the project
 * configuration specifies which build configuration is {@linkplain #getSelectedConfigurationID() selected} to
 * be set as the project's active configuration. Implementations are free to add more configuration
 * information than the selected build configuration.
 * </p>
 * <p>
 * Note that project configurations are owned by working set configurations. Thus, different configurations of
 * the same (or different) working set may specify different settings for the same project.
 * </p>
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
IControllerContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProjectConfigurationController.java)/**
	 * An interface provided by the Manage Working Set Configurations dialog infrastructure to
	 * {@link IWorkingSetProjectConfigurationController}s for communication of state changes back to the UI.
	 *
	 * @noimplement This interface is not intended to be implemented by clients.
	 * @noextend This interface is not intended to be extended by clients.
	 *
	 * @author Christian W. Damus (damus)
	 *
	 * @since 6.0
	 */
IWorkingSetProjectConfigurationController (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProjectConfigurationController.java)/**
 * Protocol for the view controller for the project configurations pane of the working set configurations
 * dialog. It takes care of coordinating the user gestures in that pane with the working-set configuration
 * model and vice-versa.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
Descriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProjectConfigurationFactory.java)/**
		 * A self-resolving descriptor for lazy instantiation of a factory.
		 */
Default (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProjectConfigurationFactory.java)/**
		 * The default project configuration factory. Clients may extend this class to implement custom
		 * factories for their project natures.
		 *
		 * @author Christian W. Damus (cdamus)
		 *
		 * @since 6.0
		 */
Registry (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProjectConfigurationFactory.java)/**
	 * A registry of {@linkplain IWorkingSetProjectConfigurationFactory project configuration factories}
	 * contributed on the <tt>org.eclipse.cdt.ui.workingSetConfigurations</tt> extension point.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 */
IWorkingSetProjectConfigurationFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProjectConfigurationFactory.java)/**
 * Protocol for a factory of {@link IWorkingSetProjectConfiguration}s. Factories are {@linkplain Registry
 * registered} against project natures.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
ISnapshot (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProxy.java)/**
	 * The snapshot ("working copy") view of a working set proxy. It has additional API for modifying
	 * configurations, which can then be {@linkplain WorkspaceSnapshot#save() saved} for posterity.
	 *
	 * @noimplement This interface is not intended to be implemented by clients.
	 * @noextend This interface is not intended to be extended by clients.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 */
IWorkingSetProxy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/IWorkingSetProxy.java)/**
 * The protocol for elements representing working sets, providing proxies for the workbench's actual
 * {@link IWorkingSet}s. A working set may have zero or more {@linkplain IWorkingSetConfiguration
 * configurations} that aggregate configuration settings for the C/C++ projects in the working set.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
NullLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/ProjectConfigsController.java)/**
	 * A useful empty implementation of the extended label-provider protocol.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 */
ProjectConfigsController (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/ProjectConfigsController.java)/**
 * View controller for the project configurations pane of the working set configurations dialog. It takes care
 * of coordinating the user gestures in that pane with the working-set configuration model and vice-versa.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
ProjectConfigurationController (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/ProjectConfigurationController.java)/**
 * Default implementation of the working set project configuration controller protocol.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
WorkingSetConfigsController (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfigsController.java)/**
 * The view controller for the working set configurations pane in the dialog. It takes care of coordinating
 * the user gestures in the pane with the working set configuration model, and vice-versa. It also implements
 * the handling of the action buttons.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
Snapshot (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfiguration.java)/**
	 * Default implementation of the mutable working set configuration snapshot.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 *
	 * @since 6.0
	 */
WorkingSetConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfiguration.java)/**
 * Default implementation of the {@link IWorkingSetConfiguration} interface.
 *
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
WSConfigsContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfigurationBlock.java)/**
	 * Simple content provider for the working set configurations tree.
	 *
	 * @author Christian W. Damus (cdamus)
	 */
WSConfigsLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfigurationBlock.java)/**
	 * Label provider for working sets and their configurations. The active configuration is highlighted in
	 * bold and affixed with an "(active)" decoration. The special read-only configuration is further
	 * differentiated with an italic font.
	 *
	 * @author Christian W. Damus (cdamus)
	 */
WorkingSetConfigurationBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfigurationBlock.java)/**
 * A block of UI controls for management of working set configurations. These collect the selection of project
 * configurations for the member projects of the working sets into named presets.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
WorkingSetConfigurationDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfigurationDialog.java)/**
 * A dialog for management of working set configurations. These collect the selection of project
 * configurations for the member projects of the working sets into named presets.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
WorkingSetChangeTracker (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfigurationManager.java)/**
	 * A working set manager listener that tracks name changes and removals of working sets to keep our
	 * configurations in synch as much as possible. It updates the memento store directly in response to
	 * changes in the working sets.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 */
WorkingSetConfigurationManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfigurationManager.java)/**
 * The purveyor of working set configurations. It provides a current view of the {@linkplain IWorkingSetProxy
 * working set configurations} defined in the workspace, as well as a working-copy
 * {@linkplain WorkspaceSnapshot snapshot} of the same for making modifications.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
WorkingSetConfigurationsPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetConfigurationsPage.java)/**
 * Property page for the configurations of a working set.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
Snapshot (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetProjectConfiguration.java)/**
	 * Default implementation of the mutable project configuration snapshot.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 */
WorkingSetProjectConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetProjectConfiguration.java)/**
 * Default implementation of the {@link IWorkingSetProjectConfiguration} interface. Clients may extend this
 * class to implement additional project configuration settings.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
WorkingSetPropertyTester (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetPropertyTester.java)/**
 * Property tester for working sets that CDT can manipulate in cool ways, such
 * as managing build configurations.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
Snapshot (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetProxy.java)/**
	 * The default implementation of a mutable working set snapshot.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 */
WorkingSetProxy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkingSetProxy.java)/**
 * Default implementation of the {@link IWorkingSetProxy} interface.
 *
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
ProjectState (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkspaceSnapshot.java)/**
	 * Capture of the current state of a project at the time when a {@linkplain WorkspaceSnapshot workspace
	 * snapshot} was taken, and its delta from that original state. This tracks at least the C/C++ project
	 * description (if any) and the original active configuration. Subclasses may track additional
	 * configuration details.
	 *
	 * @author Christian W. Damus (cdamus)
	 *
	 * @since 6.0
	 */
WorkspaceSnapshot (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/WorkspaceSnapshot.java)/**
 * <p>
 * A snapshot of the working set configurations and project configurations across the workspace at the time
 * when it was created. The snapshot maintains a delta from that original state to the current state, for such
 * comparison operations as determining which projects need to be re-built because their active configurations
 * have changed. The snapshot provides mutable working-copy views of the working set configurations at the
 * time of snapshot creation.
 * </p>
 * <p>
 * To make changes to working set configurations, first
 * {@linkplain WorkingSetConfigurationManager#createWorkspaceSnapshot() obtain a snapshot} from the
 * {@link WorkingSetConfigurationManager}. Then make edits to the various snapshots of the configuration
 * elements and {@linkplain #save() save} the snapshot
 * </p>
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
BuildActiveConfigMenuAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/BuildActiveConfigMenuAction.java)/**
 * Implements a toolbar button that builds the active configuration
 * of selected projects. Also includes a menu that builds any of the
 * other configurations.
 */
BuildConfigAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/BuildConfigAction.java)/**
 * Action which builds the active configurations of the selected projects.
 */
CdtActionConstants (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/CdtActionConstants.java)/**
 * Action ids for standard actions, for groups in the menu bar, and
 * for actions in context menus of CDT views.
 *
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 2.0
 */
ImaginarySelection (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ChangeBuildConfigActionBase.java)/**
	 * Class used to efficiently special case the scenario where there's only a single project in the
	 * workspace. See bug 375760
	 */
ChangeBuildConfigActionBase (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ChangeBuildConfigActionBase.java)/**
 * Base class for build configuration actions.
 */
ChangeBuildConfigContextAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ChangeBuildConfigContextAction.java)/**
 * This context menu action is used to change active build configuration for the project
 */
ChangeBuildConfigMenuAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ChangeBuildConfigMenuAction.java)/**
 * Action which changes active build configuration of the current project
 */
ChangeConfigAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ChangeConfigAction.java)/**
 * Action which changes active build configuration of the current project to
 * the given one.
 */
FilterActionMenuContributionItem (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/CustomFiltersActionGroup.java)/**
	 * Menu contribution item which shows and lets check and uncheck filters.
	 *
	 * @since 3.0
	 */
CustomFiltersActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/CustomFiltersActionGroup.java)/**
 * Action group to add the filter action to a view part's tool bar
 * menu.
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 2.0
 */
DeleteResConfigsAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/DeleteResConfigsAction.java)/**
 * Action which deletes resource description. (If resource description is missing
 * one from parent is normally used)
 * @deprecated as of CDT 8.0 now using {@link DeleteResConfigsHandler}
 */
ExcludeFromBuildAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ExcludeFromBuildAction.java)/**
 * Action which excludes resources from build.
 * @deprecated as of CDT 8.0 now using {@link ExcludeFromBuildHandler}
 */
FormatAllAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/FormatAllAction.java)/**
 * Formats the code of the translation units contained in the selection.
 * <p>
 * The action is applicable to selections containing elements of
 * type <code>ITranslationUnit</code>, <code>ICContainer</code>
 * and <code>ICProject</code>.
 * </p>
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @since 5.3
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
GenerateActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/GenerateActionGroup.java)/**
 * Action group that adds the source and generate actions to a part's context
 * menu and installs handlers for the corresponding global menu actions.
 *
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 4.0
 */
ManageConfigsAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ManageConfigsAction.java)/**
 * Action which lets to manage (add/remove etc.) build configurations of the project.
 */
OpenAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/OpenAction.java)/**
 * This action opens a Java editor on a Java element or file.
 * <p>
 * The action is applicable to selections containing elements of
 * type <code>ICompilationUnit</code>, <code>IMember</code>
 * or <code>IFile</code>.
 *
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @since 2.0
 */
OpenViewActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/OpenViewActionGroup.java)/**
 * Action group that adds actions to open a new CDT view part or an external
 * viewer to a context menu and the global menu bar.
 *
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @since 2.0
 */
SelectionDispatchAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/SelectionDispatchAction.java)/**
 * Action that dispatches the <code>IAction#run()</code> and the
 * <code>ISelectionChangedListener#selectionChanged</code>
 * according to the type of the selection.
 *
 * <ul>
 * 	<li>if selection is of type <code>ITextSelection</code> then
 * 	<code>run(ITextSelection)</code> and <code>selectionChanged(ITextSelection)</code>
 * 	is called.</li>
 * 	<li>if selection is of type <code>IStructuredSelection</code> then
 * 	<code>run(IStructuredSelection)</code> and <code>
 * 	selectionChanged(IStructuredSelection)</code> is called.</li>
 * 	<li>default is to call <code>run(ISelection)</code> and <code>
 * 	selectionChanged(ISelection)</code>.</li>
 * </ul>
 *
 * <p>
 * Note: This class is not intended to be subclassed outside the CDT UI plugin.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 2.0
 */
ShowInCViewAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ShowInCViewAction.java)/**
 * This class will open the C/C++ Projects view and highlight the
 * selected resource matching the current resouce being edited in
 * the C/C++ Editor.  It uses the IShowInSource/IShowInTarget to
 * accomplish this task so as to provide some additional portability
 * and future proofing.
 *
 * @deprecated Use generic IShowInTarget support instead.
 */
WorkingSetConfigAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/WorkingSetConfigAction.java)/**
 */
ToolChainPreferencePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/build/ToolChainPreferencePage.java)/**
 * Preference page to manage Toolchains for Core Build.
 *
 * @since 6.3
 */
ToolChainWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/build/ToolChainWizard.java)/**
 * Parent class for toolChain wizards that create or edit toolchains.
 *
 * @since 6.3
 */
CDTSharedImages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CDTSharedImages.java)/**
 * A repository for common images used by the CDT which may be useful to other plug-ins.
 * <p>
 * This class provides {@link Image} and {@link ImageDescriptor}
 * for each named image in the interface.  All {@code Image} objects provided
 * by this class are managed by this class and must never be disposed
 * by other clients.
 * </p>
 * <p>
 * For common platform images see {@link org.eclipse.ui.ISharedImages}
 * ({@code org.eclipse.ui.PlatformUI.getWorkbench().getSharedImages()})
 * <br>
 * and {@link org.eclipse.ui.ide.IDE.SharedImages}.
 * </p>
 * <p>
 * Note that org.eclipse.cdt.ui.tests.misc.CDTSharedImagesTests will verify
 * existence of the images defined here.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 *
 * @since 5.3
 */
CDTUIImages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CDTUIImages.java)/**
 * Images for {@link org.eclipse.cdt.utils.ui.controls.FileListControl}.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 *
 * @deprecated as of CDT 8.0. Use {@link CDTSharedImages}.
 */
CDTUITools (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CDTUITools.java)/**
 * This class provides utilities for clients of the CDT UI plug-in.
 * This class provides static methods for:
 * <ul>
 *  <li>opening an editor on a C model element.</li>
 *  <li>accessing working copy manager and document provider used with C model elements.</li>
 *  <li>accessing color manager used for syntax coloring of C/C++ files.</li>
 * </ul>
 *
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @since 5.1
 */
CElementContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementContentProvider.java)/**
 * A content provider for C elements.
 * <p>
 * The following C element hierarchy is surfaced by this content provider:
 * <p>
 * <pre>
C model (<code>ICModel</code>)<br>
   C project (<code>ICProject</code>)<br>
      Virtual binaries  container(<code>IBinaryContainery</code>)
      Virtual archives  container(<code>IArchiveContainery</code>)
      Source root (<code>ISourceRoot</code>)<br>
          C Container(folders) (<code>ICContainer</code>)<br>
          Translation unit (<code>ITranslationUnit</code>)<br>
          Binary file (<code>IBinary</code>)<br>
          Archive file (<code>IArchive</code>)<br>
      Non C Resource file (<code>Object</code>)<br>

 * </pre>
 */
CElementGrouping (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementGrouping.java)/**
 */
CElementImageDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementImageDescriptor.java)/**
 * A CImageDescriptor consists of a base image and several adornments. The adornments
 * are computed according to the flags either passed during creation or set via the method
 * <code>setAdornments</code>.
 * </p>
 * It is guaranteed that objects that conform to this interface are also instances of type
 * <code>ImageDescriptor</code>
 * </p>
 * <b>Note:</b> This class/interface is part of an interim API that is still under development
 * and expected to change before reaching stability.
 * </p>
 *
 * @since 2.0
 */
CElementLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementLabelProvider.java)/**
 * The label provider for the c model elements.
 */
CElementSorter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementSorter.java)/**
 *	A sorter to sort the file and the folders in the C viewer in the following order:
 * 	1 Project
 * 	2 BinaryContainer
 *  3 ArchiveContainer
 *  4 LibraryContainer
 *  5 IncludeContainer
 *  6 Source roots
 *  5 C Elements
 *  6 non C Elements
 *
 *  @noextend This class is not intended to be subclassed by clients.
 */
CodeGeneration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CodeGeneration.java)/**
 * Class that offers access to the templates contained in the 'Code Templates' preference page.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @since 2.1
 */
CUIPlugin (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CUIPlugin.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CUIPreferenceInitializer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CUIPreferenceInitializer.java)/**
 * This class implements the setting of the CUI initial preference store settings.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
AbstractBinaryParserPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/AbstractBinaryParserPage.java)/**
 * @deprecated as of CDT 4.0. This class used in property pages
 * for 3.X style projects.
 */
AbstractGNUBinaryParserPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/AbstractGNUBinaryParserPage.java)/**
 * Abstract base binary parser page for GNU binutils based binary parsers
 */
AbstractIndexerPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/AbstractIndexerPage.java)/**
 * Configuration for indexer.
 */
BinaryParserBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/BinaryParserBlock.java)/**
 * @deprecated as of CDT 4.0. This tab was used to set preferences/properties
 * for 3.X style projects.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
CacheSizeBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/CacheSizeBlock.java)/**
 * This OptionPage is used in the IndexerPreference page to allow for adjusting
 * various parsing related caches.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
CHelpConfigurationPropertyPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/CHelpConfigurationPropertyPage.java)/**
 * This class defines a project property page
 * for C/C++ project help settings configuration
 * @since 2.1
 * @noextend This class is not intended to be subclassed by clients.
 */
CygwinPEBinaryParserPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/CygwinPEBinaryParserPage.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
DocCommentOwnerBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/DocCommentOwnerBlock.java)/**
 * Project property page for setting documentation comment owner.
 * <em>This class is not intended for use outside of CDT</em>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DocCommentOwnerCombo (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/DocCommentOwnerCombo.java)/**
 * Manages the population and selection of the doc-comment {@link Combo} box
 * <em>This class is not intended for use outside of CDT</em>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DocCommentOwnerComposite (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/DocCommentOwnerComposite.java)/**
 * <em>This class is not intended for use outside of CDT</em>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DOMSourceIndexerBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/DOMSourceIndexerBlock.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
FastIndexerBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/FastIndexerBlock.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
GNUElfBinaryParserPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/GNUElfBinaryParserPage.java)/**
 * Reusing AbstractGNUBinaryParserPage.
 * New class is required for the algorithm in method performApply.
 * Must implement getRealBinaryParserPage method.
 *
 * @author vhirsl
 * @noextend This class is not intended to be subclassed by clients.
 */
GNUSomBinaryParserPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/GNUSomBinaryParserPage.java)/**
 * Reusing AbstractGNUBinaryParserPage.
 * New class is required for the algorithm in method performApply.
 * Must implement getRealBinaryParserPage method.
 *
 * @author vhirsl
 * @noextend This class is not intended to be subclassed by clients.
 */
GNUXCoffBinaryParserPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/GNUXCoffBinaryParserPage.java)/**
 * Reusing AbstractGNUBinaryParserPage.
 * New class is required for the algorithm in method performApply.
 * Must implement getRealBinaryParserPage method.
 *
 * @author vhirsl
 * @noextend This class is not intended to be subclassed by clients.
 */
ICOptionContainerExtension (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/ICOptionContainerExtension.java)/**
 * Extension for the ICOptionContainer to be used with new project wizards.
 * This allows children to access the the project handle.
 * @since 4.0
 */
IInputStatusValidator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/IInputStatusValidator.java)/**
 * The IInputStatusValidator is the interface for IStatus validators.
 * @since 5.2
 */
IndexerConfig (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/IndexerBlock.java)/**
	 * Create a profile page only on request
	 */
IndexerBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/IndexerBlock.java)/**
 * This <code>IndexerBlock</code> is used in the <code>MakeProjectWizardOptionPage</code> and
 * the <code>NewManagedProjectOptionPage</code> to display the indexer options during the creation of
 * a new project.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
IndexerOptionPropertyPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/IndexerOptionPropertyPage.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
InputStatusDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/InputStatusDialog.java)/**
 * An input dialog for soliciting an input string from the user.
 * The string can be validated. In case of problem error/warning/info message
 * is shown in status line and decorated with appropriate status icon.
 * <p>
 * This concrete dialog class can be instantiated as is, or further subclassed as required.
 * </p>
 * @since 5.2
 */
MachOBinaryParserPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/MachOBinaryParserPage.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
NullIndexerBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/NullIndexerBlock.java)/**
 * @author Bogdan Gheorghe
 * @noextend This class is not intended to be subclassed by clients.
 */
ReferenceBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/ReferenceBlock.java)/**
 * @deprecated as of CDT 4.0. This Block was used for New Project Wizard
 * for 3.X style projects.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
RegexPatternEditingSupport (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/RegexErrorParserOptionPage.java)/**
	 * Provides generic implementation for overridden methods.
	 * One purpose is to make it easier for subclasses to operate with {@link RegexErrorPattern},
	 * another is to provide content assist.
	 *
	 */
RegexErrorParserOptionPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/RegexErrorParserOptionPage.java)/**
 * Options page for RegexErrorParser in Error Parsers Tab of properties/preferences.
 *
 * @since 5.2
 */
RegularExpressionStatusDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/dialogs/RegularExpressionStatusDialog.java)/**
 * Input Dialog for validating regular expression syntax.
 *
 * @since 5.2
 */
ICalledByResult (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/extensions/ICalledByResult.java)/**
 * @see ICallHierarchyProvider#findCalledBy
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 *
 * @since 5.8
 */
ICallHierarchyProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/extensions/ICallHierarchyProvider.java)/**
 * Interface for classes implementing the org.eclipse.cdt.ui.callHierarchyProviders extension
 * point.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 *
 * @since 5.8
 */
ICallToResult (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/extensions/ICallToResult.java)/**
 * @see ICallHierarchyProvider#findCalls
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 *
 * @since 5.8
 */
IExternalSearchProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/extensions/IExternalSearchProvider.java)/**
 * Interface for classes implementing the org.eclipse.cdt.ui.externalSearchProviders extension
 * point.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as
 * part of a work in progress. There is no guarantee that this API will work or
 * that it will remain the same. Please do not use this API without consulting
 * with the CDT team.
 *
 * @since 5.8
 */
FunctionPrototypeSummary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/FunctionPrototypeSummary.java)/**
 * This class is a helper class which takes care of implementing some of the
 * function prototype parsing and stripping.
 */
IBuildConsoleEvent (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IBuildConsoleEvent.java)/**
 * A build console event.
 *
 * @see IBuildConsoleListener
 *
 * @noimplement This interface is not intended to be implemented by clients.
 */
IBuildConsoleListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IBuildConsoleListener.java)/**
 * A listener to build console events.
 * <p>
 * Clients may implement this interface.
 * </p>
 *
 * @see IBuildConsoleEvent
 */
IBuildConsoleManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IBuildConsoleManager.java)/**
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICDTConstants (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/ICDTConstants.java)/**
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICEditor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/ICEditor.java)/**
 * Marker interface that distinguishes C/C++ editor from other text editors.
 * @since 5.4
 */
ICHEContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/ICHEContentProvider.java)/**
 * The Call Hierarchy Extension Content Provider Interface
 * @since 6.4
 * */
ICHelpBook (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/ICHelpBook.java)/**
 * Represents the help book, that is a set of articles on some topic.
 * Such as "C functions", "Qt library", etc., provided by help provider.
 * <p>
 * Clients may implement this interface.
 * </p>
 * @see ICHelpProvider
 * @since 2.1
 */
ICHelpProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/ICHelpProvider.java)/**
 * Represents a C/C++ help provider. This interface need to be implemented by
 * contributors to extension point "org.eclipse.cdt.ui.CHelpProvider".
 * <p>
 * Clients may implement this interface.
 * </p>
 *
 * @since 2.1
 */
ICHelpResourceDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/ICHelpResourceDescriptor.java)/**
 * This interface represents Help Resources found in the certain Help Book
 * provided by certain CHelpProvider
 * <p>
 * Clients may implement this interface.
 * </p>
 * @see ICHelpProvider
 * @since 2.1
 */
ICHENode (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/ICHENode.java)/**
 * The Call Hierarchy Extension Node
 * @since 6.4
 */
ICModelBasedEditor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/ICModelBasedEditor.java)/**
 * A text editor whose contents are represented by the C model.
 * Implementations include CEditor and AsmTextEditor.
 * @since 6.2
 */
IEditorInputDelegate (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IEditorInputDelegate.java)/**
 * @deprecated Not supported anymore.
 * @noreference This interface is not intended to be referenced by clients.
 */
IFunctionPrototypeSummary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IFunctionSummary.java)/**
	 * <p>
	 * Clients may implement this interface.
	 * </p>
	 */
IFunctionSummary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IFunctionSummary.java)/**
 * A function summary provided by an {@link ICHelpProvider}.
 * <p>
 * Clients may implement this interface.
 * </p>
 * @see ICHelpProvider
 */
ILanguageUI (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/ILanguageUI.java)/**
 * Adapter interface to {@link org.eclipse.cdt.core.model.ILanguage ILanguage} for language extensions to
 * provide a custom code scanner implementation.
 * <p>
 * Clients may implement this interface.
 * </p>
 */
IncludesGrouping (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IncludesGrouping.java)/**
 * IncludesGrouping
 */
IPropertyChangeParticipant (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IPropertyChangeParticipant.java)/**
 * Implemented by classes which can optionally participate in property
 * change events, and report whether an event would affect them without
 * adapting to it.
 * <p>
 * Clients may implement this interface.
 * </p>
 *
 * @since 5.0
 */
IRequiredInclude (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IRequiredInclude.java)/**
 * Interface related to {@link IFunctionSummary} denoting an include required for a function.
 * <p>
 * Clients may implement this interface.
 * @see IFunctionSummary
 */
IWorkingCopyManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IWorkingCopyManager.java)/**
 * Interface for accessing working copies of {@code ITranslationUnit}
 * objects. The original translation unit is only given indirectly by means
 * of an {@code IEditorInput}. The life cycle is as follows:
 * <ul>
 * <li> {@code connect} creates and remembers a working copy of the
 *     translation unit which is encoded in the given editor input</li>
 * <li> {@code getWorkingCopy} returns the working copy remembered on
 *     {@code connect}</li>
 * <li> {@code disconnect} destroys the working copy remembered on
 *     {@code connect}</li>
 * </ul>
 * </p>
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @see CDTUITools#getWorkingCopyManager
 */
IWorkingCopyManagerExtension (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/IWorkingCopyManagerExtension.java)/**
 * Extension interface for {@code IWorkingCopyManager}.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 2.1
 */
AbstractLanguageSettingProviderOptionPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/language/settings/providers/AbstractLanguageSettingProviderOptionPage.java)/**
 * Abstract class to implement language settings providers Options page.
 *
 * <p>
 * <strong>EXPERIMENTAL</strong>. This class interface is not stable yet as
 * it is not currently clear how it may need to be used in future. Only bare
 * minimum is provided here at this point (CDT 8.1, Juno).
 * There is no guarantee that this API will work or that it will remain the same.
 * Please do not use this API without consulting with the CDT team.
 * </p>
 * @noextend This class is not intended to be subclassed by clients, only internally by CDT.
 *
 * @since 5.4
 */
LanguageSettingsProvidersImages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/language/settings/providers/LanguageSettingsProvidersImages.java)/**
 * Utility class to provide API for language settings providers images.
 *
 * @since 5.4
 */
NamespacesGrouping (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/NamespacesGrouping.java)/**
 * NamespacesGrouping
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
AbstractCPropertyTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/AbstractCPropertyTab.java)/**
 * It is a parent for all standard property tabs
 * in new CDT model.
 *
 * Although it's enough for new tabs to implement
 * ICPropertyTab interface only, it would be better
 * to extend them from this class.
 *
 * In this case, we'll able to use:
 * - a lot of utility methods via "provider" link.
 *   In particular, it allows to get current project,
 *   configuration etc. See ICPropertyProvider interface.
 * - a standard way to create buttons (ins/edit/del etc)
 *   and to handle their events (see buttonPressed(int))
 * - several utility methods to create widgets in the
 *   uniform manner (setupLabel(), setupText() etc).
 * - means to handle control messages which are the main
 *   communication way for new CDT model pages and tabs.
 */
ExtData (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/AbstractExportTab.java)/**
	 *
	 */
AbstractPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/AbstractPage.java)/**
 * It is a parent for all standard CDT property pages
 * in new CDT model.
 *
 * Although it is enough for new page to implement
 * "IWorkbenchPropertyPage" interface, it would be
 * better to extend it from "AbstractPage".
 *
 * In this case, we'll able to use:
 * - dynamic tabs support via cPropertyTab extension point
 * - a lot of utility methods: see ICPropertyProvider interface
 * - mechanism of messages sent to all pages and all tabs in them
 *
 * In fact, descendants of AbstractPage have to implement
 * the only method:
 * 		protected boolean isSingle();
 * It it returns false, current page can contain multiple tabs
 * (obtained through "cPropertyTab" extension point).
 * If it returns true, only one content tab is possible. If
 * more than 1 tabs refer to this pas as a parent, only 1st
 * one would be taken into account, others will be ignored.
 */
AbstractPrefPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/AbstractPrefPage.java)/**
 * Abstract page to be used as base for preference pages
 */
AbstractSinglePage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/AbstractSinglePage.java)/**
 * Bug #183341 : Single property page which does not
 * require separate cPropertyTab to display data.
 *
 */
BinaryParsTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/BinaryParsTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
BuildVarListDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/BuildVarListDialog.java)/**
 * Displays CDT variables dialog with ability to filter.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
CDTHelpContextIds (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CDTHelpContextIds.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
CDTPrefUtil (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CDTPrefUtil.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CDTPropertyManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CDTPropertyManager.java)/**
 * This class is intended to handle
 *
 * When new propertypage is created, it should request
 * project description by method
 * getProjectDescription()
 * This method, in addition, registers page in list.
 *
 * While page is active, it can change this description
 * but should not set it, to avoid inconsistency.
 *
 * When page's "performOK" called, it should call
 * manager's  method
 * performOk()
 *
 * Registered pages can call {@link CDTPropertyManager#remove(Object)}
 * to explicitly remove themselves from this manager.
 *
 * In addition, there are utility methods for pages:
 * getPagesCount()
 * getPage()
 * isSaveDone()
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
CDTStatusInfo (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CDTStatusInfo.java)/**
 * Simple IStatus implementation to avoid using internal classes.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
CDTUIListComparator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CDTUIListComparator.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
CLocationOutputTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CLocationOutputTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
CLocationSourceTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CLocationSourceTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
Holder (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CLocationTab.java)/**
	 * This class should hold elements for source location tree
	 */
CLocationTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CLocationTab.java)/**
 * CLocationTab implements common features for "Source Location" and "Output Location"
 * tabs in project preferences.
 *
 */
ConfigMultiSelectionDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ConfigMultiSelectionDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
EnvDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/EnvDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
MyListSelectionDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/EnvironmentTab.java)/**
	 *
	 */
EnvironmentTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/EnvironmentTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ErrorParsTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ErrorParsTab.java)/**
 * This class represents Error Parser Tab in Project Properties or workspace Preferences
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
ExPatternDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ExPatternDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ExPatternEntryDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ExPatternEntryDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ExpDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ExpDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ExpIncludeFileTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ExpIncludeFileTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @since 5.2
 */
ExpIncludeTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ExpIncludeTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ExpLibraryPathTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ExpLibraryPathTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ExpLibraryTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ExpLibraryTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ExpSymbolTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ExpSymbolTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ICPropertyTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ICPropertyTab.java)/**
 * Interface for tabs in new CDT model.
 * All tabs available via extension point
 * "org.eclipse.cdt.ui.cPropertyTab"
 * should implement this interface.
 */
ImportExportWizardButtons (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ImportExportWizardButtons.java)/**
 * Utility class that adds buttons for "Import Settings..." and "Export Settings..."
 * to the bottom of the Includes and Symbols tabs.
 *
 * @since 5.2
 */
IncludeDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/IncludeDialog.java)/**
 * A combined dialog which allows selecting file or folder from workspace or filesystem
 * and some more features. The dialog is used on "Paths and Symbols" properties page.
 * Note that currently it is used not only for include files/folders but for library
 * files/folders as well.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
IncludeFileTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/IncludeFileTab.java)/**
 * This class provides UI for the {@link ICSettingEntry#INCLUDE_FILE}
 * option type.
 *<p>
 * This tab is hidden by default and can be shown under: <br/>
 * 		Window > Preferences > C/C++ > Property Page Settings > Show "Include Files" Tab
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @since 5.2
 */
IncludeTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/IncludeTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
INewCfgDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/INewCfgDialog.java)/**
 * Represents class which is able to display
 * "New configuration" dialog instead of standard one
 * and, if user pressed OK, create new configuration
 * on a basis of its internal data
 *
 * used by extension point:
 * "org.eclipse.cdt.ui.newCfgDialog"
 */
LibraryPathTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/LibraryPathTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
LibraryTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/LibraryTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ManageConfigDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ManageConfigDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ManageConfigRunner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ManageConfigRunner.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
ManageConfigSelector (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ManageConfigSelector.java)/**
 * This class provides static methods to work with multiple
 * implementors of "ConfigManager" extension point.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MultiCfgContributedEnvironment (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/MultiCfgContributedEnvironment.java)/**
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
MultiLineTextFieldEditor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/MultiLineTextFieldEditor.java)/**
 *	MultiLineTextFieldEditor.
 *	Field editor that is same as string field editor but
 *	will have the multi line text field for user input.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
NewConfigurationDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/NewConfigurationDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
PageLayout (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/PageLayout.java)/**
 * Layout for the page container.
 * @noextend This class is not intended to be subclassed by clients.
 */
Page_head_general (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/Page_head_general.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
IErrorMessageReporter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ProjectContentsArea.java)/**
	 * IErrorMessageReporter is an interface for type that allow message
	 * reporting. Null means "clear error messages area".
	 */
ProjectContentsArea (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ProjectContentsArea.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
PropertyTester (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/PropertyTester.java)/**
 * @deprecated Doesn't do anything useful.
 * @noextend This class is not intended to be subclassed by clients.
 */
RefsTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/RefsTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
RenameConfigurationDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/RenameConfigurationDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
StringListModeControl (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/StringListModeControl.java)/**
 * Local UI control for multiple configurations string list mode redirecting to
 * Preference page "Multiple Configurations Edit".
 *
 * @since 5.3
 */
StructureTreeTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/StructureTreeTab.java)/**
 * This tab is intended to browse
 * contents of whole class such as ResourceDescription,
 * ConfigurationDescription or ProjectDescription
 *
 * Notes:
 *
 * 1. Many strings in the file remain unlocalized
 *    since they represent method names.
 * 2. It is experimental functionality. Work is in progress.
 * 3. Tree depth is limited by 16. Deeper branches are truncated.
 *    But it seems to be very rare situation.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
SymbolDialog (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/SymbolDialog.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
SymbolTab (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/SymbolTab.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
TypedCDTViewerFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/TypedCDTViewerFilter.java)/**
 * see org.eclipse.cdt.internal.ui.dialogs.TypedViewerFilter
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
UIMessages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/UIMessages.java)/**
 * @since 2.0
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @deprecated As of CDT 8.0. For internalization {@link org.eclipse.cdt.internal.ui.newui.Messages} is used.
 */
PreferenceConstants (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/PreferenceConstants.java)/**
 * Preference constants used in the CDT-UI preference store. Clients should only read
 * the CDT-UI preference store using these values. Clients are not allowed to modify
 * the preference store programmatically.
 *
 * The preferences defined in this file are exported in the plugin's
 * "preferenceTransfer" extension. If adding a new preference please
 * also add it to one of the two if applicable:
 * <ol>
 * <li>"Editor Appearance" - Any preference related to how the editor presents
 *     the edited code to the user.</li>
 * <li>"Editor Behavior" - Any preference related to how the editor processes
 * 	   the edited code.</li>
 * </ol>
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @since 2.0
 */
CRefactoringActionGroup (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/CRefactoringActionGroup.java)/**
 * Action group that adds refactoring actions (for example Rename..., Move..., etc)
 * to a context menu and the global menu bar.
 *
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @since 2.0
 * @noextend This class is not intended to be subclassed by clients.
 */
CRenameAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/CRenameAction.java)/**
 * Launches a rename refactoring.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
ExtractConstantAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/ExtractConstantAction.java)/**
 * Launches an Extract Constant refactoring.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
ExtractFunctionAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/ExtractFunctionAction.java)/**
 * Launches an Extract Function refactoring.
 *
 * @since 5.0
 * @noextend This class is not intended to be subclassed by clients.
 * @author Emanuel Graf IFS
 */
ExtractLocalVariableAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/ExtractLocalVariableAction.java)/**
 * Launches an Extract Local Variable refactoring.
 * @since 5.1
 * @noextend This class is not intended to be subclassed by clients.
 */
GettersAndSettersAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/GettersAndSettersAction.java)/**
 * Launches a getter and setter source code generation.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
HideMethodAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/HideMethodAction.java)/**
 * Launches a Hide Method refactoring
 * @author Guido Zgraggen IFS
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
ImplementMethodAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/ImplementMethodAction.java)/**
 * Launches the implement method source generator (refactoring).
 *
 * @author Lukas Felber
 * @noextend This class is not intended to be subclassed by clients.
 */
RefactoringAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/RefactoringAction.java)/**
 * Common base class for refactoring actions.
 * @since 5.0
 * @noextend This class is not intended to be subclassed by clients.
 */
ToggleFunctionAction (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/actions/ToggleFunctionAction.java)/**
 * @since 5.3
 * @author Emanuel Graf IFS
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
CTextFileChange (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/refactoring/CTextFileChange.java)/**
 * A TextFileChange that uses a working copy in order to generate CModel events.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
Messages (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/resources/Messages.java)/**
 * @since 5.3
 */
RefreshExclusionContributionManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/resources/RefreshExclusionContributionManager.java)/**
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part of a work in progress. There
 * is no guarantee that this API will work or that it will remain the same. Please do not use this API without
 * consulting with the CDT team.
 *
 * @author crecoskie
 * @since 5.3
 *
 */
RefreshExclusionContributor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/resources/RefreshExclusionContributor.java)/**
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part of a work in progress. There
 * is no guarantee that this API will work or that it will remain the same. Please do not use this API without
 * consulting with the CDT team.
 *
 * @author crecoskie
 * @since 5.3
 *
 */
SharedImagesFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/SharedImagesFactory.java)/**
 * A helper class to provide common methods to set up managed image repository for a plugin.
 * <p>
 * This class provides {@link Image} and {@link ImageDescriptor}
 * for images in the interface.  All {@code Image} objects provided
 * by this class are managed by this class and must never be disposed
 * by other clients.
 * </p>
 * <p>
 * See {@link CDTSharedImages} for an example of using this factory.
 * </p>
 *
 * @since 5.7
 *
 */
AbstractCScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/AbstractCScanner.java)/**
 * Convenience implementation for {@link ICTokenScanner}.
 * Subclasses need to initialize scanner rules by calling {@link #setRules(IRule[])} or {@link #setRules(List)}.
 * <p>
 * Clients may instantiate and extend this class.
 * </p>
 *
 * @since 5.1
 */
AsmSourceViewerConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/AsmSourceViewerConfiguration.java)/**
 * Configuration for a source viewer which shows Assembly code.
 * <p>
 * This class may be instantiated; it is not intended to be subclassed.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @since 5.1
 */
ICEditorTextHover (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/c/hover/ICEditorTextHover.java)/**
 * Interface to be implemented by contributors to extension point
 * "org.eclipse.cdt.ui.textHovers". Provides a hover popup which appears on top
 * of an editor with relevant display information. If the text hover does not
 * provide information no hover popup is shown.
 * <p>
 * Clients may implement this interface.
 * </p>
 */
ContentAssistInvocationContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/contentassist/ContentAssistInvocationContext.java)/**
 * Describes the context of an invocation of content assist in a text viewer. The context knows the
 * document, the invocation offset and can lazily compute the identifier prefix preceding the
 * invocation offset. It may know the viewer.
 * <p>
 * Subclasses may add information to their environment. For example, source code editors may provide
 * specific context information such as an AST.
 * </p>
 * <p>
 * Clients may instantiate. A client that created a context is responsible for its disposal.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 * @since 4.0
 */
ICEditorContentAssistInvocationContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/contentassist/ICEditorContentAssistInvocationContext.java)/**
 * Describes the context of a content assist invocation in a C/C++ editor.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ICompletionContributor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/contentassist/ICompletionContributor.java)/**
 * This interface must be implemented by clients extending the extension point
 * <tt>org.eclipse.cdt.core.completionContributors</tt>.
 *
 * @deprecated Clients should extend the new extension point
 *             <tt>completionProprosalComputer</tt> and implement interface
 *             {@link ICompletionProposalComputer}
 * @noreference This interface is not intended to be referenced by clients.
 */
ICompletionProposalComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/contentassist/ICompletionProposalComputer.java)/**
 * Computes completions and context information displayed by the C/C++ editor content assistant.
 * <p>
 * Contributions to the <tt>org.eclipse.cdt.ui.completionProposalComputer</tt> extension point
 * must implement this interface.
 * </p>
 *
 * @since 4.0
 */
IProposalFilter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/contentassist/IProposalFilter.java)/**
 * Filters completion proposals displayed by the C/C++ editor content assistant.
 * <p>
 * Contributions to the <tt>org.eclipse.cdt.ui.ProposalFilter</tt> extension point
 * must implement this interface.
 * </p>
 */
CSourceViewerConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/CSourceViewerConfiguration.java)/**
 * Configuration for a <code>SourceViewer</code> which shows C/C++ code.
 * <p>
 * This class may be instantiated and subclassed by clients.
 * </p>
 *
 * @since 5.1
 */
DefaultMultilineCommentAutoEditStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/DefaultMultilineCommentAutoEditStrategy.java)/**
 * This class provides default behaviors for multi-line comment auto-editing.
 *
 * This class is intended to be sub-classed.
 *
 * @since 5.0
 */
DoxygenHelper (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/doxygen/DoxygenHelper.java)/**
 * Makes available information for Doxygen support.
 *
 * @since 5.0
 * @noextend This class is not intended to be subclassed by clients.
 */
DoxygenMultilineAutoEditStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/doxygen/DoxygenMultilineAutoEditStrategy.java)/**
 * {@link IAutoEditStrategy} for adding Doxygen tags for comments.
 *
 * @since 5.0
 * @noextend This class is not intended to be subclassed by clients.
 */
DoxygenMultilineConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/doxygen/DoxygenMultilineConfiguration.java)/**
 * {@link IDocCommentViewerConfiguration} implementation for doxygen multi-line documentation comments.
 * <em>This class may be sub-classed by clients</em>
 * @since 5.0
 */
DoxygenSingleAutoEditStrategy (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/doxygen/DoxygenSingleAutoEditStrategy.java)/**
 * {@link IAutoEditStrategy} for adding Doxygen tags for comments.
 *
 * @since 5.11
 * @noextend This class is not intended to be subclassed by clients.
 */
DoxygenSingleConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/doxygen/DoxygenSingleConfiguration.java)/**
 * {@link IDocCommentViewerConfiguration} implementation for doxygen single-line documentation comments.
 * <em>This class may be sub-classed by clients</em>
 * @since 5.0
 */
AbstractGenericTagDocCommentViewerConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/generic/AbstractGenericTagDocCommentViewerConfiguration.java)/**
 * An abstract base-class for documentation tool contributions using the 'generic tag' framework
 * @since 5.0
 */
GenericDocTag (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/generic/GenericDocTag.java)/**
 * Record class for a generic documentation tool tag.
 * @since 5.0
 */
GenericTagCommentScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/generic/GenericTagCommentScanner.java)/**
 * ICTokenScanner which recognizes a specified set of tags, starting with a specified name.
 * It is assumed this will be used within a single-line or multi-line comment context.
 * @since 5.0
 * @noextend This class is not intended to be subclassed by clients.
 */
GenericTagCompletionProposalComputer (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/generic/GenericTagCompletionProposalComputer.java)/**
 * CompletionProposalComputer based on a specified set of GenericTag objects.
 * @since 5.0
 * @noextend This class is not intended to be subclassed by clients.
 */
DocumentCharacterIterator (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/generic/GenericTagDoubleClickStrategy.java)/**
	 * Implements a character iterator that works directly on
	 * instances of <code>IDocument</code>. Used to collaborate with
	 * the break iterator.
	 *
	 * @see IDocument
	 * @since 2.0
	 */
GenericTagSimpleDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/generic/GenericTagSimpleDictionary.java)/**
 * An implementation of a simple dictionary to allow the spelling engine
 * to not flag documentation tool tags.
 * @since 5.0
 * @noextend This class is not intended to be subclassed by clients.
 */
IDocCommentDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/IDocCommentDictionary.java)/**
 * This interface is a place-holder for the future. Clients should implement the most
 * appropriate sub-interface (provided by CDT). Currently {@link IDocCommentSimpleDictionary} is
 * the only provided sub-interface, but it is expected a more subtle way of integrating spell-checking
 * will be available in the future.
 * @since 5.0
 */
IDocCommentOwner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/IDocCommentOwner.java)/**
 * A comment owner provides {@link IDocCommentViewerConfiguration} to
 * the CDT c/c++ editor.<p>
 *
 * In future it may also provide a point for providing
 * <ul>
 * <li>access an implementation of a documentation comment validation mechanism
 * <li>owner specific preference/property pages
 * <li>information for code generation e.g. default single and multi-line comment
 * delimiting prefix/post-fixes
 * </ul>
 *
 * @since 5.0
 * @noimplement This interface is not intended to be implemented by clients.
 */
IDocCommentOwnershipListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/IDocCommentOwnershipListener.java)/**
 * Implemented by clients interested in documentation comment ownership change events. These are generated
 * when the association between resource or workspace and documentation comment owner is set.
 * @since 5.0
 */
IDocCommentSimpleDictionary (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/IDocCommentSimpleDictionary.java)/**
 * This interface is a simplified means of obtaining spelling support.
 * @since 5.0
 */
IDocCommentViewerConfiguration (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/doctools/IDocCommentViewerConfiguration.java)/**
 * An IDocCommentViewerConfiguration aggregates a collection of editor tools that can be contributed to
 * the CDT editor. The tools will be active for CEditor partitions of type {@link ICPartitions#C_MULTI_LINE_DOC_COMMENT} or
 * {@link ICPartitions#C_SINGLE_LINE_DOC_COMMENT} when the {@link IDocCommentOwner} this instance originated from is active.
 *
 * @see org.eclipse.jface.text.source.SourceViewerConfiguration (in analogy to)
 * @since 5.0
 */
ICFoldingPreferenceBlock (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/folding/ICFoldingPreferenceBlock.java)/**
 * Contributors to the <code>org.eclipse.cdt.ui.foldingStructureProvider</code> extension point
 * can specify an implementation of this interface to be displayed on the C/C++ &gt; Editor &gt;
 * Folding preference page.
 * <p>
 * Clients may implement this interface.
 * </p>
 *
 */
ICFoldingStructureProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/folding/ICFoldingStructureProvider.java)/**
 * Contributors to the
 * <code>org.eclipse.cdt.ui.foldingStructureProvider</code> extension
 * point must specify an implementation of this interface which will create and
 * maintain {@link org.eclipse.jface.text.source.projection.ProjectionAnnotation} objects
 * that define folded regions in the the {@link org.eclipse.jface.text.source.projection.ProjectionViewer}.
 * <p>
 * Clients may implement this interface.
 * </p>
 *
 */
ICColorConstants (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/ICColorConstants.java)/**
 * Color keys used for syntax highlighting C/C++ and Assembly code
 * A <code>IColorManager</code> is responsible for mapping
 * concrete colors to these keys.
 * <p>
 * This interface declares static final fields only; it is not intended to be
 * implemented.
 * </p>
 * @see org.eclipse.cdt.ui.text.IColorManager
 *
 * @since 5.1
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICCompletionProposal (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/ICCompletionProposal.java)/**
 * CompletionProposal with a relevance value.
 * The relevance value is used to sort the completion proposals. Proposals with higher relevance
 * should be listed before proposals with lower relevance.
 * <p>
 * This interface can be implemented by clients.
 * </p>
 */
ICHelpInvocationContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/ICHelpInvocationContext.java)/**
 * Invocation context for the CHelpProviderManager.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @see IHoverHelpInvocationContext
 * @see IContentAssistHelpInvocationContext
 */
IColorManager (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/IColorManager.java)/**
 * Manages SWT color objects for the given color keys and
 * given <code>RGB</code> objects. Until the <code>dispose</code>
 * method is called, the same color object is returned for
 * equal keys and equal <code>RGB</code> values.
 *
 * <p>
 * This interface may be implemented by clients.
 * </p>
 *
 * @see org.eclipse.cdt.ui.text.ICColorConstants
 *
 * @since 5.1
 */
IContentAssistHelpInvocationContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/IContentAssistHelpInvocationContext.java)/**
 * Invocation context for content assist.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.1
 */
ICPartitions (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/ICPartitions.java)/**
 * Definition of C partitioning and its partitions.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 4.0
 */
ICTokenScanner (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/ICTokenScanner.java)/**
 * Interface for CDT Scanners. Scanners used in CDT must additionally be
 * IPropertyChangeParticipant's.
 * <p>
 * Clients may implement this interface.
 * </p>
 *
 * @since 5.0
 */
IHoverHelpInvocationContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/IHoverHelpInvocationContext.java)/**
 * Invocation context for the CHelpProviderManager.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 5.1
 */
IInvocationContext (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/IInvocationContext.java)/**
 * Context information for quick fix and quick assist processors.
 * <p>
 * Note: this interface is not intended to be implemented.
 * </p>
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IProblemLocation (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/IProblemLocation.java)/**
 * Problem information for quick fix and quick assist processors.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IQuickAssistProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/IQuickAssistProcessor.java)/**
 * Interface to be implemented by contributors to the extension point
 * <code>org.eclipse.cdt.ui.quickAssistProcessors</code>.
 *
 * @since 5.1
 */
IQuickFixProcessor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/IQuickFixProcessor.java)/**
 * Interface to be implemented by contributors to the extension point
 * <code>org.eclipse.cdt.ui.quickFixProcessors</code>.
 *
 * @since 5.0
 */
ISemanticHighlighter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/ISemanticHighlighter.java)/**
 * Interface that must be implemented by contributors to the org.eclipse.cdt.ui.semanticHighlighting extension
 * point.
 *
 * @since 5.6
 */
ISemanticToken (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/ISemanticToken.java)/**
 * An interface for accessing details of the token that is being highlighted.
 *
 * @since 5.6
 */
ITokenStore (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/ITokenStore.java)/**
 * An ITokenStore manages a set of tokens for a specified set of color property identifiers. Responsibilities include
 * <ul>
 * <li> Reacting to changes to preferences in a specified {@link IPreferenceStore}
 * <li> Managing whether further styles (bold, italic, strikethrough, underline) should be applied
 * <li> Coping with
 * </ul>
 *
 * ITokenStore assumes style preferences are stored under the following names
 * <p>
 * Preference color key + {@link PreferenceConstants#EDITOR_BOLD_SUFFIX} are used
 * to retrieve whether the token is rendered in bold.
 * </p>
 * <p>
 * Preference color key + {@link PreferenceConstants#EDITOR_ITALIC_SUFFIX} are used
 * to retrieve whether the token is rendered in italic.
 * </p>
 * <p>
 * Preference color key + {@link PreferenceConstants#EDITOR_STRIKETHROUGH_SUFFIX} are used
 * to retrieve whether the token is rendered in strikethrough.
 * </p>
 * <p>
 * Preference color key + {@link PreferenceConstants#EDITOR_UNDERLINE_SUFFIX} are used
 * to retrieve whether the token is rendered in underline.
 * </p>
 * <p>
 * Clients may implement this interface.
 * </p>
 *
 * @see ITokenStoreFactory
 * @since 5.0
 */
ITokenStoreFactory (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/ITokenStoreFactory.java)/**
 * A means of obtaining ITokenStore objects.
 * <p>
 * Clients may implement this interface.
 * </p>
 * @since 5.0
 */
SharedASTJob (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/SharedASTJob.java)/**
 * A Job specialized to give access to the shared AST of the currently active editor.
 * Clients must implement {@link #runOnAST(ILanguage, IASTTranslationUnit)}.
 *
 * @since 5.1
 */
TaskTagRule (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/text/TaskTagRule.java)/**
 * Which words should be recognized as task tags is specified under {@link CCorePreferenceConstants#TODO_TASK_TAGS} as a
 * comma delimited list.
 *
 * @see CCorePreferenceConstants#TODO_TASK_TAGS
 * @since 5.0
 * @deprecated This class doesn't properly implement parsing of task tags
 * (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=246846). It will be removed.
 */
CCProjectWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/CCProjectWizard.java)/**
 * The wizard to create new MBS C++ Project.
 */
CNewWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/CNewWizard.java)/**
 * Interface to be used by extension point:
 * org.eclipse.cdt.managedbuilder.ui.CDTWizard
 *
 * Implementors should provide 1 or more
 * items in "Project types" list (left pane on
 * the 1st page in any CDT new project wizard)
 */
ConversionWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/conversion/ConversionWizard.java)/**
 * ConversionWizard  This wizard provides a method by which the user can
 * change the nature of their projects. This class cannot be implemented.  It
 * is meant to be subclassed, with the subclasses providing the new labels,
 * and pages.
 *
 * @author Judy N. Green
 * @since Aug 8, 2002
 */
ProjectContentProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/conversion/ConvertProjectWizardPage.java)/**
	 * Provides the contents for the list using the enclosing class's method
	 * getElements();
	 */
ProjectLabelProvider (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/conversion/ConvertProjectWizardPage.java)/**
	 * Provides labels for the listed items.  In this case it returns each
	 * project's name
	 */
ConvertProjectWizardPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/conversion/ConvertProjectWizardPage.java)/**
 * <p>
 * ConvertProjectWizardPage  Standard main page for a wizard that converts a
 * project's nature.<br> This class provides the UI components and populates
 * the table with all  projects that meet the criteria specified by
 * subclasses in the method  isCandidate(IProject). This class does the
 * conversion through the method convertProjects([]Object), which is also
 * defined by all subclasses.<br> Subclasses provide the methods that
 * determine what files are displayed and what action is performed on them as
 * well as the labels for the Wizard.</p>
 *
 * Note: Only Projects that are open will be considered for conversion.
 *
 *
 * @author Judy N. Green
 * @since Aug 6, 2002 <p>
 */
CProjectWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/CProjectWizard.java)/**
 * The wizard to create new MBS C Project.
 */
CWizardHandler (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/CWizardHandler.java)/**
 * This class is basic implementation for ICWizardHandler interface.
 * It is independent of managed build system, and, so, almost useless
 * It creates "empty" project with no specific.
 *
 * Its descendants should overwrite some methods,
 * including createProject() and handleSelection()
 *
 * This object is created per each Project type
 * on the left pane of New Project Wizard page
 *
 * It is responsible for:
 * - corresponding line in left pane of 1st wizard page
 * - whole view of right pane
 * - processing preferred items, if any.
 * - providing data for ConfigPage
 * - processing data received from config page
 *
 */
EntryDescriptor (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/EntryDescriptor.java)/**
 * This class stores data for each tree item
 * in "Project types" tree of New Project Wizard.
 */
ICPathContainerPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/ICPathContainerPage.java)/**
 * A path container page allows the user to create a new or edit an
 * existing patch container entry.
 * <p>
 * Clients should implement this interface and include the name of their
 * class in an extension contributed to the cdt.ui's path container page
 * extension point (named <code>org.eclipse.cdt.ui.pathContainerPage
 * </code>).
 * </p>
 * <p>
 * Clients implementing this interface may subclass from
 * <code>org.eclipse.jface.wizard.WizardPage</code>.
 * </p>
 *
 * @deprecated - use IPathEntryContainerPage
 * @noreference This interface is not intended to be referenced by clients.
 */
IWizardItemsListListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/IWizardItemsListListener.java)/**
 * Interface should be implemented by some visible object
 * (usually - 1st page in CDT New Project wizard)
 * to be informed about changes in tool chains selection
 * performed by ICNewWizard implementors.
 */
NewCCProjectWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewCCProjectWizard.java)/**
 * @deprecated as of CDT 4.0. Being kept here for API compatibility only.
 */
StatusFocusListener (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewClassCreationWizardPage.java)/**
	 * Causes doStatusUpdate() to be called whenever the focus changes.
	 * Remembers the last focused field.
	 */
SourceFolderFieldAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewClassCreationWizardPage.java)/**
	 * Handles changes to the source folder field
	 */
NamespaceFieldAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewClassCreationWizardPage.java)/**
	 * handles changes to the namespace field
	 */
ClassNameFieldAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewClassCreationWizardPage.java)/**
	 * Handles changes to the class name field
	 */
BaseClassesFieldAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewClassCreationWizardPage.java)/**
	 * Handles changes to the base classes field
	 */
MethodStubsFieldAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewClassCreationWizardPage.java)/**
	 * Handles changes to the method stubs field
	 */
FileGroupFieldAdapter (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewClassCreationWizardPage.java)/**
	 * handles changes to the file name fields
	 */
NewCProjectWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewCProjectWizard.java)/**
 * C Project wizard that creates a new project resource in
 * a location of the user's choice.
 */
NewCProjectWizardOptionPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewCProjectWizardOptionPage.java)/**
 * @deprecated as of CDT 4.0. This abstract was used for New Project Wizards
 * for 3.X style projects.
 */
NewCProjectWizardPage (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewCProjectWizardPage.java)/**
 * Standard main page for a wizard that is creates a project resource.
 * <p>
 * This page may be used by clients as-is; it may be also be subclassed to suit.
 * </p>
 * <p>
 * Example useage:
 * <pre>
 * mainPage = new CProjectWizardPage("basicCProjectPage");
 * mainPage.setTitle("Project");
 * mainPage.setDescription("Create a new project resource.");
 * </pre>
 * </p>
 */
NewFileCreationWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewFileCreationWizard.java)/**
 * @deprecated Use {@link BasicNewFileResourceWizard} instead.
 */
NewFolderCreationWizard (/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewFolderCreationWizard.java)/**
 * @deprecated Use {@link BasicNewFolderResourceWizard} instead.
 */
TemplateCNewWizard (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/internal/templateengine/wizard/TemplateCNewWizard.java)/**
 *
 */
AbstractWizardDataPage (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/AbstractWizardDataPage.java)/**
 * Implementation of standard behaviours intended to be subclassed by clients.
 * @since 4.0.2
 */
FormBrowser (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/FormBrowser.java)/**
 * FormBrowser.
 */
IPagesAfterTemplateSelectionProvider (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/IPagesAfterTemplateSelectionProvider.java)/**
 * Interface for extensions that provide additional custom pages as part of
 * project configuration.
 * @since 4.0
 */
ITemplatesListProvider (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/ITemplatesListProvider.java)/**
 * ITemplatesListProvider
 *
 * @since 4.0
 */
IWizardDataPage (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/IWizardDataPage.java)/**
 * IWizardDataPage is a page which can participate in a custom project template
 * wizard sequence.
 *
 * @since 4.0
 */
NewProjectCreationPage (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/pages/NewProjectCreationPage.java)/**
 * The first page in a NewProjectWizard. This is the wizard page that
 * asks the user for the name and location of the new project.
 */
UIPage (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/pages/UIPage.java)/**
 *
 * The UIPage extends DialogPage, it implements the createControl() abstract
 * method. The UIPage is the base class for UIWizardPage. The UIPage contains a
 * UIComposite, which extends a SWT composite. The SWT widgets are added to
 * UIComposite.
 */
UIPagesProvider (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/pages/UIPagesProvider.java)/**
 * The UIPagesProvider creates a Map of UIPages. The Map will have ID as key,
 * UIPage as value. The sequence of call to get Map of UIPages. 1.
 * clearOrderVector() for all PropertyGroup Elements. 2. getUIPages(...)
 *
 */
Messages (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/processes/Messages.java)/**
 * @since 5.2
 */
OpenFiles (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/processes/OpenFiles.java)/**
 * This process opens files in the editor
 *
 * @since 5.2
 */
TemplateDrivenWizard (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/TemplateDrivenWizard.java)/**
 * Any wizard intending to use template (@see org.eclipse.cdt.core.templateenginee.Template) based pages
 * can extend this wizard and use it. Alternatively, a wizard intending to show a choice of templates
 * should use TemplatesChoiceWizard (@see org.eclipse.cdt.core.templateenginee.ui.TemplatesChoiceWizard)
 *
 */
TemplateEngineUI (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/TemplateEngineUI.java)/**
 * TemplateEngine is implemented as a Singleton. TemplateEngine is responsible for
 * creating SharedDefaults and initializing the SharedDefaults. Template instances
 * are obtained from TemplateEngine.
 *
 * @since 4.0
 */
TemplateListSelectionPage (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/TemplateListSelectionPage.java)/**
 *  TemplateListSelectionPage
 */
TemplatesChoiceWizard (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/TemplatesChoiceWizard.java)/**
 * A wizard intending to show a choice of templates (@see org.eclipse.cdt.core.templateenginee.Template)
 * before switching to the pages driven by the chosen template should extend from TemplatesChoiceWizard.
 * Alternatively, when a choice of templates needn't be shown, TemplateDrivenWizard is a better fit.
 * (@see org.eclipse.cdt.ui.templateengine.TemplateDrivenWizard)
 *
 */
GenericUIElementGroup (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/GenericUIElementGroup.java)/**
 * The GenericUIElementGroup extends UIElement, implements the default behavior
 * expected from UIElementGroup. This gives behavior expected for PAGES-ONLY
 * type. Any other type of UIElement groups can override the definitions given
 * to methods in this class.
 *
 * @since 4.0
 */
InputUIElement (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/InputUIElement.java)/**
 * InputUIElement, an abstract class extends UIElement. Provides implementation
 * to some of the methods. It provides definitions to those methods which
 * doesn't apply to InuputUIElement's. SimpleElementException is thrown from
 * these methods.
 *
 */
IPatternMatchingTable (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/IPatternMatchingTable.java)/**
 * This class contains the patter strings for a text widget
 *
 * @since 4.0
 */
UIAttributes (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/UIAttributes.java)/**
 * Every UIElement will be associated with attributes. This class extends
 * HashMap. It just provides a convenient way to store Key , value pairs. This
 * class is for clarity in usage. We need not use HashMap for attributes,
 * instead we can use UIAttributes for attributes.
 */
UIElement (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/UIElement.java)/**
 * UIElement describes the abstract behavior expected from GenericUIElementGroup and
 * InputUIElement. Some of the methods are meaningful to group Element. They will throw
 * SimpleElementException when invoked on InputUIElement.
 */
UIElementTreeBuilderHelper (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/UIElementTreeBuilderHelper.java)/**
 * UIElementTreeBuilderHelper provides methods to convert an Element (XML) into
 * UIElement. The UIElement can be a simple UI Widget or a group.
 */
UIGroupTypeEnum (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/UIGroupTypeEnum.java)/**
 * This class defines various types of UIElement groups.
 */
UIBooleanWidget (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/uiwidgets/UIBooleanWidget.java)/**
 * This gives a Label and Boolean widget.
 */
UISelectWidget (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/uiwidgets/UISelectWidget.java)/**
 * This gives a Label and Combo widget.
 */
UISpecialListWidget (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/uiwidgets/UISpecialListWidget.java)/**
 * This gives a Label and UISpecialList Widget.
 *
 */
UIStringListWidget (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/uiwidgets/UIStringListWidget.java)/**
 * This gives a Label and StringList Widget.
 *
 */
UITextWidget (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/uitree/uiwidgets/UITextWidget.java)/**
 * This gives a Label and Text widget. The Text widget can be SINGLE type of
 * MULTI type. This depends on the input type in TemplateDescriptor. The data
 * entered by the user is verified against an expected pattern. If the user
 * entered data doesn't confirms to the expected pattern, a PatternEvent is
 * fired to UIComposite.
 *
 * The UI***Widget classes which needs to handle patterns, can inherit the same
 * from this class. The inheriting class need not cache UIComposite instance
 * but should set the same for UITextWidget(super).
 */
WizardNode (/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/WizardNode.java)/**
 * Wizard Node
 */
ControlFactory (/core/org.eclipse.cdt.ui/utils.ui/org/eclipse/cdt/utils/ui/controls/ControlFactory.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
SelectPathInputDialog (/core/org.eclipse.cdt.ui/utils.ui/org/eclipse/cdt/utils/ui/controls/FileListControl.java)/**
	 * Multi-purpose dialog to prompt the user for a value, path, or file.
	 *
	 * @since 2.0
	 */
ClipboardList (/core/org.eclipse.cdt.ui/utils.ui/org/eclipse/cdt/utils/ui/controls/FileListControl.java)/**
	 * An extended List control with support for cut / copy / paste & undo
	 * Needs to be public for the copy method to be called by the platform via reflection
	 * @since 5.2
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 */
FileListControl (/core/org.eclipse.cdt.ui/utils.ui/org/eclipse/cdt/utils/ui/controls/FileListControl.java)/**
 * Instances of this class allow the user to add, remove, delete, moveup and movedown
 * the items in the list control.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
IFileListChangeListener (/core/org.eclipse.cdt.ui/utils.ui/org/eclipse/cdt/utils/ui/controls/IFileListChangeListener.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
RadioButtonsArea (/core/org.eclipse.cdt.ui/utils.ui/org/eclipse/cdt/utils/ui/controls/RadioButtonsArea.java)/**
 * A field editor for an enumeration type preference.
 * The choices are presented as a list of radio buttons.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
TabFolderLayout (/core/org.eclipse.cdt.ui/utils.ui/org/eclipse/cdt/utils/ui/controls/TabFolderLayout.java)/**
 * @noextend This class is not intended to be subclassed by clients.
 */
Accessor (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/Accessor.java)/**
 * Helper class for accessing classes and members which cannot
 * be accessed using standard Java access control like private
 * or package visible elements.
 *
 * <p>Copied from JDT.</p>
 *
 * @since 4.0
 */
CElementDecorator (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/CElementDecorator.java)/**
 * Allows to test decorators for Java elements
 */
DisplayHelper (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/DisplayHelper.java)/**
 * Runs the event loop of the given display until {@link #condition()} becomes
 * <code>true</code> or no events have occurred for the supplied timeout.
 * Between running the event loop, {@link Display#sleep()} is called.
 * <p>
 * There is a caveat: the given timeouts must be long enough that the calling
 * thread can enter <code>Display.sleep()</code> before the timeout elapses,
 * otherwise, the waiter may time out before <code>sleep</code> is called and
 * the sleeping thread may never be waken up.
 * </p>
 *
 * <p>Copied from org.eclipse.jdt.testplugin.util.</p>
 *
 * @since 4.0
 */
Timeout (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/DisplayHelper.java)/**
	 * Timeout state of a display waiter thread.
	 */
ThreadChangedException (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/DisplayHelper.java)/**
			 * Exception thrown when a thread notices that it has been stopped
			 * and a new thread has been started.
			 */
DisplayWaiter (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/DisplayHelper.java)/**
 * Implements the thread that will wait for the timeout and wake up the display
 * so it does not wait forever. The thread may be restarted after it was stopped
 * or timed out.
 *
 * @since 3.1
 */
EditorTestHelper (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/EditorTestHelper.java)/**
 * Copied from org.eclipse.jdt.text.tests.performance.
 *
 * @since 4.0
 */
FileTool (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/FileTool.java)/**
 * Copied from org.eclipse.core.filebuffers.tests.
 *
 * @since 4.0
 */
Main (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/Main.java)/**
 * Startup class for Eclipse. Creates a class loader using supplied URL of
 * platform installation, loads and calls the Eclipse Boot Loader. The startup
 * arguments are as follows:
 * <dl>
 * <dd>-application &lt;id&gt;: the identifier of the application to run</dd>
 * <dd>-boot &lt;location&gt;: the location, expressed as a URL, of the
 * platform's boot.jar</dd>
 * <dd>-consolelog : enables log to the console. Handy when combined with -debug
 * </dd>
 * <dd>-data &lt;location&gt;: sets the workspace location and the default
 * location for projects</dd>
 * <dd>-debug [options file]: turns on debug mode for the platform and
 * optionally specifies a location for the .options file. This file indicates
 * what debug points are available for a plug-in and whether or not they are
 * enabled. If a location is not specified, the platform searches for the
 * .options file under the install directory</dd>
 * <dd>-dev [entries]: turns on dev mode and optionally specifies
 * comma-separated class path entries which are added to the class path of each
 * plug-in</dd>
 * <dd>-keyring &lt;location&gt;: the location of the authorization database on
 * disk. This argument has to be used together with the -password argument</dd>
 * <dd>-password &lt;passwd&gt;: the password for the authorization database
 * </dd>
 * <dd>-plugins &lt;location&gt;: The arg is a URL pointing to a file which
 * specs the plugin path for the platform. The file is in property file format
 * where the keys are user-defined names and the values are comma separated
 * lists of either explicit paths to plugin.xml files or directories containing
 * plugins. (e.g., .../eclipse/plugins).</dd>
 * <dd>-ws &lt;window system&gt;: sets the window system value</dd>
 * </dl>
 */
NewMain (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/NewMain.java)/**
 * Application is responsible for calling core launch api
 */
ResourceTestHelper (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/ResourceTestHelper.java)/**
 * Copied from org.eclipse.jdt.text.tests.performance.
 *
 * @since 4.0
 */
TestPluginLauncher (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/TestPluginLauncher.java)/**
 * Helper class to launch a test
 */
ExpectedStrings (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/util/ExpectedStrings.java)/**
 * @author Peter Graves
 *
 * This utility class maintains a list of strings, and as a tests finds strings
 * in a structure/list, it will maintain a list of unfound/extra strings.
 */
ExpectedStringsTests (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/util/ExpectedStringsTests.java)/**
 * @author Peter Graves
 *
 *Some simple tests to make sure our ExtraStrings class seems to work.
 */
StringAsserts (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/util/StringAsserts.java)/**
 *
 */
VerifyDialog (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/testplugin/util/VerifyDialog.java)/**
 * This dialog is intended to verify a dialogs in a testing
 * environment.  The tester can test for sizing, initial focus,
 * or accessibility.
 */
CPopulateASTViewAction (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/CPopulateASTViewAction.java)/**
 * @author dsteffle
 */
CPPPopulateASTViewAction (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/CPPPopulateASTViewAction.java)/**
 * @author dsteffle
 */
DOMASTNodeLeaf (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/DOMASTNodeLeaf.java)/**
 * @author dsteffle
 */
DOMASTNodeParent (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/DOMASTNodeParent.java)/**
 * @author dsteffle
 */
DOMASTPluginImages (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/DOMASTPluginImages.java)/**
 * @author dsteffle
 */
ActivationListener (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/FindIASTNameDialog.java)/**
	 * Updates the find replace dialog on activation changes.
	 */
FindModifyListener (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/FindIASTNameDialog.java)/**
	 * Modify listener to update the search result in case of incremental search.
	 * @since 2.0
	 */
FindIASTNameDialog (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/FindIASTNameDialog.java)/**
 * Find/Replace dialog. The dialog is opened on a particular
 * target but can be re-targeted. Internally used by the <code>FindReplaceAction</code>
 */
FindIASTNameTarget (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/FindIASTNameTarget.java)/**
 * @author dsteffle
 */
IncludeStatementFilter (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/IncludeStatementFilter.java)/**
 * @author dsteffle
 */
IPopulateDOMASTAction (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/IPopulateDOMASTAction.java)/**
 * @author dsteffle
 */
OpenDOMViewAction (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/OpenDOMViewAction.java)/**
 * @author dsteffle
 */
PreprocessorFilter (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/PreprocessorFilter.java)/**
 * @author dsteffle
 */
ProblemHolderFilter (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/ProblemHolderFilter.java)/**
 * @author dsteffle
 */
ShowInDOMViewAction (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/ShowInDOMViewAction.java)/**
 * @author dsteffle
 */
FunctionDefinitionCollector (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/reducer/RemoveFunctionBodiesRefactoring.java)/**
	 * Finds function definitions that have bodies, are not constexpr, and don't contain problem bindings.
	 */
NameCollector (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/reducer/RemoveUnusedDeclarationsRefactoring.java)/**
	 * Collects all simple names.
	 */
SortedNodeSet (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/reducer/RemoveUnusedDeclarationsRefactoring.java)/**
	 * A set of AST nodes sorted by their offsets, or, if the offsets are equal, by the end offsets
	 * in the reverse order.
	 */
AllTemplateEngineTests (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/AllTemplateEngineTests.java)/**
 * This is a TestSuite, the TestCases created to test Template engine are
 * added to testsuite.
 * The test suite will execute all the Testcases added to the Suite.
 *
 * @since 4.0
 */
TemplateEngineTestsHelper (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TemplateEngineTestsHelper.java)/**
 * All supporting functions which are not part of Testing class.
 *
 * @since 4.0
*/
MyPage (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TestExtraPagesProvider.java)/**
	 * An example implementation of {@link IWizardDataPage} for test purposes.
	 */
TestExtraPagesProvider (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TestExtraPagesProvider.java)/**
 * An example implementation of {@link IPagesAfterTemplateSelectionProvider} for
 * testing purposes.
 */
TestTemplateCore (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TestTemplateCore.java)/**
 * Test the functionality of Tempalte Class.
 */
TestTemplateEngine (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TestTemplateEngine.java)/**
 * Test the functionality of TemplateEngine.
 */
TestValueStore (/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TestValueStore.java)/**
 * Test the functionality of the ValueStore class.
 */
AnnotationTestCase (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/AnnotationTestCase.java)/**
 * Base class for tests. If you want to use outside of this plugin, you need
 * to override {@link #getPlugin()} method and maybe {@link #getSourcePrefix()}
 * method to get source directory for the tests,
 * default is "src". To make it read comment from java class, you need to
 * include this source directory (with test java files) into the build bundle.
 */
AutomatedSuite (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/AutomatedSuite.java)/**
 * Test all areas of the UI.
 */
BuildConsoleTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/buildconsole/BuildConsoleTests.java)/**
 * BuildConsoleTests.
 */
CHContentProvider (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/callhierarchy/extension/CHContentProvider.java)/**
 * This class implements ICHEProvider and provides test information
 * */
CHExtensionTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/callhierarchy/extension/CHExtensionTest.java)/**
 * @author Lidia Popescu
 *
 */
DslNode (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/callhierarchy/extension/DslNode.java)/**
 * The dsl node sample
 * */
CHelpProviderTester (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/chelp/CHelpProviderTester.java)/**
 *
 */
CHelpTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/chelp/CHelpTest.java)/**
 *
 * CHelpProvider tests
 */
CHelpTestInfoProvider (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/chelp/CHelpTestInfoProvider.java)/**
 * This class implements ICHelpProvider and provides test information
 */
EditorTestSuite (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/editor/EditorTestSuite.java)/**
 * Tests for functionality in the package org.eclipse.cdt.internal.ui.editor.
 */
SourceHeaderPartnerFinderTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/editor/SourceHeaderPartnerFinderTest.java)/**
 * Tests for org.eclipse.cdt.internal.ui.editor.SourceHeaderPartnerFinder.
 */
CDTSharedImagesTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/misc/CDTSharedImagesTests.java)/**
 * Tests for CDT shared images repository.
 */
LanguageVerifierTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/misc/LanguageVerifierTests.java)/**
 * Tests for CDT Language Verifier.
 */
MiscTestSuite (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/misc/MiscTestSuite.java)/**
 * Test suite for miscellaneous tests which do not fit neatly to other
 * categories.
 */
BasicOutlineTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/outline/BasicOutlineTest.java)/**
 * Basic outline view tests.
 */
ExtractConstantRefactoringTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/extractconstant/ExtractConstantRefactoringTest.java)/**
 * Tests for Extract Constant refactoring.
 */
ExtractFunctionRefactoringTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/extractfunction/ExtractFunctionRefactoringTest.java)/**
 * Tests for Extract Function refactoring.
 */
ExtractLocalVariableRefactoringTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/extractlocalvariable/ExtractLocalVariableRefactoringTest.java)/**
 * Tests for Extract Local Variable refactoring.
 */
GenerateGettersAndSettersTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/gettersandsetters/GenerateGettersAndSettersTest.java)/**
 * Tests for Generate Getters and Setters refactoring.
 */
HideMethodRefactoringTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/hidemethod/HideMethodRefactoringTest.java)/**
 * Tests for Extract Local Variable refactoring.
 */
ImplementMethodRefactoringTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/implementmethod/ImplementMethodRefactoringTest.java)/**
 * Tests for Extract Local Variable refactoring.
 */
BindingClassifierTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/includes/BindingClassifierTest.java)/**
 * Tests for {@link BindingClassifier}.
 */
IncludeMapTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/includes/IncludeMapTest.java)/**
 * Tests for {@link IncludeMap}.
 */
IncludeOrganizerTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/includes/IncludeOrganizerTest.java)/**
 * Tests for {@link IncludeOrganizer}.
 */
IncludesTestBase (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/includes/IncludesTestBase.java)/**
 * Common base for include-related tests.
 */
OverrideMethodsRefactoringTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/overridemethods/OverrideMethodsRefactoringTest.java)/**
 * Tests for override methods
 */
RefactoringTestBase (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/RefactoringTestBase.java)/**
 * Common base for refactoring tests.
 */
RefactoringTestSuite (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/RefactoringTestSuite.java)/**
 * @author Emanuel Graf
 */
RefactoringTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/rename/RefactoringTests.java)/**
 * @author markus.schorn@windriver.com
 */
RenameMoveHeaderRefactoringTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/rename/RenameMoveHeaderRefactoringTest.java)/**
 * Tests for
 * {@link org.eclipse.cdt.internal.ui.refactoring.rename.HeaderFileRenameParticipant} and
 * {@link org.eclipse.cdt.internal.ui.refactoring.rename.HeaderFileMoveParticipant}.
 */
RenameTemplatesTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/rename/RenameTemplatesTests.java)/**
 * @author markus.schorn@windriver.com
 */
RenameTestBase (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/rename/RenameTestBase.java)/**
 * @author markus.schorn@windriver.com
 */
RenameTypeTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/rename/RenameTypeTests.java)/**
 * @author markus.schorn@windriver.com
 */
RenameVariableTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/rename/RenameVariableTests.java)/**
 * @author markus.schorn@windriver.com
 */
TestSourceFile (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/TestSourceFile.java)/**
 * @author Emanuel Graf
 */
ToggleNodeHelperTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/togglefunction/ToggleNodeHelperTest.java)/**
 * @author egraf
 */
ToggleRefactoringCTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/togglefunction/ToggleRefactoringCTest.java)/**
 * Tests for ToggleRefactoring for C projects.
 */
ToggleRefactoringTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/togglefunction/ToggleRefactoringTest.java)/**
 * Tests for ToggleRefactoring for C++ projects.
 */
CorrectCaseTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/utils/CorrectCaseTest.java)/**
 * @author Thomas Corbat
 *
 */
DigitFirstCaseTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/utils/DigitFirstCaseTest.java)/**
 * @author Thomas Corbat
 *
 */
EmptyCaseTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/utils/EmptyCaseTest.java)/**
 * @author Thomas Corbat
 *
 */
IdentifierHelperTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/utils/IdentifierHelperTest.java)/**
 * @author Thomas Corbat
 */
IllegalCharCaseTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/utils/IllegalCharCaseTest.java)/**
 * @author Thomas Corbat
 *
 */
KeywordCaseTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/utils/KeywordCaseTest.java)/**
 * @author Thomas Corbat
 */
PseudoNameGeneratorTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/utils/PseudoNameGeneratorTest.java)/**
 * @author Mirko Stocker
 */
UtilTestSuite (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/utils/UtilTestSuite.java)/**
 * @author Thomas Corbat
 */
FindReferencesTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/search/FindReferencesTest.java)/**
 * Test the "Find References" source navigation feature. The code implementing
 * this feature is org.eclipse.cdt.internal.ui.search.actions.FindRefsAction,
 * although this test operates one level lower, creating a
 * CSearchTextSelectionQuery directly.
 */
LinkedNamesFinderTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/search/LinkedNamesFinderTest.java)/**
 * Tests for LinkedNamesFinder class.
 */
SearchTestBase (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/search/SearchTestBase.java)/**
 * Base class for tests that test functionality based on CSearchQuery.
 */
TestUtils (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/TestUtils.java)/**
 * Static methods for use in tests.
 */
AutoEditTester (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/AbstractAutoEditTest.java)/**
	 * Helper class to test the auto-edit strategies on a document.
	 * Split out from CAutoIndentTest.
	 */
TestDocumentCommand (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/AbstractAutoEditTest.java)/**
	 * A DocumentCommand with public constructor and exec method.
	 */
AbstractAutoEditTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/AbstractAutoEditTest.java)/**
 * IAutoEditStrategy related tests
 */
AddBlockCommentTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/AddBlockCommentTest.java)/**
 * Tests for the AddBlockCommentAction.
 *
 * @since 5.0
 */
AddIncludeTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/AddIncludeTest.java)/**
 * Tests the AddIncludeOnSelectionAction.
 */
AlignConstActionTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/AlignConstActionTest.java)/**
 * Test for the const alignment action.
 */
AsmPartitionerTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/AsmPartitionerTest.java)/**
 * Tests to verify the Asm partitioning.
 */
AsmTextEditorTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/AsmTextEditorTest.java)/**
 * Tests for the AsmTextEditor
 */
BasicCEditorTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/BasicCEditorTest.java)/**
 * Basic CEditor tests.
 *
 * @since 4.0
 */
BracketInserterTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/BracketInserterTest.java)/**
 * Tests the automatic bracket insertion feature of the CEditor. Also tests
 * linked mode along the way.
 */
CAutoIndentTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CAutoIndentTest.java)/**
 * Testing the auto indent strategies.
 */
CHeaderRuleTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CHeaderRuleTest.java)/**
 * Tests to verify recognition of #include headers.
 */
CHeuristicScannerTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CHeuristicScannerTest.java)/**
 * CHeuristicScannerTest.
 * Derived from JDT.
 */
CIndenterTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CIndenterTest.java)/**
 * Tests for the CIndenter.
 *
 * @since 4.0
 */
CodeFormatterTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CodeFormatterTest.java)/**
 * Tests for the CodeFormatter.
 *
 * @since 4.0
 */
ContentAssistTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist/ContentAssistTests.java)/**
 * @author aniefer
 */
ProposalFilterPreferencesTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist/ProposalFilterPreferencesTest.java)/**
 * This test covers the convenience methods
 * in org.eclipse.cdt.internal.ui.preferences.ProposalFilterPreferencesUtil
 */
TestProposalFilter (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist/TestProposalFilter.java)/**
 * Dummy filter implementation for testing purposes
 */
CompletionTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTests.java)/**
 * A collection of code completion tests.
 *
 * @since 4.0
 */
CompletionTests_PlainC (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTests_PlainC.java)/**
 * Completion tests for plain C.
 *
 * @since 4.0
 */
CompletionTest_AnonymousTypes (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_AnonymousTypes.java)/**
 * Test that anonymous types are not returned as possibilities.
 */
CompletionTest_ArgumentType_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ArgumentType_Prefix.java)/**
 * @author hamer
 *
 * Testing Argument_Type completion kind , with a prefix
 * Bug#50642 : Wrong completion kind when declaring an argument type
 *
 */
CompletionTest_ArgumentType_Prefix2 (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ArgumentType_Prefix2.java)/**
 * @author hamer
 *
 * Testing Argument_Type completion kind , with a prefix
 * Bug#50642 : Wrong completion kind when declaring an argument type
 *
 */
CompletionTest_ClassReference_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ClassReference_NoPrefix.java)/**
 * @author hamer
 *
 * Testing class reference, with no prefix
 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=50621
 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=169860
 */
CompletionTest_ClassReference_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ClassReference_Prefix.java)/**
 * @author hamer
 *
 * Testing class reference, with prefix
 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=50621
 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=169860
 */
CompletionTest_ConstructorReference (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ConstructorReference.java)/**
 * @author hamer
 *
 * Testing Constructor_Reference
 * Bug#
 *
 */
CompletionTest_ExceptionReference_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ExceptionReference_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Exception_Reference, with No prefix
 * Bug#50640 : Wrong completion kind when expecting an exception
 *
 */
CompletionTest_ExceptionReference_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ExceptionReference_Prefix.java)/**
 * @author hamer
 *
 * Testing Exception_Reference, with prefix
 * Bug#50640 : Wrong completion kind when expecting an exception
 *
 */
CompletionTest_FieldType_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_FieldType_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Field_Type, with NO prefix
 *
 */
CompletionTest_FieldType_NoPrefix2 (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_FieldType_NoPrefix2.java)/**
 * @author hamer
 *
 * Testing Class scope, declaration start, with NO prefix
 * Bug#50344 :Wrong completion in Class scope if before the first declaration
 *
 */
CompletionTest_FieldType_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_FieldType_Prefix.java)/**
 * @author hamer
 *
 * Testing Field_Type completion kind , with a prefix
 *
 */
CompletionTest_FunctionReference_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_FunctionReference_Prefix.java)/**
 * @author hamer
 *
 * Testing Single_Name_Reference in parameter passing
 * Bug#
 *
 */
CompletionTest_MacroRef_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_MacroRef_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Macro_Reference, with no prefix
 * Bug#50487 :Wrong completion kind and prefix after "#ifdef"
 *
 */
CompletionTest_MacroRef_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_MacroRef_Prefix.java)/**
 * @author hamer
 *
 * Testing Macro_Reference, with no prefix
 * Bug#50487 :Wrong completion kind and prefix after "#ifdef"
 *
 */
CompletionTest_MemberReference_Arrow_NoPrefix2 (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_MemberReference_Arrow_NoPrefix2.java)/**
 * Test operator is followed during member reference
 */
CompletionTest_MemberReference_Arrow_NoPrefix3 (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_MemberReference_Arrow_NoPrefix3.java)/**
 * Testing operator is not followed on pointer to class with overloaded operator ->
 */
CompletionTest_MemberReference_Arrow_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_MemberReference_Arrow_Prefix.java)/**
 * @author hamer
 *
 * Testing Member_Reference, with a prefix
 * After an ->
 *
 */
CompletionTest_MemberReference_Arrow_Prefix2 (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_MemberReference_Arrow_Prefix2.java)/**
 * @author hamer
 *
 * Testing Member_Reference, with a prefix
 * Complex Context: Function return value: foo()->a(CTRL+SPACE)
 *
 */
CompletionTest_MemberReference_Dot_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_MemberReference_Dot_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Member_Reference, with NO prefix
 * After a .
 *
 */
CompletionTest_MemberReference_Dot_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_MemberReference_Dot_Prefix.java)/**
 * @author hamer
 *
 * Testing Member_Reference completion kind, with a prefix
 * After a .
 *
 */
CompletionTest_NamespaceRef_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_NamespaceRef_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Namespace_Reference, with no prefix
 * Bug#50471 : Wrong completion kind after the "using" keyword
 */
CompletionTest_NamespaceRef_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_NamespaceRef_Prefix.java)/**
 * @author hamer
 *
 * Testing Namespace_Reference, with prefix
 * Bug#50471 : Wrong completion kind after the "using" keyword
 *
 */
CompletionTest_NewTypeReference_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_NewTypeReference_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Class_Reference, with prefix
 * Bug#50711 : Wrong completion kind in a new expression
 *
 */
CompletionTest_NewTypeReference_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_NewTypeReference_Prefix.java)/**
 * @author hamer
 *
 * Testing Class_Reference, with prefix
 * Bug#50711 : Wrong completion kind in a new expression
 *
 */
CompletionTest_ScopedReference_NonCodeScope (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ScopedReference_NonCodeScope.java)/**
 * @author hamer
 *
 * Testing Scoped_Reference, with no prefix
 * Bug#50152: Wrong context sent after a "::"
 *
 */
CompletionTest_ScopedReference_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ScopedReference_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Scoped_Reference, with no prefix
 * Bug#50152: Wrong context sent after a "::"
 *
 */
CompletionTest_ScopedReference_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_ScopedReference_Prefix.java)/**
 * @author hamer
 *
 * Testing Scoped_Reference, with a prefix
 * Bug#50152: Wrong context sent after a "::"
 *
 */
CompletionTest_SingleName_Method_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_SingleName_Method_NoPrefix.java)/**
 * @author hamer
 *
 * Testing statement start, with no prefix
 * Lookup.THIS
 *
 */
CompletionTest_SingleName_Method_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_SingleName_Method_Prefix.java)/**
 * @author hamer
 *
 * Testing statement start completion kind, with a prefix
 *
 */
CompletionTest_SingleName_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_SingleName_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Single name reference, with prefix
 *
 */
CompletionTest_SingleName_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_SingleName_Prefix.java)/**
 * @author hamer
 *
 * Testing Single name reference, Macro lookups
 *
 */
CompletionTest_SingleName_Prefix2 (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_SingleName_Prefix2.java)/**
 * @author hamer
 *
 * Testing Single name reference, with prefix
 *
 */
CompletionTest_TypeDef_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_TypeDef_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Typedef as a possible returned type.
 * Bug#52948
 *
 */
CompletionTest_TypeDef_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_TypeDef_Prefix.java)/**
 * @author hamer
 *
 * Testing Typedef as a possible returned type.
 * Bug#52948
 *
 */
CompletionTest_TypeRef_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_TypeRef_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Type_Reference, with no prefix
 * Bug#50471 : Wrong completion kind after the "using" keyword
 *
 */
CompletionTest_TypeRef_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_TypeRef_Prefix.java)/**
 * @author hamer
 *
 * Testing Type_Reference, with prefix
 * Bug#50471 : Wrong completion kind after the "using" keyword
 *
 */
CompletionTest_VariableType_NestedPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_VariableType_NestedPrefix.java)/**
 * @author hamer
 *
 * Testing Scoped_Reference, with no prefix
 * Bug#50152: Wrong context sent after a "::"
 *
 */
CompletionTest_VariableType_NoPrefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_VariableType_NoPrefix.java)/**
 * @author hamer
 *
 * Testing Variable_type, with NO prefix
 *
 */
CompletionTest_VariableType_Prefix (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/CompletionTest_VariableType_Prefix.java)/**
 * @author hamer
 *
 * Testing Variable_type completion kind, with a prefix
 *
 */
ContentAssist2TestSuite (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/ContentAssist2TestSuite.java)/**
 * This suite bundles all tests for the CContentAssistProcessor
 */
HelpProposalTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/HelpProposalTests.java)/**
 * Tests for {@link org.eclipse.cdt.internal.ui.text.contentassist.HelpCompletionProposalComputer}.
 */
ShowCamelCasePreferenceTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/contentassist2/ShowCamelCasePreferenceTest.java)/**
 * Test the correct response to the value of {@link ContentAssistPreference#SHOW_CAMEL_CASE_MATCHES}.
 */
CPartitionerTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CPartitionerTest.java)/**
 * Tests to verify the C partitioning.
 * Derived from JavaPartitionerTest.
 */
EmptyCommentDetector (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CPartitionScanner.java)/**
	 * Detector for empty comments.
	 */
EmptyCommentRule (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CPartitionScanner.java)/**
	 * Word rule for empty comments.
	 */
CPartitionScanner (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CPartitionScanner.java)/**
 * This scanner is not actually use in the code it was relace by
 * FastCPartitionScanner which was faster.  We keep this around
 * as a reference.
 */
CStructureCreatorTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CStructureCreatorTest.java)/**
 * Tests for the CStructureCreator.
 *
 * @since 5.0
 */
CWordFinderTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CWordFinderTest.java)/**
 * Tests for CWordFinder.
 */
DefaultCCommentAutoEditStrategyTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/DefaultCCommentAutoEditStrategyTest.java)/**
 * Testing the auto indent strategies.
 */
CommentOwnerManagerTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/doctools/CommentOwnerManagerTests.java)/**
 * Test comment ownership mapping
 */
DoxygenCCommentAutoEditStrategyTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/doctools/doxygen/DoxygenCCommentAutoEditStrategyTest.java)/**
 * Testing the auto indent strategies.
 */
DoxygenCCommentSingleAutoEditStrategyTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/doctools/doxygen/DoxygenCCommentSingleAutoEditStrategyTest.java)/**
 * Testing the auto indent strategies.
 */
FoldingCommentsTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/FoldingCommentsTest.java)/**
 * Test doxygen style comment folding. This parametrized test checks all the
 * combinations of doxygen enabled or not along with initially folding these
 * types of comments:
 * <ul>
 * <li>File Header comments
 * {@link PreferenceConstants#EDITOR_FOLDING_HEADERS}</li>
 * <li>Block comments that are not doxygen comments
 * {@link PreferenceConstants#EDITOR_FOLDING_NON_DOC_COMMENTS}</li>
 * <li>Block comments taht are doxygen comments
 * {@link PreferenceConstants#EDITOR_FOLDING_DOC_COMMENTS}</li>
 * </ul>
 */
FoldingTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/FoldingTest.java)/**
 * Code folding tests.
 */
FormatActionTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/FormatActionTest.java)/**
 * Test the Formatter.
 */
HyperlinkTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/HyperlinkTest.java)/**
 * This test just checks that hyperlinks are created in the right
 * places. It does not test that the hyperlinks actually take you
 * to the right place.
 *
 * @author Mike Kucera
 */
InactiveCodeHighlightingTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/InactiveCodeHighlightingTest.java)/**
 * Tests for inactive code highlighting.
 *
 * @since 4.0
 */
IndentActionTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/IndentActionTest.java)/**
 * Test the IndentAction.
 */
MarkOccurrenceTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/MarkOccurrenceTest.java)/**
 * Tests the C/C++ Editor's occurrence marking feature.
 *
 * @since 5.0
 */
NumberRuleTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/NumberRuleTest.java)/**
 * Testing the NumberRule matching integers and floats.
 */
OverrideIndicatorTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/OverrideIndicatorTest.java)/**
 * Test for {@see OverrideIndicatorManager} class.
 */
PartitionTokenScannerTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/PartitionTokenScannerTest.java)/**
 * Compares two <code>IParitionTokenScanner</code>s for performance.
 */
RemoveBlockCommentTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/RemoveBlockCommentTest.java)/**
 * Tests for the RemoveBlockCommentAction.
 *
 * @since 5.0
 */
BaseSelectionTests (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/BaseSelectionTests.java)/**
 * Base class for all selection tests, using the indexer or not.
 */
BaseSelectionTestsIndexer (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/BaseSelectionTestsIndexer.java)/**
 * Base test class for testing Ctrl_F3/F3 with the indexers.
 *
 * @author dsteffle
 */
CPPSelectionTestsIndexer (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionTestsIndexer.java)/**
 * Test Ctrl-F3/F3 with the DOM Indexer for a C++ project.
 */
CPPSelectionTestsNoIndexer (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionTestsNoIndexer.java)/**
 * It is required to test the selection performance independent of the indexer to make sure that the DOM
 * is functioning properly.
 *
 * Indexer bugs can drastically influence the correctness of these tests so the indexer has to be off when
 * performing them.
 *
 * @author dsteffle
 */
CSelectionTestsNoIndexer (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CSelectionTestsNoIndexer.java)/**
 * It is required to test the selection performance independent of the indexer to make sure that the DOM is functioning properly.
 *
 * Indexer bugs can drastically influence the correctness of these tests so the indexer has to be off when performing them.
 *
 * @author dsteffle
 */
SemanticHighlightingTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/SemanticHighlightingTest.java)/**
 * Semantic highlighting tests.
 *
 * <p>Derived from JDT.<p>
 *
 * @since 4.0
 */
ShiftActionTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/ShiftActionTest.java)/**
 * Test the Shift left/right actions.
 *
 * @since 5.0
 */
SortLinesTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/SortLinesTest.java)/**
 * Tests for the SortLinesAction.
 *
 * @since 5.2
 */
TemplateFormatterTest (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/TemplateFormatterTest.java)/**
 * Tests for the template formatter (CFormatter).
 *
 * @since 5.0
 */
UICoreTestActivator (/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/UICoreTestActivator.java)/**
 * The activator class controls the plug-in life cycle
 */
Activator (/cross/org.eclipse.cdt.build.crossgcc/src/org/eclipse/cdt/internal/build/crossgcc/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
SetCrossCommandOperation (/cross/org.eclipse.cdt.build.crossgcc/src/org/eclipse/cdt/internal/build/crossgcc/SetCrossCommandOperation.java)/**
 * An operation that runs when the new project wizard finishes for the Cross GCC toolchain.
 * It reuses the information from {@link SetCrossCommandWizardPage} to set build options (prefix and path).
 * It also clears and reruns scanner discovery to account for the modified command.
 *
 */
SetCrossCommandWizardPage (/cross/org.eclipse.cdt.build.crossgcc/src/org/eclipse/cdt/internal/build/crossgcc/SetCrossCommandWizardPage.java)/**
 * A wizard page that allows the user to specify the prefix and the path of a Cross GCC command.
 * The values are passed to {@link SetCrossCommandOperation} using the {@link MBSCustomPageManager}
 */
Activator (/cross/org.eclipse.cdt.launch.remote/src/org/eclipse/cdt/internal/launch/remote/Activator.java)/**
 * The main plugin class to be used in the desktop.
 */
IRemoteConnectionHostConstants (/cross/org.eclipse.cdt.launch.remote/src/org/eclipse/cdt/launch/remote/IRemoteConnectionHostConstants.java)/**
 * Constants used for Remote CDT connection properties.
 *
 * <strong>EXPERIMENTAL</strong>. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same. Please do not use this API without consulting with
 * the <a href="http://www.eclipse.org/dsdp/tm/">Target Management</a> team.
 * </p>
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since org.eclipse.rse.remotecdt 2.1
 */
SerialFlashLaunchTargetProvider (/cross/org.eclipse.cdt.launch.serial.core/src/org/eclipse/cdt/launch/serial/SerialFlashLaunchTargetProvider.java)/**
 * Launch Target used to flash images to a device over a serial port, usually
 * USB serial.
 */
Activator (/debug/org.eclipse.cdt.debug.application/src/org/eclipse/cdt/debug/application/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
Application (/debug/org.eclipse.cdt.debug.application/src/org/eclipse/cdt/debug/application/Application.java)/**
 * This class controls all aspects of the application's execution
 */
CoreFileInfo (/debug/org.eclipse.cdt.debug.application/src/org/eclipse/cdt/debug/application/CoreFileInfo.java)/**
 * This class provides information required to start
 * debugging an executable.
 */
ICDTStandaloneDebugLaunchConstants (/debug/org.eclipse.cdt.debug.application/src/org/eclipse/cdt/debug/application/ICDTStandaloneDebugLaunchConstants.java)/**
 * Constants used for attributes in CDT Stand-alone Debugger launch configurations.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
NewExecutableInfo (/debug/org.eclipse.cdt.debug.application/src/org/eclipse/cdt/debug/application/NewExecutableInfo.java)/**
 * This class provides information required to start
 * debugging an executable.
 */
RemoteExecutableInfo (/debug/org.eclipse.cdt.debug.application/src/org/eclipse/cdt/debug/application/RemoteExecutableInfo.java)/**
 * This class provides information required to start debugging a remote executable.
 */
ConfigGenerator (/debug/org.eclipse.cdt.debug.application/src-config-generator/org/eclipse/cdt/debug/application/ConfigGenerator.java)/**
 * A "script" that generates the config.ini used by the stand-alone debugger
 * script. This is done by parsing the debug.product file to find the plug-ins.
 */
IBreakpointAction (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/breakpointactions/IBreakpointAction.java)/**
 * Interface implemented by plug-ins that wish to contribute breakpoint actions.
 *
 * THIS INTERFACE IS PROVISIONAL AND WILL CHANGE IN THE FUTURE BREAKPOINT ACTION
 * CONTRIBUTIONS USING THIS INTERFACE WILL NEED TO BE REVISED TO WORK WITH
 * FUTURE VERSIONS OF CDT.
 *
 */
ICLIDebugActionEnabler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/breakpointactions/ICLIDebugActionEnabler.java)/**
 * This interface intended to pass arbitrary debugger command to backend,
 * usually intended for command line debugger or scripting. Debugger can interpret this as it see fit
 * (including splitting this into multiple commands)
 *
 * @since 8.0
 */
IReverseDebugEnabler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/breakpointactions/IReverseDebugEnabler.java)/**
 * @since 7.3
 */
CDebugCorePlugin (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/CDebugCorePlugin.java)/**
 * The plugin class for C/C++ debug core.
 */
FileParts (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/CDebugUtils.java)/**
	 * Return value type for {@link CDebugUtils#getFileParts(String)}
	 * @since 8.0
	 */
CDebugUtils (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/CDebugUtils.java)/**
 * Utility methods.
 */
CDIDebugModel (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/CDIDebugModel.java)/**
 * Provides utility methods for creating debug sessions, targets and breakpoints
 * specific to the CDI debug model.
 */
CCommandAdapterFactory (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/command/CCommandAdapterFactory.java)/**
 * Adapter factory for debug commands.
 *
 * @see org.eclipse.debug.core.command
 *
 * @since 7.0
 *
 */
CForEachCommand (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/command/CForEachCommand.java)/**
 * A command that operates on each element individually.
 * <p>
 * Note: copied from org.eclipse.debug.core.command.ForEachCommand.
 * </p>
 * @since 7.0
 */
RestartCommand (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/command/RestartCommand.java)/**
 * Default restart command for CDI
 *
 * @since 7.0
 */
IDisassemblyContextListener (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/disassembly/IDisassemblyContextListener.java)/**
 * The instances of this interface are notified when
 * a disassembly context is registered or unregistered
 * with <code>IDisassemblyContextService</code>.
 * <p>
 * This interface is used by the disassembly UI components.
 * </p>
 * <p>
 * The clients may implement this interface.
 * </p>
 * This interface is experimental.
 */
IDisassemblyContextProvider (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/disassembly/IDisassemblyContextProvider.java)/**
 * Provides disassembly context for given element.
 * <p>
 * Clients must implements this interface to plug into
 * the diassembly framework.
 * </p>
 * This interface is experimental.
 */
IDisassemblyContextService (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/disassembly/IDisassemblyContextService.java)/**
 * Interface for registering the disassembly context objects.
 * <p>
 * Clients interested in the context change notifications
 * may register a listener.
 * </p>
 * <p>
 * This interface is not intended to be implemented by clients.
 * It can be accessed from <code>CDebugCorePlugin</code>.
 * </p>
 * @see org.eclipse.cdt.debug.core.IDisassemblyContextListener
 *
 * This interface is experimental.
 */
SearchJob (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/ExecutablesManager.java)/**
	 * Job which searches through CDT projects for executables. Only one thread
	 * should be running this job at any one time. Running job should be
	 * cancelled and verified terminated before initiating another.
	 */
ExecutablesManager (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/ExecutablesManager.java)/**
 * The Executables Manager maintains a collection of executables built by all of
 * the projects in the workspace. Executables are contributed by instances of
 * IExecutablesProvider.
 *
 * @author Ken Ryall
 *
 */
IExecutablesChangeListener (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/IExecutablesChangeListener.java)/**
 * Listener interface for finding out when the list of Executable objects in the
 * workspace changes or when the objects themselves change.
 *
 * <p>
 * Executable objects are ephemeral representations of Eclipse workspace model
 * elements. A particular executable in the workspace is typically represented
 * by many Executable objects. For example, an executable in the workspace that
 * changes twice can cause the listener's {@link #executablesChanged(List)} to
 * be called with a different Executable instance each of the two times it's invoked.
 *
 */
IExecutablesChangeListener2 (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/IExecutablesChangeListener2.java)/**
 * Extension of IExecutablesChangeListener which allows listeners to more
 * precisely find out when an Executable is added or removed from the workspace
 *
 * @since 7.1
 */
IProjectExecutablesProvider (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/IProjectExecutablesProvider.java)/**
 * IProjectExecutablesProvider supplies a list of executables for a project
 * to the Executables Manager.
 *
 * @author Warren Paul
 * @since 7.0
 *
 */
ISourceFileRemapping (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/ISourceFileRemapping.java)/**
 * ISourceFileRemapping is used by the Executables Manager when finding missing
 * source files.
 *
 * @author Ken Ryall
 *
 */
ISourceFileRemappingFactory (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/ISourceFileRemappingFactory.java)/**
 * Factory that creates an ISourceFileRemapping instance for a particular binary
 * object
 *
 * @since 7.0
 */
StandardExecutableProvider (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/StandardExecutableProvider.java)/**
 * @since 7.0
 */
ICBreakpointListener (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/ICBreakpointListener.java)/**
 * Provides event and error notification for C/C++ breakpoints.
 * Listeners register with the <code>CDebugModel</code>.
 */
ICDebugConstants (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/ICDebugConstants.java)/**
 * Constant definitions for C/C++ debug plug-in.
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICDTLaunchConfigurationConstants (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/ICDTLaunchConfigurationConstants.java)/**
 * Constants used for attributes in CDT launch configurations.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
GetSizeRequest (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/ICWatchpointTarget.java)/** IRequest object used in the asynchronous method {@link ICWatchpointTarget#getSize()} */
ICWatchpointTarget (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/ICWatchpointTarget.java)/**
 * View model types for which the "Add Watchpoint (C/C++)" action is applicable
 * should implement this interface. The action is a popupMenu/objectContribution
 * that targets this type.
 *
 * @since 7.2
 */
CoreBuildGenericLaunchConfigDelegate (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/launch/CoreBuildGenericLaunchConfigDelegate.java)/**
 * Delegate for Generic Launches over the Generic Launch Target. Can be
 * overriden to support launch customization for similar targets.
 *
 * @since 8.3
 */
CoreBuildGenericLaunchConfigProvider (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/launch/CoreBuildGenericLaunchConfigProvider.java)/**
 * Core launch configuration provider used by generic target types.
 *
 * @since 8.3
 */
CoreBuildLaunchBarTracker (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/launch/CoreBuildLaunchBarTracker.java)/**
 * A launchbar listener that attempts to set the active core build configuration
 * on the project adapted from the launch descriptor.
 *
 * @since 8.3
 */
CoreBuildLaunchConfigDelegate (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/launch/CoreBuildLaunchConfigDelegate.java)/**
 * Common launch delegate code for core build launches.
 *
 * @since 8.1
 */
GenericTargetTypeProvider (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/launch/GenericTargetTypeProvider.java)/**
 *
 * @since 8.3
 */
NullProcess (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/launch/NullProcess.java)/**
 * A simple process that only spits out a message then terminates.
 *
 * @since 8.3
 */
CDebugElementState (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/CDebugElementState.java)/**
 * The state of a debug element.
 */
IAsmInstruction (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IAsmInstruction.java)/**
 * An instruction of disassemby.
 */
IAsmSourceLine (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IAsmSourceLine.java)/**
 * A source line in disassembly.
 */
ICAddressBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICAddressBreakpoint.java)/**
 * A breakpoint that suspend the execution when a particular address is reached.
 */
ICastToArray (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICastToArray.java)/**
 * Provides the ability to present a variable as an array of the same type.
 */
ICastToType (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICastToType.java)/**
 * Provides the ability to cast a variable to the given type.
 */
ICBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICBreakpoint.java)/**
 * A breakpoint specific to the C/C++ debug model. A C/C++ breakpoint supports:
 * <ul>
 * <li>a condition</li>
 * <li>an ignore count</li>
 * <li>a thread filter to restrict the breakpoint to a specific thread</li>
 * <li>an installed property that indicates a breakpoint was successfully
 * installed in debug target</li>
 * </ul>
 */
ICBreakpoint2 (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICBreakpoint2.java)/**
 * Extension that allows client to force breakpoint message to refresh.
 *
 * @since 7.2
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICBreakpointExtension (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICBreakpointExtension.java)/**
 * An extension to {@link ICBreakpoint} with model-specific breakpoint
 * attributes. Different debug models can use the standard C breakpoints that
 * extend the basic <code>ICBreakpiont</code>.  The can use this extension
 * mechanism to edit and store model-specific data in the original breakpoint
 * object.
 *
 * A breakpoint extension is defined by an extension of kind
 * <code>"org.eclipse.cdt.debug.core.BreakpointExtension"</code></li>.
 * The <code>ICBreakpoint</code> implementation instantiates breakpoint
 * extensions registered for its specific marker type when a client requests
 * extensions for a given debug model type.  Thus the extension classes and
 * plugins that declare them are not loaded unless requested by a client.
 *
 * @see ICBreakpoint#getExtension(String, Class)
 */
ICDebugElement (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICDebugElement.java)/**
 * C/C++ specific extension of <code>IDebugElement</code>.
 */
ICDebugElementStatus (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICDebugElementStatus.java)/**
 * Represents the status of a C/C++ debug model element.
 */
ICDebugTargetGroup (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICDebugTargetGroup.java)/**
 * Represents a group of C/C++ debug targets.
 */
ICDynamicPrintf (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICDynamicPrintf.java)/**
 * A dynamic printf specific to the C/C++ debug model.
 *
 * @since 7.5
 */
ICEventBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICEventBreakpoint.java)/**
 * Interface for debugger event breakpoints. Example of event breakpoint
 * is break on raising exception in C++, or break on receiving signal.
 *
 * @sinse 5.0
 * @since 7.0
 */
ICFunctionBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICFunctionBreakpoint.java)/**
 * A breakpoint that suspends the execution when a function is entered.
 */
IChangeReverseMethodHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IChangeReverseMethodHandler.java)/**
 * Handler interface for the reverse debug change method command
 *
 * @since 8.0
 */
ICLineBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICLineBreakpoint.java)/**
 * A breakpoint that suspends the execution when a particular location of code
 * is reached.
 */
ICLineBreakpoint2 (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICLineBreakpoint2.java)/**
 * Line breakpoint extension that allows a breakpoint to be relocated by a
 * debugger to a valid source line.
 * <p>Clients which can determine a valid source based on debuggers symbol
 * information should call the various <code>setInstalled...</code> methods with
 * the corrected location attributes. Note, there is no <code>setInstalledSourceHandle</code>,
 * clients should call {@link ICBreakpoint#setSourceHandle(String)}.  If multiple
 * clients try to change the installed breakpoint location, the last call will
 * take precedence.  This way debuggers may update the location upon active debug
 * context change.  <br/>
 * The original breakpoint location as configured by the user can always be
 * retrieved using the <code>getRequested...</code> methods.
 * </p>
 * @since 7.2
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICModule (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICModule.java)/**
 * Represents a module in the process being debugged.
 *
 * @since 3.0
 */
IConnectHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IConnectHandler.java)/**
 * Handler interface to for the connect command
 *
 * @since 7.3
 */
ICSignal (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICSignal.java)/**
 * Represents a signal.
 *
 * @since: Mar 5, 2004
 */
ICStackFrame (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICStackFrame.java)/**
 * C/C++ specific extension of <code>IStackFrame</code>.
 */
ICThread (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICThread.java)/**
 * C/C++ extension of <code>IThread</code>.
 */
ICTracepoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICTracepoint.java)/**
 * A tracepoint specific to the C/C++ debug model.
 *
 * @since 7.0
 */
ICType (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICType.java)/**
 * Represents a type of a varibale.
 * Used by the UI responsible components for variable rendering.
 */
ICValue (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICValue.java)/**
 * Extends the IValue interface by C/C++ specific functionality.
 */
ICWatchpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ICWatchpoint.java)/**
 * A watchpoint specific to the C/C++ debug model.
 */
IDebuggerProcessSupport (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IDebuggerProcessSupport.java)/**
 * Provides the functionality to support debugger console.
 *
 * @since: Oct 23, 2002
 */
IDebugNewExecutableHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IDebugNewExecutableHandler.java)/**
 * Command handler for the "Debug New Executable" command.
 *
 * @since 7.3
 */
IDisassembly (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IDisassembly.java)/**
 * Represents the disassembly of a debug target.
 */
IDisassemblyBlock (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IDisassemblyBlock.java)/**
 * Represents a contiguous segment of disassembly in an execution context.
 */
IDisassemblyInstruction (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IDisassemblyInstruction.java)/**
 * Represents an instruction in disassembly.
 */
IDisassemblyLine (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IDisassemblyLine.java)/**
 * org.eclipse.cdt.debug.core.model.IDisassemblyLine:
 * //TODO Add description.
 */
IDisassemblySourceLine (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IDisassemblySourceLine.java)/**
 * Represents a source line in disassembly.
 */
IDummyStackFrame (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IDummyStackFrame.java)/**
 * Represents a dummy stack frame used to indicate that the stack depth is greater
 * than the number of displayed frames.
 */
IEditRegisterGroupHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IEditRegisterGroupHandler.java)/**
 * Handler interface to for the editRegisterGroup command
 * @since 7.6
 */
IEnableDisableTarget (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IEnableDisableTarget.java)/**
 * Provides support for enable/disable actions.
 */
IExecFileInfo (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IExecFileInfo.java)/**
 * Provides access to executable file information.
 */
IGlobalVariableDescriptor (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IGlobalVariableDescriptor.java)/**
 * Provides the description of a global variable.
 */
IGroupDebugContextsHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IGroupDebugContextsHandler.java)/**
 * Handler interface to perform grouping of debug contexts.
 *
 * @since 7.1
 */
IMemoryBlockAddressInfoItem (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IMemoryBlockAddressInfoRetrieval.java)/**
	 * Information item for a memory address or range
	 */
IGetMemoryBlockAddressInfoReq (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IMemoryBlockAddressInfoRetrieval.java)/**
	 * An async request for information items, triggering the callback via the method done().
	 * The method done() is expected to be overridden so when the request is successful this additional API
	 * can be used to retrieve the item information collected.
	 */
IAddressInfoUpdateListener (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IMemoryBlockAddressInfoRetrieval.java)/**
	 * Call-back interface used to receive notification of changes to address information items
	 */
IMemoryBlockAddressInfoRetrieval (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IMemoryBlockAddressInfoRetrieval.java)/**
 * An interface that offers the possibility to request information related to addresses for a given memory block
 * and within a specific context. It also offers the possibility to register listeners, listeners that can receive
 * notifications of changes/updates to the address information
 *
 * @since 8.0
 */
IModuleRetrieval (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IModuleRetrieval.java)/**
 * Comment for .
 */
IMoveToAddress (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IMoveToAddress.java)/**
 * Provides the ability to move the instruction pointer of a debug target to the given address.
 * @since 6.0
 */
IMoveToLine (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IMoveToLine.java)/**
 * Provides the ability to move the instruction pointer of a debug target to the given line.
 * @since 6.0
 */
IPersistableRegisterGroup (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IPersistableRegisterGroup.java)/**
 * A register group to be persisted and restored.
 * To be used for the user-defined register groups.
 *
 * @since 3.0
 */
IRegisterDescriptor (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IRegisterDescriptor.java)/**
 * Describes a register.
 *
 * @since 3.0
 */
IRemoveRegisterGroupsHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IRemoveRegisterGroupsHandler.java)/**
 * Handler interface to for the removeRegisterGroups command
 * @since 7.6
 */
IRestart (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IRestart.java)/**
 * Provides the ability to restart a debug target.
 * <p>
 * Note: Debug elements which support restart should implement this interface.
 * Adopting to this interface is not enough.
 * </p>
 * <p>
 * Note 2: Debugger can also implement the asynchronous
 * {@link org.eclipse.debug.core.commands.IRestartHandler}.
 * </p>
 *
 * @see org.eclipse.debug.core.commands.IRestartHandler
 */
IRestoreRegisterGroupsHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IRestoreRegisterGroupsHandler.java)/**
 * Handler interface to for the restoreRegisterGroups command
 * @since 7.6
 */
IResumeAtAddress (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IResumeAtAddress.java)/**
 * Provides the ability to resume a debug target at the given address.
 * @since 6.0
 */
IResumeAtLine (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IResumeAtLine.java)/**
 * Provides the ability to resume a debug target at the given line.
 * @since 6.0
 */
IResumeWithoutSignal (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IResumeWithoutSignal.java)/**
 * Provides the ability to resume execution without giving a signal.
 * This is useful when the program stopped on account of a signal and would
 * ordinary see the signal when resumed.
 *
 * @since: Feb 4, 2003
 */
IResumeWithoutSignalHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IResumeWithoutSignalHandler.java)/**
 * Handler interface to perform a resume without signal operation
 *
 * @since 7.0
 */
IReverseResumeHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IReverseResumeHandler.java)/**
 * Handler interface to perform a reverse Resume operation
 *
 * @since 7.0
 */
IReverseStepIntoHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IReverseStepIntoHandler.java)/**
 * Handler interface to perform a reverse StepInto operation
 *
 * @since 7.0
 */
IReverseStepOverHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IReverseStepOverHandler.java)/**
 * Handler interface to perform a reverse StepOver operation
 *
 * @since 7.0
 */
IReverseToggleHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IReverseToggleHandler.java)/**
 * Handler interface to toggle reverse debugging
 *
 * @since 7.0
 */
IRunToAddress (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IRunToAddress.java)/**
 * Provides the ability to run a debug target to the given address.
 */
IRunToLine (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IRunToLine.java)/**
 * Provides the ability to run a debug target to the given line.
 */
ISaveTraceDataHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ISaveTraceDataHandler.java)/**
 * Handler interface to save trace data.
 * @since 7.0
 */
IStartTracingHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IStartTracingHandler.java)/**
 * Handler interface to request the start of tracing.
 * @since 7.0
 */
IStepIntoSelectionHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IStepIntoSelectionHandler.java)/**
 * @since 7.3
 *
 */
ISteppingModeTarget (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ISteppingModeTarget.java)/**
 * Support for the instruction stepping mode for a debug target.
 */
IStopTracingHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IStopTracingHandler.java)/**
 * Handler interface to request the stop of tracing.
 * @since 7.0
 */
ITargetProperties (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/ITargetProperties.java)/**
 * Provides access to the properties of a debug target.
 */
IUncallHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IUncallHandler.java)/**
 * Handler interface to perform an Uncall operation (reverse debugging)
 *
 * @since 7.0
 */
IUngroupDebugContextsHandler (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IUngroupDebugContextsHandler.java)/**
 * Handler interface to perform ungrouping of debug contexts.
 *
 * @since 7.1
 */
IViewInMemory (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/IViewInMemory.java)/**
 * Provides the ability to view a variable in the memory view.
 * @since 7.4
 */
IMemoryRenderingViewportProvider (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/provisional/IMemoryRenderingViewportProvider.java)/**
 * An add-on interface for memory renderings to provide access to the first
 * address being displayed. As the user scrolls the rendering, this value
 * changes.
 */
IMemorySpaceAwareMemoryBlock (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/provisional/IMemorySpaceAwareMemoryBlock.java)/**
 * An extension of IMemoryBlockExtension that supports memory spaces. An
 * instance of this is returned from IMemorySpaceAwareMemoryBlockRetrieval. The
 * memory space interface is provisional, thus this class cannot yet be API.
 *
 * @author Alain Lee and John Cortell
 */
GetMemorySpacesRequest (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/provisional/IMemorySpaceAwareMemoryBlockRetrieval.java)/**
	 * Caller to {@link #getMemorySpaces()} provides one of these, as that
	 * method may need to consult the debugger backend, and thus needs to be
	 * asynchronous
	 */
IMemorySpaceAwareMemoryBlockRetrieval (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/provisional/IMemorySpaceAwareMemoryBlockRetrieval.java)/**
 * An extension of the IMemoryBlockRetrievalExtension interface that supports
 * memory spaces. The memory space interface is provisional, thus this class
 * cannot yet be API.
 *
 * @author Alain Lee and John Cortell
 */
IRecurringDebugContext (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/model/provisional/IRecurringDebugContext.java)/**
 * This interface should be implemented by context objects that can provide an
 * identifier that is unique among other contexts of the same type in a debug
 * session, but which will be reused if the underlying thing appears in a future
 * debug session. For example, the executable name can typically be used to
 * identify that the process context in two successive debug sessions represent
 * the same program. Where threads are programatically given meaningful names,
 * the thread name can be used to detect that we're dealing with the same thread
 * in successive debug sessions. Implementations should stay away from using
 * identifiers that are assigned by the underlying runtime system (e.g., PIDs
 * and TIDs), since such IDs are often assigned and reused in non-deterministic
 * ways.
 *
 * @author Alain Lee
 */
CProjectSourceContainer (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/CProjectSourceContainer.java)/**
 * A project in the workspace. Source is searched for in the root project
 * folder and all folders within the project recursively. Optionally,
 * referenced projects may be searched as well.
 *
 * Source elements returned from <code>findSourceElements(...)</code> are instances of
 * <code>IFile</code>.
 * <p>
 * Clients may instantiate this class.
 * </p>
 * @since 7.1
 * @noextend This class is not intended to be subclassed by clients.
 */
ICSourceLocation (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/ICSourceLocation.java)/**
 *
 * A source location defines the location of a repository
 * of source code. A source location is capable of retrieving
 * source elements.
 * <p>
 * For example, a source location could be a project, zip/archive
 * file, or a directory in the file system.
 * </p>
 *
 * @since Sep 23, 2002
 */
ICSourceLocator (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/ICSourceLocator.java)/**
 *
 * A C/C++ extension of <code>ISourceLocator</code>.
 * Provides constants and methods to manage different source modes.
 *
 * @since Aug 19, 2002
 */
IDirectorySourceLocation (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/IDirectorySourceLocation.java)/**
 *
 * Enter type comment.
 *
 * @since Dec 24, 2002
 */
IMappingSourceContainer (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/IMappingSourceContainer.java)/**
 * A source container that maps some filesystem locations to other filesystem locations.
 * @since 7.1
 */
IProjectSourceLocation (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/IProjectSourceLocation.java)/**
 *
 * Enter type comment.
 *
 * @since Dec 24, 2002
 */
ISourceLookupChangeListener (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/ISourceLookupChangeListener.java)/**
* A source lookup change listener is notified of changes in the source lookup path.
*/
MappingSourceContainer (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/MappingSourceContainer.java)/**
 * The source container for path mappings.
 */
ProgramRelativePathSourceContainer (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/ProgramRelativePathSourceContainer.java)/**
 * A source container that converts relative paths to absolute ones using the
 * program (executable) location as the reference point. The conversion is
 * successful only if such a file actually exists.
 *
 * @since 7.0
 */
SourceLookupFactory (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/SourceLookupFactory.java)/**
 * Enter type comment.
 *
 * @since Jul 14, 2003
 */
AbstractDynamicPrintf (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/AbstractDynamicPrintf.java)/**
 * Base class for different types of location DynamicPrintf.
 *
 * @since 7.5
 */
AbstractLineBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/AbstractLineBreakpoint.java)/**
 * Base class for different types of location breakponts.
 */
AbstractTracepoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/AbstractTracepoint.java)/**
 * Base class for different types of location tracepoints.
 */
CAddressBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CAddressBreakpoint.java)/**
 * A breakpoint that suspend the execution when a particular address is reached.
 */
CAddressDynamicPrintf (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CAddressDynamicPrintf.java)/**
 * A DynamicPrintf that prints a message when a particular address is reached.
 *
 * @since 7.5
 */
CAddressTracepoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CAddressTracepoint.java)/**
 * A tracepoint that collects data when a particular address is reached.
 *
 * @since 6.1
 */
CBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CBreakpoint.java)/**
 * The base class for all C/C++ specific breakpoints.
 */
CBreakpointImportParticipant (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CBreakpointImportParticipant.java)/**
 * Initial implementation covering matching breakpoints at import for all platform C/C++ breakpoints
 */
CFunctionBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CFunctionBreakpoint.java)/**
 * A breakpoint that suspends the execution when a function is entered.
 */
CFunctionDynamicPrintf (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CFunctionDynamicPrintf.java)/**
 * A DynamicPrintf that collects data when a function is entered.
 *
 * @since 7.5
 */
CFunctionTracepoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CFunctionTracepoint.java)/**
 * A tracepoint that collects data when a function is entered.
 *
 * @since 6.1
 */
CLineBreakpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CLineBreakpoint.java)/**
 * A breakpoint that suspends the execution when a particular line of code is
 * reached.
 */
CLineDynamicPrintf (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CLineDynamicPrintf.java)/**
 * A DynamicPrintf that prints a string when a particular line of code is reached.
 *
 * @since 7.5
 */
CLineTracepoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CLineTracepoint.java)/**
 * A tracepoint that collects data when a particular line of code is reached.
 *
 * @since 6.1
 */
CWatchpoint (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/CWatchpoint.java)/**
 * A watchpoint specific to the C/C++ debug model.
 */
CDebugCorePreferenceInitializer (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/CDebugCorePreferenceInitializer.java)/**
 * Default preference value initializer for <code>CDebugCorePlugin</code>.
 */
CRequest (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/CRequest.java)/**
 * Base class for request objects used in asynchronous calls in base CDT
 * (non-DSF). This is used in base features that delegate a task to a backend
 * that is either DSF or CDI. Since DSF is highly asynchronous, the base logic
 * has to use asynchronous APIs.
 */
DebugModelProvider (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/DebugModelProvider.java)/**
 * Debug model provider returns additional model ID to use with
 * GDB event breakpoints.
 */
DebugStringVariableSubstitutor (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/DebugStringVariableSubstitutor.java)/**
 * String variable substitutor that resolves project_name, project_loc and project_path variables
 * in the context of the given project. Resolution of all other variables is delegated to
 * the default string variable manager.
 */
ICDebugInternalConstants (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/ICDebugInternalConstants.java)/**
 * Definitions of the internal constants for C/C++ Debug plug-in.
 */
ICWatchpointTarget (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/ICWatchpointTarget.java)/**
 * @deprecated This interface has been moved to a public package.  Use
 * {@link org.eclipse.cdt.debug.core.ICWatchpointTarget} instead.
 */
CoreBuildLaunchDescriptorType (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/launch/CoreBuildLaunchDescriptorType.java)/**
 * The launch descriptor type for launch objects built with the Core Build System.
 */
ListenerList (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/ListenerList.java)/**
 * Local version of org.eclipse.jface.util.ListenerList (modified)s
 */
IRegisterGroupDescriptor (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/model/IRegisterGroupDescriptor.java)/**
 * Describes a register Group
 */
CDirectorySourceContainerType (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CDirectorySourceContainerType.java)/**
 * See <code>CDirectorySourceContainer</code>.
 */
CDirectorySourceLocation (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CDirectorySourceLocation.java)/**
 *
 * Locates source elements in a directory in the local
 * file system. Returns instances of <code>FileStorage</code>.
 *
 * @since Sep 23, 2002
 */
CommonSourceLookupDirector (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CommonSourceLookupDirector.java)/**
 * Director of the common source containers.
 */
CompilationDirectorySourceContainer (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CompilationDirectorySourceContainer.java)/**
 * A directory in the local file system that is used for running the C/C++ compiler. This container
 * is intended to be used when debugging information produced by the C/C++ compiler contains paths
 * to the source and header files relative to the directory where the compiler is run from.
 * The assumption is that all files under a compilation directory are compiled relative to
 * that directory, unless they belong to another compilation directory container that is higher on
 * the source container list.
 *
 * Source elements returned from <code>findSourceElements(...)</code> are instances of
 * <code>IFile</code> or <code>LocalFileStorage</code>.
 * <p>
 * Clients may instantiate this class.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 */
CompilationDirectorySourceContainerType (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CompilationDirectorySourceContainerType.java)/**
 * See {@link CompilationDirectorySourceContainer}.
 */
CProjectSourceContainerType (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CProjectSourceContainerType.java)/**
 * The type for creating/restoring a project source container.
 */
CProjectSourceLocation (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CProjectSourceLocation.java)/**
 * Locates source elements in a C/C++ project. Returns instances of <code>IFile</code>.
 *
 * @since Sep 23, 2002
 */
CSourceLocator (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourceLocator.java)/**
 * Default source locator.
 */
CSourceLookupDirector (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourceLookupDirector.java)/**
 * C/C++ source lookup director.
 *
 * Most instantiations of this class are transient, created through
 * {@link ILaunchManager#newSourceLocator(String)}. A singleton is also created
 * to represent the global source locators.
 *
 * An instance is either associated with a particular launch configuration or it
 * has no association (global).
 *
 * This class is created by the {@link ILaunchManager#newSourceLocator(String)}
 * (e.g. DebugPlugin.getDefault().getLaunchManager().newSourceLocator(type)) and
 * must have a no-arguments constructor.
 */
CSourceLookupParticipant (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourceLookupParticipant.java)/**
 * A source lookup participant that searches for C/C++ source code.
 */
CSourceManager (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourceManager.java)/**
 * Locates sources for a C/C++ debug session.
 */
CSourceNotFoundElement (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourceNotFoundElement.java)/**
 * Wrapper for debug elements that have missing source, for example a stack
 * frame whose source file can not be located. Used to enable the
 * CSourceNotFoundEditor that will let you find the missing file.
 *
 */
CSourcePathComputerDelegate (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourcePathComputerDelegate.java)/**
 * Computes the default source lookup path for a launch configuration.
 */
ICSourceNotFoundDescription (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/ICSourceNotFoundDescription.java)/**
 * This interface is used to provide a description of a debug element,
 * usually a stack frame, when no source can be located for it.
 * An instance is usually provided by an adapter.
 */
MapEntrySourceContainer (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainer.java)/**
 * The source container that maps a backend path to the local filesystem path.
 */
MapEntrySourceContainerType (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainerType.java)/**
 * The map entry container type.
 */
MappingSourceContainerType (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MappingSourceContainerType.java)/**
 * The mapping container type.
 */
SourceFoldersRelativePathSourceContainer (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/SourceFoldersRelativePathSourceContainer.java)/**
 * A project where source folders are used for running the C/C++ compiler. This container
 * is intended to be used when debugging information produced by the C/C++ compiler contains paths
 * to the source and header files relative to the directory where the compiler is run from.
 * The assumption is that all files under a source folder are compiled relative to that folder.
 *
 * Source elements returned from <code>findSourceElements(...)</code> are instances of
 * <code>LocalFileStorage</code>.
 * <p>
 * Clients may instantiate this class.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 */
SourceFoldersRelativePathSourceContainerType (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/SourceFoldersRelativePathSourceContainerType.java)/**
 * See <code>SourceFoldersRelativePathSourceContainer</code>.
 */
CSourceFinderFactory (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/srcfinder/CSourceFinderFactory.java)/**
 * Adapter factory that adapts an IBinary object to an ISourceFinder
 */
StringSubstitutionEngine (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/StringSubstitutionEngine.java)/**
 * Performs string substitution for context and value variables.
 * A clone of {@link org.eclipse.core.internal.variables.StringSubstitutionEngine}.
 */
Trace (/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/Trace.java)/**
 * Class for getting a singleton instance of DebugTrace, an extremely useful
 * utility for troubleshooting race condition bugs. Each trace statement
 * contains the thread and the time (in millisecond granularity). The trace goes
 * to the file: {workspace}/.metadata/trace.log
 *
 * <p>
 * For performance reasons, trace statements should explicitly check a trace
 * flag before calling into a DebugTrace method. E.g.,
 *
 * <p>
 * <code>
 * if (Trace.DEBUG_EXECUTABLES) DebugTrace.getTrace.trace(null, ...);
 * </code>
 *
 * <p>
 * The alternative is to have DebugTrace check the debug option for you (i.e.,
 * don't pass null for first param), but this incurs a relatively heavy price
 * considering the trace statements are present in release code. An advantage of
 * asking DebugTrace to do the check is that is that it supports trace options
 * changing during the workbench lifetime. However that's an unlikely and
 * esoteric scenario.
 *
 * <p>
 * This class is also a central location for trace flags. They are public static
 * fields, so checking them in trace statements is very efficient. They are set
 * at plugin startup.
 *
 * <p>
 * DebugTrace objects are particular to a plugin. Plugins can reuse most of this
 * class definition. However, since it's all based on static methods and fields,
 * reuse means copy-n-paste. Making this not rely on statics would complicate
 * things and simplicity and efficiency is what we need most when it comes to
 * trace. When making a copy of this class for your plugin, make sure to update
 * the Activator class reference (appears three times). Also, the DEBUG_XXXX
 * fields will need to be whatever options are used in your plugin.
 */
MemoryRequestResponse (/debug/org.eclipse.cdt.debug.dap/src/org/eclipse/cdt/debug/dap/CDTDebugProtocol.java)/**
	 * https://github.com/eclipse-cdt/cdt-gdb-adapter/blob/5d788cbbc6ace142b0930375fcd931b4241eddbb/src/GDBDebugSession.ts#L73
	 * export interface MemoryResponse extends Response {
	 *    body: MemoryContents;
	 * }
	 */
MemoryContents (/debug/org.eclipse.cdt.debug.dap/src/org/eclipse/cdt/debug/dap/CDTDebugProtocol.java)/**
	 * https://github.com/eclipse-cdt/cdt-gdb-adapter/blob/5d788cbbc6ace142b0930375fcd931b4241eddbb/src/GDBDebugSession.ts#L67
	 * export interface MemoryContents {
	 *     /\* Hex-encoded string of bytes.  *\/
	 *     data: string;
	 *     address: string;
	 * }
	 */
MemoryRequestArguments (/debug/org.eclipse.cdt.debug.dap/src/org/eclipse/cdt/debug/dap/CDTDebugProtocol.java)/**
	 * https://github.com/eclipse-cdt/cdt-gdb-adapter/blob/5d788cbbc6ace142b0930375fcd931b4241eddbb/src/GDBDebugSession.ts#L58
	 * export interface MemoryRequestArguments {
	 *     address: string;
	 *     length: number;
	 *     offset?: number;
	 * }
	 *
	 */
AbstractEditorActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/AbstractEditorActionDelegate.java)/**
 *
 * Enter type comment.
 *
 * @since Sep 19, 2002
 */
AbstractViewActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/AbstractViewActionDelegate.java)/**
 * The superclass for action delegates of views different than the Debug view and
 * driven by the selection in the Debug view.
 */
AddExpressionEditorActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/AddExpressionEditorActionDelegate.java)/**
 * The "Add Expression" action contribution to editors.
 */
AddWatchpointOnVariableActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/AddWatchpointOnVariableActionDelegate.java)/**
 * This class was moved to a public package and this implementation is left here
 * for backward compatibility for clients that used this internal class.
 *
 * @deprecated Use the {@link org.eclipse.cdt.debug.ui.breakpoints.AddWatchpointOnVariableActionDelegate}
 * class instead.
 */
AbstractBreakpointRulerAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/AbstractBreakpointRulerAction.java)/**
 * Abstract base implementation of the breakpoint ruler actions.
 *
 * @see {@link RulerBreakpointAction}
 */
AddEventBreakpointActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/AddEventBreakpointActionDelegate.java)/**
 * A delegate for the "Add Event Breakpoint" action.
 */
AddFunctionBreakpointActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/AddFunctionBreakpointActionDelegate.java)/**
 * A delegate for the "Add Function Breakpoint" action.
 */
AddLineBreakpointActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/AddLineBreakpointActionDelegate.java)/**
 * A delegate for the "Add Line Breakpoint" action.
 * <p>
 * Initially derived from AddFunctionBreakpointActionDelegate
 */
CAddBreakpointInteractiveRulerAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CAddBreakpointInteractiveRulerAction.java)/**
 * Action to interactively create a breakpoint from the vertical ruler of a
 * workbench part containing a document. The part must provide an
 * <code>IToggleBreakpointsTargetExtension2</code> adapter.
 * <p>
 * Clients may instantiate this class.
 * </p>
 * @since 7.2
 * @see org.eclipse.debug.ui.actions.RulerToggleBreakpointActionDelegate
 */
CAddBreakpointInteractiveRulerActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CAddBreakpointInteractiveRulerActionDelegate.java)/**
 * Creates a breakpoint interactively, that is with user input as well as context
 * information gathered from editor location. This action delegate can be
 * contributed to an editor with the <code>editorActions</code> extension point.
 * This action is a factory that creates another action that performs the
 * actual breakpoint toggling. The created action acts on the editor's
 * <code>IToggleBreakpointsTargetCExtension</code> to create the breakpoint.
 * <p>
 * This action should be contributed to a vertical ruler context menu via the
 * <code>popupMenus</code> extension point, by referencing the ruler's context
 * menu identifier in the <code>targetID</code> attribute.
 * <pre>
 * &lt;extension point="org.eclipse.ui.popupMenus"&gt;
 *   &lt;viewerContribution
 *     targetID="example.rulerContextMenuId"
 *     id="example.RulerPopupActions"&gt;
 *       &lt;action
 *         label="Toggle Breakpoint"
 *         class="org.eclipse.debug.ui.actions.RulerCreateBreakpointInteractiveActionDelegate"
 *         menubarPath="additions"
 *         id="example.rulerContextMenu.createBreakpointAction"&gt;
 *       &lt;/action&gt;
 *   &lt;/viewerContribution&gt;
 * </pre>
 * </p>
 * <p>
 * Clients may refer to this class as an action delegate in plug-in XML.
 * </p>
 * @see IToggleBreakpointsTargetCExtension
 * @since 7.2
 * @noextend This class is not intended to be sub-classed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CAddDynamicPrintfInteractiveRulerAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CAddDynamicPrintfInteractiveRulerAction.java)/**
 * Action to interactively create a dynamic printf from the vertical ruler of a
 * workbench part containing a document. The part must provide an
 * <code>IToggleBreakpointsTargetExtension2</code> adapter.
 * <p>
 * Clients may instantiate this class.
 * </p>
 * @since 7.4
 * @see org.eclipse.debug.ui.actions.RulerToggleBreakpointActionDelegate
 */
CAddDynamicPrintfInteractiveRulerActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CAddDynamicPrintfInteractiveRulerActionDelegate.java)/**
 * Creates a Dynamic Printf interactively, that is with user input as well as context
 * information gathered from editor location. This action delegate can be
 * contributed to an editor with the <code>editorActions</code> extension point.
 * This action is as a factory that creates another action that performs the
 * actual breakpoint toggling. The created action acts on the editor's
 * <code>IToggleBreakpointsTargetCExtension</code> to create the breakpoint.
 * <p>
 * This action should be contributed to a vertical ruler context menu via the
 * <code>popupMenus</code> extension point, by referencing the ruler's context
 * menu identifier in the <code>targetID</code> attribute.
 * <pre>
 * &lt;extension point="org.eclipse.ui.popupMenus"&gt;
 *   &lt;viewerContribution
 *     targetID="example.rulerContextMenuId"
 *     id="example.RulerPopupActions"&gt;
 *       &lt;action
 *         label="Add Dynamic Printf"
 *         class="org.eclipse.debug.ui.actions.CAddDynamicPrintfInteractiveRulerActionDelegate"
 *         menubarPath="additions"
 *         id="example.rulerContextMenu.createDynamicPrintfAction"&gt;
 *       &lt;/action&gt;
 *   &lt;/viewerContribution&gt;
 * </pre>
 * </p>
 * <p>
 * Clients may refer to this class as an action delegate in plug-in XML.
 * </p>
 * @see IToggleBreakpointsTargetCExtension
 * @since 7.4
 * @noextend This class is not intended to be sub-classed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CBreakpointPropertiesHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CBreakpointPropertiesHandler.java)/**
 * Presents a custom properties dialog to configure the attibutes of a C/C++ breakpoint.
 */
CBreakpointPropertiesRulerAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CBreakpointPropertiesRulerAction.java)/**
 * Opens a custom properties dialog to configure the attibutes of a C/C++ breakpoint
 * from the ruler popup menu.
 */
CRulerEnableDisableBreakpointActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CRulerEnableDisableBreakpointActionDelegate.java)/**
 * This is a copy of the RulerEnableDisableBreakpointActionDelegate in platform.
 * It updates the toggle action to include an accelertor text in its label.
 * See bug 374153.
 *
 * @see org.eclipse.debug.ui.actions.RulerEnableDisableBreakpointActionDelegate
 */
CRulerToggleBreakpointActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CRulerToggleBreakpointActionDelegate.java)/**
 * This is a copy of the RulerToggleBreakpointActionDelegate in platform.
 * It updates the toggle action to include an accelertor text in its label.
 * See bug 374153.
 *
 * @see org.eclipse.debug.ui.actions.RulerToggleBreakpointActionDelegate
 */
CToggleBreakpointObjectActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CToggleBreakpointObjectActionDelegate.java)/**
 * A toggle breakpoint action that can be contributed to an object. The action
 * will perform a toggle breakpoint operation for a selected object.
 * <p>
 * This class is based on {@link org.eclipse.debug.internal.ui.actions.breakpoints.ToggleBreakpointObjectActionDelegate }
 * class.  In addition to the copied functionality, it adds the handling of
 * action-triggering event.
 * </p>
 *
 * @since 7.2
 */
CToggleMethodBreakpointActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CToggleMethodBreakpointActionDelegate.java)/**
 * A toggle method breakpoint action that can be contributed an object
 * contribution. The action will toggle method breakpoints on objects
 * that provide an <code>IToggleBreakpointsTarget</code> adapter.
 * <p>
 * This class is based on {@link org.eclipse.debug.ui.actions.ToggleMethodBreakpointActionDelegate }
 * class.  In addition to the copied functionality, it adds the handling of
 * action-triggering event.
 * </p>
 *
 * @since 7.2
 */
CToggleWatchpointActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/CToggleWatchpointActionDelegate.java)/**
 * A toggle watchpoint action that can be contributed an object
 * contribution. The action will toggle watchpoints on objects
 * that provide an <code>IToggleBreakpointsTarget</code> adapter.
 * <p>
 * This class is based on {@link org.eclipse.debug.ui.actions.ToggleWatchpointActionDelegate }
 * class.  In addition to the copied functionality, it adds the handling of
 * action-triggering event.
 * </p>
 *
 * @since 7.5
 */
ToggleBreakpointAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/ToggleBreakpointAdapter.java)/**
 * Toggles a line breakpoint in a C/C++ editor.
 *
 * @since 7.2
 */
ToggleCBreakpointsTargetFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/ToggleCBreakpointsTargetFactory.java)/**
 *
 */
ToggleCDynamicPrintfTargetFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/ToggleCDynamicPrintfTargetFactory.java)/**
 * Toggle Dynamic Printf target factory for the CEditor.
 *
 * @since 7.5
 */
ToggleCTracepointsTargetFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/ToggleCTracepointsTargetFactory.java)/**
 * Toggle tracepoints target factory for the CEditor.
 * We use a separate factory so that we can control it through an action set.
 *
 * @since 6.1
 */
ToggleDynamicPrintfAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/ToggleDynamicPrintfAdapter.java)/**
 * Toggles a dynamic printf in a C/C++ editor.
 *
 * @since 7.5
 */
ToggleTracepointAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/breakpoints/ToggleTracepointAdapter.java)/**
 * Toggles a tracepoint in a C/C++ editor.
 */
CastToArrayActionHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/CastToArrayActionHandler.java)/**
 * The delegate of the "Display As Array" action.
 */
CastToTypeActionHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/CastToTypeActionHandler.java)/**
 * The delegate of the "Cast To Type" action.
 */
CollapseAllModulesAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/CollapseAllModulesAction.java)/**
 * The delegate for the "Collapse All" action of the Modules view.
 */
ConfigureColumnsAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/ConfigureColumnsAction.java)/**
 * Configures visible columns in an asynch tree viewer/
 *
 * @since 5.0
 */
ExpressionDialog (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/ExpressionDialog.java)/**
 * The "Add Expression" dialog.
 */
IMoveToLineTarget (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/IMoveToLineTarget.java)/**
 * An adapter for a "move to line" operation.
 */
IResumeAtLineTarget (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/IResumeAtLineTarget.java)/**
 * An adapter for a "resume at line" operation.
 */
LoadModuleSymbolsActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/LoadModuleSymbolsActionDelegate.java)/**
 * The delegate of the "Load Symbols" action contribution to the "ICModule" objects.
 */
ModulesPropertiesActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/ModulesPropertiesActionDelegate.java)/**
 * Module Properties action delegate.
 */
MoveToLineActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/MoveToLineActionDelegate.java)/**
 * A move to line action that can be contributed to a an editor. The action
 * will perform the "move to line" operation for editors that provide
 * an appropriate <code>IMoveToLineTarget</code> adapter.
 */
MoveToLineAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/MoveToLineAdapter.java)/**
 * Move to line target adapter for the CDI and DSF-GDB debuggers
 */
OpenNewViewAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/OpenNewViewAction.java)/**
 * Opens a new view of a configured type.
 */
OpenNewViewActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/OpenNewViewActionDelegate.java)/**
 * Opens a new view of the same type.
 */
PinDebugContextActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/PinDebugContextActionDelegate.java)/**
 * Pin the selected debug context for the view.
 */
RegisterGroupDialog (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/RegisterGroupDialog.java)/**
 * This dialog is used to add/edit user-defined register groups.
 */
RestoreDefaultTypeActionHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/RestoreDefaultTypeActionHandler.java)/**
 * The delegate of the "Restore Default Type" action.
 */
ResumeAtLineActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/ResumeAtLineActionDelegate.java)/**
 * A resume at line action that can be contributed to a an editor. The action
 * will perform the "resume at line" operation for editors that provide
 * an appropriate <code>IResumeAtLineTarget</code> adapter.
 */
ResumeAtLineAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/ResumeAtLineAdapter.java)/**
 * Resume at line target adapter for the CDI and DSF-GDB debuggers
 */
RetargetAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/RetargetAction.java)/**
 * Global retargettable debug action.
 */
RetargetMoveToLineAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/RetargetMoveToLineAction.java)/**
 * Global retargettable move to line action.
 */
RetargetResumeAtLineAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/RetargetResumeAtLineAction.java)/**
 * Global retargettable resume at line action.
 */
RetargettableActionAdapterFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/RetargettableActionAdapterFactory.java)/**
 * Creates adapters for retargettable actions in debug platform.
 * Contributed via <code>org.eclipse.core.runtime.adapters</code>
 * extension point.
 */
RunToLineAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/RunToLineAdapter.java)/**
 * Run to line target adapter for the CDI debugger
 */
ShowFullPathsAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/ShowFullPathsAction.java)/**
 * An action delegate that toggles the state of its viewer to show/hide full
 * paths. Note that we are not a filtering action (thus we unconditionally
 * return true in {@link #select(Viewer, Object, Object)}), but we extend
 * ViewFilterAction to get some basic, useful action behavior.
 */
SignalActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/SignalActionDelegate.java)/**
 * The delegate of the "Resume With Signal" action.
 */
SignalPropertiesActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/SignalPropertiesActionDelegate.java)/**
 * Signal Properties action delegate.
 */
ToggleInstructionStepModeActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/ToggleInstructionStepModeActionDelegate.java)/**
 * Turns instruction step mode on/off for selected target.
 */
ViewFilterAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/actions/ViewFilterAction.java)/**
 * A base class for the CDT filtering actions added to views. We disable the action if
 * the view has no CDT content.
 */
BreakpointComboFieldEditor (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/BreakpointComboFieldEditor.java)/**
 * Extends combo field editor to load combo values from {@extensionPoint org.eclipse.cdt.debug.ui.breakpointContribution} extension
 */
BreakpointImageProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/BreakpointImageProvider.java)/**
 * Provides breakpoint's image information.
 */
CBreakpointContext (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointContext.java)/**
 * Input for breakpoint properties dialog.  It captures both the
 * selected breakpoint object as well as the selected debug context.
 * This combined context can then be used by breakpoint property
 * pages to access model and target specific breakpoint settings.
 */
CBreakpointContextActionFilter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointContext.java)/**
 * Action filter for the breakpoint context, which allows property
 * pages to filter their activation based on the debug model ID of
 * the active debug context.
 */
CBreakpointContextAdapterFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointContext.java)/**
 * Adapter factory which returns the breakpoint object and the action
 * filter for the CBreakpointContext type.
 */
CBreakpointPreferenceStore (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointPreferenceStore.java)/**
 * A preference store that presents the state of the properties of a C/C++ breakpoint,
 * tracepoint or dynamic-printf.
 */
CBreakpointPropertyPage (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointPropertyPage.java)/**
 * The preference page used to present the properties of a breakpoint as preferences. A CBreakpointPreferenceStore is used to interface between this page and
 * the breakpoint.
 */
CBreakpointUpdater (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointUpdater.java)/**
 * Provides UI-related handles for the breakpoint events.
 */
CBreakpointWorkbenchAdapterFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointWorkbenchAdapterFactory.java)/**
 * Adapter factory for C/C++ breakpoints.
 */
CreateBreakpointTester (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CreateBreakpointTester.java)/**
 *
 */
ToggleCBreakpointTester (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/ToggleCBreakpointTester.java)/**
 * Toggle breakpoint factor enablement tester for editors and IDeclaration.
 *
 * @since 7.1
 */
CDebuggerPageAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebuggerPageAdapter.java)/**
 * Migration from <code>AbstractLaunchConfigurationTab</code> to <code>ICDebuggerPage</code>.
 *
 * @since 3.1
 */
CDebugImageDescriptorRegistry (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugImageDescriptorRegistry.java)/**
 * A registry that maps <code>ImageDescriptors</code> to <code>Image</code>.
 */
CDebugImages (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugImages.java)/**
 * Bundle of most images used by the C/C++ debug plug-in.
 *
 * @since Aug 30, 2002
 */
CDebugModelPresentation (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugModelPresentation.java)/**
 * @see IDebugModelPresentation
 */
CDebugUIPreferenceInitializer (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugUIPreferenceInitializer.java)/**
 * Default preference value initializer for <code>CDebugUIplugin</code>.
 */
CDebugUIUtils (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugUIUtils.java)/**
 * Utility methods for C/C++ Debug UI.
 */
ColorManager (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/ColorManager.java)/**
 * Color manager for C/C++ Debug UI.
 *
 * @since Jul 23, 2002
 */
ConnectCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/ConnectCommandHandler.java)/**
 * Command handler to trigger a connect operation
 *
 * @since 7.3
 */
GroupDebugContextsCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/GroupDebugContextsCommandHandler.java)/**
 * Command handler to trigger grouping of debug contexts operation.
 *
 * @since 7.1
 */
ResumeWithoutSignalCommand (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/ResumeWithoutSignalCommand.java)/**
 * The handler for the "Resume Without Signal" command.
 *
 * @since 7.0
 */
ResumeWithoutSignalCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/ResumeWithoutSignalCommandHandler.java)/**
 * Command handler to trigger a resume without signal operation
 *
 * @since 7.0
 */
ReverseResumeCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/ReverseResumeCommandHandler.java)/**
 * Command handler to trigger a reverse resume operation
 *
 * @since 7.0
 */
ReverseStepIntoCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/ReverseStepIntoCommandHandler.java)/**
 * Command handler to trigger a reverse stepinto operation
 *
 * @since 7.0
 */
ReverseStepOverCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/ReverseStepOverCommandHandler.java)/**
 * Command handler to trigger a reverse stepover operation
 *
 * @since 7.0
 */
ReverseToggleCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/ReverseToggleCommandHandler.java)/**
 * Command handler to toggle reverse debugging mode
 *
 * @since 7.0
 */
SaveTraceDataCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/SaveTraceDataCommandHandler.java)/**
 * Command handler to save the trace data to a file
 *
 * @since 7.0
 */
StartTracingCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/StartTracingCommandHandler.java)/**
 * Command handler to request the start of tracing
 *
 * @since 7.0
 */
StopTracingCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/StopTracingCommandHandler.java)/**
 * Command handler to request the stop of tracing
 *
 * @since 7.0
 */
UncallCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/UncallCommandHandler.java)/**
 * Command handler to trigger an uncall operation
 *
 * @since 7.0
 */
UngroupDebugContextsCommandHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/commands/UngroupDebugContextsCommandHandler.java)/**
 * Command handler to trigger ungrouping of debug contexts operation.
 *
 * @since 7.1
 */
CValueDetailProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CValueDetailProvider.java)/**
 * Computes a detailed description of the given value.
 */
DetailsViewerConfiguration (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/DetailsViewerConfiguration.java)/**
 * The source viewer configuration used in the Details pane of the variables,
 * registers and expressions views.
 */
CheckedListDialogField (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/CheckedListDialogField.java)/**
 * A list with checkboxes and a button bar. Typical buttons are 'Check All' and 'Uncheck All'.
 * List model is independend of widget creation.
 * DialogFields controls are: Label, List and Composite containing buttons.
 */
ComboDialogField (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/ComboDialogField.java)/**
 * Dialog field containing a label and a combo control.
 */
DialogField (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/DialogField.java)/**
 * Base class of all dialog fields.
 * Dialog fields manage controls together with the model, independed
 * from the creation time of the widgets.
 * - support for automated layouting.
 * - enable / disable, set focus a concept of the base class.
 *
 * DialogField have a label.
 */
IDialogFieldListener (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/IDialogFieldListener.java)/**
 * Change listener used by <code>DialogField</code>
 */
IListAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/IListAdapter.java)/**
 * Change listener used by <code>ListDialogField</code> and <code>CheckedListDialogField</code>
 */
IStringButtonAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/IStringButtonAdapter.java)/**
 * Change listener used by <code>StringButtonDialogField</code>
 */
ListDialogField (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/ListDialogField.java)/**
 * A list with a button bar.
 * Typical buttons are 'Add', 'Remove', 'Up' and 'Down'.
 * List model is independend of widget creation.
 * DialogFields controls are: Label, List and Composite containing buttons.
 */
SelectionButtonDialogField (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/SelectionButtonDialogField.java)/**
 * Dialog Field containing a single button: e.g. radio or checkbox button.
 */
SelectionButtonDialogFieldGroup (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/SelectionButtonDialogFieldGroup.java)/**
 * Dialog field describing a group with buttons (Checkboxes, radio buttons..)
 */
Separator (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/Separator.java)/**
 * Dialog field describing a separator.
 */
StringButtonDialogField (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/StringButtonDialogField.java)/**
 * Dialog field containing a label, text control and a button control.
 */
StringButtonStatusDialogField (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/StringButtonStatusDialogField.java)/**
 * Dialog field containing a label, text control, status label and a button control.
 * The status label can be either a image or text label, and can be usd to give
 * additional information about the current element chosen.
 */
StringDialogField (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogfields/StringDialogField.java)/**
 * Dialog field containing a label and a text control.
 */
AddEventBreakpointDialog (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/dialogs/AddEventBreakpointDialog.java)/**
 * The "Add Catchpoint" dialog of the "Add catchpoint" action.
 */
OpenDisassemblyHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/commands/OpenDisassemblyHandler.java)/**
 * org.eclipse.cdt.debug.internal.ui.disassembly.commands.OpenDisassemblyHandler:
 * //TODO Add description.
 */
SetSteppingModeHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/commands/SetSteppingModeHandler.java)/**
 * org.eclipse.cdt.debug.internal.ui.disassembly.commands.SetSteppingModeHandler:
 * //TODO Add description.
 */
AddressRangePosition (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/AddressRangePosition.java)/**
 * AddressRangePosition
 */
DisassemblyPosition (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/DisassemblyPosition.java)/**
 * DisassemblyPosition
 */
DisassemblyUtils (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/DisassemblyUtils.java)/**
 * Some general utilities used by the DSF Disassembly view and its backends
 */
ErrorPosition (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/ErrorPosition.java)/**
 * ErrorPosition
 */
SetDebugContextResult (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/IDisassemblyBackend.java)/**
	 * Used to return muliple results from
	 * {@link IDisassemblyBackend#setDebugContext(IAdaptable)}
	 */
IDisassemblyBackend (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/IDisassemblyBackend.java)/**
 * This is the main interface that connects the DSF Disassembly view to CDI and
 * DSF backends. This interface is obtained through IAdaptable. A new instance
 * is provided every time the adapter is requested. The caller must invoke
 * {@link #dispose()} when it has no further use for the instance.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 *              Clients should extend {@link AbstractDisassemblyBackend}.
 */
IDisassemblyDocument (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/IDisassemblyDocument.java)/**
 * DSF Disassembly view backends (CDI and DSF) need this limited access to the
 * editor/view Document.
 */
IDisassemblyPartCallback (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/IDisassemblyPartCallback.java)/**
 * Implementations of {@link IDisassemblyBackend} are given this access back
 * into the part (editor/view) that created them. Except where noted, methods
 * must be invoked on the GUI thread. A disassembly backend has to call back
 * into the editor/view to carry out its duties.
 *
 * <p>
 * This interface was born of the refactoring which allowed the DSF Disassembly
 * view to work with both DSF and CDI. Before that, the functionality of
 * IDisasssemblyBackend was built into DisassemblyPart and thus there was no
 * need for this interface. This interface merely exposes model (DSF/CDI)
 * agnostic access to DisassemblyPart. It exposes methods that have been in
 * DisassemblyPart all along. Documentation for those methods were sparse, and
 * thus this interface is likewise. See the DisassemblyPart for any available
 * documentation.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IDisassemblyRetrieval (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/IDisassemblyRetrieval.java)/**
 */
LabelPosition (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/dsf/LabelPosition.java)/**
 * LabelPosition
 */
DisassemblyEditorPresentation (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/editor/DisassemblyEditorPresentation.java)/**
 * org.eclipse.cdt.debug.internal.ui.disassembly.viewer.DisassemblyEditorPresentation:
 */
DisassemblyDocumentProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/viewer/DisassemblyDocumentProvider.java)/**
 * org.eclipse.cdt.debug.internal.ui.disassembly.viewer.DisassemblyDocumentProvider:
 * //TODO Add description.
 */
DocumentAnnotationProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/viewer/DocumentAnnotationProvider.java)/**
 * org.eclipse.cdt.debug.internal.ui.disassembly.viewer.DocumentAnnotationProvider:
 * //TODO Add description.
 */
DocumentAnnotationUpdate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/viewer/DocumentAnnotationUpdate.java)/**
 * org.eclipse.cdt.debug.internal.ui.disassembly.viewer.DocumentAnnotationUpdate:
 * //TODO Add description.
 */
DocumentContentProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/viewer/DocumentContentProvider.java)/**
 * Manages the mapping between the viewer model and the underlying debug model
 * through the content, label and annotation adapters.
 * Maintains the list of model proxies and reacts to the debug model changes.
 */
VirtualDocument (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/viewer/VirtualDocument.java)/**
 * Converts the model elements into the text content
 */
VirtualSourceViewer (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/disassembly/viewer/VirtualSourceViewer.java)/**
 * Notifies the associated document when the viewer is refreshed, scrolled or resized.
 */
DebugTextHoverAdapterFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/editors/DebugTextHoverAdapterFactory.java)/**
 * Adapter factory adapting an {@link ICStackFrame} to an {@link ICEditorTextHover}.
 *
 * @since 7.0
 */
DelegatingDebugTextHover (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/editors/DelegatingDebugTextHover.java)/**
 * Common debug text hover delegating to debugger specific implementations
 * based on active debug context.
 *
 * @since 7.0
 */
CMemoryAdapterFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/elements/adapters/CMemoryAdapterFactory.java)/**
 * Provides the IAdaptable mapping for things related to the memory-space
 * support in the Memory and Memory Browser views.
 */
ErrorStatusHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/ErrorStatusHandler.java)/**
 * Displays the error dialog.
 */
HTMLPrinter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/HTMLPrinter.java)/**
 * Provides a set of convenience methods for creating HTML pages.
 */
ICDebugHelpContextIds (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/ICDebugHelpContextIds.java)/**
 * Help context ids for the C/C++ debug ui.
 * <p>
 * This interface contains constants only; it is not intended to be implemented
 * or extended.
 * </p>
 *
 * @since Jul 23, 2002
 */
InfoStatusHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/InfoStatusHandler.java)/**
 * Displays the information dialog.
 */
CPropertyTester (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/launch/CPropertyTester.java)/**
 * A property tester that determines if a file is an executable or a C/C++ project.
 */
InvalidLaunchableAdapterFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/launch/InvalidLaunchableAdapterFactory.java)/**
 * This is an invalid Adapter factory which insures that there  are no false
 * usages of this class when defining ILaunchable contexts. Please reference
 * the ILaunchable interface and Bugzilla : 396822.
 */
PlaceHolderLaunchConfigurationTabGroup (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/launch/PlaceHolderLaunchConfigurationTabGroup.java)/**
 * This implementation is used where the composition of the tab group is defined
 * via the launchConfigurationTabGroups extension-point. Thus we just provide an
 * empty array of tab objects. The platform will add the ones declared in the
 * extension.
 *
 * @since 6.0
 */
OverlayImageCache (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/OverlayImageCache.java)/**
 * Maintains a cache of overlay images.
 *
 * @since May 30, 2003
 */
DebugContextPinProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/pinclone/DebugContextPinProvider.java)/**
 * Pin debug context provider.
 * It takes a debug context and translates it to a handle for pinning purpose.
 */
DebugEventFilter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/pinclone/DebugEventFilterService.java)/**
	 * A debug context event listen that provides filter support
	 * for the pinned debug context.
	 */
DebugEventFilterService (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/pinclone/DebugEventFilterService.java)/**
 * This class provides debug event filtering service for the pin-able views.
 */
DefaultPinElementColorDescriptor (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/pinclone/PinCloneUtils.java)/**
	 * Default pin element color descriptor.
	 */
PinCloneUtils (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/pinclone/PinCloneUtils.java)/**
 * A utility class for pin and clone support.
 */
ViewIDCounterManager (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/pinclone/ViewIDCounterManager.java)/**
 * This class provides counter id for view that support multiple instances.
 * It is assumed that view will use the counter id for it's secondary id.
 */
CDebugPreferencePage (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/preferences/CDebugPreferencePage.java)/**
 * Preference page for debug preferences that apply specifically to C/C++
 * Debugging.
 */
ComboFieldEditor (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/preferences/ComboFieldEditor.java)/**
 * A field editor for a combo box that allows the drop-down selection of one of a list of items.
 */
ICDebugPreferenceConstants (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/preferences/ICDebugPreferenceConstants.java)/**
 * Constants defining the keys to be used for accessing preferences inside the debug ui plugin's preference bundle.
 * In descriptions (of the keys) below describe the preference stored at the given key.
 * The type indicates type of the stored preferences
 * The preference store is loaded by the plugin (CDebugUIPlugin).
 * @see CDebugUIPlugin.initializeDefaultPreferences(IPreferenceStore) - for initialization of the store
 */
SourcePreferencePage (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/preferences/SourcePreferencePage.java)/**
 * The "Source Lookup Path" preference page.
 */
ModuleProperties (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/propertypages/ModuleProperties.java)/**
 * A module's properties store.
 */
ModulePropertyPage (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/propertypages/ModulePropertyPage.java)/**
 * The property page for a module.
 */
SignalPropertyPage (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/propertypages/SignalPropertyPage.java)/**
 * The property page for a signal.
 */
QuestionStatusHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/QuestionStatusHandler.java)/**
 * Displays the confirmation dialog.
 */
AbsolutePathSourceContainerBrowser (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/AbsolutePathSourceContainerBrowser.java)/**
 * Adds a absolute path to the source lookup path.
 */
AddContainerAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/AddContainerAction.java)/**
 * The action to add a new source container.
 * Used by the CommonSourceNotFoundEditor, the launch configuration source tab,
 * and the EditSourceLookupPathDialog.
 */
AddSourceContainerDialog (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/AddSourceContainerDialog.java)/**
 * The dialog for adding new source containers. Presents the user with a list of
 * source container types and allows them to select one.
 *
 * @since 3.0
 */
CompilationDirectorySourceContainerBrowser (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/CompilationDirectorySourceContainerBrowser.java)/**
 * The browser for adding a compilation directory source container.
 */
CompilationDirectorySourceContainerDialog (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/CompilationDirectorySourceContainerDialog.java)/**
 * The dialog for selecting the external folder for which a compilation directory source container
 * will be created.
 */
CProjectSourceContainerBrowser (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/CProjectSourceContainerBrowser.java)/**
 * The browser for adding a source folder relative path source container.
 */
EditorControls (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/CSourceNotFoundEditor.java)/**
	 * Encapsulate all the controls used within this class.
	 */
CSourceNotFoundEditor (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/CSourceNotFoundEditor.java)/**
 * Editor that lets you select a replacement for the missing source file and
 * modifies the source locator accordingly.
 */
DownAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/DownAction.java)/**
 * The action for sorting the order of source containers in the dialog.
 */
EditContainerAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/EditContainerAction.java)/**
 * Action used to edit source containers on a source lookup path
 */
ProgramRelativePathSourceContainerBrowser (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/ProgramRelativePathSourceContainerBrowser.java)/**
 * Adds a program-relative path to the source lookup path.
 */
RemoveAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/RemoveAction.java)/**
 * The action used to remove source containers in the source location dialog/tab.
 */
SourceContainerAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/SourceContainerAction.java)/**
 * The abstract class for all source lookup actions.
 */
SourceContainerAdapterFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/SourceContainerAdapterFactory.java)/**
 * Adapter factory for CDT source containers.
 */
SourceContainerLabelProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/SourceContainerLabelProvider.java)/**
 * Label provider for source containers and source container types.
 */
SourceContainerViewer (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/SourceContainerViewer.java)/**
 * The viewer containing the source containers.
 * It is a tree viewer since the containers are represented in tree form.
 */
SourceContainerWorkbenchAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/SourceContainerWorkbenchAdapter.java)/**
 * Workbench adapter for CDT source containers.
 */
SourceFoldersRelativePathSourceContainerBrowser (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/SourceFoldersRelativePathSourceContainerBrowser.java)/**
 * The browser for adding a source folder relative path source container.
 */
TargetProjectSourceContainerDialog (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/TargetProjectSourceContainerDialog.java)/**
 * The dialog for configuring a source container for a project associated with the launch target.
 */
UpAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/UpAction.java)/**
 * The action used to move source containers up in the list
 */
SubstitutionTextReader (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/SubstitutionTextReader.java)/**
 * Reads the text contents from a reader and computes for each character
 * a potential substitution. The substitution may eat more characters than
 * only the one passed into the computation routine.
 */
SWTUtil (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/SWTUtil.java)/**
 * Utility class to simplify access to some SWT resources.
 */
AbstractDebugEventHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/AbstractDebugEventHandler.java)/**
 * Handles debug events, updating a view and viewer.
 */
AbstractDebugEventHandlerView (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/AbstractDebugEventHandlerView.java)/**
 * A debug view that uses an event handler to update its
 * view/viewer.
 */
DebuggerConsoleDropDownAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/debuggerconsole/DebuggerConsoleDropDownAction.java)/**
 * Drop down action in the DebuggerConsoleView to select which console to display.
 */
DebuggerConsoleManager (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/debuggerconsole/DebuggerConsoleManager.java)/**
 * A singleton Debugger Console manager which handles keeping track of all
 * active debugger consoles.
 */
DebuggerConsoleView (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/debuggerconsole/DebuggerConsoleView.java)/**
 * The Debugger console view shows different {@link IDebuggerConsole}.
 *
 * This class extends {@link IConsoleView} to allow it to easily display
 * consoles of type {@link IOConsole}.
 *
 * @see {@link IDebuggerConsoleManager}
 */
DebuggerConsoleWorkbenchPart (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/debuggerconsole/DebuggerConsoleWorkbenchPart.java)/**
 * Fake part to use as keys in page book for debugger console pages
 */
DebuggerShowConsoleAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/debuggerconsole/DebuggerShowConsoleAction.java)/**
 * Shows a specific console in the DebuggerConsoleView
 */
BaseViewer (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/BaseViewer.java)/**
 * Base viewer used by both the executables viewers and the source files viewer.
 */
ConfigureColumnsAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesView.java)/**
	 * Configures the list of columns show in the view.
	 */
ExecutablesView (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesView.java)/**
 * ExecutablesView displays a list of executable files either in the workspace
 * or created by projects in the workspace. The list of executables comes from
 * the ExecutablesManager. This view has two subviews: one that shows the list
 * of executables and another that shows the list of source files in the
 * selected executable.
 *
 */
ExecutablesDropAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesViewer.java)/**
	 * Handles dropping executable files into the view
	 */
ExecutablesViewer (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesViewer.java)/**
 * Displays the list of executables gathered by the ExecutablesManager
 */
TUData (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesContentProvider.java)/** those executables for which we asked the question and got a result.
	 * NOTE: this contains a duplicate of into in Executable, because we can't
	 * guarantee or check whether Executable still has the info itself. */
TranslationUnitInfo (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesViewer.java)/** Information from an ITranslationUnit for the various displayed columns */
SourceFilesViewer (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesViewer.java)/**
 * Displays the list of source files for the executable selected in the
 * ExecutablesViewer.
 */
IDebugExceptionHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/IDebugExceptionHandler.java)/**
 * A plugable  exception handler.
 */
AddMemoryBlockDialog (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/memory/AddMemoryBlockDialog.java)/**
 * Dialog CDT puts up when adding a memory monitor to the memory view for a
 * debug target that supports memory spaces.
 * <p>
 * It differs from the platform one in that you can enter an expression or
 * an address + memory space pair.
 *
 * @since 3.2
 */
GetMemorySpacesRequest (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/memory/AddMemoryBlocks.java)/** Request object used to get the memory spaces */
AddMemoryBlocks (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/memory/AddMemoryBlocks.java)/**
 * Adds memory blocks to the Memory view.
 *
 * <p>
 * CDT adapter logic will link us to a CMemoryBlockRetrievalExtension
 * if and only if the CDI backend support memory spaces. When this is the case,
 * the platform will call us to add a memory monitor to the Memory view. We
 * must put up a dialog, handle the user input, create the memory blocks
 * with default renderings and add them to the view.
 *
 * <p>
 * @since 3.2
 *
 */
DetailJob (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModuleDetailPane.java)/**
	 * Job to compute the details for a selection
	 */
FindReplaceTargetWrapper (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModuleDetailPane.java)/**
	 * Wrapper class that wraps around an IFindReplaceTarget.  Allows the detail pane to scroll
	 * to text selected by the find/replace action.  The source viewer treats the text as a single
	 * line, even when the text is wrapped onto several lines so the viewer will not scroll properly
	 * on it's own.  See bug 178106.
	 */
ModuleDetailPane (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModuleDetailPane.java)/**
 *
 */
ModuleDetailPaneFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModuleDetailPaneFactory.java)/**
 * Modules view detail pane factory.
 */
ModuleLabelProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModuleLabelProvider.java)/**
 * org.eclipse.cdt.debug.internal.ui.views.modules.CElementLabelProvider:
 * //TODO Add description.
 */
ModulesMessages (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModulesMessages.java)/**
 * Comment for .
 */
ModulesViewEventHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModulesViewEventHandler.java)/**
 * Comment for .
 */
ModulesViewModelProxy (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModulesViewModelProxy.java)/**
 * Default update for modules view.
 */
FlexibleSignalsView (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/signals/FlexibleSignalsView.java)/**
 * A Signals view based on flexible hierarchy.
 */
FlexibleSignalsViewEventHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/signals/FlexibleSignalsViewEventHandler.java)/**
 */
SignalLabelProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/signals/SignalLabelProvider.java)/**
 * Label provider for <code>ICSignal</code>s.
 */
SignalsViewColumnPresentation (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/signals/SignalsViewColumnPresentation.java)/**
 * Signals view column presentation.
 */
SignalsViewer (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/signals/SignalsViewer.java)/**
 * Signals viewer.
 *
 * @since: Mar 8, 2004
 */
SignalsViewEventHandler (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/signals/SignalsViewEventHandler.java)/**
 * Updates the signals view.
 *
 * @since: Mar 8, 2004
 */
SignalsViewModelProxy (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/signals/SignalsViewModelProxy.java)/**
 * Default update for Signals view.
 */
AbstractCDebuggerPage (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/AbstractCDebuggerPage.java)/**
 * Common function for debugger pages.
 * @since 3.1
 */
CLICommandAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpointactions/CLICommandAction.java)/**
 * This breakpoint action allows to pass arbitrary command line command to debugger backend.
 * For example in case of gdb it would be something like
 *   p myGlobal
 *   cont
 * @since 8.0
 */
CLICommandActionComposite (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpointactions/CLICommandActionComposite.java)/**
 * This composite show a little text field (multi-line) that allow to enter to enter debugger commands.
 * Interpretation of that depends on the backend
 *
 * @since 8.0
 */
CLICommandActionPage (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpointactions/CLICommandActionPage.java)/**
 * @since 8.0
 */
LaunchConfigurationTypeContribution (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpointactions/ExternalToolActionComposite.java)/**
	 * A plug-in contribution (UI element) which contains a launch configuration
	 * type (Core element). Plug-in contributions are passed to the workbench
	 * activity support to filter elements from the UI.
	 */
PreferenceConstants (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpointactions/PreferenceConstants.java)/**
 * Constant definitions for plug-in preferences
 */
PreferenceInitializer (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpointactions/PreferenceInitializer.java)/**
 * Class used to initialize default preference values.
 */
ReverseDebugAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpointactions/ReverseDebugAction.java)/**
 * Implements the reverse debug breakpoint action
 *
 *@since 7.3
 */
ReverseDebugActionComposite (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpointactions/ReverseDebugActionComposite.java)/**
 * @since 7.3
 */
ReverseDebugActionPage (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpointactions/ReverseDebugActionPage.java)/**
 *@since 7.3
 */
AbstractToggleBreakpointAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/AbstractToggleBreakpointAdapter.java)/**
 * Base class for toggle adapter to create/remove CDT breakpoints.  Clients may
 * extend this class to gather additional data prior to creating the breakpoints.
 *
 * @since 7.2
 */
AddWatchpointActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/AddWatchpointActionDelegate.java)/**
 * A delegate for the "Add Watchpoint" action.  Clients can register this object on
 * a model-specific element which supports a toggle breakpoints target.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 7.2
 */
AddWatchpointOnVariableActionDelegate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/AddWatchpointOnVariableActionDelegate.java)/**
 * Invoked when user right clicks on an element in the Variables or Expressions
 * view and selects 'Add Watchpoint (C/C++)'  Clients can register this action for
 * their specific element type which adapts to {@link ICWatchpointTarget}.
 *
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @since 7.2
 */
CBreakpointPropertyDialogAction (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/CBreakpointPropertyDialogAction.java)/**
 * Action for opening a Property Pages Dialog on the C breakpoint object
 * in the currently selected element.
 * <p>
 * Generally speaking, this action is useful in pop-up menus because it allows
 * the user to browse and change properties of selected elements. When
 * performed, the action will bring up a Property Pages Dialog containing
 * property pages registered with the workbench for elements of the selected
 * type.
 * </p>
 * <p>
 * Although the action is capable of calculating if there are any applicable
 * pages for the current selection, this calculation is costly because it
 * require searching the workbench registry. Where performance is critical, the
 * action can simply be added to the pop-up menu. In the event of no applicable
 * pages, the action will just open an appropriate message dialog.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 * @since 7.2
 */
CEventBreakpointsLabelProviderFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/CEventBreakpointsLabelProviderFactory.java)/**
 * Factory for event breakpoint label provider
 */
ICBreakpointContext (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/ICBreakpointContext.java)/**
 * Input for the breakpoint properties dialog.  It captures both the
 * selected breakpoint object as well as the selected debug context.
 * This combined context can then be used by breakpoint property
 * pages to access model and target specific breakpoint settings.
 *
 * @since 7.2
 */
ICBreakpointsUIContribution (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/ICBreakpointsUIContribution.java)/**
 * Interface representing a contributed UI element for breakpoint properties
 * dialogs.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ICBreakpointsUIContributionUser (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/ICBreakpointsUIContributionUser.java)/**
 * This interface can be implemented by FieldEditors used in {@extensionPoint org.eclipse.cdt.debug.ui.breakpointContribution} extension.
 * This allow to connect field back to parent that creates it {@link ICBreakpointsUIContribution}
*/
IFieldEditorFactory (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/IFieldEditorFactory.java)/**
 * Factory for creating field editors contributed through the <code>
 * org.eclipse.cdt.debug.ui.breakpointContribution</code> extension point.
 * <p>
 * Field editors do not have a non-arg constructor, therefore custom editors
 * cannot be created directly by the extension point directly.  This factory
 * allows clients to instantiate a custom field editor which is not on the class
 * path of the CDT debug UI plugin.
 * </p>
 * @since 7.2
 */
IToggleBreakpointsTargetCExtension (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/IToggleBreakpointsTargetCExtension.java)/**
 * Second extension interface for {@link org.eclipse.debug.ui.actions.IToggleBreakpointsTarget}.
 * This interface provides the ability open edit a breakpoint's properties and
 * to create a breakpoint in the given context with additional user input
 * (such as using a dialog or a wizard).
 * <p>
 * Clients implementing <code>IToggleBreakpointsTarget</code> may optionally
 * implement this interface.
 * </p>
 * @since 7.2
 * @see org.eclipse.debug.ui.actions.ToggleBreakpointAction
 */
CDebugUIPlugin (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/CDebugUIPlugin.java)/**
 * The main plugin class to be used in the desktop.
 */
IDebuggerConsole (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/debuggerconsole/IDebuggerConsole.java)/**
 * @since 8.1
 */
IDebuggerConsoleManager (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/debuggerconsole/IDebuggerConsoleManager.java)/**
 * @since 8.1
 */
IDebuggerConsoleView (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/debuggerconsole/IDebuggerConsoleView.java)/**
 * @since 8.1
 */
IDocumentBaseChangeUpdate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IDocumentBaseChangeUpdate.java)/**
 * Request to provide a base element for the given element and presentation context.
 * <p>
 * Clients are not intended to implement this interface.
 * </p>
 *
 * This interface is experimental
 */
IDocumentElementAnnotationProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IDocumentElementAnnotationProvider.java)/**
 * Provides context sensitive annotations for source elements.
 *
 * This interface is experimental.
 */
IDocumentElementAnnotationUpdate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IDocumentElementAnnotationUpdate.java)/**
 * Request to provide annotations for the given element and presentation context.
 * <p>
 * Clients are not intended to implement this interface.
 * </p>
 *
 * This interface is experimental
 */
IDocumentElementContentProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IDocumentElementContentProvider.java)/**
 * Provides a content for a virtual source viewer.
 *
 * This interface is experimental.
 */
IDocumentElementContentUpdate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IDocumentElementContentUpdate.java)/**
 * A content update request for a source viewer.
 * <p>
 * Clients are not intended to implement this interface.
 * </p>
 *
 * This interface is experimental.
 */
IDocumentElementLabelProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IDocumentElementLabelProvider.java)/**
 * Provides context sensitive labels for source elements.
 *
 * This interface is experimental.
 */
IDocumentElementLabelUpdate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IDocumentElementLabelUpdate.java)/**
 * A label update request for a source viewer element.
 * <p>
 * Clients are not intended to implement this interface.
 * </p>
 *
 *  This interface is experimental.
 */
IDocumentPresentation (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IDocumentPresentation.java)/**
 * Virtual document specific presentation context.
 * <p>
 * Clients may implement and extend this interface to provide
 * special contexts. Implementations must subclass {@link PresentationContext}.
 * </p>
 *
 * This interface is experimental.
 */
IDocumentUpdate (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IDocumentUpdate.java)/**
 * A context sensitive document update request.
 * <p>
 * Clients are not intended to implement this interface.
 * </p>
 *
 * Use the element path instead of this interface?
 *
 * This interface is experimental
 */
IElementToggleBreakpointAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/IElementToggleBreakpointAdapter.java)/**
 * An adapter to support breakpoint creation/deletion for the disassembly editor.
 *
 * This interface is experimental.
 */
AbstractContributedRulerColumn (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/rulers/AbstractContributedRulerColumn.java)/**
 * Helper class for contributions to the
 * <code>org.eclipse.cdt.debug.ui.disassemblyRulerColumns</code> extension point.
 * <p>
 * Subclasses must have a zero-argument constructor so that they can be created by
 * {@link IConfigurationElement#createExecutableExtension(String)}.</p>
 *
 * @since 7.2
 */
IColumnSupport (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/rulers/IColumnSupport.java)/**
 * Provides support to modify and query the visibility of
 * ruler columns and test whether a ruler column is supported.
 * <p>
 * This interface must not be implemented by clients.
 * </p>
 *
 * @since 7.2
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IContributedRulerColumn (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/rulers/IContributedRulerColumn.java)/**
 * Interface that has to be implemented by contributions to the
 * <code>org.eclipse.cdt.debug.ui.disassembly.rulerColumns</code> extension point.
 * <p>
 * Implementors must have a zero-argument constructor so that they can be created
 * by {@link IConfigurationElement#createExecutableExtension(String)}.</p>
 *
 * @since 7.2
 */
RulerColumnDescriptor (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/rulers/RulerColumnDescriptor.java)/**
 * The description of an extension to the
 * <code>org.eclipse.ui.workbench.texteditor.rulerColumns</code> extension point. Instances are
 * immutable. Instances can be obtained from a {@link RulerColumnRegistry}.
 *
 * @since 7.2
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
RulerColumnPreferenceAdapter (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/rulers/RulerColumnPreferenceAdapter.java)/**
 * Manages the preferences for ruler contributions stored in a preference store.
 *
 * @since 7.2
 */
RulerColumnRegistry (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/disassembly/rulers/RulerColumnRegistry.java)/**
 * A registry for all extensions to the
 * <code>rulerColumns</code> extension point.
 *
 * @since 7.2
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ExpressionChecker (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/editors/AbstractDebugTextHover.java)/**
	 * ASTVisitor checking for side-effect expressions.
	 */
AbstractDebugTextHover (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/editors/AbstractDebugTextHover.java)/**
 * The text hovering support for C/C++ debugger.
 *
 * @since 7.0
 */
ICDebuggerPage (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/ICDebuggerPage.java)/**
 * Interface for debugger pages contributed via the "CDebuggerPage"
 * extension point.
 *
 * @since 3.1
 */
IContentChangeListener (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/ICDebuggerPageExtension.java)/**
	 * @since 7.0
	 */
ICDebuggerPageExtension (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/ICDebuggerPageExtension.java)/**
 * This interface extension allows the registration of content listeners.
 * Page implementors can use it to notify parents of changes in
 * the page content which will force the parent tab to recalculate its size.
 *
 * @since 7.0
 */
ICDebugUIConstants (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/ICDebugUIConstants.java)/**
 * Constant definitions for C/C++ Debug UI plug-in.
 */
ImportExecutableWizard (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/ImportExecutableWizard.java)/**
 * Reference implementation of a wizard that imports executables.
 * Create your own version to import specific kinds of executables
 * with product specific messages and launch configuration types.
 *
 *
 */
IPinElementColorDescriptor (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/IPinProvider.java)/**
	 * Pin element color descriptor.
	 */
IPinElementHandle (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/IPinProvider.java)/**
	 * Pin element handler interface.
	 */
IPinModelListener (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/IPinProvider.java)/**
	 * A callback interface that can be used by an IPinProvider to indicate
	 * that the model has changed for a pinned view and that the view must be
	 * refreshed.
	 *
	 * @noimplement This interface is not intended to be implemented by clients.
	 */
IPinProvider (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/IPinProvider.java)/**
 * Debug element that wants to enable pin capability should be adaptable to this interface.
 * <br><br>
 * When the user presses the 'Pin' action in a view that supports debug context pinning, the
 * DebugEventFilterService calls the <code>pin</code> method with the selected debug context.
 * If more than one debug context is selected, the <code>pin</code> method is called multiple times.
 * The <code>pin</code> method should return a handle for the pinned debug context and when
 * there is a debug context change event generated by the debug context manager,
 * <code>isPinnedTo</code> will be call by the DebugEventFilterService to determine whether the
 * debug context in question is pinned to the handle returned by the <code>pin</code> method.
 *
 *  @since 7.1
 */
PinElementHandle (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/PinElementHandle.java)/**
 * A class that encapsulates the pin element handle and implements <code>IPinHandleLableProvider</code>.
 *
 * @since 7.1
 */
ReadOnlyFieldEditor (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/preferences/ReadOnlyFieldEditor.java)/**
 * @since 7.0
 */
IRepositionableMemoryRendering2 (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/provisional/IRepositionableMemoryRendering2.java)/**
 * An extension to the platform's repositionable rendering interface.
 */
DefaultSourceLocator (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/sourcelookup/DefaultSourceLocator.java)/**
 * The replacement of the old default source locator. Used only for migration purposes.
 */
OldDefaultSourceLocator (/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/sourcelookup/OldDefaultSourceLocator.java)/**
 * Old default source locator. We keep it for migration purposes.
 */
Activator (/debug/org.eclipse.cdt.gdb/src/org/eclipse/cdt/gdb/internal/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
Activator (/debug/org.eclipse.cdt.gdb.ui/src/org/eclipse/cdt/gdb/ui/internal/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
AbstractCache (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/AbstractCache.java)/**
 * A base implementation of a general purpose cache. Sub classes must implement
 * {@link #retrieve(DataRequestMonitor)} to fetch data from the data source.
 * Sub-classes are also responsible for calling {@link #set(Object, IStatus)}
 * and {@link #reset()} to manage the state of the cache in response to events
 * from the data source.
 * <p>
 * This cache requires an executor to use. The executor is used to synchronize
 * access to the cache state and data.
 * </p>
 * @since 2.2
 */
CountingRequestMonitor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/CountingRequestMonitor.java)/**
 * A request monitor that is used for multiple activities. We are told the
 * number of activities that constitutes completion. When our {@link #done()} is
 * called that many times, the request is considered complete.
 *
 * The usage is as follows: <code><pre>
 *     final CountingRequestMonitor countingRm = new CountingRequestMonitor(fExecutor, null) {
 *         public void handleCompleted() {
 *             System.out.println("All complete, errors=" + !getStatus().isOK());
 *         }
 *     };
 *
 *     int count = 0;
 *     for (int i : elements) {
 *         service.call(i, countingRm);
 *         count++;
 *     }
 *
 *     countingRm.setDoneCount(count);
 * </pre></code>
 *
 * @since 1.0
 */
DataRequestMonitor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/DataRequestMonitor.java)/**
 * Request monitor that allows data to be returned to the request initiator.
 *
 * @param V The type of the data object that this monitor handles.
 *
 * @since 1.0
 */
DsfThreadFactory (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/DefaultDsfExecutor.java)/** Thread factory that creates the single thread to be used for this executor */
TracingWrapper (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/DefaultDsfExecutor.java)/**
	 * Wrapper for runnables/callables, is used to store tracing information
	 * <br>Note: Only used when tracing.
	 */
DsfExecutable (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/DsfExecutable.java)/**
 * Instrumented base class for
 * <ul>
 * <li>Runnable/Callable objects that are to be submitted to a DsfExecutor
 * <li>objects that have a primary execution method (resembling
 * <code>Runnable.run</code>) and that tend to be exercised from a DSF Executor
 * and/or that submit work to a DSF executor.
 * </ul>
 *
 * <p>
 * Derivative classes benefit from additional fields that can be of help when
 * debugging a DSF session. Derivatives that implement Runnable/Callable and are
 * fed to DSF executors additionally benefit from tracing (when turned on by the
 * user). A trace message is generated when the Runnable/Callable is submitted
 * to the DsfExecutor.
 *
 * <p>
 * Note that DSF executors need not be fed instances of this type. It is
 * perfectly fine for clients to call the DSF executor with a plain vanilla
 * Runnable/Callable, but such objects will obviously not benefit from the
 * instrumentation.
 *
 * <p>
 * When this base class is used to instrument a Runnable/Callable that is
 * destined for a DSF executor, no additional work is imposed on the derived
 * class. In all other cases, the subclass is responsible for calling
 * {@link #setSubmitted()} from its primary execution method (e.g.,
 * {@link RequestMonitor#done()}
 *
 * All fields and methods in this class are for tracing and debugging purposes
 * only.
 *
 * @since 1.0
 */
DsfExecutor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/DsfExecutor.java)/**
 * DSF executor service.  Implementations of this executor must ensure
 * that all runnables and callables are executed in the same thread: the
 * executor's single dispatch thread.
 * <br>Note: A DSF executor dispatch thread does not necessarily have
 * to be exclusive to the executor, it could be shared with
 * another event dispatch service, such as the SWT display dispatch thread.
 *
 * @since 1.0
 */
DsfMultiStatus (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/DsfMultiStatus.java)/**
 * Multi-status that calculates the maximum error code for all children.
 *
 * @since 2.1
 */
DsfRunnable (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/DsfRunnable.java)/**
 * A DSF-instrumented alternative to the Runnable interface.
 * <p>
 * While it is perfectly fine for clients to call the DSF executor with
 * an object only implementing the Runnable interface, the DsfRunnable
 * contains fields and methods that used for debugging and tracing when
 * tracing is enabled.
 */
ICache (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/ICache.java)/**
 * The interface for a general purpose cache that caches the result of a single
 * request.  Implementations need to provide the logic to fetch data from an
 * asynchronous data source.
 * <p>
 * This cache requires an executor to use.  The executor is used to synchronize
 * access to the cache state and data.
 * </p>
 * @since 2.2
 */
IDsfStatusConstants (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/IDsfStatusConstants.java)/**
 * Interface that hold the codes used when reporting status using the DSF
 * Request Monitor.
 * <p>
 * The error codes are ordered by severity so that clients can filter error
 * reporting using these codes.  E.g. <code>getStatus().getCode() > INVALID_HANDLE</code>
 * can be used to filter out errors resulting from expected race conditions.
 * </p>
 * @since 1.0
 */
ImmediateCountingRequestMonitor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/ImmediateCountingRequestMonitor.java)/**
 * Convenience extension of CountingRequestMonitor that uses the ImmediateExecutor.
 * The handleCompleted() method is immediately executed in same thread as done() call.
 * @since 2.3
 */
ImmediateDataRequestMonitor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/ImmediateDataRequestMonitor.java)/**
 * Convenience extension of DataRequestMonitor that uses the ImmediateExecutor.
 * The handleCompleted() method is immediately executed in same thread as done() call.
 * @since 2.3
 */
ImmediateExecutor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/ImmediateExecutor.java)/**
 * Executor that executes a runnable immediately (synchronously) when it is
 * submitted (when {@link #execute(Runnable)} is called). The runnable is
 * exercised on the submitter's thread. This executor is useful for clients that
 * need to create <code>RequestMonitor</code> objects, but which do not have
 * their own executor.
 *
 * @see RequestMonitor
 *
 * @since 1.0
 */
ImmediateInDsfExecutor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/ImmediateInDsfExecutor.java)/**
 * An executor that behaves like ImmediateExecutor when the runnable is
 * submitted from a particular executor, otherwise it forwards the runnable to
 * that executor.
 *
 * @since 2.2
 *
 */
ImmediateRequestMonitor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/ImmediateRequestMonitor.java)/**
 * Convenience extension of RequestMonitor that uses the ImmediateExecutor.
 * The handleCompleted() method is immediately executed in same thread as done() call.
 * @since 2.3
 */
MultiRequestMonitor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/MultiRequestMonitor.java)/**
 * Utility class to collect multiple request monitor results of commands
 * that are initiated simultaneously.  The usage is as follows:
 * <pre>
 *     final MultiRequestMonitor multiRequestMon = new MultiRequestMonitor(fExecutor, null) {
 *         public void handleCompleted() {
 *             System.out.println("All complete, errors=" + !getStatus().isOK());
 *         }
 *     };
 *     multiReqMon.requireDoneAdding();
 *
 *     for (int i = 0; i < 10; i++) {
 *         service.call(i, multiRequestMon.add(
 *             new RequestMonitor(fExecutor, null) {
 *                 public void handleCompleted() {
 *                     System.out.println(Integer.toString(i) + " complete");
 *                     multiRequestMon.requestMonitorDone(this);
 *                }
 *             }));
 *     }
 *
 *     multiReqMon.doneAdding();
 * </pre>
 *
 * @since 1.0
 */
Query (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/Query.java)/**
 * A convenience class that allows a client to retrieve data from services
 * synchronously from a non-dispatch thread.  This class is different from
 * a Callable<V> in that it allows the implementation code to calculate
 * the result in several dispatches, rather than requiring it to return the
 * data at end of Callable#call method.
 * <p>
 * Usage:<br/>
 * <pre>
 *     class DataQuery extends Query<Data> {
 *         protected void execute(DataRequestMonitor<Data> rm) {
 *             rm.setData(fSlowService.getData());
 *             rm.done();
 *         }
 *     }
 *
 *     DsfExecutor executor = getExecutor();
 *     DataQuery query = new DataQuery();
 *     executor.submit(query);
 *
 *     try {
 *         Data data = query.get();
 *     }
 *
 * </pre>
 * <p>
 * @see java.util.concurrent.Callable
 *
 * @since 1.0
 */
RangeTransaction (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/RangeCache.java)/**
	 * This transaction class implements the main logic of the range cache.
	 * It examines the current requests held by the cache and and creates
	 * requests ones as needed.  Once the requests are all valid it returns
	 * the completed data to the client.
	 */
RangeCache (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/RangeCache.java)/**
 * Cache for efficiently retrieving overlapping ranges of elements from an
 * asynchronous data source. The results of a range request (see
 * {@link #getRange(long, int)}) are kept around and reused in subsequent
 * requests. E.g., two individual, initial requests for 4 bytes at offsets 0 and
 * 4 will relieve a subsequent request for 4 bytes at offset 2 from having to
 * asynchronously retrieve the data from the source. The results from the first
 * two range requests are used to service the third.
 *
 * <p>
 * Clients of this cache should call {@link #getRange(long, int)} to get a cache
 * for that given range of elements. Sub-classes must implement
 * {@link #retrieve(long, int, DataRequestMonitor)} to retrieve data from the
 * asynchronous data source.
 *
 *
 *
 * @since 2.2
 */
ReflectionSequence (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/ReflectionSequence.java)/**
 * A type of {@link Sequence} which uses reflection and annotations to
 * declare its different {@link Sequence.Step}.  It can be used to make
 * larger DSF sequences more readable and easier to override.
 *
 * The order of execution of the {@code @Execute} methods is determined by
 * the {@link #getExecutionOrder()} method.
 *
 * {@code @Execute} methods can be grouped in a hierarchical set of groups,
 * which should be included in the result of {@link #getExecutionOrder()}.
 * Using groups can make overriding slightly simpler.
 *
 * A usage example follows: <code><pre>
 *    public class MyReflectionSequence extends ReflectionSequence {
 *
 *        public MyReflectionSequence(DsfExecutor executor) {
 *            super(executor);
 *        }
 *
 *        protected static final String GROUP_INIT = "GROUP_INIT";
 *
 *        {@code @Override}
 *        protected String[] getExecutionOrder(String group) {
 *           if (GROUP_TOP_LEVEL.equals(group)) {
 *               // This is the top level group which contains
 *               // all sub-groups, or steps that are not in
 *               // other groups.
 *               return new String[] { GROUP_INIT, "step3", "step4" };
 *           }
 *
 *           // Now deal with the content of sub-groups
 *           if (GROUP_INIT.equals(group)) {
 *               return new String[] { "step1", "step2" };
 *           }
 *
 *           // An invalid group was requested
 *           return null;
 *        }
 *
 *        {@code @Execute}
 *        public void step1(RequestMonitor rm) {
 *            // Do something
 *            rm.done();
 *        }
 *
 *        {@code @RollBack("step1")}
 *        public void rollBack1(RequestMonitor rm) {
 *        	// Rollback what was done in step1()
 *        	rm.done();
 *        }
 *
 *        {@code @Execute}
 *        public void step2(RequestMonitor rm) {
 *            // Do something else
 *            rm.done();
 *        }
 *
 *        {@code @Execute}
 *        public void step3(RequestMonitor rm) {
 *            // Do something else
 *            rm.done();
 *        }
 *
 *        {@code @Execute}
 *        public void step4(RequestMonitor rm) {
 *            // Do something else
 *            rm.done();
 *        }
 *    }
 * </pre></code>
 *
 * @since 2.2
 */
RequestCache (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/RequestCache.java)/**
 * A general purpose cache, which caches the result of a single request.
 * Sub classes need to implement {@link #retrieve(DataRequestMonitor)} to fetch
 * data from the data source.  Clients are responsible for calling
 * {@link #disable()} and {@link #reset()} to manage the state of the cache in
 * response to events from the data source.
 * <p>
 * This cache requires an executor to use.  The executor is used to synchronize
 * access to the cache state and data.
 * </p>
 * @since 2.2
 */
ICanceledListener (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/RequestMonitor.java)/**
	 * Interface used by RequestMonitor to notify when a given request monitor
	 * is canceled.
	 *
	 * @see RequestMonitor
	 */
RequestMonitor (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/RequestMonitor.java)/**
 * Used to monitor the result of an asynchronous request.  Because of the
 * asynchronous nature of DSF code, a very large number of methods needs to
 * signal the result of an operation through a call-back.  This class is the base
 * class for such call backs.
 * <p>
 * The intended use of this class, is that a client who is calling an asynchronous
 * method, will sub-class RequestMonitor, and implement the method {@link #handleCompleted()},
 * or any of the other <code>handle...</code> methods, in order to interpret the
 * results of the request.  The object implementing the asynchronous method is required
 * to call the {@link #done()} method on the request monitor object that it received
 * as an argument.
 * </p>
 * <p>
 * The severity of the {@link IStatus> returned by #getStatus() can be used to
 * determine the success or failure of the asynchronous operation.  By convention
 * the error codes returned by asynchronous method should be interpreted as follows:
 * <ul>
 * <li>OK and INFO - Result is a success.  In DataRequestMonitor, getData() should
 *     return a value.</li>
 * <li>WARNING - Acceptable error condition (getData() may return null).  Where for
 *     example user tried to retrieve variable data, but the program resumed in the
 *     mean time and an event will be generated shortly which will clear the variables
 *     view.</li>
 * <li>ERROR - An error condition that should probably be reported to the user.</li>
 * <li>CANCEL - The request was canceled, and the asynchronous method was not
 *     completed.</li>
 * </ul>
 * </p>
 * <p>
 * The RequestMonitor constructor accepts an optional "parent" request monitor.  If a
 * parent monitor is specified, it will automatically be invoked by this monitor when
 * the request is completed.  The parent option is useful when implementing a method
 * which is asynchronous (and accepts a request monitor as an argument) and which itself
 * calls another asynchronous method to complete its operation.  For example, in the
 * request monitor implementation below, the implementation only needs to override
 * <code>handleSuccess()</code>, because the base implementation will handle notifying the
 * parent <code>rm</code> in case the <code>getIngredients()</code> call fails.
 * <pre>
 *     public void createCupCakes(final DataRequestMonitor<CupCake[]> rm) {
 *         getIngredients(new DataRequestMonitor<Ingredients>(fExecutor, rm) {
 *                 public void handleSuccess() {
 *                     rm.setData( new CupCake(getData().getFlour(), getData().getSugar(),
 *                                             getData().getBakingPowder()));
 *                     rm.done();
 *                 }
 *             });
 *     }
 * </pre>
 * </p>
 *
 * @since 1.0
 */
RequestMonitorWithProgress (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/RequestMonitorWithProgress.java)/**
 * A request monitor which uses a progress monitor as a parent.  When the parent
 * progress monitor is canceled, the request monitor will also be canceled,
 * although the cancellation listeners will not be called.
 *
 * @since 1.1
 */
Step (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/Sequence.java)/**
	 * The abstract class that each step has to implement.
	 */
StepWithProgress (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/Sequence.java)/**
	 * A step that will report execution progress by itself on the progress
	 * monitor of the owner sequence.<br>
	 * <br>
	 * Note we don't offer a rollBack(RequestMonitor, IProgressMonitor) as we
	 * don't want end user to be able to cancel the rollback.
	 *
	 * @since 1.1
	 */
Sequence (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/Sequence.java)/**
 * Convenience class for implementing a series of commands that need to be
 * executed asynchronously.
 * <p>
 * Certain complex tasks require multiple commands to be executed in a chain,
 * because for example result of one command is used as input into another
 * command.  The typical DSF pattern of solving this problem is the following:
 * <li>
 * <br> 1. original caller passes a RequestMonitor callback to a method and invokes it
 * <br> 2. the method is executed by a subsystem
 * <br> 3. when the method is finished it calls another method and passes
 * the original callback to it
 * <br> 4. steps 2-3 are repeated a number of times
 * <br> 5. when the last method in a chain is executed, it submits the original
 * RequestMonitor callback
 * </li>
 * <p>
 * This pattern is very useful in itself, but it proves very difficult to follow
 * because the methods can be scattered across many classes and systems.  Also
 * if progress reporting, cancellability, and roll-back ability is required, it
 * has to be re-implemented every time.  The Sequence class tries to address
 * this problem by containing this pattern in a single class.
 *
 * @since 1.0
 */
StackTraceWrapper (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/StackTraceWrapper.java)/**
 * Utility class for easy pretty-printing stack traces.  Local to the
 * concurrent package.
 *
 * @since 1.0
 */
Transaction (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/concurrent/Transaction.java)/**
 * @since 2.2
 */
AbstractDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/datamodel/AbstractDMContext.java)/**
 * Base implementation of the IDMContext interface.  There are two pieces of
 * functionality here: <br>
 * 1) The {@link #getAdapter(Class)} implementation which retrieves model
 * adapters registered with the session. <br>
 * 2) Methods to help compare DM Contexts.  <br>
 * <p>
 * Note: The {@link #equals(Object)} and {@link #hashCode()} methods are
 * made abstract to force the deriving classes to provide a proper
 * implementation.  Data Model Context objects are meant to be used as handles,
 * therefore a proper equals implementation is critical.
 * </p>
 * @param <V> Data Model data type that this context is for.
 *
 * @since 1.0
 */
AbstractDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/datamodel/AbstractDMEvent.java)/**
 * Base implementation of the IDMEvent interface. Sub-classes should contain
 * specific information about the event, while this base class only identifies
 * the DM Context that is affected.
 *
 * @since 1.0
 */
CompositeDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/datamodel/CompositeDMContext.java)/**
 * Generic DM context used to combine several DM Contexts.  This object allows
 * clients and other services to combine several contexts into one in order to
 * pass them as an argument to a method which takes a generic context as an
 * argument.
 *
 * @since 1.0
 */
DataModelInitializedEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/datamodel/DataModelInitializedEvent.java)/**
 * An event to signal the initial availability of the data model.
 *
 * @since 2.0
 */
DMContexts (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/datamodel/DMContexts.java)/**
 * Holder for utility static methods for manipulating IDMContext objects.
 *
 * @since 1.0
 */
IDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/datamodel/IDMContext.java)/**
 * The base class for data model objects.
 * <p>
 * DSF services need to return objects to clients which can be used as
 * handles to track data stored in the service.  Clients such as lazy-loading
 * tree and table views retrieve a list of handles, then as needed, they
 * retrieve the children and label information for these handles.  Because of
 * this pattern, services need to be able to return a set of handle objects,
 * then as needed clients can retrieve data corresponding to these handles.
 * The Data Model Context object is the interface that DSF services should use
 * to represent the handle objects that are to be referenced by view model.
 * <p>
 * <i>Note: DM contexts are meant to be immutable and thus accessible from
 * any thread instead of just the services dispatch thread. This is because
 * clients may need to call context objects' methods on non-dispatch thread,
 * especially equals and hashCode.</i>
 * <p>
 * <i>Note #2: DM Contexts should also avoid holding references to service
 * instances or other large chunks of data, because some of the clients may
 * hold onto these objects for longer time than the life of the service.
 * This may prevent the service from being garbage collected, possibly keeping
 * a lot of resources tied up.
 *
 * @since 1.0
 */
IDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/datamodel/IDMData.java)/**
 * Marker interface for data corresponding to IDMContext, retrieved from a
 * service.  These data objects are meant to be processed by clients on
 * different threads, therefore they should be immutable.
 *
 * @since 1.0
 */
IDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/datamodel/IDMEvent.java)/**
 * Base interface for events that signify changes in the data model. The only
 * thing all such events must have in common is that they reference an
 * {@link IDMContext}
 *
 * @param <V>
 *            Data Model context type that is affected by this event.
 *
 * @since 1.0
 */
IMemoryBlockRetrievalManager (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/internal/provisional/model/IMemoryBlockRetrievalManager.java)/**
 * <p>It's expected to have one IMemoryBlockRetrievalManager per session which instantiates and keeps the mapping between IMemoryDMContext and its
 * corresponding IMemoryBlockRetrieval. </p>
 *
 * <p>One IMemoryDMContext represents a hierarchy of elements that share the same memory e.g A process, thread and frame in Linux,
 * One session is capable of having multiple IMemoryContext e.g. Debugging multiple programs under the same session</p>
 *
 * <p>An IMemoryBlockRetrieval helps to retrieve memory blocks from the same memory and therefore it is expected to have a one to one
 * relationship with an IMemoryDMContext</p>
 *
 * <p>Functionality detecting changes to different memory context elements can resolve the corresponding IMemoryBlockRetrieval via this API.</p>
 *
 */
IMemoryBlockUpdatePolicyProvider (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/internal/provisional/model/IMemoryBlockUpdatePolicyProvider.java)/**
 * This interface is EXPERIMENTAL.
 *
 * @since 1.1
 */
MemoryBlockRetrievalFactory (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/internal/provisional/model/MemoryBlockRetrievalFactory.java)/**
 * A common MemoryBlockRetrievalFactory across debug sessions
 * which resolves (adapts) an element context to its corresponding
 * IMemoryBlockRetrieval via the session's IMemoryBlockRetrievalManager
 *
 * (non-Javadoc)
 * @see org.eclipse.cdt.dsf.debug.internal.provisional.model.IMemoryBlockRetrievalManager
 *
 */
IExecutionContextTranslator (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/internal/provisional/service/IExecutionContextTranslator.java)/**
 * EXPERIMENTAL. This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 *
 * Interface for translating one model of execution context hierarchy to another.
 * As the grouping feature is added incrementally this interface will be defined properly.
 *
 * The reason this interface is proposed at the DSF level is to accommodate requirements from
 * multiple DSF debuggers.
 *
 * @since 2.2
 * @experimental
 */
DsfLaunch (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/model/DsfLaunch.java)/**
 * A Launch class to use for debuggers using the DSF.  This base class
 * ensures that changed and terminated listeners are called using a
 * job, and thus not on a DSF services' session thread.
 *
 * @since 2.1
 */
DsfMemoryBlock (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/model/DsfMemoryBlock.java)/**
 * This class manages the memory block retrieved from the target as a result
 * of a getBytesFromAddress() call from the platform.
 *
 * It performs its read/write functions using the MemoryService.
 *
 * @since 1.0
 */
DsfMemoryBlockRetrieval (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/model/DsfMemoryBlockRetrieval.java)/**
 * Implementation of memory access API of the Eclipse standard debug model.
 *
 * The DsfMemoryBlockRetrieval is not an actual memory block but rather a
 * reference to the memory address space for an execution context (e.g. a
 * process) within a debug session. From this debug 'context', memory blocks
 * can then be read/written.
 *
 * Note: For the reference application, The IMemoryBlockRetrievalExtension
 * is implemented. This will result in getExtendedMemoryBlock() being called
 * when a memory block is selected from the platform memory pane.
 *
 * However, if the 'simpler' IMemoryBlockRetrieval is to be implemented, the
 * code will still be functional after some trivial adjustments.
 *
 * @since 1.0
 */
AbstractDsfDebugServicesFactory (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/AbstractDsfDebugServicesFactory.java)/**
 * Convenience base class for {@link IDsfDebugServicesFactory}
 *
 * @since 1.1
 */
AbstractInstruction (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/AbstractInstruction.java)/**
 * Implementers of {@link IInstruction} should extend this abstract class
 * instead of implementing the interface directly.
 *
 * @since 2.2
 */
BreakpointsMediator (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/BreakpointsMediator.java)/**
 * Breakpoints mediator is a DSF service which synchronizes breakpoints in the
 * IDE and breakpoints in the debugger.  The IDE breakpoints are managed by the
 * {@link IBreakpointManager} while the debugger breakpoints are accessed
 * through the {@link IBreakpoints} service.
 * <p>
 * This class is not intended to be extended by clients.  Instead clients should
 * implement the {@link IBreakpointAttributeTranslator} interface which is used
 * to translate breakpoint attributes between the IDE and debugger breakpoints.
 * <p>
 * Note: This breakpoint mediator implementation has been superseded by a more
 * powerful {@link BreakpointsMediator2} implementation.
 *
 * @since 1.0
 * @see IBreakpointAttributeTranslator
 * @see BreakpointsMediator2
 */
ITargetBreakpointInfo (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/BreakpointsMediator2.java)/**
	 * Object describing the information about a single target breakpoint
	 * corresponding to specific platform breakpoint and breakpoint target
	 * context.
	 */
PendingEventInfo (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/BreakpointsMediator2.java)/**
	 * Hold info about a breakpoint events (added, removed, changed) for later
	 * handling.
	 */
BreakpointsMediator2 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/BreakpointsMediator2.java)/**
/**
 * Breakpoints mediator is a DSF service which synchronizes breakpoints in the
 * IDE and breakpoints in the debugger.  The IDE breakpoints are managed by the
 * {@link IBreakpointManager} while the debugger breakpoints are accessed
 * through the {@link IBreakpoints} service.
 * <p>
 * This class is not intended to be extended by clients.  Instead clients should
 * implement the {@link IBreakpointAttributeTranslator2} interface which is used
 * to translate breakpoint attributes between the IDE and debugger breakpoints.
 * <p>
 * Note: This breakpoint mediator is a second generation implementation that
 * succeeds {@link BreakpointsMediator}.  This new implementation includes
 * the following additional features:
 * <ul>
 *   <li> support for multiple target breakpoints for each IDE breakpoint, </li>
 *   <li> support for retrieving the mapping between IDE breakpoints and
 *        debugger breakpoints,</li>
 *   <li> support for updating IDE breakpoint status based on full target
 *        breakpoint data. </li>
 * </ul>
 *
 * @see IBreakpointAttributeTranslator2
 * @see BreakpointsMediator
 *
 * @since 2.1
 */
BufferedCommandControl (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/BufferedCommandControl.java)/**
 * A command control which delays the <strong>results</strong> of commands
 * sent to a command control, as well as events from the command control.
 * The delay is specified in the constructor using a number of executor
 * dispatch cycles.
 *
 * @since 2.1
 */
CommandInfo (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/CommandCache.java)/**
	 * Holds cache information for a given command.
	 * @param <V> Type matches the result type associated with the command.
	 */
ICommandControl (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/ICommandControl.java)/**
 * API for sending commands to the debugger and for receiving command results
 * and asynchronous events.  The command control may be implemented by a service
 * or a non-service object.
 *
 * @see ICommandControlService
 *
 * @since 1.0
 */
ICommandControlDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/ICommandControlService.java)/**
	 * Context representing a command control service.  All contexts which
	 * originate from a given command control service, should have that
	 * control's context in their hierarchy.
	 *
	 * @see ICommandControlService#getContext()
	 */
ICommandControlInitializedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/ICommandControlService.java)/**
	 * Event indicating that the back end process has started.
	 */
ICommandControlShutdownDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/ICommandControlService.java)/**
	 * Event indicating that the back end process has terminated.
	 */
ICommandControlService (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/ICommandControlService.java)/**
 * Service which acts as a command control.
 *
 * @since 1.1
 */
ICommandResult (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/ICommandResult.java)/**
 * @since 1.0
 */
ICommandToken (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/ICommandToken.java)/**
 * Token returned by ICommandControl.queueCommand().  This token can be used
 * to uniquely identify a command when calling ICommandControl.removeCommand()
 * or when implementing the ICommandListener listener methods.
 *
 * @since 1.0
 */
IEventListener (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/IEventListener.java)/**
 * Synchronous listener for events issued from the debugger.  All
 * registered listeners will be called in the same dispatch cycle.
 *
 * @since 1.0
 */
IBreakpointAttributeTranslator (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IBreakpointAttributeTranslator.java)/**
 * Breakpoint attribute translator is used by the {@link BreakpointsMediator}
 * to map IDE breakpoint attributes to debugger breakpoint attributes.
 * <p>
 * Note: The attribute translator is expected to access IDE breakpoint manager
 * objects which are synchronized using the resource system.  Therefore all the
 * translator methods are called using background threads.  When the attribute
 * translator needs to access DSF services, it needs to schedule a runnable using
 * the DSF session executable.
 *
 * @see BreakpointMediator
 * @since 1.0
 */
IBreakpointAttributeTranslator2 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IBreakpointAttributeTranslator2.java)/**
 * Breakpoint attribute translator is used by the {@link BreakpointsMediator2}
 * to map IDE breakpoint attributes to debugger breakpoint attributes.
 * <p>
 * Note: The attribute translator is expected to access IDE breakpoint manager
 * objects which are synchronized using the resource system.  It may also need to
 * access DSF services using the DSF session executor.  Therefore, the
 * implementation needs to pay special attention to the synchronization
 * annotations on each method of the interface.
 *
 * @see BreakpointsMediator2
 * @since 2.1
 */
IBreakpointsTargetDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IBreakpoints.java)/**
	 * Marker interface for a context for which breakpoints can be installed
	 */
IBreakpointDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IBreakpoints.java)/**
	 * Specific breakpoint context
	 */
IBreakpointsChangedEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IBreakpoints.java)/**
	 * Breakpoint events
	 */
IBreakpointDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IBreakpoints.java)/**
	 * Effective breakpoint data as held by the back-end.
	 */
IBreakpoints (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IBreakpoints.java)/**
 * Breakpoint service interface
 *
 * @since 1.0
 */
IBreakpointHitDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IBreakpointsExtension.java)/**
	 * Event indicating that a given thread or container was suspended
	 * by the given breakpoint(s).
	 */
IBreakpointsExtension (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IBreakpointsExtension.java)/**
 * Extension to the Breakpoints service which adds support for correlating
 * breakpoints and execution contexts.
 * @since 2.1
 */
ICachingService (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/ICachingService.java)/**
 * Interface for services which use an internal cache for data.
 *
 * @since 1.1
 */
IDisassembly (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IDisassembly.java)/**
 * Disassembly service interface
 *
 * @since 1.0
 */
IDisassembly2 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IDisassembly2.java)/**
 * This interface extends the disassembly service with support for
 * address alignment extension request.
 *
 * @since 2.2
 */
IDisassembly3 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IDisassembly3.java)/**
 * This interface extends the disassembly service with support for raw opcodes
 *
 * @since 2.5
 *
 */
IDsfBreakpointExtension (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IDsfBreakpointExtension.java)/**
 * An extension to {@link ICBreakpoint} with model-specific breakpoint
 * attributes. Different debug models can use the standard C breakpoints that
 * extend the basic <code>ICBreakpoint</code>.  They can use this extension
 * mechanism to edit and store model-specific data in the original breakpoint
 * object.
 *
 * A breakpoint extension is defined by an extension of kind
 * <code>"org.eclipse.cdt.debug.core.BreakpointExtension"</code></li>.
 * The <code>ICBreakpoint</code> implementation instantiates breakpoint
 * extensions registered for its specific marker type when a client requests
 * extensions for a given debug model type.  Thus the extension classes and
 * plugins that declare them are not loaded unless requested by a client.
 *
 * @see ICBreakpoint#getExtension(String, Class)
 * @since 1.0
 */
IDsfDebugServicesFactory (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IDsfDebugServicesFactory.java)/**
 * A factory to create DSF services.  Using this interface allows
 * to easily have different service implementation for different backends.
 *
 * @since 1.1
 */
IExpressionDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions.java)/**
	 * Expression context.
	 */
IIndexedPartitionDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions.java)/**
	 * To avoid SWT performance issues large arrays are divided into partitions.
	 * This interface represents the context of such a partition.
	 *
	 * @since 2.3
	 */
IExpressionGroupDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions.java)/**
	 * Represents a group of expressions.  A group of expressions is a list of
	 * possibly unrelated expressions which are somehow described by an
	 * expression-group string.
	 *
	 * Examples of expression-groups that the service could choose to support are:
	 * 	"myVar1; myVar2"
	 *  "=myVar*"
	 *
	 * The sub-expressions of an expression-group are the individual expressions
	 * making up this group.
	 *
	 * @since 2.4
	 */
IExpressionDMAddress (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions.java)/**
	 * The address and size of an expression.
	 */
IExpressionDMLocation (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions.java)/**
	 * A representation of an expression location that does not correspond to
	 * an address.
	 *
	 * @since 2.1
	 */
IExpressionDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions.java)/**
	 * This is the model data interface that corresponds to IExpressionDMContext.
	 */
IExpressionChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions.java)/**
	 * Event indicating that a given expression is changed. If an expression is changed, it's implied that all
	 * the children of that expression are changed too.
	 */
IExpressions (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions.java)/**
 * Expressions service provides access to the debugger's expression evaluator. This service has
 * dependencies on the Stack service, as it is be used to provide context for an
 * expression to be evaluated.
 *
 * @since 1.0
 */
CastInfo (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions2.java)/**
	 * This class specifies how an expression should be
	 * typecast to another type and/or displayed as an array.
	 */
ICastedExpressionDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions2.java)/**
	 * This context identifies a casted expression.  Its parent is the original
	 * {@link IExpressionDMContext}.
	 */
IExpressions2 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions2.java)/**
 * This interface extends the expressions service with support for casting to type or
 * array.
 * @since 2.1
 */
IExpressionDMDataExtension (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions3.java)/**
	 * The model data interface extension.
	 */
IExpressions3 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IExpressions3.java)/**
 *  This interface extends the expressions service with support for
 *  model data extension requests.
 *
 *  @since 2.2
 */
IFormattedDataDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IFormattedValues.java)/** Marker interface for a DMC that has a formatted value. */
FormattedValueDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IFormattedValues.java)/**
	 * DMC that represents a value with specific format.  The format ID can be
	 * persisted and used for comparison.
	 */
IFormattedValues (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IFormattedValues.java)/**
 * Formatted values interface describes the kinds of formatted information
 * which may be returned and the methods for obtaining and manipulating
 * those values.
 *
 * @since 1.0
 */
IInstruction (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IInstruction.java)/**
 * Represents an assembly instruction.
 * <p>
 * Implementers should extend {@link AbstractInstruction} instead of
 * implementing this interface directly.
 * </p>
 *
 * @since 1.0
 * @see IInstructionWithSize
 */
IInstructionWithRawOpcodes (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IInstructionWithRawOpcodes.java)/**
 * Extension interface for instructions with raw Opcodes
 * <p>
 * Implementers must extend {@link AbstractInstruction} instead of implementing
 * this interface directly.
 * </p>
 *
 * @since 2.5
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IInstructionWithSize (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IInstructionWithSize.java)/**
 * Extension interface for instructions knowing their size.
 * <p>
 * Implementers must extend {@link AbstractInstruction} instead of
 * implementing this interface directly.
 * </p>
 * @since 2.2
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
IMemoryChangedEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IMemory.java)/**
	 * Event generated every time a range of bytes is modified.
	 *
	 * A client wishing to receive such events has to register as a service
	 * event listener and implement the corresponding eventDispatched method.
	 *
	 * E.g.:
	 *
	 *   MyMemoryBlock(MIRunControl fRunControl)
	 *   {
	 *       ...
	 *       fRunControl.getSession().addServiceEventListener(MyMemoryBlock.this, null);
	 *       ...
	 *   }
	 *
	 *     @DsfServiceEventHandler
	 *     public void eventDispatched(MemoryChangedEvent e) {
	 *        IDMContext<?> context = e.getContext();
	 *        IAddress[] addresses = e.getAddresses();
	 *        // do whatever...
	 *     }
	 */
IMemory (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IMemory.java)/**
 * Service for accessing memory.  Memory contexts are not meant to be
 * represented in tree or table views, so it doesn't need to implement
 * IDMService interface.
 *
 * @since 1.0
 */
IMemorySpaceDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IMemorySpaces.java)/**
	 * A context that represents a particular memory space. Simple targets have
	 * a single, implicit memory space, but some have multiple, e.g., code,
	 * data, virtual, physical.
	 */
IMemorySpaces (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IMemorySpaces.java)/**
 * A memory service that is memory space aware.
 *
 * <p>
 * Memory contexts are not meant to be represented in tree or table views, so it
 * doesn't need to implement IDMService interface.
 *
 * @author Alain Lee and John Cortell
 * @since 2.1
 */
IMemorySpaces2 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IMemorySpaces2.java)/**
 * This extension allows the decoding of an expression with the help of the external debugger
 *
 * @since 2.5
 */
IMixedInstruction (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IMixedInstruction.java)/**
 * Represents the assembly instruction(s) corresponding to a source line
 *
 * @since 1.0
 */
ISymbolDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules.java)/**
	 * Symbol context represents the space into which module symbols are loaded.
	 * Traditionally symbols are loaded in context of a process, but for other
	 * types of debugging, like kernel or no-OS debugging, it's useful to
	 * separate the concept of a symbol context from a process.
	 */
IModuleDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules.java)/**
	 * Module context represents a single module that is loaded.
	 */
ModulesChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules.java)/**
	 * Event indicating a change in the symbol information for given context.
	 */
ModuleLoadedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules.java)/**
	 * Specific event identifying that a new module was loaded into a
	 * symbol context.
	 */
IModuleDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules.java)/** Module information. */
LineInfo (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules.java)/** Line information about a particular address */
AddressRange (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules.java)/** Address information about a particular file/line */
IModules (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules.java)/**
 * Debugger service representing module handling logic of a debugger.
 *
 * @since 1.0
 */
ISymbolsChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules2.java)/**
	 * Event indicating a change in the symbols of certain modules of the symbol context.
	 */
ISymbolsLoadedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules2.java)/**
	 * Indicates symbols were loaded for some modules.
	 */
ISymbolsUnloadedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules2.java)/**
	 * Indicates symbols were unloaded for some modules.
	 */
IModules2 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IModules2.java)/**
 * Extends to IModules interface to supporting loading symbols.
 * @since 2.6
 */
IMultiDetach (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IMultiDetach.java)/**
 * This interface provides the ability to perform detach on multiple contexts.
 *
 * @since 2.6
 */
IMultiRunControl (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IMultiRunControl.java)/**
 * This interface provides the ability to perform run control operations on multiple contexts.
 *
 * @see org.eclipse.cdt.dsf.debug.service.IRunControl
 *
 * @since 2.3
 */
IMultiTerminate (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IMultiTerminate.java)/**
 * This interface provides the ability to perform terminate on multiple contexts.
 *
 * @since 2.6
 */
IThreadDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IProcesses.java)/**
	 *  A thread as known by the OS.
	 *  This context is kept different than {@link IRunControl.IExecutionDMContext}
	 *  because the OS id of a thread may not be the same as the thread id used by
	 *  the debugger when doing run control operations.
	 */
IProcessDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IProcesses.java)/**
	 *  A process as known by the OS.
	 *  This context is kept different than {@link IRunControl.IContainerDMContext}
	 *  because the OS id of a process may not be the same as the process id used by
	 *  the debugger when doing run control operations.
	 */
IThreadDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IProcesses.java)/**
	 * Interface for thread and process object data.  This data provides a link
	 * to the lower level debugger services, in form of execution contexts.
	 */
ProcessChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IProcesses.java)/**
	 * Event indicating that process data has changed.
	 */
IProcesses (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IProcesses.java)/**
 * This interface provides access to the OS's process
 * information, manipulation methods, and debugging methods.
 * This service provides a relatively simple interface for
 * manipulating processes as compared with a full-blown
 * remote target debugger.
 *
 * @since 1.1
 */
IGroupsChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/**
	 * Event indicating groups have changed.  The type of context returned by this
	 * event is generic, because different implementations of the the register service
	 * could configure register groups using different contexts.  Some implementations
	 * could configure different register groups for each execution context, other
	 * services may have a global list of groups.
	 */
IRegisterGroupDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Register group context */
IGroupChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Event indicating values for the group have changed. */
IRegistersChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Event indicating registers in a group have changed. */
IRegisterGroupDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/**
	 * Register groups only have a name and description.  Sub groups and registers are
	 * retrieved through the service interface.
	 */
IRegisterDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Register context */
IRegisterChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Event indicating register value changed. */
IRegisterDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Register information */
IBitFieldDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Bit field context */
IBitFieldChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Event indicating register value changed. */
IBitFieldDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/**
	 * Bitfield data, big groups and mnemonics are retrieved at the same
	 * time as rest of bit field data
	 */
IBitGroup (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Bit group definition */
IMnemonic (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/** Bit field mnemonic */
IRegisters (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters.java)/**
 * Service for accessing register data.
 *
 * @since 1.0
 */
IRegisters2 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRegisters2.java)/**
 * Service extension of IRegisters to manage user defined Register Groups
 * @since 2.6
 */
IExecutionDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * Execution context is the object on which run control operations can be
	 * performed.  A lot of higher-level services reference this context to build
	 * functionality on top of it, e.g. stack, expression evaluation, registers, etc.
	 */
ISuspendedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * Indicates that the given thread has suspended.
	 */
IResumedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * Indicates that the given thread has resumed.
	 */
IContainerSuspendedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * Indicates that the given container has suspended.
	 */
IContainerResumedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * Indicates that the given container has resumed.
	 */
ICreatedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * Indicates that a new execution context was created but may not have
	 * started execution yet.
	 * @since 2.8
	 */
IStartedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * Indicates that a new execution context was started.
	 */
IExitedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * Indicates that an execution context has exited.
	 */
IExecutionDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * Display information for an execution context.
	 */
IExecutionDMData2 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
	 * @since 2.1
	 */
IRunControl (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl.java)/**
 * This interface provides access to controlling and monitoring the execution
 * state of a process being debugged.  This interface does not actually
 * provide methods for creating or destroying execution contexts, it doesn't
 * even have methods for getting labels.  That's because it is expected that
 * higher level services, ones that deal with processes, kernels, or target
 * features will provide that functionality.
 *
 * @since 1.0
 */
IRunControl2 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl2.java)/**
 * This interface extends IRunControl to let a service support the
 * "Run to Line," "Move to Line," and "Resume at Line" commands.
 * @since 2.1
 */
IRunControl3 (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IRunControl3.java)/**
 * This interface extends IRunControl2 to let a service support the
 * "Step into selection" command.
 * @since 2.4
 */
ISignalsDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/ISignals.java)/**
	 * Marker interface for a context for which signals can be set.
	 */
ISignals (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/ISignals.java)/**
 * Place holder interface for a signals implementation.
 *
 * @since 1.0
 */
ISourceLookup (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/ISourceLookup.java)/**
 * Service for mapping debugger paths to host paths.  This service is needed
 * primarily by other services that need to access source-path mappings, such
 * as the breakpoints service.  For UI components, the platform source lookup
 * interfaces could be sufficient.
 *
 * @since 1.0
 */
IFrameDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IStack.java)/**
	 * Context for a specific stack frame.  Besides allowing access to stack
	 * frame data, this context is used by other services that require a stack
	 * frame for evaluation.
	 */
IFrameDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IStack.java)/**
	 * Stack frame information.
	 */
IVariableDMContext (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IStack.java)/**
	 * Variable context.  This context only provides access to limited
	 * expression information.  For displaying complete information,
	 * Expressions service should be used.
	 */
IVariableDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IStack.java)/**
	 * Stack frame variable information.
	 */
IStack (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/IStack.java)/**
 * Stack service provides access to stack information for a
 * given execution context.
 *
 * @since 1.0
 */
ISymbolObjectDMData (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/ISymbols.java)/**
	 * Data about a debug symbol.
	 */
ISymbolDataChangedDMEvent (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/ISymbols.java)/**
	 * Indicates that the list of symbol objects is changed.  Parsing debug
	 * symbols can be a long running operation (order of 10's of seconds or
	 * minutes), so it is useful for the service to provide access to the data
	 * even while it's still parsing.  This event may be issued periodically
	 * by the service to indicate that a section of debug symbols has been
	 * parsed.
	 */
ISymbols (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/ISymbols.java)/**
 * Service for accessing debugger symbols.  This service builds on the Modules
 * service, but not all debuggers provide access for parsing symbols so this
 * service is separated.
 *
 * @see IModules
 * @since 1.0
 */
DsfSourceLookupDirector (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/sourcelookup/DsfSourceLookupDirector.java)/**
 * DSF source lookup director.
 *
 * When a launch (or the global) source lookup containers are being edited it is
 * an instance of CSourceLookupDirector that is created. However, when using DSF
 * launch, the subclass DsfSourceLookupDirector is actually instantiated because
 * connection to the DsfSession is needed.
 *
 * @since 1.0
 */
DsfSourceLookupParticipant (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/sourcelookup/DsfSourceLookupParticipant.java)/**
 * Source lookup participant that should be used with DSF-based debuggers.
 *
 * @since 1.0
 */
DsfPlugin (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/internal/DsfPlugin.java)/**
 * The activator class controls the plug-in life cycle
 *
 * @since 1.0
 */
LoggingUtils (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/internal/LoggingUtils.java)/**
 * Some general purpose functions that can be useful for logging/tracing
 * activities. This is a duplicate of LoggingUtils in
 * org.eclipse.cdt.internal.core. The idea is for core parts of DSF (ones that
 * don't have debug in package name) to have very limited dependencies on other
 * plugins.
 *
 * @since 2.1
 */
AbstractDsfService (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/AbstractDsfService.java)/**
 * Standard base implementation of the DSF service.  This is a convenience
 * class that provides the basic functionality that all DSF services have
 * to implement.
 *
 * @since 1.0
 */
DsfServices (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServices.java)/**
 *  Utility class containing status methods to use with DSF services.
 *
 * @since 1.0
 */
DsfServicesTracker (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java)/**
 * Convenience class to help track DSF services that a given
 * client needs to use.  This class is similar to the standard OSGI
 * org.osgi.util.tracker.ServiceTracker class, with a few differences:
 * <br>1. This class is assumed to be accessed by a single thread hence it
 * has no synchronization built in, while OSGI ServiceTracker synchronized
 * access to its data.
 * <br>2. This class is primarily designed to track multiple services of
 * different type (class), while OSGI ServiceTracker is designed to work with
 * single class type, with optional filtering options.
 * <br>3. This class uses knowledge of DSF sessions to help narrow down
 * service references.
 * <br>4. OSGI Service tracker explicitly listens to OSGI service
 * startup/shutdown events and it will clear a reference to a service as
 * soon as it's shut down.
 * Since version 2.0, this class listens to service unregister events
 * as an indication of service shutdown.  In the case of an unregister event,
 * this class will clear the reference to that service.
 * <p>
 * That said, it might be more convenient for certain types of clients to use
 * OSGI Service tracker for the additional features it provides.
 *
 * @see org.osgi.util.tracker.ServiceTracker
 *
 * @since 1.0
 */
SessionStartedListener (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfSession.java)/**
	 * Listener for session started events.  This listener is always going to be
	 * called in the dispatch thread of the session's executor.
	 */
SessionEndedListener (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfSession.java)/**
	 * Listener for session ended events.  This listener is always going to be
	 * called in the dispatch thread of the session's executor.
	 */
DsfSession (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfSession.java)/**
 * Class to manage DSF sessions.  A DSF session is a way to
 * associate a set of DSF services that are running simultaneously and
 * are interacting with each other to provide a complete set of functionality.
 * <p>
 * Properties of a session are following:
 * <br>1. Each session is associated with a single DSF executor, although there
 * could be multiple sessions using the same executor.
 * <br>2. Each session has a unique String identifier, which has to be used by
 * the services belonging to this session when registering with OSGI services.
 * <br>3. Each session has its set of service event listeners.
 * <br>4. Start and end of each session is announced by events, which are always
 * sent on that session's executor dispatch thread.
 *
 * @see org.eclipse.cdt.dsf.concurrent.DsfExecutor
 *
 * @since 1.0
 */
IDsfService (/dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/IDsfService.java)/**
 * The interface that all DSF services must implement.  It only provides a
 * few features to help manage and identify the services using the OSGI services
 * framework.
 * <p>
 * Each service should register itself with OSGI services framework using
 * the BundleContext.registerService() method.  And each service should use the
 * session ID that it is registering with as one of the service properties.  If there
 * is more than one instance of the service to be instantiated for a given session,
 * additional properties should be used when registering the service to allow clients
 * to uniquely identify the services.
 * <p>
 * By convention, all methods of DSF services can be called only on the dispatch
 * thread of the DSF executor that is associated with the service.  If a
 * service exposes a method that is to be called on non-dispatch thread, it should
 * be documented so.
 *
 * @see org.osgi.framework.BundleContext#registerService(String[], Object, Dictionary)
 *
 * @since 1.0
 */
DisassemblyMoveToLineAdapter (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/DisassemblyMoveToLineAdapter.java)/**
 * Move to line target adapter for the DSF Disassembly view
 *
 * @since 2.1
 */
DisassemblyResumeAtLineAdapter (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/DisassemblyResumeAtLineAdapter.java)/**
 * Resume at line target adapter for the DSF Disassembly view
 *
 * @since 2.1
 */
DisassemblyRunToLineAdapter (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/DisassemblyRunToLineAdapter.java)/**
 * Run to line target adapter for the DSF Disassembly view
 *
 * @since 2.1
 */
DsfAddRegisterGroupCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/DsfAddRegisterGroupCommand.java)/**
 * Command performing adding a register group.
 * @since 2.4
 */
DsfEditRegisterGroupCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/DsfEditRegisterGroupCommand.java)/**
 * Command performing adding a register group.
 * @since 2.4
 */
DsfRemoveRegisterGroupsCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/DsfRemoveRegisterGroupsCommand.java)/**
 * Command performing adding a register group.
 * @since 2.4
 */
DsfRestoreRegisterGroupsCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/DsfRestoreRegisterGroupsCommand.java)/**
 * Command performing adding a register group.
 * @since 2.4
 */
IDsfActionsConstants (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/IDsfActionsConstants.java)/**
 * Constants used by the DSF UI action adapters
 *
 * @noimplement This interface is not intended to be implemented by clients.
 */
MoveToLine (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/MoveToLine.java)/**
 * Implements the CDT's move to line interface.
 *
 * @since 2.1
 */
ResumeAtLine (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/ResumeAtLine.java)/**
 * Implements the CDT's resume at line interface.
 *
 * @since 2.1
 */
RetargettableActionAdapterFactory (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/RetargettableActionAdapterFactory.java)/**
 * Retargettable Action Adapter Factory for the DSF Disassembly view
 *
 * @since 2.1
 */
RunToLine (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/RunToLine.java)/**
 * Implements the CDT's run to line interface.  This interface is called by CDT's
 * {@link IRunToLineTarget} implementation.
 *
 * @since 2.1
 */
CSourceNotFoundDescriptionFactory (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/CSourceNotFoundDescriptionFactory.java)/**
 * This factory provides an instance of ICSourceNotFoundDescription that can
 * generate a description of a IFrameDMContext.
 *
 */
DebugTextHoverAdapterFactory (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/DebugTextHoverAdapterFactory.java)/**
 * Adapter factory adapting an {@link IDMVMContext} to an {@link ICEditorTextHover}.
 *
 * @since 2.1
 */
DsfDebugViewLayoutCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/debugview/layout/actions/DsfDebugViewLayoutCommand.java)/**
 * @since 2.2
 */
DsfGroupDebugContextsCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/debugview/layout/actions/DsfGroupDebugContextsCommand.java)/**
 * @since 2.2
 */
DsfUngroupDebugContextsCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/debugview/layout/actions/DsfUngroupDebugContextsCommand.java)/**
 * @since 2.2
 */
AbstractImageRegistry (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/AbstractImageRegistry.java)/**
 * Abstract image registry that allows for defining fallback paths for images.
 */
AbstractDisassemblyBreakpointRulerAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/AbstractDisassemblyBreakpointRulerAction.java)/**
 * Abstract implementation of a breakpoint ruler action.
 */
AbstractDisassemblyRulerAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/AbstractDisassemblyRulerAction.java)/**
 * Abstract implementation for disassembly vertical ruler actions.
 */
AbstractDisassemblyRulerActionDelegate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/AbstractDisassemblyRulerActionDelegate.java)/**
 * This class serves as an adapter for actions contributed to the vertical ruler's
 * context menu. This adapter provides the contributed actions access to their disassembly part
 * and the disassembly part's vertical ruler. These actions gain only limited access to the vertical
 * ruler as defined by <code>IVerticalRulerInfo</code>.  The adapter updates the
 * adapter (inner) action on menu and mouse action on the vertical ruler.<p>
 * Extending classes must implement the factory method
 * <code>createAction(IDisassemblyPart, IVerticalRulerInfo)</code>.
 *
 * @see org.eclipse.ui.texteditor.AbstractRulerActionDelegate
 */
AddBreakpointRulerAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/AddBreakpointRulerAction.java)/**
 * Ruler action to add breakpoint with a dialog properties.
 */
AddBreakpointRulerActionDelegate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/AddBreakpointRulerActionDelegate.java)/**
 * Ruler action delegate for the "Add Breakpoint..." action.
 */
BreakpointPropertiesRulerAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/BreakpointPropertiesRulerAction.java)/**
 * Ruler action to display breakpoint properties.
 */
BreakpointPropertiesRulerActionDelegate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/BreakpointPropertiesRulerActionDelegate.java)/**
 * Ruler action delegate for the breakpoint properties action.
 */
RulerToggleBreakpointActionDelegate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/RulerToggleBreakpointActionDelegate.java)/**
 * Ruler toggle breakpoint action delegate for disassembly parts.
 *
 * @since 2.1
 *
 * @see org.eclipse.debug.ui.actions.RulerToggleBreakpointActionDelegate
 */
RulerToggleBreakpointHandler (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/RulerToggleBreakpointHandler.java)/**
 * Default handler for the toggle breakpoint command in the disassembly ruler.
 * Invoked on double click in the ruler.
 *
 * @since 2.1
 */
TextOperationAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/actions/TextOperationAction.java)/**
 * TextOperationAction
 */
AddressRulerColumn (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/AddressRulerColumn.java)/**
 * A vertical ruler column to display the instruction address.
 */
DisassemblyBackendDsfFactory (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyBackendDsfFactory.java)/**
 */
DisassemblyColumnSupport (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyColumnSupport.java)/**
 * Implements the ruler column support of for the given disassembly part.
 * <p>
 * This is currently only used to support vertical ruler columns.
 * </p>
 */
DisassemblyDropAdapter (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyDropAdapter.java)/**
 * DisassemblyDropAdapter
 */
DisassemblyEditor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyEditor.java)/**
 * DisassemblyEditor
 */
DisassemblyHyperlinkDetector (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyHyperlinkDetector.java)/**
 * A hyperlink detector detecting words and numbers to support navigation
 * to a symbolic address.
 */
DisassemblyImageRegistry (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyImageRegistry.java)/**
 * DisassemblyImageRegistry
 */
PropertyChangeListener (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyPart.java)/**
	 * Internal property change listener for handling changes in the
	 * preferences.
	 */
DisassemblyPart (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyPart.java)/**
 * DisassemblyPart
 */
DisassemblySelectionProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblySelectionProvider.java)/**
 * Selection provider for disassembly selections.
 * Wraps the selection provider of the underlying text viewer and provides
 *  {@link IDisassemblySelection}s instead of {@link ITextSelection}s.
 *
 * @since 2.1
 * @see IDisassemblySelection
 */
DisassemblyTextHover (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyTextHover.java)/**
 * A text hover to evaluate registers and variables under the cursor.
 */
DisassemblyToggleBreakpointTester (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyToggleBreakpointTester.java)/**
 * Disassembly toggle breakpoint factory enablement tester.
 *
 * @since 2.2
 */
DisassemblyView (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyView.java)/**
 * DisassemblyView
 */
SimpleDamagerRepairer (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyViewerConfiguration.java)/**
	 * SimpleDamagerRepairer
	 */
DisassemblyViewerConfiguration (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/DisassemblyViewerConfiguration.java)/**
 * DisassemblyViewerConfiguration
 */
EditionFinderJob (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/EditionFinderJob.java)/**
 * A job to find a suitable edition from the local history
 * based on a file and the timestamp of the code module.
 */
FunctionOffsetRulerColumn (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/FunctionOffsetRulerColumn.java)/**
 * A vertical ruler column to display the function + offset of instructions.
 */
IDisassemblyHelpContextIds (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/IDisassemblyHelpContextIds.java)/**
 * IDisassemblyHelpContextIds
 */
BreakpointsAnnotationModel (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/model/BreakpointsAnnotationModel.java)/**
 * Annotation model for breakpoints in the disassembly.
 * Works only with {@link DisassemblyDocument}.
 */
DisassemblyDocument (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/model/DisassemblyDocument.java)/**
 * DisassemblyDocument
 */
DisassemblyWithSourcePosition (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/model/DisassemblyWithSourcePosition.java)/**
 * DisassemblyWithSourcePosition
 */
SourceDocumentProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/model/SourceDocumentProvider.java)/**
 * SourceDocumentProvider
 */
SourceEditorInput (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/model/SourceEditorInput.java)/**
 * SourceEditorInput
 */
SourceFileInfo (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/model/SourceFileInfo.java)/**
 * Holds information about a source file.
 */
SourceReadingJob (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/model/SourceReadingJob.java)/**
 * Low-level job to read source files in the background.
 */
OpcodeRulerColumn (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/OpcodeRulerColumn.java)/**
 * A vertical ruler column to display the opcodes of instructions.
 */
DisassemblyPreferenceConstants (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/preferences/DisassemblyPreferenceConstants.java)/**
 * DisassemblyPreferenceConstants
 */
DisassemblyPreferencePage (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/preferences/DisassemblyPreferencePage.java)/**
 * DisassemblyPreferencePage
 */
CustomCSourceViewerConfiguration (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/CSourcePresentationCreator.java)/**
	 *
	 */
CSourcePresentationCreator (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/CSourcePresentationCreator.java)/**
 * A presentation creator based on CDT syntax highlighting.
 */
NullRange (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/CSourceTag.java)/**
	 * The zero-length source range.
	 */
CSourceRange (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/CSourceTag.java)/**
	 * The source range.
	 */
CIdentifierRange (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/CSourceTag.java)/**
	 * The identifier range.
	 */
CSourceTag (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/CSourceTag.java)/**
 * A source tag based on C Model elements.
 */
CSourceTagProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/CSourceTagProvider.java)/**
 * A source tag provider based on the C Model.
 */
DisassemblyIPAnnotation (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/DisassemblyIPAnnotation.java)/**
 * DisassemblyIPAnnotation
 */
ISourcePresentationCreator (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/ISourcePresentationCreator.java)/**
 * A source presentation creator is used to create a {@link TextPresentation} of a document range.
 */
ISourceTag (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/ISourceTag.java)/**
 * Specifies the style of part of some text source.
 */
ISourceTagListener (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/ISourceTagListener.java)/**
 * ISourceTagListener
 */
ISourceTagProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/ISourceTagProvider.java)/**
 * A source tag provider provides access to source tags.
 */
SourcePresentationCreatorFactory (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/SourcePresentationCreatorFactory.java)/**
 * A factory for source presentation creators.
 */
SourceTagDamagerRepairer (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/presentation/SourceTagDamagerRepairer.java)/**
 *
 */
InternalListener (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/provisional/DisassemblyRulerColumn.java)/**
	 * Internal listener class.
	 */
MouseHandler (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/provisional/DisassemblyRulerColumn.java)/**
	 * Handles all the mouse interaction in this line number ruler column.
	 */
DisassemblyRulerColumn (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/provisional/DisassemblyRulerColumn.java)/**
 * Vertical ruler column for use with disassembly parts.
 * <p>
 * Derived from {@link org.eclipse.jface.text.source.LineNumberRulerColumn}.
 * </p>
 */
DisassemblySelection (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/provisional/DisassemblySelection.java)/**
 * Default implementation of {@link IDisassemblySelection}.
 *
 * @since 2.1
 * @noextend This class is not intended to be subclassed by clients.
 */
DisassemblyViewer (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/provisional/DisassemblyViewer.java)/**
 * DisassemblyViewer
 */
IBreakpointLocationProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/provisional/IBreakpointLocationProvider.java)/**
 * <p>
 * This interface provides location information for a breakpoint to
 * determine its visual annotation position in the disassembly viewer document.
 * If a breakpoint adapts to this interface, its position in the viewer is
 * determined by the information provided by the location provider.
 * </p>
 *
 * <p>
 * Breakpoints implementing either {@link ICAddressBreakpoint} or {@link ILineBreakpoint}
 * need not provide a location provider but may do so in order to override default
 * location retrieval.
 * </p>
 *
 * <p>
 * The annotation position will be determined with the following ordering:
 * <ol>
 * <li>If there is source info, than source marker will be use by the viewer.</li>
 * <li>If there is label info, than label marker will be use by the viewer.</li>
 * <li>If there is address info, than address marker will be use by the viewer.</li>
 * <li>Otherwise, nothing will be created.</li>
 * </ol>
 * </p>
 * <br>
 * @since 2.1
 */
IDisassemblyPart (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/provisional/IDisassemblyPart.java)/**
 * Interface which the disassembly view and editor implement.
 *
 * @since 2.1
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IDisassemblySelection (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/provisional/IDisassemblySelection.java)/**
 * This interface represents a selection in a {@link IDisassemblyPart}.
 * In addition to text selection attributes this interface provides information
 * about the address and source file position for the start offset of the selection.
 *
 * @since 2.1
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
SourceColorerJob (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/SourceColorerJob.java)/**
 * UI job to color source code.
 */
SourcePosition (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/SourcePosition.java)/**
 * SourcePosition
 */
IFileRider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/IFileRider.java)/**
 * IFileRider
 */
REDDocument (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/REDDocument.java)/**
 * Standard Document implementation with REDTextStore (splice texts)
 * as text storage.
 */
Buffer (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/REDFile.java)/**
	 * File cache object.
	 * @invariant fSize <= fcBufSize
	 * @invariant fSize >= 0
	 * @invariant fOffset <= fFile.length()
	 */
REDFile (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/REDFile.java)/**
 * File with buffered character access.
 */
REDFileRider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/REDFileRider.java)/**
 * Accessor to <code>REDFile</code>s.
 */
REDRun (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/REDRun.java)/**
 * A piece of text on a scratch file.
 */
TextStoreSwapper (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/REDTextStore.java)/**
	 * This job swaps readonly IFileRider to disk.
	 */
RunSpec (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/REDTextStore.java)/**
	 * REDRunSpec represents a specification of a run, including the run itself, its origin and offset.
	 * It is used for findRun - operations.
	 */
RunPair (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/REDTextStore.java)/**
	 * auxiliary class: pair of red runs
	 */
REDTextStore (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/REDTextStore.java)/**
 * Piece list text store implementation with scratch files.
 */
StringRider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/StringRider.java)/**
 * StringRider
 */
StringTextStore (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/text/StringTextStore.java)/**
 * Readonly ITextStore implementation.
 */
HSL (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/util/HSL.java)/**
 * HSL (Hue, Saturation, Luminance) color model.
 */
StorageEditorInput (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/util/StorageEditorInput.java)/**
 * Abstract implementation of <code>IStorageEditorInput</code>.
 */
DisassemblyToggleBreakpointsTarget (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/DisassemblyToggleBreakpointsTarget.java)/**
 * Toggle breakpoint target implementation for the disassembly part.
 */
EvaluationContextManager (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/EvaluationContextManager.java)/**
 * Manages the current evaluation context (stack frame) for evaluation actions.
 * In each page, the selection is tracked in each debug view (if any). When a debug
 * target selection exists, the "debuggerActive" System property is set to true.
 * This property is used to make the "Run to Line", "Resume at Line",
 * "Move to Line" and "Add Watch Expression" actions
 * visible in editors only if there is a running debug session.
 */
ExpressionHoverPresentationContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/ExpressionInformationControlCreator.java)/**
	 * A presentation context for the expression hover control.
	 * Implements equals and hashCode based on id comparison.
	 */
DetailPaneContainer (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/ExpressionInformationControlCreator.java)/**
		 * Inner class implementing IDetailPaneContainer methods.  Handles changes to detail
		 * pane and provides limited access to the detail pane proxy.
		 */
ExpressionInformationControlCreator (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/ExpressionInformationControlCreator.java)/**
 * Creates an information control to display an expression in a hover control.
 * <br/> This class is derivative work from JDT's <code>ExpressionInformationControlCreator</code>.
 *
 * @noextend This class is not intended to be subclassed by clients.
 *
 * @since 2.1
 */
IDsfDebugHelpContextIds (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/IDsfDebugHelpContextIds.java)/**
 * @since 2.0
 */
IInternalDsfDebugUIConstants (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/IInternalDsfDebugUIConstants.java)/**
 * @since 2.0
 */
DecoratingIntegerFieldEditor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/preferences/DecoratingIntegerFieldEditor.java)/**
 * An {@link IntegerFieldEditor} with field decoration.
 *
 * @since 1.1
 */
DecoratingStringFieldEditor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/preferences/DecoratingStringFieldEditor.java)/**
 * A {@link StringFieldEditor} with field decoration.
 * @since 1.1
 */
DsfDebugPreferencePage (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/preferences/DsfDebugPreferencePage.java)/**
 * DSF debug preference page.
 */
IntegerWithBooleanFieldEditor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/preferences/IntegerWithBooleanFieldEditor.java)/**
 * An integer field editor with an enablement check box.
 */
MessagesForPreferences (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/preferences/MessagesForPreferences.java)/**
 * Preference strings.
 */
StringWithBooleanFieldEditor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/preferences/StringWithBooleanFieldEditor.java)/**
 * A string field editor with an enablement check box.
 */
SuspendResumeAdapterFactory (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/SuspendResumeAdapterFactory.java)/**
 * Adapter factory for Run-To-Line, Move-To-Line
 * and Resume-At-Line
 *
 * @since 2.1
 */
ToggleBreakpointsTargetFactory (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/ToggleBreakpointsTargetFactory.java)/**
 * Toggle breakpoints target factory for disassembly parts.
 *
 * @since 2.1
 */
DsfViewMemoryHandler (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/actions/DsfViewMemoryHandler.java)/**
 * DSF version of handler for viewing variable in memory view command.
 *
 */
RefreshActionDelegate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/actions/RefreshActionDelegate.java)/**
 *
 */
RefreshAllRetargetAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/actions/RefreshAllRetargetAction.java)/**
 *
 */
RetargetDebugContextAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/actions/RetargetDebugContextAction.java)/**
 * Base class for actions which delegate functionality to an adapter retrieved
 * from the current debug context.
 *
 * @since 1.1
 */
UpdatePoliciesContribution (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/actions/UpdatePoliciesContribution.java)/**
 * Dynamic menu contribution that shows available update policies
 * in the current view.
 *
 * @since 1.1
 */
UpdatePoliciesPropertyTester (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/actions/UpdatePoliciesPropertyTester.java)/**
 * Property tester for update policy information available through the given
 * object.  The object being tested should be either an {@link IVMContext},
 * through which an instance of {@link ICachingVMProvider} could be obtained.
 * Or it could be an {@link IWorkbenchPart}, which is tested to see if it
 * is a debug view through which a caching VM provider can be obtained.
 * The Caching View Model provider is used to test the given property.
 * <p>
 * Three properties are supported:
 * <ul>
 * <li> "areUpdatePoliciesSupported" - Checks whether update policies are
 * available at all given the receiver.</li>
 * <li> "isUpdatePolicyAvailable" - Checks whether the update policy in the
 * expected value is available for the given receiver.</li>
 * <li> "isUpdatePolicyActive" - Checks whether the policy given in the expected
 * value is the currently active policy for the given receiver.</li>
 * </ul>
 * </p>
 */
DetailPaneMaxLengthAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/detailsupport/DetailPaneMaxLengthAction.java)/**
 * Opens a dialog so that the user can enter the maximum length in characters that
 * the detail pane should display.
 *
 * @see DetailPaneMaxLengthDialog
 * @since 3.0
 */
DetailPaneMaxLengthDialog (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/detailsupport/DetailPaneMaxLengthDialog.java)/**
 * Provides a dialog for changing the maximum length allowed in the detail pane
 *
 * @since 3.0
 */
DetailPaneWordWrapAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/detailsupport/DetailPaneWordWrapAction.java)/**
 * An check box action that allows the word wrap property to be set, determining if the detail pane
 * should wrap text.
 */
TextViewerAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/detailsupport/TextViewerAction.java)/**
 * Common function for actions that operate on a text viewer.
 * <p>
 * Clients may subclass this class.
 * </p>
 * @since 3.0
 */
DsfCastToTypeSupport (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/DsfCastToTypeSupport.java)/**
 * This provides {@link ICastToType} and {@link ICastToArray} support on
 * expression nodes.
 */
MessagesForNumberFormatDetailPane (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/numberformat/detail/MessagesForNumberFormatDetailPane.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DetailJob (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/numberformat/detail/NumberFormatDetailPane.java)/**
	 * Job to compute the details for a selection
	 */
VMViewerUpdateTracing (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/viewmodel/VMViewerUpdateTracing.java)/**
 * Constants and utility functions used to trace VMViewerUpdate results. As
 * VMViewerUpdate is an external class, we avoid polluting that API by housing
 * these trace facilities in an internal package.
 */
AbstractDsfDebugTextHover (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/AbstractDsfDebugTextHover.java)/**
 * An implementation of AbstractDebugTextHover using DSF services
 *
 * @since 2.1
 */
AbstractDisassemblyBreakpointsTarget (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/AbstractDisassemblyBreakpointsTarget.java)/**
 * Base class for toggle breakpoint targets for the disassembly part.
 * @since 2.2
 */
DsfCommandRunnable (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/DsfCommandRunnable.java)/**
 * @since 1.0
 */
DsfResumeCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/DsfResumeCommand.java)/**
 *
 * @since 1.0
 */
DsfStepIntoCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/DsfStepIntoCommand.java)/**
 *
 * @since 1.0
 */
DsfStepIntoSelectionCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/DsfStepIntoSelectionCommand.java)/**
 * @since 2.4
 */
DsfStepIntoSelectionHyperlinkDetector (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/DsfStepIntoSelectionHyperlinkDetector.java)/**
 * @since 2.4
 *
 */
DsfStepOverCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/DsfStepOverCommand.java)/**
 *
 * @since 1.0
 */
DsfSteppingModeTarget (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/DsfSteppingModeTarget.java)/**
 *
 * @since 1.0
 */
DsfStepReturnCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/DsfStepReturnCommand.java)/**
 *
 * @since 1.0
 */
DsfSuspendCommand (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/DsfSuspendCommand.java)/**
 *
 * @since 1.0
 */
IDsfStepIntoSelection (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/IDsfStepIntoSelection.java)/**
 * @since 2.4
 */
DsfSuspendTrigger (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/contexts/DsfSuspendTrigger.java)/**
 * DSF implementation of the ISuspendTrigger interface.  The suspend trigger
 * is used by the IDE to trigger activation of the debug perspective when
 * the debugger suspends.
 *
 * @see ISuspendTrigger
 *
 * @since 1.0
 */
DsfDebugTextHover (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/DsfDebugTextHover.java)/**
 * A default hover provided by DSF.  Any hover provided by another
 * debugger integration using DSF will automatically override this one
 * based on the <code>BestMatchHover</code> class.
 *
 * @since 2.1
 */
DsfDebugUITools (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/DsfDebugUITools.java)/**
 * @since 1.1
 */
IDsfDebugUIConstants (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/IDsfDebugUIConstants.java)/**
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 1.0
 */
RefreshAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/memory/RefreshAction.java)/**
 *
 * @since 2.0  Moved to different package, exists since 1.0.
 */
SelectUpdatePolicyAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/memory/SelectUpdatePolicyAction.java)/**
 *
 * @since 2.0  Moved to different package, exists since 1.0.
 */
LookupJob (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/DsfSourceDisplayAdapter.java)/**
	 * A job to perform source lookup on the given DMC.
	 */
DisplayJob (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/DsfSourceDisplayAdapter.java)/**
	 * Job that positions the editor and paints the IP Annotation for given DMC.
	 */
ClearingJob (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/DsfSourceDisplayAdapter.java)/**
	 * Job that removes the old IP Annotations associated with given execution
	 * context.
	 */
DsfSourceDisplayAdapter (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/DsfSourceDisplayAdapter.java)/**
 * Source display adapter that performs the source lookup, opens the editor, and
 * paints the IP for the given object.
 * <p>
 * The implementation relies on three types of jobs to perform the
 * operations.<br>
 * - The first kind, "lookup job" performs the source lookup operation. <br>
 * - The second "display job" positions and annotates the editor. <br>
 * - The third clears the old IP annotations when a thread or process has
 * resumed or exited.
 * </p>
 * <p>
 * The the lookup jobs can run in parallel with the display or the clearing job,
 * but the clearing job and the display job must not run at the same time. Hence
 * there is some involved logic which ensures that the jobs are run in proper
 * order. To avoid race conditions, this logic uses the session's dispatch
 * thread to synchronize access to the state data of the running jobs.
 * </p>
 * <p>
 * Debuggers can override the default source editor used by the source display
 * adapter by registering their own ISourcePresentation adapter.
 * </p>
 *
 * @see ISourcePresentation
 *
 * @since 1.0
 */
IInstructionPointerPresentation (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/IInstructionPointerPresentation.java)/**
 * Clients may implement this interface to override annotations used to display
 * instruction pointers for stack frames.
 * <p>
 * This interface is modeled after the platform interface
 * {@link org.eclipse.debug.ui.IInstructionPointerPresentation}.
 * </p>
 * <p>
 * A client has several options when overriding default instruction pointer
 * annotations. The following prioritized order is used to compute an annotation
 * for a stack frame.
 * <ol>
 * <li>Specify the annotation object to use. This is done by returning a non-
 * <code>null</code> value from <code>getInstructionPointerAnnotation(..)</code>
 * .</li>
 * <li>Specify an <code>annotationType</code> extension to use. This is done by
 * returning a non-<code>null</code> value from
 * <code>getInstructionPointerAnnotationType(..)</code>. When specified, the
 * annotation type controls the image displayed via its associated
 * <code>markerAnnotationSpecification</code>.</li>
 * <li>Specify the image to use. This is done by returning a non-
 * <code>null</code> value from <code>getInstructionPointerImage(..)</code>.</li>
 * </ol>
 * Additionally, when specifying an annotation type or image the text for the
 * instruction pointer may be specified by returning a non-<code>null</code>
 * value from <code>getInstructionPointerText(..)</code>.
 * </p>
 * <p>
 * These methods are called when the debugger has opened an editor to display
 * source for the given stack frame. The image will be positioned based on stack
 * frame line number and character ranges.
 * </p>
 *
 * @see org.eclipse.debug.ui.IInstructionPointerPresentation
 * @since 2.0
 */
InstructionPointerImageProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/InstructionPointerImageProvider.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @noextend This class is not intended to be subclassed by clients.
 * @since 1.0
 * @deprecated Not used anymore.
 */
IPAnnotation (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/InstructionPointerManager.java)/**
	 * Editor annotation object for instruction pointers.
	 */
AnnotationWrapper (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/InstructionPointerManager.java)/**
	 * Represents the context for a single instruction pointer.  This is a convenience class
	 * used to store the three objects that comprise an instruction pointer 'context' so it
	 * can be stored in collections.
	 */
InstructionPointerManager (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/InstructionPointerManager.java)/**
 * This class tracks instruction pointer contexts for a single DSF session.
 */
Messages (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/Messages.java)/**
 * @since 2.1
 */
SourceLookupResult (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/SourceLookupResult.java)/**
 * The result of a source lookup contains the source element, editor id, and
 * editor input resolved for a debug artifact.
 *
 * @since 3.1
 */
AbstractDebugVMAdapter (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java)/**
 * Base class for VM adapters used for implementing a debugger integration.
 *
 * @since 1.1
 */
AbstractVMProviderActionDelegate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/actions/AbstractVMProviderActionDelegate.java)/**
 * @since 1.1
 */
DefaultRefreshAllTarget (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/actions/DefaultRefreshAllTarget.java)/**
 * The default implementation of the refresh all debug target which
 * calls the active VM providers, to ask them to refresh.
 *
 * @since 1.1
 */
IRefreshAllTarget (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/actions/IRefreshAllTarget.java)/**
 * A retargetable action target which allows a debugger to refresh all of its
 * active views with fresh data from the debug target.
 *
 * @since 1.1
 */
VMHandlerUtils (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/actions/VMHandlerUtils.java)/**
 * Static utility methods for use with View Model related
 * commands and handlers.
 *
 * @since 1.1
 */
AbstractBreakpointVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/AbstractBreakpointVMNode.java)/**
 * Base class for breakpoint VM Nodes.  Concrete implementations must
 * implement the breakpoint object to be populated into the view.
 * Also this node only implements the content provider so sub-classes
 * must also implement a label provider, element editor, etc.
 *
 * @since 2.1
 */
BreakpointOrganizerVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/BreakpointOrganizerVMContext.java)/**
 *
 *
 * @since 2.1
 */
BreakpointOrganizerVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/BreakpointOrganizerVMNode.java)/**
 *
 *
 * @since 2.1
 */
BreakpointsChangedEvent (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/BreakpointsChangedEvent.java)/**
 * @since 2.1
 */
BreakpointVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/BreakpointVMContext.java)/**
 * @since 2.1
 */
BreakpointVMInput (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/BreakpointVMInput.java)/**
 * @since 2.1
 */
BreakpointVMModelProxyStrategy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/BreakpointVMModelProxyStrategy.java)/**
 * Breakpoints VM model proxy that includes an ICheckboxModelProxy implementation.
 *
 * @since 2.1
 */
BreakpointVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/BreakpointVMNode.java)/**
 * Breakpoint VM Node which uses VM Contexts to populate breakpoint elements
 * in the view.  Any actions or other selection listeners which depend on the
 * breakpoint object will not work with these elements unless they use the
 * adapter mechanism to obtain the breakpoints.
 *
 * @since 2.1
 */
BreakpointVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/BreakpointVMProvider.java)/**
 * The breakpoint provider is used to populate the contents of the breakpoints
 * view.
 *
 * @since 2.1
 */
DataCache (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/DataCache.java)/**
 * A general purpose cache, which caches the result of a single request.
 * Sub classes need to implement {@link #retrieve(DataRequestMonitor)} to fetch
 * data from the data source.  Clients are responsible for calling
 * {@link #disable()} and {@link #reset()} to manage the state of the cache in
 * response to events from the data source.
 * <p>
 * This cache requires an executor to use.  The executor is used to synchronize
 * access to the cache state and data.
 * </p>
 * <p>
 * This class is intended as a general utility, but it's not quite ready for
 * API, so it's just private class for now.
 * </p>
 * @since 2.1
 */
RawBreakpointVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/breakpoints/RawBreakpointVMNode.java)/**
 * Breakpoint node which uses raw breakpoint objects (without a wrapper) as
 * elements which are populated into the view.  The breakpoint objects are
 * responsible for supplying their own label and memento providers, as well
 * as content provider for any children.
 *
 * @since 2.1
 */
ErrorLabelForeground (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/ErrorLabelForeground.java)/**
 * Label attribute that sets the label color to the standard workbench
 * error color.  The color is activated when the property update contains
 * a status with error codes: {@link IDsfStatusConstants#INTERNAL_ERROR},
 * {@link IDsfStatusConstants#REQUEST_FAILED}, or
 * {@link IDsfStatusConstants#NOT_SUPPORTED}.
 *
 * @since 2.2
 */
ErrorLabelText (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/ErrorLabelText.java)/**
 * Label attribute that fills in the text of an error status into the label
 * column.
 *
 * @since 2.0
 */
AbstractExpressionVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/AbstractExpressionVMNode.java)/**
 * Base class for VM Nodes which can be used in the expressions view.
 * <p>
 * This base class uses the methods {@link #canParseExpression(IExpression)} and
 * {@link #update(IChildrenUpdate[])} to implement the
 * {@link IExpressionVMNode#update(IExpressionUpdate)}
 * method.  Two additional abstract protected methods need to be implemented
 * by the sub-class as well.
 * </p>
 */
DisabledExpressionVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/DisabledExpressionVMNode.java)/**
 * Expression VM Node which handles displaying disabled expressions.
 *
 * @since 2.1
 */
ExpressionColumnPresentation (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/ExpressionColumnPresentation.java)/**
 *
 */
NewExpressionVMC (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/ExpressionManagerVMNode.java)/**
	 * VMC for a new expression object to be added.  When user clicks on this node to
	 * edit it, he will create a new expression.
	 */
ExpressionManagerVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/ExpressionManagerVMNode.java)/**
 * This is the top-level view model node in the expressions view.  Its job is to:
 * <li>
 *   <ol> retrieve the {@link IExpression} objects from the global {@link IExpressionManager},</ol>
 *   <ol> retrieve the expression string from the <code>IExpression</code> object,</ol>
 *   <ol> then to call the configured expression nodes to parse the expression string.</ol>
 * </li>
 * <p>
 * This node is not intended to have any standard child nodes, therefore
 * the implementation of {@link #setChildNodes(IVMNode[])} throws an exception.
 * Instead users should call {@link #setExpressionNodes(IExpressionVMNode[])}
 * to configure the nodes that this node will delegate to when processing expressions.
 * </p>
 */
ExpressionsBreakpointHitUpdatePolicy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/ExpressionsBreakpointHitUpdatePolicy.java)/**
 * Manual update policy which selectively clears the cache when the expressions
 * in the expression manager are modified.
 */
ExpressionsChangedEvent (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/ExpressionsChangedEvent.java)/**
 * Object representing a change in configured expressions.  This event is
 * object is used when generating a model delta.
 */
ExpressionsManualUpdatePolicy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/ExpressionsManualUpdatePolicy.java)/**
 * Manual update policy which selectively clears the cache when the expressions
 * in the expression manager are modified.
 * Inherit from DebugManualUpdatePolicy so that expression view can return
 * proper update testers for preference format change event and element format
 * change event just like what variables view and registers view do. (Bug 202556)
 */
ExpressionVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/ExpressionVMProvider.java)/**
 * The expression provider is used to populate the contents of the expressions
 * view.  The node hierarchy in this view is a little different than in a typical
 * provider: the expression manager node should be registered as the single child
 * of the root node and no nodes should be registered as children of expression node.
 * Instead the top level expression nodes should be registered with a call to
 * {@link #setExpressionNodes(IExpressionVMNode[])}.  And each expression node can
 * have its own sub-hierarchy of elements as needed.  However all nodes configured
 * with this provider (with the exception of the root and the expression manager)
 * should implement {@link IExpressionVMNode}.
 */
ExpressionVMProviderContentStragegy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/ExpressionVMProviderContentStragegy.java)/**
 * The IElementContentProvider implementation to be used with an expression
 * view model provider.
 *
 * @see ExpressionVMProvider
 */
ExpressionVMProviderModelProxyStrategy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/ExpressionVMProviderModelProxyStrategy.java)/**
 * The IModelProxy implementation to be used with an expression
 * view model provider.
 *
 * @see ExpressionVMProvider
 */
IExpressionUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/IExpressionUpdate.java)/**
 * An update for an element based on the given expression.  The provider processing
 * this update needs to create an expression element based on the tree path and the
 * expression object in this update.
 */
IExpressionVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/IExpressionVMNode.java)/**
 * Interface for view model nodes that can be used within the expression view.
 * The methods of this interface allow the {@link ExpressionManagerVMNode}
 * to use this node to delegate expression parsing to this node, and to
 * generate deltas for expressions that are owned by this node.
 */
InvalidExpressionVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/InvalidExpressionVMContext.java)/**
 * VMC of an expression object that failed to get parsed by any of the
 * configured expression layout nodes.  It is only used to display an
 * error message in the view, and to allow the user to edit the
 * expression.
 * <p>
 * Note: VM Nodes using this invalid expression VM context should
 * provide a cell modifier to edit the expressions.  The cell modifier
 * should subclass {@link WatchExpressionCellModifier}.
 * </p>
 *
 * @since 1.1
 */
MessagesForExpressionVM (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/MessagesForExpressionVM.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
SingleExpressionVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/SingleExpressionVMNode.java)/**
 * A VM node for displaying a single expression in the expression hover.
 *
 * @since 2.1
 */
VMExpressionUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/VMExpressionUpdate.java)/**
 *
 */
WatchExpressionCellModifier (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/WatchExpressionCellModifier.java)/**
 *
 */
WatchExpressionDelegate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/expression/WatchExpressionDelegate.java)/**
 *
 */
IDebugVMConstants (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/IDebugVMConstants.java)/**
 * Public constants used in the debug view model.
 *
 * @since 1.0
 */
AbstractContainerVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/AbstractContainerVMNode.java)/**
 * Abstract implementation of a container view model node.
 * Clients need to implement {@link #updateLabelInSessionThread(ILabelUpdate[])}.
 *
 * @since 1.1
 */
AbstractExecutionContextVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/AbstractExecutionContextVMNode.java)/**
 * This class is a base class of AbstractThreadVMNode and AbstractContainerVMNode.
 * It contains common functionality between these classes.
 *
 * The main reason this class is introduced is to allow the debug view to
 * show multiple levels of execution containers and properly handle the delta generation.
 *
 * In the longer term we would like to merge the classes AbstractContainerVMNode and
 * AbstractThreadVMNode. That will make the implementation of both classes
 * more generic and robust in the case of recursive containers.
 *
 * Having this class as a base for both AbstractContainerVMNode and
 * AbstractThreadVMNode enables us to merge them in the future.
 *
 * Originally DefaultVMModelProxyStrategy didn't accept recursive containers for
 * generating deltas, even though they are accepted and supported by
 * AbstractDMVMProvider for viewing.
 * The approach I took to support recursive containers for delta generation is to have
 * the VMNodes generate their deltas level by level, instead of one whole delta at once.
 * That required changes in identifying which is the correct context for each of the events.
 *
 * See: https://bugs.eclipse.org/bugs/show_bug.cgi?id=240208
 *
 * @since 2.2
 * @experimental
 */
AbstractLaunchVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/AbstractLaunchVMProvider.java)/**
 * @since 1.1
 */
AbstractThreadVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/AbstractThreadVMNode.java)/**
 * Abstract implementation of a thread view model node.
 * Clients need to implement {@link #updateLabelInSessionThread(ILabelUpdate[])}.
 *
 * @since 1.1
 */
ExpandStackAction (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/actions/ExpandStackAction.java)/**
 * Increment the (temporary) stack limit for the selected stack.
 */
DefaultDsfModelSelectionPolicyFactory (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/DefaultDsfModelSelectionPolicyFactory.java)/**
 * Default model selection policy factory for DSF.
 * @since 1.1
 */
DefaultDsfSelectionPolicy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/DefaultDsfSelectionPolicy.java)/**
 * Default DSF selection policy implementation modeled after platform version
 * (<code>DefaultSelectionPolicy</code>).
 * @since 1.1
 */
DelayedStackRefreshUpdatePolicy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/DelayedStackRefreshUpdatePolicy.java)/**
 * An update strategy decorator specialized for delayed stack frame refresh. The
 * strategy flushes only the cached top stack frame in case of an normal {@link ISuspendedDMEvent},
 * while in case of a special {@link FullStackRefreshEvent} everything is invalidated.
 *
 * <p>
 * The underlying base update policy is considered for container contexts only.
 * In other cases the cache data is always flushed.
 * </p>
 *
 * @since 1.1
 */
ExecutionContextLabelText (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/ExecutionContextLabelText.java)/**
 * @since 2.0
 */
ExpandStackEvent (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/ExpandStackEvent.java)/**
 * Event to increase the stack frame limit for an execution context.
 *
 * @since 1.1
 */
FullStackRefreshEvent (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/FullStackRefreshEvent.java)/**
 * Indicates the end of a sequence of steps. Should be handled like a suspended
 * event to trigger a full refresh of stack frames.
 *
 * @since 1.1
 */
ILaunchVMConstants (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/ILaunchVMConstants.java)/**
 * @since 2.0
 */
LaunchRootVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/LaunchRootVMNode.java)/**
 * Layout node for the standard ILaunch object.  This node can only be used at
 * the root of a hierarchy.  It does not implement the label provider
 * functionality, so the default adapters should be used to retrieve the label.
 */
LaunchVMUpdateMessages (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/LaunchVMUpdateMessages.java)/**
 * @since 1.1
 */
MessagesForLaunchVM (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/MessagesForLaunchVM.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
IncompleteStackVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/StackFramesVMNode.java)/**
	 * View model context representing the end of an incomplete stack.
	 *
	 * @since 1.1
	 */
StandardProcessVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/StandardProcessVMNode.java)/**
 * Layout node for the standard platform debug model IProcess object. This
 * node requires that an ILaunch object be found as an ancestor of this node.
 * It does not implement the label provider functionality, so the default
 * adapters should be used to retrieve the label.
 */
StateChangedEvent (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/launch/StateChangedEvent.java)/**
 * A generic UI state changed event.
 *
 * @since 2.2
 */
MessagesForDebugVM (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/MessagesForDebugVM.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DetailJob (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/modules/detail/ModuleDetailPane.java)/**
	 * Job to compute the details for a selection
	 */
ModuleDetailPane (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/modules/detail/ModuleDetailPane.java)/**
 *
 */
ModulesAbstractDetailPane (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/modules/detail/ModulesAbstractDetailPane.java)/**
 * Abstract class that holds common methods used by implementors of IDetailPane.
 */
ModulesMessages (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/modules/detail/ModulesMessages.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MessagesForModulesVM (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/modules/MessagesForModulesVM.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ModuleVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/modules/ModulesVMNode.java)/**
	 * Marker type for the modules VM context.  It allows action enablement
	 * expressions to check for module context type.
	 */
ModulesVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/modules/ModulesVMNode.java)/**
 * @since 1.0
 */
ModulesVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/modules/ModulesVMProvider.java)/**
 * @since 1.0
 */
AbstractElementVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/AbstractElementVMProvider.java)/**
 * Base class for view model providers that can support individual element formatting.
 * Extending classes can override {@link #supportFormat(IVMContext)} to return false
 * if they do not want to support individual element formatting.
 */
ElementNumberFormatProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/ElementNumberFormatProvider.java)/**
 * Default implementation of the {@link IElementFormatProvider}.  It can be
 * used within any {@link IVMProvider} to store and persist number-formats
 * selected by user for different elements.
 *
 * @since 2.5
 */
ElementNumberFormatsContribution (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/ElementNumberFormatsContribution.java)/**
 * Dynamic menu contribution that shows available number formats in the current
 * selection of the view.
 *
 * @since 2.2
 */
FormattedValueLabelText (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/FormattedValueLabelText.java)/**
 * Label attribute that fills in the formatted value text using the active
 * number format for the view.
 *
 * @since 2.0
 */
FormattedValueRetriever (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/FormattedValueRetriever.java)/**
 * A helper class for View Model Node implementations that support elements
 * to be formatted using different number formats.  This object can be
 * instantiated by a VM node to retrieve formatted values from a given service
 * using given DMC type.
 * <p>
 * Note: This class is a replacement for the {@link FormattedValueVMUtil#updateFormattedValues(IPropertiesUpdate[], IFormattedValues, Class, RequestMonitor)}
 * static method.  This new implementation retrieves cached values if they are
 * available in the VM Cache.
 * </p>
 *
 * @see FormattedValueVMUtil
 * @see org.eclipse.cdt.dsf.ui.viewmodel.properties.IElementPropertiesProvider
 * @see org.eclipse.cdt.dsf.debug.service.IFormattedValues
 *
 * @since 2.0
 */
FormattedValueVMUtil (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/FormattedValueVMUtil.java)/**
 * A helper class for View Model Node implementations that support elements
 * to be formatted using different number formats.  The various static methods in
 * this class handle populating the properties of an IPropertiesUpdate using data
 * retrieved from a DSF service implementing {@link IFormattedValues} interface.
 *
 * @see org.eclipse.cdt.dsf.ui.viewmodel.properties.IElementPropertiesProvider
 * @see org.eclipse.cdt.dsf.debug.service.IFormattedValues
 *
 * @since 2.0
 */
IElementFormatProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/IElementFormatProvider.java)/**
 * Element format provider - an optional interface that provides individual element format
 * A view model provider (org.eclipse.cdt.dsf.ui.viewmodel.IVMProvider) can optionally implement this interface.
 * If there is a requirement to persist individual format settings, this provider can
 * add an persistable (IPersistable) property to PresentationContext so that when presentation context
 * is invoked to persist its properties, the individual format settings are persisted as well.
 *
 * @since 2.2
 */
IFormattedValueVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/IFormattedValueVMContext.java)/**
 * @since 1.0
 */
MessagesForNumberFormat (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/MessagesForNumberFormat.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
NumberFormatsContribution (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/NumberFormatsContribution.java)/**
 * Dynamic menu contribution that shows available number formats
 * in the current view.
 *
 * @since 1.1
 */
NumberFormatsPropertyTester (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/NumberFormatsPropertyTester.java)/**
 * Property tester for number format information available through the given
 * object.  The object being tested should be either an {@link IVMContext},
 * through which an instance of {@link IVMProvider} could be obtained.
 * Or it could be an {@link IWorkbenchPart}, which is tested to see if it
 * is a debug view through which a caching VM provider can be obtained.
 * The view's presentation context is used to test the given property.
 * <p>
 * Three properties are supported:
 * <ul>
 * <li> "areNumberFormatsSupported" - Checks whether number formats are
 * available at all given the receiver.</li>
 * <li> "isNumberFormatAvailable" - Checks whether the number format ID in the
 * expected value is available for the given receiver.</li>
 * <li> "isNumberFormatActive" - Checks whether the number format ID in the expected
 * value is the currently active number format for the given receiver.</li>
 * </ul>
 * </p>
 *
 * @since 1.0
 */
RestoreNumberFormatPreferenceContribution (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/numberformat/RestoreNumberFormatPreferenceContribution.java)/**
 * Dynamic menu contribution that restores the element number format in the current
 * selection of the view to view's preference.
 *
 * We pull 'restore to preference' menu item out from ElementNumberFormatsContribution
 * so that clients can add extra contribution before or after it. See 371012.
 * @since 2.3
 */
IRegisterVMConstants (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/register/IRegisterVMConstants.java)/**
 * @since 2.0
 */
MessagesForRegisterVM (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/register/MessagesForRegisterVM.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
RegisterColumnPresentation (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/register/RegisterColumnPresentation.java)/**
 *
 */
RegisterVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/register/RegisterVMNode.java)/**
 * @since 1.0
 */
RegisterVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/register/RegisterVMProvider.java)/**
 *  Provides the VIEW MODEL for the DEBUG MODEL REGISTER view.
 */
SimpleMapPersistable (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/SimpleMapPersistable.java)/**
 * Generic persistable for storing a map of simple values.
 * <br>
 * Currently supported value types are {@link Integer} and {@link String}.
 *
 * @since 2.5
 */
SimpleMapPersistableFactory (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/SimpleMapPersistableFactory.java)/**
 * Persistable factory the simple map persistable.
 *
 * @since 2.5
 *
 * @see SimpleMapPersistable
 */
SteppingTimedOutEvent (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/SteppingController.java)/**
	 * Indicates that the given context has been stepping for some time,
	 * and the UI (views and actions) may need to be updated accordingly.
	 */
ISteppingControlParticipant (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/SteppingController.java)/**
	 * Interface for clients interested in stepping control. When a stepping
	 * control participant is registered with the stepping controller, it is
	 * expected to call
	 * {@link SteppingController#doneStepping(IExecutionDMContext, ISteppingControlParticipant)
	 * doneStepping} as soon as a "step", i.e. a suspended event has been
	 * processed. If synchronized stepping is enabled, further stepping is
	 * blocked until all stepping control participants have indicated completion
	 * of event processing or the maximum timeout
	 * {@link SteppingController#MAX_STEP_DELAY} has been reached.
	 *
	 * @see SteppingController#addSteppingControlParticipant(ISteppingControlParticipant)
	 * @see SteppingController#removeSteppingControlParticipant(ISteppingControlParticipant)
	 */
SteppingController (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/SteppingController.java)/**
 * This class builds on top of standard run control service to provide
 * functionality for step queuing and delaying. Step queuing essentially allows
 * user to press and hold the step key and achieve maximum stepping speed. If
 * this class is used, other service implementations, such as stack and
 * expressions, can use it to avoid requesting data from debugger back end if
 * another step is about to be executed.
 *
 * @since 1.1
 */
BreakpointHitUpdatePolicy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/update/BreakpointHitUpdatePolicy.java)/**
 * @since 1.0
 */
DebugManualUpdatePolicy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/update/DebugManualUpdatePolicy.java)/**
 * Manual update policy with extensions specific for the debugger views.  It
 * properly handles the changes in active number format values in debug view.
 * This requires clearing of cached properties related to the active format
 * preference, but not clearing the formatted value data retrieved from the
 * service.
 *
 * @since 2.1
 */
ElementFormatEvent (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/update/ElementFormatEvent.java)/**
 * An event that indicates the format of certain elements has changed.
 * Even when a viewer is configured to be in a manual update mode, there is a need to
 * update the labels/states of elements.
 *
 * @since 2.2
 */
ElementFormatUpdateTester (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/update/ElementFormatUpdateTester.java)/**
 * An update tester for element format event (ElementFormatEvent). This tester
 * flushes partial properties for elements that are affected by a change of
 * element format.
 *
 * @since 2.2
 */
MessagesForVMUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/update/MessagesForVMUpdate.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MessagesForVariablesVM (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/variable/MessagesForVariablesVM.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
CanWriteExpressionQuery (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/variable/SyncVariableDataAccess.java)/**
	 * @since 1.1
	 */
VariableColumnPresentation (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/variable/VariableColumnPresentation.java)/**
 *
 */
VariableLabelFont (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/variable/VariableLabelFont.java)/**
 * @since 2.0
 */
DsfUILabelImage (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/internal/ui/DsfUILabelImage.java)/**
 * @since 2.0
 */
DsfUIPlugin (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/internal/ui/DsfUIPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
DisplayDsfExecutor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/concurrent/DisplayDsfExecutor.java)/**
 * DSF executor which uses the display thread to run the submitted runnables
 * and callables.  The implementation is based on the default DSF executor
 * which still creates its own thread.  However this thread blocks when running
 * each executable in the display thread.
 *
 * @since 1.0
 */
SimpleDisplayExecutor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/concurrent/SimpleDisplayExecutor.java)/**
 * A simple executor which uses the display thread to run the submitted
 * runnables. It only implements the {@link Executor}, and NOT the more
 * sophisticated {@link DsfExecutor} (which extends
 * {@link java.util.concurrent.ScheduledExecutorService}). However, this
 * implementation is much more efficient than DisplayDsfExecutor as it does
 * not use a separate thread or maintain its own queue.
 *
 * @since 1.0
 */
ViewerCountingRequestMonitor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/concurrent/ViewerCountingRequestMonitor.java)/**
 * Counting multi data request monitor that takes a <code>IViewerUpdate</code>
 * as a parent. If the IViewerUpdate is canceled, this request monitor becomes
 * canceled as well.
 *
 * @see IViewerUpdate.
 *
 * @since 1.0
 */
ViewerDataRequestMonitor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/concurrent/ViewerDataRequestMonitor.java)/**
 * Data Request monitor that takes <code>IViewerUpdate</code> as a parent.
 * If the IViewerUpdate is canceled, this request monitor becomes canceled as well.
 * @see IViewerUpdate
 *
 * @since 1.0
 */
ViewerRequestMonitor (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/concurrent/ViewerRequestMonitor.java)/**
 * Data Request monitor that takes <code>IViewerUpdate</code> as a parent.
 * If the IViewerUpdate is canceled, this request monitor becomes canceled as well.
 * @see IViewerUpdate
 *
 * @since 2.0
 */
AbstractVMAdapter (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/AbstractVMAdapter.java)/**
 * Base implementation for View Model Adapters.  The implementation uses
 * its own single-thread executor for communicating with providers and
 * layout nodes.
 *
 * @since 1.0
 */
AbstractVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/AbstractVMContext.java)/**
 * Implementation of basic view model context interface.
 * <p>  The main purpose of the VMC wrapper is to re-direct adapter
 * queries.  The redirecting of adapter queries follows this order:
 * <ol>
 * <li>If context implements the adapter itself, it is returned.</li>
 * <li>If the VM Adapter implements the adapter, the VM Adapter is returned.</li>
 * <li>If the VM Provider implements the adapter, the VM Provider is returned.</li>
 * <li>If the VM Node implements the adapter, the VM Node is returned.</li>
 * </ol>
 * </p>
 * <p>
 * Note: Deriving classes must override the Object.equals/hashCode methods.
 * This is because the view model context objects are just wrappers that are
 * created by the view model on demand, so the equals methods must use the
 * object being wrapped to perform a meaningful comparison.
 *
 * @since 1.0
 */
AbstractVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/AbstractVMNode.java)/**
 * Base implementation of the view model node.
 * The main functionality implemented here is for building the view model
 * deltas (IModelDelta), based on the flags returned by child nodes.
 *
 * @since 1.0
 */
AbstractVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/AbstractVMProvider.java)/**
 * View model provider implements the asynchronous view model functionality for
 * a single view.  This provider is just a holder which further delegates the
 * model provider functionality to the view model nodes that need
 * to be configured with each provider.
 *
 * <p/>
 * The view model provider, often does not provide the model for the entire
 * view.  Rather, it needs to be able to plug in at any level in the viewer's
 * content model and provide data for a sub-tree.
 *
 * <p/>
 * Clients are intended to extend this class.
 *
 * @see IModelProxy
 * @see IVMNode
 *
 * @since 1.0
 */
AbstractDMVMAdapter (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/datamodel/AbstractDMVMAdapter.java)/**
 * Base implementation for DSF-based view model adapters.
 *
 * @since 1.0
 */
DMVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/datamodel/AbstractDMVMNode.java)/**
	 * IVMContext implementation used for this schema node.
	 */
AbstractDMVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/datamodel/AbstractDMVMNode.java)/**
 * View model node based on a single IDMContext type. All the elements created
 * by this node are of that type.
 *
 * @since 1.0
 */
AbstractDMVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/datamodel/AbstractDMVMProvider.java)/**
 * View model provider implements the asynchronous view model functionality for
 * a single view.  This provider is just a holder which further delegates the
 * model provider functionality to the view model nodes that need
 * to be configured with each provider.
 * <p>
 * The view model provider, often does not provide the model for the entire
 * view.  Rather, it needs to be able to plug in at any level in the viewer's
 * content model and provide data for a sub-tree.
 *
 * @see IAsynchronousContentAdapter
 * @see IAsynchronousLabelAdapter
 * @see IModelProxy
 * @see IVMNode
 *
 * @since 1.0
 */
CompositeDMVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/datamodel/CompositeDMVMContext.java)/**
 * Object used to combine several DM Contexts found in a tree path of a viewer
 * update.  This object allows the view model to pass complete data model context
 * information found in the view to the services.
 *
 * @since 1.0
 */
IDMVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/datamodel/IDMVMContext.java)/**
 * Interface for a view model context based on a DSF data model context.
 *
 * @since 1.0
 */
RootDMVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/datamodel/RootDMVMNode.java)/**
 * This is is a standard root node which listens to the selection in Debug View.
 * Views such as variables and registers base their content on the
 * selection in Debug view, and this node provides tracking of that selection.
 * <p>
 * Note: The variables/registers views track the selection using the same
 * IDebugContextListener interface, but they only use the first element of the
 * selection, as in IStructuredSelection.getFirstElement().  Therefore the root
 * node also has to use the first element as the root object instead of the
 * whole selection.
 *
 * @since 1.0
 */
DefaultVMContentProviderStrategy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/DefaultVMContentProviderStrategy.java)/**
 * The default strategy for implementing the IElementContentProvider
 * functionality for an IVMProvider. It implements an algorithm to populate
 * contents of the view in accordance with the tree structure of the view model
 * nodes configured in the view model provider.
 * <p/>
 * This class may be used by an <code>IVMProvider</code> directly, or it may be
 * be extended to customize for the provider's needs.
 * <p/>
 * This class is closely linked with a view model provider which is required for
 * the constructor. The view model provider is used to access the correct
 * executor and the node hierarchy.
 *
 * @since 1.0
 */
DefaultVMModelProxyStrategy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/DefaultVMModelProxyStrategy.java)/**
 * This is the default implementation of {@link IModelProxy} interface for
 * use by a view model provider.  It implements an algorithm to walk the
 * tree hierarchy of nodes configured with a provider in order to compose
 * an {@link IModelDelta} for a given data model event.
 * <p/>
 * This class is closely linked with a view model provider which is required
 * for the constructor.  The view model provider is used to access the correct
 * executor and the node hierarchy.
 *
 * @since 1.0
 */
IRootVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/IRootVMNode.java)/**
 * Special type of the view model node, which can be used as a root node
 * for a hierarchy.  The root node of a layout hierarchy has to implement this
 * interface.
 *
 * @since 1.0
 */
IVMAdapter (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/IVMAdapter.java)/**
 * The View Model adapter handles the layout of a given data model within a
 * set of viewers.  This adapter should be returned by an adapter factory for
 * the input object of the viewer, and this adapter implementation will then
 * populate the view contents.
 *
 * @since 1.0
 */
IVMContext (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/IVMContext.java)/**
 * View model element which is stored as the data object of nodes in the viewer.
 * The implementation of this interface is usually a wrapper object for an object
 * from some data model, which is then used to correctly implement the
 * {@link #equals(Object)} and {@link #hashCode()} methods of this wrapper.
 *
 * @since 1.0
 */
IVMEventListener (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/IVMEventListener.java)/**
 * A listener participating in event notifications sent out from VM adapter.
 *
 * @since 1.1
 */
IVMModelProxy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/IVMModelProxy.java)/**
 * View Model extension to the platform IModelProxy interface.  This extension
 * allows the IVMProvider implementation to delegate the model proxy implementation
 * into a separate object.
 * <br/>
 * Note: The IVMModelProxy.init() may be called twice when installed, as a
 * workaround for bug 241024.
 *
 * @since 1.0
 */
IVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/IVMNode.java)/**
 * View model nodes are configured with a view model provider to collectively
 * define the layout of a view.  Each layout node generates elements of type
 * {@link IVMContext} which are then stored in the viewer.
 *
 * <p/>
 * NOTE: This interface extends <code>IElementContentProvider</code> but it has
 * slightly different parameter requirements.  For the
 * {@link IElementContentProvider#update(IChildrenUpdate[])} method, this class
 * can accept an update where {@link IChildrenUpdate#getOffset()}  and
 * {@link IChildrenUpdate#getLength()} may return -1. In this case the
 * implementation should return all available elements for the given parent.<br>
 * Also the for the {@link IElementContentProvider#update(IHasChildrenUpdate[])} and
 * {@link IElementContentProvider#update(IChildrenCountUpdate[])} methods, the
 * implementation may return an error with an error code of {@link IDsfService#NOT_SUPPORTED}.
 * In this case the caller of this update should call
 * {@link IElementContentProvider#update(IChildrenUpdate[])}
 * instead.
 *
 * @see AbstractDMVMProvider
 * @see IElementContentProvider
 *
 * @since 1.0
 */
IVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/IVMProvider.java)/**
 * The view model provider handles the layout of a given model within a
 * single viewer.  The View Model Adapter delegates calls for view content to
 * this object for a view that this provider handles.
 *
 * <p/>
 * A given view model provider is typically configured with a number of
 * {@link IVMNode} objects which are organized in a parent-child hierarchy.
 * The node hierarchy has a root node which is retrieved using {@link #getRootVMNode()}.
 *
 * <p/>
 * Note on concurency: The view model provider is single-threaded and it has to be
 * accessed only using the <code>Executor</code> returned by {@link #getExecutor()}.
 * The thread of this executor should be the display thread used by the viewer
 * corresponding to the view model provider.  Currently the flexible hierarchy
 * interfaces that this interface extends do not guarantee that their methods
 * will be called on the display thread, although from their use we are making
 * this assumption (bug 213629).  {@link IElementContentProvider} is an
 * exception to this, it is called by the TreeModelViewer on a background
 * thread, however it is not expected that the viewer will be calling the
 * IVMProvider directly. Rather, it is expected that the viewer will call
 * {@link IVMAdapter} which implements <code>IElementContentProvider</code>,
 * and <code>IVMAdapter</code> implementation is expected to switch to
 * provider's thread before delegating the call to it.
 *
 * @since 1.0
 */
ModelProxyInstalledEvent (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/ModelProxyInstalledEvent.java)/**
 * Event generated by an IModelProxy implementation when it is installed
 * into a viewer.
 *
 * @since 1.0
 */
IElementPropertiesProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/IElementPropertiesProvider.java)/**
 * Provides context-sensitive properties.  Can be registered as an adapter for
 * an element or implemented directly
 *
 * @since 1.0
 */
IPropertiesUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/IPropertiesUpdate.java)/**
 * Context sensitive properties update request for an element.
 *
 * @since 1.0
 */
IPropertiesUpdateListener (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/IPropertiesUpdateListener.java)/**
 * Listener for properties updates requested by a property based label provider.
 *
 * @since 2.2
 */
LabelAttribute (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/LabelAttribute.java)/**
 * This is a base class for a label attribute used in generating label
 * information based on properties of an element.  There are currently
 * four types of attributes: text, image, font, and color, and a given
 * attribute can be either enabled or disabled based on the element
 * properties.
 * <p/>
 * Clients are intended to override this class and its extensions to
 * implement the {@link LabelAttribute#isEnabled(Map)} and
 * {@link LabelAttribute#getPropertyNames()} methods as needed. Clients can
 * also override how the attribute settings are stored, for example in
 * order to use a preference.
 *
 * @see PropertiesBasedLabelProvider
 * @see LabelColumnInfo
 *
 * @since 1.0
 */
LabelColumnInfo (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/LabelColumnInfo.java)/**
 * Class used by the PropertiesBasedLabelProvider to generate store
 * label attributes related to a single column.  Each column info is
 * configured with an array of attributes (there are currently four
 * types of attributes: text, image, font, and color), which are
 * evaluated in order to generate the label.
 * <p/>
 * Clients are not intended to extend this class.
 *
 * @see PropertiesBasedLabelProvider
 *
 * @since 1.0
 */
LabelFont (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/LabelFont.java)/**
 * The font attribute of a label.
 *
 * @see LabelAttribute
 * @see LabelColumnInfo
 * @see PropertiesBasedLabelProvider
 *
 * @since 1.0
 */
LabelImage (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/LabelImage.java)/**
 * The image attribute of a label.
 *
 * @see LabelAttribute
 * @see LabelColumnInfo
 * @see PropertiesBasedLabelProvider
 *
 * @since 1.0
 */
LabelText (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/LabelText.java)/**
 * The text attribute of a label.  It uses a message format string in order to
 * compose the text string.  The parameter names determine the array of objects
 * given to the message format.
 *
 * @see MessageFormat#format(Object[], StringBuffer, java.text.FieldPosition)
 * @see LabelAttribute
 * @see LabelColumnInfo
 * @see PropertiesBasedLabelProvider
 *
 * @since 1.0
 */
PropertiesBasedLabelProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/PropertiesBasedLabelProvider.java)/**
 * A configurable label provider which uses element's property label provider
 * to set element's label attributes.
 * <p>
 * When this provider is registered for an element it calculates the properties
 * that need to be retrieved based on view's active columns, and then it calls the
 * element's property provider to retrieve those properties.  After the property
 * values are retrieved, they are processed in order to produce correct label text,
 * images, fonts, and colors, for the given element.
 *
 * @since 2.0 - Renamed from PropertyBasedLabelProvider
 */
PropertiesUpdateStatus (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/PropertiesUpdateStatus.java)/**
 * Status object for use with the IPropertiesUpdate.  This status class
 * allows setting a different status result for each property.  This allows
 * for better interpretation of status by the client of the update.
 * <p>
 * This status class derives from MultiStatus class such that the status
 * objects for each property can be accessed through the standard
 * {@link #getChildren()} method.  Also, multiple properties can reference
 * the same status object, meaning that the number of properties returned
 * by {@link #getProperties()} may be greater than the status objects
 * returned by <code>getChildren()</code>.
 * <p>
 * The properties status object does not have its own message, severity,
 * error status or exception.  All these attributes are calculated from
 * the child status objects.  If the status has more than one status child,
 * the String returned by {@link #getMessage()} is: "Multiple errors reported".
 *
 * @since 2.2
 */
VMDelegatingPropertiesUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/VMDelegatingPropertiesUpdate.java)/**
 * Properties update used as to collect property data from the provider.
 *
 * @since 2.0
 */
VMPropertiesUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/properties/VMPropertiesUpdate.java)/**
 * Properties update used as to collect property data from the provider.
 * <p>
 * The status returned by the VMPropertiesUpdate is always going to be of type
 * PropertiesUpdateStatus, which allows for setting status for individual
 * properties.
 * </p>
 *
 * @see PropertiesUpdateStatus
 *
 * @since 2.0
 */
RootVMNode (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/RootVMNode.java)/**
 * Default implementation of a root view model node.  This class may be sub-classed
 * to implement model-specific event handling.
 *
 * @since 1.0
 */
ElementDataKey (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/AbstractCachingVMProvider.java)/**
	 * Class representing a key to an element's data in the cache.  The main
	 * components of this key are the viewer input and the path, they uniquely
	 * identify an element.  The root element is used to track when a given
	 * root element is no longer in the cache and can therefore be disposed.
	 * The node is needed because different nodes have different lists of
	 * children for the same parent element.
	 */
Entry (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/AbstractCachingVMProvider.java)/**
	 * A base class for the entry in the cache.  Since the cache maintains
	 * a double-linked list through all the entries, the linked list references
	 * are maintained in this class.
	 */
ElementDataEntry (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/AbstractCachingVMProvider.java)/**
	 * Entry with cached element data.
	 */
FlushMarkerKey (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/AbstractCachingVMProvider.java)/**
	 * A key for a special marker entry in the cache.  This marker entry is used
	 * to optimize repeated flushing of the cache.
	 * @see AbstractCachingVMProvider#flush(List)
	 */
RootElementMarkerKey (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/AbstractCachingVMProvider.java)/**
	 * Marker used to keep track of whether any entries with the given
	 * root element are present in the cache.
	 */
AbstractCachingVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/AbstractCachingVMProvider.java)/**
 * Base implementation of a caching view model provider.
 *
 * @since 1.0
 */
AutomaticUpdatePolicy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/AutomaticUpdatePolicy.java)/**
 * An "automatic" update policy which causes the view model provider cache to
 * be flushed whenever an event causes a delta to be generated in the given
 * model.
 *
 * @since 1.0
 */
ICacheEntry (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/ICacheEntry.java)/**
 * Cache entry in a caching VM provider.
 *
 * @see ICachingVMProvider
 * @see ICachingVMProviderExtension2
 *
 * @since 2.2
 */
ICachingVMProvider (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/ICachingVMProvider.java)/**
 * A view model provider which supports caching of data returned by view model
 * nodes.  The methods in this interface allow clients to configure how the
 * cache should be updated in response to different events.
 *
 * @since 1.0
 */
ICachingVMProviderExtension2 (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/ICachingVMProviderExtension2.java)/**
 * Extension allowing access to the caching VM provider cache entries.
 *
 * @since 2.2
 */
IElementUpdateTester (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/IElementUpdateTester.java)/**
 * Tester object used to determine how individual update cache
 * entries should be updated during a flush operation.
 *
 * @see IVMUpdatePolicy
 *
 * @since 1.0
 */
IElementUpdateTesterExtension (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/IElementUpdateTesterExtension.java)/**
 * Element update tester extension which allows an update policy to selectively
 * flush properties of elements.  This can be useful if the update tester's event
 * only affects a certain aspect of the element's presentation.
 *
 * @since 2.1
 */
IVMUpdatePolicy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/IVMUpdatePolicy.java)/**
 * Interface for an update policy.  The main function of an update policy is
 * to create an element tester for each given event.  The element tester
 * is then used to update the viewer cache.
 *
 * @since 1.0
 */
IVMUpdatePolicyExtension (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/IVMUpdatePolicyExtension.java)/**
 * Extension to the VM Update policy which allows the policy to control how to
 * update missing property values in a dirty cache entry.
 *
 * @since 2.2
 */
ManualUpdatePolicy (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/ManualUpdatePolicy.java)/**
 * An "manual" update policy which causes the view model provider cache to be
 * flushed only as a result of an explicit user action.
 *
 * @since 1.0
 */
StaleDataLabelBackground (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/StaleDataLabelBackground.java)/**
 * Stale data backgroun color label attribute to use with the
 * PropertyBasedLabelProvider.  The background color should only be
 * used when the view is in no-columns mode.
 *
 * @since 2.0
 */
StaleDataLabelForeground (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/StaleDataLabelForeground.java)/**
 * Stale data foreground color label attribute to use with the
 * PropertyBasedLabelProvider.  The foreground color should only be
 * used when the view is in column mode.
 *
 * @since 2.0
 */
UpdatePolicyDecorator (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/UpdatePolicyDecorator.java)/**
 * An update policy decorator which can override behaviour of an underlying update policy.
 *
 * @since 1.1
 */
UserEditEvent (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/update/UserEditEvent.java)/**
 * An event that indicates the user modified data in the viewer. Even when a
 * viewer is configured to be in a manual update mode, the modification of an
 * element by the user should at least cause an update of the modified element.
 * This event is used to accomplish that behavior.
 *
 * @since 1.0
 */
VMChildrenCountUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/VMChildrenCountUpdate.java)/**
 * Helper class implementation of the {@link IChildrenCountUpdate} update object.
 *
 * @see VMViewerUpdate
 *
 * @since 1.0
 */
VMChildrenUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/VMChildrenUpdate.java)/**
 * Helper class implementation of the {@link IChildrenUpdate} update object.
 *
 * @see VMViewerUpdate
 *
 * @since 1.0
 */
VMDelta (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/VMDelta.java)/**
 * This delta class mostly just duplicates the ModelDelta implementation, but
 * it allows clients to modify the flags after the original object is
 * constructed.
 *
 * @see IModelDelta#getNodes()
 *
 * @since 1.0
 */
VMHasChildrenUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/VMHasChildrenUpdate.java)/**
 * Helper class implementation of the {@link IHasChildrenUpdate} update object.
 *
 * @see VMViewerUpdate
 *
 * @since 1.0
 */
ClientUpdatePlaceHolder (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/VMViewerUpdate.java)/**
	 * Place holder for the client update.  It is only used if the client update is
	 * not specified.
	 */
VMViewerUpdate (/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/ui/viewmodel/VMViewerUpdate.java)/**
 * Helper class implementation of the update objects used with
 * {@link IElementContentProvider}, {@link IElementLabelProvider},
 * and {@link IElementMementoProvider}.  The viewer update can be constructed
 * using a higher level update object or a set of parameters to fulfill the
 * <code>IViewerUpdate</code> interface.
 *
 * @since 1.0
 */
DsfExamplesPlugin (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/DsfExamplesPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
FileBrowserAction (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/filebrowser/FileBrowserAction.java)/**
 * Action that opens the File Browser example dialog.
 */
FileBrowserDialog (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/filebrowser/FileBrowserDialog.java)/**
 * File Browser example dialog.  It hold a tree viewer that displays
 * file system contents and a text box for entering a file path to be
 * shown in the tree.
 */
FileBrowserModelAdapter (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/filebrowser/FileBrowserModelAdapter.java)/**
 * This is the adapter that implements the flexible hierarchy viewer interfaces
 * for providing content, labels, and event proxy-ing for the viewer.  This
 * adapter is registered with the DSF Session object, and is returned by the
 * IDMContext.getAdapter() and IVMContext.getAdapter() methods,
 * which both call {@link DsfSession#getModelAdapter(Class)}.
 * <p>
 * The adapter implementation for this exercise is hard-coded to provide
 * contents for only one view.  In turn the view contents are determined using
 * the configurable ViewModelProvider.  For demonstration purposes, this model
 * adapter has two different layout configurations that can be used.  These
 * layout configurations can be set by calling the {@link #setViewLayout} method.
 * <p>
 * This class is primarily accessed by the flexible hierarchy viewer from a
 * non-executor thread.  So the class is thread-safe, except for a view methods
 * which must be called on the executor thread.
 *
 * @see AbstractDMVMProvider
 */
FileBrowserVMProvider (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/filebrowser/FileBrowserVMProvider.java)/**
 *
 */
FilesystemRootsVMNode (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/filebrowser/FilesystemRootsVMNode.java)/**
 * Viewer model node that populates the filesystem root elements.
 */
FileVMNode (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/filebrowser/FileVMNode.java)/**
 * File view model node which returns file elements that are found in the directory
 * specified by the parent element.  The child nodes of this node are fixed to
 * reference this element, and therefore this node will recursively populate
 * the contents of the tree reflecting the underlying filesystem directories.
 * <br>
 * Note: this node does NOT sub-class the {@link org.eclipse.cdt.dsf.ui.viewmodel.AbstractVMNode}
 */
TriggersChangedEvent (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/AlarmService.java)/** Event indicating that the list of triggers is changed. */
TriggerDMContext (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/AlarmService.java)/** Context representing an alarm tracked by this service. */
AlarmDMContext (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/AlarmService.java)/**
	 * Context representing the "triggered" status of an alarm with respect to
	 * a specific timer.
	 */
AlarmTriggeredDMEvent (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/AlarmService.java)/**
	 * Event indicating that an alarm has been triggered by a timer.
	 */
AlarmService (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/AlarmService.java)/**
 * The alarm service tracks triggers and alarms.  Triggers have a specified
 * value and can be created and removed independently.  Alarms are created
 * for a specific timer and a trigger, and can indicate whether an alarm is
 * triggered.
 * <p>
 * This service depends on the TimerService, so the TimerService has to be
 * initialized before this service is initialized.
 * </p>
 */
AlarmsVMNode (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/AlarmsVMNode.java)/**
 * View model node that determines whether an "alarm triggered" indicator is
 * shown in the tree.  This indicator is only shown if a given alarm is
 * triggered for a given timer.
 *
 * @see AlarmDMContext
 */
ServicesShutdownSequence (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/ServicesShutdownSequence.java)/**
 * Sequence that stops the services in the timers session.
 */
ServicesStartupSequence (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/ServicesStartupSequence.java)/**
 * Startup sequence for the timers session.  With only two services, this is
 * a very simple sequence.
 */
TimersChangedEvent (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimerService.java)/** Event indicating that the list of timers is changed. */
TimerDMContext (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimerService.java)/** Data Model context representing a timer. */
TimerTickDMEvent (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimerService.java)/**
	 * Event indicating that a timer's value has incremented.  The context in
	 * the event points to the timer that has changed.
	 */
TimerService (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimerService.java)/**
 * Timer service tracks a set of timers, which are created per user request.
 * The timers are represented using a Data Model context object, which
 * implements {@link IDMContext}.  Each timers value, which can be retrieved
 * by calling {@link #getTimerValue(TimerDMContext)}, is incremented every
 * second.  When a timer value is incremented the TimerService issues a
 * {@link TimerTickDMEvent}.
 */
TimersRootVMNode (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimersRootVMNode.java)/**
 *
 */
TimersView (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimersView.java)/**
 * Example view which displays data from timers and alarms services. It starts
 * a new DSF session and configures the services for it.  Then it configures
 * a data model provider to process the service data and display it in a
 * flexible-hierarchy asynchronous viewer.
 */
TimersViewColumnPresentation (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimersViewColumnPresentation.java)/**
 *
 */
TimersVMAdapter (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimersVMAdapter.java)/**
 * This is the adapter that implements the flexible hierarchy viewer interfaces
 * for providing content, labels, and event processing for the viewer.  This
 * adapter is registered with the DSF Session object, and is returned by the
 * IDMContext.getAdapter() and IVMContext.getAdapter() methods,
 * which both call {@link DsfSession#getModelAdapter(Class)}.
 */
TimersVMNode (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimersVMNode.java)/**
 * View model node that defines how timer DMContexts are displayed in the view. Timers
 * change with every tick of the timer, so the label has to be repained
 * upon timer tick events.
 * @see TimerDMContext
 */
TimersViewLayoutChanged (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimersVMProvider.java)/** Event indicating that the timers view layout has changed */
TimersVMProvider (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TimersVMProvider.java)/**
 * The View Model provider for the Timers view.  This provider allows for
 * switching between two different view layouts:
 * <ol>
 *  <li>Timers -> Triggers -> Alarms</li>
 *  <li>Triggers -> Timers -> Alarms</li>
 * </ol>
 * A special event is sent when the layout is changed in order to generate
 * a proper delta to refresh the view.
 */
TriggerCellModifier (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TriggerCellModifier.java)/**
 * Cell modifier used to edit the trigger value.
 */
TriggersVMNode (/dsf/org.eclipse.cdt.examples.dsf/src/org/eclipse/cdt/examples/dsf/timers/TriggersVMNode.java)/**
 * View model node that defines how alarm DMContexts are displayed in the view.  Alarm
 * nodes are fairly static, once they are created their label doesn't change.
 * @see TriggerDMContext
 */
PreProcessor (/dsf/org.eclipse.cdt.examples.dsf/src_ant/org/eclipse/cdt/examples/ant/tasks/PreProcessor.java)/**
 * Java preprocessor for code examples. Used to export source code for
 * example plug-ins with parts of code missing/inserted etc., for
 * various exercises.
 * <p>
 * The preprocessor looks for #ifdef statements in java comments, and is
 * run with a set of symbols. For example:
 * <pre>
 * //#ifdef ex1
 * ... code to insert when 'ex1' symbol is on
 * //#else
 * ... code to insert when not 'ex1'
 * //#endif
 * </pre>
 * </p>
 */
ACPMSumDataGenerator (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/ACPMSumDataGenerator.java)/**
 * A data generator which performs a sum computation on data retrieved from a
 * number of other data generators.  The data retrieval from other generators
 * is performed using ACPM caches and the result is calculated once all caches
 * are valid.
 * <p>
 * Unlike {@link AsyncSumDataGenerator}, this data generator listens to events
 * from the individual the data providers.  Theve events are used to
 * invalidate caches to make sure that they don't return incorrect data.  This
 * generator also sends out events to its clients to notify them to update, or
 * invalidate their caches.
 * </p>
 */
ValueRequestMonitor (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/ACPMSumDataViewer.java)/**
	 * Dedicated class for data item requests.  This class holds the index
	 * argument so it can be examined when canceling stale requests.
	 */
ACPMSumDataViewer (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/ACPMSumDataViewer.java)/**
 * Data viewer based on a table, which reads data from multiple data
 * providers using ACPM methods and performs a computation on the
 * retrieved data.
 * <p>
 * This example builds on the {@link AsyncSumDataViewer} example.  It
 * demonstrates using ACPM to solve the data consistency problem when
 * retrieving data from multiple sources asynchronously.
 * </p>
 */
ValueDataRequestMonitor (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/AsyncDataViewer.java)/**
	 * Dedicated class for data item requests.  This class holds the index
	 * argument so it can be examined when canceling stale requests.
	 */
AsyncDataViewer (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/AsyncDataViewer.java)/**
 * Data viewer based on a table, which reads data using asynchronous methods.
 * <p>
 * This viewer implements the {@link ILazyContentProvider} interface
 * which is used by the JFace TableViewer class to populate a Table.  This
 * interface contains separate asynchronous methods for requesting the count
 * and values for individual indexes, which neatly correspond to the methods
 * in {@link IDataGenerator}.  As an added optimization, this viewer
 * implementation checks for the range of visible items in the view upon each
 * request, and it cancels old requests which scroll out of view but have not
 * been completed yet.  However, it is up to the data generator implementation
 * to check the canceled state of the requests and ignore them.
 * </p>
 */
AsyncSumDataGenerator (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/AsyncSumDataGenerator.java)/**
 * A data generator which performs a sum computation on data retrieved from a
 * number of other data generators.  The data retrieval from other generators
 * is performed in parallel and the result is calculated once all data is
 * received.
 * <p>
 * This calculating generator does not listen to events from the data
 * providers so it relies on the client to re-retrieve data as needed.
 * </p>
 */
ValueCountingRequestMonitor (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/AsyncSumDataViewer.java)/**
	 * Dedicated class for data item requests.  This class holds the index
	 * argument so it can be examined when canceling stale requests.
	 */
AsyncSumDataViewer (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/AsyncSumDataViewer.java)/**
 * Data viewer based on a table, which reads data from multiple data
 * providers using asynchronous methods and performs a compultation
 * on the retrieved data.
 * <p>
 * This example builds on the {@link AsyncDataViewer} example and
 * demonstrates the pitfalls of retrieving data from multiple sources
 * asynchronously:  The data is retrieved separate from a set of providers
 * as well as from a data provider that sums the values from the other
 * providers.  The viewer then performs a check to ensure consistency of
 * retrieved data.  If the retrieved data is inconsistent an "INCORRECT"
 * label is added in the viewer.
 * </p>
 * <p>
 * This viewer is updated periodically every 10 seconds, instead of being
 * updated with every change in every data provider, which would overwhelm
 * the viewer.
 * </p>
 */
CountCache (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/DataGeneratorCacheManager.java)/** Cache class for retrieving the data generator's count. */
ValueCache (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/DataGeneratorCacheManager.java)/** Cache class for retrieving the data generator's values. */
DataGeneratorCacheManager (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/DataGeneratorCacheManager.java)/**
 * A wrapper class for the {@link IDataGenerator} interface, which returns
 * ACPM cache objects to use for data retrieval instead of calling
 * {@link IDataGenerator} asynchronous methods directly.
 */
DataGeneratorWithThread (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/DataGeneratorWithThread.java)/**
 * Thread-based implementation of the data generator.
 * <p>
 * This generator is based around a queue of client requests and a thread which
 * reads the requests from the queue and processes them. The distinguishing
 * feature of this generator is that it uses a a blocking queue as the main
 * synchronization object.  However, fListeners, fShutdown,  and fChangedIndexes
 * fields also need to be thread-safe and so they implement their own
 * synchronization.
 * </p>
 */
SyncDataViewer (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/dataviewer/SyncDataViewer.java)/**
 * Data viewer based on a table, which reads data using synchronous methods.
 * <p>
 * This viewer implements the {@link IStructuredContentProvider} interface
 * which is used by the JFace TableViewer class to populate a Table.  This
 * interface contains one principal methods for reading data {@link #getElements(Object)},
 * which synchronously returns an array of elements.  In order to implement
 * this method using the asynchronous data generator, this provider uses the
 * {@link Query} object.
 * </p>
 */
Async2Plus2 (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/requestmonitor/Async2Plus2.java)/**
 * Example of using a DataRequestMonitor to retrieve a result from an
 * asynchronous method.
 */
AsyncHelloWorld (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/requestmonitor/AsyncHelloWorld.java)/**
 * "Hello world" example which uses an asynchronous method to print out
 * the result.
 * <p>
 * The main method uses an immediate executor, which executes runnables
 * as soon as they are submitted, in creating its request monitor.
 *
 */
AsyncQuicksort (/dsf/org.eclipse.cdt.examples.dsf/src_preprocess/org/eclipse/cdt/examples/dsf/requestmonitor/AsyncQuicksort.java)/**
 * Example of using a CountingRequestMonitor to wait for multiple
 * asynchronous calls to complete.
 */
Frame (/dsf/org.eclipse.cdt.examples.dsf.pda/pdavm/src/org/eclipse/cdt/examples/pdavm/PDAVirtualMachine.java)/** Each stack frame is a mapping of variable names to values. */
PDAVirtualMachine (/dsf/org.eclipse.cdt.examples.dsf.pda/pdavm/src/org/eclipse/cdt/examples/pdavm/PDAVirtualMachine.java)/**
 *
 */
PDALineBreakpoint (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/breakpoints/PDALineBreakpoint.java)/**
 * PDA line breakpoint
 * <p>
 * This class is identical to the corresponding in PDA debugger implemented in
 * org.eclipse.debug.examples.
 * </p>
 */
PDAWatchpoint (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/breakpoints/PDAWatchpoint.java)/**
 * A watchpoint.
 * <p>
 * This class is identical to the corresponding in PDA debugger implemented in
 * org.eclipse.debug.examples.
 * </p>
 */
PDALaunch (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/launch/PDALaunch.java)/**
 * The PDA launch object. In general, a DSF-based debugger has to override
 * the base launch class in order to supply its own content providers for the
 * debug view.  Additionally, the PDA launch is used to monitor the state of the
 * PDA debugger and to shutdown the DSF services and session belonging to the
 * launch.
 * <p>
 * The PDA launch class mostly contains methods and fields that can be accessed
 * on any thread.  However, some fields and methods used for managing the DSF
 * session need to be synchronized using the DSF executor.
 * </p>
 */
PDALaunchDelegate (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/launch/PDALaunchDelegate.java)/**
 * Launches PDA program on a PDA interpretter written in Perl
 */
PDAServicesInitSequence (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/launch/PDAServicesInitSequence.java)/**
 * The initialization sequence for PDA debugger services.  This sequence contains
 * the series of steps that are executed to properly initialize the PDA-DSF debug
 * session.  If any of the individual steps fail, the initialization will abort.
 * <p>
 * The order in which services are initialized is important.  Some services depend
 * on other services and they assume that they will be initialized only if those
 * services are active.  Also the service events are prioritized and their priority
 * depends on the order in which the services were initialized.
 * </p>
 */
PDAServicesShutdownSequence (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/launch/PDAServicesShutdownSequence.java)/**
 * The shutdown sequence for PDA debugger services.  This sequence contains
 * the series of steps that are executed to properly shutdown the PDA-DSF debug
 * session.  If any of the individual steps fail, the shutdown will abort.
 * <p>
 * Services are shut down in the reverse order of initialization.
 * </p>
 */
PDAPlugin (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/PDAPlugin.java)/**
 * The main plugin class to be used in the desktop.
 */
AbstractPDACommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/AbstractPDACommand.java)/**
 * Base class for PDA commands.  The PDA commands consist of a text request and
 * a context.  Since the PDA debugger protocol is stateless, the context is only
 * needed to satisfy the ICommand interface.
 */
PDABitField (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDABitField.java)/**
 * Object representing a bit field in the stack command results.
 *
 * @see PDARegistersCommand
 */
PDAChildrenCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAChildrenCommand.java)/**
 * Retrieves data stack information
 *
 * <pre>
 *    C: children {thread_id} {frame_id} {variable_name}
 *    R: {child variable 1}|{child variable 2}|{child variable 3}|...|
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDAClearBreakpointCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAClearBreakpointCommand.java)/**
 * Clears any breakpoint set on given line
 *
 * <pre>
 *    C: clear {line}
 *    R: ok
 * </pre>

 */
PDACommandResult (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDACommandResult.java)/**
 * Basic command result object.  This command result simply allows access to the
 * PDA response.  Sub-classes may override to optionally parse the response text
 * and return higher-level objects.
 */
PDADataCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDADataCommand.java)/**
 * Retrieves data stack information
 *
 * <pre>
 *    C: data {thread_id}
 *    R: {value 1}|{value 2}|{value 3}|...|
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDADropFrameCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDADropFrameCommand.java)/**
 * Returns from the current frame without executing the rest of instructions.
 *
 * <pre>
 * If VM running:
 *    C: drop {thread_id}
 *    R: ok
 *    E: resumed {thread_id} drop
 *    E: suspended {thread_id} drop
 *
 * If VM suspended:
 *    C: drop {thread_id}
 *    R: ok
 *    E: vmresumed drop
 *    E: vmsuspended {thread_id} drop
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDAEvalCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAEvalCommand.java)/**
 * Sets what events cause the execution to stop.
 *
 * <pre>
 *    C: eval {thread_id} {instruction}%20{parameter}|{instruction}%20{parameter}|...
 *    R: ok
 *    E: resumed {thread_id} client
 *    E: evalresult result
 *    E: suspended {thread_id} eval
 *
 * Errors:
 *    error: invalid thread
 *    error: cannot evaluate while vm is suspended
 *    error: thread running
 * </pre>
 *
 * Where event_name could be <code>unimpinstr</code> or <code>nosuchlabel</code>.
 */
PDAEventStopCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAEventStopCommand.java)/**
 * Sets what events cause the execution to stop.
 *
 * <pre>
 *    C: eventstop {event_name} {0|1}
 *    R: ok
 *    ...
 *    E: suspended event {event_name}
 * </pre>
 *
 * Where event_name could be <code>unimpinstr</code> or <code>nosuchlabel</code>.
 */
PDAExitCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAExitCommand.java)/**
 * Instructs the debugger to exit.
 *
 * <pre>
 *    C: exit
 *    R: ok
 * </pre>
 */
PDAFrame (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAFrame.java)/**
 * Object representing a frame in the stack command results.
 *
 * @see PDAStackCommand
 */
PDAFrameCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAFrameCommand.java)/**
 * Retrieves command stack frame information
 *
 * <pre>
 *    C: stack {thread_id} {frame_number}
 *    R: {file}|{line}|{function}|{var_1}|{var_2}|...
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDAFrameCommandResult (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAFrameCommandResult.java)/**
 * @see PDAFrameCommand
 */
PDAGroupsCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAGroupsCommand.java)/**
 * Retrieves register groups information
 *
 * <pre>
 *    C: groups
 *    R: {group 1}|{group 2}|{group 3}|...|
 * </pre>
 */
PDAListResult (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAListResult.java)/**
 * @see PDADataCommand
 */
PDAPopDataCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAPopDataCommand.java)/**
 * Pops the top value from the data stack
 *
 * <pre>
 *    C: popdata {thread_id}
 *    R: ok
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDAPushDataCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAPushDataCommand.java)/**
 * Pushes the given value on top of the data stack.
 *
 * <pre>
 *    C: pushdata {thread_id} {value}
 *    R: ok
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDARegister (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDARegister.java)/**
 * Object representing a register in the registers command results.
 *
 * @see PDARCommand
 */
PDARegistersCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDARegistersCommand.java)/**
 * Retrieves registers definition information
 *
 * <pre>
 *    C: registers {group name}
 *    R: {register name} {true|false}|{bit field name} {start bit} {bit count} {mnemonic 1} {mnemonic 2} ...#{register name} ...
 * </pre>
 */
PDARegistersCommandResult (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDARegistersCommandResult.java)/**
 * @see PDARegistersCommand
 */
PDAResumeCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAResumeCommand.java)/**
 * Resumes the execution of a single thread.  Can be issued only if the virtual
 * machine is running.
 *
 * <pre>
 *    C: resume {thread_id}
 *    R: ok
 *    E: resumed {thread_id} client
 *
 * Errors:
 *    error: invalid thread
 *    error: cannot resume thread when vm is suspended
 *    error: thread already running
 * </pre>
 */
PDASetBreakpointCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDASetBreakpointCommand.java)/**
 * Sets a breakpoint at given line
 *
 * <pre>
 * Suspend a single thread:
 *    C: set {line_number} 0
 *    R: ok
 *    C: resume {thread_id}
 *    E: resumed {thread_id} client
 *    E: suspended {thread_id} breakpoint line_number
 *
 * Suspend the VM:
 *    C: set {line_number} 1
 *    R: ok
 *    C: vmresume
 *    E: vmresumed client
 *    E: vmsuspended {thread_id} breakpoint line_number
 * </pre>
 */
PDASetDataCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDASetDataCommand.java)/**
 * Sets a data value in the data stack at the given location
 *
 * <pre>
 *    C: setdata {thread_id} {index} {value}
 *    R: ok
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDASetVarCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDASetVarCommand.java)/**
 * Sets a variable value
 *
 * <pre>
 *    C: setvar {thread_id} {frame_number} {variable} {value}
 *    R: ok
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDAStackCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAStackCommand.java)/**
 * Retrieves command stack information
 *
 * <pre>
 *    C: stack {thread_id}
 *    R: {file}|{line}|{function}|{var_1}|{var_2}|...#{file}|{line}|{function}|{var_1}|{var_2}|...#...
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDAStackCommandResult (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAStackCommandResult.java)/**
 * @see PDAStackCommand
 */
PDAStackDepthCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAStackDepthCommand.java)/**
 * Retrieves command stack depth
 *
 * <pre>
 *    C: stackdepth {thread_id}
 *    R: {depth}
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDAStackDepthCommandResult (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAStackDepthCommandResult.java)/**
 * @see PDADataCommand
 */
PDAStepCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAStepCommand.java)/**
 * Executes next instruction
 *
 * <pre>
 * If VM running:
 *    C: step {thread_id}
 *    R: ok
 *    E: resumed {thread_id} client
 *    E: suspended {thread_id} step
 *
 * If VM suspended:
 *    C: step {thread_id}
 *    R: ok
 *    E: vmresumed client
 *    E: vmsuspended {thread_id} step
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDAStepReturnCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAStepReturnCommand.java)/**
 * Executes instructions until the current subroutine is finished
 *
 * <pre>
 * If VM running:
 *    C: stepreturn {thread_id}
 *    R: ok
 *    E: resumed {thread_id} client
 *    E: suspended {thread_id} step
 *
 * If VM suspended:
 *    C: stepreturn {thread_id}
 *    R: ok
 *    E: vmresumed client
 *    E: vmsuspended {thread_id} step
 *
 * Errors:
 *    error: invalid thread
 * </pre>
 */
PDASuspendCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDASuspendCommand.java)/**
 * Suspends execution of a single thread.  Can be issued only if the virtual
 * machine is running.
 *
 * <pre>
 *    C: suspend {thread_id}
 *    R: ok
 *    E: suspended {thread_id} client
 *
 * Errors:
 *    error: invalid thread
      error: vm already suspended
 *    error: thread already suspended
 * </pre>
 */
PDAVarCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAVarCommand.java)/**
 * Retrieves variable value
 *
 * <pre>
 *    C: var  {thread_id} {frame_number} {variable_name}
 *    R: {variable_value}
 *
 * Errors:
 *    error: invalid thread
 *    error: variable undefined
 * </pre>
 */
PDAVMResumeCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAVMResumeCommand.java)/**
 * Resumes the execution of the whole virtual machine
 *
 * <pre>
 *    C: vmresume
 *    R: ok
 *    E: vmresumed client
 *
 * Errors:
 *    error: vm already running
 * </pre>
 */
PDAVMSuspendCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAVMSuspendCommand.java)/**
 * Suspends the execution of the whole virtual machine
 *
 * <pre>
 *    C: vmsuspend
 *    R: ok
 *    E: vmsuspended client
 *
 * Errors:
 *    error: thread already suspended
 * </pre>
 */
PDAWatchCommand (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/commands/PDAWatchCommand.java)/**
 * Sets a watchpoint on a given variable
 *
 * <pre>
 *    C: watch {function}::{variable_name} {watch_operation}
 *    R: ok
 *    C: vmresume
 *    R: vmresumed client
 *    E: vmsuspended {thread_id} watch {watch_operation} {function}::{variable_name}
 * </pre>
 */
PDABackend (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDABackend.java)/**
 * Service that manages the backend process: starting the process
 * and monitoring for its shutdown.
 */
PDABreakpointAttributeTranslator (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDABreakpointAttributeTranslator.java)/**
 * Translator between {@link PDALineBreakpoint} object attributes and
 * attributes used by the {@link PDABreakpoints} service.
 * <p>
 * The attribute translator is used by the standard {@link BreakpointsMediator}
 * service to map between platform breakpoint attributes and target-side DSF
 * breakpoint attributes.  Thus, this object encapsulates the model-specific
 * functionality of synchronizing target side and IDE-side breakpoint objects.
 * </p>
 */
BreakpointDMContext (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDABreakpoints.java)/**
	 * Context representing a PDA line breakpoint.  In PDA debugger, since there is only
	 * one file being debugged at a time, a breakpoint is uniquely identified using the
	 * line number only.
	 */
WatchpointDMContext (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDABreakpoints.java)/**
	 * Context representing a watch point.  In PDA debugger, a watchpoint is
	 * uniquely identified using the function and variable.
	 */
PDABreakpoints (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDABreakpoints.java)/**
 * Initial breakpoint service implementation.
 * Implements the IBreakpoints interface.
 */
CommandSendJob (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDACommandControl.java)/**
	 *  Job that services the send command queue.
	 */
EventDispatchJob (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDACommandControl.java)/**
	 * Job that services the PDA event socket.
	 */
PDACommandControl (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDACommandControl.java)/**
 * Service that handles communication with a PDA debugger back end.
 */
ExpressionDMData (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAExpressions.java)/**
	 * PDA expressions are simply variables.  Only the variable name
	 * is relevant for its data.
	 */
PDAExpressions (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAExpressions.java)/**
 *
 */
PDARegisters (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDARegisters.java)/**
 *
 */
PDARunControl (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDARunControl.java)/**
 * Service for monitoring and controlling execution state of the DPA
 * program.
 * <p>
 * This service depends on the {@link PDACommandControl} service.
 * It must be initialized before this service is initialized.
 * </p>
 */
FrameDMContext (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAStack.java)/**
	 * PDA stack frame contains only the stack frame level.  It is only
	 * used as an index into the frame data returned by the PDA debugger.
	 */
FrameDMData (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAStack.java)/**
	 * Frame data based on the PDAFrame object returned by the PDA debugger.
	 */
VariableDMContext (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAStack.java)/**
	 * Context representing a variable in a given stack frame.
	 */
VariableDMData (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAStack.java)/**
	 * PDA variable data, only supports returning the variable name.
	 */
PDAStack (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAStack.java)/**
 * Service for retrieving PDA debugger stack data.
 * <p>
 * This service depends on the {@link PDACommandControl} service and the
 * {@link IRunControl} service.  These services must be initialized before
 * this service is initialized.
 * </p>
 */
PDAStartedEvent (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAStartedEvent.java)/**
 * Event issued when the PDA debugger is started.
 */
PDATerminatedEvent (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDATerminatedEvent.java)/**
 * Event issued when the PDA debugger exits.
 */
PDAThreadDMContext (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAThreadDMContext.java)/**
 * Context representing a PDA thread.
 */
PDAVirtualMachineDMContext (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/service/PDAVirtualMachineDMContext.java)/**
 * Top-level Data Model context for the PDA debugger representing the while PDA
 * virtual machine.
 * <p>
 * The PDA debugger is a single-threaded application.  Therefore this
 * top level context implements IExecutionDMContext directly, hence this
 * context can be used to call the IRunControl service to perform run
 * control opreations.
 * </p>
 * <p>
 * Also, the PDA debugger allows setting breakpoints in scope of the
 * whole program only, so this context can be used with the breakpoints
 * service to install/remove breakpoints.
 * </p>
 * <p>
 * Note: There should only be one instance of PDAVirtualMachineDMContext
 * created by each PDA command control, so its equals method defaults to using
 * instance comparison.
 * </p>
 */
PDASourceLookupDirector (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/sourcelookup/PDASourceLookupDirector.java)/**
 * PDA source lookup director.
 */
PDASourcePathComputerDelegate (/dsf/org.eclipse.cdt.examples.dsf.pda/src/org/eclipse/cdt/examples/dsf/pda/sourcelookup/PDASourcePathComputerDelegate.java)/**
 * Computes the default source lookup path for a PDA launch configuration.
 * The default source lookup path is the folder or project containing
 * the PDA program being launched. If the program is not specified, the workspace
 * is searched by default.
 * <p>
 * This class is identical to the corresponding in PDA debugger implemented in
 * org.eclipse.debug.examples.
 * </p>
 */
PDATerminateCommand (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/actions/PDATerminateCommand.java)/**
 * The terminate command is specialized for the PDA debugger.  Currently there
 * is no standard interface for terminating a debug session in DSF, because the
 * details of initiating and shutting down a debug session vary greatly in
 * different debuggers.
 */
PDABreakpointAdapter (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/breakpoints/PDABreakpointAdapter.java)/**
 * Adapter to create breakpoints in PDA files.
 * <p>
 * This class is identical to the corresponding in PDA debugger implemented in
 * org.eclipse.debug.examples.ui.
 * </p>
 */
PDAEditorAdapterFactory (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/breakpoints/PDAEditorAdapterFactory.java)/**
 * Creates a toggle breakpoint adapter
 * <p>
 * This class is identical to the corresponding in PDA debugger implemented in
 * org.eclipse.debug.examples.ui.
 * </p>
 */
PDAWatchpointFunctionFieldEditorFactory (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/breakpoints/PDAWatchpointFunctionFieldEditorFactory.java)/**
 *
 */
AnnotationHover (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/editor/AnnotationHover.java)/**
 * Returns hover for breakpoints.
 * <p>
 * This class is identical to the corresponding in PDA debugger implemented in
 * org.eclipse.debug.examples.ui.
 * </p>
 */
PDAEditor (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/editor/PDAEditor.java)/**
 * PDA editor
 */
PDAWordDetector (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/editor/PDAScanner.java)/**
	 * Detects potential keywords
	 */
PDALabelDetector (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/editor/PDAScanner.java)/**
	 * Detects PDA branch labels
	 */
PDAScanner (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/editor/PDAScanner.java)/**
 * PDA editor keyword scanner.
 */
PDASourceViewerConfiguration (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/editor/PDASourceViewerConfiguration.java)/**
 * Source view configuration for the PDA editor
 */
TextHover (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/editor/TextHover.java)/**
 * Produces debug hover for the PDA debugger.
 */
WordFinder (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/editor/WordFinder.java)/**
 * Looks for an identifier in a source file
 */
PDAMainTab (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/launcher/PDAMainTab.java)/**
 * Tab to specify the PDA program to run/debug.
 * <p>
 * This class is identical to the corresponding in PDA debugger implemented in
 * org.eclipse.debug.examples.ui.
 * </p>
 */
PDATabGroup (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/launcher/PDATabGroup.java)/**
 * Tab group for a PDA application
 * <p>
 * This class is identical to the corresponding in PDA debugger implemented in
 * org.eclipse.debug.examples.ui.
 * </p>
 */
PDAAdapterFactory (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/PDAAdapterFactory.java)/**
 * The adapter factory is the central point of control of view model and other
 * UI adapters of a DSF-based debugger.  As new launches are created and
 * old ones removed, this factory manages the life cycle of the associated
 * UI adapters.
 * <p>
 * As a platform adapter factory, this factory only  provides adapters for
 * the launch object.  Adapters for all other objects in the DSF model hierarchy
 * are registered with the DSF session.
 * </p>
 */
PDASuspendTrigger (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/PDASuspendTrigger.java)/**
 * @since 2.1
 */
PDAUIPlugin (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/PDAUIPlugin.java)/**
 * The main plugin class to be used in the desktop.
 */
SessionAdapterSet (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/SessionAdapterSet.java)/**
 * Contains the set of adapters that are created for each session instance.
 */
PDALaunchVMProvider (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/viewmodel/launch/PDALaunchVMProvider.java)/**
 * View Model provider for the Launch (AKA Debug) view. The launch VM
 * provider is configured with three nodes:
 * <ul>
 * <li> LaunchRootVMNode - This is the root of the PDA view model.</li>
 * <li> PDAVirtualMachineVMNode - Supplies the element representing PDA VM</li>
 * <li> PDAThreadsVMNode - Supplies the PDA thread elements</li>
 * <li> StackFramesVMNode - Supplies the stack frame elements.</li>
 * <li> StandardProcessVMNode - Supplies elements representing the PDA
 * debugger process.</li>
 * </ul>
 */
PDAThreadsVMNode (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/viewmodel/launch/PDAThreadsVMNode.java)/**
 * View model node supplying the PDA thread elements.  It extends
 * the base threads node and adds label and memento generation.
 */
PDAVirtualMachineVMNode (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/viewmodel/launch/PDAVirtualMachineVMNode.java)/**
 * View Model node representing a PDA virtual machine.  It extends
 * the base container node and adds label and memento generation.
 */
PDAExpressionVMProvider (/dsf/org.eclipse.cdt.examples.dsf.pda.ui/src/org/eclipse/cdt/examples/dsf/pda/ui/viewmodel/PDAExpressionVMProvider.java)/**
 * PDA View Model provider for the expression view.
 */
DsfTestBreakpoint (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/breakpoints/DsfTestBreakpoint.java)/**
 * Test breakpoint.
 */
DsfTestBreakpointAttributeTranslator2 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/breakpoints/DsfTestBreakpointAttributeTranslator2.java)/**
 *
 */
BreakpointDMContext (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/breakpoints/DsfTestBreakpoints.java)/**
	 * Context representing a PDA line breakpoint.  In PDA debugger, since there is only
	 * one file being debugged at a time, a breakpoint is uniquely identified using the
	 * line number only.
	 */
DsfTestBreakpoints (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/breakpoints/DsfTestBreakpoints.java)/**
 * Initial breakpoint service implementation.
 * Implements the IBreakpoints interface.
 */
CacheTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/concurrent/CacheTests.java)/**
 * Tests that exercise the DataCache object.
 */
DsfQueryTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/concurrent/DsfQueryTests.java)/**
 * Tests that exercise the Query object.
 */
DsfSequenceProgressTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/concurrent/DsfSequenceProgressTests.java)/**
 * Test whether a step in a sequence can control the progress monitor.
 */
DsfSequenceTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/concurrent/DsfSequenceTests.java)/**
 * Tests that exercise the Sequence object.
 */
RangeCacheTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/concurrent/RangeCacheTests.java)/**
 * Tests that exercise the DataCache object.
 */
RmPerformanceTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/concurrent/RmPerformanceTests.java)/**
 * Tests to measure the performance of the viewer updates.
 */
TransactionTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/concurrent/TransactionTests.java)/**
 * Tests that exercise the Transaction object.
 */
VMTest1 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/debug/vm/launch/VMTest1.java)/**
 *
 */
VMTestBase (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/debug/vm/launch/VMTestBase.java)/**
 * This is the base class for the GDB/MI Unit tests.
 * It provides the @Before and @After methods which setup
 * and teardown the launch, for each test.
 * If these methods are overwridden by a subclass, the new method
 * must call super.baseSetup or super.baseTeardown itself, if this
 * code is to be run.
 */
DsfTestPlugin (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/DsfTestPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
Event1 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/events/AbstractService.java)/** Simple event class 1 */
Event2 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/events/AbstractService.java)/** Simple event class 2.  Note it doesn't have any relation to event 1 */
Event3 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/events/AbstractService.java)/** Simple event class 3.  Note it does sub-class event 1 */
AbstractService (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/events/AbstractService.java)/**
 * Test service class used to test event behavior.  It has three types of events
 * and three methods to receive the events.
 *
 */
Service4 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/events/Service4.java)/**
 * This service differs from the other three in that when it registers itself as
 * an event listener with the dsf session, it specifies a services filter.
 *
 */
IViewerUpdatesListenerConstants (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/IViewerUpdatesListenerConstants.java)/**
 * Convenience interface with constants used by the test model update listener.
 * @since 2.2
 */
BasicTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/BasicTests.java)/**
 *
 */
CommandControlTestsBase (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/CommandControlTestsBase.java)/**
 *
 */
PDATestCommand (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/PDATestCommand.java)/**
 *
 */
PDATestEvent (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/PDATestEvent.java)/**
 *
 */
Test1 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/Test1.java)/**
 *
 */
Test10 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/Test10.java)/**
 *
 */
Test2 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/Test2.java)/**
 *
 */
Test3 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/Test3.java)/**
 *
 */
Test6 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/Test6.java)/**
 *
 */
Test8 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/Test8.java)/**
 *
 */
Test9 (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/service/command/Test9.java)/**
 *
 */
Launching (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/pda/util/Launching.java)/**
 *
 */
TestDsfExecutor (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/TestDsfExecutor.java)/**
 * DsfExecutor for use with unit tests.  It records the exceptions that were
 * thrown in the executor thread so that they can be re-thrown by the test.
 *
 */
ValueHolder (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/ValueHolder.java)/**
 * Utility class to hold a value retrieved in a runnable.
 * Usage in a test is as follows:
 * <pre>
 *     final ValueHolder<Integer> value = new ValueHolder<Integer>();
 *     fExecutor.execute(new Runnable() {
 *         public void run() {
 *             value.fValue = 1;
 *         }
 *     });
 *     Assert.assertTrue(value.fValue == 1);
 * </pre>
 */
ViewerUpdatesListener (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/ViewerUpdatesListener.java)/**
 * @since 2.2
 */
FormattedValuesListener (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/FormattedValuesListener.java)/**
 *
 */
ElementFormatSetting (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/FormattedValueTests.java)/**
	 * helper class that stores some element paths and nodes using a certain format
	 */
FormattedValueTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/FormattedValueTests.java)/**
 * Tests to verify the operation of FormattedValuesVMUtil
 * @since 2.2
 */
IFormattedValuesListener (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/IFormattedValuesListener.java)/**
 * @since 2.2
 */
JFaceViewerFormattedValueTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/JFaceViewerFormattedValueTests.java)/**
 * @since 2.2
 */
JFaceViewerPerformanceTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/JFaceViewerPerformanceTests.java)/**
 * @since 3.6
 */
PerformanceTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/PerformanceTests.java)/**
 * Tests to measure the performance of the viewer updates.
 */
TestDsfVMPlugin (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestDsfVMPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
TestElementFormatVMProvider (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestElementFormatVMProvider.java)/**
 * Test view model provider that supports element format provider interface.
 * This class is used in test cases and can be extended to support other
 * optional interfaces
 */
TestElementVMContext (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestElementVMContext.java)/**
 * @since 2.2
 */
TestModel (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestModel.java)/**
 * Test model for the use in unit tests.  This test model contains a set of
 * elements in a tree structure.  It contains utility methods for modifying the
 * model and for verifying that the viewer content matches the model.
 *
 * @since 2.2
 */
TestModelCachingVMProvider (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestModelCachingVMProvider.java)/**
 * @since 2.2
 */
TestModelDMVMNode (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestModelDMVMNode.java)/**
 * @since 2.2
 */
TestModelUpdatesListener (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestModelUpdatesListener.java)/**
 * @since 2.2
 */
TestModelVMAdapter (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestModelVMAdapter.java)/**
 * @since 2.2
 */
TestModelVMNode (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestModelVMNode.java)/**
 * @since 2.2
 */
TestModelVMProvider (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestModelVMProvider.java)/**
 * @since 2.2
 */
TestPersistable (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestPersistable.java)/**
 * Test persistable for junit test cases. This is used along with element format
 * test cases, and can be extended to support other persistable properties
 * contained in PresentationContext, e.g. type cast/cast as array.
 */
TestPersistableFactory (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/TestPersistableFactory.java)/**
 * Factory for TestPersitable
 */
VirtualViewerPerformanceTests (/dsf/org.eclipse.cdt.tests.dsf/src/org/eclipse/cdt/tests/dsf/vm/VirtualViewerPerformanceTests.java)/**
 * @since 2.2
 */
IConnect (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/actions/IConnect.java)/**
 * @since 1.1
 */
CBreakpointGdbThreadsFilterExtension (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/breakpoints/CBreakpointGdbThreadsFilterExtension.java)/**
 *
 */
GDBDynamicPrintfUtils (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/breakpoints/GDBDynamicPrintfUtils.java)/**
 * Utility methods to help deal with Dynamic Printf logic.
 *
 * @since 4.4
 */
Messages (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/breakpoints/Messages.java)/** @since 4.4 */
GDBTypeParser (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/GDBTypeParser.java)/**
 * GDB Type Parser (duplicate of org.eclipse.cdt.debug.mi.core.GDBTypeParser)
 * The code was lifted from: The C Programming Language
 * B. W. Kernighan and D. Ritchie
 *
 * @since 3.0
 */
IGdbDebugConstants (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/IGdbDebugConstants.java)/**
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 4.0
 */
IGdbDebugPreferenceConstants (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/IGdbDebugPreferenceConstants.java)/**
 * @noimplement This interface is not intended to be implemented by clients.
 * @since 2.0
 */
ISelectNextTraceRecordHandler (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/commands/ISelectNextTraceRecordHandler.java)/**
 * Handler interface to select the next trace record.
 *
 * @since 3.0
 */
ISelectPrevTraceRecordHandler (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/commands/ISelectPrevTraceRecordHandler.java)/**
 * Handler interface to select the previous trace record.
 *
 * @since 3.0
 */
CoreList (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/CoreList.java)/**
 */
GdbDebugOptions (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/GdbDebugOptions.java)/**
 * Hooks our debug options to the Platform trace functionality.
 * In essence, we can open Window -> Preferences -> Tracing
 * and turn on debug options for this package. The debug output
 * will come out on the console and can be saved directly to
 * a file. Classes that need to be debugged can call into
 * GdbDebugOptions to get debug flags. If new flags need to be
 * created, they will need to have a unique identifier and added to
 * the .options file in this plugin
 *
 * @since 4.1
 *
 */
GdbPlugin (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/GdbPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
GdbPreferenceInitializer (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/GdbPreferenceInitializer.java)/**
 * Initialize the GDB preferences.
 */
MemorySpaceDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/GdbMemoryBlock.java)/**
	 * A memory space qualified context for the IMemory methods. Used if
	 * required, otherwise the more basic IMemoryDMContext is used
	 */
GdbMemoryBlock (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/GdbMemoryBlock.java)/**
 * A specialization of the DSF memory block implementation supporting memory
 * spaces. The memory space support is provisional, thus this class is internal.
 *
 * @author Alain Lee and John Cortell
 */
GdbMemoryBlockRetrieval (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/GdbMemoryBlockRetrieval.java)/**
 * A specialization of the DSF memory block retrieval implementation supporting
 * memory spaces. The memory space support is provisional, thus this class is
 * internal.
 *
 * @author Alain Lee and John Cortell
 */
MemoryBlockAddressInfoItem (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/MemoryBlockAddressInfoItem.java)/**
 * A base partial implementation of a a memory block address information item
 *
 */
Messages (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/Messages.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
ProcStatCoreLoads (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/ProcStatCoreLoads.java)/**
 * This class provides a container to store the computed
 * loads for the various CPU cores.
 *
 */
OneCoreTickCounters (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/ProcStatCounters.java)/**
	 * An object of this class holds one set of core/CPU tick counter values, for a single CPU core
	 */
ProcStatCounters (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/ProcStatCounters.java)/**
 * A class that holds one set of /proc/stat counters.
 * TODO: extend to more than the tick counters.
 */
ProcStatParser (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/ProcStatParser.java)/**
 * @author Marc Dumais
 * TODO: extend to more than the tick counters.
 * @see also http://www.linuxhowtos.org/System/procstat.htm
 */
MIMetaGetCPUInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/service/command/commands/MIMetaGetCPUInfo.java)/**
 * Meta MI command to fetch CPU info from the target.
 * @since 4.1
 */
EventMessages (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/service/command/events/EventMessages.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
MITracepointSelectedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/service/command/events/MITracepointSelectedEvent.java)/**
 * Conveys that gdb has selected a new tracepoint record. Although this
 * is a response to an MI command, we trigger an MI event internally
 * because it should cause the same behaviour as if we stopped at a
 * breakpoint.  The output record looks like this:
 *
 * <code>
 * ^done,found="1",tracepoint="1",traceframe="0",frame={level="0",addr="0x08048900",func="foo",args=[{name="i",value="2"}],file="file.cpp",fullname="/home/marc/file.cpp",line="505"}

 * </code>
 * @since 3.0
 */
MIMetaGetCPUInfoInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/service/command/output/MIMetaGetCPUInfoInfo.java)/**
 * Result obtained from MIMetaGetCPUInfo.
 * @since 4.1
 */
StepIntoSelectionActiveOperation (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/service/control/StepIntoSelectionActiveOperation.java)/**
 * @since 4.2
 */
GDBFocusSynchronizer (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/service/GDBFocusSynchronizer.java)/**
 * This service keeps synchronized the CDT Debug View selection and GDB's
 * internal focus.
 *
 * To keep the Debug View selection synchronized to CDT's selection, the service keeps
 * track of what is the current GDB focus, by listening to the GDB MI notification
 * "=thread-selected". When this notification is received, the service orders a change
 * to CDT's Debug View selection to match, by sending an IGDBFocusChangedEvent.
 *
 * To keep GDB's focus synchronized to the Debug View selections, the UI listens to
 * platform 'Debug Selection changed' events, and then uses this service, to order GDB
 * to change focus to match the selection.
 *
 * Note: the mapping between the DV selection and GDB focus is not 1 to 1; there can
 * be multiple debug sessions at one time, all shown in the DV. There is however a single
 * effective DV selection. On the other end, each debug session has a dedicated instance
 * of GDB, having its own unique focus, at any given time. Also not all DV selections map
 * to a valid GDB focus.
 *
 * @since 5.2
 */
IGDBFocusChangedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/service/IGDBFocusSynchronizer.java)/**
	 * The service sends this event to indicate that GDB has changed its focus, as a
	 * result of an event not triggered by CDT. For example a console command typed by
	 * the user.
	 * Note: the full focus might not be reflected in the included context. The service
	 * can be queried to get the complete picture.
	 */
IGDBFocusSynchronizer (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/service/IGDBFocusSynchronizer.java)/**
 * This service keeps synchronized the CDT debug view selection and GDB's
 * internal focus - GDB's current thread, stack frame, and (implicitly) inferior.
 *
 * @since 5.2
 */
AbstractTracepointAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/tracepointactions/AbstractTracepointAction.java)/**
 * @since 3.0
 */
CollectAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/tracepointactions/CollectAction.java)/**
 * Action used to tell GDB to collect different values from a tracepoint.
 * It corresponds to GDB's 'collect' action.
 *
 * As for GDB 7.4:
 *	collect[/s] EXPRESSIONS
 *	 The tracepoint collect command now takes an optional modifier "/s"
 *	 that directs it to dereference pointer-to-character types and
 *	 collect the bytes of memory up to a zero byte.  The behavior is
 *	 similar to what you see when you use the regular print command on a
 *	 string.  An optional integer following the "/s" sets a bound on the
 *	 number of bytes that will be collected.
 *
 * @since 3.0
 */
EvaluateAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/tracepointactions/EvaluateAction.java)/**
 * @since 3.0
 */
ITracepointAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/tracepointactions/ITracepointAction.java)/**
 * Marker interface to differentiate between different breakpoint actions
 * @since 3.0
 */
MessagesForTracepointActions (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/tracepointactions/MessagesForTracepointActions.java)/**
 * Preference strings.
 * @since 3.0
 */
TracepointActionManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/tracepointactions/TracepointActionManager.java)/**
 * @since 3.0
 */
WhileSteppingAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/tracepointactions/WhileSteppingAction.java)/**
 * @since 3.0
 */
FinalLaunchSequence_7_0 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/FinalLaunchSequence_7_0.java)/**
 * Subclass for GDB >= 7.0.
 * This class currently sets non-stop mode, or makes
 * sure target-async is off for all-stop.
 *
 * @since 4.1
 */
FinalLaunchSequence_7_12 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/FinalLaunchSequence_7_12.java)/**
 * Subclass for GDB >= 7.12.
 *
 * @since 5.2
 */
FinalLaunchSequence_7_2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/FinalLaunchSequence_7_2.java)/**
 * Subclass for GDB >= 7.2.
 *
 * @since 4.0
 */
FinalLaunchSequence_7_7 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/FinalLaunchSequence_7_7.java)/**
 * Subclass for GDB >= 7.7.
 *
 * @since 4.4
 */
GdbAttachLaunchDelegate (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbAttachLaunchDelegate.java)/**
 * A special launch delegate for the attach debug session, which
 * supports the launch when the project and/or binary is not specified.
 * @since 4.0
 */
GdbLaunch (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java)/**
 * The only object in the model that implements the traditional interfaces.
 */
GdbLaunchDelegate (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunchDelegate.java)/**
 * The shared launch configuration delegate for the DSF/GDB debugger.
 * This delegate supports all configuration types (local, remote, attach, etc)
 */
NoStreamsProxy (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GDBProcess.java)/**
	 * Class that provides a streams proxy that actually
	 * ignores the I/O streams.  We use this because the I/O
	 * is handled directly by the different {@link IDebuggerConsole}.
	 *
	 * This is different than NullStreamsProxy which would
	 * still read but discard the IO, which is not what we want.
	 */
GDBProcess (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GDBProcess.java)/**
 * A process for the gdb backend to differentiate it from the inferior.
 *
 * This process disables the base class handling of IO streams since
 * all IO is handled by the different specialized {@link IDebuggerConsole}
 *
 * @since 3.0
 */
GdbProcessFactory (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbProcessFactory.java)/**
 * Default GDB Process Factory creation of launch processes
 * using DebugPlugin.newProcess()
 * @since 4.1
 */
GDBRemoteSerialLaunchTargetProvider (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GDBRemoteSerialLaunchTargetProvider.java)/**
 * @since 5.7
 */
GDBRemoteTCPLaunchTargetProvider (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GDBRemoteTCPLaunchTargetProvider.java)/**
 * @since 5.7
 */
GdbSourceLookupDirector (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbSourceLookupDirector.java)/**
 * A Source Lookup director that extends the standard DSF version to support the
 * GDB backend handling path substitutions using gdb's "set substitute-path"
 * mechanism. This director works in tandem with {@link IGDBSourceLookup}
 * service to synchronise GDB's path substitutions.
 *
 * @since 5.0
 */
GdbSourceLookupParticipant (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbSourceLookupParticipant.java)/**
 * Source Lookup Participant that notifies the {@link IGDBSourceLookup} service
 * of changes to the lookup path to allow the source lookup service to update
 * GDB's substituted paths.
 *
 * @since 5.0
 */
GdbTargetedLaunchDelegate (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbTargetedLaunchDelegate.java)/**
 * Launch delegate that adds the ILaunchTarget to the GdbLaunch.
 *
 * There are other things we could do with this such as make sure the binary we are
 * launching matches the cpu architecture and OS of the target, and add the launch
 * checks to do the same. For now, though, we are assuming the user knows what they
 * are doing when they set this up since it's all manual at this point.
 * @since 5.7
 */
InferiorRuntimeProcess (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/InferiorRuntimeProcess.java)/**
 * A process for the inferior to know it belongs to a DSF-GDB session.
 * This class also adds the exit code of the inferior to the console.
 *
 * Note that this class is also used in Run mode.
 *
 * @since 4.0
 */
IProcessExtendedInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/IProcessExtendedInfo.java)/**
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 4.0
 */
ITracedLaunch (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/ITracedLaunch.java)/**
 * This interface is used to indicate that a launch should have
 * a TracingConsole.
 *
 * @see org.eclipse.cdt.dsf.gdb.internal.ui.tracing.TracingConsoleManager
 * @see org.eclipse.cdt.dsf.gdb.internal.ui.tracing.TracingConsole
 *
 * @since 2.0
 */
IGdbMemoryAddressInfoTypeRetrieval (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/memory/IGdbMemoryAddressInfoTypeRetrieval.java)/**
 * @since 5.0
 */
CommandFactory_6_8 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/CommandFactory_6_8.java)/**
 * A command factory for commands that should only be used starting with GDB 6.8
 * @since 4.0 */
CustomTimeoutsMap (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/CustomTimeoutsMap.java)/**
 * @since 4.1
 */
GDBBackendCLIProcess (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBBackendCLIProcess.java)/**
 * Note that starting with GDB 7.12, as long as a PTY is available,
 * this process is no longer used.  Instead, the real GDB process,
 * along with its console will be used directly.  A second PTY
 * will be used to communicate using MI.

 * @author LWang
 * @since 2.0
 *
 */
GDBBackendProcessWithoutIO (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBBackendProcessWithoutIO.java)/**
 * Note that starting with GDB 7.12, as long as a PTY is available, this process
 * is used instead of GDBBackendProcess. This is because the GDB CLI is handled
 * directly by GDB and the current class only needs to handle the life-cycle of
 * the GDB process.
 *
 * This class is therefore a representation of the GDB process that will be
 * added to the launch. This class is not the real GDB process but simply an
 * entry for the launch to handle user actions but no IO.
 *
 * This class extends {@link GDBBackendCLIProcess} to re-use its implementation
 * of the {@link Process} abstract methods, but disables all I/O and
 * local CLI handling.
 *
 * @since 5.2
 */
GdbCommandTimeoutManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GdbCommandTimeoutManager.java)/**
 * The command timeout manager registers itself as a command listener and monitors
 * the command execution time. The goal of this implementation is to gracefully
 * handle disruptions in the communication between Eclipse and GDB.
 *
 * The algorithm used by this class is based on the assumption that the command
 * execution in GDB is sequential even though DSF can send up to 3 commands at
 * a time to GDB (see {@link AbstractMIControl}).
 *
 * @since 4.1
 */
GDBControlInitializedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl.java)/**
	 * Event indicating that the back end process has started.
	 */
GDBControlShutdownDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl.java)/**
	 * Event indicating that the CommandControl (back end process) has terminated.
	 */
ControlEventProcessor (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl.java)/**
	 * An event processor that handles some GDB life cycle events.
	 * Currently, it detects a lost connection with the remote.
	 */
CommandTimeoutStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl.java)/**
	 * @since 4.1
	 */
GDBControl (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl.java)/**
 * GDB Debugger control implementation.  This implementation extends the
 * base MI control implementation to provide the GDB-specific debugger
 * features.  This includes:<br>
 * - CLI console support,<br>
 * - inferior process status tracking.<br>
 */
GDBControlDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControlDMContext.java)/**
 *
 */
ListFeaturesStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl_7_0.java)/** @since 4.0 */
GDBControl_7_0 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl_7_0.java)/**
 * GDB Debugger control implementation.  This implementation extends the
 * base MI control implementation to provide the GDB-specific debugger
 * features.  This includes:<br>
 * - CLI console support,<br>
 * - inferior process status tracking.<br>
 */
GDBControl_7_12 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl_7_12.java)/**
 * Need a new FinalLaunchSequence for GDB 7.12
 * @since 5.2
 */
GDBControl_7_2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl_7_2.java)/**
 * Turn on the use of the --thread-group option for GDB 7.2
 * @since 4.0
 */
GDBControlDMContext_7_4 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl_7_4.java)/**
	 * A command control context that is also a IBreakpointsTargetDMContext
	 */
GDBControl_7_4 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl_7_4.java)/**
 * With GDB 7.4, the command 'maintenance set python print-stack' is not supported.
 * The new command "set python print-stack none|full|message" has replaced it.
 *
 * With GDB 7.4, breakpoints are handled globally for all of GDB, so our
 * IBreakpointsTargetDMContext becomes the GDBControlContext.
 *
 * @since 4.1
 */
GDBControl_7_7 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/GDBControl_7_7.java)/**
 * Need a new FinalLaunchSequence for GDB 7.7
 * @since 4.4
 */
IGDBBackendProcessWithoutIO (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/IGDBBackendProcessWithoutIO.java)/**
 * Interface used by a process representing the GDB process but for which there
 * is no IO.
 *
 * When using the full GDB console, this marker can be used for the class that
 * will represent the GDB process in the launch since the IO should not be
 * handled by the launch and the console it normally created, but is handled by
 * the full GDB console itself.
 *
 * @since 5.2
 */
PromptForCoreJob (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/DebugNewProcessSequence.java)/** @since 4.0 */
DebugNewProcessSequence (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/DebugNewProcessSequence.java)/**
 * This sequence is used to start debugging a new process.
 *
 * @since 4.0
*/
DebugNewProcessSequence_7_2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/DebugNewProcessSequence_7_2.java)/**
 * With GDB 7.2, to create a new process, we need to use the -add-inferior command first.
 * This allows to create multiple processes, unlike previous versions of GDB.
 * Note that GDB 7.1 does support multi-process but didn't have the MI commands (e.g., -add-inferior)
 * so we only support multi-process starting with 7.2
 *
 * @since 4.0
 */
GDBBackend_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBBackend_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IMIBackend}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBBreakpointsManager_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBBreakpointsManager_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link MIBreakpointsManager}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBBreakpointsSynchronizer_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBBreakpointsSynchronizer_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link MIBreakpointsSynchronizer}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBBreakpoints_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBBreakpoints_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IBreakpoints}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBControl_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBControl_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link ICommandControlService}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBDisassembly_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBDisassembly_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IDisassembly}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBExpressions_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBExpressions_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IExpressions}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBHardwareAndOS_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBHardwareAndOS_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IGDBHardwareAndOS}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBMemory_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBMemory_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IMemory}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBModules_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBModules_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IModules}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBProcesses_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBProcesses_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IProcesses}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBRegisters_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBRegisters_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IRegisters}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBRunControl_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBRunControl_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IRunControl}
 * in All-Stop.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBRunControl_NS_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBRunControl_NS_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IRunControl}
 * in Non-Stop.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBSourceLookup_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBSourceLookup_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link ISourceLookup}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBStack_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBStack_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IStack}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
GDBTraceControl_HEAD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/extensions/GDBTraceControl_HEAD.java)/**
 * Top-level class in the version hierarchy of implementations of {@link IGDBTraceControl}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 4.8
 */
MonitorJob (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend.java)/**
	 * Monitors a system process, waiting for it to terminate, and then notifies
	 * the associated runtime process.
	 */
MonitorInterruptJob (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend.java)/**
	 * Stores the request monitor that must be dealt with for the result of the
	 * interrupt operation. If the interrupt successfully suspends the backend,
	 * the request monitor can be retrieved and completed successfully, and then
	 * this job should be canceled. If this job is not canceled before the time
	 * is up, it will imply the interrupt did not successfully suspend the
	 * backend, and the current job will indicate this in the request monitor.
	 *
	 * The specified timeout is used to indicate how many milliseconds this job
	 * should wait for. INTERRUPT_TIMEOUT_DEFAULT indicates to use the default
	 * of 5 seconds. The default is also use if the timeout value is 0 or
	 * negative.
	 *
	 * @since 3.0
	 */
GDBBackend (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend.java)/**
 * Implementation of {@link IGDBBackend} for the common case where GDB is
 * launched in local file system on host PC where Eclipse runs. This also
 * manages some GDB parameters from a given launch configuration.<br>
 * <br>
 * You can subclass for you special needs.
 *
 * @since 1.1
 */
GDBBackend_7_12 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend_7_12.java)/**
 * Implementation of {@link IGDBBackend} using GDB 7.12. This version provides
 * full GDB console support.  It achieves this by launching GDB in CLI mode
 * in a special console widget and then connecting to GDB via MI by telling GDB to
 * open a new MI console.  The rest of the DSF-GDB support then stays the same.
 *
 * If we are unable to create a PTY, we then revert to the previous behavior of
 * the base class.
 *
 * @since 5.2
 */
GDBBreakpointsManager_7_0 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBreakpointsManager_7_0.java)/**
 * Version of BreakpointsManager for GDB version starting with 7.0.
 *
 * @since 4.7
 */
GDBBreakpointsManager_7_2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBreakpointsManager_7_2.java)/**
 * Version of BreakpointsManager for GDB version starting with 7.2.
 * @since 4.7
 */
GDBBreakpoints_7_0 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBreakpoints_7_0.java)/**
 * Breakpoint service for GDB 7.0.
 * It also supports tracepoints

 * @since 3.0
 */
GDBBreakpoints_7_2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBreakpoints_7_2.java)/**
 * Breakpoint service for GDB 7.2.
 * It support MI for tracepoints.
 * It also support for fast vs normal tracepoints.
 *
 * @since 4.1
 */
GDBBreakpoints_7_4 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBreakpoints_7_4.java)/**
 * Breakpoints service for GDB 7.4.
 * Using breakpoint notifications introduced in 7.4 supports synchronization between the breakpoints
 * set from the GDB console and the Breakpoints view as well as the tracepoints reported form trace files.
 *
 * @since 4.2
 */
GDBBreakpoints_7_6 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBreakpoints_7_6.java)/**
 * Breakpoint service for GDB 7.6.
 *
 * @since 4.2
 */
GDBBreakpoints_7_7 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBreakpoints_7_7.java)/**
 * Breakpoints service for GDB 7.7.
 * This version supports dynamic printf
 *
 * @since 4.4
 */
GDBDisassembly_7_3 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBDisassembly_7_3.java)/**
 * @since 4.4
 */
GDBLoadInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBHardwareAndOS.java)/**
	 * @since 4.2
	 */
CPUInfoManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBHardwareAndOS.java)/**
	 * A commandControl that will decide what to do when needing to find the CPUInfo.
	 * The class is used together with a CommandCache an MIMetaCommands to fetch
	 * information we need.
	 */
GDBHardwareAndOS (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBHardwareAndOS.java)/**
 * This class implements the {@link IGDBHardwareAndOS} interface which gives access
 * to hardware information about the target.
 *
 * @since 4.1
 */
GDBHardwareAndOS_7_10 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBHardwareAndOS_7_10.java)/**
 * This extension to the GDBHardwareAndOS service takes advantage of GDB providing CPU information (on Linux)
 * @since 4.7
 */
GDBHardwareAndOS_7_5 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBHardwareAndOS_7_5.java)/**
 * @since 4.2
 */
GDBMemory (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBMemory.java)/**
 * @since 4.2
 */
GDBMemory_7_6 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBMemory_7_6.java)/**
 * Memory service that uses the enhancements from GDB 7.6:
 * 	=memory-changed MI event
 *
 * @since 4.2
 */
ExpressionGroupDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBPatternMatchingExpressions.java)/**
	 * An expression-group is an expression that requires expansion into a (potentially empty)
	 * list of sub-expressions.  Using an expression-group allows the user to create groups
	 * of expressions very quickly.
	 *
	 * We support two aspects for expression-goups:
	 * 1- The glob syntax (http://www.kernel.org/doc/man-pages/online/pages/man7/glob.7.html)
	 *    This allows to user to specify glob-patterns to match different expressions.
	 * 2- Separated expressions, each potentially using the glob-syntax
	 */
ExpressionGroupDMData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBPatternMatchingExpressions.java)/**
	 * The model data interface for expression-groups
	 */
GDBPatternMatchingExpressions (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBPatternMatchingExpressions.java)/**
 * Expressions service added as a layer above the standard Expressions service.
 * This layer allows to support expression-groups and glob-pattern matching.
 * Expression-groups give the user the ability to create a separated list
 * of expressions in a single entry.
 * Glob-patterns are a way to specify a set of expressions that match the
 * pattern.
 * @since 4.2
 */
MIExecutionDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * Context representing a thread in GDB/MI
	 */
MIContainerDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * Context representing a thread group of GDB/MI.
	 */
MIThreadDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * Context representing a thread.
	 * @since 4.0
	 */
MIExitedProcessDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * A process context representing a process that has exited.
	 * Since an exited process no longer has a pid, we need another way
	 * of characterizing it.  We use the groupId instead.
	 * Note that with GDB 7.0 and 7.1, the groupId is the pid, so that
	 * does not help us, but since we only handle single-process debugging
	 * for those versions of GDB, we don't need any id to know we are
	 * dealing with our single process.
	 * Starting with GDB 7.2, we handle multi-process, but then we
	 * can use the groupId as a persistent identifier of each process,
	 * even an exited one.
	 * @since 4.7
	 */
MIThreadDMData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * The data of a corresponding thread or process.
	 */
MIExitedProcessDMData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * The data corresponding to an exited process.
	 * @since 4.7
	 */
MIProcessDMCAndData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * This class provides an implementation of both a process context and process data.
	 * It is used to be able to return a list of processes including their data all at once.
	 * @since 4.0
	 */
ContainerStartedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * Event indicating that an container (debugged process) has started.  This event
	 * implements the {@link IStartedMDEvent} from the IRunControl service.
	 */
ContainerExitedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * Event indicating that an container is no longer being debugged.  This event
	 * implements the {@link IExitedMDEvent} from the IRunControl service.
	 */
ProcessRemovedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	 * @since 4.7
	 */
ExitedProcInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	* Information about an exited process
	* @since 4.7
	*/
LRUExitedProcessMap (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
	* A LRU (least-recently-used) map that limits the amount of exited process list.
	* Once the limit is reached, oldest exited processes are automatically removed
	* when new ones are inserted.  This avoids the risk of growing the list
	* of exited processes too much and showing too many in the debug view.
	*/
GDBProcesses_7_0 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java)/**
 * This class implements the IProcesses interface for GDB 7.0
 * which supports the new -list-thread-groups command.
 */
GDBProcesses_7_1 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_1.java)/**
 * This class implements the IProcesses interface for GDB 7.1
 * which provides new information about cores for threads and processes.
 *
 * @since 4.0
 */
GDBProcesses_7_10 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_10.java)/**
 * Adding support for reverse trace method selection with GDB 7.10
 *
 * @since 5.0
 */
GDBProcesses_7_11 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_11.java)/**
 * @since 5.4
 */
GDBProcesses_7_12 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_12.java)/**
 * @since 5.2
 */
ContainerCreatedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_2.java)/**
	 * Event indicating that a container (gdb inferior) has been created, but is not yet running.
	 * @since 5.1
	 */
GDBProcesses_7_2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_2.java)/**
 * Adding support for multi-process with GDB 7.2
 *
 * @since 4.0
 */
GDBProcesses_7_2_1 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_2_1.java)/**
 * Version for GDB 7.2.1, which does not need a workaround
 * for a bug in GDB 7.2 (Bug 352998)
 *
 * @since 4.1
 */
GDBProcesses_7_3 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_3.java)/**
 * Version for GDB 7.3
 *
 * @since 4.7
 */
GDBContainerDMC_7_4 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_4.java)/**
	 * A container context that is not an IBreakpointsTargetDMContext.
	 */
GDBProcesses_7_4 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_4.java)/**
 * Adapt to GDB 7.4 where breakpoints are for all inferiors at once.
 *
 * @since 4.4
 */
GroupRegistersMap (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRegisters.java)/**
	 * Used to associate two dependent maps, Group to ordered Register[] and Group to indexed registers (Map<String,
	 * Register>)
	 */
GDBRegisters (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRegisters.java)/**
 * <p>An extension of MIRegisters to support management of Register Groups as per the IRegisters2 interface.</p>
 * <p>The managed registered groups are user-defined subsets of the complete list of Registers reported by GDB for a specific Target</p>
 * <p>This class also triggers the read/write (persistence) of the user-defined Register Groups during the start/shutdown process of a session respectively.
 * It optionally supports persistence of user-defined Register Groups per container/process,
 * see {@link #getPersistenceIdForRegisterGroupContainer(IContainerDMContext)}.</p>
 * @since 4.6
 */
GdbReverseModeChangedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0.java)/** @since 4.2 */
RunControlEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * Base class for events generated by the MI Run Control service.  Most events
	 * generated by the MI Run Control service are directly caused by some MI event.
	 * Other services may need access to the extended MI data carried in the event.
	 *
	 * @param <V> DMC that this event refers to
	 * @param <T> MIInfo object that is the direct cause of this event
	 * @see MIRunControl
	 */
SuspendedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * Indicates that the given thread has been suspended.
	 * @since 4.0
	 */
BreakpointHitEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * Indicates that the given thread has been suspended on a breakpoint.
	 * @since 4.0
	 */
ResumedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * @since 4.0
	 */
StartedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * @since 4.0
	 */
ExitedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * @since 4.0
	 */
RunToLineActiveOperation (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * @since 4.0
	 */
MonitorSuspendJob (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * Job that waits for a *stopped event after a suspend operation on a thread.
	 *
	 * If the suspend operation receives its corresponding *stopped event in time,
	 * the job will mark the RM with a success status.  If the event is not received
	 * before the timeout, the job will fail the request monitor.
	 *
	 * @since 4.5
	 */
TargetAvailableOperationInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * Utility class to store the parameters of the executeWithTargetAvailable() operations.
	 * @since 4.0
	 */
IsTargetAvailableStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * This part of the sequence looks for all threads that will need to be suspended.
	 * @since 3.0
	 */
MakeTargetAvailableStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * Suspended all the threads we have selected.
	 * @since 3.0
	 */
ExecuteQueuedOperationsStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * This step of the sequence takes care of executing all the steps that
	 * were passed to ExecuteWithTargetAvailable().
	 * @since 4.0
	 */
RestoreTargetStateStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
	 * If the sequence had to interrupt the execution context of interest,
	 * this step will resume it again to reach the same state as when we started.
	 * @since 3.0
	 */
GDBRunControl_7_0_NS (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_0_NS.java)/**
 * Implementation note: This class implements event handlers for the events that
 * are generated by this service itself. When the event is dispatched, these
 * handlers will be called first, before any of the clients. These handlers
 * update the service's internal state information to make them consistent with
 * the events being issued. Doing this in the handlers as opposed to when the
 * events are generated, guarantees that the state of the service will always be
 * consistent with the events. The purpose of this pattern is to allow clients
 * that listen to service events and track service state, to be perfectly in
 * sync with the service state.
 * @since 1.1
 */
GDBRunControl_7_10 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_10.java)/** @since 5.0 */
GDBRunControl_7_12 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_12.java)/**
 * @since 5.2
 */
GDBRunControl_7_2_NS (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_2_NS.java)/**
 * Version of the non-stop runControl for GDB 7.2.
 *
 * @since 4.0
 */
GDBRunControl_7_6 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBRunControl_7_6.java)/**
 * @since 4.2
 */
GDBSourceLookup (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBSourceLookup.java)/**
 * Default implementation of {@link IGDBSourceLookup}
 *
 * @since 5.0
 */
InvalidTraceRecordDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBTraceControl_7_2.java)/**
	 * Trace record context used to indicate that there is no current trace record selected.
	 */
GDBTraceControl_7_2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBTraceControl_7_2.java)/**
 * This class implements the IGDBTraceControl interface which gives access
 * to the debugger's tracing functionality.
 *
 * @since 3.0
 */
GDBTraceControl_7_4 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBTraceControl_7_4.java)/**
 * This class adds extra support for Trace Control for GDB 7.4
 *
 * @since 4.4
 */
IGDBBackend (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBBackend.java)/**
 * Service that manages back end GDB process, such as launching and monitoring
 * GDB process, managing certain GDB parameters/options. This service makes it
 * easy for debugger implementations to customize the way to start GDB process
 * and convert some parameters if needed. See bug 240092 for more.<br>
 * <br>
 * A base implementation {@link GDBBackend} is provided that should be
 * sufficient for most cases. But if you have special needs, it's recommended to
 * subclass the base implementation. <br>
 * <br>
 * Here are some special cases: <br>
 * Example #1: GDB is usually launched on the host machine where Eclipse is
 * running, but it can also be launched on a remote machine through, say, SSH. <br>
 * Example #2: GDB is usually launched in the host file system, but it can also
 * be launched in a chroot'ed file system such as Scratchbox (see
 * http://www.scratchbox.org)<br>
 *
 * @since 1.1
 */
IHardwareTargetDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS.java)/**
	 * The physical target that has CPUs and Cores.
	 */
ICPUDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS.java)/**
	 * A physical container of cores.
	 */
ICoreDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS.java)/**
	 * A logical core.  Without SMT (Simultaneous Multi-Threading),
	 * a logical core is a physical core.  However, with SMT, each
	 * physical core will have two logical cores.
	 * This context represents each logical core.
	 */
ICPUDMData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS.java)/**
	 * Model data interface corresponding to ICPUDMContext.
	 */
ICoreDMData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS.java)/**
	 * Model data interface corresponding to ICoreDMContext.
	 */
IGDBHardwareAndOS (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS.java)/**
 * <strong>EXPERIMENTAL</strong>.  This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 *
 * The IGDBHardware service provides access to information about the target
 * hardware, such as the number of cores.
 *
 * @since 4.1
 */
IResourceClass (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS2.java)/** Information about OS resource class. */
IResourcesInformation (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS2.java)/** Information about OS resources of specific resource class
	 * This is conceptually a table. GDB provides column headers, and
	 * data rows, but does not provide any additional information about
	 * the meaning
	 */
ILoadInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS2.java)/**
	 * Information about the CPU/core load for one given CPU or core
	 */
IGDBHardwareAndOS2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBHardwareAndOS2.java)/**
 * Interface for accessing information about OS resources.
 *
 * <strong>EXPERIMENTAL</strong>.  This class or interface has been added as part
 * of a work in progress. There is no guarantee that this API will work or that
 * it will remain the same.
 *
 * @since 4.2
 */
IGDBMemory (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBMemory.java)/**
 * Provides access to memory related data such as address size and endianness.
 *
 * @since 4.2
 */
IGDBMemory2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBMemory2.java)/**
 * Extension interface to provide access to the addressable size of a memory context
 *
 * @since 4.4
 */
IGdbThreadDMData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBProcesses.java)/**
	 * This interface extends the DSF ThreadDMData to provide
	 * the cores on which a process or a thread is located as well
	 * as the owner of the process.
	 *
	 * @since 4.0
	 */
IGdbThreadDMData2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBProcesses.java)/**
	 * This interface extends the {@link IGdbThreadDMData} to provide a description
	 * for a process or thread.
	 *
	 * @since 5.6
	 */
IGdbThreadExitedDMData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBProcesses.java)/**
	 * This interface describes an exited thread/process.
	 *
	 * @since 4.7
	 */
IThreadRemovedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBProcesses.java)/**
	 * Indicates that a process or thread is no longer being tracked by
	 * the session.  This event usually refers to exited elements that
	 * were still being shown to the user but that have now been removed.
	 * @since 4.7
	 */
IGDBSourceLookup (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBSourceLookup.java)/**
 * Extension to the {@link ISourceLookup} service that allows GDB backend to
 * handle the path mapping source container type -
 * {@link MappingSourceContainer} - on the GDB side using GDB's
 * "set substitute-path" mechanism.
 *
 * @since 5.0
 */
ITraceTargetDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBTraceControl.java)/**
	 * Marker interface for a context on which trace operations can be performed
	 */
ITraceRecordDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBTraceControl.java)/**
	 * Specific Trace Record context.  It describes tracing data.
	 */
ITraceRecordDMData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBTraceControl.java)/**
	 * This is the model data interface that corresponds to ITraceRecordDMContext.
	 */
ITracingSupportedChangeDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBTraceControl.java)/**
	 * Trace events
	 */
ITraceStatusDMData2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBTraceControl.java)/** @since 4.4 */
IGDBTraceControl (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBTraceControl.java)/**
 * The TraceControl service provides access to the debugger Tracing functionality.
 * It is used to do such things as start and stop tracing.
 *
 * @since 3.0
 */
IGDBTraceControl2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBTraceControl2.java)/**
 * Enhancements to the trace control functionality, which allow to enable new settings.
 * @since 4.4
 */
IReverseModeChangedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IReverseRunControl.java)/**
	 * Indicates that the enablement of reverse debugging has changed.
	 *
	 * @since 4.2
	 */
IReverseRunControl (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IReverseRunControl.java)/**
 * This interface provides access to controlling and monitoring the reverse execution
 * state of a process being debugged.
 *
 * @since 2.0
 */
IReverseRunControl2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IReverseRunControl2.java)/** @since 5.0 */
Messages (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/Messages.java)/**
 * Preference strings.
 * @since 4.1
 */
StartOrRestartProcessSequence_7_0 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/StartOrRestartProcessSequence_7_0.java)/**
 * This class causes a process to start (run for the first time), or to
 * be restarted.  The complexity is due to the handling of reverse debugging,
 * which this class transparently enables if necessary.
 *
 * This sequence is used for GDB >= 7.0 which supports reverse debugging.
 *
 * @since 4.0
 */
StartOrRestartProcessSequence_7_10 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/StartOrRestartProcessSequence_7_10.java)/**
 * @since 5.0
 */
StartOrRestartProcessSequence_7_12 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/StartOrRestartProcessSequence_7_12.java)/**
 * @since 5.2
 */
StartOrRestartProcessSequence_7_3 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/StartOrRestartProcessSequence_7_3.java)/**
 * Specialization for GDB >= 7.3
 * @since 4.7
 */
BreakpointActionAdapter (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/breakpoint/actions/BreakpointActionAdapter.java)/**
 * @since 3.0
 */
CLIDebugActionEnabler (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/breakpoint/actions/CLIDebugActionEnabler.java)/**
 *
 * This class permits to execute custom user debugger commands through cli/mi bridge
 *
 * @since 5.0
 */
MILogActionEnabler (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/breakpoint/actions/MILogActionEnabler.java)/**
 * @since 3.0
 */
MIResumeActionEnabler (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/breakpoint/actions/MIResumeActionEnabler.java)/**
 * @since 3.0
 */
MIReverseDebugEnabler (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/breakpoint/actions/MIReverseDebugEnabler.java)/**
 *
 * This class permits to enable, disable or toggle the reverse
 * debugging mode.
 *
 * @since 4.2
 */
AbstractCLIProcess (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/AbstractCLIProcess.java)/**
 * This Process implementation tracks the GDB process.  This
 * process object is displayed in the Debug view and is used to
 * accept CLI commands and to write their output to the console.
 *
 * Starting with GDB 7.12, as long as a PTY is available,
 * this process is no longer used.  Instead, the real GDB process,
 * along with its console will be used directly.  A second PTY
 * will be used to communicate using MI.
 *
 * @see org.eclipse.debug.core.model.IProcess
 */
ErrorThread (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/AbstractMIControl.java)/**
	 * A thread that will read GDB's stderr stream.
	 * When a PTY is not being used for the inferior, everything
	 * the inferior writes to stderr will be output on GDB's stderr.
	 * If we don't read it, gdb eventually blocks, when the sream is
	 * full.
	 *
	 * Although we could write this error output to the inferior
	 * console, we actually write it to the GDB console.  This is
	 * because we cannot differentiate between inferior errors printouts
	 * and GDB error printouts.
	 *
	 * See bug 327617 for details.
	 */
AbstractMIControl (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/AbstractMIControl.java)/**
 * Base implementation of an MI control service.  It provides basic handling
 * of input/output channels, and processing of the commands.
 * <p>
 * Extending classes need to implement the initialize() and shutdown() methods.
 */
CLIEventProcessor (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/CLIEventProcessor.java)/**
 * GDB debugger output listener.
 */
CLIEventProcessor_7_0 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/CLIEventProcessor_7_0.java)/**
 * GDB debugger output listener.
 * @since 1.1
 */
CLIEventProcessor_7_7 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/CLIEventProcessor_7_7.java)/**
 * @since 4.4
 */
CommandFactory (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/CommandFactory.java)/**
 * Factory to create MI/CLI commands.
 *
 * @since 3.0
 */
Adjustable (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/Adjustable.java)/**
 * The implementor of this interface may adjust its output.
 *
 * This is used for MICommands where the output of each option and/or parameter
 * may be adjusted independently to conform to the current version of the MI
 * interface.
 *
 */
CLIAddressableSize (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIAddressableSize.java)/**
 * <p>CLI command used to resolve the addressable size </p>
 * The minimum addressable size
 * is determined by the space used to store a "char" on a target system
 * <br>
 * This is
 * then resolved by retrieving a hex representation of -1 casted to the size of
 * a "char"
 * <br>
 * <br>E.g. from GDB command line
 * <br>
 * > p/x (char)-1 <br>
 * > $7 = 0xffff <br>
 *
 * <p>Since two hex characters are representing one octet, for the above example
 * this method should return 2</p>
 *
 * @since 4.4
 */
CLIAttach (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIAttach.java)/**
 * This command connects to a remote target.
 */
CLICatch (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLICatch.java)/**
 * gdb 'catch' command. Even though the command has been around since gdb 6.6,
 * it's still not supported in gdb 7.0 MI.
 *
 * @since 3.0
 */
CLICommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLICommand.java)/**
 * Represents a CLI command.
 */
CLIDetach (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIDetach.java)/**
 * This command disconnects from a remote target.
 * @since 1.1
 */
CLIExecAbort (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIExecAbort.java)/**
 *
 *     kill
 *
 *  Terminates the user (MI inferior) process
 *
 */
CLIInferior (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIInferior.java)/**
 * Selects the specified inferior in GDB.
 *
 * @since 5.2
 */
CLIInfoBreak (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIInfoBreak.java)/**
 * 'info break [BP_REFERENCE]
 *
 * will return information about the specified breakpoint.  If no breakpoint is
 * specified, it will return information about all breakpoints.
 * We use it to find out to which inferior a breakpoint is applicable.
 * This information is not available from -break-list or -break-info until GDB 7.6.
 *
 * @since 4.2
 */
CLIInfoProgram (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIInfoProgram.java)/**
 * @since 3.0
 */
CLIInfoRecord (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIInfoRecord.java)/**
 * @since 5.0
 */
CLIInfoSharedLibrary (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIInfoSharedLibrary.java)/**
 *
 *    info sharedlibrary
 *
 */
CLIInfoThreads (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIInfoThreads.java)/**
 *
 *    info threads
 *
 */
CLIJump (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIJump.java)/**
 * jump LINESPEC
 * jump LOCATION
 *          Resume execution at line LINESPEC or at address given by LOCATION.
 *
 * @since 3.0
 */
CLIMaintenance (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIMaintenance.java)/**
 * Executes "maintenance" command.
 * @since 4.0
 */
CLIPasscount (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIPasscount.java)/**
 * Set the passcount of a tracepoint. The passcount is a way to automatically stop a trace experiment.
 * If a tracepoint's passcount is N, then the trace experiment will be automatically stopped on the N'th
 * time that tracepoint is hit.  If no passcount is given, the trace experiment will run until stopped
 * explicitly by the user.

 * @since 3.0
 */
CLIRecord (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIRecord.java)/**
 * This command turns on on off the recording of "Process Record and Replay".
 *
 * @since 3.0
 */
CLIRemote (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIRemote.java)/**
 * Base class for the 'remote' command of GDB.
 *
 * @since 4.1
 */
CLIRemoteGet (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIRemoteGet.java)/**
 * remote get targetfile hostfile
 *    Copy file targetfile from the target system to hostfile on the host system.
 * @since 4.1
 */
CLISharedLibrary (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLISharedLibrary.java)/**
 * CLI command implement gdb sharedlibary command<br>
 * sharedlibrary regex<br>
 * Load shared object library symbols for files matching a Unix regular
 * expression. As with files loaded automatically, it only loads shared
 * libraries required by your program for a core file or after typing run. If
 * regex is omitted all shared libraries required by your program are loaded.
 *
 * @since 4.6
 */
CLIShowEndian (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIShowEndian.java)/**
 * Returns the endianness of the current GDB target.
 *
 * @since 4.2
 */
CLISource (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLISource.java)/**
 *
 *     source FILE
 *
 *  Source a file of commands
 *
 */
CLIThread (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIThread.java)/**
 *
 *    thread
 *
 *    [Current thread is 1 (Thread 0xb7cc56b0 (LWP 5488))]
 *
 * @since 3.0
 *
 */
CLITrace (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLITrace.java)/**
 * This command creates a tracepoint.
 * @since 3.0
 */
CLITraceDump (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLITraceDump.java)/**
 * GDB tdump CLI command.
 * @since 4.0
 *
 */
CLIUnsetEnv (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIUnsetEnv.java)/**
 *
 * unset env [VARNAME]
 *
 * Deletes the environment variable VARNAME for the inferior, not GDB itself.
 * If VARNAME is omitted, all environment variables are deleted.
 *
 * @since 3.0
 */
CLIUnsetSubstitutePath (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/CLIUnsetSubstitutePath.java)/**
 * unset substitute-path
 *
 * Deletes all the path substitutions.
 *
 * @since 5.0
 */
MIAddInferior (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIAddInferior.java)/**
 *   -add-inferior
 *   ^done,inferior="i2"
 *
 *   Creates a new inferior. The created inferior is not associated with any executable.
 *   Such association may be established with the '-file-exec-and-symbols' command.
 *   The command response has a single field, 'thread-group', whose value is the
 *   identifier of the thread group corresponding to the new inferior.
 *
 *   @since 4.0
 */
MIBreakInsert (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIBreakInsert.java)/**
 * -break-insert [ -t ] [ -h ] [ -f ] [ -d ] [ -a ]
 *       [ -c CONDITION ] [ -i IGNORE-COUNT ]
 *       [ -p THREAD ] [ LOCATION ]
 *
 * If specified, LOCATION, can be one of:
 *  * function
 *  * filename:linenum
 *  * filename:function
 *  * *address
 *
 * The possible optional parameters of this command are:
 *
 * '-t'
 *      Insert a temporary breakpoint.
 *
 * '-h'
 *      Insert a hardware breakpoint.
 *      When inserting a tracepoint (-a), this option indicates a fast tracepoint
 *
 * '-c CONDITION'
 *      Make the breakpoint conditional on CONDITION.
 *
 * '-i IGNORE-COUNT'
 *      Initialize the IGNORE-COUNT (number of breakpoint hits before breaking).
 *
 * '-f'
 *      If location cannot be parsed (for example if it refers to unknown files or
 *      functions), create a pending breakpoint. Without this flag, if a location
 *      cannot be parsed, the breakpoint will not be created and an error will be
 *      reported.
 *      Only available starting GDB 6.8
 *
 * '-d'
 *      Create a disabled breakpoint.
 *      Only available starting GDB 7.0
 *
 * '-a'
 *      Insert a tracepoint instead of a breakpoint
 *      Only available starting GDB 7.2
 *
 * '-p THREAD'
 *      THREAD on which to apply the breakpoint
 */
MIBreakList (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIBreakList.java)/**
 *
 *   -break-list
 *
 *   Displays the list of inserted breakpoints, showing the following
 * fields:
 *
 * `Number'
 *     number of the breakpoint
 *
 * `State'
 *     type of the breakpoint: `breakpoint' or `watchpoint'
 *
 * `Disposition'
 *     should the breakpoint be deleted or disabled when it is hit: `keep'
 *     or `nokeep'
 *
 * `Enabled'
 *     is the breakpoint enabled or no: `y' or `n'
 *
 * `Address'
 *     memory location at which the breakpoint is set
 *
 * `What'
 *     logical location of the breakpoint, expressed by function name,
 *
 * `Times'
 *     number of times the breakpoint has been hit
 *
 *   If there are no breakpoints or watchpoints, the `BreakpointTable'
 *   `body' field is an empty list.
 *
 */
MIBreakWatch (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIBreakWatch.java)/**
 * -break-watch [ -a | -r ] LOCATION
 *
 * Create a watchpoint on LOCATION. Without either of the options, the watchpoint
 * created is a regular watchpoint, i.e., a watchpoint that triggers when the
 * memory LOCATION is accessed for writing.

 * The possible optional parameters of this command are:
 *
 * '-a'
 *      Creates an access watchpoint i.e. a watchpoint that triggers either
 *      on a read from or on a write to the memory location.
 *
 * '-r'
 *      Creates a read watchpoint i.e. a watchpoint that triggers only when
 *      the memory location is accessed for reading.
 */
MINoChangeAdjustable (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MICommand.java)/**
	 * @since 5.2
	 */
MICommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MICommand.java)/**
 * Represents any MI command.
 */
MIDataEvaluateExpression (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIDataEvaluateExpression.java)/**
 *
 *      -data-evaluate-expression EXPR
 *
 *   Evaluate EXPR as an expression.  The expression could contain an
 *inferior function call.  The function call will execute synchronously.
 *If the expression contains spaces, it must be enclosed in double quotes.
 *
 */
MIDataListRegisterNames (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIDataListRegisterNames.java)/**
 *
 *     -data-list-register-names [ ( REGNO )+ ]
 *
 *   Show a list of register names for the current target.  If no
 * arguments are given, it shows a list of the names of all the registers.
 * If integer numbers are given as arguments, it will print a list of the
 * names of the registers corresponding to the arguments.  To ensure
 * consistency between a register name and its number, the output list may
 * include empty register names.
 *
 */
MIDataListRegisterValues (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIDataListRegisterValues.java)/**
 *
 *       -data-list-register-values FMT [ ( REGNO )*]
 *
 *    Display the registers' contents.  FMT is the format according to
 * which the registers' contents are to be returned, followed by an
 * optional list of numbers specifying the registers to display.  A
 * missing list of numbers indicates that the contents of all the
 * registers must be returned.
 *
 */
MIDataReadMemory (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIDataReadMemory.java)/**
 * -data-read-memory [ -o BYTE-OFFSET ]
 *      ADDRESS WORD-FORMAT WORD-SIZE
 *      NR-ROWS NR-COLS [ ASCHAR ]
 *
 * where:
 *
 * 'ADDRESS'
 *      An expression specifying the address of the first memory word to be
 *      read.  Complex expressions containing embedded white space should
 *      be quoted using the C convention.
 *
 * 'WORD-FORMAT'
 *      The format to be used to print the memory words.  The notation is
 *      the same as for GDB's `print' command (*note Output formats:
 *      Output Formats.).
 *
 * 'WORD-SIZE'
 *      The size of each memory word in bytes.
 *
 * 'NR-ROWS'
 *      The number of rows in the output table.
 *
 * 'NR-COLS'
 *      The number of columns in the output table.
 *
 * 'ASCHAR'
 *      If present, indicates that each row should include an ASCII dump.
 *      The value of ASCHAR is used as a padding character when a byte is
 *      not a member of the printable ASCII character set (printable ASCII
 *      characters are those whose code is between 32 and 126,
 *      inclusively).
 *
 * 'BYTE-OFFSET'
 * 		An offset to add to ADDRESS before fetching the memory.
 *
 */
MIDataReadMemoryBytes (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIDataReadMemoryBytes.java)/**
 * -data-read-memory-bytes [ -o BYTE-OFFSET ]
 *                           ADDRESS COUNT
 * where:
 *
 * `ADDRESS'
 *     An expression specifying the address of the first memory word to be
 *     read.  Complex expressions containing embedded white space should
 *     be quoted using the C convention.
 *
 * `COUNT'
 *     The number of addressable units to read.  This should be an integer literal.
 *
 * `BYTE-OFFSET'
 *     The offset in addressable units relative to ADDRESS at which to start
 *     reading.  This should be an integer literal.  This option is
 *     provided so that a frontend is not required to first evaluate
 *     address and then perform address arithmetics itself.
 * @since 4.0
 */
MIDataWriteMemory (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIDataWriteMemory.java)/**
 * -data-write-memory [ -o COLUMN_OFFSET ]
 *   	ADDRESS WORD-FORMAT WORD-SIZE VALUE
 *
 * where:
 *
 * 'COLUMN_OFFSET'
 *   	The cell offset from the beginning of the memory grid row
 *
 * 'ADDRESS'
 *   	Row address of the cell to be written
 *
 * 'WORD-FORMAT'
 *      The format to be used to print the memory words
 *
 * 'WORD-SIZE'
 *      The size of each memory word in bytes
 *
 * 'VALUE'
 * 		The value to be written into the cell
 *
 * Writes VALUE into ADDRESS + (COLUMN_OFFSET * WORD_SIZE).
 *
 */
MIDataWriteMemoryBytes (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIDataWriteMemoryBytes.java)/**
 * -data-write-memory-bytes ADDRESS CONTENTS
 *
 * where:
 *
 * 'ADDRESS'
 *     An expression specifying the address of the first memory word to be
 *     written.  Complex expressions containing embedded white space should
 *     be quoted using the C convention.
 *
 * 'CONTENTS'
 *     The hex-encoded bytes to write.
 * @since 4.2
 */
DPrintfAdjustable (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIDPrintfInsert.java)/**
	 * This adjustable makes sure that the dprintf parameters will not be modified
	 * any further.  The reason for that is that the -dprintf-insert command
	 * accepts the quoted string and any \n directly.
	 */
MIDPrintfInsert (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIDPrintfInsert.java)/**
 * -dprintf-insert [ -t ] [ -f ] [ -d ]
 *       [ -c CONDITION ] [ -i IGNORE-COUNT ]
 *       [ -p THREAD ] [ LOCATION ] [ FORMAT ] [ ARGUMENT ]
 *
 * If specified, LOCATION, can be one of:
 *  * function
 *  * filename:linenum
 *  * filename:function
 *  * *address
 *
 *
 * The possible optional parameters of this command are:
 *
 * '-t'
 *      Insert a temporary dprintf.
 *
 * '-c CONDITION'
 *      Make the dprintf conditional on CONDITION.
 *
 * '-i IGNORE-COUNT'
 *      Initialize the IGNORE-COUNT.
 *
 * '-f'
 *      If location cannot be parsed (for example if it refers to unknown files or
 *      functions), create a pending dprintf. Without this flag, if a location
 *      cannot be parsed, the dprintf will not be created and an error will be
 *      reported.
 *
 * '-d'
 *      Create a disabled dprintf.
 *
 * '-p THREAD'
 *      THREAD on which to apply the dprintf
 *
 * Available with GDB 7.7.
 *
 * @since 4.4
 */
MIEnablePrettyPrinting (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIEnablePrettyPrinting.java)/**
 * -enable-pretty-printing
 *
 * Enables Python based Pretty printing
 *
 * @since 4.0
 */
MIEnvironmentCD (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIEnvironmentCD.java)/**
 *      -environment-cd PATHDIR
 *
 *   Set GDB's working directory.
 * @since 1.1
 *
 */
MIEnvironmentDirectory (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIEnvironmentDirectory.java)/**
 *
 *      -environment-directory [-r] PATHDIR
 *
 *   Add directory PATHDIR to beginning of search path for source files.
 *   -r will first reset the path to its default
 *
 */
MIExecArguments (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecArguments.java)/**
 *
 *      -exec-arguments ARGS
 *
 *   Set the inferior program arguments, to be used in the next `-exec-run'.
 *   Equivalent to using {@link MIGDBSetArgs}
 *
 * @since 4.0
 */
MIExecContinue (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecContinue.java)/**
 *
 *      -exec-continue [--all | --thread-group ID]
 *
 *   Asynchronous command.  Resumes the execution of the inferior program
 *   until a breakpoint is encountered, or until the inferior exits.
 *
 */
MIExecFinish (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecFinish.java)/**
 *  <code>-exec-finish</code>
 *  <p>
 *  Asynchronous command.  Resumes the execution of the inferior program
 *  until the current function is exited.  Displays the results returned by
 *  the function.
 *  </p>
 *  <p>
 *  The <code>-exec-finish</code> command operates on the selected stack
 *  frame.  Therefore the constructor requires a stack frame context.
 *  </p>
 *
 */
MIExecInterrupt (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecInterrupt.java)/**
 *
 *      -exec-interrupt [--all | --thread-group ID]
 *
 *  Asynchronous command.  Interrupts the background execution of the
 *  target.  Note how the token associated with the stop message is the one
 *  for the execution command that has been interrupted.  The token for the
 *  interrupt itself only appears in the `^done' output.  If the user is
 *  trying to interrupt a non-running program, an error message will be
 *  printed.
 *
 */
MIExecJump (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecJump.java)/**
 *
 * -exec-jump LOCATION
 *
 * <p>
 * Resumes execution of the inferior program at LOCATION
 * </p>
 *
 * Available since GDB 7.0
 *
 * @since 3.0
 */
MIExecNext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecNext.java)/**
 *
 *     -exec-next [count]
 *
 *  Asynchronous command.  Resumes execution of the inferior program,
 *  stopping when the beginning of the next source line is reached.
 *
 */
MIExecNextInstruction (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecNextInstruction.java)/**
 *
 *      -exec-next-instruction [count]
 *
 *   Asynchronous command.  Executes one machine instruction.  If the
 * instruction is a function call continues until the function returns.  If
 * the program stops at an instruction in the middle of a source line, the
 * address will be printed as well.
 *
 */
MIExecReturn (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecReturn.java)/**
 *
 *  -exec-return [arg]
 *
 *  <p>
 *  Makes current function return immediately.  Doesn't execute the
 *  inferior.  Displays the new current frame.
 *  </p>
 *  <p>
 *  The <code>-exec-return</code> command operates on the selected stack
 *  frame.  Therefore the constructor requires a stack frame context.
 *  </p>
 *
 */
MIExecReverseContinue (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecReverseContinue.java)/**
 * Resume backwards.
 *
 * @since 2.0
 */
MIExecReverseNext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecReverseNext.java)/**
 * Steps backward one source code line, not entering function calls.
 *
 * @since 2.0
 */
MIExecReverseNextInstruction (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecReverseNextInstruction.java)/**
 * Steps backward one machine instruction, not entering function calls.
 *
 * @since 2.0
 */
MIExecReverseStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecReverseStep.java)/**
 * Step backwards i source lines, entering function calls.
 *
 * @since 2.0
 */
MIExecReverseStepInstruction (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecReverseStepInstruction.java)/**
 * Step backwards i instructions, entering function calls.
 *
 * @since 2.0
 */
MIExecRun (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecRun.java)/**
 *
 *      -exec-run [ARGS]
 *
 *   Asynchronous command.  Starts execution of the inferior from the
 * beginning.  The inferior executes until either a breakpoint is
 * encountered or the program exits.
 *
 * ARGS will be passed to the inferior.  This option is not documented.
 *
 */
MIExecStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecStep.java)/**
 *
 *      -exec-step [count]
 *
 *   Asynchronous command.  Resumes execution of the inferior program,
 * stopping when the beginning of the next source line is reached, if the
 * next source line is not a function call.  If it is, stop at the first
 * instruction of the called function.
 *
 */
MIExecStepInstruction (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecStepInstruction.java)/**
 *
 *      -exec-step-instruction [count]

 *  Asynchronous command.  Resumes the inferior which executes one
 * machine instruction.  The output, once GDB has stopped, will vary
 * depending on whether we have stopped in the middle of a source line or
 * not.  In the former case, the address at which the program stopped will
 * be printed as well.
 *
 */
MIExecUncall (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecUncall.java)/**
 * Steps backward until the line where the current method
 * was originally called.
 *
 * @since 2.0
 */
MIExecUntil (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIExecUntil.java)/**
 *
 *     -exec-until [ LOCATION ]
 *
 *  Asynchronous command.  Executes the inferior until the LOCATION
 * specified in the argument is reached.  If there is no argument, the
 * inferior executes until a source line greater than the current one is
 * reached.  The reason for stopping in this case will be
 * `location-reached'.
 *
 */
MIFileExecAndSymbols (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIFileExecAndSymbols.java)/**
 * -file-exec-and-symbols [FILE]
 *
 * Specify the executable file to be debugged. This file is the one from which
 * the symbol table is also read. If no file is specified, the command clears
 * the executable and symbol information. If breakpoints are set when using this
 * command with no arguments, gdb will produce error messages. Otherwise, no
 * output is produced, except a completion notification.
 */
MIFileExecFile (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIFileExecFile.java)/**
 *   -file-exec-file [FILE]
 *
 *   Specify the executable file to be debugged. Unlike `-file-exec-and-symbols',
 *   the symbol table is not read from this file. If used without argument, GDB
 *   clears the information about the executable file. No output is produced,
 *   except a completion notification.
 */
MIFileSymbolFile (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIFileSymbolFile.java)/**
 *   -file-symbol-file [FILE]
 *
 *   Read symbol table info from the specified file argument. When used without
 *   arguments, clears GDB's symbol table info. No output is produced, except
 *   for a completion notification.
 */
MIGDBExit (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBExit.java)/**
 *
 *     -gdb-exit
 *
 *  Exit GDB immediately.
 *
 */
MIGDBSet (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSet.java)/**
 *
 *     -gdb-set
 *
 */
MIGDBSetArgs (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetArgs.java)/**
 *      -gdb-set args ARGS
 *
 * Set the inferior program arguments, to be used in the next `-exec-run'.
 * @since 1.1
 */
MIGDBSetAutoSolib (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetAutoSolib.java)/**
 *
 *     -gdb-set
 *
 */
MIGDBSetBreakpointPending (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetBreakpointPending.java)/**
 *
 * -gdb-set breakpoint pending [on | off]
 *
 * This command should be used to make breakpoints/tracepoints that are created
 * using a CLI command to be set as potentially pending breakpoints in GDB.
 *
 * Available with GDB 6.1
 *
 * @since 4.0
 *
 */
MIGDBSetCharset (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetCharset.java)/**
 *
 * -gdb-set charset CHARSET
 *
 * Sets both the current host and target charset to CHARSET. The host charset is the
 * charset used by gdb. The target charset is the charset used by the char type of the
 * inferior program.
 *
 * @since 4.1
 */
MIGDBSetCircularTraceBuffer (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetCircularTraceBuffer.java)/**
 * -gdb-set circular-trace-buffer on | off
 *
 * Sets circular trace buffer on or off.
 * @since 4.4
 */
MIGDBSetDetachOnFork (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetDetachOnFork.java)/**
 *
 * -gdb-set detach-on-fork [on|off]
 *
 * When 'on', tells GDB to detach from process that has been forked.
 * When 'off', automatically starts debugging a forked process in a multi-process session.
 *
 * @since 4.0
 */
MIGDBSetDisconnectedTracing (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetDisconnectedTracing.java)/**
 * -gdb-set disconnected-tracing on | off
 *
 * Sets disconnected-tracing on or off.
 * @since 4.4
 */
MIGDBSetDPrintfStyle (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetDPrintfStyle.java)/**
 * -gdb-set dprintf-style STYLE
 *
 * Set the dprintf output to be handled in one of several different styles enumerated below.
 * A change of style affects all existing dynamic printfs immediately.
 *
 *   gdb
 *     Handle the output using the gdb printf command.
 *   call
 *     Handle the output by calling a function in your program (normally printf).
 *   agent
 *     Have the remote debugging agent (such as gdbserver) handle the output itself.
 *     This style is only available for agents that support running commands on the target.
 *
 * @since 4.4
 */
MIGDBSetEnv (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetEnv.java)/**
 *
 * -gdb-set env VARNAME [=VALUE]
 *
 * Set environment variable VARNAME to VALUE. The value changes for your program only,
 * not for gdb itself. VALUE may be any string; the values of environment variables are
 * just strings, and any interpretation is supplied by your program itself. The VALUE
 * parameter is optional; if it is omitted, the variable is set to a null value.
 *
 * @since 3.0
 *
 */
MIGDBSetHostCharset (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetHostCharset.java)/**
 *
 * -gdb-set host-charset CHARSET
 *
 * Sets the current host charset to CHARSET. The host charset is the charset used by gdb.
 *
 * @since 4.1
 */
MIGDBSetLanguage (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetLanguage.java)/**
 *
 *     -gdb-set language
 *
 * @since 4.3
 */
MIGDBSetNewConsole (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetNewConsole.java)/**
 * -gdb-set new-console on|off
 *
 * Set whether to start in a new console or not
 *
 * @since 5.4
 */
MIGDBSetNonStop (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetNonStop.java)/**
 *
 *     -gdb-set non-stop [on | off]
 * @since 1.1
 *
 */
MIGDBSetPagination (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetPagination.java)/**
 *
 * -gdb-set pagination [on | off]
 *
 * @since 3.0
 */
MIGDBSetPrintObject (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetPrintObject.java)/**
 *
 * -gdb-set print object [on | off]
 *
 * When on:
 *    for GDB <= 7.4, Runtime Type Information will be used in the gdb console.
 *    for GDB >= 7.5, Runtime Type Information will be used in the debug views.
 * When off, only static type of variable is taken into account.
 *
 * @since 4.1
 */
MIGDBSetPrintSevenbitStrings (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetPrintSevenbitStrings.java)/**
 *
 * -gdb-set print sevenbit-strings [on | off]
 *
 * When on, gdb displays any eight-bit characters (in strings or character values) using
 * the octal escape notation \nnn. When off, prints full eight-bit characters.
 *
 * @since 4.1
 */
MIGDBSetPythonPrintStack (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetPythonPrintStack.java)/**
 *
 * -gdb-set python print-stack [ none | message | full ]
 *
 * By default, gdb will print only the message component of a Python exception when an error occurs
 * in a Python script. This can be controlled using set python print-stack: if full, then full Python
 * stack printing is enabled; if none, then Python stack and message printing is disabled; if message,
 * the default, only the message component of the error is printed.
 *
 * Available with GDB 7.4
 *
 * @since 4.1
 *
 */
MIGDBSetRecordFullStopAtLimit (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetRecordFullStopAtLimit.java)/**
 * -gdb-set record full stop-at-limit [on | off]
 * @since 5.2
 *
 */
MIGDBSetRemoteTimeout (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetRemoteTimeout.java)/**
 * -gdb-set remotetimeout num
 * @since 5.5
 */
MIGDBSetSchedulerLocking (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetSchedulerLocking.java)/**
 *
 * -gdb-set scheduler-locking [on|step|off]
 *
 * Set the scheduler locking mode. If it is off, then there is no locking and any thread may run at any time.
 * If on, then only the current thread may run when the inferior is resumed. The step mode optimizes for
 * single-stepping; it prevents other threads from preempting the current thread while you are stepping, so
 * that the focus of debugging does not change unexpectedly. Other threads only rarely (or never) get a chance
 * to run when you step. They are more likely to run when you `next' over a function call, and they are
 * completely free to run when you use commands like `continue', `until', or `finish'. However, unless another
 * thread hits a breakpoint during its timeslice, gdb does not change the current thread away from the thread
 * that you are debugging.
 *
 * @since 4.1
 */
MIGDBSetSolibAbsolutePrefix (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetSolibAbsolutePrefix.java)/**
 *
 *     -gdb-set solib-absolute-prefix PATH
 * @since 4.0
 *
 */
MIGDBSetSolibSearchPath (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetSolibSearchPath.java)/**
 *
 *     -gdb-set solib-search-path COLON-SEPARATED-PATH
 *
 */
MIGDBSetStopOnSolibEvents (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetStopOnSolibEvents.java)/**
 *
 * -gdb-set stop-on-solib-events
 *
 * Controls whether GDB should give you control when the dynamic linker
 * notifies it about some shared library event. The most common event of interest is loading
 * or unloading of a new shared library.
 *
 * @since 1.1
 */
MIGDBSetSysroot (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetSysroot.java)/**
 *
 *     -gdb-set sysroot PATH
 * @since 1.1
 *
 */
MIGDBSetTargetAsync (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetTargetAsync.java)/**
 *
 * -gdb-set target-async [on | off]
 *
 * @since 3.0
 */
MIGDBSetTargetCharset (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetTargetCharset.java)/**
 *
 * -gdb-set target-charset CHARSET
 *
 * Sets the current target charset to CHARSET. The target charset is the charset used
 * by the char type of the inferior program.
 *
 * @since 4.1
 */
MIGDBSetTargetWideCharset (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetTargetWideCharset.java)/**
 *
 * -gdb-set target-wide-charset CHARSET
 *
 * Sets the current target wide charset to CHARSET. The target wide charset is the charset
 * used by the wchar_t type of the inferior program.
 *
 * Available with gdb 7.0
 *
 * @since 4.1
 */
MIGDBSetTraceNotes (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetTraceNotes.java)/**
 * -gdb-set trace-notes "note"
 *
 * Sets trace notes
 * @since 4.4
 */
MIGDBSetTraceUser (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBSetTraceUser.java)/**
 * -gdb-set trace-user "user"
 *
 * Sets trace user
 * @since 4.4
 */
MIGDBShow (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBShow.java)/**
 *
 *     -gdb-show
 *
 * @since 4.3
 *
 */
MIGDBShowExitCode (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBShowExitCode.java)/**
 *
 *-data-evaluate-expression $_exitcode
 * ^done,value="10"
 *
 *   Show the current value of a $_exitcode
 *
 *  With GDB 7.3, the exit code is provided by the MI =thread-group-exited event,
 *  which allows to handle multi-process situations.
 *
 */
MIGDBShowLanguage (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBShowLanguage.java)/**
 *
 *     -gdb-show language
 *
 * @since 4.3
 *
 */
MIGDBShowNewConsole (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBShowNewConsole.java)/**
 *
 * -gdb-show new-console
 *
 * @since 5.4
 *
 */
MIGDBVersion (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIGDBVersion.java)/**
 *
 *     -gdb-version
 *
 * @since 4.6
 *
 */
MIInferiorTTYSet (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIInferiorTTYSet.java)/**
 *   -inferior-tty-set TTY
 *
 * Set terminal for future runs of the specified program.
 */
MIInfoOs (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIInfoOs.java)/**
 * MIInfoOS
 *
 * -info-os [ type ]
 * If no argument is supplied, the command returns a table of
 * available operating-system-specific information types. If one of these
 * types is supplied as an argument type, then the command returns a
 * table of data of that type.
 *
 * The types of information available depend on the target operating system.
 * @since 4.2
 */
MIInterpreterExec (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIInterpreterExec.java)/**
 * MIInterpreterExec
 *
 * -interpreter-exec
 *
 * -interpreter-exec interpreter command
 *
 * Execute the specified command in the given interpreter.
 *
 * -interpreter-exec console "break main"
 * &"During symbol reading, couldn't parse type; debugger out of date?.\n"
 * &"During symbol reading, bad structure-type format.\n"
 * ~"Breakpoint 1 at 0x8074fc6: file ../../src/gdb/main.c, line 743.\n"
 * ^done
 *
 */
MIInterpreterExecConsole (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIInterpreterExecConsole.java)/**
 * MIInterpreterExecConsole
 */
MIInterpreterExecConsoleKill (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIInterpreterExecConsoleKill.java)/**
 * MIInterpreterExecConsoleKill
 * Send the CLI Kill command for a specific process.
 * @since 4.0
 */
MIListFeatures (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIListFeatures.java)/**
 * -list-features
 *
 * Returns a list of particular features of the MI protocol that this
 * version of gdb implements.  A feature can be a command, or a new field
 * in an output of some command, or even an important bugfix.  While a
 * frontend can sometimes detect presence of a feature at runtime, it is
 * easier to perform detection at debugger startup.
 *
 * The command returns a list of strings, with each string naming an
 * available feature.  Each returned string is just a name, it does not
 * have any internal structure.
 * @since 4.0
 */
MIListThreadGroups (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIListThreadGroups.java)/**
 *  -list-thread-groups [--available | GROUP] [ --recurse 1 ]
 *
 *  When used without GROUP parameter, this will list top-level
 *  thread groups that are being debugged.  When used with the GROUP
 *  parameter, the children of the specified group will be listed.
 *  The children can be either threads, or other groups. At present,
 *  GDB will not report both threads and groups as children at the
 *  same time, but it may change in future.
 *
 *  With the --available option, instead of reporting groups that are
 *  being debugged, GDB will report all thread groups available on the
 *  target, not only the presently debugged ones. Using the --available
 *  option together with explicit GROUP is not likely to work on all targets.
 *
 *  The output of the command is:
 *
 *  ^done,threads=[<thread>],groups=[<group>]
 *
 *  where each thread group is like this:
 *
 *  {id="xxx",type="process",pid="yyy",num_children="1",cores=[1,2]}
 *
 *  The id of a thread group should be considered an opaque string.
 *
 *  As of GDB 7.1, the --recurse option has been added.  If this option is
 *  present, then every reported thread group will also include its children,
 *  either as `group' or `threads' field.
 *
 *  In general, any combination of option and parameters is permitted, with
 *  the following caveats:
 *    - When a single thread group is passed, the output will typically be the
 *      `threads' result. Because threads may not contain anything, the
 *      `recurse' option will be ignored.
 *    - When the `--available' option is passed, limited information may be
 *      available. In particular, the list of threads of a process might be
 *      inaccessible. Further, specifying specific thread groups might not give
 *      any performance advantage over listing all thread groups. The frontend
 *      should assume that `-list-thread-groups --available' is always an
 *      expensive operation and cache the results.
 *
 *  As of GDB 7.1, the 'core' output field has been added.
 *   - cores This field is a list of integers, each identifying a core that one
 *     thread of the group is running on. This field may be absent if such
 *     information is not available.
 *
 * @since 1.1
 *
 */
MIRemoveInferior (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIRemoveInferior.java)/**
 *   -remove-inferior GROUPID
 *   ^done
 *
 *   Remove the specified inferior.
 *
 *   @since 4.0
 */
MISetSubstitutePath (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MISetSubstitutePath.java)/**
 * -gdb-set substitute-path from to
 *
 * @since 5.0
 */
MIStackInfoDepth (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIStackInfoDepth.java)/**
 *
 *     -stack-info-depth [maxDepth]
 *
 *
 */
MIStackListArguments (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIStackListArguments.java)/**
 *
 *    -stack-list-arguments SHOW-VALUES
 *        [ LOW-FRAME HIGH-FRAME ]
 *
 *  Display a list of the arguments for the frames between LOW-FRAME and
 * HIGH-FRAME (inclusive).  If LOW-FRAME and HIGH-FRAME are not provided,
 * list the arguments for the whole call stack.
 *
 *   The SHOW-VALUES argument must have a value of 0 or 1.  A value of 0
 * means that only the names of the arguments are listed, a value of 1
 * means that both names and values of the arguments are printed.
 *
 */
MIStackListFrames (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIStackListFrames.java)/**
 *
 *     -stack-list-frames [ LOW-FRAME HIGH-FRAME ]
 *
 *  List the frames currently on the stack.  For each frame it displays
 * the following info:
 *
 * `LEVEL'
 *    The frame number, 0 being the topmost frame, i.e. the innermost
 *    function.
 *
 * `ADDR'
 *    The `$pc' value for that frame.
 *
 * `FUNC'
 *    Function name.
 *
 * `FILE'
 *    File name of the source file where the function lives.
 *
 * `FULLNAME'
 *    Absolute file name of the source file where the function lives.
 *    @since gdb 6.4
 *
 * `LINE'
 *   Line number corresponding to the `$pc'.
 *
 *  If invoked without arguments, this command prints a backtrace for the
 * whole stack.  If given two integer arguments, it shows the frames whose
 * levels are between the two arguments (inclusive).  If the two arguments
 * are equal, it shows the single frame at the corresponding level.
 *
 */
MIStackListLocals (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIStackListLocals.java)/**
 *
 *     -stack-list-locals PRINT-VALUES
 *
 *  Display the local variable names for the current frame.  With an
 * argument of 0 prints only the names of the variables, with argument of 1
 * prints also their values.
 *
 */
MIStackSelectFrame (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIStackSelectFrame.java)/**
 *
 *     -stack-select-frame FRAMENUM
 *
 *  Change the current frame.  Select a different frame FRAMENUM on the
 * stack.
 *
 */
MITargetAttach (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITargetAttach.java)/**
 * -target-attach < PID | THREAD_GROUP_ID >
 *
 * This command attaches to the process specified by the PID
 * or THREAD_GROUP_ID. If attaching to a thread group, the id
 * previously returned by `-list-thread-groups --available' must be used.
 *
 * @since 1.1
 */
MITargetDetach (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITargetDetach.java)/**
 * -target-detach < PID | THREAD_GROUP_ID >
 *
 * This command detaches from the process specified by the PID
 * or THREAD_GROUP_ID
 * @since 1.1
 */
MITargetDisconnect (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITargetDisconnect.java)/**
 * This command disconnects from the remote target.
 * @since 4.1
 */
MITargetDownload (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITargetDownload.java)/**
 * This command downloads a file to a remote target.
 *
 * @since 3.0
 */
MITargetSelect (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITargetSelect.java)/**
 * This command connects to a remote target.
 */
MITargetSelectCore (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITargetSelectCore.java)/**
 * This command sets up a connection with a core file.
 * @since 2.0
 */
MITargetSelectTFile (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITargetSelectTFile.java)/**
 * This command sets up a connection with a trace data  file.
 *
 * Available with GDB 7.1
 *
 * @since 3.0
 */
MIThreadInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIThreadInfo.java)/**
 *
 * -thread-info [ thread-id ]
 *
 * Reports information about either a specific thread, if [thread-id] is present,
 * or about all threads. When printing information about all threads, also reports
 * the current thread.
 * @since 1.1
 *
 */
MIThreadListIds (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIThreadListIds.java)/**
 *
 *    -thread-list-ids
 *
 * Produces a list of the currently known GDB thread ids.  At the end
 * of the list it also prints the total number of such threads.
 *
 */
MITraceDefineVariable (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITraceDefineVariable.java)/**
 * -trace-define-variable
 *
 * Creates trace variable name if it does not exist. If value is specified,
 * sets the initial value of the specified trace variable to that value.
 * Note that the name should start with the `$' character.
 *
 * Available with GDB 7.1
 *
 * @since 3.0
 */
MITraceFind (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITraceFind.java)/**
 * -trace-find MODE [PARAMS...]
 *
 * Find a trace frame using criteria defined by MODE and PARAMS. The following
 * lists permissible modes and their parameters.
 *
 * none              - No parameters are required. Stops examining trace frames.
 * frame-number      - An integer is required as parameter. Selects tracepoint frame
 *                     with that index.
 * tracepoint-number - An integer is required as parameter. Finds next trace
 *                     frame that corresponds to tracepoint with the specified number.
 * pc                - An integer address is required as parameter. Finds next trace
 *                     frame that corresponds to any tracepoint at the specified address.
 * pc-inside-range   - Two integer addresses are required as parameters. Finds next
 *                     trace frame that corresponds to a tracepoint at an address inside
 *                     the specified range.
 * pc-outside-range  - Two integer addresses are required as parameters. Finds next
 *                     trace frame that corresponds to a tracepoint at an address outside
 *                     the specified range.
 * line              - Line specification is required as parameter.
 *                     Finds next trace frame that corresponds to a tracepoint at the
 *                     specified location.
 *
 * If the 'none' was passed as mode, the response does not have fields.  Otherwise, the
 * response may have the following fields:
 *
 * found      - This field has either 0 or 1 as the value, depending on whether a matching
 *              tracepoint was found.
 * traceframe - The index of the found traceframe. This field is present if the 'found'
 *              field has value of 1.
 * tracepoint - The index of the found tracepoint. This field is present if the 'found'
 *              field has value of 1.
 * frame      - The stack frame when the traceframe was collected
 *
 * @since 3.0
 */
MITraceFindFrameNumber (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITraceFindFrameNumber.java)/**
 * -trace-find frame-number FRAME
 *
 * @since 3.0
 */
MITraceFindNone (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITraceFindNone.java)/**
 * -trace-find none
 *
 * @since 3.0
 */
MITraceListVariables (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITraceListVariables.java)/**
 * -trace-list-variables
 *
 * Return a table of all defined trace variables. Each element of the table has the
 * following fields:
 *   'name'    The name of the trace variable. This field is always present.
 *   'initial' The initial value. This is a 64-bit signed integer. This field is always present.
 *   'current' The value the trace variable has at the moment. This is a 64-bit signed integer.
 *             This field may is absent if the current value is not defined, for example if
 *             the trace was never run, or is presently running.
 *
 * Available with GDB 7.1
 *
 * @since 3.0
 */
MITraceSave (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITraceSave.java)/**
 * -trace-save [-r] FILENAME
 *
 * Saves the collected trace data to FILENAME.  Without the '-r' option, the data is downloaded
 * from the target and saved in a local file.  With the '-r' option the target is asked to perform
 * the save.
 *
 * Available with GDB 7.1
 *
 * @since 3.0
 */
MITraceStart (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITraceStart.java)/**
 * -trace-start
 *
 * Starts a tracing experiment. The result of this command does not have any fields.
 *
 * Available with GDB 7.1
 *
 * @since 3.0
 */
MITraceStatus (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITraceStatus.java)/**
 * -trace-status
 *
 * Gets the status of tracing.
 *
 * Available with GDB 7.1
 *
 * @since 3.0
 */
MITraceStop (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MITraceStop.java)/**
 * -trace-stop
 *
 * Stops a tracing experiment. The result of this command has the same fields
 * as -trace-status, except that the 'supported' and 'running' fields are not output.
 *
 * Available with GDB 7.1
 *
 * @since 3.0
 */
MIVarAssign (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarAssign.java)/**
 *
 *    -var-assign NAME EXPRESSION
 *
 *  Assigns the value of EXPRESSION to the variable object specified by
 * NAME.  The object must be `editable'.
 *
 */
MIVarCreate (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarCreate.java)/**
 *
 *    -var-create {NAME | "-"}
 *       {FRAME-ADDR | "*"} EXPRESSION
 *
 * This operation creates a variable object, which allows the
 * monitoring of a variable, the result of an expression, a memory cell or
 * a CPU register.
 *
 *   The NAME parameter is the string by which the object can be
 * referenced.  It must be unique.  If `-' is specified, the varobj system
 * will generate a string "varNNNNNN" automatically.  It will be unique
 * provided that one does not specify NAME on that format.  The command
 * fails if a duplicate name is found.
 *
 *  The frame under which the expression should be evaluated can be
 * specified by FRAME-ADDR.  A `*' indicates that the current frame should
 * be used.
 *
 *   EXPRESSION is any expression valid on the current language set (must
 * not begin with a `*'), or one of the following:
 *
 *  * `*ADDR', where ADDR is the address of a memory cell
 *
 *   * `*ADDR-ADDR' -- a memory address range (TBD)
 *
 *   * `$REGNAME' -- a CPU register name
 *
 */
MIVarDelete (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarDelete.java)/**
 *
 *    -var-delete NAME
 *
 *  Deletes a previously created variable object and all of its children.
 *
 *  Returns an error if the object NAME is not found.
 *
 */
MIVarEvaluateExpression (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarEvaluateExpression.java)/**
 *
 *     -var-evaluate-expression NAME
 *
 *  Evaluates the expression that is represented by the specified
 * variable object and returns its value as a string in the current format
 * specified for the object:
 *
 *      value=VALUE
 *
 */
MIVarInfoNumChildren (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarInfoNumChildren.java)/**
 *
 * -var-info-num-children NAME
 *
 * Returns the number of children of a variable object NAME:
 *
 * numchild=N
 *
 * Note that this number is not completely reliable for a dynamic varobjs. It
 * will return the current number of children, but more children may be
 * available.
 */
MIVarInfoType (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarInfoType.java)/**
 *
 *     -var-info-type NAME
 *
 *   Returns the type of the specified variable NAME.  The type is
 * returned as a string in the same format as it is output by the GDB CLI:
 *
 *     type=TYPENAME
 *
 */
MIVarListChildren (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarListChildren.java)/**
 *
 *     -var-list-children NAME
 *
 *  Returns a list of the children of the specified variable object:
 *
 *     numchild=N,children={{name=NAME,
 *     numchild=N,type=TYPE},(repeats N times)}
 *
 */
MIVarSetFormat (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarSetFormat.java)/**
 *
 *    -var-set-format NAME FORMAT-SPEC
 *
 *  Sets the output format for the value of the object NAME to be
 * FORMAT-SPEC.
 *
 *  The syntax for the FORMAT-SPEC is as follows:
 *
 *     FORMAT-SPEC ==>
 *     {binary | decimal | hexadecimal | octal | natural}
 *
 */
MIVarSetUpdateRange (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarSetUpdateRange.java)/**
 * -var-set-update-range name from to
 *
 * Set the range of children to be returned by future invocations of
 * -var-update.
 *
 * <code>from</code> and <code>to</code> indicate the range of children to
 * report in subsequent -var-update call. If from or to is less than zero, the
 * range is reset and all children will be reported. Otherwise, children
 * starting at from (zero-based) and up to and excluding to will be reported.
 *
 * @since 4.0
 */
MIVarShowFormat (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarShowFormat.java)/**
 *
 *    -var-show-format NAME
 *
 *  Returns the format used to display the value of the object NAME.
 *
 *     FORMAT ==>
 *     FORMAT-SPEC
 *
 */
MIVarUpdate (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/MIVarUpdate.java)/**
 *
 *     -var-update [print-values] {NAME | "*"}
 *
 *  Update the value of the variable object NAME by evaluating its
 *  expression after fetching all the new values from memory or registers.
 *  A `*' causes all existing variable objects to be updated.
  * If print-values has a value for of 0 or --no-values, print only the names of the variables;
  * if print-values is 1 or --all-values, also print their values;
  * if it is 2 or --simple-values print the name and value for simple data types and just
  * the name for arrays, structures and unions.
 */
RawCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/RawCommand.java)/**
 */
IMIDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/IMIDMEvent.java)/**
 * Common interface for events that are directly caused by some MI event.
 *
 * @since 1.1
 */
MIBreakpointChangedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIBreakpointChangedEvent.java)/**
 *
 */
MIBreakpointHitEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIBreakpointHitEvent.java)/**
 * Conveys that gdb reported the target stopped because of a breakpoint. This
 * includes catchpoints, as gdb reports them as a breakpoint-hit. The
 * async-exec-output record looks like this:
 *
 * <code>
 *    ^stopped,reason="breakpoint-hit",bkptno="1",thread-id="0",frame={addr="0x08048468",func="main",args=[{name="argc",value="1"},{name="argv",value="0xbffff18c"}],file="hello.c",line="4"}
 * </code>
 */
MICatchpointHitEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MICatchpointHitEvent.java)/**
 * @since 3.0
 */
MIDetachedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIDetachedEvent.java)/**
 *
 *  ^running
 */
MIErrorEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIErrorEvent.java)/**
 * (gdb)
 * &"warning: Cannot insert breakpoint 2:\n"
 * &"Cannot access memory at address 0x8020a3\n"
 * 30^error,msg=3D"Cannot access memory at address 0x8020a3"=20
 */
MIEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIEvent.java)/**
 */
MIFunctionFinishedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIFunctionFinishedEvent.java)/**
 * *stopped,reason="function-finished",thread-id="0",frame={addr="0x0804855a",func="main",args=[{name="argc",value="1"},{name="argv",value="0xbffff18c"}],file="hello.c",line="17"},gdb-result-var="$1",return-value="10"
 */
MIInferiorExitEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIInferiorExitEvent.java)/**
 * *stopped,reason="exited-normally"
 * *stopped,reason="exited",exit-code="04"
 * ^done,reason="exited",exit-code="04"
 *
 */
MIInferiorSignalExitEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIInferiorSignalExitEvent.java)/**
 * signal 2
 * "signal 2\n"
 * ^done,reason="exited-signalled",signal-name="SIGINT",signal-meaning="Interrupt"
 *
 */
MILocationReachedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MILocationReachedEvent.java)/**
 * *stopped,reason="location-reached",thread-id="0",frame={addr="0x0804858e",func="main2",args=[],file="hello.c",line="27"}
 */
MIRunningEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIRunningEvent.java)/**
 *
 *  ^running
 */
MISharedLibEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MISharedLibEvent.java)/**
 *
 */
MISignalChangedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MISignalChangedEvent.java)/**
 *
 */
MISignalEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MISignalEvent.java)/**
 *  *stopped,reason="signal-received",signal-name="SIGINT",signal-meaning="Interrupt",thread-id="0",frame={addr="0x400e18e1",func="__libc_nanosleep",args=[],file="__libc_nanosleep",line="-1"}
 *
 */
MISteppingRangeEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MISteppingRangeEvent.java)/**
 *
 *  *stopped,reason="end-stepping-range",thread-id="0",frame={addr="0x08048538",func="main",args=[{name="argc",value="1"},{name="argv",value="0xbffff18c"}],file="hello.c",line="13"}
 */
MIStoppedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIStoppedEvent.java)/**
 *  *stopped
 *
 */
MIThreadCreatedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIThreadCreatedEvent.java)/**
 * This can only be detected by gdb/mi after GDB 6.8.
 *
 */
MIThreadExitEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIThreadExitEvent.java)/**
 * This can not be detected yet by gdb/mi.
 *
 */
MIThreadGroupAddedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIThreadGroupAddedEvent.java)/**
 * =thread-group-added,id="i1"
 *
 * This can only be detected by gdb/mi with GDB >= 7.2.
 * @since 5.1
 */
MIThreadGroupCreatedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIThreadGroupCreatedEvent.java)/**
 * This can only be detected by gdb/mi after GDB 6.8.
 * @since 1.1
 *
 */
MIThreadGroupExitedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIThreadGroupExitedEvent.java)/**
 * This can only be detected by gdb/mi starting with GDB 7.0.
 * @since 1.1
 */
MIWatchpointScopeEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIWatchpointScopeEvent.java)/**
 *  *stopped,reason="watchpoint-scope",wpnum="5",
 *
 */
MIWatchpointTriggerEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/events/MIWatchpointTriggerEvent.java)/**
 *  *stopped,reason="watchpoint-trigger",wpt={number="2",exp="i"},value={old="0",new="1"},thread-id="0",frame={addr="0x08048534",func="main",args=[{name="argc",value="1"},{name="argv",value="0xbffff18c"}],file="hello.c",line="10"}
 *
 */
IEventProcessor (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/IEventProcessor.java)/**
 * Common interface that represents all MI and CLI event/command processors.
 *
 * @since 4.1
 */
MIAsyncErrorProcessor (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/MIAsyncErrorProcessor.java)/**
 * In some cases GDB reports 'exec-*' commands failure after the '^running' event is fired.
 * For instance, if an invalid breakpoint is set no error is reported but the consequent
 * 'exec-continue' command fails.
 *
 * 36-exec-continue --thread 1
 * 36^running
 * *running,thread-id="all"
 * (gdb)
 * &"Warning:\n"
 * &"Cannot insert breakpoint 2.\n"
 * &"Cannot access memory at address 0x0\n"
 * &"\n"
 * 36^error,msg="Command aborted."
 * (gdb)
 *
 * This class handles these type of situations by firing MIErrorEvent when such an error appears.
 *
 * @since 5.3
 */
MIBackendCLIProcess (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/MIBackendCLIProcess.java)/**
 * CLI Process object implementation which uses the {@link IMIBackend} service
 * to monitor and control the underlying process.
 *
 * Note that starting with GDB 7.12, as long as a PTY is available,
 * this process is no longer used.  Instead, the real GDB process,
 * along with its console will be used directly.  A second PTY
 * will be used to communicate using MI.
 *
 * @since 1.1
 */
MIControlDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/MIControlDMContext.java)/**
 *
 */
MIInferiorProcess (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/MIInferiorProcess.java)/**
 * This Process implementation tracks one of the inferiors that is being debugged
 * by GDB.  The process object, although not displayed in the Debug view, is used to
 * channel the STDIO of the inferior process to the console view.
 *
 * @see org.eclipse.debug.core.model.IProcess
 */
MIInferiorProcess_7_3 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/MIInferiorProcess_7_3.java)/**
 * Specialization for GDB >= 7.3.
 *
 * @since 4.7
 */
MIRunControlEventProcessor (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/MIRunControlEventProcessor.java)/**
 * MI debugger output listener that listens for the parsed MI output, and
 * generates corresponding MI events.  The generated MI events are then
 * received by other services and clients.
 */
MIRunControlEventProcessor_7_0 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/MIRunControlEventProcessor_7_0.java)/**
 * MI debugger output listener that listens for the parsed MI output, and
 * generates corresponding MI events.  The generated MI events are then
 * received by other services and clients.
 * @since 1.1
 */
MIRunControlEventProcessor_7_12 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/MIRunControlEventProcessor_7_12.java)/**
 * Listens to events on the MI channel and takes proper action.
 * Specialization for GDB 7.12.
 *
 * @since 5.3
 */
CLIAddressableSizeInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLIAddressableSizeInfo.java)/**
 * This class takes care of parsing and providing the result of the CLI command
 * <br>"p/x (char)-1"
 *
 * <p>E.g. if the response to 'p/x (char)-1' is</p>
 * $n = 0xffff
 *
 * <p>Then we can easily resolve it to 2 octets (e.g. 2 hex characters per octet)</p>
 * @since 4.4
 */
CLICatchInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLICatchInfo.java)/**
 * Processes the result of a gdb 'catch' command. Even though the command has
 * been around since gdb 6.6, it's still not supported in gdb 7.0 MI.
 *
 * @since 3.0
 */
CLIInfoBreakInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLIInfoBreakInfo.java)/**
 * 'info break [BP_REFERENCE] will return information about
 * the specified breakpoint.  We use it to find out to which
 * inferiors a breakpoint is applicable.
 *
 * sample output:
 *
 * (gdb) info break
 * Num     Type           Disp Enb Address    What
 * 1       breakpoint     keep y   <MULTIPLE>
 * 1.1                         y     0x08048533 in main() at loopfirst.cc:8 inf 2
 * 1.2                         y     0x08048533 in main() at loopfirst.cc:8 inf 1
 * 2       breakpoint     keep y   <MULTIPLE>
 * 2.1                         y     0x08048553 in main() at loopfirst.cc:9 inf 2
 * 2.2                         y     0x08048553 in main() at loopfirst.cc:9 inf 1
 *
 * If only one inferior is being debugged there is not mention of the inferior:
 * (gdb) info break
 * Num     Type           Disp Enb Address    What
 * 1       breakpoint     keep y   0x08048533 in main() at loopfirst.cc:8
 * 2       breakpoint     keep y   0x08048553 in main() at loopfirst.cc:9
 *
 * Note that the below output is theoretically possible looking at GDB's code but
 * I haven't figured out a way to trigger it.  Still, we should be prepared for it:
 * (gdb) info break
 * Num     Type           Disp Enb Address    What
 * 1       breakpoint     keep y   <MULTIPLE>
 * 1.1                         y     0x08048533 in main() at loopfirst.cc:8 inf 3, 2
 * 1.2                         y     0x08048533 in main() at loopfirst.cc:8 inf 2, 1
 * 2       breakpoint     keep y   <MULTIPLE>
 * 2.1                         y     0x08048553 in main() at loopfirst.cc:9 inf 2, 1
 * 2.2                         y     0x08048553 in main() at loopfirst.cc:9 inf 3, 2, 1
 *
 * @since 4.2
 */
CLIInfoProgramInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLIInfoProgramInfo.java)/**
 * @since 3.0
 */
CLIInfoSharedLibraryInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLIInfoSharedLibraryInfo.java)/**
 *
 */
CLIInfoThreadsInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLIInfoThreadsInfo.java)/**
 * GDB/MI thread list parsing.
~"\n"
~"     2 Thread 2049 (LWP 29354)  "
~"* 1 Thread 1024 (LWP 29353)  "

 */
CLIShowEndianInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLIShowEndianInfo.java)/**
 * 'show endian' returns the endianness of the current target.
 *
 * sample output:
 *
 * (gdb) show endian
 * The target endianness is set automatically (currently little endian)
 *
 * @since 4.2
 */
CLIThreadInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLIThreadInfo.java)/**
 * [Current thread is 1 (Thread 0xb7cc56b0 (LWP 5488))]
 *
 * @since 3.0
 */
CLITraceDumpInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLITraceDumpInfo.java)/**
 * Parses the GDB "tdump" command printout, as returned by GDB, to make it a
 * bit more human-friendly.
 * <p>
 * See bottom of this file for a raw example of what is
 * returned by "tdump"
 * @since 4.0
 */
CLITraceInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/CLITraceInfo.java)/**
 * GDB/MI trace command output parsing.
 *
 * ~"Tracepoint 2 at 0x4035a9: file /scratch/marc/test/src/main.cxx, line 109"
 *
 * @since 3.0
 */
MIAddInferiorInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIAddInferiorInfo.java)/**
 *   -add-inferior
 *   ^done,inferior="i2"
 *
 *   @since 4.0
 */
MIArg (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIArg.java)/**
 * Represents a set name=value.
 */
MIAsyncRecord (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIAsyncRecord.java)/**
 * base Abstract class for the OOB stream MI responses.
 */
MIBreakInsertInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIBreakInsertInfo.java)/**
 * -break-insert main
 * ^done,bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x08048468",func="main",file="hello.c",line="4",times="0"}
 * -break-insert -a p
 * ^done,hw-awpt={number="2",exp="p"}
 * -break-watch -r p
 * ^done,hw-rwpt={number="4",exp="p"}
 * -break-watch p
 * ^done,wpt={number="6",exp="p"}
 */
MIBreakListInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIBreakListInfo.java)/**
 * A -break-list result-record is the form:
 * <pre>
 * ^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[..],body=[brkpt={},brkpt={}]}
 *-break-list
^done,BreakpointTable={nr_rows="6",nr_cols="6",hdr=[{width="3",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="State"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",times="0"},bkpt={number="2",type="breakpoint",disp="del",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",times="0"},bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",cond="1",times="0"},bkpt={number="4",type="hw breakpoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",times="0"},bkpt={number="5",type="breakpoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",thread="0",thread="0",times="0"},bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",thread="1",thread="1",times="0"}]}
 * </pre>
 */
MIBreakpoint (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIBreakpoint.java)/**
 * Contain info about the GDB/MI breakpoint.
 *
 * (gdb)
 * -break-insert main
 * ^done,bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",times="0"}
 * (gdb)
 * -break-insert -t main
 * ^done,bkpt={number="2",type="breakpoint",disp="del",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",times="0"}
 * (gdb)
 * -break-insert -c 1 main
 * ^done,bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",cond="1",times="0"}
 * (gdb)
 * -break-insert -h main
 * ^done,bkpt={number="4",type="hw breakpoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",times="0"}
 * (gdb)
 * -break-insert -p 0 main
 * ^done,bkpt={number="5",type="breakpoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",thread="0",thread="0",times="0"}
 * (gdb)
 * -break-watch -a p
 * ^done,hw-awpt={number="2",exp="p"}
 * (gdb)
 * -break-watch -r p
 * ^done,hw-rwpt={number="4",exp="p"}
 * (gdb)
 * -break-watch p
 * ^done,wpt={number="6",exp="p"}
 * (gdb)
 *
 * Tracepoints:
 * bkpt={number="5",type="tracepoint",disp="keep",enabled="y",addr="0x0804846b",func="main",file="hello.c",line="4",thread="0",thread="0",times="0"}
 * bkpt={number="1",type="tracepoint",disp="keep",enabled="y",addr="0x0041bca0",func="main",file="hello.c",line="4",times="0",pass="4",original-location="hello.c:4"},
 * bkpt={number="5",type="fast tracepoint",disp="keep",enabled="y",addr="0x0804852d",func="testTracepoints()",file="TracepointTestApp.cc",fullname="/local/src/TracepointTestApp.cc",line="84",times="0",original-location="TracepointTestApp.cc:84"}
 *
 * Pending breakpoint
 * -break-insert -f NotLoadedLibrary.c:26
 * &"No source file named NotLoadedLibrary.c.\n"
 * ^done,bkpt={number="9",type="breakpoint",disp="keep",enabled="y",addr="<PENDING>",pending="NotLoadedLibrary.c:26",times="0",original-location="NotLoadedLibrary.c:26"}
 *
 * Note that any breakpoint that fails to install will be marked as pending when the -f option is used.
 * <p>
 * <b>Note on using constructor directly:</b></a> As this class can be extended by third-parties it is
 * important to allow third parties the ability to have the correct version of MIBreakpoint
 * created. {@code MIBreakpoint}s should therefore be created via factory methods that can be overloaded.
 * For examples, see {@link MIBreakpoints#createMIBreakpoint(MITuple)} or
 * {@link MIBreakInsertInfo#createMIBreakpoint(MITuple)}
 */
MIConsoleStreamOutput (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIConsoleStreamOutput.java)/**
 * @see MIStreamRecord
 */
MIConst (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIConst.java)/**
 * GDB/MI const value represents a ios-c string.
 */
MIDataEvaluateExpressionInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIDataEvaluateExpressionInfo.java)/**
 * GDB/MI Data evaluate expression parsing response.
 */
MIDataListRegisterNamesInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIDataListRegisterNamesInfo.java)/**
 * GDB/MI data list regiter names response extraction.
 */
MIDataListRegisterValuesInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIDataListRegisterValuesInfo.java)/**
 * GDB/MI data list register values extraction.
 */
MIDataReadMemoryBytesInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIDataReadMemoryBytesInfo.java)/**
 * Example output is:
 *
 *     (gdb)
 *     -data-read-memory-bytes &a 10
 *     ^done,memory=[{begin="0xbffff154",offset="0x00000000",
 *                    end="0xbffff15e",
 *                    contents="01000000020000000300"}]
 * @since 4.0
 */
MIDataReadMemoryInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIDataReadMemoryInfo.java)/**
 *
 * -data-read-memory result
 *
 * (gdb)
 * nn-data-read-memory [command parameters]
 * nn^done,addr="ADDRESS",nr-bytes="NR_BYTES",total-bytes="TOTAL_BYTES",
 * next-row="NEXT_ROW",prev-row="PREV_ROW",next-page="NEXT_PAGE",
 * prev-page="PREV_PAGE",memory=[
 * {addr="addr1",data=["0x00","0x01", ...]},
 * {addr="addr2",data=["0x02","0x03", ...]},
 * {addr="addr3",data=["0x04","0x05", ...]},
 * ...]
 * (gdb)
 *
 * where:
 *
 * 'ADDRESS'
 *      Address (in hex) of the first byte fetched.
 *
 * 'NR_BYTES'
 * 		Number of bytes read.
 *
 * 'TOTAL_BYTES'
 * 		Number of bytes requested (nr-rows * nr-columns * word-size).
 *
 * 'NEXT_ROW'
 * 		Address (in hex) of the next row.
 *
 * 'PREV_ROW'
 * 		Address (in hex) of the previous row.
 *
 * 'NEXT_PAGE'
 * 		Address (in hex) of the next page.
 *
 * 'PREV_PAGE'
 * 		Address (in hex) of the previous page.
 *
 * 'MEMORY'
 * 		Memory bytes retrieved, nr-rows of nr-columns words.
 *
 */
MIDataWriteMemoryInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIDataWriteMemoryInfo.java)/**
 * -data-write-memory result
 *
 * (gdb)
 * nn-data-write-memory [command parameters]
 * nn^done
 *
 */
MIDisplayHint (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIDisplayHint.java)/**
 * Some utilities around the display hint provided by the python pretty printers
 * via MI.
 *
 * @since 4.0
 */
MIExecAsyncOutput (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIExecAsyncOutput.java)/**
 * Represents an asynchronous OOB record from gdb that notifies the client of
 * state changes on the target (stopped, started, etc).
 *
 * <p>
 * All such records are prefixed by *.
 *
 * @see MIAsyncRecord
 */
MIFrame (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIFrame.java)/**
 * GDB/MI Frame tuple parsing.
 */
MIGDBShowExitCodeInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIGDBShowExitCodeInfo.java)/**
 * GDB/MI show parsing.
 * (gdb)
 * -data-evaluate-expression $_exitcode
 * ^done,value="10"
 * (gdb)
 */
MIGDBShowLanguageInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIGDBShowLanguageInfo.java)/**
 * '-gdb-show language' returns the current source language.
 *
 * sample output:
 *
 * -gdb-show language
 * ^done,value="auto"
 *
 * GDB 6.2-6.8:
 * -gdb-show language
 * ^done,value="auto; currently c"
 *
 * the different returned values are:
 *
 * (gdb) help set language
 * Set the current source language.
 * The currently understood settings are:
 *
 * local or auto    Automatic setting based on source file
 * ada              Use the Ada language
 * c                Use the C language
 * c++              Use the C++ language
 * asm              Use the Asm language
 * minimal          Use the Minimal language
 * d                Use the D language
 * fortran          Use the Fortran language
 * objective-c      Use the Objective-c language
 * go               Use the Go language
 * java             Use the Java language
 * modula-2         Use the Modula-2 language
 * opencl           Use the Opencl language
 * pascal           Use the Pascal language
 *
 * @since 4.3
 */
MIGDBShowNewConsoleInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIGDBShowNewConsoleInfo.java)/**
 * @since 5.4
 */
MIGDBVersionInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIGDBVersionInfo.java)/**
 * '-gdb-version' Show version information for gdb.
 *
 * sample output:
 *
 * -gdb-version
 * ~"GNU gdb (Ubuntu 7.7-0ubuntu3.1) 7.7\n"
 * ~"Copyright (C) 2014 Free Software Foundation, Inc.\n"
 * ~"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\n"
 * ~"This GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details."
 * ~"\nFor bug reporting instructions, please see:\n"
 *  ~"<http://www.gnu.org/software/gdb/bugs/>.\n"
 * ~"Find the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\n"
 * ~"For help, type \"help\".\n"
 * ~"Type \"apropos word\" to search for commands related to \"word\".\n"
 * ^done
 *
 * @since 4.6
 */
MIInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIInfo.java)/**
 * Base class for teh parsing/info GDB/MI classes.
 */
MIInfoOsInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIInfoOsInfo.java)/**
 * Example output:
 *
 *   (gdb) -info-os
 *   ^done,OSDataTable={nr_rows="9",nr_cols="3",
 *   hdr=[{width="10",alignment="-1",col_name="col0",colhdr="Type"},
 *        {width="10",alignment="-1",col_name="col1",colhdr="Description"},
 *        {width="10",alignment="-1",col_name="col2",colhdr="Title"}],
 *   body=[item={col0="processes",col1="Listing of all processes",
 *               col2="Processes"},
 *         item={col0="procgroups",col1="Listing of all process groups",
 *               col2="Process groups"},
 *         item={col0="threads",col1="Listing of all threads",
 *               col2="Threads"},
 *         item={col0="files",col1="Listing of all file descriptors",
 *               col2="File descriptors"},
 *         item={col0="sockets",col1="Listing of all internet-domain sockets",
 *               col2="Sockets"},
 *         item={col0="shm",col1="Listing of all shared-memory regions",
 *               col2="Shared-memory regions"},
 *         item={col0="semaphores",col1="Listing of all semaphores",
 *               col2="Semaphores"},
 *         item={col0="msg",col1="Listing of all message queues",
 *               col2="Message queues"},
 *         item={col0="modules",col1="Listing of all loaded kernel modules",
 *               col2="Kernel modules"}]}
 *   (gdb) -info-os processes
 *   ^done,OSDataTable={nr_rows="190",nr_cols="4",
 *   hdr=[{width="10",alignment="-1",col_name="col0",colhdr="pid"},
 *        {width="10",alignment="-1",col_name="col1",colhdr="user"},
 *        {width="10",alignment="-1",col_name="col2",colhdr="command"},
 *        {width="10",alignment="-1",col_name="col3",colhdr="cores"}],
 *   body=[item={col0="1",col1="root",col2="/sbin/init",col3="0"},
 *         item={col0="2",col1="root",col2="[kthreadd]",col3="1"},
 *         item={col0="3",col1="root",col2="[ksoftirqd/0]",col3="0"},
 *         ...
 *         item={col0="26446",col1="stan",col2="bash",col3="0"},
 *         item={col0="28152",col1="stan",col2="bash",col3="1"}]}
 *   (gdb)
 *
 * @since 4.2
 */
MIList (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIList.java)/**
 * GDB/MI list semantic.
 */
MIListFeaturesInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIListFeaturesInfo.java)/**
 * Example output is:
 *
 *     (gdb) -list-features
 *     ^done,result=["feature1","feature2"]
 * @since 4.0
 */
IThreadGroupInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIListThreadGroupsInfo.java)/**
	 * @noextend This interface is not intended to be extended by clients.
	 * @noimplement This interface is not intended to be implemented by clients.
	 */
IThreadGroupInfo2 (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIListThreadGroupsInfo.java)/**
	 * @since 4.1
	 */
ThreadGroupInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIListThreadGroupsInfo.java)/** @since 4.4 */
MILogStreamOutput (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MILogStreamOutput.java)/**
 * @see MIStreamRecord
 */
MINotifyAsyncOutput (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MINotifyAsyncOutput.java)/**
 * Represents an asynchronous OOB record from gdb that provides supplementary,
 * important information that is likely of interest to the client, e.g.,
 * notification that a new breakpoint has been created.
 *
 * <p>
 * All such output is prefixed by `='.
 *
 * @see MIAsyncRecord
 */
MIOOBRecord (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIOOBRecord.java)/**
 * @see MIOOBRecord
 */
MIOutput (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIOutput.java)/**
 * GDB/MI response.
 */
FSB (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIParser.java)/**
	 * Fast String Buffer class. MIParser does a lot
	 * of deleting off the front of a string, that's clearly
	 * an order N operation for StringBuffer which makes
	 * the MIParser an order N^2 operation. There are "issues"
	 * with this for large arrays. Use of FSB rather than String
	 * Buffer makes MIParser N rather than N^2 because FSB can
	 * delete from the front in constant time.
	 */
MIParser (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIParser.java)/**
<pre>
`OUTPUT :'
     `( OUT-OF-BAND-RECORD )* [ RESULT-RECORD ] "(gdb)" NL'

`RESULT-RECORD :'
     ` [ TOKEN ] "^" RESULT-CLASS ( "," RESULT )* NL'

`OUT-OF-BAND-RECORD :'
     `ASYNC-RECORD | STREAM-RECORD'

`ASYNC-RECORD :'
     `EXEC-ASYNC-OUTPUT | STATUS-ASYNC-OUTPUT | NOTIFY-ASYNC-OUTPUT'

`EXEC-ASYNC-OUTPUT :'
     `[ TOKEN ] "*" ASYNC-OUTPUT'

`STATUS-ASYNC-OUTPUT :'
     `[ TOKEN ] "+" ASYNC-OUTPUT'

`NOTIFY-ASYNC-OUTPUT :'
     `[ TOKEN ] "=" ASYNC-OUTPUT'

`ASYNC-OUTPUT :'
     `ASYNC-CLASS ( "," RESULT )* NL'

`RESULT-CLASS :'
     `"done" | "running" | "connected" | "error" | "exit"'

`ASYNC-CLASS :'
     `"stopped" | OTHERS' (where OTHERS will be added depending on the
     needs--this is still in development).

`RESULT :'
     ` VARIABLE "=" VALUE'

`VARIABLE :'
     ` STRING '

`VALUE :'
     ` CONST | TUPLE | LIST '

`CONST :'
     `C-STRING'

`TUPLE :'
     ` "{}" | "{" RESULT ( "," RESULT )* "}" '

`LIST :'
     ` "[]" | "[" VALUE ( "," VALUE )* "]" | "[" RESULT ( "," RESULT )*
     "]" '

`STREAM-RECORD :'
     `CONSOLE-STREAM-OUTPUT | TARGET-STREAM-OUTPUT | LOG-STREAM-OUTPUT'

`CONSOLE-STREAM-OUTPUT :'
     `"~" C-STRING'

`TARGET-STREAM-OUTPUT :'
     `"@" C-STRING'

`LOG-STREAM-OUTPUT :'
     `"&" C-STRING'

`NL :'
     `CR | CR-LF'

`TOKEN :'
     _any sequence of digits_.

`C-STRING :'
     `""" SEVEN-BIT-ISO-C-STRING-CONTENT """'
</pre>
 */
MIRegisterValue (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIRegisterValue.java)/**
 * GDB/MI register response parsing.
 */
MIResult (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIResult.java)/**
 * GDB/MI result sematic (Variable=Value)
 */
MIResultRecord (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIResultRecord.java)/**
 * GDB/MI ResultRecord.
 *
 * Effectively, it's an result class (a string), plus token (also a string),
 * plus MI tuple with actual response.
 */
MIStackInfoDepthInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIStackInfoDepthInfo.java)/**
 * -stack-info-depth [max-depth]
 * ^done,depth="12"
 *
 */
MIStackListArgumentsInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIStackListArgumentsInfo.java)/**
 * GDB/MI stack list arguments parsing.
 */
MIStackListFramesInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIStackListFramesInfo.java)/**
 * GDB/MI stack list frames info.
 */
MIStackListLocalsInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIStackListLocalsInfo.java)/**
 * GDB/MI stack list locals parsing.
 * -stack-list-locals 1
 * ^done,locals=[{name="p",value="0x8048600 \"ghislaine\""},{name="buf",value="\"'\", 'x' <repeats 24 times>, \"i,xxxxxxxxx\", 'a' <repeats 24 times>"},{name="buf2",value="\"\\\"?'\\\\()~\""},{name="buf3",value="\"alain\""},{name="buf4",value="\"\\t\\t\\n\\f\\r\""},{name="i",value="0"}]
 *
 * On MacOS X 10.4 this returns a tuple:
 * ^done,locals={{name="p",value="0x8048600 \"ghislaine\""},{name="buf",value="\"'\", 'x' <repeats 24 times>, \"i,xxxxxxxxx\", 'a' <repeats 24 times>"},{name="buf2",value="\"\\\"?'\\\\()~\""},{name="buf3",value="\"alain\""},{name="buf4",value="\"\\t\\t\\n\\f\\r\""},{name="i",value="0"}}
 */
MIStatusAsyncOutput (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIStatusAsyncOutput.java)/**
 * Represents an asynchronous OOB record from gdb that provides status on an
 * ongoing time consuming operation.
 *
 * <p>
 * All such output is prefixed by `+'.
 *
 * @see MIAsyncRecord
 */
MIStreamRecord (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIStreamRecord.java)/**
 * GDB/MI stream record response.
 */
MIStringHandler (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIStringHandler.java)/**
 * The MIStringHandler class provides several static functions to handle C and / or MI strings.
 * @since 4.1
 */
MITargetDownloadInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MITargetDownloadInfo.java)/**
 * Parsing of GDB/MI "target-download"
 *
 * Example:
 * -target-download
 * +download,{section=".text",section-size="6668",total-size="9880"}
 * +download,{section=".text",section-sent="512",section-size="6668",
 * total-sent="512",total-size="9880"}
 * +download,{section=".text",section-sent="1024",section-size="6668",
 * total-sent="1024",total-size="9880"}
 * +download,{section=".text",section-sent="1536",section-size="6668",
 * total-sent="1536",total-size="9880"}
 * +download,{section=".text",section-sent="2048",section-size="6668",
 * total-sent="2048",total-size="9880"}
 * +download,{section=".text",section-sent="2560",section-size="6668",
 * total-sent="2560",total-size="9880"}
 * +download,{section=".text",section-sent="3072",section-size="6668",
 * total-sent="3072",total-size="9880"}
 * +download,{section=".text",section-sent="3584",section-size="6668",
 * total-sent="3584",total-size="9880"}
 * +download,{section=".text",section-sent="4096",section-size="6668",
 * total-sent="4096",total-size="9880"}
 * +download,{section=".text",section-sent="4608",section-size="6668",
 * total-sent="4608",total-size="9880"}
 * +download,{section=".text",section-sent="5120",section-size="6668",
 * total-sent="5120",total-size="9880"}
 * +download,{section=".text",section-sent="5632",section-size="6668",
 * total-sent="5632",total-size="9880"}
 * +download,{section=".text",section-sent="6144",section-size="6668",
 * total-sent="6144",total-size="9880"}
 * +download,{section=".text",section-sent="6656",section-size="6668",
 * total-sent="6656",total-size="9880"}
 * +download,{section=".init",section-size="28",total-size="9880"}
 * +download,{section=".fini",section-size="28",total-size="9880"}
 * +download,{section=".data",section-size="3156",total-size="9880"}
 * +download,{section=".data",section-sent="512",section-size="3156",
 * total-sent="7236",total-size="9880"}
 * +download,{section=".data",section-sent="1024",section-size="3156",
 * total-sent="7748",total-size="9880"}
 * +download,{section=".data",section-sent="1536",section-size="3156",
 * total-sent="8260",total-size="9880"}
 * +download,{section=".data",section-sent="2048",section-size="3156",
 * total-sent="8772",total-size="9880"}
 * +download,{section=".data",section-sent="2560",section-size="3156",
 * total-sent="9284",total-size="9880"}
 * +download,{section=".data",section-sent="3072",section-size="3156",
 * total-sent="9796",total-size="9880"}
 * ^done,address="0x10004",load-size="9880",transfer-rate="6586",
 * write-rate="429"
 *
 * @since 3.0
 */
MITargetStreamOutput (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MITargetStreamOutput.java)/**
 * @see MIStreamRecord
 */
MIThread (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIThread.java)/**
 * GDB/MI Thread tuple parsing.
 *
 * @since 1.1
 */
MIThreadInfoInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIThreadInfoInfo.java)/**
 * GDB/MI thread list parsing.
 *
 * Example 1:
 *
 * -thread-info
 * ^done,threads=[
 * 	{id="2",target-id="Thread 0xb7c8ab90 (LWP 7010)",
 *		frame={level="0",addr="0x08048bba",func="my_func",args=[{name="arg",value="0xbff056f5"}],
 * 			file="my_test.cc",fullname="/home/francois/GDB/my_test.cc",line="26"},
 * 		state="stopped"},
 * 	{id="1",target-id="Thread 0xb7c8b8d0 (LWP 7007)",
 * 		frame={level="0",addr="0x08048a77",func="timer",args=[{name="duration",value="0xbff056f5 \"10\""}],
 * 			file="my_test.cc",fullname="/home/francois/GDB/my_test.cc",line="39"},
 * 		state="stopped"}
 * 	],current-thread-id="2"
 *
 *
 * Example 2:
 *
 * -thread-info 2
 * ^done,threads=[
 * 	{id="2",target-id="Thread 0xb7c8ab90 (LWP 7010)",
 *		frame={level="0",addr="0x08048bba",func="my_func",args=[{name="arg",value="0xbff056f5"}],
 * 			file="my_test.cc",fullname="/home/francois/GDB/my_test.cc",line="26"},
 * 		state="stopped"}
 *  ]
 *
 *
 * Example 3 (non-stop):
 *
 * -thread-info
 * ^done,threads=[
 *  {id="2",target-id="Thread 0xb7d6d6b0 (LWP 14494)",state="running"},
 * 	{id="1",target-id="Thread 0xb7c8b8d0 (LWP 7007)",
 * 		frame={level="0",addr="0x08048a77",func="timer",args=[{name="duration",value="0xbff056f5 \"10\""}],
 * 			file="my_test.cc",fullname="/home/francois/GDB/my_test.cc",line="39"},
 * 		state="stopped"}
 * 	],current-thread-id="1"
 *
 *
 * Example 4 (non-stop):
 *
 * -thread-info 1
 * ^done,threads=[{id="1",target-id="Thread 0xb7d6d6b0 (LWP 14494)",state="running"}]
 *
 *
 * Example 5 (Dicos):
 *
 * -thread-info 1
 * ^done,threads=[
 *  {id="1",target-id="Thread 162.32942",details="JUnitProcess_PT (Ready) 175417582794 8572423",
 *        frame={level="0",addr="0x1559a318",func="mainExpressionTestApp",args=[],
 *            file="/local/home/lmckhou/TSP/TADE/example/JUnitProcess_OU/src/ExpressionTestApp.cc",
 *            fullname="/local/home/lmckhou/TSP/TADE/example/JUnitProcess_OU/src/ExpressionTestApp.cc",line="279"},
 *        state="stopped"}]
 *
 * With GDB 7.1, a new 'core' field is present to indicate which core the thread is on.
 * The parsing of this new field is handled by {@link MIThread}
 *
 * -thread-info
 * ^done,threads=[
 *  {id="1",target-id="process 1307",
 *   frame={level="0",addr="0x08048618",func="main",args=[],
 *          file="a.cc",fullname="/local/lmckhou/testing/a.cc",line="9"},
 *   state="stopped",
 *   core="2"}],
 *  current-thread-id="1"
 *
 * @since 1.1
 */
MIThreadListIdsInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIThreadListIdsInfo.java)/**
 * GDB/MI thread list parsing.
 */
MITraceFindInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MITraceFindInfo.java)/**
 * -trace-find result.
 * @since 3.0
 */
MITraceListVariablesInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MITraceListVariablesInfo.java)/**
 * -trace-list-variables
 *
 * ^done,trace-variables={nr_rows="1",nr_cols="3",
 *                        hdr=[{width="15",alignment="-1",col_name="name",colhdr="Name"},
 *                             {width="11",alignment="-1",col_name="initial",colhdr="Initial"},
 *                             {width="11",alignment="-1",col_name="current",colhdr="Current"}],
 *                        body=[variable={name="$trace_timestamp",initial="0"}
 *                              variable={name="$foo",initial="10",current="15"}]}
 *
 * @since 3.0
 */
MITraceRecord (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MITraceRecord.java)/**
 * -trace-find result.
 * @since 3.0
 */
MITraceStatusInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MITraceStatusInfo.java)/**
 * -trace-status result.
 *
 * ^done,supported="1",running="1",frames="0",buffer-size="5242880",buffer-free="5242880"
 * ^done,supported="1",running="0",stop-reason="request",frames="0",buffer-size="5242880",buffer-free="5242880"
 * ^done,supported="1",running="0",stop-reason="passcount",stopping-tracepoint="7",frames="3",buffer-size="5242880",buffer-free="5242862"
 *
 * Field presence:
 *   With GDB 7.2:
 *        "supported"
 *        "running"
 *        "stop-reason"
 *        "stopping-tracepoint"
 *        "error-description"
 *        "frames"
 *        "frames-created"
 *        "buffer-size"
 *        "buffer-free"
 *        "disconnected"
 *        "circular"
 *   Added in GDB 7.4:
 *        "user-name"
 *        "notes"
 *        "start-time"
 *        "stop-time"
 *   Added in GDB 7.6:
 *        "trace-file"
 *
 * @since 3.0
 */
MITraceStopInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MITraceStopInfo.java)/**
 * -trace-stop result.
 *
 * The result of this command has the same fields as -trace-status, except that the
 * 'supported' and 'running' fields are not output.
 * The output is therefore a subset of the output of the -trace-status command.
 * The way MI fields are optional allows us to simply re-use the MITraceStatusInfo class
 *
 * @since 3.0
 */
MITuple (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MITuple.java)/**
 * GDB/MI tuple value.
 */
MIValue (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIValue.java)/**
 * GDB/MI value.
 */
MIVar (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVar.java)/**
 * GDB/MI var-list-children
 * -var-list-children var2
 *  ^done,numchild="6",children={child={name="var2.0",exp="0",numchild="0",type="char"},child={name="var2.1",exp="1",numchild="0",type="char"},child={name="var2.2",exp="2",numchild="0",type="char"},child={name="var2.3",exp="3",numchild="0",type="char"},child={name="var2.4",exp="4",numchild="0",type="char"},child={name="var2.5",exp="5",numchild="0",type="char"}}
 *
 * -var-list-children var3
 *  ^done,numchild="3",displayhint="array",children=[child={name="var6.[0].[1]",exp="[1]",numchild="0",type="std::basic_string<char, std::char_traits<char>, std::allocator<char> >",thread-id="1"\
,displayhint="string",dynamic="1"},child={name="var6.[0].[2]",exp="[2]",numchild="0",type="std::basic_string<char, std::char_traits<char>, std::allocator<char> >",thread-id="1",displayhint="string",dy\
namic="1"},child={name="var6.[0].[3]",exp="[3]",numchild="0",type="std::basic_string<char, std::char_traits<char>, std::allocator<char> >",thread-id="1",displayhint="string",dynamic="1"}],has_more="0"\
 */
MIVarAssignInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarAssignInfo.java)/**
 * GDB/MI var-assign
 *
 * ^done,value="3"
 */
MIVarCreateInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarCreateInfo.java)/**
 * GDB/MI var-create.
 * -var-create "-" * a
 * ^done,name="var1",numchild="0",value="11",type="int"
 * -var-create "-" * buf
 * ^done,name="var1",numchild="6",value=[6]",type="char [6]"
 *
 * Note that the value is returned in the output, as of GDB6.7
 */
MIVarDeleteInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarDeleteInfo.java)/**
 * GDB/MI var-delete.
 */
MIVarEvaluateExpressionInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarEvaluateExpressionInfo.java)/**
 * GDB/MI var-evalute-expression
 */
MIVarInfoExpressionInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarInfoExpressionInfo.java)/**
 * GDB/MI var-info-expression.
 */
MIVarInfoNumChildrenInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarInfoNumChildrenInfo.java)/**
 * GDB/MI var-info-num-children.
 *
 * For dynamic variable objects, only the number children currently fetched
 * by gdb is returned.
 */
MIVarInfoPathExpressionInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarInfoPathExpressionInfo.java)/**
 * GDB/MI var-info-path-expression.
 *
 * (gdb) -var-info-path-expression C.Base.public.m_size
 * ^done,path_expr=((Base)c).m_size)
 */
MIVarInfoTypeInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarInfoTypeInfo.java)/**
 * GDB/MI var-info-type
 */
MIVarListChildrenInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarListChildrenInfo.java)/**
 * GDB/MI var-list-children
 * -var-list-children var2
 *  ^done,numchild="6",children={child={name="var2.0",exp="0",numchild="0",type="char"},child={name="var2.1",exp="1",numchild="0",type="char"},child={name="var2.2",exp="2",numchild="0",type="char"},child={name="var2.3",exp="3",numchild="0",type="char"},child={name="var2.4",exp="4",numchild="0",type="char"},child={name="var2.5",exp="5",numchild="0",type="char"}}
 *
 */
MIVarSetFormatInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarSetFormatInfo.java)/**
 * GDB/MI var-set-format
 */
MIVarShowAttributesInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarShowAttributesInfo.java)/**
 * GDB/MI var-show-attributes
 */
MIVarShowFormatInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarShowFormatInfo.java)/**
 * GDB/MI var-show-format
 */
MIVarUpdateInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/output/MIVarUpdateInfo.java)/**
 * GDB/MI var-update.
 * -var-update *
 * ^done,changelist={name="var3",value="3",in_scope="true",type_changed="false",name="var2",value="4",in_scope="true",type_changed="false"}
 */
CSourceLookup (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/CSourceLookup.java)/**
 * ISourceLookup service implementation based on the CDT CSourceLookupDirector.
 */
BackendStateChangedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIBackend.java)/**
	 * Event indicating that the back end process has started or terminated.
	 */
IMIBackend (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIBackend.java)/**
 * Service for controlling the back end process.
 * @since 1.1
 */
IMIBreakpointPathAdjuster (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIBreakpointPathAdjuster.java)/**
 * Adjustment of the debugger path is required for earlier versions of GDB to
 * provide a workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=232415.
 *
 * @since 4.2
 */
IMICommandControl (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMICommandControl.java)/**
 * This interface provides a method for accessing the command factory.
 * @since 3.0
 */
IMIContainerDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIContainerDMContext.java)/**
 * An container context object.  In the GDB/MI protocol, thread groups
 * are used as containers of threads, and are represented by a string
 * identifier.  These thread groups are the basis for this context.
 * @since 1.1
 */
IMIExecutionDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIExecutionDMContext.java)/**
 * An execution context object.  In the GDB/MI protocol, threads are represented
 * by an integer identifier, which is the basis for this context.  The parent of this
 * context should always be a container context.
 */
IMIExpressions (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIExpressions.java)/**
 * An extension of {@link IExpressions} which became necessary because the MI
 * implementation of {@link IExpressions} has problems if asked for all
 * sub-expressions. Problems may arise if uninitialized data objects are
 * inspected. In the worst case, pretty printers may run into endless loops
 * (e.g. linked list that become cycle), and gdb never returns. But also in the
 * normal case of uninitialized collections, you easily end up with millions of
 * useless elements, damaging the responsiveness of the workbench.
 *
 * In order to avoid those problems, this extension lets the client specify a
 * maximum number of children that it is interested in.
 *
 * If you have an instance implementing {@link IExpressions}, you should always
 * check whether it implements this extension, and if so, use the methods of the
 * extension.
 *
 * @since 4.0
 */
IMIProcessDMContext (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIProcessDMContext.java)/**
 * A process context object.  In the GDB/MI protocol, processes are represented
 * by an string identifier, which is the basis for this context.
 * @since 1.1
 */
IMIProcesses (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIProcesses.java)/**
 * This interface provides a method for creating execution contexts.
 * @since 1.1
 */
IRunMode (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIRunControl.java)/**
	 * Generic interface for different possible Run modes such as Non-Stop or All-Stop.
	 * Using this interface allows to extend the list of RunModes.
	 *
	 * @since 4.0
	 */
IMIRunControl (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/IMIRunControl.java)/**
 * This interface provides methods for RunControl that are not
 * part of the standard DSF IRunControl
 *
 * @since 2.0
 */
Messages (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/Messages.java)/**
 * Preference strings.
 * @since 3.0
 */
MIBreakpoints (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIBreakpoints.java)/**
 * Initial breakpoint service implementation.
 * Implements the IBreakpoints interface.
 */
IMIBreakpointsTrackingListener (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIBreakpointsManager.java)/**
	 * A listener is notified by {@link MIBreakpointsManager} when
	 * the breakpoints tracking starts or stops.
	 * @since 4.2
	 */
MIBreakpointsManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIBreakpointsManager.java)/**
 * Breakpoint service interface.  The breakpoint service tracks CDT breakpoint
 * objects, and based on those, it manages breakpoints in the debugger back end.
 *
 * It relies on MIBreakpoints for the actual back-end interface.
 */
BreakpointEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIBreakpointsSynchronizer.java)/**
	 * Class to store an event that needs to be performed by the synchronizer
	 *
	 * @see MIBreakpointsSynchronizer class documentation for design comments
	 */
MIBreakpointsSynchronizer (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIBreakpointsSynchronizer.java)/**
 * Provides synchronization between breakpoints set from outside of the Eclipse
 * breakpoint framework (GDB console, trace files, etc.) and the Breakpoints
 * view.
 * <p>
 * Bug 530377: Prior to fixing 530377, events that arrived from GDB faster than
 * DSF/Eclipse fully processed them could cause the state within the
 * synchronizer and manager to become corrupt. This would happen because it
 * takes multiple DSF stages to complete handling 1 event, so the handling of
 * the next event would become intermingled. That violated many assumptions in
 * the code that the code run in the respective RequestMonitor would be on the
 * same state. This is an unsuprising assumption based on the general idea of
 * DSF as not requiring the normal synchronization primitives as everything is
 * single-threaded. To resolve this problem, there is some code
 * {@link #queueEvent(BreakpointEvent)} that ensures each event is fully
 * processed before the next event starts processing.
 *
 * @since 4.2
 */
ExpressionInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
	 * This class represents the two expressions that characterize an Expression Context.
	 */
MIExpressionDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
	 * This class represents an expression.
	 * @noextend This class is not intended to be subclassed by clients.
	 * @since 4.3
	 */
IndexedPartitionDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
	 * @since 4.1
	 */
ExpressionDMAddress (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
	 * Contains the address of an expression as well as the size of its type.
	 */
InvalidDMAddress (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
	 * If an expressions doesn't have an address, or it cannot be determined,
	 * use this class.
	 * @since 4.0
	 */
ExpressionDMData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
	 * This class represents the static data referenced by an instance of ExpressionDMC,
	 * such as its type and number of children; it does not contain the value or format
	 * of the expression.
	 */
ExpressionChangedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
	 * Event generated every time an expression is changed by the ExpressionService.
	 *
	 * A client wishing to receive such events has to register as a service
	 * event listener and implement the corresponding eventDispatched method.
	 *
	 * E.g.:
	 *
	 *    getSession().addServiceEventListener(listenerObject, null);
	 *
	 *    @DsfServiceEventHandler
	 *    public void eventDispatched(ExpressionChangedEvent e) {
	 *       IExpressionDMContext context = e.getDMContext();
	 *       // do something...
	 *    }
	 */
ReturnValueAliasing (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
	 * Keeps track of aliases for return values of methods.
	 */
CastedExpressionDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
	 * A casted or array-displayed expression.
	 * @since 3.0
	 */
MIExpressions (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIExpressions.java)/**
 * This class implements a debugger expression evaluator as a DSF service. The
 * primary interface that clients of this class should use is IExpressions.
 *
 * This class used to be name ExpressionService in the 1.1 release.
 *
 * @since 2.0
 */
MIFormat (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIFormat.java)/**
 * Help class to specify formats.
 */
MIMemoryCache (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIMemory.java)/** @since 4.2 */
MIMemory (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIMemory.java)/**
 * Memory service implementation
 */
MIModules (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIModules.java)/**
 *
 */
MIExecutionDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIProcesses.java)/**
	 * Context representing a thread in GDB/MI
	 */
MIContainerDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIProcesses.java)/**
	 * Context representing a thread group of GDB/MI.
	 */
MIThreadDMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIProcesses.java)/**
	 * Context representing a thread.
	 */
ContainerStartedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIProcesses.java)/**
	 * Event indicating that an execution group (debugged process) has started.  This event
	 * implements the {@link IStartedMDEvent} from the IRunControl service.
	 */
ContainerExitedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIProcesses.java)/**
	 * Event indicating that an execution group is no longer being debugged.  This event
	 * implements the {@link IExitedMDEvent} from the IRunControl service.
	 */
MIProcesses (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIProcesses.java)/**
 * @since 1.1
 */
GroupsChangedDMEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRegisters.java)/**
	 * Indicates a change in the list of Register groups e.g. after addition and removal
	 * @since 4.6
	 */
RegisterData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRegisters.java)/**
	 * @since 4.6
	 */
RunControlEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
	 * Base class for events generated by the MI Run Control service.  Most events
	 * generated by the MI Run Control service are directly caused by some MI event.
	 * Other services may need access to the extended MI data carried in the event.
	 *
	 * @param <V> DMC that this event refers to
	 * @param <T> MIInfo object that is the direct cause of this event
	 * @see MIRunControl
	 */
SuspendedEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
	 * Indicates that the given thread has been suspended.
	 */
BreakpointHitEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
	 * Indicates that the given thread has been suspended on a breakpoint.
	 * @since 3.0
	 */
ContainerBreakpointHitEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
	 * Indicates that the given container has been suspended on a breakpoint.
	 * @since 3.0
	 */
TargetAvailableOperationInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
	 * Utility class to store the parameters of the executeWithTargetAvailable() operations.
	 * @since 4.0
	 */
IsTargetAvailableStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
	 * This part of the sequence verifies if the execution context of interest
	 * is suspended or not.
	 * @since 3.0
	 */
MakeTargetAvailableStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
	 * If the execution context of interest is not suspended, this step
	 * will interrupt it.
	 * @since 3.0
	 */
ExecuteQueuedOperationsStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
	 * This step of the sequence takes care of executing all the steps that
	 * were passed to ExecuteWithTargetAvailable().
	 * @since 4.0
	 */
RestoreTargetStateStep (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
	 * If the sequence had to interrupt the execution context of interest,
	 * this step will resume it again to reach the same state as when we started.
	 * @since 3.0
	 */
MIRunControl (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIRunControl.java)/**
 *
 * <p>
 * Implementation note:
 * This class implements event handlers for the events that are generated by
 * this service itself.  When the event is dispatched, these handlers will
 * be called first, before any of the clients.  These handlers update the
 * service's internal state information to make them consistent with the
 * events being issued.  Doing this in the handlers as opposed to when
 * the events are generated, guarantees that the state of the service will
 * always be consistent with the events.
 * The purpose of this pattern is to allow clients that listen to service
 * events and track service state, to be perfectly in sync with the service
 * state.
 * @since 3.0
 */
VariableData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIStack.java)/**
	 * Same as with frame objects, this is a base class for the IVariableDMData object that uses an MIArg object to
	 * provide the data.  Sub-classes must supply the MIArg object.
	 */
FramesCacheInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIStack.java)/**
	 * Class to track stack depth and debug frames for our internal cache
	 */
FramesCache (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIStack.java)/**
	   A Map of threadId -> FramesCacheInfo, that can be cleared based on a context.
	   We use this cache for a few reasons:
	   <br>
	   First, two commands such as
	   <pre>
	   -stack-info-depth 11
	   -stack-info-depth 2
	   </pre>
	   would both be sent to GDB because the command cache sees them as different.
	   This cache allows us to know that if we already asked for a stack depth
	   we can potentially re-use the answer.
	   <br>
	   The same concept is applicable for the -stack-list-frames command with different limits.
	   Also, the stack depth can be deduced from the frames list, so we don't need to ask gdb for it again.
	   <p>
	   The second reason is that gdb is unreliable when it comes to returning frames. The MI protocol only allows to reply
	   with data or with error. When gdb is unwinding sometimes it gets both, and while the console CLI protocol has no
	   problem with that, for MI, gdb replies randomly, sometimes with data, sometimes with error. If we cache the valid data
	   it will eliminate the issue with invalid data on subsequent invocations. We don't cache errors.
	 */
FrameData (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIStack.java)/**
	 * Base class for the IFrameDMData object that uses an MIFrame object to
	 * provide the data.  Sub-classes must provide the MIFrame object
	 */
ChildrenInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIVariableManager.java)/**
	 * Stores the information about children of a variable object.
	 *
	 * @since 4.0
	 */
ChildrenCountInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIVariableManager.java)/**
	 * Stores the information about the children count of a variable object.
	 *
	 * @since 4.0
	 */
MIVariableObject (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIVariableManager.java)/**
	 * Utility class to track the progress and information of MI variable objects
	 */
MIRootVariableObject (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIVariableManager.java)/**
	 * @since 3.0
	 */
VariableObjectId (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIVariableManager.java)/**
	 * This class represents an unique identifier for a variable object.
	 *
	 * The following must be considered to obtain a unique name:
	 *     - the expression itself
	 *     - the execution context
	 *     - relative depth of frame based on the frame context and the total depth of the stack
	 *
	 * Note that if no frameContext is specified (only Execution, or even only Container), which can
	 * characterize a global variable for example, we will only use the available information.
	 *
	 * @since 3.0
	 */
LRUVariableCache (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIVariableManager.java)/**
	 * This is the real work horse of managing our objects. Not only must every
	 * value be unique to get inserted, this also creates an LRU (least recently
	 * used). When we hit our size limitation, the LRUsed will be removed to
	 * make space. Removing means that a GDB request to delete the object is
	 * generated.  We must also take into consideration the fact that GDB will
	 * automatically delete children of a variable object, when deleting the parent
	 * variable object.  Our solution to that is to tweak the LRU to make sure that
	 * children are always older than their parents, to guarantee the children will
	 * always be delete before their parents.
	 *
	 */
MIVariableManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIVariableManager.java)/**
 * Manages a list of variable objects as created through GDB/MI commands.
 *
 * This class is passed expression-meta-commands which have their own cache.
 * Therefore, we don't use the standard MICommandCache in this class.
 * In fact, we can't even use it, because many variableObject MI commands,
 * should not be cached as they alter the state of the back-end.
 *
 * Design details:
 * ==============
 *
 * GDB variable object information
 * -------------------------------
 * o Variable objects are recursively hierarchical, where children can be created through
 *   the parent.
 * o A varObject created with -var-create is a ROOT
 * o A varObject created with -var-list-children, is not a root
 * o Only varObject with no children or varObjects that are pointers can change values
 *   and therefore
 *   those objects can be used with -var-assign
 * o After a program stops, a varObject must be 'updated' before used
 * o Only root varObject can be updated with -var-update, which will trigger all
 *   of the root's descendants to be updated.
 * o Once updated, a varObject need not be updated until the program resumes again;
 *   this is true even after -var-assign is used (because it does an implicit -var-update)
 * o -var-update will return the list of all modifiable descendants of the udpated root which
 *   have changed
 * o -var-update will indicate if a root is out-of-scope (which implies that all
 *   its descendants are out-of-scope)
 * o if a varObject is out-of-scope, another varObject may be valid for the same
 *   expression as the out-of-scope varObject
 * o deleting a varObject will delete all its descendants, therefore, it is only
 *   necessary to delete roots
 *
 *
 * Class details
 * -------------
 * - We have an MIVariableObject class which represents a variable object in GDB
 *
 * - MIVariableObject includes a buffered value for each allowed format.
 *
 * - We have an MIRootVariableObject class inheriting from MIVariableObject to describe
 *   root varObjects created with -var-create.  Objects created with -var-list-children
 *   are MIVariableObjects only.  The root class will keep track of if the root object
 *   needs to be updated, if the root object is out-of-scope, and of a list of all
 *   modifiable descendants of this root.  The list of modifiable descendants is
 *   accessed using the gdb-given name to allow quick updates from the -var-update
 *   result (see below.)
 *
 * - we do not use -var-list-children for arrays, but create them manually
 *
 * - when the program stops, we should mark all roots as needing to be updated.
 * To achieve this efficiently, we have a dedicated list of roots that are updated.
 * When the program stops, we go through this list, remove each element and mark it
 * as needing to be updated.
 *
 * - when a varObject is accessed, if its root must be updated, the var-update
 * command shall be used.  The result of that command will indicate all
 * modifiable descendants that have changed.  We also use --all-values with -var-update
 * to get the new value (in the current format) for each modified descendant.  Using the list of modifiable
 * descendants of the root, we can quickly update the changed ones to invalidate their buffered
 * values and store the new current format value.
 *
 * - all values of non-modifiable varObjects (except arrays) will be set to {...}
 * without going to the back-end
 *
 * - requesting the value of an array varObject will trigger the creation of a new
 * varObject for the array's address.  Note that we must still use a variable
 * object and not the command -data-evaluate-expression, because we still need to get
 * the array address in multiple formats.
 *
 * - we keep an LRU (Least Recently Used) structure of all variable objects.  This LRU
 * will be bounded to a maximum allowed number of variable objects.  Whenever we get an
 * object from the LRU cleanup will be done if the maximum size has been reached.
 * The LRU will not delete a parent varObject until all its children are deleted; this is
 * achieved by touching each of the parents of an object whenever that object is put or get
 *
 * - It may happen that when accessing a varObject we find its root to be
 * out-of-scope.  The expression for which we are trying to access a varObject
 * could still be valid, and therefore we should try to create a new varObject for
 * that expression.  This can happen for example if two methods use the same name
 * for a variable. In the case when we find that a varObject is out-of-scope (when
 * its root is out-of-scope) the following should be done:
 *  - replace the varObject in the LRU with a newly created one in GDB
 *  - if the old object was a root, delete it in GDB.
 *
 * - In GDB, -var-update will only report a change if -var-evaluate-expression has
 *   changed -- in the current format--.  This means that situations like
 *    double z = 1.2;
 *    z = 1.4;
 *   Will not report a change if the format is anything else than natural.
 *   This is because 1.2 and 1.4 are both printed as 1, 0x1, etc
 *   Since we cache the values of every format, we must know if the value has
 *   change in -any- format, not just the current one.
 *   To solve this, we always keep the display format of variable objects (and their
 *   children) to the natural format; we believe that if the value changes in any
 *   format, it guarantees that it will change in the natural format.
 *   The simplest way to do this is that whenever we change the format
 *   of a variable object, we immediately set it back to natural with a second
 *   var-set-format command.
 *   Note that versions of GDB after 6.7 will allows to issue -var-evaluate-expression
 *   with a specified format, therefore allowing us to never use -var-set-format, and
 *   consequently, to easily keep the display format of all variable objects to natural.
 *
 * Notes on Dynamic Variable Objects (varobj)
 * ------------------------------------------
 *   - with version 7.0, gdb support so-called pretty printers.
 *
 *   - pretty printers are registered for certain types
 *
 *   - if there is a pretty printer registered for the type of a variable,
 *     the pretty printer provides the value and the children of that variable
 *
 *   - a varobj whose value and/or children are provided by a pretty printer,
 *     are referred to as dynamic variable objects
 *
 *   - dynamic varobjs change the game: it's not wise to ask it about all its
 *     children, not even the number of children it has. The reason is that
 *     in order to find out about the number of children the pretty printer
 *     must fetch all the children from the inferiors memory. If the variable
 *     is not yet initialized, the set of children are random, and thus might
 *     be huge. Even worse, there are data structures where fetching all
 *     children may result in an endless loop. The Eclipse debugger then hangs.
 *
 *   - In order to avoid this, we will always fetch up to a certain maximum
 *     number of children. Furthermore, it is possible to find out whether there
 *     are more children available. In the UI, all the currently fetched
 *     children are available. In addition, if there are more children
 *     available, a special node will be appended to indicate that there is
 *     more the user could fetch.
 *
 *   - Dynamic varobjs can change their value, as leaf varobjs can do.
 *     Especially, children can be added or removed during an update.
 *
 *   - There is no expression for children of dynamic varobjs (at least not
 *     yet, http://sourceware.org/bugzilla/show_bug.cgi?id=10252 would fix that).
 *     The reason -var-info-path-expression returns garbage for children of
 *     dynamic varobjs.
 *
 *   - Because of this, the variable of an expression that is a child of
 *     a dynamic varobj cannot be created again using -var-create, once
 *     the LRU cache has deleted it. Instead, we track the parent and index
 *     within this parent for each non-root variable, and later use
 *       -var-list-children parent indexInParent (indexInParent + 1)
 *     in order to create the MI variable anew.
 *
 *   - The fetching of children for dynamic varobjs becomes a bit more complicated.
 *     For the traditional varobjs, once children where requested, all children
 *     were fetched. For dynamic varobjs, we can no longer fetch all children.
 *     Instead, the client will provide a maximum number of children that
 *     is to be fetched. Every time the child count or children are requested,
 *     we must check whether there are additional children to be fetched,
 *     because the limit might have extended.
 *     Fetching additional children can only be done by one request monitor at a time.
 *     The serialization of the request monitors is done in getChildren by
 *     ensuring that fetchChildren is called for one request monitor at a time.
 *     fetchChildren in turn checks whether enough children are fetched, and
 *     if not, fetches the additional children.
 */
EnableLoadMetersAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/actions/EnableLoadMetersAction.java)/**
 * Action that enables or disables load meters
 */
FilterCanvasAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/actions/FilterCanvasAction.java)/** Action that creates or clears a canvas filter */
PinToDebugSessionAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/actions/PinToDebugSessionAction.java)/** Pins the multicore visualizer to the current debug session */
RefreshAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/actions/RefreshAction.java)/** Action that refreshes the Visualizer canvas. */
SelectAllAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/actions/SelectAllAction.java)/** Select All action for Visualizer context menu. */
SetLoadMeterPeriodAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/actions/SetLoadMeterPeriodAction.java)/**
 * Action that sets the load meter refresh period
 */
ShowDebugToolbarAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/actions/ShowDebugToolbarAction.java)/** Actions that shows/hides the debug actions on the Multicore Visualizer toolbar */
IVisualizerModelObject (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/model/IVisualizerModelObject.java)/**
 * Common interface for visualizer model objects
 */
VisualizerCore (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/model/VisualizerCore.java)/** Represents single core of a CPU. */
VisualizerCPU (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/model/VisualizerCPU.java)/** Represents single CPU. */
VisualizerLoadInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/model/VisualizerLoadInfo.java)/**
 * Object that represents the load of a CPU or core
 */
VisualizerModel (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/model/VisualizerModel.java)/**
 * Class representing the state of the data to display in the MulticoreVisualizer.
 */
VisualizerThread (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/model/VisualizerThread.java)/** Represents single thread. */
MulticoreVisualizerUIPlugin (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/MulticoreVisualizerUIPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
IMulticoreVisualizerConstants (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/IMulticoreVisualizerConstants.java)/**
 * Constants to be used in the Multicore Visualizer.
 */
IPinnable (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/IPinnable.java)/** Interface for pinnable objects */
MulticoreVisualizer (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizer.java)/**
 * The Multicore Visualizer is a generic visualizer that displays
 * CPUs, cores, threads graphically.
 *
 * This visualizer uses the CDT Visualizer framework.
 */
MulticoreVisualizerCanvas (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerCanvas.java)/**
 * MulticoreVisualizer's display canvas.
 */
MulticoreVisualizerCanvasFilter (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerCanvasFilter.java)/**
 * White-list Filter for the graphical objects displayed in the multicore
 * visualizer canvas.
 */
MulticoreVisualizerCanvasFilterManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerCanvasFilterManager.java)/**
 * Manages the canvas filters for all current debug sessions.
 */
MulticoreVisualizerCore (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerCore.java)/**
 * MulticoreVisualizer CPU core object.
 */
MulticoreVisualizerCPU (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerCPU.java)/**
 * Graphic object for MulticoreVisualizer.
 */
MulticoreVisualizerEventListener (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerEventListener.java)/**
 * DSF event listener class for the Multicore Visualizer.
 * This class will handle different relevant DSF events
 * and update the Multicore Visualizer accordingly.
 */
MulticoreVisualizerGraphicObject (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerGraphicObject.java)/**
 * Graphic object for MulticoreVisualizer.
 */
MulticoreVisualizerLoadMeter (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerLoadMeter.java)/**
 * Load meter graphic object
 */
MulticoreVisualizerMarquee (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerMarquee.java)/**
 * MulticoreVisualizer "marquee" (selection box) object.
 */
MulticoreVisualizerSelectionFinder (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerSelectionFinder.java)/**
* Debug view tree walker that finds elements to select
* based on selection obtained from the multicore visualizer.
*/
MulticoreVisualizerStatusBar (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerStatusBar.java)/** Status bar graphic object */
MulticoreVisualizerThread (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizerThread.java)/**
 * MulticoreVisualizer Thread object.
 */
DebugViewTreeWalker (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/DebugViewTreeWalker.java)/**
 * Base class that walks Debug View tree elements.
 *
 * Intended to be subclassed by code that needs to walk the content
 * of the Debug View (e.g. to find elements or construct model deltas).
 *
 * In the simplest case, a derived class should only need to
 * implement processElement(), and one should then only need
 * to call walk() to walk the tree and get an appropriate delta.
 */
DebugViewUtils (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/DebugViewUtils.java)/** Assorted utilities for interacting with the Debug View (aka LaunchView). */
DSFDebugModel (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/DSFDebugModel.java)/** Debugger state information accessors.</br>
 *
 *  NOTE: The methods on this class perform asynchronous operations
 *  and the result is reported back via the received request monitor
 */
DSFSessionState (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/DSFSessionState.java)/**
 * DSF session state object.
 *
 * Encapsulates and manages DsfSession we're currently tracking.
 */
IDSFTargetDataProxy (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/IDSFTargetDataProxy.java)/**
 * Describes the methods to query data from a target system under debug
 */
MementoUtils (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/MementoUtils.java)/** encodes and decodes memento to and from different data types; list, map, String*/
AbstractPersistentParameter (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/PersistentSettingsManager.java)/** Base class for a persistent parameter */
PersistentParameter (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/PersistentSettingsManager.java)/** Class for a persistent parameter */
PersistentListParameter (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/PersistentSettingsManager.java)/** Class for a persistent {@literal List<T>} parameter */
PersistentMapParameter (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/PersistentSettingsManager.java)/** Class for a persistent {@literal Map<String,T>} parameter */
PersistentSettingsManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/utils/PersistentSettingsManager.java)/**
 * This class manages one or more PersistentParameter, PersistentListParameter,
 * PersistentMapParameter objects, using a common name-space and optionally an
 * instance id so that multiple instances can each have their own version of
 * the parameter persisted
 */
CommonDsfTest (/dsf-gdb/org.eclipse.cdt.dsf.gdb.tests/src/org/eclipse/cdt/dsf/gdb/service/CommonDsfTest.java)/**
 * Helper base class for running DSF related tests
 */
CommonTest (/dsf-gdb/org.eclipse.cdt.dsf.gdb.tests/src/org/eclipse/cdt/dsf/gdb/service/CommonDsfTest.java)/**
 * Misc test utilities.
 */
GDBRegisterTest_NoContainerTest (/dsf-gdb/org.eclipse.cdt.dsf.gdb.tests/src/org/eclipse/cdt/dsf/gdb/service/GDBRegisterTest.java)/**
	 * Variant of {@link GDBRegisterTest} where register groups are saved without a container id.
	 * This is the default behavior for register group persistence.
	 */
FilePartsTest (/dsf-gdb/org.eclipse.cdt.dsf.gdb.tests/src/org/eclipse/cdt/dsf/gdb/tests/FilePartsTest.java)/**
 * TODO: Move this test closer to the code it is testing.
 *
 * At the time I wrote this test, there was no obvious place to put it, a test
 * suite for org.eclipse.cdt.debug.core is needed.
 *
 */
TestMIBreakInsertCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.tests/src/org/eclipse/cdt/dsf/mi/service/command/commands/TestMIBreakInsertCommand.java)/**
 * Verifies that the break insert MI command have the correct path substitution.
 *
 * @author qtobsod
 *
 */
TestMICommandConstructCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.tests/src/org/eclipse/cdt/dsf/mi/service/command/commands/TestMICommandConstructCommand.java)/**
 * Test verifying that the construct command method handles separators and
 * escaping correctly
 *
 * @author qtobsod
 *
 */
TestMIGDBSetSysroot (/dsf-gdb/org.eclipse.cdt.dsf.gdb.tests/src/org/eclipse/cdt/dsf/mi/service/command/commands/TestMIGDBSetSysroot.java)/**
 * Verifies that the set sysroot MI command don't add double quotes if path contains space.
 *
 */
DsfLoadSymbolsCommandHandler (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/actions/DsfLoadSymbolsCommandHandler.java)/**
 * Handler used for both Load Symbols and Load All Symbols commands
 */
FetchMoreChildrenAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/actions/FetchMoreChildrenAction.java)/**
 * @since 3.0
 */
GdbSteppingModeTarget (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/actions/GdbSteppingModeTarget.java)/**
 * SteppingModeTarget that allows to disable the button when dealing
 * with a post-mortem debugging session.
 *
 * @since 2.0
 */
ReverseDebuggingPropertyTester (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/actions/ReverseDebuggingPropertyTester.java)/**
 * Property tester for reverse debugging information available through the given
 * object.  The object being tested is an {@link IDMVMContext}.
 * <p>
 * One property is supported:
 * <ul>
 * <li> "isReverseDebuggingEnabled" - Checks whether reverse debugging is currently
 * enabled given the receiver.</li>
 * </ul>
 * </p>
 */
DisassemblyToggleDynamicPrintfTarget (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/breakpoints/DisassemblyToggleDynamicPrintfTarget.java)/**
 * Toggle dynamic printf target implementation for the disassembly part.
 */
DisassemblyToggleTracepointsTarget (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/breakpoints/DisassemblyToggleTracepointsTarget.java)/**
 * Toggle tracepoint target implementation for the disassembly part.
 */
GDBDynamicPrintfPropertyPage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/breakpoints/GDBDynamicPrintfPropertyPage.java)/**
 * The preference page used to present the properties of a GDB dynamic printf as preferences.
 */
GDBTracepointPropertyPage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/breakpoints/GDBTracepointPropertyPage.java)/**
 * The preference page used to present the properties of a GDB tracepoint as preferences.
 */
ToggleDynamicPrintfTargetFactory (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/breakpoints/ToggleDynamicPrintfTargetFactory.java)/**
 * Toggle DynamicPrintf target factory for disassembly parts.
 * We use a separate factory because the tracepoint factory is controlled
 * through an action set, while the breakpoint factory is down in DSF (not DSF-GDB).
 *
 * @since 2.4
 */
ToggleTracepointsTargetFactory (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/breakpoints/ToggleTracepointsTargetFactory.java)/**
 * Toggle tracepoints target factory for disassembly parts.
 * We use a separate factory so that we can control it through an action set.
 *
 * @since 2.1
 */
AddLocalsExpressionCommandHandler (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/AddLocalsExpressionCommandHandler.java)/**
 * Handling of adding group of locals into expression view
 *
 * @since 2.4
 */
AddRegistersExpressionCommandHandler (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/AddRegistersExpressionCommandHandler.java)/**
 * Handling of adding group of registers into expression view
 *
 * @since 2.4
 */
GdbAbstractReverseStepCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbAbstractReverseStepCommand.java)/**
 * Base class handling the work of a Reverse Step command.
 *
 * @since 2.1
 */
PromptForPidJob (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbConnectCommand.java)/**
	 * This job will prompt the user to select a set of processes
	 * to attach too.
	 * We need a job because the ProcessPrompter will block and
	 * we don't want to block the executor.
	 */
PromptAndAttachToProcessJob (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbConnectCommand.java)/**
	 * This job will prompt the user for a path to the binary to use,
	 * and then will attach to the process.
	 * We need a job to free the executor while we prompt the user for
	 * a binary path. Bug 344892
	 */
GdbResumeWithoutSignalCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbResumeWithoutSignalCommand.java)/**
 * Command performing a resume without signal.
 *
 * @since 2.1
 */
GdbReverseResumeCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbReverseResumeCommand.java)/**
 * Command performing a reverse resume.
 *
 * @since 2.1
 */
GdbReverseStepIntoCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbReverseStepIntoCommand.java)/**
 * Command performing a reverse step into.
 * @since 2.1
 */
GdbReverseStepOverCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbReverseStepOverCommand.java)/**
 * Command performing a reverse step over
 * @since 2.1
 */
GdbReverseToggleCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbReverseToggleCommand.java)/**
 * Command that toggles the Reverse Debugging feature
 *
 * @since 2.1
 */
GdbSaveTraceDataCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbSaveTraceDataCommand.java)/**
 * Command to save the trace data to file
 *
 * @since 2.1
 */
GdbSelectNextTraceRecordCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbSelectNextTraceRecordCommand.java)/**
 * Command to select the next trace record
 *
 * @since 2.1
 */
GdbSelectPrevTraceRecordCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbSelectPrevTraceRecordCommand.java)/**
 * Command to select the previous trace record
 *
 * @since 2.1
 */
GdbStartTracingCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbStartTracingCommand.java)/**
 * Command to start the tracing experiment
 *
 * @since 2.1
 */
GdbStopTracingCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbStopTracingCommand.java)/**
 * Command to stop the tracing experiment
 *
 * @since 2.1
 */
GdbUncallCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbUncallCommand.java)/**
 * Command performing an uncall operation (part of Reverse Debugging).
 * @since 2.1
 */
RefreshableDebugCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/RefreshableDebugCommand.java)/**
 * The enablement of a {@link AbstractDebugCommand} is updated only when the current
 * debug context is changed. In some cases we need to force an update without changing
 * the context. This class provides such a functionality.
 * The proper way is to modify {@link AbstractDebugCommand}.
 */
SelectNextTraceRecordCommandHandler (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/SelectNextTraceRecordCommandHandler.java)/**
 * Command handler to select the next trace record
 *
 * @since 2.1
 */
SelectPrevTraceRecordCommandHandler (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/SelectPrevTraceRecordCommandHandler.java)/**
 * Command handler to select the previous trace record
 *
 * @since 2.1
 */
ConsoleSaveAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/actions/ConsoleSaveAction.java)/**
 * An action to save the gdb traces. Inspired by MiConsoleSaveAction
 *
 * @since 2.1
 */
GdbAutoTerminateAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/actions/GdbAutoTerminateAction.java)/**
 * Action to toggle the preference to terminate GDB when last process exits
 */
GdbConsoleClearAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/actions/GdbConsoleClearAction.java)/**
 * Action to clear the contents of the associated GDB terminal
 */
GdbConsoleCopyAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/actions/GdbConsoleCopyAction.java)/**
 * Action to copy the selected text from the associated terminal
 */
GdbConsolePasteAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/actions/GdbConsolePasteAction.java)/**
 * Action to paste from the clip-board to the associated terminal
 */
GdbConsoleScrollLockAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/actions/GdbConsoleScrollLockAction.java)/**
 * Action to lock the scrolling of the associated terminal
 */
GdbConsoleSelectAllAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/actions/GdbConsoleSelectAllAction.java)/**
 * Action to Select-All the available text from the associated terminal
 */
ConsoleMessages (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/ConsoleMessages.java)/**
 * @since 2.1
 */
ConsolePageParticipant (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/ConsolePageParticipant.java)/**
 * A console page participant for DSF-GDB.
 * It adds a save button to the gdb tracing console.
 * It also brings to the front the proper inferior console when an element of the
 * debug view is selected.
 *
 * @since 2.1
 */
GdbBasicCliConsole (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbBasicCliConsole.java)/**
 * A GDB CLI console.
 * This console simply provides an IOConsole to perform CLI commands
 * towards GDB.  It is used whenever {@link IGDBBackend#isFullGdbConsoleSupported()}
 * returns false.
 */
GdbBasicCliConsolePage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbBasicCliConsolePage.java)/**
 * Page used for a basic GDB console.  Each Debug session which uses the basic GDB console will
 * use its own instance of this page.  The basic console is used for older GDB versions.
 *
 * Contributions to this page's context menu can be done using id "GdbBasicCliConsole.#ContextMenu".
 * For example, using the extension point:<br>
 * <code>
 *       menuContribution locationURI="popup:GdbBasicCliConsole.#ContextMenu?after=additions"
 * </code>
 */
GdbConsoleCreator (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbCliConsoleManager.java)/**
	 * Class that determines what type of console should be created
	 * for this particular Gdblaunch.  It figures this out by asking the
	 * Backend service.  It then either creates a GdbFullCliConsole or
	 * a GdbBasicCliConsole.
	 */
GdbServiceStartedListener (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbCliConsoleManager.java)/**
	 * Class used to listen for started events for the services we need.
	 * This class must be public to receive the event.
	 */
GdbCliConsoleManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbCliConsoleManager.java)/**
 * A console manager for GDB sessions which adds and removes
 * gdb cli consoles.
 *
 * There is a single such console per debug session.
 * This console interacts directly with the GDB process using
 * the standard GDB CLI interface.
 * These consoles cannot be enabled/disabled by the user.
 * However, they are only supported by GDB >= 7.12;
 * to handle this limitation, the console manager will use the DSF Backend
 * service to establish if it should start a gdb cli console or not.
 */
GdbConsoleLifecycleListener (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbConsoleLifecycleListener.java)/**
 * Used to notify this debugger console of lifecycle methods <code>init()</code>
 * and <code>dispose()</code>.
 */
GdbFullCliConsole (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbFullCliConsole.java)/**
 * A GDB CLI console.
 * This console actually runs a GDB process in CLI mode to achieve a
 * full-featured CLI interface.  This is only supported with GDB >= 7.12
 * and if IGDBBackend.isFullGdbConsoleSupported() returns true.
 */
GdbFullCliConsolePage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbFullCliConsolePage.java)/**
 * Page used for a full GDB console.  Each Debug session which uses the full GDB console will
 * use its own instance of this page.  GDB 7.12 is required to use the full GDB console.
 *
 * Contributions to this page's context menu can be done using id "GdbFullCliConsole.#ContextMenu".
 * For example, using the extension point:<br>
 * <code>
 *       menuContribution locationURI="popup:GdbFullCliConsole.#ContextMenu?after=additions"
 * </code>
 */
HistorySnapShot (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbTerminalConnector.java)/**
		 * A simple container holding consistent information of the history lines and accumulated remainder
		 * at a particular point in time
		 */
ConsoleHistoryLinesBuffer (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbTerminalConnector.java)/**
	 * This class will hold a buffer of history lines, it uses a queue to easily pop out the oldest lines once
	 * the maximum is being exceeded.</br>
	 * It also keeps track of partial text at the end of the receiving input i.e. not yet forming a complete
	 * line, once it forms a complete line it gets integrated in the queue
	 *
	 * In addition the API used in this implementation are synchronized to allow consistent information among
	 * the Jobs using it
	 */
GdbTerminalConnector (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbTerminalConnector.java)/**
 * This class will read from the GDB process output and error streams and will write it to any registered
 * ITerminalControl. It must continue reading from the streams, even if there are no ITerminalControl to write
 * to. This is important to prevent GDB's output buffer from getting full and then completely stopping.
 *
 * In addition this class manages a history buffer which will be used to populate a new console with history
 * information already collected for the same session. Used for example when closing an re-opening a console.
 */
GdbTerminalPageConnector (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbTerminalPageConnector.java)/**
 * Class that connects the GDB process I/O with the terminal.
 */
IConsoleImagesConst (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/IConsoleImagesConst.java)/**
 * @since 2.1
 */
IGDBDebuggerConsole (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/IGDBDebuggerConsole.java)/**
 * GDB specifics to IDebuggerConsole e.g. default implementations
 */
IGdbTerminalControlConnector (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/IGdbTerminalControlConnector.java)/**
 * Interface to connect multiple page terminal controls with their single associated GDB process I/O.
 */
InputReadJob (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/TracingConsole.java)/**
	 * A reading Job which will prevent the input stream
	 * from filling up.  We don't actually do anything with
	 * the data we read, since the Trace console should not
	 * accept input.
	 *
	 * But instead of making the console read-only, we allow
	 * the user to type things to allow for comments to be
	 * inserted within the traces.
	 */
TracingConsole (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/TracingConsole.java)/**
 * A console that is used to print traces.  The console is attached to a launch.
 *
 * Any input to this console is read and discarded, since this console should be
 * read-only.  We don't actually make the console read-only because it is nice
 * for the user to be able to add delimiters such as empty lines within the traces.
 *
 * @since 2.1
 * This class was moved from package org.eclipse.cdt.dsf.gdb.internal.ui.tracing
 */
TracingConsoleManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/TracingConsoleManager.java)/**
 * A tracing console manager which adds and removes tracing consoles
 * based on launch events and preference events.
 * TracingConsoles are always running but are only shown in the console
 * view if enabled by the user preference.
 *
 * @since 2.1
 * This class was moved from package org.eclipse.cdt.dsf.gdb.internal.ui.tracing
 */
AddDynamicPrintfRulerAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/disassembly/AddDynamicPrintfRulerAction.java)/**
 * Ruler action to add dynamic printf with a dialog properties.
 */
AddDynamicPrintfRulerActionDelegate (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/disassembly/AddDynamicPrintfRulerActionDelegate.java)/**
 * Ruler action delegate for the "Add Dynamic Printf..." action.
 */
GdbAdapterFactory (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/GdbAdapterFactory.java)/**
 * This implementation of platform adapter factory only retrieves the adapters
 * for the launch object.  But it also manages the creation and destruction
 * of the session-based adapters which are returned by the
 * IDMContext.getAdapter() methods.
 *
 * When extending the GdbAdapterFactory, it is important to register all the
 * types declaratively (in the plugin.xml) that the factory can adapt the
 * extended launch to.
 *
 * See the plugin.xml that references GdbAdapterFactory for the current list,
 * and it should match {@link #getAdapterList()}.
 */
GdbDebugTextHover (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/GdbDebugTextHover.java)/**
 * Debug editor text hover for GDB.
 *
 * @since 2.1
 */
GdbPinColorTracker (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/GdbPinColorTracker.java)/**
 * This class tracks the color for the pinned context.
 */
GdbPinProvider (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/GdbPinProvider.java)/**
 * GDB pin provider implementation.
 */
GdbSessionAdapters (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/GdbSessionAdapters.java)/**
 * This class creates and holds the different adapters registered with the DSF session
 * as well as the adapters for the launch.
 */
GdbSuspendTrigger (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/GdbSuspendTrigger.java)/**
 * @since 2.1
 */
GdbUIPlugin (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/GdbUIPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
IGdbUIConstants (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/IGdbUIConstants.java)/**
 * @noimplement This interface is not intended to be implemented by clients.
 *
 * @since 4.1
 */
AttachCDebuggerTab (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/AttachCDebuggerTab.java)/**
 * Debugger tab to use for an attach launch configuration.
 *
 * @since 2.0
 */
CArgumentsTab (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/CArgumentsTab.java)/**
 * A launch configuration tab that displays and edits program arguments,
 * and working directory launch configuration attributes.
 * <p>
 * This class may be instantiated. This class is not intended to be subclassed.
 * </p>
 */
CMainAttachTab (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/CMainAttachTab.java)/**
 * Main tab to use for an attach launch configuration.
 *
 * @since 2.0
 */
CMainCoreTab (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/CMainCoreTab.java)/**
 * Main tab to use for an attach launch configuration.
 *
 * @since 2.0
 */
CMainTab (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/CMainTab.java)/**
 * A launch configuration tab that displays and edits project and main type name launch
 * configuration attributes.
 *
 * @deprecated Replaced with org.eclipse.cdt.launch.ui.CMainTab2
 */
CoreFileDebuggerTab (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/CoreFileDebuggerTab.java)/**
 * @since 2.0
 */
CoreFilePrompter (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/CoreFilePrompter.java)/**
 *  @since 2.0
 */
GdbCoreDebuggerPage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/GdbCoreDebuggerPage.java)/**
 * The dynamic tab for gdb-based debugger implementations that do post mortem debugging.
 * It is the same as the GdbDebuggerPage class without non-stop or reverse check boxes.
 *
 * @since 2.0
 */
GdbDebuggerPage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/GdbDebuggerPage.java)/**
 * The dynamic tab for gdb-based debugger implementations.
 */
GdbServerDebuggerPage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/GdbServerDebuggerPage.java)/**
 * The dynamic debugger tab for remote launches using gdb server.
 */
GDBSolibBlock (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/GDBSolibBlock.java)/**
 * The content of the <code>Shared Libraries</code> tab of the <code>GDBDebuggerPage</code>.
 */
IMILaunchConfigurationComponent (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/IMILaunchConfigurationComponent.java)/**
 * The common interface for UI components of the launch configuration tabs.
 */
LocalApplicationCDebuggerTab (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/LocalApplicationCDebuggerTab.java)/**
 * Debugger tab to use for a local application launch configuration.
 *
 * @since 2.0
 */
NewExecutableInfo (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/NewExecutableInfo.java)/**
 * This class provides information required to start
 * debugging an executable.
 */
ProcessPrompterDialog (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/ProcessPrompterDialog.java)/**
 * Process prompter that allows the user to select one or more entries
 * in the top pane.  Those entries are displayed in the bottom pane.
 * No selection is allowed in the bottom pane.  The result returned
 * is the list of all selections of the top pane (shown in the bottom
 * pane).
 */
RemoteApplicationCDebuggerTab (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/RemoteApplicationCDebuggerTab.java)/**
 * Debugger tab to use for a remote application launch configuration.
 *
 * @since 2.0
 */
SolibSearchPathBlock (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/SolibSearchPathBlock.java)/**
 * The UI component to access the shared libraries search path.
 */
AttachProcessHandler (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/osview/AttachProcessHandler.java)/**
 *
 */
ContentLabelProviderWrapper (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/osview/ContentLabelProviderWrapper.java)/** Helper class to change table and label provider of a TreeViewer in an atomic fashion.
 *
 *  Suppose we want to change both content and label provider of existing TreeViewer. Right now,
 *  if we set either, TreeViewer will try a refresh, using one new provider and one old. This
 *  is obviously nonsensical -- for example if we set set new content provider, then old label provider
 *  will be asked to provide labels for elements it has no idea what to do with, or for columns beyond
 *  its range, etc.
 *
 *  This class is wrapping our real content provider, and can be retargeted in one call -- after which
 *  refresh of TreeViewer sees consistent data.
 *
 * @since 2.4
 * */
Messages (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/osview/Messages.java)/**
 * @since 2.4
 */
CopyAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/osview/OSResourcesView.java)/**
	 * Retargetted copy to clipboard action
	 */
OSResourcesView (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/osview/OSResourcesView.java)/**
 * @since 2.4
 */
ResourceClassContributionItem (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/osview/ResourceClassContributionItem.java)/**
 * @since 2.4
 */
SessionOSData (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/osview/SessionOSData.java)/** Responsible for fetching and storing OS awareness data for a
 * specific DSF session.
 *
 * @since 2.4
 */
GdbConsolePreferencePage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/preferences/GdbConsolePreferencePage.java)/**
 * GDB CLI Console Preference Page.
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @noreference This class is not intended to be referenced by clients.
 */
ListenableBooleanFieldEditor (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/preferences/GdbDebugPreferencePage.java)/**
	 * A vehicle in order to be able to register a selection listener with
	 * a {@link BooleanFieldEditor}.
	 */
GdbDebugPreferencePage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/preferences/GdbDebugPreferencePage.java)/**
 * A preference page for settings that are currently only supported in GDB.
 */
MessagesForPreferences (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/preferences/MessagesForPreferences.java)/**
 * Preference strings.
 */
GdbDebugContextSyncManager (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/sync/GdbDebugContextSyncManager.java)/**
 * This instance propagates the selection of debug context elements e.g. Thread to the back end GDB
 */
IllegalCollectStringLimitException (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/CollectActionPage.java)/**
	 * An exception to indicate that the user-specified string limit is invalid
	 */
CollectActionPage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/CollectActionPage.java)/**
 * @since 2.1
 */
EvaluateActionPage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/EvaluateActionPage.java)/**
 * @since 2.1
 */
MessagesForTracepointActions (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/MessagesForTracepointActions.java)/**
 * Preference strings.
 * @since 2.1
 */
TracepointActionDialog (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/TracepointActionDialog.java)/**
 * @since 2.1
 */
TracepointActionsList (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/TracepointActionsList.java)/**
 * @since 2.1
 */
TracepointActionsPreferencePage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/TracepointActionsPreferencePage.java)/**
 * @since 2.1
 */
TracepointActionsPropertyPage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/TracepointActionsPropertyPage.java)/**
 * Property page for Tracepoint actions
 *
 * @since 2.1
 */
TracepointGlobalActionsList (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/TracepointGlobalActionsList.java)/**
 * @since 2.1
 */
WhileSteppingActionPage (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepointactions/WhileSteppingActionPage.java)/**
 * @since 2.1
 */
AbstractImageRegistry (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepoints/AbstractImageRegistry.java)/**
 * Abstract image registry that allows for defining fallback paths for images.
 * This is copy of <code>org.eclipse.cdt.dsf.debug.internal.ui.disassembly.AbstractImageRegistry</code>
 *
 * @since 2.1
 */
TraceControlModel (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepoints/TraceControlModel.java)/**
 * This class is a bridge between the TraceControl view and the TraceControl service.
 * It performs the necessary requests to the service on behalf of the view.
 * Those request must be done on the DSF Executor thread.
 * Note that this class will have a single instance which will deal with
 * all DSF debug sessions at the same time.
 */
RefreshViewAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepoints/TraceControlView.java)/**
	 * Action to refresh the content of the view.
	 */
AutoRefreshAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepoints/TraceControlView.java)/**
	 * Action to automatically refresh the content of the view by polling trace-status.
	 */
DisconnectedTracingAction (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepoints/TraceControlView.java)/**
	 * Action to refresh the content of the view.
	 */
TraceControlView (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepoints/TraceControlView.java)/**
 * TraceControlView Part
 *
 * This view is used to control Tracing.
 *
 * @since 2.1
 */
TracepointImageRegistry (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepoints/TracepointImageRegistry.java)/**
 *  @since 2.1
 */
TracepointsMessages (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/tracepoints/TracepointsMessages.java)/**
 *  @since 2.1
 */
GdbBreakpointVMNode (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/breakpoints/GdbBreakpointVMNode.java)/**
 * BreakpointVMNode for GDB which supports aggressive breakpoint filtering.
 * @since 2.4
 */
GdbBreakpointVMProvider (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/breakpoints/GdbBreakpointVMProvider.java)/**
 * @since 3.0
 */
RetargetDebugContextCommand (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/commands/RetargetDebugContextCommand.java)/**
 * Base class for actions which delegate functionality to an adapter retrieved
 * from the current debug context.
 *
 * @since 2.0
 */
FetchMoreChildrenEvent (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/FetchMoreChildrenEvent.java)/**
 * Event to fetch additional children for and expression context.
 *
 * @since 3.0
 */
GdbExpressionVMProvider (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/GdbExpressionVMProvider.java)/**
 * A specialization of ExpressionVMProvider that uses a GDB-specific variable VM
 * node. To understand why this is necessary, see GdbVariableVMNode.
 */
GdbVariableExpressionVMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/GdbVariableVMNode.java)/**
	 * Specialization of VariableVMNode.VariableExpressionVMC that participates
	 * in the "Add Watchpoint" object contribution action.
	 */
GdbVariableExpressionFactory (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/GdbVariableVMNode.java)/**
	 * A factory to control the "Watch" action for GDB variables.
	 */
IncompleteChildrenVMC (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/GdbVariableVMNode.java)/**
	 * The special context representing more children to be available.
	 *
	 * @since 3.0
	 */
GdbVariableVMNode (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/GdbVariableVMNode.java)/**
 * Specialization of DSF's VariableVMNode. See
 * {@link GdbVariableVMNode#createVMContext(IDMContext)} for why this is needed.
 */
GdbVariableVMProvider (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/GdbVariableVMProvider.java)/**
 * A specialization of VariableVMProvider that uses a GDB-specific variable VM
 * node. To understand why this is necessary, see GdbVariableVMNode.
 */
GdbExecutionContextLabelText (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/launch/GdbExecutionContextLabelText.java)/**
 * @since 2.0
 */
GdbStandardProcessVMNode (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/launch/GdbStandardProcessVMNode.java)/**
 * Layout node for the standard platform debug model IProcess object. This
 * node requires that an ILaunch object be found as an ancestor of this node.
 * It does not implement the label provider functionality, so the default
 * adapters should be used to retrieve the label.
 *
 * This version is specific to DSF-GDB to no longer show the inferiors.
 */
IGdbLaunchVMConstants (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/launch/IGdbLaunchVMConstants.java)/**
 * @since 2.0
 */
LaunchVMModelProxyStrategy (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/launch/LaunchVMModelProxyStrategy.java)/**
 *
 */
LaunchVMProvider (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/launch/LaunchVMProvider.java)/**
 *
 */
MessagesForGdbLaunchVM (/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/viewmodel/launch/MessagesForGdbLaunchVM.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
DsfExtendedTerminateCommand (/dsf-gdb/org.eclipse.cdt.examples.dsf.gdb/src/org/eclipse/cdt/examples/dsf/gdb/actions/DsfExtendedTerminateCommand.java)/**
 * This class extends the existing "Terminate" command by adding a popup
 * confirmation before terminating the session.
 */
GDBExamplePlugin (/dsf-gdb/org.eclipse.cdt.examples.dsf.gdb/src/org/eclipse/cdt/examples/dsf/gdb/GDBExamplePlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
CLIGDBVersion (/dsf-gdb/org.eclipse.cdt.examples.dsf.gdb/src/org/eclipse/cdt/examples/dsf/gdb/service/command/commands/CLIGDBVersion.java)/**
 * We use -interpreter-exec console "show version" instead
 * of -gdb-version to avoid having the output automatically printed
 * to our console.
 *
 */
GDBExtendedControl (/dsf-gdb/org.eclipse.cdt.examples.dsf.gdb/src/org/eclipse/cdt/examples/dsf/gdb/service/GDBExtendedControl.java)/**
 * Class that extends GDBControl.
 *
 * Note that by extending the GDBControl_HEAD class, we will always extend
 * the latest version of the GDBControl service.  The downside of this is
 * that we will automatically bring in the latest version of the service
 * even for the older GDB version that originally used GDBExtendedControl.
 * This is because of how GDBExtendedControl is instantiated in
 * GdbExtendedDebugServicesFactory.
 *
 * As we want to focus on the latest version of GDB, this is still the simplest
 * solution to use.
 *
 */
GdbExtendedConsoleMessages (/dsf-gdb/org.eclipse.cdt.examples.dsf.gdb/src/org/eclipse/cdt/examples/dsf/gdb/ui/console/GdbExtendedConsoleMessages.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
GdbExtendedConsolePageParticipant (/dsf-gdb/org.eclipse.cdt.examples.dsf.gdb/src/org/eclipse/cdt/examples/dsf/gdb/ui/console/GdbExtendedConsolePageParticipant.java)/**
 * An example console page participant for both standard console pages of the Debugger
 * Console view.
 * It adds a button to the GdbBasicCliConsolePage and different one to the GdbFullCliConsolePage.
 */
GdbExtendedInfoThreadsAction (/dsf-gdb/org.eclipse.cdt.examples.dsf.gdb/src/org/eclipse/cdt/examples/dsf/gdb/ui/console/GdbExtendedInfoThreadsAction.java)/**
 * Action to requests threads info from the full GDB console
 */
GdbExtendedSpecialBackgroundToggle (/dsf-gdb/org.eclipse.cdt.examples.dsf.gdb/src/org/eclipse/cdt/examples/dsf/gdb/ui/console/GdbExtendedSpecialBackgroundToggle.java)/**
 * Action to toggle a special background color for the basic GDB console
 */
GdbExtendedVMMessages (/dsf-gdb/org.eclipse.cdt.examples.dsf.gdb/src/org/eclipse/cdt/examples/dsf/gdb/viewmodel/GdbExtendedVMMessages.java)/**
 * @noinstantiate This class is not intended to be instantiated by clients.
 */
BackgroundRunner (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/framework/BackgroundRunner.java)/**
 * This runner starts an eclipse job ro run the tests, so as
 * to release the UI thread.
 */
BaseParametrizedTestCase (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/framework/BaseParametrizedTestCase.java)/**
 * This is base test class for all parametrized classes (classes parameter is
 * gdb version)
 */
SessionEventListener (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/framework/BaseTestCase.java)/**
	 * We listen for the target to stop at the main breakpoint. This listener is
	 * installed when the session is created and we uninstall ourselves when we
	 * get to the breakpoint state, as we have no further need to monitor events
	 * beyond that point.
	 */
BaseTestCase (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/framework/BaseTestCase.java)/**
 * This is the base class for the GDB/MI Unit tests.
 * It provides the @Before and @After methods which setup
 * and teardown the launch, for each test.
 * If these methods are overridden by a subclass, the new method
 * must call super.baseSetup or super.baseTeardown itself, if this
 * code is to be run.
 */
IntermittentRule (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/framework/IntermittentRule.java)/**
 * This is the rule to add to tests that rarely fail randomly and you want to keep them but cannot figure out they fail.
 * It is safe to use it in any class, it will only apply to tests which have @Intermittent annotation
 <code>
 import org.eclipse.cdt.tests.dsf.gdb.framework.Intermittent
 import org.eclipse.cdt.tests.dsf.gdb.framework.IntermittentRule

 class SomeTest {
 public @Rule IntermittentRule rule = new IntermittentRule();

 @Test
 @Intermittent(repetition = 3)
 public void someTest (){...}
 }
 </code>

 You can also ally this to the whole class
 <code>
 import org.eclipse.cdt.tests.dsf.gdb.framework.Intermittent
 import org.eclipse.cdt.tests.dsf.gdb.framework.IntermittentRule

 @Intermittent(repetition = 3)
 class SomeTest {
 public @Rule IntermittentRule rule = new IntermittentRule();
 ...
 }

 </code>
 */
OnceOnlySuite (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/framework/OnceOnlySuite.java)/**
 * This custom suite runner ensures that a class runs only once, no matter how
 * many times it appears in a suite. Redundant appearances are possible with
 * hierarchical suites. In some cases, this is intentional and desirable--i.e.,
 * we want the same class to run multiple times (usually with some slight
 * variation). However, in some cases, the redundant appearances are
 * unintentional and unavoidable consequences of how the suites are defined and
 * used. This runner caters to the latter scenario.
 *
 * <p>
 * Thanks to Bill Venners and David Saff for suggesting this solution on the
 * junit mailing list. See <a
 * href="http://tech.groups.yahoo.com/group/junit/message/23208"
 * >http://tech.groups.yahoo.com/group/junit/message/23208</a>
 */
ServiceFactoriesManager (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/framework/ServiceFactoriesManager.java)/**
 * This is a Debug Service Factories Manager which keeps track of the factories provided by specific test cases.
 * This allow individual tests to override DSF-GDB Services which is sometimes needed to validate different
 * code paths.
 *
 * The test is in charge of providing a unique id for the given factory, however this class will trigger an
 * exception if a duplicate id is detected.
 *
 * This id can then be shared via launch attributes, since each individual test method has its
 * own launch configuration there is no possibility to override the launch attributes by other tests
 *
 * Users can then retrieve/remove the registered factory via the unique factory id provided by the test
 */
SyncUtil (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/framework/SyncUtil.java)/**
 * Timeout wait values are in milliseconds, or WAIT_FOREVER.
 */
TestLaunchDelegate (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/launching/TestLaunchDelegate.java)/**
 * The launch configuration delegate for the DSF GDB JUnit tests.
 */
TestsPlugin (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/launching/TestsPlugin.java)/**
 * The main plugin class
 */
AllRemoteSuites (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/AllRemoteSuites.java)/**
 * This suite runs remote tests for all gdb versions (it will ignore setting of "cdt.tests.dsf.gdb.versions", if you
 * want run tests controlled by this var run {@link AutomatedSuite}
 */
AllSuites (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/AllSuites.java)/**
 * This suite runs tests for all gdb versions (it will ignore setting of "cdt.tests.dsf.gdb.versions", if you
 * want run tests controlled by this var run {@link AutomatedSuite}
 */
AutomatedSuite (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/AutomatedSuite.java)/**
 * This suite runs all suites that are part of the tests automatically run with
 * each CDT build.
 *
 *
 * This suite runs tests for gdb versions specified by java system variable "cdt.tests.dsf.gdb.versions", i.e.
 * -Dcdt.tests.dsf.gdb.versions=gdb.7.7,gdbserver.7.7,gdb.7.11
 */
GDBConsoleBreakpointsTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/GDBConsoleBreakpointsTest.java)/**
 * This test case verifies whether breakpoints or watchpoints set from GDB console
 * are properly synchronized with platform breakpoints.
 */
GDBConsoleSynchronizingTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/GDBConsoleSynchronizingTest.java)/**
 * This test case verifies that different commands issued from the
 * GDB console cause proper updating within the CDT views.
 */
GDBTestTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/GDBTestTest.java)/**
 * These are basic tests to demonstrate that the test infrastructure works as
 * expected. This class can also be used as a starting point for additional test
 * cases as this class tries to stay simple.
 */
TestBackendBasicConsole (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/MIModifiedServicesTest.java)/**
	 * A backend class that disables the full GDB console and uses the basic console instead.
	 */
TestServicesFactoryBasicConsole (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/MIModifiedServicesTest.java)/**
	 * A services factory that uses the test backend service that instantiates
	 * a basic console instead of a full console.
	 */
MIModifiedServicesTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/MIModifiedServicesTest.java)/**
 * The tests of this class use special versions of services.
 */
MIRunControlReverseTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/MIRunControlReverseTest.java)/**
 * Tests MIRunControl class for some reverse debugging scenarios.
 */
MIRunControlTargetAvailableTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/MIRunControlTargetAvailableTest.java)/**
 * Tests MIRunControl class for for the execWhileTargetAvailable() method.
 */
MIRunControlTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/MIRunControlTest.java)/**
 * Tests MIRunControl class for Multi-threaded application.
 */
GDBMultiNonStopRunControlTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/nonstop/GDBMultiNonStopRunControlTest.java)/**
 * Tests IMultiRunControl class for Non-stop multi-threaded application.
 */
OperationsWhileTargetIsRunningTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/OperationsWhileTargetIsRunningTest.java)/**
 * Tests that we can perform different operations while the target
 * is running.
 */
SourceLookupTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/SourceLookupTest.java)/**
 * Tests that interaction with source lookups works as expected.
 * <p>
 * All of these tests use one of SourceLookup*.exe that was built from a file
 * that was "moved" since build time. At build time the SourceLookup.cc file was
 * located in the {@link #BUILD_PATH} directory, but it is now located in the
 * {@link BaseTestCase#SOURCE_PATH} directory.
 * <p>
 * The wild card in SourceLookup*.exe can be one of the following to cover the
 * different effective types of source lookups that need to be done depending on
 * how the program was compiled. Each of these options produces different debug
 * information about where to find the source file. See the Makefile for more
 * information.
 * <ul>
 * <li><b>AC</b>: Absolute and Canonical path (no ../ in path passed to GCC)
 * </li>
 * <li><b>AN</b>: Absolute and Non-Canonical path (a ../ in path passed to GCC)
 * </li>
 * <li><b>RC</b>: Relative and Canonical path (no ../ in path passed to GCC)
 * </li>
 * <li><b>RN</b>: Relative and Non-Canonical path (a ../ in path passed to GCC)
 * </li>
 * <li><b>No suffix</b>: Compilation that does not need mapping to be found
 * </ul>
 * In addition, there can also be a <b>Dwarf2</b> in the name. That means it is
 * designed to run with GDB <= 7.4, see comment in Makefile for OLDDWARFFLAGS.
 * <p>
 * The result of the variations on compilation arguments means that some of the
 * tests are parameterised.
 * <p>
 * Some of the CDT source lookup features require newer versions of GDB than
 * others, therefore the relevant tests use assumeGdbVersion* methods to be
 * skipped when appropriate.
 */
StepIntoSelectionTest (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/StepIntoSelectionTest.java)/**
 * Tests Non Stop GDB RunControl "Step into Selection feature"
 *
 */
SuiteGdb (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/SuiteGdb.java)/**
 * This suite is for tests to be run with GDB.
 *
 * If you running this from IDE use java var to control version like this -Dcdt.tests.dsf.gdb.versions=gdb.7.7,gdbserver.7.7
 * If you don't it will run default gdb (without version postfix) for new tests. It will run 7.11 for all non-converted tests.
 *
 * If you adding a new test class do not use gdb version naming.
 * Use flat version extending BaseParametrizedTestCase see {@link MIBreakpointsTest}
 */
MIAsyncErrorProcessorTests (/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/mi/service/command/MIAsyncErrorProcessorTests.java)/**
 * Tests MIAsyncErrorProcessor for continue and step return command failure
 */
Activator (/jtag/org.eclipse.cdt.debug.dap.gdbjtag/src/org/eclipse/cdt/debug/dap/gdbjtag/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
Activator (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
GDBJtagControl_HEAD (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/dsf/gdb/service/extensions/GDBJtagControl_HEAD.java)/**
 * Top-level class in the version hierarchy of the JTag implementations of {@link ICommandControlService}.
 * <br>
 * Extenders should subclass this class for their special needs, which will allow
 * them to always extend the most recent version of the service.
 * For example, if GDB<Service>_7_9 is added, this GDB<Service>_HEAD class
 * will be changed to extend it instead of the previous version, therefore
 * automatically allowing extenders to be extending the new class.
 *
 * NOTE: Older versions of GDB that were already using an extending class,
 *       will automatically start using the new service version, which may
 *       not be desirable.  Extenders should update how they extend
 *       GdbDebugServicesFactory to properly choose the version of the
 *       service that should be used for older GDBs.
 *
 *       On the contrary, not using GDB<Service>_HEAD requires the
 *       extender to update how they extend GdbDebugServicesFactory
 *       whenever a new GDB<Service> version is added.
 *
 *       Extenders that prefer to focus on the latest GDB version are
 *       encouraged to extend GDB<Service>_HEAD.
 *
 * @since 8.5
 */
GDBJtagControl (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/dsf/gdb/service/GDBJtagControl.java)/**
 * Jtag control service which selects the Jtag CompleteInitializationSequence.
 * Use for GDB < 7.0
 * @since 8.4
 */
GDBJtagControl_7_0 (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/dsf/gdb/service/GDBJtagControl_7_0.java)/**
 * Jtag control service which selects the Jtag CompleteInitializationSequence.
 * Use for GDB >= 7.0
 * @since 8.4
 */
GDBJtagControl_7_12 (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/dsf/gdb/service/GDBJtagControl_7_12.java)/**
 * Jtag control service which selects the Jtag CompleteInitializationSequence. Used for GDB >= 7.12
 *
 * @since 9.1
 */
GDBJtagControl_7_2 (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/dsf/gdb/service/GDBJtagControl_7_2.java)/**
 * Jtag control service which selects the Jtag CompleteInitializationSequence.
 * Use for GDB >= 7.2
 * @since 8.4
 */
GDBJtagControl_7_4 (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/dsf/gdb/service/GDBJtagControl_7_4.java)/**
 * Jtag control service which selects the Jtag CompleteInitializationSequence.
 * Use for GDB >= 7.2
 * @since 8.4
 */
GDBJtagControl_7_7 (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/dsf/gdb/service/GDBJtagControl_7_7.java)/**
 * Jtag control service which selects the Jtag CompleteInitializationSequence.
 * Use for GDB >= 7.7
 * @since 8.4
 */
GdbJtagDebugServicesFactory (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/dsf/gdb/service/GdbJtagDebugServicesFactory.java)/**
 * @since 8.4
 */
GDBJtagDSFFinalLaunchSequence (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/GDBJtagDSFFinalLaunchSequence.java)/**
 * The final launch sequence for the Jtag hardware debugging using the
 * DSF/GDB debugger framework.
 * <p>
 * This class is based on the implementation of the standard DSF/GDB debugging
 * <code>org.eclipse.cdt.dsf.gdb.launching.FinalLaunchSequence</code>
 * <p>
 * It adds Jtag hardware debugging specific steps to initialize remote target
 * and start the remote Jtag debugging.
 * <p>
 * @since 7.0
 */
GDBJtagDSFFinalLaunchSequence_7_12 (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/GDBJtagDSFFinalLaunchSequence_7_12.java)/**
 * Subclass for GDB >= 7.12.
 *
 * @since 9.1
 */
GDBJtagDSFFinalLaunchSequence_7_2 (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/GDBJtagDSFFinalLaunchSequence_7_2.java)/**
 * Version for GDB 7.2 and higher.
 * @since 8.2
 */
GDBJtagDSFFinalLaunchSequence_7_7 (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/GDBJtagDSFFinalLaunchSequence_7_7.java)/**
 * Subclass for GDB >= 7.7.
 *
 * @since 8.4
 */
GDBJtagDSFLaunchConfigurationDelegate (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/GDBJtagDSFLaunchConfigurationDelegate.java)/**
 * The launch configuration delegate for the Jtag hardware debugging using
 * the DSF/GDB debugger framework.
 * <p>
 * This delegate only supports the org.eclipse.cdt.debug.gdbjtag.launchConfigurationType
 * launch configuration types.
 * <p>
 * It extends the standard DSF/GDB launch delegate <code>GdbLaunchDelegate</code>
 * but overrides the <code>newServiceFactory</code> method to return the Jtag
 * hardware debugging factory.
 * @since 7.0
 */
IGDBJtagConnection (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/IGDBJtagConnection.java)/**
 * Provides device specific debug commands for different hardware
 * JTAG devices. See <code>DefaultGDBJtagDeviceImpl</code> for
 * the default implementations.
 * @since 7.0
 */
IGDBJtagConstants (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/IGDBJtagConstants.java)/**
 * @author Doug Schaefer
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
DefaultGDBJtagConnectionImpl (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/jtagdevice/DefaultGDBJtagConnectionImpl.java)/**
 * @since 7.0
 */
DefaultGDBJtagDeviceImpl (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/jtagdevice/DefaultGDBJtagDeviceImpl.java)/**
 * Default implementation of the "jtag device"
 *
 */
IGDBJtagDevice (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/jtagdevice/IGDBJtagDevice.java)/**
 * Provides device specific debug commands for different hardware
 * JTAG devices. See <code>DefaultGDBJtagDeviceImpl</code> for
 * the default implementations.
 *
 */
MacraigorUsb2Demon (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/jtagdevice/MacraigorUsb2Demon.java)/**
 * @author ajin
 *
 */
OpenOCDPipe (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/jtagdevice/OpenOCDPipe.java)/**
 * @since 9.2
 */
OpenOCDSocket (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/jtagdevice/OpenOCDSocket.java)/**
 * @since 9.2
 */
SeggerJLink (/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/jtagdevice/SeggerJLink.java)/**
 * @since 9.3
 */
GDBJtagDSFCMainTab (/jtag/org.eclipse.cdt.debug.gdbjtag.ui/src/org/eclipse/cdt/debug/gdbjtag/internal/ui/GDBJtagDSFCMainTab.java)/**
 * @since 7.0
 */
Activator (/jtag/org.eclipse.cdt.debug.gdbjtag.ui/src/org/eclipse/cdt/debug/gdbjtag/ui/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
GDBJtagDSFDebuggerTab (/jtag/org.eclipse.cdt.debug.gdbjtag.ui/src/org/eclipse/cdt/debug/gdbjtag/ui/GDBJtagDSFDebuggerTab.java)/**
 * @since 7.0
 */
GDBJtagImages (/jtag/org.eclipse.cdt.debug.gdbjtag.ui/src/org/eclipse/cdt/debug/gdbjtag/ui/GDBJtagImages.java)/**
 * @author Doug Schaefer
 *
 */
GDBJtagLaunchConfigurationTabGroup (/jtag/org.eclipse.cdt.debug.gdbjtag.ui/src/org/eclipse/cdt/debug/gdbjtag/ui/GDBJtagLaunchConfigurationTabGroup.java)/**
 * @author Doug Schaefer
 *
 */
ContainerTargetTypeProvider (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/docker/launcher/ContainerTargetTypeProvider.java)/**
 * @since 1.2
 * @author jjohnstn
 *
 */
DockerLaunchUIPlugin (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/docker/launcher/DockerLaunchUIPlugin.java)/**
 * The activator class controls the plug-in life cycle
 *
 * @noextend This class is not intended to be subclassed by Clients
 */
IContainerLaunchTarget (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/docker/launcher/IContainerLaunchTarget.java)/**
 * @since 1.2
 * @author jjohnstn
 *
 */
BaseDatabindingModel (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/BaseDatabindingModel.java)/**
 * Base class for all model classes that need Databinding support
 *
 */
ContainerDataVolumeDialog (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ContainerDataVolumeDialog.java)/**
 * @author xcoulon
 *
 */
ContainerPortDialog (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ContainerPortDialog.java)/**
 * @author xcoulon
 *
 */
ContainerPropertyVolumesModel (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ContainerPropertyVolumesModel.java)/**
 * Databinding model for the {@link ContainerPropertyTab}
 *
 */
ContainerTabModel (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ContainerTabModel.java)/**
 * @since 1.2.1
 * @author jjohnstn
 *
 */
DataVolumeModel (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/DataVolumeModel.java)/**
 * Data binding model for container data volumes
 *
 */
GdbDebuggerPage (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/GdbDebuggerPage.java)/**
 * The dynamic tab for gdb-based debugger implementations.
 */
PreferenceConstants (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/PreferenceConstants.java)/**
 * Constant definitions for plug-in preferences
 */
RemoteDebuggerPage (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/RemoteDebuggerPage.java)/**
 * The dynamic debugger tab for Docker Container launches using gdb server. The
 * gdbserver settings are used to start a gdbserver session in the Docker
 * Container and then to connect to it from the host.
 */
ContainerGCCToolChain (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ui/launchbar/ContainerGCCToolChain.java)/**
 * The Container GCC toolchain. It represents a GCC that will run in a Docker
 * Container. It can be overridden to change environment variable settings.
 *
 * @since 1.2
 */
ContainerGCCToolChainProvider (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ui/launchbar/ContainerGCCToolChainProvider.java)/**
 *
 * @author jjohnstn
 *
 * @since 1.2
 *
 */
ContainerTargetLabelProvider (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ui/launchbar/ContainerTargetLabelProvider.java)/**
 * @author jjohnstn
 * @since 1.2
 *
 */
CoreBuildContainerLaunchConfigProvider (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ui/launchbar/CoreBuildContainerLaunchConfigProvider.java)/**
 * @since 1.2
 * @author jjohnstn
 *
 */
CoreBuildContainerLaunchDescriptorType (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ui/launchbar/CoreBuildContainerLaunchDescriptorType.java)/**
 * The launch descriptor type for launch objects built with the Core Build
 * System.
 *
 * @since 1.2
 */
Messages (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ui/launchbar/Messages.java)/**
 * @since 1.2
 * @author jjohnstn
 *
 */
NewContainerTargetWizardPage (/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ui/launchbar/NewContainerTargetWizardPage.java)/**
 * @since 1.2
 * @author jjohnstn
 *
 */
CLaunch (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate.java)/**
	 * @since 6.0
	 */
AbstractCLaunchDelegate (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate.java)/**
 * AbstractCLaunchDelegate is the launch delegate used by most CDI based debuggers.
 * It has been superseded by AbstractCLaunchDelegate2 which is used by most DSF based
 * debuggers. AbstractCLaunchDelegate has been left unmodified because it is commonly
 * used by CDT clients and contains lots of obscure code created long ago to handle
 * issues whose relevance is unclear today.
 *
 */
AbstractCLaunchDelegate2 (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate2.java)/**
 * AbstractCLaunchDelegate2 is used by most DSF based debuggers. It replaces AbstractCLaunchDelegate
 * which is the launch delegate used by most CDI based debuggers.
 *
 * While it is technically possible to merge the two, AbstractCLaunchDelegate has been left
 * unmodified because it is commonly used by CDT clients and contains lots of obscure code
 * created long ago to handle issues whose relevance is unclear today.
 *
 * @since 6.1
 *
 */
LaunchConfigAffinityExtensionPoint (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/LaunchConfigAffinityExtensionPoint.java)/**
 * Encapsulates logic to get the launchConfigAffinity extensions information.
 * The extension point is very simple. Basically, it allows an extension to
 * provide a collection of strings (launch configuration type IDs).
 */
LocalRunLaunchDelegate (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/LocalRunLaunchDelegate.java)/**
 * The launch delegate for Run mode.
 */
MultiLaunch (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/MultiLaunchConfigurationDelegate.java)/**
	 * A specialization of launch to track sublaunches lifecycle, also terminates itself when all sublaunches are terminated
	 *
	 */
MultiLaunchConfigurationDelegate (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/MultiLaunchConfigurationDelegate.java)/**
 * Group Launch delegate. Launches each configuration in the user selected mode
 * @deprecated See Bug 517722, Launch Groups are now part of Platform.
 */
AbstractLaunchConfigChange (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/refactoring/AbstractLaunchConfigChange.java)/**
 * Common implementation of launch configuration changes.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 *
 */
ProjectRenameChange (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/refactoring/ProjectRenameChange.java)/**
 * A change to update a launch configuration with a new project name.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
ResourceRenameParticipant (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/refactoring/ResourceRenameParticipant.java)/**
 * A rename participant for resource refactorings, that updates affected CDT
 * launch configurations.
 *
 * @author Christian W. Damus (cdamus)
 *
 * @since 6.0
 */
BuildErrPrompter (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/ui/BuildErrPrompter.java)/**
 * This class is a customization of the platform's
 * CompileErrorProjectPromptStatusHandler. We use it to put up a more
 * CDT-centric message when building before a launch and there is an error in
 * the project. We want to let the user know what specific build configuration
 * is having a build error when the configuration is not the active one.
 * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=309126#c11
 */
MultiLaunchConfigurationSelectionDialog (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/ui/MultiLaunchConfigurationSelectionDialog.java)/**
 * Dialog to select launch configuration(s)
 * @deprecated See Bug 517722, Launch Groups are now part of Platform.
 */
MultiLaunchConfigurationTabGroup (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/ui/MultiLaunchConfigurationTabGroup.java)/**
 * Tab group for Launch Group.
 * @deprecated See Bug 517722, Launch Groups are now part of Platform.
 */
WidgetListener (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/ui/WorkingDirectoryBlock.java)/**
	 * A listener to update for text changes and widget selection
	 */
WorkingDirectoryBlock (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/ui/WorkingDirectoryBlock.java)/**
 * A control for setting the working directory associated with a launch
 * configuration.
 */
BuildProgressMonitor (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/LaunchUtils.java)/**
	 * A specialised WrapperProgressMonitor which doesn't let cancellation of the
	 * child build task cause cancellation of our top-level launch task.
	 */
LaunchUtils (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/LaunchUtils.java)/**
 * Utility methods.
 */
Messages (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/Messages.java)/**
 * @since 9.3
 */
CAbstractArgumentsTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CAbstractArgumentsTab.java)/**
 * A launch configuration tab that displays and edits program arguments,
 * and working directory launch configuration attributes.
 * @since 9.3
 */
CAbstractMainTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CAbstractMainTab.java)/**
 * @since 6.1
 */
CArgumentsTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CArgumentsTab.java)/**
 * A launch configuration tab that displays and edits program arguments,
 * and working directory launch configuration attributes.
 * <p>
 * This class may be instantiated. This class is not intended to be subclassed.
 * </p>
 * @noextend This class is not intended to be subclassed by clients.
 */
CEnvironmentTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CEnvironmentTab.java)/**
 * @deprecated
 */
CMainCoreTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CMainCoreTab.java)/**
 * @since 6.0
 */
CMainTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CMainTab.java)/**
 * A launch configuration tab that displays and edits project and main type name launch
 * configuration attributes.
 * <p>
 * This class may be instantiated. This class is not intended to be subclassed.
 * </p>
 * @since 2.0
 */
ComboControlledStackComposite (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/ComboControlledStackComposite.java)/**
 * Stack Composite - Switch between panes controlled by combo box
 * @since 6.0
 */
SharedLocationSelectionDialog (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CommonTabLite.java)/**
	 * Provides a persistible dialog for selecting the shared project location
	 * @since 3.2
	 */
FavoritesContentProvider (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CommonTabLite.java)/**
	 * Content provider for the favorites table
	 */
FavoritesLabelProvider (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CommonTabLite.java)/**
	 * Provides the labels for the favorites table
	 *
	 */
CommonTabLite (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CommonTabLite.java)/**
 * This class was taken from org.eclipse.debug.ui. We expose a Common tab for
 * Multilaunch that has only a subset of the standard tab's properties.
 *
 * Launch configuration tab used to specify the location a launch configuration
 * is stored in, whether it should appear in the favorites list, and perspective
 * switching behavior for an associated launch.
 * <p>
 * Clients may instantiate this class.
 * </p>
 *
 * @since 6.0
 * @noextend This class is not intended to be subclassed by clients.
 */
CommonBuildTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/corebuild/CommonBuildTab.java)/**
 * Common utilities for Core Build launch configuration tabs.
 *
 * @since 9.1
 */
CoreBuildMainTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/corebuild/CoreBuildMainTab.java)/**
 * @since 9.1
 */
CoreBuildTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/corebuild/CoreBuildTab.java)/**
 * Launch configuration tab for adjusting Core Build settings. Contents of tab depends on the nature
 * of the project which determines what build system is being used.
 *
 * @since 9.1
 */
WidgetListener (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/corebuild/GenericMainTab.java)/**
	 * A listener to update for text modification and widget selection.
	 */
GenericMainTab (/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/corebuild/GenericMainTab.java)/**
 * @since 9.2
 */
ILLDBDebugPreferenceConstants (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/ILLDBDebugPreferenceConstants.java)/**
 * Preference constants that affect behavior in the core LLDB plugin.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 */
ILLDBLaunchConfigurationConstants (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/ILLDBLaunchConfigurationConstants.java)/**
 * Preference constants that are used in some ways by the LLDB launch
 * configuration.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 */
ILLDBConstants (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/ILLDBConstants.java)/**
 * Constants related to the LLDB debugger itself.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 */
LLDBAttachLaunchDelegate (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/launching/LLDBAttachLaunchDelegate.java)/**
 * LLDB launch delegate for attaching.
 */
LLDBFinalLaunchSequence (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/launching/LLDBFinalLaunchSequence.java)/**
 * A LLDB-specific launch sequence that was initially created to work around the
 * fact that LLDB always has to run in async mode, even in all-stop.
 */
LLDBLaunch (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/launching/LLDBLaunch.java)/**
 * LLDB specific launch. It mostly deals with setting up the paths correctly.
 */
LLDBLaunchDelegate (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/launching/LLDBLaunchDelegate.java)/**
 * A specific LLDB launch delegate that allows customization such as setting the
 * LLDB path, using LLDB-specific preferences and creating a service factory
 * (mostly used to work around the current LLDB-MI limitations)
 */
Messages (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/launching/Messages.java)/**
 * Messages related to launching LLDB.
 */
LLDBCorePlugin (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/LLDBCorePlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
LLDBPreferenceInitializer (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/LLDBPreferenceInitializer.java)/**
 * Initializes default values for LLDB preferences.
 */
LLDBCommandFactory (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/service/commands/LLDBCommandFactory.java)/**
 * A command factory specific to LLDB for cases where some commands need any
 * kind of tweaks to account for discrepancies with GDB.
 */
LLDBBreakpoints (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/service/LLDBBreakpoints.java)/**
 * Provides service for breakpoint operations. See {@link IBreakpoints}
 *
 * This LLDB specific implementation was initially created in order to work
 * around a bug with absolute paths when specifying the breakpoint location.
 */
LLDBControl (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/service/LLDBControl.java)/**
 * Provides service for controlling sending and receiving commands. See
 * {@link ICommandControl}
 *
 * This LLDB specific implementation was initially created in order to be able
 * to control the launch sequence of LLDB.
 */
LLDBProcesses (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/service/LLDBProcesses.java)/**
 * Provides processes information see {@link IProcesses}
 *
 * This LLDB specific implementation was initially created in order to be able
 * to get the list of processes in the absence of the MI command
 *
 * <pre>
 * -list-thread-groups --available
 * </pre>
 *
 * This is used notably when attaching to processes.
 */
LLDBRunControl (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/service/LLDBRunControl.java)/**
 * Provides service for controlling the process. See {@link IRunControl}
 *
 * This LLDB specific implementation was initially created in order to disable
 * "move to line" and "resume at line" because the -exec-jump MI command was not
 * implemented.
 */
LLDBServiceFactory (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/service/LLDBServiceFactory.java)/**
 * A service factor specific to LLDB that replaces some services in order to
 * offer a more tailored experience and mostly work around some issues with
 * LLDB-MI.
 */
Messages (/llvm/org.eclipse.cdt.llvm.dsf.lldb.core/src/org/eclipse/cdt/llvm/dsf/lldb/core/internal/service/Messages.java)/**
 * Messages related to LLDB services.
 */
LLDBAttachCDebuggerTab (/llvm/org.eclipse.cdt.llvm.dsf.lldb.ui/src/org/eclipse/cdt/llvm/dsf/lldb/ui/internal/LLDBAttachCDebuggerTab.java)/**
 * A LLDB-specific debugger tab for attaching.
 */
LLDBCDebuggerPage (/llvm/org.eclipse.cdt.llvm.dsf.lldb.ui/src/org/eclipse/cdt/llvm/dsf/lldb/ui/internal/LLDBCDebuggerPage.java)/**
 * A LLDB-specific debugger page that only shows the options currently supported
 * by LLDB and its integration with CDT.
 */
LLDBDebugPreferencePage (/llvm/org.eclipse.cdt.llvm.dsf.lldb.ui/src/org/eclipse/cdt/llvm/dsf/lldb/ui/internal/LLDBDebugPreferencePage.java)/**
 * A preference page for settings that are currently supported in LLDB. Based on
 * the GDB equivalent.
 */
LLDBLocalApplicationCDebuggerTab (/llvm/org.eclipse.cdt.llvm.dsf.lldb.ui/src/org/eclipse/cdt/llvm/dsf/lldb/ui/internal/LLDBLocalApplicationCDebuggerTab.java)/**
 * A LLDB-specific debugger tab that allows us to present a different debugger
 * page.
 */
LLDBUIPlugin (/llvm/org.eclipse.cdt.llvm.dsf.lldb.ui/src/org/eclipse/cdt/llvm/dsf/lldb/ui/internal/LLDBUIPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
Messages (/llvm/org.eclipse.cdt.llvm.dsf.lldb.ui/src/org/eclipse/cdt/llvm/dsf/lldb/ui/internal/Messages.java)/**
 * Messages related to preferences and launch configuration.
 */
Activator (/llvm/org.eclipse.cdt.managedbuilder.llvm.tests/src/org/eclipse/cdt/managedbuilder/llvm/tests/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
JUnit_tests (/llvm/org.eclipse.cdt.managedbuilder.llvm.tests/src/org/eclipse/cdt/managedbuilder/llvm/tests/JUnit_tests.java)/**
 * Automated testing with JUnit.
 *
 * @author Petri Tuononen
 *
 */
LlvmBuildEnvironmentVariable (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmBuildEnvironmentVariable.java)/**
 * Implemented type that contains BuildEnvironmentalVariables.
 *
 */
LlvmEnvironmentVariableSupplier (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmEnvironmentVariableSupplier.java)/**
 * Contains LLVM environment variables.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
LlvmIsToolChainSupported (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmIsToolChainSupported.java)/**
 * Based on MingwIsToolChainSupported.
 *
 */
LlvmProjectNature (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmProjectNature.java)/**
 * Implements project nature for LLVM projects.
 *
 */
LlvmUIPlugin (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmUIPlugin.java)/**
 * The activator class controls the plug-in life cycle.
 * The main plugin class to be used in the desktop.
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
IncludePathListEditor (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/IncludePathListEditor.java)/**
 * New implementation of LlvmListEditor.
 * Used to select an include path from the dialog.
 *
 */
LibraryListEditor (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryListEditor.java)/**
 * New implementation of LlvmListEditor.
 * Used to select a library file from the dialog.
 *
 */
LibraryPathListEditor (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryPathListEditor.java)/**
 * New implementation of LlvmListEditor.
 * Used to select a library path from the dialog.
 *
 */
LlvmListEditor (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmListEditor.java)/**
 * An abstract list editor that manages a list of input values.
 * The editor displays a list containing the values, buttons for adding and removing
 * values, and Up and Down buttons to adjust the order of elements in the list.
 *
 */
LlvmPreferencePage (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmPreferencePage.java)/**
 * This class represents a preference page that
 * is contributed to the Preferences dialog. By
 * subclassing <samp>FieldEditorPreferencePage</samp>, we
 * can use the field support built into JFace that allows
 * us to create a page that is small and knows how to
 * save, restore and apply itself.
 * <p>
 * This page is used to modify preferences only. They
 * are stored in the preference store that belongs to
 * the main plug-in class. That way, preferences can
 * be accessed directly via the preference store.
 *
 */
LlvmPreferenceStore (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmPreferenceStore.java)/**
 * Class used to access the LLVM Preference store values.
 *
 * This class is not intended to be subclassed by clients.
 */
PreferenceConstants (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceConstants.java)/**
 * Constant definitions for plug-in preferences
 *
 */
PreferenceInitializer (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceInitializer.java)/**
 * Class used to initialize the default preference values.
 *
 */
FindStdLibPath (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FindStdLibPath.java)/**
 * The purpose is to find a path where stdc++ library is located.
 * Currently the shell script is only for Linux.
 *
 * TODO: It might not be able to execute scripts therefore place the command into a variable.
 */
LlvmResourceListener (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmResourceListener.java)/**
 * Implements Resource listener.
 */
LlvmToolOptionPathUtil (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmToolOptionPathUtil.java)/**
 * The main purpose of this class is to add include paths and libraries and library search paths
 * for LLVM compiler and linker Tools which are added in Preferences->LLVM to all projects
 * and build configurations that use LLVM ToolChain. Values added in Preferences->LLVM will
 * show in Project->Properties->C/C++ General->Paths and Symbols tabs.
 *
 */
Separators (/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/Separators.java)/**
 * Provides different separators such as file and path separators.
 *
 */
C99ResolveParserAction (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/c99/action/deprecated/C99ResolveParserAction.java)/**
 * This class was an attempt at doing full binding resolution during the parse
 * as opposed to doing it after the parse as is normally done with the DOM parser.
 *
 *
 * TODO: token mapping so that this will work with UPC
 * TODO: what about function definitions, don't they count as declarations?
 *
 * Try to resolve bindings without using the ASTStack, that way I can resolve bindings
 * without generating an AST. In the future I can remove this as a subclass of C99ParserAction.
 *
 * TODO: if I'm calculating scopes then those scopes need to be linked to AST nodes
 *
 * TODO: some language constructs are not handled yet: typeIds (casts), field designators
 *
 * @author Mike Kucera
 *
 * @deprecated Binding resolution is too hard, replacing with simpler C99TypedefTrackerParserAction
 */
IUndoAction (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/c99/action/deprecated/C99TypedefTrackerParserAction.java)/**
	 * A command object that provides undo functionality.
	 */
C99TypedefTrackerParserAction (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/c99/action/deprecated/C99TypedefTrackerParserAction.java)/**
 * A simple set of trial and undo actions that just keep track
 * of typedef names. This information is then fed back to the parser
 * in order to disambiguate certain parser grammar rules.
 *
 * The command design pattern is used to implement undo actions.
 *
 * @author Mike Kucera
 */
DeclaratorFrame (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/c99/action/deprecated/DeclaratorFrame.java)/**
 * Represents a frame on the declaration stack used by the resolver actions.
 *
 * TODO: document this class better
 *
 * @author Mike Kucera
 */
DeclSpec (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/c99/action/deprecated/DeclSpec.java)/**
 * Keeps track of declaration specifiers during the parse.
 * Used to compute types and determine if a declarator is a typedef.
 *
 * @author Mike Kucera
 */
C99Scope (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/c99/bindings/C99Scope.java)/**
 * @author Mike Kucera
 *
 */
IC99Scope (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/c99/bindings/IC99Scope.java)/**
 * TODO maybe rename to IC99InternalScope or something else.
 *
 * @author Mike Kucera
 */
Key (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/symboltable/C99SymbolTable.java)/**
	 * Adapter objects are used as the keys. The trick here is to implement
	 * compareTo() in such a way that identifiers are separated by their namespace.
	 */
C99SymbolTable (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/symboltable/C99SymbolTable.java)/**
 * A facade for a FunctionalMap to make it behave like
 * a symbol table for C99.
 *
 * In particular we need to be able to lookup identifiers based both
 * on the String representation of the identifier and its "namespace".
 *
 * @author Mike Kucera
 */
SymbolScope (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/symboltable/CImperativeSymbolTable.java)/**
	 * Represents a scope in the C language.
	 */
Bucket (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/symboltable/CImperativeSymbolTable.java)/**
	 * A bucket object used to hold elements in the hash table.
	 */
CImperativeSymbolTable (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/symboltable/CImperativeSymbolTable.java)/**
 * Used to compute binding resolution during the parse.
 *
 * Imperative style symbol table with destructive update.
 *
 * Consists of two data structures, a hash table for fast lookup
 * of bindings given their names, and a stack used to keep track
 * of scopes.
 *
 *
 * @author Mike Kucera
 */
FunctionalMap (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/symboltable/FunctionalMap.java)/**
 * An immutable map, like you would find in a functional programming language.
 *
 * Inserting a new pair into the map leaves the original map untouched,
 * instead a new map that contains the pair is returned. Therefore
 * an assignment is needed to "modify" the map (just like with Strings).
 *
 * <code>
 * myMap = myMap.insert(key,value);
 * </code>
 *
 * There is no remove() method because it is not needed. In order to
 * "delete" a pair from the map simply save a reference to an old version
 * of the map and restore the map from that old reference. This makes
 * "undo" operations trivial to implement.
 *
 * <code>
 * FunctionalMap oldMap = myMap;     // save a reference
 * myMap = myMap.insert(key,value);  // insert the pair into the map
 * myMap = oldMap;                   // delete the pair from the map
 * </code>
 *
 * This map is implemented as a red-black tree data structure,
 * and is based on the implementation found at:
 * http://www.eecs.usma.edu/webs/people/okasaki/jfp99.ps
 *
 * @author Mike Kucera
 */
TypedefSymbolTable (/lrparser/org.eclipse.cdt.core.lrparser/old/org/eclipse/cdt/internal/core/dom/lrparser/symboltable/TypedefSymbolTable.java)/**
 * A facade for a FunctionalMap that is used just to track typedef
 * declarations.
 *
 * This class acts like a set. No information needs to be associated
 * with a typedef declaration, all we need to know is if the identifier
 * has been declared as a typedef.
 *
 * @author Mike Kucera
 */
ASTCompletionNode (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/ASTCompletionNode.java)/**
 * An AST node that represents the location of content assist
 * in the source file.
 *
 * This node may contain the prefix text of an identifier up to the point. If
 * there is no prefix, the completion occurred at the point where a new token
 * would have begun.
 *
 * Contains a list of name nodes, each name represents an identifier
 * at the point where content assist was invoked. There is usually
 * a single name node, however if an ambiguity is detected then that section
 * of the source may be interpreted in more than one way (for example, as an expression then as a declaration).
 * This results in an ambiguity node in the tree and one name node for each of the ways it can be interpreted.
 *
 * The full AST may be accessed via getTranslationUnit() or by following
 * the parent pointers of the name nodes.
 *
 * @author Mike Kucera
 */
BuildASTParserAction (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/BuildASTParserAction.java)/**
 * Parser semantic actions that are common to both C and C++.
 *
 * @author Mike Kucera
 */
C99BuildASTParserAction (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/c99/C99BuildASTParserAction.java)/**
 * Semantic actions called by the C99 parser to build an AST.
 *
 * @author Mike Kucera
 */
CPPBuildASTParserAction (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/cpp/CPPBuildASTParserAction.java)/**
 * Semantic actions that build the AST during the parse.
 * These are the actions that are specific to the C++ parser, the superclass
 * contains actions that can be shared with the C99 parser.
 *
 * @author Mike Kucera
 */
ICPPSecondaryParserFactory (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/cpp/ICPPSecondaryParserFactory.java)/**
 * Secondary parsers for resolving ambiguities specific to C++.
 *
 * @author Mike Kucera
 */
ISecondaryParserFactory (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/ISecondaryParserFactory.java)/**
 * Some ambiguities are resolved by spawning a secondary parser
 * to re-parse a sequence of tokens using a modified grammar.
 * This factory is used to create these secondary parsers.
 *
 * @author Mike Kucera
 */
ITokenMap (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/ITokenMap.java)/**
 * Maps tokens defined in parser extensions back to the token kinds
 * defined in the lr parsers.
 *
 *
 * @author Mike Kucera
 */
ITokenStream (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/ITokenStream.java)/**
 * Provides an interface to the token stream that
 * can be used by the parser semantic actions.
 *
 * Allows the semantic actions to directly inspect the token
 * stream. Used to calculate AST node offsets and for
 * other purposes.
 *
 * TODO There are still issues with getLeftIToken() and
 * getRightIToken(), they should return null when used with
 * an empty rule but currently they don't.
 *
 * @author Mike Kucera
 */
ScopedStack (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/ScopedStack.java)/**
 * A stack that can be "marked", that is the stack can be divided
 * into chunks that can be conveniently processed. There is always at
 * least one open scope.
 *
 *
 * This stack was designed to be used to store AST nodes while
 * the AST is built during the parse, however it is useful for other
 * purposes as well.
 *
 * Some grammar rules have arbitrary length lists on the right side.
 * For example the rule for compound statements (where block_item_list is any
 * number of statements or declarations):
 *
 * compound-statement ::= '{' <openscope-ast> block_item_list '}'
 *
 * There is a problem when trying to build the AST node for the compound statement...
 * you don't know how many block_items are contained in the compound statement, so
 * you don't know how many times to pop the AST stack.
 *
 * One inelegant solution is to count the block-items as they are parsed. This
 * is inelegant because nested compound-statements are allowed so you would
 * have to maintain several counts at the same time.
 *
 * Another solution would be to build the list of block-items as part of the
 * block_item_list rule, but just using this stack is simpler.
 *
 * This class can be used as an AST stack that is implemented as a stack of "AST Scopes".
 * There is a special grammar rule <openscope-ast> that creates a new AST Scope.
 * So, in order to consume all the block_items, all that has to be done is
 * iterate over the topmost scope and then close it when done.
 *
 *
 * @author Mike Kucera
 */
TokenMap (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/action/TokenMap.java)/**
 * Maps token kinds from a sub-parser back to the corresponding
 * token kinds in a base parser.
 *
 * @author Mike Kucera
 */
BaseExtensibleLanguage (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/BaseExtensibleLanguage.java)/**
 * Implementation of the ILanguage extension point,
 * provides the ability to add LPG based languages to CDT.
 */
C99Language (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/c99/C99Language.java)/**
 * ILanguage implementation for the C99 parser.
 *
 * @author Mike Kucera
 */
DOMToC99TokenMap (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/c99/DOMToC99TokenMap.java)/**
 * Maps tokens types returned by CPreprocessor to token types
 * expected by the C99 parser.
 *
 * @author Mike Kucera
 */
DOMToISOCPPTokenMap (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/cpp/DOMToISOCPPTokenMap.java)/**
 * Maps tokens types returned by CPreprocessor to token types
 * expected by the C++ parser.
 *
 * @author Mike Kucera
 */
ISOCPPLanguage (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/cpp/ISOCPPLanguage.java)/**
 * ILanguage implementation for the C++ parser.
 *
 * @author Mike Kucera
 */
CPreprocessorAdapter (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/CPreprocessorAdapter.java)/**
 * Adapts the CPreprocessor from the CDT core for use with LPG based parsers.
 *
 * @author Mike Kucera
 * @noreference
 * TODO move into an internal package
 */
DOMToGCCTokenMap (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/gnu/DOMToGCCTokenMap.java)/**
 * Maps tokens types returned by CPreprocessor to token types
 * expected by the C99 parser.
 *
 * @author Mike Kucera
 */
DOMToGPPTokenMap (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/gnu/DOMToGPPTokenMap.java)/**
 * Maps tokens types returned by CPreprocessor to token types
 * expected by the C++ parser.
 *
 * @author Mike Kucera
 */
GCCLanguage (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/gnu/GCCLanguage.java)/**
 * ILanguage implementation for the C99 parser.
 *
 * @author Mike Kucera
 */
GPPLanguage (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/gnu/GPPLanguage.java)/**
 * ILanguage implementation for the GPP parser.
 *
 * @author Mike Kucera
 */
IDOMTokenMap (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/IDOMTokenMap.java)/**
 * Maps tokens returned by CPreprocessor to the corresponding
 * token kind used by an LPG based parser.
 *
 * @author Mike Kucera
 */
IParser (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/IParser.java)/**
 * Represents a parser that can be used by BaseExtensibleLanguage.
 *
 * @author Mike Kucera
 */
ITokenCollector (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/ITokenCollector.java)/**
 * An LPG parser object is initialized with the list of tokens
 * before parsing is invoked.
 *
 * @author Mike Kucera
 */
NullAction (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/lpgextensions/AbstractTrialUndoActionProvider.java)/**
	 * Action for a null rule
	 */
AbstractTrialUndoActionProvider (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/lpgextensions/AbstractTrialUndoActionProvider.java)/**
 * Base class for parser action classes which support trial, undo and
 * final actions.
 */
ITrialUndoActionProvider (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/lpgextensions/ITrialUndoActionProvider.java)/**
 * Provides trial, undo, and final actions for the
 * TrialUndoBacktrackingParser.
 */
Rule (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/lpgextensions/Rule.java)/**
 * Provides information about a reduction rule that a parser has
 * encountered.
 */
LPGTokenAdapter (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/LPGTokenAdapter.java)/**
 * The CPreprocessor from the CDT core returns tokens that
 * are of the type org.eclipse.cdt.core.parser.IToken,
 * however LPG wants the tokens to be of the type lpg.lpgjavaruntime.IToken.
 *
 * So these adapter objects are used to wrap the tokens returned
 * by CPreprocessor so that they can be used with LPG.
 *
 * @author Mike Kucera
 */
ScannerExtensionConfiguration (/lrparser/org.eclipse.cdt.core.lrparser/src/org/eclipse/cdt/core/dom/lrparser/ScannerExtensionConfiguration.java)/**
 * A minimalistic scanner configuration for the LR parser.
 *
 * @author Mike Kucera
 *
 */
LRCompletionParseTest (/lrparser/org.eclipse.cdt.core.lrparser.tests/src/org/eclipse/cdt/core/lrparser/tests/LRCompletionParseTest.java)/**
 * Reuse the completion parse tests from the old parser for now.
 */
LRDigraphTrigraphTests (/lrparser/org.eclipse.cdt.core.lrparser.tests/src/org/eclipse/cdt/core/lrparser/tests/LRDigraphTrigraphTests.java)/**
 * TODO these tests can be moved into the core
 */
LRKnRTests (/lrparser/org.eclipse.cdt.core.lrparser.tests/src/org/eclipse/cdt/core/lrparser/tests/LRKnRTests.java)/**
 * @author Mike Kucera
 */
LRTests (/lrparser/org.eclipse.cdt.core.lrparser.tests/src/org/eclipse/cdt/core/lrparser/tests/LRTests.java)/**
 *
 * @author Mike Kucera
 *
 */
ParseHelper (/lrparser/org.eclipse.cdt.core.lrparser.tests/src/org/eclipse/cdt/core/lrparser/tests/ParseHelper.java)/**
 * Utility methods for parsing test code using the C99 LPG parser.
 *
 * @author Mike Kucera
 */
CPPResourceChangeListener (/lsp/org.eclipse.cdt.lsp.core/src/org/eclipse/cdt/lsp/core/CPPResourceChangeListener.java)/**
 * A resource listener used to generate FileEvents, as part of the LSP. This
 * only listens to Added, Changed, Removed event on a specific project that as a
 * C/C++ language server started.
 */
SymbolRole (/lsp/org.eclipse.cdt.lsp.core/src/org/eclipse/cdt/lsp/core/cquery/SymbolRole.java)/**
 * A class to contain constants that represent different roles
 * a symbol can have.
 * The constants are used as bit-flags to compose the value of
 * HighlightSymbol.role.
 */
PreferenceConstants (/lsp/org.eclipse.cdt.lsp.core/src/org/eclipse/cdt/lsp/core/PreferenceConstants.java)/**
 * Constant definitions for LSP4E-CPP plug-in preferences.
 */
PreferenceInitializer (/lsp/org.eclipse.cdt.lsp.core/src/org/eclipse/cdt/lsp/core/PreferenceInitializer.java)/**
 * Class used to initialize default preference values for C/C++ Preference Page.
 */
PresentationReconcilerCPP (/lsp/org.eclipse.cdt.lsp.core/src/org/eclipse/cdt/lsp/core/PresentationReconcilerCPP.java)/**
 * Hack-ish reconciler to get some colors in the generic editor using the C/C++
 * Server.
 */
FPRenderingPreferenceConstants (/memory/org.eclipse.cdt.debug.ui.memory.floatingpoint/src/org/eclipse/cdt/debug/ui/memory/floatingpoint/FPRenderingPreferenceConstants.java)/**
 * Constant definitions for plug-in preferences
 */
FPRenderingPreferenceInitializer (/memory/org.eclipse.cdt.debug.ui.memory.floatingpoint/src/org/eclipse/cdt/debug/ui/memory/floatingpoint/FPRenderingPreferenceInitializer.java)/**
 * Class used to initialize default preference values.
 */
IMemoryBrowser (/memory/org.eclipse.cdt.debug.ui.memory.memorybrowser/src/org/eclipse/cdt/debug/ui/memory/memorybrowser/api/IMemoryBrowser.java)/**
 * Public API for accessing the memory browser.
 *
 * <p>
 * All methods must be called on the UI thread, unless otherwise noted.
 */
MemoryBrowserPlugin (/memory/org.eclipse.cdt.debug.ui.memory.memorybrowser/src/org/eclipse/cdt/debug/ui/memory/memorybrowser/MemoryBrowserPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
MemoryBrowserPreferenceInitializer (/memory/org.eclipse.cdt.debug.ui.memory.memorybrowser/src/org/eclipse/cdt/debug/ui/memory/memorybrowser/MemoryBrowserPreferenceInitializer.java)/**
 * Class used to initialize default preference values.
 */
MemorySpacePreferencesHelper (/memory/org.eclipse.cdt.debug.ui.memory.traditional/src/org/eclipse/cdt/debug/ui/internal/MemorySpacePreferencesHelper.java)/**
 * This class encapsulates the messy details of dealing with preferences
 * entries that have unpredictable key names. This is necessary because the
 * preference store does not allow getting a list of the keys, just a lookup
 * by exact key. So the work-around is to use one key to save a csv string,
 * containing the information necessary to reconstruct the keys for the
 * unpredictable entries.
 *
 * @since 1.4
 */
IMemorySpacePreferencesHelper (/memory/org.eclipse.cdt.debug.ui.memory.traditional/src/org/eclipse/cdt/debug/ui/memory/traditional/IMemorySpacePreferencesHelper.java)/**
 * @since 1.4
 */
AddressInfoTypeMap (/memory/org.eclipse.cdt.debug.ui.memory.traditional/src/org/eclipse/cdt/debug/ui/memory/traditional/RenderingAddressInfo.java)/**
	 * Keeps a map from information type to its state and to a corresponding Action instance
	 * needed to update the actual state from UI interactions
	 */
RenderingAddressInfo (/memory/org.eclipse.cdt.debug.ui.memory.traditional/src/org/eclipse/cdt/debug/ui/memory/traditional/RenderingAddressInfo.java)/**
 * @since 1.4
 */
TraceOptions (/memory/org.eclipse.cdt.debug.ui.memory.traditional/src/org/eclipse/cdt/debug/ui/memory/traditional/TraceOptions.java)/**
 * Hooks debug options to the Platform trace functionality.
 * In essence, we can open Window -> Preferences -> Tracing
 * and turn on debug options for this package. The debug output
 * will come out on the console and can be saved directly to
 * a file. Classes that need to be debugged can call into
 * TraceOptions to get debug flags. If new flags need to be
 * created, they will need to have a unique identifier and added to
 * the .options file in this plugin
 *
 */
TraditionalMemoryRenderingFactory (/memory/org.eclipse.cdt.debug.ui.memory.traditional/src/org/eclipse/cdt/debug/ui/memory/traditional/TraditionalMemoryRenderingFactory.java)/**
 * @since 1.4
 */
TraditionalRenderingPreferenceConstants (/memory/org.eclipse.cdt.debug.ui.memory.traditional/src/org/eclipse/cdt/debug/ui/memory/traditional/TraditionalRenderingPreferenceConstants.java)/**
 * Constant definitions for plug-in preferences
 */
TraditionalRenderingPreferenceInitializer (/memory/org.eclipse.cdt.debug.ui.memory.traditional/src/org/eclipse/cdt/debug/ui/memory/traditional/TraditionalRenderingPreferenceInitializer.java)/**
 * Class used to initialize default preference values.
 */
BlockAndAddress (/memory/org.eclipse.cdt.debug.ui.memory.transport/src/org/eclipse/cdt/debug/ui/memory/transport/actions/ExportMemoryAction.java)/**
	 * Utility PODS to return a memory block and an address from a method
	 */
ExportMemoryAction (/memory/org.eclipse.cdt.debug.ui.memory.transport/src/org/eclipse/cdt/debug/ui/memory/transport/actions/ExportMemoryAction.java)/**
 * Action for exporting memory.
 */
ImportMemoryAction (/memory/org.eclipse.cdt.debug.ui.memory.transport/src/org/eclipse/cdt/debug/ui/memory/transport/actions/ImportMemoryAction.java)/**
 * Action for downloading memory.
 */
SerialPort (/native/org.eclipse.cdt.native.serial/src/org/eclipse/cdt/serial/SerialPort.java)/**
 * @since 5.8
 */
QtSyntaxChecker (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/codan/QtSyntaxChecker.java)/**
 * A Codan checker for QObject::connect and QObject::disconnect function calls.  The checker
 * confirms that SIGNAL and SLOT macro expansions reference a valid Qt signal or slot.
 */
Accessor (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/CDTIndex.java)/**
	 * An object used for reading from the CDT index.  The {@link #access(IIndex)} method
	 * will only be invoked when the index's read lock has been properly acquired.
	 */
CDTIndex (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/CDTIndex.java)/**
 * A wrapper around the CDT index that manages the read lock.
 */
IQElement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQElement.java)/**
 * Base interface for things that are accessed from the {@link QtIndex}.
 */
Enumerator (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQEnum.java)/**
	 * A small wrapper class for the enumerators that are declared within the enum that is
	 * referenced by the parameter of the Q_ENUMS macro expansion.
	 */
IQEnum (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQEnum.java)/**
 * Represents expansions of the Q_ENUMS macro within a class declaration.
 * <pre>
 * class B : public QObject
 * {
 * Q_OBJECT
 * enum E { enumerator };
 * Q_ENUMS( E )
 * };
 *
 * class Q : public QObject
 * {
 * Q_OBJECT
 * Q_ENUMS( B::E E0 )
 * Q_ENUMS( E1 )
 * enum E0 { e0a, e0b = 2 };
 * enum E1 { e1 };
 * }
 * </pre>
 * NOTE: http://qt-project.org/doc/qt-4.8/qobject.html#Q_ENUMS
 * <blockquote>
 * If you want to register an enum that is declared in another class, the enum must be fully qualified
 * with the name of the class defining it. In addition, the class defining the enum has to inherit
 * QObject as well as declare the enum using Q_ENUMS().
 * </blockquote>
 * So, the lookup for the C++ enum only needs to look in the same class spec when the name is not
 * qualified.  When it is qualified, then it needs to find the QObject and then look at its Q_ENUMS.
 */
IQGadget (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQGadget.java)/**
 * Represents classes that have been tagged as Q_GADGETs.  Q_GADGETs are normal
 * C++ class declarations that have been tagged with the Q_GADGET macro and are
 * therefore able to add enums and flags to the Qt meta-object system.
 */
IQMakeEnv (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQMakeEnv.java)/**
 * Represents a QMake environment. It is usually created by IQMakeEnvProvider.createEnv() method for a specific project configuration.
 *
 * Note that IQMakeEnv has destroy method only and it is expected that the instance is already initialized in the constructor.
 * This means that it may happen that IQMakeEnv instance is created and destroyed immediately.
 *
 * See IQMakeEnv2 interface if you want to get an explicit notification when IQMakeEnv gets really used. In that case, the instance initialization
 * needs to be done in init method completely - not in the constructor.
 */
IQMakeEnv2 (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQMakeEnv2.java)/**
 * Represents a QMake environment similarly to IQMakeEnv but it has an explicit init method which is called to notify
 * that the IQMakeEnv is used for active listening on change of QMakeEnvInfo and therefore it should initialize
 * its listener for such changes.
 *
 * Note that it is expected that IQMakeEnv2 does complete initialization in init method - not in the constructor
 * i.e. the IQMakeEnv2 instance should start listening on possible changes of its IQMakeEnvInfo.
 */
IController (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQMakeEnvProvider.java)/**
	 * Represents a project configuration and provides a control over the environment.
	 *
	 * This class is not meant to be implemented.
	 */
IQMakeEnvProvider (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQMakeEnvProvider.java)/**
 * Represents a provider for IQMakeEnv which is used to specify an environment for qmake run.
 * This class needs to be registered via org.eclipse.cdt.qt.core.qmakeEnvProvider extension point.
 */
IQMakeInfo (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQMakeInfo.java)/**
 * Represents a QMake information.
 *
 * Note that current implementation of does not handle support QMake 2.0 in full range so provided information might be incomplete.
 *
 * This class is not meant to be implemented.
 */
IQMakeProjectInfo (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQMakeProjectInfo.java)/**
 * Represents provider of QMake information.
 *
 * This class is not meant to be implemented.
 */
IQMakeProjectInfoListener (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQMakeProjectInfoListener.java)/**
 * A listener used for notifying that a QMake information provided by IQMakeProjectInfo might have changed.
 */
IQMethod (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQMethod.java)/**
 * Qt provides macros for marking member functions as special.  The moc compiler
 * recognizes these annotations and generates extra code to implement the special
 * behaviour.
 *
 * This interface is used to represent these methods in the Qt index.  It is used
 * for member functions that have been marked as signals, slots, and invokables.
 */
IQmlRegistration (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQmlRegistration.java)/**
 * Represents a specific QML type registration.
 * <p>
 * Qt allows types to be registered with QML by calling the qmlRegisterType function,
 * e.g.,
 * <pre>
 * class Q : public QObject { Q_OBJECT };
 * qmlRegisterType&lt;Q&gt;( "uri", 1, 0, "Q" );
 * </pre>
 * Registers Q in the QML system with the name "Q", in the library imported from "uri"
 * having the version number 1.0.
 */
IMember (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQObject.java)/**
	 * The interface to be implemented by elements that can be returned as members of an
	 * implementation of {@link IQObject}.
	 */
IMembers (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQObject.java)/**
	 * A wrapper for unmodifiable collections of members of a class.  Accessors provide filtered
	 * views of the member list.
	 *
	 * @see #all()
	 * @see #locals()
	 * @see #withoutOverrides()
	 */
IQObject (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQObject.java)/**
 * A class that inherits the Qt QObject and contains an expansion of Q_OBJECT.  This
 * provides a handle for retrieving signals, slots, and other Qt-related elements.
 * @see IQMethod
 */
IQProperty (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQProperty.java)/**
 * A container for things declared as Q_PROPERTY within a subclass of QObject.  In Qt 4.8,
 * Q_PROPERTY looks like:
 * <pre>
 * Q_PROPERTY( type name
 *             READ getFunction
 *             [WRITE setFunction]
 *             [RESET resetFunction]
 *             [NOTIFY notifySignal]
 *             [REVISION int]
 *             [DESIGNABLE bool]
 *             [SCRIPTABLE bool]
 *             [STORED bool]
 *             [USER bool]
 *             [CONSTANT]
 *             [FINAL] )
 * </pre>
 * This interface provides structured access to the elements of the Q_PROPERTY expansion.
 */
IQtVersion (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/IQtVersion.java)/**
 * Represents a Qt version in form of major and minor number.
 */
QMakeEnvInfo (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeEnvInfo.java)/**
 * Holds data describing QMake environment (pro file, qmake file, env. vars.) for a specific QMake run provided by QMakeEnv instance.
 */
QMakeEnvProviderDescriptor (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeEnvProviderDescriptor.java)/**
 * Represents a IQMakeEnvProvider that is registered via qmakeEnvProvider extension point.
 */
ConfigurationQMakeEnv (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeEnvProviderManager.java)/**
	 * Represents a fallback IQMakeEnvProvider that is used for a project that has QtNature
	 * while there is no registered IQMakeEnvProvider that would provide any IQMakeEnv.
	 */
QMakeEnvProviderManager (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeEnvProviderManager.java)/**
 * Represents a manager of registered qmakeEnvProvider extensions.
 */
QMakeInfo (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeInfo.java)/**
 * Holder for QMake information.
 */
QMakeParser (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeParser.java)/**
 * Provides a parser for QMake output.
 */
State (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeProjectInfo.java)/**
	 * Represents a state of QMakeInfo for a specific QMakeProjectInfo.
	 */
QMakeProjectInfo (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeProjectInfo.java)/**
 * Represents a QMake project information that is based on an activate project configuration of a specified related IProject.
 * Allows to resolve actual information and listen its change.
 */
QMakeProjectInfoFactory (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeProjectInfoFactory.java)/**
 * A factory for QMakeProjectInfo instances.
 */
RCListener (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeProjectInfoManager.java)/**
	 * Listens on Eclipse file system changes.
	 */
QMakeProjectInfoManager (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeProjectInfoManager.java)/**
 * Represents a management of QMakeProjectInfo instances and manages life-cycle of all QMakeProjectInfo instances.
 */
QMakeVersion (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QMakeVersion.java)/**
 * A container class to interpret and store value of the the qmake version.
 */
QtVersion (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QtFactory.java)/**
	 * A small wrapper to hold the result of index lookups for the Qt version.
	 */
QtIndex (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/index/QtIndex.java)/**
 * The public interface to the Qt index.  The Qt index is a small wrapper around the
 * core CDT's CIndex that adds Qt specific information.  The Qt index is designed to
 * interpret multiple versions of Qt, however only 4.8 has been implemented for now.
 *
 * @see #getIndex(IProject)
 */
QtParser (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/parser/QtParser.java)/**
 * A parser that use a special StringScanner to extract small sections of C++ syntax that
 * are used in Qt macro expansions.
 *
 * @see StringScanner
 */
StringScanner (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/parser/StringScanner.java)/**
 * The standard CDT scanner is CPreprocessor, which uses a Lexer to read from a file.
 * The relationships look like:
 * <br>
 * GNUCPPSourceParser - CPreprocessor - Lexer
 * <p>
 * The implementation of CPreprocessor depends on reading from a file.  It might be possible
 * to configure it to get content from a String instead, but it seems like a complex change.
 * This simpler solution replaces the CPreprocessor with a simple scanner.  In this context,
 * the only part of CPreprocessor that seems to be needed is replacing the token type for
 * keywords.  In this case the relationships look like:
 * <br>
 * QtParser - StringScanner - Lexer
 */
AbstractQClassName (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/AbstractQClassName.java)/**
 * Qt provides two types of annotations for C++ classes (Q_GADGET and Q_OBJECT).  This
 * class.  This class is used to store the common parts of these Qt classes to the
 * Qt linkage.
 */
AbstractQtPDOMClass (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/AbstractQtPDOMClass.java)/**
 * Qt has two types of annotation that can be applied to classes (Q_GADGET and G_OBJECT).
 * This class stores the information that is common to each.
 */
ASTDelegatedName (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/ASTDelegatedName.java)/**
 * The Qt linkage introduces several names that are based on names from the C++ linkage.  This
 * utility class is used to delegate operations to that base C++ name.  Methods can be overridden
 * by implementing in a subclass.
 *
 * @see QObjectName
 */
ASTNameReference (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/ASTNameReference.java)/**
 * Some Qt elements are introduced with empty macro expansions.  The Qt linkage handles this
 * by creating a new name and then adding it as a reference to the C++ language element.
 * This utility helps by containing that C++ name and the location of the Qt name.
 */
IQtPDOMCodec (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/IQtPDOMCodec.java)/**
 * A utility interface for encoding and decoding fixed-sized elements to and
 * from the Database.
 */
QGadgetName (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QGadgetName.java)/**
 * QGadgets are C++ classes that have been annotated with Qt marker macros.  This class is
 * used to introduce the QGadget to the Qt linkage.  The only feature of Q_GADGET is the
 * ability to host Q_ENUMs.
 */
QObjectName (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QObjectName.java)/**
 * QObjects are C++ classes that have been annotated with Qt marker macros.  This class is
 * used to introduce the QObject to the Qt linkage.
 */
QtASTClass (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QtASTClass.java)/**
 * The AST for a QObject is separated into regions based on macro expansions.  These
 * regions determine the Qt kind for methods that are declared within them.
 * <p>
 * This utility class makes one pass over the C++ class specification to identify
 * all such regions.  It also provides an iterator that can be used while examining
 * the class spec's members.
 */
QtASTImageLocation (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QtASTImageLocation.java)/**
 * The location of the signal/slot reference is stored as the location of the parent
 * macro expansion + an offset, which is the number of characters between the start
 * of the expansion and the start of the argument (including whitespace).  E.g. in,
 *
 * <pre>
 * MACRO( expansionParameter )
 * ^      ^                ^ c: end of reference name
 * |      +----------------- b: start of reference name
 * +------------------------ a: start of macro expansion
 * </pre>
 *
 * The offset is b - a and length is c - b.  This means that the result of 'Find
 * References' will highlight just "parameter".
 */
QtPDOMArray (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QtPDOMArray.java)/**
 * A utility class for storing a fixed-size list of fixed-size elements into the Database.
 */
QtPDOMNameIndex (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QtPDOMNameIndex.java)/**
 * A data structure for storing lists of PDOMNames that are indexed by a String key.
 * This is equivalent to the java type Map<String, List<PDOMName>>.
 */
All (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QtPDOMVisitor.java)/**
	 * Collects all nodes that match the given type.  This could be used, for example, to get
	 * all QtPDOMQObject's from the index.
	 */
IFilter (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QtPDOMVisitor.java)/**
	 * A simple interface that is used to select node's from the index based on specific
	 * criteria.
	 */
PDOMNamedNodeFilter (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QtPDOMVisitor.java)/**
	 * A filter that selects nodes based on their name.
	 */
Find (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QtPDOMVisitor.java)/**
	 * A utility class that searches the index for all nodes that match the given filter.
	 */
QtPDOMVisitor (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/pdom/QtPDOMVisitor.java)/**
 * A Qt-specific specialization of the generic PDOMVisitor.  This class provides
 * an empty implementation of {@link #leave(IPDOMNode)}, but required implementations to
 * provide {@link #visit(IPDOMNode)}.  The class also provides a few commonly required
 * implementations.
 */
HomebrewQtInstallProvider (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/provider/HomebrewQtInstallProvider.java)/**
 * QtInstall provider for qt out of Homebrew. Unfortunately they don't put it on the path so we have
 * to look where they put it.
 */
LinuxQtInstallProvider (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/provider/LinuxQtInstallProvider.java)/**
 * Qt install provider that looks for qmake on /usr/bin
 */
Msys2QtInstallProvider (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/provider/Msys2QtInstallProvider.java)/**
 * QtInstall provider for Qt in MSYS2. Use the registry to find out where MSYS2 is installed.
 */
QtInstallProvider (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/provider/QtInstallProvider.java)/**
 * Qt Install provider that attempts to find the Qt package as installed using Qt's own installer.
 */
QmlASTNodeHandler (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/QmlASTNodeHandler.java)/**
 * Translates a JavaScript {@link Bindings} object into a QML AST. This class employs {@link java.lang.reflect.Proxy} in order to
 * dynamically create the AST at runtime.
 * <p>
 * To begin translation simply call the static method <code>createQmlASTProxy</code>. The AST is translated only when it needs to be
 * (i.e. when one of its 'get' methods are called).
 */
QtFunctionCall (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/QtFunctionCall.java)/**
 * Extracts required information from FunctionCallExpressions that call
 * QObject::connect.  This implementation handles all overloads of QObject::connect
 * except the QMetaMethod related ones.  QMetaMethods cannot be statically analyzed
 * so they are ignored.
 * <p>
 * The binding is found by identifying the overload and then looking at the appropriate
 * parameters.
 */
QtFunctionCallUtil (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/QtFunctionCallUtil.java)/**
 * Utility for managing interaction with QObject::connect and QObject::disconnect function
 * calls.  These function calls can contain two expansions.  The first is always SIGNAL,
 * the second is either SIGNAL (which will cause the second signal to be emitted when the
 * first is received) or SLOT (which will cause the slot to be evaluate when the signal
 * is received).  This class follows the Qt convention of calling the first SIGNAL expansion
 * the sender and the second (which could be SIGNAL or SLOT) the receiver.
 *
 * In the following examples, the type of the signal is the type of the q_sender variable.
 * The type of the method is the type of the q_receiver variable.  The variable q_unrelated is
 * some instance that is not needed for either case.
 * <pre>
 * QObject::connect( q_sender, SIGNAL(destroyed()), q_receiver, SIGNAL() );
 * QObject::connect( q_sender, SIGNAL(destroyed()), q_receiver, SLOT(deleteLater()) );
 * QObject::connect( q_sender, SIGNAL(destroyed()), q_receiver, SIGNAL(), Qt::AutoConnection );
 * QObject::connect( q_sender, SIGNAL(destroyed()), q_receiver, SLOT(deleteLater()), Qt::AutoConnection );
 * q_unrelated->connect( q_sender, SIGNAL(destroyed()), q_receiver, SIGNAL() );
 * q_unrelated->connect( q_sender, SIGNAL(destroyed()), q_receiver, SLOT(deleteLater()) );
 * q_unrelated->connect( q_sender, SIGNAL(destroyed()), q_receiver, SIGNAL(), Qt::AutoConnection );
 * q_unrelated->connect( q_sender, SIGNAL(destroyed()), q_receiver, SLOT(deleteLater()), Qt::AutoConnection );
 *
 * q_receiver->connect( q_sender, SIGNAL(destroyed()), SIGNAL() );
 * q_receiver->connect( q_sender, SIGNAL(destroyed()), SLOT() );
 * q_receiver->connect( q_sender, SIGNAL(destroyed()), SIGNAL(), Qt::AutoConnection );
 * q_receiver->connect( q_sender, SIGNAL(destroyed()), SLOT(), Qt::AutoConnection );
 *
 * QObject::disconnect( q_sender, SIGNAL(), q_receiver, SIGNAL() );
 * QObject::disconnect( q_sender, SIGNAL(), q_receiver, SLOT() );
 * q_unrelated->disconnect( q_sender, SIGNAL(), q_receiver, SIGNAL() );
 * q_unrelated->disconnect( q_sender, SIGNAL(), q_receiver, SLOT() );
 *
 * q_sender->disconnect( SIGNAL(), q_receiver, SIGNAL() );
 * q_sender->disconnect( SIGNAL(), q_receiver, SLOT() );
 * q_sender->disconnect( SIGNAL(), q_receiver );
 * q_sender->disconnect( SIGNAL() );
 * q_sender->disconnect();
 * </pre>
 */
QtIncludePaths (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/QtIncludePaths.java)/**
 * Discovers and persists the list of Qt include paths for a particular installation of
 * Qt.  The Qt installation is described by the path to qmake.
 * <p>
 * Qt uses a tool called qmake to generate makefiles for Qt projects.  The tool has a
 * query mode that can be used to discover information about the Qt installation.  Here
 * qmake is used to build a list of all installed Qt include paths.
 * <p>
 * These paths are persisted into a file called language-settings.xml in the workspace
 * metadata area.
 *
 * @see QtIncludePathsProvider
 */
QtIncludePathsProvider (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/QtIncludePathsProvider.java)/**
 * This provider uses persistent cache to store the include paths for different
 * Qt installations.  A Qt installation is uniquely identified by the path to
 * the qmake binary within the installation.
 * <p>
 * This result is shared among all Build Configurations that use the provider
 * with the same value for the QMAKE environment variable.
 */
QtKeywords (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/QtKeywords.java)/**
 * Declares constants related to tokens that are special in Qt applications.
 */
QtMethodReference (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/QtMethodReference.java)/**
 * Qt signals and slots are referenced using the SIGNAL and SLOT macros.  The expansion
 * parameter is the signature of the signal or slot and they are associated with a type.
 * This utility class is used to convert from these AST nodes to an IASTName that can be
 * used as a reference to the IBinding for the C++ method.
 */
QtMethodUtil (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/internal/qt/core/QtMethodUtil.java)/**
 * A collection of utility functions for dealing with Qt methods.  A Qt method is a normal
 * C++ method that has been annotated with empty macro expansions.
 */
IQtBuildConfiguration (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/IQtBuildConfiguration.java)/**
 * Qt specific build configuration settings.
 *
 * @noimplement
 */
IQtInstall (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/IQtInstall.java)/**
 * Represents an installation of the Qt SDK. Qt installs are defined by the path
 * to the qmake executable.
 *
 * @noimplement
 */
IQtInstallListener (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/IQtInstallListener.java)/**
 * @since 2.1
 */
IQtInstallManager (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/IQtInstallManager.java)/**
 * The manager for Qt Installs. Qt Installs are Qt installation trees that are produced in a Qt
 * platform build. They have a spec which selects the os and cpu architecture and are managed by an
 * instance of the qmake builder.
 *
 * @noimplement
 */
IPosition (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/location/IPosition.java)/**
 * Stores a line/offset pair as integers.
 */
ISourceLocation (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/location/ISourceLocation.java)/**
 * Represents a location in a source file. Uses the {@link IPosition} interface to store the start and end locations as a
 * line/offset pair.
 */
IQDirAST (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirAST.java)/**
 * The main entry point into the qmldir AST. This interface contains a list of Commands specified within the qmldir file that it
 * represents.
 */
IQDirASTNode (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirASTNode.java)/**
 * The base type for all qmldir AST nodes. Contains methods for retrieving a node's positional information.
 */
IQDirClassnameCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirClassnameCommand.java)/**
 * An AST Node representing a Classname Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirCommand.java)/**
 * The base interface for all qmldir AST nodes that function as commands.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirCommentCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirCommentCommand.java)/**
 * An AST Node representing a Comment Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirDependsCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirDependsCommand.java)/**
 * An AST Node representing a Depends Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirDesignerSupportedCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirDesignerSupportedCommand.java)/**
 * An AST Node representing a Designer Supported Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirInternalCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirInternalCommand.java)/**
 * An AST Node representing an Internal Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirModuleCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirModuleCommand.java)/**
 * An AST Node representing a Module Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirPluginCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirPluginCommand.java)/**
 * An AST Node representing a Plugin Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirResourceCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirResourceCommand.java)/**
 * An AST Node representing a Resource Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirSingletonCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirSingletonCommand.java)/**
 * An AST Node representing a Singleton Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirSyntaxError (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirSyntaxError.java)/**
 * An AST Node representing a syntax error in a qmldir file. Due to the fact that the qmldir file is so simple, a syntax error will
 * only occur at the command level while the parser jumps to the next line to recover.
 */
IQDirTypeInfoCommand (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirTypeInfoCommand.java)/**
 * An AST Node representing a Type Info Command in a qmldir file.
 *
 * @see <a href="http://doc.qt.io/qt-5/qtqml-modules-qmldir.html">Module Definition qmldir Files</a>
 */
IQDirVersion (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirVersion.java)/**
 * An AST Node representing a version String of the form &ltMajorVersion&gt.&ltMinorVersion&gt
 */
IQDirWord (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/IQDirWord.java)/**
 * An AST Node representing a set of characters that does not contain whitespace and does not start with a digit. This encompasses
 * the syntax for Identifiers, Qualified IDs, Paths, and File Names all in one parser rule.
 */
Token (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/QMLDirectoryLexer.java)/**
	 * A single matched token returned by a <code>QMLDirectoryLexer</code>. A <code>Token</code> stores information on how it was
	 * matched including the type of token, the exact text that was matched, and its position in the <code>InputStream</code> .
	 */
QMLDirectoryLexer (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/QMLDirectoryLexer.java)/**
 * Converts an <code>InputStream</code> representing a qmldir file into a stream of tokens through successive calls to
 * <code>nextToken</code>. This lexer uses regular expressions to match its 16 valid token types:
 * <ul>
 * <li><b>COMMENT</b>: A single line comment that begins with '#'
 * <li><b>MODULE</b>: Keyword 'module'
 * <li><b>TYPEINFO</b>: The keyword 'typeinfo'
 * <li><b>SINGLETON</b>: The keyword 'singleton'
 * <li><b>INTERNAL</b>: The keyword 'internal'
 * <li><b>PLUGIN</b>: The keyword 'plugin'
 * <li><b>CLASSNAME</b>: The keyword 'classname'
 * <li><b>DEPENDS</b>: The keyword 'depends'
 * <li><b>DESIGNERSUPPORTED</b>: The keyword 'designersupported'
 * <li><b>WORD</b>: A group of characters that form an identifier, filename, or path
 * <li><b>DECIMAL</b>: A number of the form [0-9]+ '.' [0-9]+
 * <li><b>INTEGER</b>: An integer of the form [0-9]+
 * <li><b>WHITESPACE</b>: A group of whitespace characters (not including newlines)
 * <li><b>COMMAND_END</b>: A newline character
 * <li><b>UNKNOWN</b>: A group of characters that does not match any of the preceding tokens
 * <li><b>EOF</b>: End of File
 * </ul>
 */
SyntaxError (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/QMLDirectoryParser.java)/**
	 * An exception thrown when a <code>QMLDirectoryParser</code> encounters a syntax error. This class stores information on the
	 * offending token as well as the node the parser was working on before it failed (if available).
	 */
QMLDirectoryParser (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmldir/QMLDirectoryParser.java)/**
 * Converts an <code>InputStream</code> representing a qmldir file into an Abstract Syntax Tree. Uses the {@link QMLDirectoryLexer}
 * under the hood to match tokens which it then uses to construct the AST. Also, a <code>QMLDirectoryParser</code> has the ability
 * to skip over syntax errors and include them in its AST rather than returning upon the first error.
 */
IJSArrayExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSArrayExpression.java)/**
 * A JavaScript array expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#arrayexpression">ESTree
 * Specification</a>
 */
IJSAssignmentExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSAssignmentExpression.java)/**
 * A JavaScript assignment expression from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#assignmentexpression">ESTree Specification</a>
 */
IJSBinaryExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSBinaryExpression.java)/**
 * A JavaScript binary expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#binaryexpression">ESTree
 * Specification</a>
 */
IJSBlockStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSBlockStatement.java)/**
 * A JavaScript block statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#blockstatement">ESTree
 * Specification</a>
 */
IJSBreakStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSBreakStatement.java)/**
 * A JavaScript break statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#breakstatement">ESTree
 * Specification</a>
 */
IJSCallExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSCallExpression.java)/**
 * A JavaScript call expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#callexpression">ESTree
 * Specification</a>
 */
IJSCatchClause (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSCatchClause.java)/**
 * A JavaScript catch clause from the <a href="https://github.com/estree/estree/blob/master/spec.md#catchclause">ESTree
 * Specification</a>
 */
IJSConditionalExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSConditionalExpression.java)/**
 * A JavaScript conditional expression from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#conditionalexpression">ESTree Specification</a>
 */
IJSContinueStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSContinueStatement.java)/**
 * A JavaScript continue statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#continuestatement">ESTree
 * Specification</a>
 */
IJSDebuggerStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSDebuggerStatement.java)/**
 * A JavaScript debugger statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#debuggerstatement">ESTree
 * Specification</a>
 */
IJSDeclaration (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSDeclaration.java)/**
 * A JavaScript declaration from the <a href="https://github.com/estree/estree/blob/master/spec.md#declarations">ESTree
 * Specification</a>
 */
IJSDoWhileStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSDoWhileStatement.java)/**
 * A JavaScript do while statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#dowhilestatement">ESTree
 * Specification</a>
 */
IJSEmptyStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSEmptyStatement.java)/**
 * An empty JavaScrit statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#emptystatement">ESTree
 * Specification</a>
 */
IJSExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSExpression.java)/**
 * A JavaScript expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#expressions">ESTree
 * Specification</a>
 */
IJSExpressionStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSExpressionStatement.java)/**
 * A JavaScript expression statement from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#expressionstatement">ESTree Specification</a>
 */
IJSForInStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSForInStatement.java)/**
 * A JavaScript for in statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#forinstatement">ESTree
 * Specification</a>
 */
IJSForStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSForStatement.java)/**
 * A JavaScript for statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#forstatement">ESTree
 * Specification</a>
 */
IJSFunction (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSFunction.java)/**
 * A JavaScript function from the <a href="https://github.com/estree/estree/blob/master/spec.md#functions">ESTree Specification</a>
 */
IJSFunctionDeclaration (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSFunctionDeclaration.java)/**
 * A JavaScript function declaration from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#functiondeclaration">ESTree Specification</a>
 */
IJSFunctionExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSFunctionExpression.java)/**
 * A JavaScript function expression from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#functionexpression">ESTree Specification</a>
 */
IJSIdentifier (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSIdentifier.java)/**
 * A JavaScript identifier from the <a href="https://github.com/estree/estree/blob/master/spec.md#identifier">ESTree
 * Specification</a>
 */
IJSIfStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSIfStatement.java)/**
 * A JavaScript if statement from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#ifstatement">ESTree Specification</a>
 */
IJSLabeledStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSLabeledStatement.java)/**
 * A JavaScript labeled statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#labeledstatement">ESTree
 * Specification</a>
 */
IJSLiteral (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSLiteral.java)/**
 * A JavaScript literal from the <a href="https://github.com/estree/estree/blob/master/spec.md#literal">ESTree Specification</a>
 */
IJSLogicalExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSLogicalExpression.java)/**
 * A JavaScript logical expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#logicalexpression">ESTree
 * Specification</a>
 */
IJSMemberExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSMemberExpression.java)/**
 * A JavaScript member expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#memberexpression">ESTree
 * Specification</a>
 */
IJSNewExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSNewExpression.java)/**
 * A JavaScript new expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#newexpression">ESTree
 * Specification</a>
 */
IJSObjectExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSObjectExpression.java)/**
 * A JavaScript object expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#objectexpression">ESTree
 * Specification</a>
 */
IJSPattern (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSPattern.java)/**
 * A JavaScript pattern from the <a href="https://github.com/estree/estree/blob/master/spec.md#patterns">ESTree Specification</a>
 */
IJSProgram (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSProgram.java)/**
 * A JavaScript program from the <a href="https://github.com/estree/estree/blob/master/spec.md#programs">ESTree Specification</a>
 */
IJSProperty (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSProperty.java)/**
 * A JavaScript object property from the <a href="https://github.com/estree/estree/blob/master/spec.md#property">ESTree
 * Specification</a>
 */
JSRegExp (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSRegExpLiteral.java)/**
	 * A JavaScript regular expression that holds a pattern and a set of flags. Both are represented as plain Strings.
	 */
IJSRegExpLiteral (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSRegExpLiteral.java)/**
 * A JavaScript regular expression literal from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#regexpliteral">ESTree Specification</a>
 */
IJSReturnStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSReturnStatement.java)/**
 * A JavaScript return statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#returnstatement">ESTree
 * Specification</a>
 */
IJSSequenceExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSSequenceExpression.java)/**
 * A JavaScript sequence expression from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#sequenceexpression">ESTree Specification</a>
 */
IJSStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSStatement.java)/**
 * A JavaScript statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#statements">ESTree
 * Specification</a>
 */
IJSSwitchCase (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSSwitchCase.java)/**
 * A JavaScript switch case from the <a href="https://github.com/estree/estree/blob/master/spec.md#switchcase">ESTree
 * Specification</a>
 */
IJSSwitchStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSSwitchStatement.java)/**
 * A JavaScript switch statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#switchstatement">ESTree
 * Specification</a>
 */
IJSThisExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSThisExpression.java)/**
 * A JavaScript this expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#thisexpression">ESTree
 * Specification</a>
 */
IJSThrowStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSThrowStatement.java)/**
 * A JavaScript throw statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#throwstatement">ESTree
 * Specification</a>
 */
IJSTryStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSTryStatement.java)/**
 * A JavaScript try statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#trystatement">ESTree
 * Specification</a>
 */
IJSUnaryExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSUnaryExpression.java)/**
 * A JavaScript unary expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#unaryexpression">ESTree
 * Specification</a>
 */
IJSUpdateExpression (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSUpdateExpression.java)/**
 * A JavaScript update expression from the <a href="https://github.com/estree/estree/blob/master/spec.md#updateexpression">ESTree
 * Specification</a>
 */
IJSVariableDeclaration (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSVariableDeclaration.java)/**
 * A JavaScript variable declaration from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#variabledeclaration">ESTree Specification</a>
 */
IJSVariableDeclarator (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSVariableDeclarator.java)/**
 * A JavaScript variable declarator from the
 * <a href="https://github.com/estree/estree/blob/master/spec.md#variabledeclarator">ESTree Specification</a>
 */
IJSWhileStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSWhileStatement.java)/**
 * A JavaScript while statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#whilestatement">ESTree
 * Specification</a>
 */
IJSWithStatement (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IJSWithStatement.java)/**
 * A JavaScript with statement from the <a href="https://github.com/estree/estree/blob/master/spec.md#withstatement">ESTree
 * Specification</a>
 */
IQmlASTNode (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/qmljs/IQmlASTNode.java)/**
 * The base node interface for all QML and JavaScript Abstract Syntax Tree elements. Conforms to the ESTree Specification as well as
 * the extra features added by Acorn.
 *
 * @see <a href="https://github.com/estree/estree/blob/master/spec.md#node-objects">ESTree Node Objects</a>
 */
QtInstallEvent (/qt/org.eclipse.cdt.qt.core/src/org/eclipse/cdt/qt/core/QtInstallEvent.java)/**
 * Event that a Qt install change has occured.
 *
 * @since 2.1
 */
Activator (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
QPropertyAttributeProposal (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/assist/QPropertyAttributeProposal.java)/**
 * An attribute-based proposal depends on the both the attribute (the previous identifier) and the
 * containing class definition.  The class definition is not needed for all attribute types, but
 * is used to build the list of proposals for attributes like READ, WRITE, etc.
 */
Identifier (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/assist/QPropertyExpansion.java)/**
	 * A small utility to store the important parts of an identifier.  This is just the starting
	 * offset and the text of the identifier.
	 */
QPropertyExpansion (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/assist/QPropertyExpansion.java)/**
 * A utility class for accessing parts of the Q_PROPERTY expansion that have already
 * been entered as well as the offset of various parts of the declaration.  This is
 * used for things like proposing only parameters that are not already used, offering
 * appropriate suggestions for a specific parameter, etc.
 */
IQMLPartitions (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/editor/IQMLPartitions.java)/**
 * Constants for the various partitions created by {@link QMLPartitionScanner}.
 */
QMLEditor (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/editor/QMLEditor.java)/**
 * Basic editor for QML. Thus far has only syntax highlighting capabilities.
 */
QMLKeywords (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/editor/QMLKeywords.java)/**
 * Constants for the various keywords used by QML and ECMA Script
 */
QMLPartitionScanner (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/editor/QMLPartitionScanner.java)/**
 * Partitions a QML document into four distinct sections:
 * <ol>
 * <li>multi-line comments</li>
 * <li>single-line comments</li>
 * <li>strings</li>
 * <li>anything else that does not fall under the aforementioned categories</li>
 * </ol>
 */
QMLSourceViewerConfiguration (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/editor/QMLSourceViewerConfiguration.java)/**
 * Performs syntax highlighting for the {@link QMLEditor}.
 */
QtProjectFileModifier (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/pro/parser/QtProjectFileModifier.java)/**
 * Allows for the manipulation of information stored in a Qt Project File. At the moment the only modifiable information is that
 * which is contained within variables such as the following:
 *
 * <pre>
 * <code>SOURCES += file.cpp \ # This is the first line with value "file.cpp"
 *     file2.cpp # This is the second line with value "file2.cpp"</code>
 * </pre>
 *
 * This class supports the following modifications to variables:
 * <ul>
 * <li><b>Add Value</b>: If the specified String does not exist in the given variable then it is added as a new line at the end of
 * the variable declaration. A line escape (\) is also inserted into the preceding line.</li>
 * <li><b>Remove Value</b>: If the specified String exists in the given variable then it is removed. The line escape character (\)
 * is also removed from the preceding line if necessary.</li>
 * <li><b>Replace Value</b>: If the specified String exists as a line in the given variable, then it is replaced with another
 * String. All spacing is preserved as only the value itself is modified.</li>
 * </ul>
 * <p>
 * Comments may appear after the line escape character (\) in a variable Declaration. For this case, replace and addition operations
 * will preserve these comments. However, a comment will not be preserved if its line is deleted during a remove operation.
 * </p>
 */
QtProjectFileParser (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/pro/parser/QtProjectFileParser.java)/**
 * Very basic parser for Qt Project Files that uses regular expressions. For now, this class only supports finding variables within
 * a Document that follow the syntax:
 *
 * <pre>
 * <code>VARIABLE_NAME += value1 \ # comment
 *     value2 \ # comment
 *     value3</code>
 * </pre>
 *
 * The assignment operator may be one of =, +=, -=, or *= in accordance with qmake syntax. Variable names are not checked for
 * semantic validity. That is, this class does not make sure the variable name is a registered qmake variable, nor that there are
 * multiple instances of a variable in the document.
 */
QtProjectVariable (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/pro/parser/QtProjectVariable.java)/**
 * Contains all information about a variable's representation in a Qt Project (.pro) File. This includes information about offsets,
 * lengths, and textual representation of various components of a variable declaration such as its:
 * <ul>
 * <li>Name, such as "SOURCES"</li>
 * <li>Assignment operator (= or +=)</li>
 * <li>Values for a particular line</li>
 * <li>Comments for a particular line</li>
 * <li>Line feeds</li>
 * <li>Line escapes (\)</li>
 * </ul>
 * Also contains the static method <code>findNextVariable(Scanner)</code> to perform the regular expressions lookup of the next
 * variable in a document.
 */
Data (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/QObjectConnectCompletion.java)/**
	 * The data used to produce the completions varies depending on the role of the
	 * parameter that is being completed.
	 */
QtProjectFileUpdateJob (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/resources/QtProjectFileUpdateJob.java)/**
 * Job that calls the <code>QtProjectFileModifier</code> after changes to resources found in Qt Projects in order to update their
 * <code>SOURCES</code> variable.
 */
QtResourceChangeListener (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/internal/qt/ui/resources/QtResourceChangeListener.java)/**
 * Detects the addition or removal of a file to a Qt project. If one of these
 * resource changes is found, it triggers an update of the project's *.pro file
 * to reflect the change.
 */
ReloadAnalyzerHandler (/qt/org.eclipse.cdt.qt.ui/src/org/eclipse/cdt/qt/ui/handlers/ReloadAnalyzerHandler.java)/**
 * Our sample handler extends AbstractHandler, an IHandler base class.
 *
 * @see org.eclipse.core.commands.IHandler
 * @see org.eclipse.core.commands.AbstractHandler
 */
QtTestPlugin (/qt/org.eclipse.cdt.qt.ui.tests/src/org/eclipse/cdt/qt/tests/QtTestPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
ReaderThread (/remote/org.eclipse.cdt.remote.core/src/org/eclipse/cdt/remote/core/RemoteProcessClosure.java)/**
	 * Thread which continuously reads from a input stream and pushes the read
	 * data to an output stream which is immediately flushed afterwards.
	 */
RemoteProcessClosure (/remote/org.eclipse.cdt.remote.core/src/org/eclipse/cdt/remote/core/RemoteProcessClosure.java)/**
 * Bundled state of a launched process including the threads linking the process
 * in/output to console documents.
 */
DsfGdbRunTestsLaunchDelegate (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/launcher/DsfGdbRunTestsLaunchDelegate.java)/**
 * Launch delegate implementation that redirects its queries to DSF.
 */
ITestsLaunchConfigurationConstants (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/launcher/ITestsLaunchConfigurationConstants.java)/**
 * Constants used for attributes in CDT Unit Testing Support launch
 * configurations.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ProcessWrapper (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/launcher/ProcessWrapper.java)/**
 * Wraps the underline process and prevent accessing to its output or error stream.
 * This wrapping is necessary to prevent handling the test module output by Console
 * because we want to handle it here.
 *
 */
RunTestsLaunchDelegate (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/launcher/RunTestsLaunchDelegate.java)/**
 * Launch delegate implementation that is used for Run mode.
 * @since 8.0
 */
TestingSessionRunner (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/launcher/TestingProcessFactory.java)/**
	 * Runs data processing for the testing process and close IO stream when it
	 * is done.
	 */
TestingProcessFactory (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/launcher/TestingProcessFactory.java)/**
 * Custom testing process factory allows to handle the output stream of the
 * testing process and prevent it from output to Console.
 */
TestsRunnerProviderInfo (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/launcher/TestsRunnerProviderInfo.java)/**
 * Provides access to the information about the Tests Runner provider plug-in
 * (id, name, description, supported features set). Also provides the access to
 * <code>ITestsRunnerProvider</code> interface (the main interface of Tests Runner
 * provider plug-in).
 */
TestsRunnerProvidersManager (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/launcher/TestsRunnerProvidersManager.java)/**
 * Collects the data from the Tests Runner provider plug-in extension points and
 * provides the convenient access to it.
 */
ITestingSessionsManagerListener (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/ITestingSessionsManagerListener.java)/**
 * Testing sessions manager listener is notified of testing sessions management.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
TestCase (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestCase.java)/**
 * Represents the test case (test) of the test hierarchy.
 */
TestCasesCounter (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestingSession.java)/**
	 * Counts the number of the test cases in tests hierarchy.
	 */
TestingSession (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestingSession.java)/**
 * Stores the information about tests running.
 */
TestingSessionsManager (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestingSessionsManager.java)/**
 * Manages all the testing sessions (creates, activates, stores history).
 */
TestItem (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestItem.java)/**
 * Common implementation for the structural item of test hierarchy (test suite
 * or test case).
 */
TestLocation (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestLocation.java)/**
 * Represents the location of the test object.
 */
TestMessage (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestMessage.java)/**
 * Represents the message that was produced during the testing process.
 */
HierarchyCopier (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestModelManager.java)/**
	 * Builds current tests hierarchy from the other one (copies only necessary
	 * information).
	 */
TestItemInserter (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestModelManager.java)/**
	 * Utility class: generalization of insertion algorithm for test suites and
	 * test cases.
	 *
	 * <p>
	 * The algorithm tries to find the place where the new item should be
	 * inserted at. If the item with such name does not exist in the current top
	 * most test suite, it should be inserted at the current position. If it
	 * already exists (at the next or previous position) then it should be moved
	 * from there to the current one.
	 * </p>
	 *
	 * @param <E> test item type (test suite or test case)
	 */
TestSuiteInserter (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestModelManager.java)/**
	 * Utility class: insertion algorithm specialization for test suites.
	 */
TestCaseInserter (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestModelManager.java)/**
	 * Utility class: insertion algorithm specialization for test cases.
	 */
TestModelManager (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestModelManager.java)/**
 * Manages the testing model (creates, fill and update it) and notifies the
 * listeners about updates.
 */
TestSuite (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/model/TestSuite.java)/**
 * Represents the test suite of the tests hierarchy.
 */
TestsRunnerPlugin (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/TestsRunnerPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
CTestingTab (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/launcher/CTestingTab.java)/**
 * A launch configuration tab that displays and edits different testing options
 * (e.g. Tests Runner provider plug-in).
 * <p>
 * This class may be instantiated. This class is not intended to be subclassed.
 * </p>
 *
 * @noextend This class is not intended to be subclassed by clients.
 */
EmptyConfigurationTabGroup (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/launcher/EmptyConfigurationTabGroup.java)/**
 * Represents an empty tab group. Actual tabs are added via the
 * <code>org.eclipse.debug.ui.launchConfigurationTabs</code> extension point.
 */
CopySelectedMessagesAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/CopySelectedMessagesAction.java)/**
 * Copies the selected test messages to the clipboard.
 */
CopySelectedTestsAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/CopySelectedTestsAction.java)/**
 * Copies the name of the selected test items (test suites or cases) to the
 * clipboard.
 */
TestRunLabelProvider (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/HistoryDropDownAction.java)/**
		 * Label provider for the dialog testing sessions list.
		 */
HistoryListDialog (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/HistoryDropDownAction.java)/**
	 * The dialog for testing sessions history management. Allows to browse,
	 * activate and remove the selected testing sessions and to set testing
	 * sessions history size limit.
	 */
HistoryAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/HistoryDropDownAction.java)/**
	 * Represents a testing sessions history item.
	 */
HistoryListAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/HistoryDropDownAction.java)/**
	 * Provides access to the history list management dialog.
	 */
ClearAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/HistoryDropDownAction.java)/**
	 * Removes the terminated testing sessions from the history list.
	 */
HistoryMenuCreator (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/HistoryDropDownAction.java)/**
	 * Represents the testing sessions history menu factory.
	 */
HistoryDropDownAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/HistoryDropDownAction.java)/**
 * Shows the testing sessions history in drop down list.
 */
MessageLevelFilterAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/MessageLevelFilterAction.java)/**
 * Represents a filtering action for test messages. It is used for all kind of
 * filters (info, warnings, errors).
 */
MessagesOrderingAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/MessagesOrderingAction.java)/**
 * Turns on/off the messages ordering by location.
 */
OpenInEditorAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/OpenInEditorAction.java)/**
 * Opens the editor in place where the currently selected message is pointed to.
 */
RedebugSelectedAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/RedebugSelectedAction.java)/**
 * Launches the new debug session for the currently selected items of test
 * hierarchy.
 */
RelaunchSelectedAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/RelaunchSelectedAction.java)/**
 * Launches the new run or debug session for the currently selected items of
 * test hierarchy.
 */
RerunAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/RerunAction.java)/**
 * Restarts the last testing session (it may be run or debug session).
 */
RerunSelectedAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/RerunSelectedAction.java)/**
 * Launches the new run session for the currently selected items of test
 * hierarchy.
 */
ScrollLockAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/ScrollLockAction.java)/**
 * Toggles the auto-scroll for tests hierarchy tree.
 */
ShowFailedOnlyAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/ShowFailedOnlyAction.java)/**
 * Toggles the filter for the passed test items.
 */
ShowFileNameOnlyAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/ShowFileNameOnlyAction.java)/**
 * Toggles the short or long view for file paths in message locations. The short
 * view shows only the file names instead of full paths.
 */
ShowNextFailureAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/ShowNextFailureAction.java)/**
 * Looks for the next failed test case in tests hierarchy (corresponding to the
 * currently selected one).
 */
ShowPreviousFailureAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/ShowPreviousFailureAction.java)/**
 * Looks for the previous failed test case in tests hierarchy (corresponding to the
 * currently selected one).
 */
ShowTestsInHierarchyAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/ShowTestsInHierarchyAction.java)/**
 * Specifies whether tests hierarchy should be shown in hierarchical or flat
 * view.
 */
ShowTimeAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/ShowTimeAction.java)/**
 * Toggles the test execution time showing in tests hierarchy viewer.
 */
StopAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/StopAction.java)/**
 * Stops running of the active testing session.
 */
TestsHierarchyCollapseAllAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/TestsHierarchyCollapseAllAction.java)/**
 * Collapses the tests hierarchy tree in the viewer.
 */
TestsHierarchyExpandAllAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/TestsHierarchyExpandAllAction.java)/**
 * Expands the tests hierarchy tree in the viewer.
 */
ToggleOrientationAction (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/ToggleOrientationAction.java)/**
 * Toggles the orientation of the view.
 */
CounterPanel (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/CounterPanel.java)/**
 * Shows a simple tests count statics information (run/error/failed).
 */
DummyUISession (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/DummyUISession.java)/**
 * Represents a simple testing session which is used for UI when there is no
 * "real" testing sessions to show (e.g. when there was no launched testing
 * session or when all of them were cleared).
 */
MessagesCollector (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/MessagesViewer.java)/**
		 * Utility class: recursively collects all the messages of the specified
		 * test item.
		 */
MessagesContentProvider (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/MessagesViewer.java)/**
	 * The content provider for the test messages viewer.
	 */
MessagesLabelProvider (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/MessagesViewer.java)/**
	 * The label provider for the test messages viewer.
	 */
MessageLevelFilter (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/MessagesViewer.java)/**
	 * Filters the required test messages by level.
	 */
MessagesViewer (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/MessagesViewer.java)/**
 * Shows the messages for the currently selected items in tests hierarchy (test
 * suites or test cases).
 */
ProgressBar (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/ProgressBar.java)/**
 * A progress bar with a red/green indication for testing success or failure.
 */
ProgressCountPanel (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/ProgressCountPanel.java)/**
 * A statistics panel that compounds counter panel and red/green progress bar.
 * Depending on orientation it may layout them vertically or horizontally.
 */
ResultsPanel (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/ResultsPanel.java)/**
 * The main widget of testing results view. It compounds tests hierarchy and
 * messages viewer. Depending on orientation it may layout them vertically or
 * horizontally.
 */
ResultsView (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/ResultsView.java)/**
 * Represents a view part showing the testing results (count statistics,
 * red/green bar, tests hierarchy and test messages).
 */
TestPathUtils (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/TestPathUtils.java)/**
 * The utilities collection to work with the test paths for items in test
 * hierarchy.
 */
TestCasesCollector (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/TestsHierarchyViewer.java)/**
		 * Utility class: recursively collects all the test cases of the
		 * specified test item.
		 *
		 * It is used for flat view of tests hierarchy.
		 */
TestTreeContentProvider (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/TestsHierarchyViewer.java)/**
	 * The content provider for the tests hierarchy viewer.
	 */
TestLabelProvider (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/TestsHierarchyViewer.java)/**
	 * The label provider for the tests hierarchy viewer.
	 */
FailedOnlyFilter (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/TestsHierarchyViewer.java)/**
	 * Filters passed test cases and test suites.
	 */
TestsHierarchyViewer (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/TestsHierarchyViewer.java)/**
 * Shows the tests hierarchy in a flat or hierarchical view.
 */
UIChangesCache (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/UIUpdater.java)/**
	 * Storage for the UI changes that should be done on update.
	 */
UpdateUIJob (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/UIUpdater.java)/**
	 * A job that makes an UI update periodically.
	 */
SessionListener (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/UIUpdater.java)/**
	 * Listener for the changes in active testing session.
	 */
TestingSessionsManagerListener (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/UIUpdater.java)/**
	 * Listener to handle active testing session change.
	 */
UIUpdater (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/UIUpdater.java)/**
 * Tracks and collects the changes in active testing session and updates the UI
 * periodically. It allows to significantly improve the UI performance.
 */
BaseTestsLaunchDelegate (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/launcher/BaseTestsLaunchDelegate.java)/**
 * Launch delegate implementation that redirects its queries to the preferred
 * launch delegate, correcting the arguments attribute (to take into account
 * auto generated test module parameters) and setting up the custom process
 * factory (to handle testing process IO streams).
 */
ITestsRunnerConstants (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/launcher/ITestsRunnerConstants.java)/**
 * Constants used for attributes in CDT Tests Runner launch configurations.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 */
ITestsRunnerProvider (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/launcher/ITestsRunnerProvider.java)/**
 * The interface for a Tests Runner provider plug-in.
 *
 * <p>
 * Clients may implement this interface.
 * </p>
 */
ITestsRunnerProviderInfo (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/launcher/ITestsRunnerProviderInfo.java)/**
 * Describes the Tests Runner input provider plug-in, its requirements and
 * features provided.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
IModelVisitor (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/IModelVisitor.java)/**
 * Interface to the visitor through the test model.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITestCase (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/ITestCase.java)/**
 * Interface to the test case (test) of the test hierarchy.
 *
 * Test cases stores the name, status, testing time and messages.
 * Also has the reference to the parent test suite (if any).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITestingSession (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/ITestingSession.java)/**
 * Stores the information about tests running.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITestingSessionListener (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/ITestingSessionListener.java)/**
 * Testing session listener is notified of testing process going.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITestItem (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/ITestItem.java)/**
 * Base interface to the structural item of test hierarchy (test suite or test
 * case).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITestLocation (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/ITestLocation.java)/**
 * Describes the location of the test object.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITestMessage (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/ITestMessage.java)/**
 * Describes the message that was produced during the testing process.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITestModelAccessor (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/ITestModelAccessor.java)/**
 * Provides an access to the tests model.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITestModelUpdater (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/ITestModelUpdater.java)/**
 * The interface to easily build or update testing model.
 * It is intended to use from the Tests Runner provider plug-in.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
ITestSuite (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/ITestSuite.java)/**
 * Interface to the test suite of the tests hierarchy.
 * Test suites group the test cases and the other test suites.
 * They also provides group operations (e.g. status or execution time access).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 */
TestingException (/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/model/TestingException.java)/**
 * Represents a failure in the Tests Runner operations.
 */
BoostTestsRunnerPlugin (/testsrunner/org.eclipse.cdt.testsrunner.boost/src/org/eclipse/cdt/testsrunner/internal/boost/BoostTestsRunnerPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
BoostTestsRunnerProvider (/testsrunner/org.eclipse.cdt.testsrunner.boost/src/org/eclipse/cdt/testsrunner/internal/boost/BoostTestsRunnerProvider.java)/**
 * The Tests Runner provider plug-in to run tests with Boost.Test framework.
 *
 * Configures the test module to output in XML format, parses the output and
 * provides the data for the Tests Runner Core.
 *
 * @note There is a note about Tests Runner provider plug-in accuracy. Communication
 * between Boost test module and Boost Tests Runner provider plug-in is done through
 * standard output (which is buffered by default). Boost.Test (at least current
 * version - 1.48.0) does not provide a way to flush the data about tests
 * execution when they are available, so there may be a delay between test event
 * happening (e.g. test case is started) and its displaying in the results view.
 * The possible solution is to turn off the standard output buffering like this:
 * <pre>
 *     static struct DisableStdCoutBuffering
 *     {
 *         DisableStdCoutBuffering()
 *         {
 *             std::cout.setf(std::ios_base::unitbuf);
 *         }
 *     } s_disableStdCoutBuffering;
 * </pre>
 * It will make the results view showing progress more accurate.
 */
BoostXmlLogHandler (/testsrunner/org.eclipse.cdt.testsrunner.boost/src/org/eclipse/cdt/testsrunner/internal/boost/BoostXmlLogHandler.java)/**
 * Parses the Boost.Test XML log and notifies the Tests Runner Core about how
 * the testing process is going.
 */
GoogleTestsRunnerPlugin (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/GoogleTestsRunnerPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
GoogleTestsRunnerProvider (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/GoogleTestsRunnerProvider.java)/**
 * The Tests Runner provider plug-in to run tests with Google Testing framework.
 *
 * Parses the text test module to output and provides the data for the Tests
 * Runner Plug-In.
 */
State (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/OutputHandler.java)/**
	 * Base class for the FSM internal state.
	 */
TestSuiteStart (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/OutputHandler.java)/**
	 * The state is activated when a new test suite is started.
	 */
TestCaseStart (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/OutputHandler.java)/**
	 * The state is activated when a new test case is started.
	 */
ErrorMessageLocation (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/OutputHandler.java)/**
	 * The state is activated when an error message's location is started.
	 */
ErrorMessage (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/OutputHandler.java)/**
	 * The state is activated when an error message text is started or continued.
	 */
TestTrace (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/OutputHandler.java)/**
	 * The state is activated when a test trace is started or continued.
	 */
TestCaseEnd (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/OutputHandler.java)/**
	 * The state is activated when a test case is finished.
	 */
TestSuiteEnd (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/OutputHandler.java)/**
	 * The state is activated when a test suite is finished.
	 */
OutputHandler (/testsrunner/org.eclipse.cdt.testsrunner.gtest/src/org/eclipse/cdt/testsrunner/internal/gtest/OutputHandler.java)/**
 * <p>
 * Parses the output of Google Testing Framework and notifies the Tests Runner
 * Core about how the testing process is going.
 * </p>
 * <p>
 * Unfortunately, gtest does not provide a realtime XML output (yes, it has XML
 * output, but it is generated after testing process is done), so we have to
 * parse its output that is less reliable.
 * </p>
 * <p>
 * The parsing is done with a simple FSM (Final State Machine). There is an
 * internal state that changes when input tokens (gtest output lines) come.
 * There is a transitions table that is used to determine what is the next state
 * depending on the current one and the input token. The state may define
 * onEnter and onExit actions to do the useful job.
 * </p>
 */
QtTestsRunnerPlugin (/testsrunner/org.eclipse.cdt.testsrunner.qttest/src/org/eclipse/cdt/testsrunner/internal/qttest/QtTestsRunnerPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
QtTestsRunnerProvider (/testsrunner/org.eclipse.cdt.testsrunner.qttest/src/org/eclipse/cdt/testsrunner/internal/qttest/QtTestsRunnerProvider.java)/**
 * The Tests Runner provider plug-in to run tests with Qt Test library.
 *
 * Configures the test module to output in XML format, parses the output and
 * provides the data for the Tests Runner Plug-in.
 */
QtXmlLogHandler (/testsrunner/org.eclipse.cdt.testsrunner.qttest/src/org/eclipse/cdt/testsrunner/internal/qttest/QtXmlLogHandler.java)/**
 * Parses the Qt Test XML log and notifies the Tests Runner Core about how the
 * testing process is going.
 *
 * @note There is a terminology conflict between Qt Test library and Test
 * Runner. Qt Test's "test case" is a "test suite" in Test Runner's terminology,
 * Qt's "test function" is a "test case", the "incident" and "message" are
 * "test messages". Be careful with it!
 */
TAPTestsRunnerPlugin (/testsrunner/org.eclipse.cdt.testsrunner.tap/src/org/eclipse/cdt/testsrunner/internal/tap/TAPTestsRunnerPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
TAPTestsRunnerProvider (/testsrunner/org.eclipse.cdt.testsrunner.tap/src/org/eclipse/cdt/testsrunner/internal/tap/TAPTestsRunnerProvider.java)/**
 * The Tests Runner provider plug-in to run tests with the Test Anything
 * Protocol.
 *
 * <p>
 * Parses the standard output of an application for TAP conforming output.
 *
 * <p>
 * The YAML output isn't parsed, but logged like any unknown output. As an
 * unofficial extension, any lines with gcc compatible diagnostic output of the
 * kind
 *
 * <pre>
 * &lt;filename&gt;: (error|warning|info): ...
 * &lt;filename&gt;:&lt;line&gt;: (error|warning|info): ...</pre>
 *
 * <p>
 * will be reported with the correct level and location.
 *
 * <p>
 * As with the Boost test runner, the <tt>stdout</tt> buffering might delay
 * test output if not disabled by
 *
 * <pre>
 * setvbuf(stdout, NULL, _IONBF, 0);</pre>
 */
TestModelManagerBaseReorderingTestCase (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/core/TestModelManagerBaseReorderingTestCase.java)/**
 * Base test case for test suites & test cases reordering in TestModelManager.
 */
TestModelManagerCasesReorderingTestCase (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/core/TestModelManagerCasesReorderingTestCase.java)/**
 * Tests on the test cases reordering in TestModelManager.
 */
TestModelManagerSuitesReorderingTestCase (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/core/TestModelManagerSuitesReorderingTestCase.java)/**
 * Tests on the test suites reordering in TestModelManager.
 */
AutomatedIntegrationSuite (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/test/AutomatedIntegrationSuite.java)/**
 * Test suite with all the tests on Tests Runner.
 */
TestsRunnerTestActivator (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/test/TestsRunnerTestActivator.java)/**
 * The activator class controls the plug-in life cycle
 */
BaseTestCase (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/testsrunners/BaseTestCase.java)/**
 * Base test case for Tests Runner provider plug-ins testing.
 */
BoostTestCase (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/testsrunners/BoostTestCase.java)/**
 * Tests for {@see BoostTestsRunner} class
 */
GoogleTestCase (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/testsrunners/GoogleTestCase.java)/**
 * Tests for {@see GoogleTestsRunner} class
 */
MockTestModelUpdater (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/testsrunners/MockTestModelUpdater.java)/**
 * Mock for the {@see ITestModelUpdater}.
 */
QtTestCase (/testsrunner/org.eclipse.cdt.testsrunner.tests/src/org/eclipse/cdt/testsrunner/testsrunners/QtTestCase.java)/**
 * Test for {@see QtTestsRunner} class
 */
Activator (/toolchains/arduino/org.eclipse.cdt.arduino.ui/src/org/eclipse/cdt/arduino/ui/internal/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
FormTextHoverManager (/toolchains/arduino/org.eclipse.cdt.arduino.ui/src/org/eclipse/cdt/arduino/ui/internal/FormTextHoverManager.java)/**
 * A utility class for showing rich JDT-style HTML content in tool tip hovers. This class is final
 * to avoid long term API commitments. If you feel the need to specialize it, please open a bugzilla
 * to explain what your use case and requirements.
 */
DOMToUPCTokenMap (/upc/org.eclipse.cdt.core.parser.upc/src/org/eclipse/cdt/core/dom/parser/upc/DOMToUPCTokenMap.java)/**
 * Maps token kinds from CPreprocessor to the tokens kinds
 * created by LPG.
 *
 * TODO UPC keywords need to be syntax highlighted
 *
 * @author Mike Kucera
 */
UPCASTNodeFactory (/upc/org.eclipse.cdt.core.parser.upc/src/org/eclipse/cdt/core/dom/parser/upc/UPCASTNodeFactory.java)/**
 * Creates AST nodes that are specific to the UPC parser.
 *
 * The methods in ASTNodeFactory that build nodes for declaration
 * specifiers are overridden here to replace those nodes with the UPC nodes for
 * declaration specifiers. These UPC specific nodes add support
 * for 'strict', 'relaxed' and 'shared'.
 */
UPCParserActionLayoutQualifier (/upc/org.eclipse.cdt.core.parser.upc/src/org/eclipse/cdt/core/dom/parser/upc/UPCParserAction.java)/**
	 * Temporary object used during the parsing of UPC declaration specifiers.
	 * Stored temporarily on the astStack, but does not become part of the AST.
	 * Makes parsing of layout qualifiers easier.
	 *
	 * @author Mike
	 */
UPCParserAction (/upc/org.eclipse.cdt.core.parser.upc/src/org/eclipse/cdt/core/dom/parser/upc/UPCParserAction.java)/**
 * Extension to the C99ParserAction that adds support fot building
 * an AST with UPC specific nodes.
 */
UPCLanguage (/upc/org.eclipse.cdt.core.parser.upc/src/org/eclipse/cdt/core/dom/upc/UPCLanguage.java)/**
 * Implementation of the ILanguage extension point, adds UPC as a language to CDT.
 *
 * @author Mike Kucera
 */
UPCTests (/upc/org.eclipse.cdt.core.parser.upc.tests/src/org/eclipse/cdt/core/parser/upc/tests/UPCTests.java)/**
 * Run the C99 tests against the UPC parser
 *
 */
UPCWizardsPlugin (/upc/org.eclipse.cdt.managedbuilder.bupc.ui/src/org/eclipse/cdt/managedbuilder/bupc/ui/UPCWizardsPlugin.java)/**
 * Based on plugin class for PLDT Wizards (MPI & OpenMP)
 */
NameCollector (/util/org.eclipse.cdt.util/src/org/eclipse/cdt/internal/core/parser/util/DOMSearchUtil.java)/**
	 * The NameCollector used to get IASTNames from an IASTNode.
	 */
DOMSearchUtil (/util/org.eclipse.cdt.util/src/org/eclipse/cdt/internal/core/parser/util/DOMSearchUtil.java)/**
 * Utility class to have commonly used algorithms in one place for searching with the DOM.
 *
 * @author dsteffle
 */
Extension (/visualizer/org.eclipse.cdt.visualizer.core/src/org/eclipse/cdt/visualizer/core/Extension.java)/** Facade/utility class for dealing with Eclipse extensions. */
ExtensionElement (/visualizer/org.eclipse.cdt.visualizer.core/src/org/eclipse/cdt/visualizer/core/ExtensionElement.java)/** Facade/utility class for dealing with Eclipse extensions. */
CDTVisualizerCorePlugin (/visualizer/org.eclipse.cdt.visualizer.core/src/org/eclipse/cdt/visualizer/core/plugin/CDTVisualizerCorePlugin.java)/**
 * CDT visualizer core plugin class.
 *
 * This plugin contains the non-UI components of the visualizer framework.
 */
ResourceManager (/visualizer/org.eclipse.cdt.visualizer.core/src/org/eclipse/cdt/visualizer/core/ResourceManager.java)/**
 * Plugin resource manager.
 * This class should be instanced in the plugin's "start()" method,
 * and disposed in the "stop()" method.
 */
BarGraphicObject (/visualizer/org.eclipse.cdt.visualizer.examples/src/org/eclipse/cdt/visualizer/examples/problemvisualizer/BarGraphicObject.java)/**
 * A class that draws a bar or a bar outline in the specified color.
 */
Messages (/visualizer/org.eclipse.cdt.visualizer.examples/src/org/eclipse/cdt/visualizer/examples/problemvisualizer/Messages.java)/**
 * Preference strings.
 */
CharStat (/visualizer/org.eclipse.cdt.visualizer.examples/src/org/eclipse/cdt/visualizer/examples/sourcegraph/SourceGraphControl.java)/** Data structure used to hold character stats. */
SourceGraphControl (/visualizer/org.eclipse.cdt.visualizer.examples/src/org/eclipse/cdt/visualizer/examples/sourcegraph/SourceGraphControl.java)/** Simple control that displays a graph based on a source text selection. */
VisualizerExamplesPlugin (/visualizer/org.eclipse.cdt.visualizer.examples/src/org/eclipse/cdt/visualizer/examples/VisualizerExamplesPlugin.java)/**
 * The activator class controls the plug-in life cycle
 */
BufferedCanvas (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/canvas/BufferedCanvas.java)/** Canvas control with double-buffering support. */
GraphicCanvas (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/canvas/GraphicCanvas.java)/**
 * Viewer canvas -- base class for canvas that displays a collection
 * of persistent, repositionable graphic objects.
 *
 * Note: painting is done in order objects were added,
 * so objects added last are drawn "on top" of others.
 * Use raise/lower methods to change the object z-ordering, if needed.
 */
GraphicCanvasVisualizer (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/canvas/GraphicCanvasVisualizer.java)/**
 * Viewer canvas -- base class for canvas that displays a collection
 * of persistent, repositionable graphic objects.
 *
 * Note: painting is done in order objects were added,
 * so objects added last are drawn "on top" of others.
 * Use raise/lower methods to change the object z-ordering, if needed.
 */
GraphicObject (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/canvas/GraphicObject.java)/**
 * Graphic object base class.
 * Base class for objects that can be displayed and manipulated on a GraphicCanvas.
 */
IGraphicObject (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/canvas/IGraphicObject.java)/**
 * An object that can be displayed and manipulated on a GraphicCanvas.
 */
ITooltipProvider (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/canvas/ITooltipProvider.java)/**
 * Interface that can be implemented by objects that want to provide tooltips.
 * @since 1.1
 */
VirtualBoundsGraphicObject (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/canvas/VirtualBoundsGraphicObject.java)/**
 * Graphic object that can be used as a container for child objects. Each object
 * is sized and positioned in virtual units, and positioned relative to the parent
 * object's position. Setting the real (pixel) bounds of an object recursively sets
 * the bounds of any contained child objects, taking into account its virtual
 * bounds, compared to its parent.
 * @since 1.1
 */
IVisualizerViewerListener (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/events/IVisualizerViewerListener.java)/**
 * IVisualizerViewer event listener.
 */
VisualizerViewerEvent (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/events/VisualizerViewerEvent.java)/**
 * IVisualizerViewer event
 */
IVisualizer (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/IVisualizer.java)/**
 * CDT Visualizer interface.
 *
 * An IVisualizer encapsulates a specific graphic presentation of the
 * currently selected object (launch, target, etc.).
 *
 * It knows how to create a Control to draw on, which is displayed by
 * the Visualizer Viewer, and also knows how to draw its presentation on
 * that control.
 *
 * A visualizer can be generic (e.g. knows how to draw any kind of
 * launch) or specific (e.g. specialized for a particular type of
 * launch or execution target). The viewer automatically chooses
 * the most specific IVisualizer that reports it is able to render
 * the current selection.
 */
IVisualizerViewer (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/IVisualizerViewer.java)/**
 * CDT Visualizer Viewer interface.
 *
 * An IVisualizerViewer is a simple container for multiple
 * IVisualizers, where the currently selected IVisualizer
 * determines which IVisualizer control is displayed in the viewer.
 */
CDTVisualizerUIPlugin (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/plugin/CDTVisualizerUIPlugin.java)/**
 * CDT visualizer UI plugin class.
 *
 * This plugin contains the UI components of the visualizer framework.
 */
TestCanvas (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/test/TestCanvas.java)/**
 * Default canvas control, used by TestCanvasVisualizer.
 */
TestCanvasVisualizer (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/test/TestCanvasVisualizer.java)/**
 * Default visualizer, used only for testing framework.
 *
 * This view uses the CDT Visualizer framework.
 */
Colors (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/Colors.java)/**
 * Standard color constants.
 *
 * This is basically a set of cached color resources
 * for commonly-used colors.
 * These are drawn from an associated UIResourceManager.
 * The initialize() method should be called immediately
 * after you create the resource manager.
 */
Event (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/Event.java)/**
 * Base class for events
 */
GUIUtils (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/GUIUtils.java)/**
 * Assorted high-level UI utilities.
 */
ListenerList (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/ListenerList.java)/**
 * Utility class for managing a list of event listeners.
 * Maintains a list of listener instances, and dispatches events to them.
 *
 * To use this class, create a derived type that implements the raise(listener, event)
 * method to appropriately delegate an event to a listener.
 *
 * Note: it is the responsibility of the user of this class to check types
 * of listeners and events (for example, by having strongly-typed add/remove methods
 * that delegate to the add/remove methods on this class).
 */
MouseMonitor (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/MouseMonitor.java)/**
 * Monitors mouse down/move/up events on a specified control (e.g. a canvas)
 * and converts them to semantic events (click, double-click, select, drag, etc.)
 */
RunnableWithResult (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/RunnableWithResult.java)/**
 * Runnable object that returns a result object.
 *
 * This is like Future<V> from the concurrent package,
 * but with a few less bells and whistles.
 *
 * Intended to be used, for example, as follows:
 *
 * RunnableWithResult<X> runnable = new RunnableWithResult<X>() {
 *   public X call() {
 *     ... do work, return an X object ...
 *   }
 * }
 *
 * Thread thread = new Thread(runnable);
 * thread.start();
 * X result = runnable.getResult(0);
 *
 * or, to run it on the UI thread...
 *
 * GUIUtils.execAndWait(runnable);
 * X result = runnable.getResult(0);
 *
 * Note: if you're invoking this from the UI thread,
 * it's important to use execAndWait(), so that the runnable
 * gets a turn on the event loop, otherwise you'll hang the UI!
 *
 */
ScrollPanel (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/ScrollPanel.java)/**
 * Container panel that adds scrollbar(s) to a content control.
 */
SelectionManager (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/SelectionManager.java)/**
 * Selection management utility class
 */
SelectionProviderAdapter (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/SelectionProviderAdapter.java)/**
 * Wrapper for selection "providers" that don't happen to implement
 * ISelectionProvider interface.
 */
EmptySelection (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/SelectionUtils.java)/** "Empty" or undefined selection. */
SelectionUtils (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/SelectionUtils.java)/** Eclipse ISelection munging utilities. */
Timer (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/Timer.java)/**
 * Periodic event timer class.
 */
Todo (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/Todo.java)/** Counter for objects that need to track asynchronous progress. */
UIResourceManager (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/UIResourceManager.java)/**
 * Plugin resource manager.
 * Provides one-stop-shopping for UI plugin resources
 * (strings, images, fonts, colors).
 * This class should be instanced in the UI plugin's "start()" method,
 * and disposed in the "stop()" method.
 */
WorkbenchSelectionAdapter (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/util/WorkbenchSelectionAdapter.java)/**
 * Selection change event manager
 */
Visualizer (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/Visualizer.java)/**
 * Base class for IVisualizer implementations.
 */
VisualizerAction (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/VisualizerAction.java)/** Base class for visualizer actions.
 *  (Viewers are not required to use this class. This is simply a
 *  convenience wrapper for the standard Action class.)
 */
VisualizerView (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/VisualizerView.java)/**
 * CDT Visualizer View class.
 *
 * This is the default implementation of the Visualizer View.
 * It can also serve as a base class for custom visualizer views.
 *
 * The Visualizer View is a simple container with a toolbar,
 * which presents an instance of an IVisualizerViewer,
 * and mediates passing of selections to and from the viewer.
 *
 * The intent of the VisualizerView class is to encapsulate the
 * standard Eclipse workbench view support, so the viewer does
 * not have to worry about such things.
 */
VisualizerViewer (/visualizer/org.eclipse.cdt.visualizer.ui/src/org/eclipse/cdt/visualizer/ui/VisualizerViewer.java)/**
 * CDT Visualizer Viewer class.
 *
 * This is the default implementation of IVisualizerViewer.
 * It can also serve as a base class for custom visualizer viewers.
 *
 * The Visualizer Viewer is a simple container for multiple
 * IVisualizers, where the currently selected IVisualizer
 * determines which IVisualizer control is displayed in the viewer.
 *
 * The base implementation simply displays a single IVisualizer at a time.
 * One can programmatically switch selections, but there are no user
 * controls for doing so. (The intent is that derived types can add
 * various kinds of switching controls, like a combo box, etc.)
 */
Activator (/windows/org.eclipse.cdt.msw.build/src/org/eclipse/cdt/msw/build/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
MSVCBuildCommandParser (/windows/org.eclipse.cdt.msw.build/src/org/eclipse/cdt/msw/build/core/MSVCBuildCommandParser.java)/**
 * Build command parser capable to parse cl.exe command in build output and generate
 * language settings per file being compiled.
 */
MSVCToolChainProvider (/windows/org.eclipse.cdt.msw.build/src/org/eclipse/cdt/msw/build/core/MSVCToolChainProvider.java)/**
 * Toolchain provider for Microsoft's Visual C++ Compiler (MSVC).
 *
 * This implementation only supports Microsoft Build Tools 2017 and
 * the Windows 10 SDK (Kit).
 */
MSVCCommandParserOptionPage (/windows/org.eclipse.cdt.msw.build/src/org/eclipse/cdt/msw/build/ui/MSVCCommandParserOptionPage.java)/**
 * Options page for {@link MSVCBuildCommandParser}.
 */
WinDiscoveredPathInfo (/windows/org.eclipse.cdt.msw.build/src/org/eclipse/cdt/msw/build/WinDiscoveredPathInfo.java)/**
 * @author Doug Schaefer
 *
 */
WinEnvironmentVariableSupplier (/windows/org.eclipse.cdt.msw.build/src/org/eclipse/cdt/msw/build/WinEnvironmentVariableSupplier.java)/**
 * @author DSchaefer
 *
 */
WinScannerInfoCollector (/windows/org.eclipse.cdt.msw.build/src/org/eclipse/cdt/msw/build/WinScannerInfoCollector.java)/**
 * @author Doug Schaefer
 *
 */
MSVCBuildCommandParserTests (/windows/org.eclipse.cdt.msw.build.tests/src/org/eclipse/cdt/internal/msw/build/tests/MSVCBuildCommandParserTests.java)/**
 * Test cases to test build command parsers.
 */
IXlcCPPASTModifiedArrayModifier (/xlc/org.eclipse.cdt.core.lrparser.xlc/parser/org/eclipse/cdt/core/lrparser/xlc/ast/IXlcCPPASTModifiedArrayModifier.java)/**
 * Allow C99 style variable length arrays in XL C++.
 *
 */
XlcLanguagePreferences (/xlc/org.eclipse.cdt.core.lrparser.xlc/parser/org/eclipse/cdt/core/lrparser/xlc/preferences/XlcLanguagePreferences.java)/**
 * TODO trigger the indexer?
 *
 * @author Mike Kucera
 */
XlcCLanguage (/xlc/org.eclipse.cdt.core.lrparser.xlc/parser/org/eclipse/cdt/core/lrparser/xlc/XlcCLanguage.java)/**
 *
 * @author Mike Kucera
 */
XlcCPPLanguage (/xlc/org.eclipse.cdt.core.lrparser.xlc/parser/org/eclipse/cdt/core/lrparser/xlc/XlcCPPLanguage.java)/**
 *
 * @author Mike Kucera
 */
XlcCPPTokenMap (/xlc/org.eclipse.cdt.core.lrparser.xlc/parser/org/eclipse/cdt/core/lrparser/xlc/XlcCPPTokenMap.java)/**
 * Maps tokens types returned by CPreprocessor to token types
 * expected by the C++ parser.
 *
 * @author Mike Kucera
 */
XlcCTokenMap (/xlc/org.eclipse.cdt.core.lrparser.xlc/parser/org/eclipse/cdt/core/lrparser/xlc/XlcCTokenMap.java)/**
 * Maps tokens types returned by CPreprocessor to token types
 * expected by the C99 parser.
 *
 * @author Mike Kucera
 */
PrefCheckbox (/xlc/org.eclipse.cdt.core.lrparser.xlc/ui/org/eclipse/cdt/internal/core/lrparser/xlc/ui/preferences/PrefCheckbox.java)/**
 * A simple wrapper for a checkbox.
 *
 */
XlcLanguageOptionsPreferencePage (/xlc/org.eclipse.cdt.core.lrparser.xlc/ui/org/eclipse/cdt/internal/core/lrparser/xlc/ui/preferences/XlcLanguageOptionsPreferencePage.java)/**
 * TODO trigger reindex?
 *
 */
Activator (/xlc/org.eclipse.cdt.errorparsers.xlc/src/org/eclipse/cdt/errorparsers/xlc/Activator.java)/**
 * The activator class controls the plug-in life cycle
 */
TestsPlugin (/xlc/org.eclipse.cdt.errorparsers.xlc.tests/src/org/eclipse/cdt/errorparsers/xlc/tests/TestsPlugin.java)/**
 * The main plugin class to be used in the desktop.
 */
Activator (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/activator/Activator.java)/**
 * @author crecoskie
 *
 */
AbstractXLCBuildOutputParser (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/AbstractXLCBuildOutputParser.java)/**
 * @author crecoskie
 *
 */
PerFileDiscoveredPathInfo (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/PerFileXLCScannerInfoCollector.java)/**
	 * Per file DPI object
	 *
	 * @author vhirsl
	 */
PerFileXLCScannerInfoCollector (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/PerFileXLCScannerInfoCollector.java)/**
 * @author crecoskie
 *
 */
PerProjectXLCScannerInfoCollector (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/PerProjectXLCScannerInfoCollector.java)/**
 * @author laggarcia
 *
 */
XLCCommandDSC (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/util/XLCCommandDSC.java)/**
 * Class that represents a XL C/C++ compiler command and related scanner configuration
 */
XLCBuildOutputParserUtility (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/XLCBuildOutputParserUtility.java)/**
 * @author crecoskie
 *
 */
XLCPerFileBuildOutputParser (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/XLCPerFileBuildOutputParser.java)/**
 * @author crecoskie
 *
 */
XLCPerProjectBuildOutputParser (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/XLCPerProjectBuildOutputParser.java)/**
 * @author crecoskie
 *
 */
XlCSpecsConsoleParser (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/XlCSpecsConsoleParser.java)/**
 * Parses output of ppuxlc -E -v specs.c or ppuxlc -E -v specs.cpp command
 *
 * @author laggarcia
 * @since 1.0.0
 */
XlCSpecsRunSIProvider (/xlc/org.eclipse.cdt.make.xlc.core/src/org/eclipse/cdt/make/xlc/core/scannerconfig/XlCSpecsRunSIProvider.java)/**
 * @author laggarcia
 *
 */
XlcBuiltinSpecsDetector (/xlc/org.eclipse.cdt.managedbuilder.xlc.core/src/org/eclipse/cdt/managedbuilder/xlc/core/XlcBuiltinSpecsDetector.java)/**
 * Language settings provider to detect built-in compiler settings for IBM XLC compiler.
 */
XLCCorePlugin (/xlc/org.eclipse.cdt.managedbuilder.xlc.core/src/org/eclipse/cdt/managedbuilder/xlc/core/XLCCorePlugin.java)/**
 * @author crecoskie
 *
 */
PreferenceConstants (/xlc/org.eclipse.cdt.managedbuilder.xlc.ui/src/org/eclipse/cdt/managedbuilder/xlc/ui/preferences/PreferenceConstants.java)/**
 * Constant definitions for plug-in preferences
 */
PreferenceInitializer (/xlc/org.eclipse.cdt.managedbuilder.xlc.ui/src/org/eclipse/cdt/managedbuilder/xlc/ui/preferences/PreferenceInitializer.java)/**
 * Class used to initialize default preference values.
 */
XLCv8ApplicabiltyCalculator (/xlc/org.eclipse.cdt.managedbuilder.xlc.ui/src/org/eclipse/cdt/managedbuilder/xlc/ui/properties/XLCv8ApplicabiltyCalculator.java)/**
 * @author crecoskie
 *
 */
XLCv9ApplicabilityCalculator (/xlc/org.eclipse.cdt.managedbuilder.xlc.ui/src/org/eclipse/cdt/managedbuilder/xlc/ui/properties/XLCv9ApplicabilityCalculator.java)/**
 * @author crecoskie
 *
 * This applicability calculator hides/shows options that are specific to the XL compilers, v9.0
 *
 */
DynamicVariableResolver (/xlc/org.eclipse.cdt.managedbuilder.xlc.ui/src/org/eclipse/cdt/managedbuilder/xlc/ui/variables/DynamicVariableResolver.java)/**
 * @author crecoskie
 *
 */
XLCSettingsWizardPage (/xlc/org.eclipse.cdt.managedbuilder.xlc.ui/src/org/eclipse/cdt/managedbuilder/xlc/ui/wizards/XLCSettingsWizardPage.java)/**
 * @author crecoskie
 *
 */
XLCSettingsWizardRunnable (/xlc/org.eclipse.cdt.managedbuilder.xlc.ui/src/org/eclipse/cdt/managedbuilder/xlc/ui/wizards/XLCSettingsWizardRunnable.java)/**
 * @author crecoskie
 *
 */
XLCProjectMacroSupplier (/xlc/org.eclipse.cdt.managedbuilder.xlc.ui/src/org/eclipse/cdt/managedbuilder/xlc/ui/XLCProjectMacroSupplier.java)/**
 * @author crecoskie
 *
 */
XLCUIPlugin (/xlc/org.eclipse.cdt.managedbuilder.xlc.ui/src/org/eclipse/cdt/managedbuilder/xlc/ui/XLCUIPlugin.java)/**
 * The main plugin class to be used in the desktop.
 */
XLUpcSettingsWizardPage (/xlc/org.eclipse.cdt.managedbuilder.xlupc.ui/src/org/eclipse/cdt/managedbuilder/xlupc/ui/wizards/XLUpcSettingsWizardPage.java)/**
 *
 */
